{"url":"https://api.github.com/repos/apache/openjpa/compare/1.2.3...2.0.0-M3","html_url":"https://github.com/apache/openjpa/compare/1.2.3...2.0.0-M3","permalink_url":"https://github.com/apache/openjpa/compare/apache:ccfa50d...apache:0f84cfb","diff_url":"https://github.com/apache/openjpa/compare/1.2.3...2.0.0-M3.diff","patch_url":"https://github.com/apache/openjpa/compare/1.2.3...2.0.0-M3.patch","base_commit":{"sha":"ccfa50d3f0f1b60ad81bb75c4933234499dd610e","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjZmE1MGQzZjBmMWI2MGFkODFiYjc1YzQ5MzMyMzQ0OTlkZDYxMGU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2013-04-12T19:13:34Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2013-04-12T19:13:34Z"},"message":"[maven-scm] copy for tag 1.2.3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.3@1467423 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d0656e9987e83f87021e698b44eda9ffd60a38b","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d0656e9987e83f87021e698b44eda9ffd60a38b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ccfa50d3f0f1b60ad81bb75c4933234499dd610e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ccfa50d3f0f1b60ad81bb75c4933234499dd610e","html_url":"https://github.com/apache/openjpa/commit/ccfa50d3f0f1b60ad81bb75c4933234499dd610e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ccfa50d3f0f1b60ad81bb75c4933234499dd610e/comments","author":null,"committer":null,"parents":[{"sha":"eec59af323d5adee5ce160e8afbf12441ad343ef","url":"https://api.github.com/repos/apache/openjpa/commits/eec59af323d5adee5ce160e8afbf12441ad343ef","html_url":"https://github.com/apache/openjpa/commit/eec59af323d5adee5ce160e8afbf12441ad343ef"}]},"merge_base_commit":{"sha":"191f26d72d58b992ee7a6f82c6973681a3bdc275","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5MWYyNmQ3MmQ1OGI5OTJlZTdhNmY4MmM2OTczNjgxYTNiZGMyNzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:12:17Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:12:17Z"},"message":"OPENJPA-669 DBDictionary can specify the type of native sequences.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680501 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7072cb21c58630ac94e43cdefa4a038fd9875a1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7072cb21c58630ac94e43cdefa4a038fd9875a1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","html_url":"https://github.com/apache/openjpa/commit/191f26d72d58b992ee7a6f82c6973681a3bdc275","comments_url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d81f8652f85ffc83d728c92fc2262c64c64e17c","url":"https://api.github.com/repos/apache/openjpa/commits/3d81f8652f85ffc83d728c92fc2262c64c64e17c","html_url":"https://github.com/apache/openjpa/commit/3d81f8652f85ffc83d728c92fc2262c64c64e17c"}]},"status":"diverged","ahead_by":1166,"behind_by":266,"total_commits":1166,"commits":[{"sha":"ccfbe6cd3187c1a585633c32e8db9486e591a099","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjZmJlNmNkMzE4N2MxYTU4NTYzM2MzMmU4ZGI5NDg2ZTU5MWEwOTk=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:01:38Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:01:38Z"},"message":"OPENJPA-1185: check in embeddable in subquery support on behalf of Catalina\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b063f57c8718533dafd936782ca67121828d59e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b063f57c8718533dafd936782ca67121828d59e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099","html_url":"https://github.com/apache/openjpa/commit/ccfbe6cd3187c1a585633c32e8db9486e591a099","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099/comments","author":null,"committer":null,"parents":[{"sha":"a488a122cf639eb23b37ba23670758ce6b2eef40","url":"https://api.github.com/repos/apache/openjpa/commits/a488a122cf639eb23b37ba23670758ce6b2eef40","html_url":"https://github.com/apache/openjpa/commit/a488a122cf639eb23b37ba23670758ce6b2eef40"}]},{"sha":"222e01d2f3215aafd876380e3ac270c37252a95d","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyMmUwMWQyZjMyMTVhYWZkODc2MzgwZTNhYzI3MGMzNzI1MmE5NWQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:02:42Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:02:42Z"},"message":"OPENJPA-1185: criteria embeddable subquery support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804013 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e782ca96ef1416a74bfad05c43183a6ff61b9fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e782ca96ef1416a74bfad05c43183a6ff61b9fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/222e01d2f3215aafd876380e3ac270c37252a95d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/222e01d2f3215aafd876380e3ac270c37252a95d","html_url":"https://github.com/apache/openjpa/commit/222e01d2f3215aafd876380e3ac270c37252a95d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/222e01d2f3215aafd876380e3ac270c37252a95d/comments","author":null,"committer":null,"parents":[{"sha":"ccfbe6cd3187c1a585633c32e8db9486e591a099","url":"https://api.github.com/repos/apache/openjpa/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099","html_url":"https://github.com/apache/openjpa/commit/ccfbe6cd3187c1a585633c32e8db9486e591a099"}]},{"sha":"06bd0d64e7538fd2d682cc0eadb4767dac8f449b","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2YmQwZDY0ZTc1MzhmZDJkNjgyY2MwZWFkYjQ3NjdkYWM4ZjQ0OWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:53:29Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:53:29Z"},"message":"OPENJPA-1143: further clean up testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bbef2c51cfe95d253e8b87cef560d8978a21efe","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bbef2c51cfe95d253e8b87cef560d8978a21efe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","html_url":"https://github.com/apache/openjpa/commit/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b/comments","author":null,"committer":null,"parents":[{"sha":"222e01d2f3215aafd876380e3ac270c37252a95d","url":"https://api.github.com/repos/apache/openjpa/commits/222e01d2f3215aafd876380e3ac270c37252a95d","html_url":"https://github.com/apache/openjpa/commit/222e01d2f3215aafd876380e3ac270c37252a95d"}]},{"sha":"c9695c2fb9dbe35e35e6d41516727772f3370bd9","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5Njk1YzJmYjlkYmUzNWUzNWU2ZDQxNTE2NzI3NzcyZjMzNzBiZDk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-13T21:47:39Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-13T21:47:39Z"},"message":"OPENJPA-1885 Subquery restructure code\nadd more test string in TestSubquery\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4281d74c50322fe653392f77aee99ac05c127a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4281d74c50322fe653392f77aee99ac05c127a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9","html_url":"https://github.com/apache/openjpa/commit/c9695c2fb9dbe35e35e6d41516727772f3370bd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9/comments","author":null,"committer":null,"parents":[{"sha":"06bd0d64e7538fd2d682cc0eadb4767dac8f449b","url":"https://api.github.com/repos/apache/openjpa/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","html_url":"https://github.com/apache/openjpa/commit/06bd0d64e7538fd2d682cc0eadb4767dac8f449b"}]},{"sha":"3f6ab72c529e9a464801bea27ed28d8974f13cde","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmNmFiNzJjNTI5ZTlhNDY0ODAxYmVhMjdlZDI4ZDg5NzRmMTNjZGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T01:59:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T01:59:56Z"},"message":"Refactoring QueryTest class and entities\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804068 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4c7bf8aa23cac86199974dd12b21d23adbcf0ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/a4c7bf8aa23cac86199974dd12b21d23adbcf0ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f6ab72c529e9a464801bea27ed28d8974f13cde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f6ab72c529e9a464801bea27ed28d8974f13cde","html_url":"https://github.com/apache/openjpa/commit/3f6ab72c529e9a464801bea27ed28d8974f13cde","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f6ab72c529e9a464801bea27ed28d8974f13cde/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c9695c2fb9dbe35e35e6d41516727772f3370bd9","url":"https://api.github.com/repos/apache/openjpa/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9","html_url":"https://github.com/apache/openjpa/commit/c9695c2fb9dbe35e35e6d41516727772f3370bd9"}]},{"sha":"cc29d284b84c12d03e77ee63054c8e8aaead99cb","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjMjlkMjg0Yjg0YzEyZDAzZTc3ZWU2MzA1NGM4ZThhYWVhZDk5Y2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-14T05:56:51Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-14T05:56:51Z"},"message":"OPENJPA-1013: Coalesce expression type minor bug.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804084 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d061d908c0a71a851e17cc02636cfbdc043f489","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d061d908c0a71a851e17cc02636cfbdc043f489"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cc29d284b84c12d03e77ee63054c8e8aaead99cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cc29d284b84c12d03e77ee63054c8e8aaead99cb","html_url":"https://github.com/apache/openjpa/commit/cc29d284b84c12d03e77ee63054c8e8aaead99cb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cc29d284b84c12d03e77ee63054c8e8aaead99cb/comments","author":null,"committer":null,"parents":[{"sha":"3f6ab72c529e9a464801bea27ed28d8974f13cde","url":"https://api.github.com/repos/apache/openjpa/commits/3f6ab72c529e9a464801bea27ed28d8974f13cde","html_url":"https://github.com/apache/openjpa/commit/3f6ab72c529e9a464801bea27ed28d8974f13cde"}]},{"sha":"a1e2f57eb9c485235c74ae883f006e2cd05692e2","node_id":"MDY6Q29tbWl0MjA2MzY0OmExZTJmNTdlYjljNDg1MjM1Yzc0YWU4ODNmMDA2ZTJjZDA1NjkyZTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-14T05:57:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-14T05:57:31Z"},"message":"Add a method to get the original expiration time from PCData.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd1658d914ea9f5cef96db9a9f83b1fea30b3b58","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd1658d914ea9f5cef96db9a9f83b1fea30b3b58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a1e2f57eb9c485235c74ae883f006e2cd05692e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a1e2f57eb9c485235c74ae883f006e2cd05692e2","html_url":"https://github.com/apache/openjpa/commit/a1e2f57eb9c485235c74ae883f006e2cd05692e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a1e2f57eb9c485235c74ae883f006e2cd05692e2/comments","author":null,"committer":null,"parents":[{"sha":"cc29d284b84c12d03e77ee63054c8e8aaead99cb","url":"https://api.github.com/repos/apache/openjpa/commits/cc29d284b84c12d03e77ee63054c8e8aaead99cb","html_url":"https://github.com/apache/openjpa/commit/cc29d284b84c12d03e77ee63054c8e8aaead99cb"}]},{"sha":"9eb8af5a727b21f201a4930c955cdcd11a38aaaf","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYjhhZjVhNzI3YjIxZjIwMWE0OTMwYzk1NWNkY2QxMWEzOGFhYWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T15:29:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T15:29:35Z"},"message":"OPENJPA-948:\nAdding support for Ingress database (new dictionary, build config etc.).\nSubmitted by : Alan Raison\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804261 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9893ca2b6a45b38a436e504032350c882c07d71b","url":"https://api.github.com/repos/apache/openjpa/git/trees/9893ca2b6a45b38a436e504032350c882c07d71b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9eb8af5a727b21f201a4930c955cdcd11a38aaaf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9eb8af5a727b21f201a4930c955cdcd11a38aaaf","html_url":"https://github.com/apache/openjpa/commit/9eb8af5a727b21f201a4930c955cdcd11a38aaaf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9eb8af5a727b21f201a4930c955cdcd11a38aaaf/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a1e2f57eb9c485235c74ae883f006e2cd05692e2","url":"https://api.github.com/repos/apache/openjpa/commits/a1e2f57eb9c485235c74ae883f006e2cd05692e2","html_url":"https://github.com/apache/openjpa/commit/a1e2f57eb9c485235c74ae883f006e2cd05692e2"}]},{"sha":"befee1a50b3d15abccb37988adcc0f89b0ce5f5d","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlZmVlMWE1MGIzZDE1YWJjY2IzNzk4OGFkY2MwZjg5YjBjZTVmNWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:18Z"},"message":"Specify type of collection on AbstBrokerFact.getOpenBrokers()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804330 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47883a6b93bc4f6f1c2259751e40fba027f38b7b","url":"https://api.github.com/repos/apache/openjpa/git/trees/47883a6b93bc4f6f1c2259751e40fba027f38b7b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/befee1a50b3d15abccb37988adcc0f89b0ce5f5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/befee1a50b3d15abccb37988adcc0f89b0ce5f5d","html_url":"https://github.com/apache/openjpa/commit/befee1a50b3d15abccb37988adcc0f89b0ce5f5d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/befee1a50b3d15abccb37988adcc0f89b0ce5f5d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"9eb8af5a727b21f201a4930c955cdcd11a38aaaf","url":"https://api.github.com/repos/apache/openjpa/commits/9eb8af5a727b21f201a4930c955cdcd11a38aaaf","html_url":"https://github.com/apache/openjpa/commit/9eb8af5a727b21f201a4930c955cdcd11a38aaaf"}]},{"sha":"89a7f53db0e27a1f97be650fb56574dbc6bf261a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5YTdmNTNkYjBlMjdhMWY5N2JlNjUwZmI1NjU3NGRiYzZiZjI2MWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:39Z"},"message":"Refactor PersistenceTestCase to AbstractCachedEMFTestCase and AbstractPersistenceTestCase.\nDeprecate old class to allow submodules to compile (can be removed after maven repos is updated).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804331 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"edba96c9bcafa50e87d6d51f9bac8855a13a6e4f","url":"https://api.github.com/repos/apache/openjpa/git/trees/edba96c9bcafa50e87d6d51f9bac8855a13a6e4f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a","html_url":"https://github.com/apache/openjpa/commit/89a7f53db0e27a1f97be650fb56574dbc6bf261a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"befee1a50b3d15abccb37988adcc0f89b0ce5f5d","url":"https://api.github.com/repos/apache/openjpa/commits/befee1a50b3d15abccb37988adcc0f89b0ce5f5d","html_url":"https://github.com/apache/openjpa/commit/befee1a50b3d15abccb37988adcc0f89b0ce5f5d"}]},{"sha":"286f708d7dac808ebc91eaabce3041d54faf46d3","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4NmY3MDhkN2RhYzgwOGViYzkxZWFhYmNlMzA0MWQ1NGZhZjQ2ZDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:47Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:47Z"},"message":"o.a.o.p.common.utils.AbstractTestCase extends AbstractCachedEMFTestCase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804332 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35e797a00ec859d8e82e066d8a04b35795464bde","url":"https://api.github.com/repos/apache/openjpa/git/trees/35e797a00ec859d8e82e066d8a04b35795464bde"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/286f708d7dac808ebc91eaabce3041d54faf46d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/286f708d7dac808ebc91eaabce3041d54faf46d3","html_url":"https://github.com/apache/openjpa/commit/286f708d7dac808ebc91eaabce3041d54faf46d3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/286f708d7dac808ebc91eaabce3041d54faf46d3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"89a7f53db0e27a1f97be650fb56574dbc6bf261a","url":"https://api.github.com/repos/apache/openjpa/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a","html_url":"https://github.com/apache/openjpa/commit/89a7f53db0e27a1f97be650fb56574dbc6bf261a"}]},{"sha":"c8fa380048cca1b3e938b691eb25b438069e916a","node_id":"MDY6Q29tbWl0MjA2MzY0OmM4ZmEzODAwNDhjY2ExYjNlOTM4YjY5MWViMjViNDM4MDY5ZTkxNmE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:55Z"},"message":"Fixing validation test hierarchy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804333 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee7ef36afa7f3463a7082b0ccb4bcd062ad9e2a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee7ef36afa7f3463a7082b0ccb4bcd062ad9e2a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c8fa380048cca1b3e938b691eb25b438069e916a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c8fa380048cca1b3e938b691eb25b438069e916a","html_url":"https://github.com/apache/openjpa/commit/c8fa380048cca1b3e938b691eb25b438069e916a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c8fa380048cca1b3e938b691eb25b438069e916a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"286f708d7dac808ebc91eaabce3041d54faf46d3","url":"https://api.github.com/repos/apache/openjpa/commits/286f708d7dac808ebc91eaabce3041d54faf46d3","html_url":"https://github.com/apache/openjpa/commit/286f708d7dac808ebc91eaabce3041d54faf46d3"}]},{"sha":"88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4ZGNkNTgwZDhjOWY5YzRiMWJjY2ExOWY5ZDc0NjM4YWFhOWE2ODE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:30:05Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:30:05Z"},"message":"OPENJPA-1245:\nMove lockmode tests to a separate module. This allows different derby lock settings to be set on persistence-jdbc which should speed up test execution.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bad676970dc53c666ba2bbccf12ef26f275c33cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/bad676970dc53c666ba2bbccf12ef26f275c33cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681","html_url":"https://github.com/apache/openjpa/commit/88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c8fa380048cca1b3e938b691eb25b438069e916a","url":"https://api.github.com/repos/apache/openjpa/commits/c8fa380048cca1b3e938b691eb25b438069e916a","html_url":"https://github.com/apache/openjpa/commit/c8fa380048cca1b3e938b691eb25b438069e916a"}]},{"sha":"b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4YzdjZTU4YWQ1Y2UxMWEzZDExMDNkMWM3N2NhZjIyYjM3NjIzZjQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:29:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:29:34Z"},"message":"OPENJPA-1245:\nPom.xml cleanup\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804336 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0065bad26970498824e6a08f0780ac64f6e101da","url":"https://api.github.com/repos/apache/openjpa/git/trees/0065bad26970498824e6a08f0780ac64f6e101da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4","html_url":"https://github.com/apache/openjpa/commit/b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681","url":"https://api.github.com/repos/apache/openjpa/commits/88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681","html_url":"https://github.com/apache/openjpa/commit/88dcd580d8c9f9c4b1bcca19f9d74638aaa9a681"}]},{"sha":"25d3c8247b325c2ef1b5f4b776155684469db928","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1ZDNjODI0N2IzMjVjMmVmMWI1ZjRiNzc2MTU1Njg0NDY5ZGI5Mjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:29:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:29:39Z"},"message":"Locking should depend on openjpa-persistence-jdbc, depending on parent\nleads to dependency resolution issues.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c34b1e3602331a6481f6d6f529780a133ef56a99","url":"https://api.github.com/repos/apache/openjpa/git/trees/c34b1e3602331a6481f6d6f529780a133ef56a99"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/25d3c8247b325c2ef1b5f4b776155684469db928","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/25d3c8247b325c2ef1b5f4b776155684469db928","html_url":"https://github.com/apache/openjpa/commit/25d3c8247b325c2ef1b5f4b776155684469db928","comments_url":"https://api.github.com/repos/apache/openjpa/commits/25d3c8247b325c2ef1b5f4b776155684469db928/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4","url":"https://api.github.com/repos/apache/openjpa/commits/b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4","html_url":"https://github.com/apache/openjpa/commit/b8c7ce58ad5ce11a3d1103d1c77caf22b37623f4"}]},{"sha":"92fcf33575d4cae403591dde8737e4ce53ab9bc5","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyZmNmMzM1NzVkNGNhZTQwMzU5MWRkZTg3MzdlNGNlNTNhYjliYzU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-15T00:30:09Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-15T00:30:09Z"},"message":"OPENJPA-1185 Subquery restructure code\ncleanup comments in testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804418 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"78425491bdb026088417daeb9a177b5a572e9b2d","url":"https://api.github.com/repos/apache/openjpa/git/trees/78425491bdb026088417daeb9a177b5a572e9b2d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/92fcf33575d4cae403591dde8737e4ce53ab9bc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/92fcf33575d4cae403591dde8737e4ce53ab9bc5","html_url":"https://github.com/apache/openjpa/commit/92fcf33575d4cae403591dde8737e4ce53ab9bc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/92fcf33575d4cae403591dde8737e4ce53ab9bc5/comments","author":null,"committer":null,"parents":[{"sha":"25d3c8247b325c2ef1b5f4b776155684469db928","url":"https://api.github.com/repos/apache/openjpa/commits/25d3c8247b325c2ef1b5f4b776155684469db928","html_url":"https://github.com/apache/openjpa/commit/25d3c8247b325c2ef1b5f4b776155684469db928"}]},{"sha":"dc316323ba0417aa55fbf63204c1bef53b85df7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjMzE2MzIzYmEwNDE3YWE1NWZiZjYzMjA0YzFiZWY1M2I4NWRmN2I=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-15T00:32:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-15T00:32:59Z"},"message":"OPENJPA-1112 JPA2 Query result of embeddable object can not be further updated\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804419 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94080cab026c64d00fe9976008dda75b7b7098d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/94080cab026c64d00fe9976008dda75b7b7098d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b","html_url":"https://github.com/apache/openjpa/commit/dc316323ba0417aa55fbf63204c1bef53b85df7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b/comments","author":null,"committer":null,"parents":[{"sha":"92fcf33575d4cae403591dde8737e4ce53ab9bc5","url":"https://api.github.com/repos/apache/openjpa/commits/92fcf33575d4cae403591dde8737e4ce53ab9bc5","html_url":"https://github.com/apache/openjpa/commit/92fcf33575d4cae403591dde8737e4ce53ab9bc5"}]},{"sha":"49e554ac6c0d7903af79d516a0accb8fa8ba7b59","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5ZTU1NGFjNmMwZDc5MDNhZjc5ZDUxNmEwYWNjYjhmYThiYTdiNTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-15T23:25:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-15T23:25:35Z"},"message":"OPENJPA-1237:\nThrow configuration exception for missing options when using WriteBehind. \nSubmitted by : Tim McConnell\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804539 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2cc888cae90db086c75bad11216053f49c53a004","url":"https://api.github.com/repos/apache/openjpa/git/trees/2cc888cae90db086c75bad11216053f49c53a004"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","html_url":"https://github.com/apache/openjpa/commit/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"dc316323ba0417aa55fbf63204c1bef53b85df7b","url":"https://api.github.com/repos/apache/openjpa/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b","html_url":"https://github.com/apache/openjpa/commit/dc316323ba0417aa55fbf63204c1bef53b85df7b"}]},{"sha":"7e81b8c8b507abb09cdf086b236bb34d75821146","node_id":"MDY6Q29tbWl0MjA2MzY0OjdlODFiOGM4YjUwN2FiYjA5Y2RmMDg2YjIzNmJiMzRkNzU4MjExNDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-17T17:00:16Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-17T17:00:16Z"},"message":"OPENJPA-1245 Cleanup license header wrapping and some POM formatting for readability.  Include basic Eclipse files, which will allow the module to be imported, as maven-eclipse-plugin will not generate the required metadata files, but will update these basic ones if present.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805042 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f3f7798c807280179fde010ea07781933f64bd6","url":"https://api.github.com/repos/apache/openjpa/git/trees/0f3f7798c807280179fde010ea07781933f64bd6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7e81b8c8b507abb09cdf086b236bb34d75821146","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7e81b8c8b507abb09cdf086b236bb34d75821146","html_url":"https://github.com/apache/openjpa/commit/7e81b8c8b507abb09cdf086b236bb34d75821146","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7e81b8c8b507abb09cdf086b236bb34d75821146/comments","author":null,"committer":null,"parents":[{"sha":"49e554ac6c0d7903af79d516a0accb8fa8ba7b59","url":"https://api.github.com/repos/apache/openjpa/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","html_url":"https://github.com/apache/openjpa/commit/49e554ac6c0d7903af79d516a0accb8fa8ba7b59"}]},{"sha":"c7e032ceb729b1302d79ff6f2d5ace429e6a2e79","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3ZTAzMmNlYjcyOWIxMzAyZDc5ZmY2ZjJkNWFjZTQyOWU2YTJlNzk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-17T17:02:40Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-17T17:02:40Z"},"message":"OPENJPA-1245 Only include a basic Eclipse .project file, as running 'mvn eclipse:eclipse' will update the .classpath file and cause other developers to checkin a release specific version of the file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805043 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba7fe300a0d8a4415fa8c0e916be9fa02c89b8e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba7fe300a0d8a4415fa8c0e916be9fa02c89b8e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c7e032ceb729b1302d79ff6f2d5ace429e6a2e79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c7e032ceb729b1302d79ff6f2d5ace429e6a2e79","html_url":"https://github.com/apache/openjpa/commit/c7e032ceb729b1302d79ff6f2d5ace429e6a2e79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c7e032ceb729b1302d79ff6f2d5ace429e6a2e79/comments","author":null,"committer":null,"parents":[{"sha":"7e81b8c8b507abb09cdf086b236bb34d75821146","url":"https://api.github.com/repos/apache/openjpa/commits/7e81b8c8b507abb09cdf086b236bb34d75821146","html_url":"https://github.com/apache/openjpa/commit/7e81b8c8b507abb09cdf086b236bb34d75821146"}]},{"sha":"f4dfdf90b5d1acf6ea6789f56153bbc321c4422a","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0ZGZkZjkwYjVkMWFjZjZlYTY3ODlmNTYxNTNiYmMzMjFjNDQyMmE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-17T17:05:31Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-17T17:05:31Z"},"message":"OPENJPA-1245 Include Eclipse projects this one depends upon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805045 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9150db8f0e12e522f1cc033d997cacc25778abc7","url":"https://api.github.com/repos/apache/openjpa/git/trees/9150db8f0e12e522f1cc033d997cacc25778abc7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f4dfdf90b5d1acf6ea6789f56153bbc321c4422a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f4dfdf90b5d1acf6ea6789f56153bbc321c4422a","html_url":"https://github.com/apache/openjpa/commit/f4dfdf90b5d1acf6ea6789f56153bbc321c4422a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f4dfdf90b5d1acf6ea6789f56153bbc321c4422a/comments","author":null,"committer":null,"parents":[{"sha":"c7e032ceb729b1302d79ff6f2d5ace429e6a2e79","url":"https://api.github.com/repos/apache/openjpa/commits/c7e032ceb729b1302d79ff6f2d5ace429e6a2e79","html_url":"https://github.com/apache/openjpa/commit/c7e032ceb729b1302d79ff6f2d5ace429e6a2e79"}]},{"sha":"c35c13497b03903fe2aef6a5f96e37a9642a627d","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzNWMxMzQ5N2IwMzkwM2ZlMmFlZjZhNWY5NmUzN2E5NjQyYTYyN2Q=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-17T18:47:59Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-17T18:47:59Z"},"message":"OPENJPA-1250: fix ClassCast exception with eagerly fetched ElementCollection \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805090 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6321bffb670595266bb662b5191d39abd150a0c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6321bffb670595266bb662b5191d39abd150a0c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c35c13497b03903fe2aef6a5f96e37a9642a627d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c35c13497b03903fe2aef6a5f96e37a9642a627d","html_url":"https://github.com/apache/openjpa/commit/c35c13497b03903fe2aef6a5f96e37a9642a627d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c35c13497b03903fe2aef6a5f96e37a9642a627d/comments","author":null,"committer":null,"parents":[{"sha":"f4dfdf90b5d1acf6ea6789f56153bbc321c4422a","url":"https://api.github.com/repos/apache/openjpa/commits/f4dfdf90b5d1acf6ea6789f56153bbc321c4422a","html_url":"https://github.com/apache/openjpa/commit/f4dfdf90b5d1acf6ea6789f56153bbc321c4422a"}]},{"sha":"0e4769e43bd84d82cf2fce85d326431c72d71e54","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlNDc2OWU0M2JkODRkODJjZjJmY2U4NWQzMjY0MzFjNzJkNzFlNTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-17T20:57:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-17T20:57:34Z"},"message":"OPENJPA-1246 :\nOrder databases alphabetically.\n\tmodified:   openjpa-project/src/doc/manual/ref_guide_dbsetup.xml\n\tmodified:   openjpa-project/src/doc/manual/supported_databases.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805138 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89c3f1e41ca4cbac51f8b8eb1206263b185a4762","url":"https://api.github.com/repos/apache/openjpa/git/trees/89c3f1e41ca4cbac51f8b8eb1206263b185a4762"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0e4769e43bd84d82cf2fce85d326431c72d71e54","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0e4769e43bd84d82cf2fce85d326431c72d71e54","html_url":"https://github.com/apache/openjpa/commit/0e4769e43bd84d82cf2fce85d326431c72d71e54","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0e4769e43bd84d82cf2fce85d326431c72d71e54/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c35c13497b03903fe2aef6a5f96e37a9642a627d","url":"https://api.github.com/repos/apache/openjpa/commits/c35c13497b03903fe2aef6a5f96e37a9642a627d","html_url":"https://github.com/apache/openjpa/commit/c35c13497b03903fe2aef6a5f96e37a9642a627d"}]},{"sha":"814341420defa42f85c224b5c9f3da01048333e4","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNDM0MTQyMGRlZmE0MmY4NWMyMjRiNWM5ZjNkYTAxMDQ4MzMzZTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:20:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:20:26Z"},"message":"OPENJPA-849, OPENJPA-1251: property management, hidden values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f32a78922803a6a9c160a73561e8cc3ede2f2e6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f32a78922803a6a9c160a73561e8cc3ede2f2e6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/814341420defa42f85c224b5c9f3da01048333e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/814341420defa42f85c224b5c9f3da01048333e4","html_url":"https://github.com/apache/openjpa/commit/814341420defa42f85c224b5c9f3da01048333e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/814341420defa42f85c224b5c9f3da01048333e4/comments","author":null,"committer":null,"parents":[{"sha":"0e4769e43bd84d82cf2fce85d326431c72d71e54","url":"https://api.github.com/repos/apache/openjpa/commits/0e4769e43bd84d82cf2fce85d326431c72d71e54","html_url":"https://github.com/apache/openjpa/commit/0e4769e43bd84d82cf2fce85d326431c72d71e54"}]},{"sha":"4e6a98f6344ea3e1819415709468cc1294910adc","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlNmE5OGY2MzQ0ZWEzZTE4MTk0MTU3MDk0NjhjYzEyOTQ5MTBhZGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:27:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:27:30Z"},"message":"OPENJPA-849,OPENJPA-1251: Property management, hidden values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1de8e4fe7a622c5dc0a02907d98e3d1192118551","url":"https://api.github.com/repos/apache/openjpa/git/trees/1de8e4fe7a622c5dc0a02907d98e3d1192118551"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e6a98f6344ea3e1819415709468cc1294910adc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e6a98f6344ea3e1819415709468cc1294910adc","html_url":"https://github.com/apache/openjpa/commit/4e6a98f6344ea3e1819415709468cc1294910adc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e6a98f6344ea3e1819415709468cc1294910adc/comments","author":null,"committer":null,"parents":[{"sha":"814341420defa42f85c224b5c9f3da01048333e4","url":"https://api.github.com/repos/apache/openjpa/commits/814341420defa42f85c224b5c9f3da01048333e4","html_url":"https://github.com/apache/openjpa/commit/814341420defa42f85c224b5c9f3da01048333e4"}]},{"sha":"30a7da0ba2c8f946d064dec4081d75a6fe380e30","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwYTdkYTBiYTJjOGY5NDZkMDY0ZGVjNDA4MWQ3NWE2ZmUzODBlMzA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-18T20:45:21Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-18T20:45:21Z"},"message":"additional test for embeddable, elementcollection and lob\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805573 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98c34f3190609e4a1f755dc4932a326a00842cbf","url":"https://api.github.com/repos/apache/openjpa/git/trees/98c34f3190609e4a1f755dc4932a326a00842cbf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30","html_url":"https://github.com/apache/openjpa/commit/30a7da0ba2c8f946d064dec4081d75a6fe380e30","comments_url":"https://api.github.com/repos/apache/openjpa/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30/comments","author":null,"committer":null,"parents":[{"sha":"4e6a98f6344ea3e1819415709468cc1294910adc","url":"https://api.github.com/repos/apache/openjpa/commits/4e6a98f6344ea3e1819415709468cc1294910adc","html_url":"https://github.com/apache/openjpa/commit/4e6a98f6344ea3e1819415709468cc1294910adc"}]},{"sha":"b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxMWNkYWUzMzhmMzNlNGY2YjdjODNmYmQzZmFhMjgzMDNhY2Q0YjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T21:27:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T21:27:42Z"},"message":"Add error messages to FillStrategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805588 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9c38b959802d83d262e2f18c83cc6ad0135fde3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a9c38b959802d83d262e2f18c83cc6ad0135fde3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","html_url":"https://github.com/apache/openjpa/commit/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5/comments","author":null,"committer":null,"parents":[{"sha":"30a7da0ba2c8f946d064dec4081d75a6fe380e30","url":"https://api.github.com/repos/apache/openjpa/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30","html_url":"https://github.com/apache/openjpa/commit/30a7da0ba2c8f946d064dec4081d75a6fe380e30"}]},{"sha":"7065743f1766b69e3b56b23315f930dcf6930789","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwNjU3NDNmMTc2NmI2OWUzYjU2YjIzMzE1ZjkzMGRjZjY5MzA3ODk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-19T15:36:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-19T15:36:02Z"},"message":"OPENJPA-1252  Include a Derby Network Server test profile, allow Derby version to be changed on the cmdline, and cleanup some formatting/comments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805841 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a485f5ab4924ee8cbccc3bd08c951e13acbed14d","url":"https://api.github.com/repos/apache/openjpa/git/trees/a485f5ab4924ee8cbccc3bd08c951e13acbed14d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7065743f1766b69e3b56b23315f930dcf6930789","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7065743f1766b69e3b56b23315f930dcf6930789","html_url":"https://github.com/apache/openjpa/commit/7065743f1766b69e3b56b23315f930dcf6930789","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7065743f1766b69e3b56b23315f930dcf6930789/comments","author":null,"committer":null,"parents":[{"sha":"b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","url":"https://api.github.com/repos/apache/openjpa/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","html_url":"https://github.com/apache/openjpa/commit/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5"}]},{"sha":"21d88cadc79848e5c678069478a036fbac439ddf","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxZDg4Y2FkYzc5ODQ4ZTVjNjc4MDY5NDc4YTAzNmZiYWM0MzlkZGY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-20T00:03:30Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-20T00:03:30Z"},"message":"OPENJPA-1256: fix ClassCastExcepton when IdClass contains an ENUM type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efee5b1d5760d13e2c0f65b1a9b261ba7baaa376","url":"https://api.github.com/repos/apache/openjpa/git/trees/efee5b1d5760d13e2c0f65b1a9b261ba7baaa376"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/21d88cadc79848e5c678069478a036fbac439ddf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/21d88cadc79848e5c678069478a036fbac439ddf","html_url":"https://github.com/apache/openjpa/commit/21d88cadc79848e5c678069478a036fbac439ddf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/21d88cadc79848e5c678069478a036fbac439ddf/comments","author":null,"committer":null,"parents":[{"sha":"7065743f1766b69e3b56b23315f930dcf6930789","url":"https://api.github.com/repos/apache/openjpa/commits/7065743f1766b69e3b56b23315f930dcf6930789","html_url":"https://github.com/apache/openjpa/commit/7065743f1766b69e3b56b23315f930dcf6930789"}]},{"sha":"5b9b5d77255684e2f9771f9e88146d85e9ab913e","node_id":"MDY6Q29tbWl0MjA2MzY0OjViOWI1ZDc3MjU1Njg0ZTJmOTc3MWY5ZTg4MTQ2ZDg1ZTlhYjkxM2U=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-20T02:30:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-20T02:30:09Z"},"message":"OPENJPA-1252  Include a Derby Network Server w/ JCC driver test profile and cleanup some other profiles.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806022 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d1882fa69d7ab4f81bf756fd500857885248f6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d1882fa69d7ab4f81bf756fd500857885248f6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b9b5d77255684e2f9771f9e88146d85e9ab913e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b9b5d77255684e2f9771f9e88146d85e9ab913e","html_url":"https://github.com/apache/openjpa/commit/5b9b5d77255684e2f9771f9e88146d85e9ab913e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b9b5d77255684e2f9771f9e88146d85e9ab913e/comments","author":null,"committer":null,"parents":[{"sha":"21d88cadc79848e5c678069478a036fbac439ddf","url":"https://api.github.com/repos/apache/openjpa/commits/21d88cadc79848e5c678069478a036fbac439ddf","html_url":"https://github.com/apache/openjpa/commit/21d88cadc79848e5c678069478a036fbac439ddf"}]},{"sha":"382bafc874466e32efb8d67c3a92373b35dde932","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4MmJhZmM4NzQ0NjZlMzJlZmI4ZDY3YzNhOTIzNzNiMzVkZGU5MzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-20T20:02:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-20T20:02:08Z"},"message":"OPENJPA-1252 Same updates to this pom as for o-p-j in r806022\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806333 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"498d2517ace4966d6870299bf769ebab36a1b967","url":"https://api.github.com/repos/apache/openjpa/git/trees/498d2517ace4966d6870299bf769ebab36a1b967"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/382bafc874466e32efb8d67c3a92373b35dde932","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/382bafc874466e32efb8d67c3a92373b35dde932","html_url":"https://github.com/apache/openjpa/commit/382bafc874466e32efb8d67c3a92373b35dde932","comments_url":"https://api.github.com/repos/apache/openjpa/commits/382bafc874466e32efb8d67c3a92373b35dde932/comments","author":null,"committer":null,"parents":[{"sha":"5b9b5d77255684e2f9771f9e88146d85e9ab913e","url":"https://api.github.com/repos/apache/openjpa/commits/5b9b5d77255684e2f9771f9e88146d85e9ab913e","html_url":"https://github.com/apache/openjpa/commit/5b9b5d77255684e2f9771f9e88146d85e9ab913e"}]},{"sha":"2615a9b42666e867c50cf5537c91e6f2f4b58908","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2MTVhOWI0MjY2NmU4NjdjNTBjZjU1MzdjOTFlNmYyZjRiNTg5MDg=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-21T18:53:40Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-21T18:53:40Z"},"message":"OPENJPA-1112 JPA2 Query result of embeddable object can not be further updated\nBulk update of embedded field is not allowed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806675 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea5345af31024ad2a07b1b871dc532fee560ad8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/ea5345af31024ad2a07b1b871dc532fee560ad8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2615a9b42666e867c50cf5537c91e6f2f4b58908","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2615a9b42666e867c50cf5537c91e6f2f4b58908","html_url":"https://github.com/apache/openjpa/commit/2615a9b42666e867c50cf5537c91e6f2f4b58908","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2615a9b42666e867c50cf5537c91e6f2f4b58908/comments","author":null,"committer":null,"parents":[{"sha":"382bafc874466e32efb8d67c3a92373b35dde932","url":"https://api.github.com/repos/apache/openjpa/commits/382bafc874466e32efb8d67c3a92373b35dde932","html_url":"https://github.com/apache/openjpa/commit/382bafc874466e32efb8d67c3a92373b35dde932"}]},{"sha":"bb7048d27c55141851d7f9496f17aae407eca4e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiNzA0OGQyN2M1NTE0MTg1MWQ3Zjk0OTZmMTdhYWU0MDdlY2E0ZTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T19:55:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T19:55:09Z"},"message":"OPENJPA-1200: \nDiscriminator column ignored for in select statement for OneToMany relationships.\nSubmitted By : Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806693 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2adf538741fd9346a468fc2638830c0d6a498d62","url":"https://api.github.com/repos/apache/openjpa/git/trees/2adf538741fd9346a468fc2638830c0d6a498d62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb7048d27c55141851d7f9496f17aae407eca4e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb7048d27c55141851d7f9496f17aae407eca4e4","html_url":"https://github.com/apache/openjpa/commit/bb7048d27c55141851d7f9496f17aae407eca4e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb7048d27c55141851d7f9496f17aae407eca4e4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2615a9b42666e867c50cf5537c91e6f2f4b58908","url":"https://api.github.com/repos/apache/openjpa/commits/2615a9b42666e867c50cf5537c91e6f2f4b58908","html_url":"https://github.com/apache/openjpa/commit/2615a9b42666e867c50cf5537c91e6f2f4b58908"}]},{"sha":"7c8454767ef4a36d5a57d048ced52322dab996df","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjODQ1NDc2N2VmNGEzNmQ1YTU3ZDA0OGNlZDUyMzIyZGFiOTk2ZGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T21:28:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T21:28:08Z"},"message":"Fixing svn:eol-style\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806726 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a917e51c54c76f9e7e5f735a0aa504304645804b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a917e51c54c76f9e7e5f735a0aa504304645804b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7c8454767ef4a36d5a57d048ced52322dab996df","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7c8454767ef4a36d5a57d048ced52322dab996df","html_url":"https://github.com/apache/openjpa/commit/7c8454767ef4a36d5a57d048ced52322dab996df","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7c8454767ef4a36d5a57d048ced52322dab996df/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bb7048d27c55141851d7f9496f17aae407eca4e4","url":"https://api.github.com/repos/apache/openjpa/commits/bb7048d27c55141851d7f9496f17aae407eca4e4","html_url":"https://github.com/apache/openjpa/commit/bb7048d27c55141851d7f9496f17aae407eca4e4"}]},{"sha":"917b49befe6098d1c3bf4647eb8dbdf5974de92d","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxN2I0OWJlZmU2MDk4ZDFjM2JmNDY0N2ViOGRiZGY1OTc0ZGU5MmQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-23T17:47:06Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-23T17:47:06Z"},"message":"OPENJPA-1261 JPQL query result shape for multi-selections including multi-select-new-constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806993 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bc4c1d063ce7b3e96c097f2234308156671db27f","url":"https://api.github.com/repos/apache/openjpa/git/trees/bc4c1d063ce7b3e96c097f2234308156671db27f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/917b49befe6098d1c3bf4647eb8dbdf5974de92d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/917b49befe6098d1c3bf4647eb8dbdf5974de92d","html_url":"https://github.com/apache/openjpa/commit/917b49befe6098d1c3bf4647eb8dbdf5974de92d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/917b49befe6098d1c3bf4647eb8dbdf5974de92d/comments","author":null,"committer":null,"parents":[{"sha":"7c8454767ef4a36d5a57d048ced52322dab996df","url":"https://api.github.com/repos/apache/openjpa/commits/7c8454767ef4a36d5a57d048ced52322dab996df","html_url":"https://github.com/apache/openjpa/commit/7c8454767ef4a36d5a57d048ced52322dab996df"}]},{"sha":"ee5506d3d4afdd0b5bdba676a70394fe22f462ce","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlNTUwNmQzZDRhZmRkMGI1YmRiYTY3NmE3MDM5NGZlMjJmNDYyY2U=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-24T14:41:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-24T14:41:36Z"},"message":"OPENJPA-1261: Set svn:eol-style\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807248 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37ce91bdf677231f802806293d6ef82169929c63","url":"https://api.github.com/repos/apache/openjpa/git/trees/37ce91bdf677231f802806293d6ef82169929c63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","html_url":"https://github.com/apache/openjpa/commit/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"917b49befe6098d1c3bf4647eb8dbdf5974de92d","url":"https://api.github.com/repos/apache/openjpa/commits/917b49befe6098d1c3bf4647eb8dbdf5974de92d","html_url":"https://github.com/apache/openjpa/commit/917b49befe6098d1c3bf4647eb8dbdf5974de92d"}]},{"sha":"a8b6502e243042940b66081f713e3e884e322ea1","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4YjY1MDJlMjQzMDQyOTQwYjY2MDgxZjcxM2UzZTg4NGUzMjJlYTE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-24T15:05:02Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-24T15:05:02Z"},"message":"OPENJPA-1246: \nExample configuration and improved documentation for Ingres.\nSubmitted by : Alan Raison\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807267 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4a854b83a3ed5e5d769b0a23764daf54685ae93","url":"https://api.github.com/repos/apache/openjpa/git/trees/a4a854b83a3ed5e5d769b0a23764daf54685ae93"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8b6502e243042940b66081f713e3e884e322ea1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8b6502e243042940b66081f713e3e884e322ea1","html_url":"https://github.com/apache/openjpa/commit/a8b6502e243042940b66081f713e3e884e322ea1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8b6502e243042940b66081f713e3e884e322ea1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ee5506d3d4afdd0b5bdba676a70394fe22f462ce","url":"https://api.github.com/repos/apache/openjpa/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","html_url":"https://github.com/apache/openjpa/commit/ee5506d3d4afdd0b5bdba676a70394fe22f462ce"}]},{"sha":"e955866480671467d41fcc8e6ccf56222552e94a","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5NTU4NjY0ODA2NzE0NjdkNDFmY2M4ZTZjY2Y1NjIyMjU1MmU5NGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-24T22:02:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-24T22:02:18Z"},"message":"OPENJA-1262: EA7 Update.\n  Fetch method signature changed. \n  nullLiteral() method added\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807398 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e2a9cd1633ffccbd944b7c57f508264a0c489431","url":"https://api.github.com/repos/apache/openjpa/git/trees/e2a9cd1633ffccbd944b7c57f508264a0c489431"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e955866480671467d41fcc8e6ccf56222552e94a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e955866480671467d41fcc8e6ccf56222552e94a","html_url":"https://github.com/apache/openjpa/commit/e955866480671467d41fcc8e6ccf56222552e94a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e955866480671467d41fcc8e6ccf56222552e94a/comments","author":null,"committer":null,"parents":[{"sha":"a8b6502e243042940b66081f713e3e884e322ea1","url":"https://api.github.com/repos/apache/openjpa/commits/a8b6502e243042940b66081f713e3e884e322ea1","html_url":"https://github.com/apache/openjpa/commit/a8b6502e243042940b66081f713e3e884e322ea1"}]},{"sha":"2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkNDk5Mzk1NGY1YzE5MWY4ZmIzYzNlNjZkZDMzMTJmY2QzYWM1NjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-24T23:18:38Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-24T23:18:38Z"},"message":"OPENJPA-1262: EA7 pom\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807427 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"305c9cda9734e8a9f68c4b39281ebfda5422499f","url":"https://api.github.com/repos/apache/openjpa/git/trees/305c9cda9734e8a9f68c4b39281ebfda5422499f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","html_url":"https://github.com/apache/openjpa/commit/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565/comments","author":null,"committer":null,"parents":[{"sha":"e955866480671467d41fcc8e6ccf56222552e94a","url":"https://api.github.com/repos/apache/openjpa/commits/e955866480671467d41fcc8e6ccf56222552e94a","html_url":"https://github.com/apache/openjpa/commit/e955866480671467d41fcc8e6ccf56222552e94a"}]},{"sha":"d45a82157e87e1be8cc0a90babd7b8e75e4789d7","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0NWE4MjE1N2U4N2UxYmU4Y2MwYTkwYmFiZDdiOGU3NWU0Nzg5ZDc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-25T01:18:04Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-25T01:18:04Z"},"message":"OPENJPA-1262: Missed file in commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eda98840a1e69847b57095c8edc185c6c3901648","url":"https://api.github.com/repos/apache/openjpa/git/trees/eda98840a1e69847b57095c8edc185c6c3901648"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","html_url":"https://github.com/apache/openjpa/commit/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7/comments","author":null,"committer":null,"parents":[{"sha":"2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","url":"https://api.github.com/repos/apache/openjpa/commits/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","html_url":"https://github.com/apache/openjpa/commit/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565"}]},{"sha":"388b18650f0f4f480ce64b73165fcbe3e51f88ca","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4OGIxODY1MGYwZjRmNDgwY2U2NGI3MzE2NWZjYmUzZTUxZjg4Y2E=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-25T01:19:32Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-25T01:19:32Z"},"message":"OPENJPA-1112 JPA2 Query result of embeddable object can not be further updated\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807446 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08aed42f093c6ac7c8d9ada4b0197b7053b864dd","url":"https://api.github.com/repos/apache/openjpa/git/trees/08aed42f093c6ac7c8d9ada4b0197b7053b864dd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca","html_url":"https://github.com/apache/openjpa/commit/388b18650f0f4f480ce64b73165fcbe3e51f88ca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca/comments","author":null,"committer":null,"parents":[{"sha":"d45a82157e87e1be8cc0a90babd7b8e75e4789d7","url":"https://api.github.com/repos/apache/openjpa/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","html_url":"https://github.com/apache/openjpa/commit/d45a82157e87e1be8cc0a90babd7b8e75e4789d7"}]},{"sha":"049c91707b870ef184f40e25c8295e374ddf36ed","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0OWM5MTcwN2I4NzBlZjE4NGY0MGUyNWM4Mjk1ZTM3NGRkZjM2ZWQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-25T05:02:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-25T05:02:44Z"},"message":"OPENJPA-1112 JPA2 Query result of embeddable object can not be further updated\nadd table name in Address entity\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807479 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e37f73225dedfd60f50c3fc04d4029c0c52c7657","url":"https://api.github.com/repos/apache/openjpa/git/trees/e37f73225dedfd60f50c3fc04d4029c0c52c7657"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/049c91707b870ef184f40e25c8295e374ddf36ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/049c91707b870ef184f40e25c8295e374ddf36ed","html_url":"https://github.com/apache/openjpa/commit/049c91707b870ef184f40e25c8295e374ddf36ed","comments_url":"https://api.github.com/repos/apache/openjpa/commits/049c91707b870ef184f40e25c8295e374ddf36ed/comments","author":null,"committer":null,"parents":[{"sha":"388b18650f0f4f480ce64b73165fcbe3e51f88ca","url":"https://api.github.com/repos/apache/openjpa/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca","html_url":"https://github.com/apache/openjpa/commit/388b18650f0f4f480ce64b73165fcbe3e51f88ca"}]},{"sha":"9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhNDQwNjAzOGUyMmUxNGNkOWE1YjZhYzk2YmI0Y2QyMjQ0ZGNiNmY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-25T13:04:12Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-25T13:04:12Z"},"message":"OPENJPA-1174: default fetch type for ManyToOne and OneToOne is eager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807602 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e38229d54735f3b878b0fb2759d283f94610fbf6","url":"https://api.github.com/repos/apache/openjpa/git/trees/e38229d54735f3b878b0fb2759d283f94610fbf6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f","html_url":"https://github.com/apache/openjpa/commit/9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f/comments","author":null,"committer":null,"parents":[{"sha":"049c91707b870ef184f40e25c8295e374ddf36ed","url":"https://api.github.com/repos/apache/openjpa/commits/049c91707b870ef184f40e25c8295e374ddf36ed","html_url":"https://github.com/apache/openjpa/commit/049c91707b870ef184f40e25c8295e374ddf36ed"}]},{"sha":"6303e9a753e205f16612bcd92ee7685446d849c9","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzMDNlOWE3NTNlMjA1ZjE2NjEyYmNkOTJlZTc2ODU0NDZkODQ5Yzk=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-08-25T14:09:23Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-08-25T14:09:23Z"},"message":"OpenJPA-525 : Applied Milosz Tylenda's OPENJPA-525.3.patch to trunk, after testing by Amy Yang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807642 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"493cc487de02504b6835ccb29bc4f2f56d2a35bd","url":"https://api.github.com/repos/apache/openjpa/git/trees/493cc487de02504b6835ccb29bc4f2f56d2a35bd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6303e9a753e205f16612bcd92ee7685446d849c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6303e9a753e205f16612bcd92ee7685446d849c9","html_url":"https://github.com/apache/openjpa/commit/6303e9a753e205f16612bcd92ee7685446d849c9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6303e9a753e205f16612bcd92ee7685446d849c9/comments","author":null,"committer":null,"parents":[{"sha":"9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f","url":"https://api.github.com/repos/apache/openjpa/commits/9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f","html_url":"https://github.com/apache/openjpa/commit/9a4406038e22e14cd9a5b6ac96bb4cd2244dcb6f"}]},{"sha":"964ab657ce7d231ffdf74c96dc429933b0f16edc","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2NGFiNjU3Y2U3ZDIzMWZmZGY3NGM5NmRjNDI5OTMzYjBmMTZlZGM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T15:08:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T15:08:16Z"},"message":"OPENJPA-1264: \nEnable shared-cache-mode persistence.xml element. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a61db307764aeca6e3200d2b8a8ab3864eeeca2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/a61db307764aeca6e3200d2b8a8ab3864eeeca2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc","html_url":"https://github.com/apache/openjpa/commit/964ab657ce7d231ffdf74c96dc429933b0f16edc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6303e9a753e205f16612bcd92ee7685446d849c9","url":"https://api.github.com/repos/apache/openjpa/commits/6303e9a753e205f16612bcd92ee7685446d849c9","html_url":"https://github.com/apache/openjpa/commit/6303e9a753e205f16612bcd92ee7685446d849c9"}]},{"sha":"8a66927c2d37d91c9e55cfadc252a5c5c9eeec76","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhNjY5MjdjMmQzN2Q5MWM5ZTU1Y2ZhZGMyNTJhNWM1YzllZWVjNzY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T15:56:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T15:56:24Z"},"message":"OPENJPA-1264: \nAdd trailing newlines - checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807681 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4431a8e42767ca89103ac35f34aed6e89c1083b0","url":"https://api.github.com/repos/apache/openjpa/git/trees/4431a8e42767ca89103ac35f34aed6e89c1083b0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a66927c2d37d91c9e55cfadc252a5c5c9eeec76","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a66927c2d37d91c9e55cfadc252a5c5c9eeec76","html_url":"https://github.com/apache/openjpa/commit/8a66927c2d37d91c9e55cfadc252a5c5c9eeec76","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a66927c2d37d91c9e55cfadc252a5c5c9eeec76/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"964ab657ce7d231ffdf74c96dc429933b0f16edc","url":"https://api.github.com/repos/apache/openjpa/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc","html_url":"https://github.com/apache/openjpa/commit/964ab657ce7d231ffdf74c96dc429933b0f16edc"}]},{"sha":"ec43fccfff61d60efb19ea779a0a0f252a65b5a4","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjNDNmY2NmZmY2MWQ2MGVmYjE5ZWE3NzlhMGEwZjI1MmE2NWI1YTQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-25T16:14:00Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-25T16:14:00Z"},"message":"OPENJPA-1262 ORM Schema updates for EA7\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807686 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"263994368bc5d66f8f974e456f362aa5f5522d1b","url":"https://api.github.com/repos/apache/openjpa/git/trees/263994368bc5d66f8f974e456f362aa5f5522d1b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec43fccfff61d60efb19ea779a0a0f252a65b5a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec43fccfff61d60efb19ea779a0a0f252a65b5a4","html_url":"https://github.com/apache/openjpa/commit/ec43fccfff61d60efb19ea779a0a0f252a65b5a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec43fccfff61d60efb19ea779a0a0f252a65b5a4/comments","author":null,"committer":null,"parents":[{"sha":"8a66927c2d37d91c9e55cfadc252a5c5c9eeec76","url":"https://api.github.com/repos/apache/openjpa/commits/8a66927c2d37d91c9e55cfadc252a5c5c9eeec76","html_url":"https://github.com/apache/openjpa/commit/8a66927c2d37d91c9e55cfadc252a5c5c9eeec76"}]},{"sha":"f61ff608429d9705eca867b78dc881fb5890a956","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2MWZmNjA4NDI5ZDk3MDVlY2E4NjdiNzhkYzg4MWZiNTg5MGE5NTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T19:20:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T19:20:19Z"},"message":"OPENJPA-1223:\nAdd migration consideration for AutoOff collection tracking. \nSubmitted By: Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807769 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e339858fc3561dac9e9575c50053a5774456e81b","url":"https://api.github.com/repos/apache/openjpa/git/trees/e339858fc3561dac9e9575c50053a5774456e81b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f61ff608429d9705eca867b78dc881fb5890a956","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f61ff608429d9705eca867b78dc881fb5890a956","html_url":"https://github.com/apache/openjpa/commit/f61ff608429d9705eca867b78dc881fb5890a956","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f61ff608429d9705eca867b78dc881fb5890a956/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec43fccfff61d60efb19ea779a0a0f252a65b5a4","url":"https://api.github.com/repos/apache/openjpa/commits/ec43fccfff61d60efb19ea779a0a0f252a65b5a4","html_url":"https://github.com/apache/openjpa/commit/ec43fccfff61d60efb19ea779a0a0f252a65b5a4"}]},{"sha":"e19c75a9c3e067ff75e6bd7444d8e18785418036","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxOWM3NWE5YzNlMDY3ZmY3NWU2YmQ3NDQ0ZDhlMTg3ODU0MTgwMzY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-25T23:22:59Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-25T23:22:59Z"},"message":"OPENJPA-1266: JDBC escape syntax for date, time, timestamp\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807851 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66e2a5152d9a2a3c3512285c53edfb6f5e910fce","url":"https://api.github.com/repos/apache/openjpa/git/trees/66e2a5152d9a2a3c3512285c53edfb6f5e910fce"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036","html_url":"https://github.com/apache/openjpa/commit/e19c75a9c3e067ff75e6bd7444d8e18785418036","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036/comments","author":null,"committer":null,"parents":[{"sha":"f61ff608429d9705eca867b78dc881fb5890a956","url":"https://api.github.com/repos/apache/openjpa/commits/f61ff608429d9705eca867b78dc881fb5890a956","html_url":"https://github.com/apache/openjpa/commit/f61ff608429d9705eca867b78dc881fb5890a956"}]},{"sha":"4083018e380a5c8a08323a43dc49fa8dda3635e0","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwODMwMThlMzgwYTVjOGEwODMyM2E0M2RjNDlmYThkZGEzNjM1ZTA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-26T16:10:55Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-26T16:10:55Z"},"message":"OPENJPA-1266: no need to cast for JDBC escape syntax for date, time, timestamp in DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808086 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de80ef713fe2539177e01cd4333c297e514dfdfc","url":"https://api.github.com/repos/apache/openjpa/git/trees/de80ef713fe2539177e01cd4333c297e514dfdfc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4083018e380a5c8a08323a43dc49fa8dda3635e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4083018e380a5c8a08323a43dc49fa8dda3635e0","html_url":"https://github.com/apache/openjpa/commit/4083018e380a5c8a08323a43dc49fa8dda3635e0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4083018e380a5c8a08323a43dc49fa8dda3635e0/comments","author":null,"committer":null,"parents":[{"sha":"e19c75a9c3e067ff75e6bd7444d8e18785418036","url":"https://api.github.com/repos/apache/openjpa/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036","html_url":"https://github.com/apache/openjpa/commit/e19c75a9c3e067ff75e6bd7444d8e18785418036"}]},{"sha":"aedc261abc6fddb00f815e5c68906ef7b2e255fc","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlZGMyNjFhYmM2ZmRkYjAwZjgxNWU1YzY4OTA2ZWY3YjJlMjU1ZmM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-26T18:23:11Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-26T18:23:11Z"},"message":"OPENJPA-1228 Updated persistence parser to use new default value for exclude-unlisted-classes in a JPA 2.0 persistence.xml while maintaining prior behavior for a 1.0 or unspecified version.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808149 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28eaa9ea5771c739583a71652d7ac814e7a240c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/28eaa9ea5771c739583a71652d7ac814e7a240c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc","html_url":"https://github.com/apache/openjpa/commit/aedc261abc6fddb00f815e5c68906ef7b2e255fc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc/comments","author":null,"committer":null,"parents":[{"sha":"4083018e380a5c8a08323a43dc49fa8dda3635e0","url":"https://api.github.com/repos/apache/openjpa/commits/4083018e380a5c8a08323a43dc49fa8dda3635e0","html_url":"https://github.com/apache/openjpa/commit/4083018e380a5c8a08323a43dc49fa8dda3635e0"}]},{"sha":"f68c531a5ba53768e00daa7fad5749f4ad31da6b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2OGM1MzFhNWJhNTM3NjhlMDBkYWE3ZmFkNTc0OWY0YWQzMWRhNmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-26T18:54:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-26T18:54:30Z"},"message":"OPENJPA-1265: Support edit of Criteria Query.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"760b1e91cdf6e84f91bef13b735255007b77f9b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/760b1e91cdf6e84f91bef13b735255007b77f9b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b","html_url":"https://github.com/apache/openjpa/commit/f68c531a5ba53768e00daa7fad5749f4ad31da6b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b/comments","author":null,"committer":null,"parents":[{"sha":"aedc261abc6fddb00f815e5c68906ef7b2e255fc","url":"https://api.github.com/repos/apache/openjpa/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc","html_url":"https://github.com/apache/openjpa/commit/aedc261abc6fddb00f815e5c68906ef7b2e255fc"}]},{"sha":"9177e9369af17d0ad68a95401a23db6555eb9077","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxNzdlOTM2OWFmMTdkMGFkNjhhOTU0MDFhMjNkYjY1NTVlYjkwNzc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-26T22:01:25Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-26T22:01:25Z"},"message":"OPENJPA-1266: JDBC escape syntax for date, time, timestamp support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808198 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efad1feb9529a2e9e057888a54d7a12a77eded75","url":"https://api.github.com/repos/apache/openjpa/git/trees/efad1feb9529a2e9e057888a54d7a12a77eded75"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9177e9369af17d0ad68a95401a23db6555eb9077","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9177e9369af17d0ad68a95401a23db6555eb9077","html_url":"https://github.com/apache/openjpa/commit/9177e9369af17d0ad68a95401a23db6555eb9077","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9177e9369af17d0ad68a95401a23db6555eb9077/comments","author":null,"committer":null,"parents":[{"sha":"f68c531a5ba53768e00daa7fad5749f4ad31da6b","url":"https://api.github.com/repos/apache/openjpa/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b","html_url":"https://github.com/apache/openjpa/commit/f68c531a5ba53768e00daa7fad5749f4ad31da6b"}]},{"sha":"f6ae418aa546bf481bf5079ade672c0aa41bf188","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2YWU0MThhYTU0NmJmNDgxYmY1MDc5YWRlNjcyYzBhYTQxYmYxODg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-27T00:26:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-27T00:26:00Z"},"message":"OPENJPA-1267: JDBC Escape Syntax for temporal type data in Criteria Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808235 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5c8a49180b2bd2ac2825a570fffac33282c05ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/d5c8a49180b2bd2ac2825a570fffac33282c05ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f6ae418aa546bf481bf5079ade672c0aa41bf188","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f6ae418aa546bf481bf5079ade672c0aa41bf188","html_url":"https://github.com/apache/openjpa/commit/f6ae418aa546bf481bf5079ade672c0aa41bf188","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f6ae418aa546bf481bf5079ade672c0aa41bf188/comments","author":null,"committer":null,"parents":[{"sha":"9177e9369af17d0ad68a95401a23db6555eb9077","url":"https://api.github.com/repos/apache/openjpa/commits/9177e9369af17d0ad68a95401a23db6555eb9077","html_url":"https://github.com/apache/openjpa/commit/9177e9369af17d0ad68a95401a23db6555eb9077"}]},{"sha":"f06d862ec60cd1ab679152e0c7c6588c3b6282e1","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwNmQ4NjJlYzYwY2QxYWI2NzkxNTJlMGM3YzY1ODhjM2I2MjgyZTE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-27T01:26:37Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-27T01:26:37Z"},"message":"OPENJPA-386:\nHandle abstract and non abstract MappedSuperClasses identically. \nSubmitted By: Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808243 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7151122f3edc0675783e141efe7a23aad6b9a38a","url":"https://api.github.com/repos/apache/openjpa/git/trees/7151122f3edc0675783e141efe7a23aad6b9a38a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f06d862ec60cd1ab679152e0c7c6588c3b6282e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f06d862ec60cd1ab679152e0c7c6588c3b6282e1","html_url":"https://github.com/apache/openjpa/commit/f06d862ec60cd1ab679152e0c7c6588c3b6282e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f06d862ec60cd1ab679152e0c7c6588c3b6282e1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f6ae418aa546bf481bf5079ade672c0aa41bf188","url":"https://api.github.com/repos/apache/openjpa/commits/f6ae418aa546bf481bf5079ade672c0aa41bf188","html_url":"https://github.com/apache/openjpa/commit/f6ae418aa546bf481bf5079ade672c0aa41bf188"}]},{"sha":"39da6319dd33c1b22c9ff3ea4f228f5d7c7050da","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5ZGE2MzE5ZGQzM2MxYjIyYzlmZjNlYTRmMjI4ZjVkN2M3MDUwZGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-27T12:38:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-27T12:38:33Z"},"message":"OPENJPA-1265: move test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a0422b6d1b9aa99508084d9a7527471e4f65e08","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a0422b6d1b9aa99508084d9a7527471e4f65e08"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/39da6319dd33c1b22c9ff3ea4f228f5d7c7050da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/39da6319dd33c1b22c9ff3ea4f228f5d7c7050da","html_url":"https://github.com/apache/openjpa/commit/39da6319dd33c1b22c9ff3ea4f228f5d7c7050da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/39da6319dd33c1b22c9ff3ea4f228f5d7c7050da/comments","author":null,"committer":null,"parents":[{"sha":"f06d862ec60cd1ab679152e0c7c6588c3b6282e1","url":"https://api.github.com/repos/apache/openjpa/commits/f06d862ec60cd1ab679152e0c7c6588c3b6282e1","html_url":"https://github.com/apache/openjpa/commit/f06d862ec60cd1ab679152e0c7c6588c3b6282e1"}]},{"sha":"6305be480bc3a82149f2c25b09a1980224e36e94","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzMDViZTQ4MGJjM2E4MjE0OWYyYzI1YjA5YTE5ODAyMjRlMzZlOTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-27T16:53:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-27T16:53:50Z"},"message":"OPENJPA-1225: Fail fast on wrong constructor() argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808513 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c9542056044ffe14304bb371b423686d564775a","url":"https://api.github.com/repos/apache/openjpa/git/trees/2c9542056044ffe14304bb371b423686d564775a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6305be480bc3a82149f2c25b09a1980224e36e94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6305be480bc3a82149f2c25b09a1980224e36e94","html_url":"https://github.com/apache/openjpa/commit/6305be480bc3a82149f2c25b09a1980224e36e94","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6305be480bc3a82149f2c25b09a1980224e36e94/comments","author":null,"committer":null,"parents":[{"sha":"39da6319dd33c1b22c9ff3ea4f228f5d7c7050da","url":"https://api.github.com/repos/apache/openjpa/commits/39da6319dd33c1b22c9ff3ea4f228f5d7c7050da","html_url":"https://github.com/apache/openjpa/commit/39da6319dd33c1b22c9ff3ea4f228f5d7c7050da"}]},{"sha":"12015d3f1d0eb3210d41bf90ef16dd15f0e72eca","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyMDE1ZDNmMWQwZWIzMjEwZDQxYmY5MGVmMTZkZDE1ZjBlNzJlY2E=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T00:53:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T00:53:50Z"},"message":"getLong was using INT. Patch by Criag Russell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808701 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e906549ee9973890a5bdf8e94621c2a1f50bf20e","url":"https://api.github.com/repos/apache/openjpa/git/trees/e906549ee9973890a5bdf8e94621c2a1f50bf20e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/12015d3f1d0eb3210d41bf90ef16dd15f0e72eca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/12015d3f1d0eb3210d41bf90ef16dd15f0e72eca","html_url":"https://github.com/apache/openjpa/commit/12015d3f1d0eb3210d41bf90ef16dd15f0e72eca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/12015d3f1d0eb3210d41bf90ef16dd15f0e72eca/comments","author":null,"committer":null,"parents":[{"sha":"6305be480bc3a82149f2c25b09a1980224e36e94","url":"https://api.github.com/repos/apache/openjpa/commits/6305be480bc3a82149f2c25b09a1980224e36e94","html_url":"https://github.com/apache/openjpa/commit/6305be480bc3a82149f2c25b09a1980224e36e94"}]},{"sha":"149dbef93b99ab50350f352a4864054c38ec863d","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0OWRiZWY5M2I5OWFiNTAzNTBmMzUyYTQ4NjQwNTRjMzhlYzg2M2Q=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T00:54:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T00:54:52Z"},"message":"OPENJPA-1116: Setting strategy on FieldMappingInfo instead of ValueMappingInfo. RuntimeStrategyInstaller installs strategy from FieldMappingInfo. Contributed by Ashish Palliwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808703 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4f82e779f0e84632c2729f1b3d586836785d256b","url":"https://api.github.com/repos/apache/openjpa/git/trees/4f82e779f0e84632c2729f1b3d586836785d256b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/149dbef93b99ab50350f352a4864054c38ec863d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/149dbef93b99ab50350f352a4864054c38ec863d","html_url":"https://github.com/apache/openjpa/commit/149dbef93b99ab50350f352a4864054c38ec863d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/149dbef93b99ab50350f352a4864054c38ec863d/comments","author":null,"committer":null,"parents":[{"sha":"12015d3f1d0eb3210d41bf90ef16dd15f0e72eca","url":"https://api.github.com/repos/apache/openjpa/commits/12015d3f1d0eb3210d41bf90ef16dd15f0e72eca","html_url":"https://github.com/apache/openjpa/commit/12015d3f1d0eb3210d41bf90ef16dd15f0e72eca"}]},{"sha":"250186fbcbf7b82437ae4e912cdcd92bab8640b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1MDE4NmZiY2JmN2I4MjQzN2FlNGU5MTJjZGNkOTJiYWI4NjQwYjg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T01:39:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T01:39:15Z"},"message":"OPENJPA-1100: Raise exception for unsupported version field type rather than silently ignoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808725 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8e53b9f24b17dd96c9f0881f41d5d5776044311b","url":"https://api.github.com/repos/apache/openjpa/git/trees/8e53b9f24b17dd96c9f0881f41d5d5776044311b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/250186fbcbf7b82437ae4e912cdcd92bab8640b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/250186fbcbf7b82437ae4e912cdcd92bab8640b8","html_url":"https://github.com/apache/openjpa/commit/250186fbcbf7b82437ae4e912cdcd92bab8640b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/250186fbcbf7b82437ae4e912cdcd92bab8640b8/comments","author":null,"committer":null,"parents":[{"sha":"149dbef93b99ab50350f352a4864054c38ec863d","url":"https://api.github.com/repos/apache/openjpa/commits/149dbef93b99ab50350f352a4864054c38ec863d","html_url":"https://github.com/apache/openjpa/commit/149dbef93b99ab50350f352a4864054c38ec863d"}]},{"sha":"78e93abb515193f3b1abd00ee9074186527fb110","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4ZTkzYWJiNTE1MTkzZjNiMWFiZDAwZWU5MDc0MTg2NTI3ZmIxMTA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-28T04:27:53Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-28T04:27:53Z"},"message":"OPENJPA-1269: honor the table attribute in the MapKeyColumn annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808750 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"653efb48199d79df79a95b8d01c09f5bf20669f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/653efb48199d79df79a95b8d01c09f5bf20669f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78e93abb515193f3b1abd00ee9074186527fb110","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78e93abb515193f3b1abd00ee9074186527fb110","html_url":"https://github.com/apache/openjpa/commit/78e93abb515193f3b1abd00ee9074186527fb110","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78e93abb515193f3b1abd00ee9074186527fb110/comments","author":null,"committer":null,"parents":[{"sha":"250186fbcbf7b82437ae4e912cdcd92bab8640b8","url":"https://api.github.com/repos/apache/openjpa/commits/250186fbcbf7b82437ae4e912cdcd92bab8640b8","html_url":"https://github.com/apache/openjpa/commit/250186fbcbf7b82437ae4e912cdcd92bab8640b8"}]},{"sha":"991cdcae7da3904a932bf9c5c453a6de0685e8c9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5MWNkY2FlN2RhMzkwNGE5MzJiZjljNWM0NTNhNmRlMDY4NWU4Yzk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-28T18:25:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-28T18:25:08Z"},"message":"OPENJPA-1271: \nEnable CacheStoreMode and CacheRetrieveMode properties to be set for an EntityManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808981 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"823b81001f1c8457c30f77f89e3ca41b79acfb70","url":"https://api.github.com/repos/apache/openjpa/git/trees/823b81001f1c8457c30f77f89e3ca41b79acfb70"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/991cdcae7da3904a932bf9c5c453a6de0685e8c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/991cdcae7da3904a932bf9c5c453a6de0685e8c9","html_url":"https://github.com/apache/openjpa/commit/991cdcae7da3904a932bf9c5c453a6de0685e8c9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/991cdcae7da3904a932bf9c5c453a6de0685e8c9/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"78e93abb515193f3b1abd00ee9074186527fb110","url":"https://api.github.com/repos/apache/openjpa/commits/78e93abb515193f3b1abd00ee9074186527fb110","html_url":"https://github.com/apache/openjpa/commit/78e93abb515193f3b1abd00ee9074186527fb110"}]},{"sha":"d02f0688aece4914a1180be2d659f8ccb821f715","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwMmYwNjg4YWVjZTQ5MTRhMTE4MGJlMmQ2NTlmOGNjYjgyMWY3MTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-28T19:12:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-28T19:12:35Z"},"message":"OPENJPA-1271:\nMissed a class on previous commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808991 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b45d537e86038cbbe10bd1820b2ae75f8d120ce4","url":"https://api.github.com/repos/apache/openjpa/git/trees/b45d537e86038cbbe10bd1820b2ae75f8d120ce4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d02f0688aece4914a1180be2d659f8ccb821f715","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d02f0688aece4914a1180be2d659f8ccb821f715","html_url":"https://github.com/apache/openjpa/commit/d02f0688aece4914a1180be2d659f8ccb821f715","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d02f0688aece4914a1180be2d659f8ccb821f715/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"991cdcae7da3904a932bf9c5c453a6de0685e8c9","url":"https://api.github.com/repos/apache/openjpa/commits/991cdcae7da3904a932bf9c5c453a6de0685e8c9","html_url":"https://github.com/apache/openjpa/commit/991cdcae7da3904a932bf9c5c453a6de0685e8c9"}]},{"sha":"fdcbdccae05b5006770f9965b45cab5526c7655d","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkY2JkY2NhZTA1YjUwMDY3NzBmOTk2NWI0NWNhYjU1MjZjNzY1NWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-28T19:29:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-28T19:29:08Z"},"message":"OPENJPA-1271: \nRemove @Override annotations which caused compile errors with JDK5\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808997 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bfcd25b1633fc87c2034d210d727455d4a11284d","url":"https://api.github.com/repos/apache/openjpa/git/trees/bfcd25b1633fc87c2034d210d727455d4a11284d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fdcbdccae05b5006770f9965b45cab5526c7655d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fdcbdccae05b5006770f9965b45cab5526c7655d","html_url":"https://github.com/apache/openjpa/commit/fdcbdccae05b5006770f9965b45cab5526c7655d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fdcbdccae05b5006770f9965b45cab5526c7655d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d02f0688aece4914a1180be2d659f8ccb821f715","url":"https://api.github.com/repos/apache/openjpa/commits/d02f0688aece4914a1180be2d659f8ccb821f715","html_url":"https://github.com/apache/openjpa/commit/d02f0688aece4914a1180be2d659f8ccb821f715"}]},{"sha":"fe44661dc2614e44953e0d9aaba56e89954ccab5","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlNDQ2NjFkYzI2MTRlNDQ5NTNlMGQ5YWFiYTU2ZTg5OTU0Y2NhYjU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-28T21:29:36Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-28T21:29:36Z"},"message":"OPENJPA-1272 Add testcases for association overrides applied to element collection with domain featureSelection defined in XML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809035 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6ee675e0a9ffe6c3056f12177f9dfd589e8f59b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f6ee675e0a9ffe6c3056f12177f9dfd589e8f59b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe44661dc2614e44953e0d9aaba56e89954ccab5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe44661dc2614e44953e0d9aaba56e89954ccab5","html_url":"https://github.com/apache/openjpa/commit/fe44661dc2614e44953e0d9aaba56e89954ccab5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe44661dc2614e44953e0d9aaba56e89954ccab5/comments","author":null,"committer":null,"parents":[{"sha":"fdcbdccae05b5006770f9965b45cab5526c7655d","url":"https://api.github.com/repos/apache/openjpa/commits/fdcbdccae05b5006770f9965b45cab5526c7655d","html_url":"https://github.com/apache/openjpa/commit/fdcbdccae05b5006770f9965b45cab5526c7655d"}]},{"sha":"0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3OTU3NzhkM2Q5ZjFiM2I4YjNkZDcwMzZmZDk4ZGY2OTcwYTIzYjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:32:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:32:29Z"},"message":"OPENJPA-1013: Visitor pattern for collecting declared parameters. Editing with parameters. Search within result usage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809036 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e81810674fc21aed115d2a2ddfb3945912a2bc4c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e81810674fc21aed115d2a2ddfb3945912a2bc4c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","html_url":"https://github.com/apache/openjpa/commit/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/comments","author":null,"committer":null,"parents":[{"sha":"fe44661dc2614e44953e0d9aaba56e89954ccab5","url":"https://api.github.com/repos/apache/openjpa/commits/fe44661dc2614e44953e0d9aaba56e89954ccab5","html_url":"https://github.com/apache/openjpa/commit/fe44661dc2614e44953e0d9aaba56e89954ccab5"}]},{"sha":"f214d9f3971bd2f0b5c25574664c57841025dd7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyMTRkOWYzOTcxYmQyZjBiNWMyNTU3NDY2NGM1Nzg0MTAyNWRkN2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:37:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:37:45Z"},"message":"OPENJPA-1013: Visitor pattern on criteria expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"53267f15fc9fae972bbd5186c99c428c44768859","url":"https://api.github.com/repos/apache/openjpa/git/trees/53267f15fc9fae972bbd5186c99c428c44768859"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b","html_url":"https://github.com/apache/openjpa/commit/f214d9f3971bd2f0b5c25574664c57841025dd7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b/comments","author":null,"committer":null,"parents":[{"sha":"0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","url":"https://api.github.com/repos/apache/openjpa/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","html_url":"https://github.com/apache/openjpa/commit/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3"}]},{"sha":"f13af4a400bfb678948ed7c37d45ac694f161de2","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxM2FmNGE0MDBiZmI2Nzg5NDhlZDdjMzdkNDVhYzY5NGYxNjFkZTI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-31T17:42:03Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-31T17:42:03Z"},"message":"OPENJPA-1272 Test was not cleaning up after itself properly.  This was causing failures on some build configurations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809671 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e1a00bafa0232b38881480d79680097715279c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/6e1a00bafa0232b38881480d79680097715279c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f13af4a400bfb678948ed7c37d45ac694f161de2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f13af4a400bfb678948ed7c37d45ac694f161de2","html_url":"https://github.com/apache/openjpa/commit/f13af4a400bfb678948ed7c37d45ac694f161de2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f13af4a400bfb678948ed7c37d45ac694f161de2/comments","author":null,"committer":null,"parents":[{"sha":"f214d9f3971bd2f0b5c25574664c57841025dd7b","url":"https://api.github.com/repos/apache/openjpa/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b","html_url":"https://github.com/apache/openjpa/commit/f214d9f3971bd2f0b5c25574664c57841025dd7b"}]},{"sha":"e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2Y2NiYjBjMGQ4OGJlM2YzNmVhOTdmMWY5ZWM5ZGViY2M1ZmM0ZTU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-01T02:06:03Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-01T02:06:03Z"},"message":"OPENJPA-1274 Support cascade detach specified in an XML mapping file\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809797 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba2be89a6b6f1b480d5e0c9fff0817bac364a57c","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba2be89a6b6f1b480d5e0c9fff0817bac364a57c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","html_url":"https://github.com/apache/openjpa/commit/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5/comments","author":null,"committer":null,"parents":[{"sha":"f13af4a400bfb678948ed7c37d45ac694f161de2","url":"https://api.github.com/repos/apache/openjpa/commits/f13af4a400bfb678948ed7c37d45ac694f161de2","html_url":"https://github.com/apache/openjpa/commit/f13af4a400bfb678948ed7c37d45ac694f161de2"}]},{"sha":"69cf52f68d306838a40ffbadab9b3444be5f7f4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5Y2Y1MmY2OGQzMDY4MzhhNDBmZmJhZGFiOWIzNDQ0YmU1ZjdmNGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T19:48:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T19:48:09Z"},"message":"OPENJPA-1279: \nAdding testcases and fixing cache exclusion logic in DataCacheStoreManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810197 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"139bfa9689a96eb70f7acbc04d0de37fa1121d79","url":"https://api.github.com/repos/apache/openjpa/git/trees/139bfa9689a96eb70f7acbc04d0de37fa1121d79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a","html_url":"https://github.com/apache/openjpa/commit/69cf52f68d306838a40ffbadab9b3444be5f7f4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","url":"https://api.github.com/repos/apache/openjpa/commits/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","html_url":"https://github.com/apache/openjpa/commit/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5"}]},{"sha":"e39a9a09e006697ef6182939c9885071e5e8d476","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzOWE5YTA5ZTAwNjY5N2VmNjE4MjkzOWM5ODg1MDcxZTVlOGQ0NzY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T20:16:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T20:16:19Z"},"message":"OPENJPA-1278,OPENJPA-1276,OPENJPA-1265: \n  Add new OpenJPACriteriaXYZ interface for extended features. \n  Draft version of conversion of Criteria Query to a JPQL-like string\n  The getter methods return non-live, non-null, mutable lists/sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810212 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"92a77ecc7e23a9324c9eadc801c23fb63c1c4aff","url":"https://api.github.com/repos/apache/openjpa/git/trees/92a77ecc7e23a9324c9eadc801c23fb63c1c4aff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e39a9a09e006697ef6182939c9885071e5e8d476","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e39a9a09e006697ef6182939c9885071e5e8d476","html_url":"https://github.com/apache/openjpa/commit/e39a9a09e006697ef6182939c9885071e5e8d476","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e39a9a09e006697ef6182939c9885071e5e8d476/comments","author":null,"committer":null,"parents":[{"sha":"69cf52f68d306838a40ffbadab9b3444be5f7f4a","url":"https://api.github.com/repos/apache/openjpa/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a","html_url":"https://github.com/apache/openjpa/commit/69cf52f68d306838a40ffbadab9b3444be5f7f4a"}]},{"sha":"b32bf1b73002fe2ebead452099af311ab1b93367","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzMmJmMWI3MzAwMmZlMmViZWFkNDUyMDk5YWYzMTFhYjFiOTMzNjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T20:47:33Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T20:47:33Z"},"message":"remove errant TODO\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810228 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b6ba49e51fb2e15c55d2d7aebebe3734454e8c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/3b6ba49e51fb2e15c55d2d7aebebe3734454e8c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b32bf1b73002fe2ebead452099af311ab1b93367","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b32bf1b73002fe2ebead452099af311ab1b93367","html_url":"https://github.com/apache/openjpa/commit/b32bf1b73002fe2ebead452099af311ab1b93367","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b32bf1b73002fe2ebead452099af311ab1b93367/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e39a9a09e006697ef6182939c9885071e5e8d476","url":"https://api.github.com/repos/apache/openjpa/commits/e39a9a09e006697ef6182939c9885071e5e8d476","html_url":"https://github.com/apache/openjpa/commit/e39a9a09e006697ef6182939c9885071e5e8d476"}]},{"sha":"82cda8b8d5838fd1a431afda464dc0cb3518eb9f","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyY2RhOGI4ZDU4MzhmZDFhNDMxYWZkYTQ2NGRjMGNiMzUxOGViOWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T20:50:32Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T20:50:32Z"},"message":"remove author tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810229 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0b715764baf2135f6b0a51a3f6e1dd4bec45c40","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0b715764baf2135f6b0a51a3f6e1dd4bec45c40"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82cda8b8d5838fd1a431afda464dc0cb3518eb9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82cda8b8d5838fd1a431afda464dc0cb3518eb9f","html_url":"https://github.com/apache/openjpa/commit/82cda8b8d5838fd1a431afda464dc0cb3518eb9f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82cda8b8d5838fd1a431afda464dc0cb3518eb9f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b32bf1b73002fe2ebead452099af311ab1b93367","url":"https://api.github.com/repos/apache/openjpa/commits/b32bf1b73002fe2ebead452099af311ab1b93367","html_url":"https://github.com/apache/openjpa/commit/b32bf1b73002fe2ebead452099af311ab1b93367"}]},{"sha":"a291185ad83f3961c5d27b597404461ba00e4030","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyOTExODVhZDgzZjM5NjFjNWQyN2I1OTc0MDQ0NjFiYTAwZTQwMzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T21:07:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T21:07:19Z"},"message":"OPENJPA-1278: missing file\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810240 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8cbe8c4136a509b41f2dd7fde2821260e9e942d4","url":"https://api.github.com/repos/apache/openjpa/git/trees/8cbe8c4136a509b41f2dd7fde2821260e9e942d4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a291185ad83f3961c5d27b597404461ba00e4030","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a291185ad83f3961c5d27b597404461ba00e4030","html_url":"https://github.com/apache/openjpa/commit/a291185ad83f3961c5d27b597404461ba00e4030","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a291185ad83f3961c5d27b597404461ba00e4030/comments","author":null,"committer":null,"parents":[{"sha":"82cda8b8d5838fd1a431afda464dc0cb3518eb9f","url":"https://api.github.com/repos/apache/openjpa/commits/82cda8b8d5838fd1a431afda464dc0cb3518eb9f","html_url":"https://github.com/apache/openjpa/commit/82cda8b8d5838fd1a431afda464dc0cb3518eb9f"}]},{"sha":"8a6a39dec73e9f380371791d502aaf3a7ea9bc5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhNmEzOWRlYzczZTlmMzgwMzcxNzkxZDUwMmFhZjNhN2VhOWJjNWM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-01T21:48:25Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-01T21:48:25Z"},"message":"OPENJPA-1275 Update schemas to 8/31 revision\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810261 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2fa4f1c52fdd60c8796861b28997ae4749309f9d","url":"https://api.github.com/repos/apache/openjpa/git/trees/2fa4f1c52fdd60c8796861b28997ae4749309f9d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a6a39dec73e9f380371791d502aaf3a7ea9bc5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a6a39dec73e9f380371791d502aaf3a7ea9bc5c","html_url":"https://github.com/apache/openjpa/commit/8a6a39dec73e9f380371791d502aaf3a7ea9bc5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a6a39dec73e9f380371791d502aaf3a7ea9bc5c/comments","author":null,"committer":null,"parents":[{"sha":"a291185ad83f3961c5d27b597404461ba00e4030","url":"https://api.github.com/repos/apache/openjpa/commits/a291185ad83f3961c5d27b597404461ba00e4030","html_url":"https://github.com/apache/openjpa/commit/a291185ad83f3961c5d27b597404461ba00e4030"}]},{"sha":"8c929e6e10fe6c846f0dd8b862b24d5df2c3c887","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjOTI5ZTZlMTBmZTZjODQ2ZjBkZDhiODYyYjI0ZDVkZjJjM2M4ODc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T23:23:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T23:23:07Z"},"message":"OPENJPA-1276: Add CQL for Parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e081dfd58c5498e9a7571365728d0b42b7adedbd","url":"https://api.github.com/repos/apache/openjpa/git/trees/e081dfd58c5498e9a7571365728d0b42b7adedbd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c929e6e10fe6c846f0dd8b862b24d5df2c3c887","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c929e6e10fe6c846f0dd8b862b24d5df2c3c887","html_url":"https://github.com/apache/openjpa/commit/8c929e6e10fe6c846f0dd8b862b24d5df2c3c887","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c929e6e10fe6c846f0dd8b862b24d5df2c3c887/comments","author":null,"committer":null,"parents":[{"sha":"8a6a39dec73e9f380371791d502aaf3a7ea9bc5c","url":"https://api.github.com/repos/apache/openjpa/commits/8a6a39dec73e9f380371791d502aaf3a7ea9bc5c","html_url":"https://github.com/apache/openjpa/commit/8a6a39dec73e9f380371791d502aaf3a7ea9bc5c"}]},{"sha":"ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjOTM5ZjdiNWYyM2U4ZWY3M2UzN2M4YmFhMWIwYjIzYzVjNGVkY2U=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-02T01:46:54Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-02T01:46:54Z"},"message":"OPENJPA-1281: fix reparameter when PreparedQueryCache is on\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810331 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4eb25014cf4d3d5fe1eb1ad5ace20b911d46560d","url":"https://api.github.com/repos/apache/openjpa/git/trees/4eb25014cf4d3d5fe1eb1ad5ace20b911d46560d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","html_url":"https://github.com/apache/openjpa/commit/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce/comments","author":null,"committer":null,"parents":[{"sha":"8c929e6e10fe6c846f0dd8b862b24d5df2c3c887","url":"https://api.github.com/repos/apache/openjpa/commits/8c929e6e10fe6c846f0dd8b862b24d5df2c3c887","html_url":"https://github.com/apache/openjpa/commit/8c929e6e10fe6c846f0dd8b862b24d5df2c3c887"}]},{"sha":"0036dc5bfbaec2a4bc5ededa93301c4353d26838","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwMzZkYzViZmJhZWMyYTRiYzVlZGVkYTkzMzAxYzQzNTNkMjY4Mzg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T03:03:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T03:03:48Z"},"message":"OPNJPA-1275: Align with JPA 2.0 Public Draft 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810347 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2eed9e777b872bc6379042589e754279d15f17b1","url":"https://api.github.com/repos/apache/openjpa/git/trees/2eed9e777b872bc6379042589e754279d15f17b1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838","html_url":"https://github.com/apache/openjpa/commit/0036dc5bfbaec2a4bc5ededa93301c4353d26838","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838/comments","author":null,"committer":null,"parents":[{"sha":"ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","url":"https://api.github.com/repos/apache/openjpa/commits/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","html_url":"https://github.com/apache/openjpa/commit/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce"}]},{"sha":"0bd820487556d583d28d61e913703d0b11cda91e","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiZDgyMDQ4NzU1NmQ1ODNkMjhkNjFlOTEzNzAzZDBiMTFjZGE5MWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T06:17:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T06:17:27Z"},"message":"OPENJPA-1275: Align with JPA 2.0 Public Draft Version 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810366 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ddb3675943c1c7c111b987cab8c1c7526911dbbd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ddb3675943c1c7c111b987cab8c1c7526911dbbd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0bd820487556d583d28d61e913703d0b11cda91e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0bd820487556d583d28d61e913703d0b11cda91e","html_url":"https://github.com/apache/openjpa/commit/0bd820487556d583d28d61e913703d0b11cda91e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0bd820487556d583d28d61e913703d0b11cda91e/comments","author":null,"committer":null,"parents":[{"sha":"0036dc5bfbaec2a4bc5ededa93301c4353d26838","url":"https://api.github.com/repos/apache/openjpa/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838","html_url":"https://github.com/apache/openjpa/commit/0036dc5bfbaec2a4bc5ededa93301c4353d26838"}]},{"sha":"3c3c8082d31bca141979c0908172580ebe6c355a","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjM2M4MDgyZDMxYmNhMTQxOTc5YzA5MDgxNzI1ODBlYmU2YzM1NWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T07:18:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T07:18:24Z"},"message":"OPENJPA-1275: pom update to EA8 same as PFD2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810386 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6ac4b712e936f26608b3adb496c6c358b2f34e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/f6ac4b712e936f26608b3adb496c6c358b2f34e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3c3c8082d31bca141979c0908172580ebe6c355a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3c3c8082d31bca141979c0908172580ebe6c355a","html_url":"https://github.com/apache/openjpa/commit/3c3c8082d31bca141979c0908172580ebe6c355a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3c3c8082d31bca141979c0908172580ebe6c355a/comments","author":null,"committer":null,"parents":[{"sha":"0bd820487556d583d28d61e913703d0b11cda91e","url":"https://api.github.com/repos/apache/openjpa/commits/0bd820487556d583d28d61e913703d0b11cda91e","html_url":"https://github.com/apache/openjpa/commit/0bd820487556d583d28d61e913703d0b11cda91e"}]},{"sha":"1f347633aa89cf78f0af5d08ea6927e75f8cf826","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmMzQ3NjMzYWE4OWNmNzhmMGFmNWQwOGVhNjkyN2U3NWY4Y2Y4MjY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-02T18:18:27Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-02T18:18:27Z"},"message":"OPENJPA-1282 Update bean validation RI provider and spec API level.  Remove allow failure from test that passes due to provider update.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810645 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec7ae7f9a5393b0bb18e9ca5faabdb15ed6996f8","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec7ae7f9a5393b0bb18e9ca5faabdb15ed6996f8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1f347633aa89cf78f0af5d08ea6927e75f8cf826","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1f347633aa89cf78f0af5d08ea6927e75f8cf826","html_url":"https://github.com/apache/openjpa/commit/1f347633aa89cf78f0af5d08ea6927e75f8cf826","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1f347633aa89cf78f0af5d08ea6927e75f8cf826/comments","author":null,"committer":null,"parents":[{"sha":"3c3c8082d31bca141979c0908172580ebe6c355a","url":"https://api.github.com/repos/apache/openjpa/commits/3c3c8082d31bca141979c0908172580ebe6c355a","html_url":"https://github.com/apache/openjpa/commit/3c3c8082d31bca141979c0908172580ebe6c355a"}]},{"sha":"e1404bdbbeed9c5fe1976f4647ecd97e6deb8236","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxNDA0YmRiYmVlZDljNWZlMTk3NmY0NjQ3ZWNkOTdlNmRlYjgyMzY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-02T19:12:00Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-02T19:12:00Z"},"message":"OPENJPA-1282 Update geronimo-validation spec used for builds to EA5 to match 1.0.CR5 level\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810674 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb97f319ba38b21c7d29359d3348bab4f31b637d","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb97f319ba38b21c7d29359d3348bab4f31b637d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e1404bdbbeed9c5fe1976f4647ecd97e6deb8236","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e1404bdbbeed9c5fe1976f4647ecd97e6deb8236","html_url":"https://github.com/apache/openjpa/commit/e1404bdbbeed9c5fe1976f4647ecd97e6deb8236","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e1404bdbbeed9c5fe1976f4647ecd97e6deb8236/comments","author":null,"committer":null,"parents":[{"sha":"1f347633aa89cf78f0af5d08ea6927e75f8cf826","url":"https://api.github.com/repos/apache/openjpa/commits/1f347633aa89cf78f0af5d08ea6927e75f8cf826","html_url":"https://github.com/apache/openjpa/commit/1f347633aa89cf78f0af5d08ea6927e75f8cf826"}]},{"sha":"9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkNjllNTlhN2NlOGVlMWQ0M2MyMjU5MmVhOTRkZmE2MWNkMjk0ODc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-02T19:13:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-02T19:13:08Z"},"message":"remove validation spec api from openjpa-all, as it should be provided by the user with the BV impl\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810675 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"186643c8674ff3709a6dcfaa1b2e11905e4db4f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/186643c8674ff3709a6dcfaa1b2e11905e4db4f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","html_url":"https://github.com/apache/openjpa/commit/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487/comments","author":null,"committer":null,"parents":[{"sha":"e1404bdbbeed9c5fe1976f4647ecd97e6deb8236","url":"https://api.github.com/repos/apache/openjpa/commits/e1404bdbbeed9c5fe1976f4647ecd97e6deb8236","html_url":"https://github.com/apache/openjpa/commit/e1404bdbbeed9c5fe1976f4647ecd97e6deb8236"}]},{"sha":"817696298d8a20044076a0b19dd61531d744c2bd","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNzY5NjI5OGQ4YTIwMDQ0MDc2YTBiMTlkZDYxNTMxZDc0NGMyYmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T19:47:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T19:47:10Z"},"message":"OPENJPA-1276: preserve precedence order while rendering logical operators/operands\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"536242ee2c5c4ef9d573fda249a28653b3fc96fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/536242ee2c5c4ef9d573fda249a28653b3fc96fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/817696298d8a20044076a0b19dd61531d744c2bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/817696298d8a20044076a0b19dd61531d744c2bd","html_url":"https://github.com/apache/openjpa/commit/817696298d8a20044076a0b19dd61531d744c2bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/817696298d8a20044076a0b19dd61531d744c2bd/comments","author":null,"committer":null,"parents":[{"sha":"9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","url":"https://api.github.com/repos/apache/openjpa/commits/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","html_url":"https://github.com/apache/openjpa/commit/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487"}]},{"sha":"1908a911803951e2a3bb27f203ee2bd077092ff1","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5MDhhOTExODAzOTUxZTJhM2JiMjdmMjAzZWUyYmQwNzcwOTJmZjE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-02T21:27:18Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-02T21:27:18Z"},"message":"OPENJPA-1284 Fix missing 1.0 schema license headers and update NOTICE files with license header required wording\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d43ba9b9f76149d988b354c5094eeea622c681f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d43ba9b9f76149d988b354c5094eeea622c681f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1908a911803951e2a3bb27f203ee2bd077092ff1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1908a911803951e2a3bb27f203ee2bd077092ff1","html_url":"https://github.com/apache/openjpa/commit/1908a911803951e2a3bb27f203ee2bd077092ff1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1908a911803951e2a3bb27f203ee2bd077092ff1/comments","author":null,"committer":null,"parents":[{"sha":"817696298d8a20044076a0b19dd61531d744c2bd","url":"https://api.github.com/repos/apache/openjpa/commits/817696298d8a20044076a0b19dd61531d744c2bd","html_url":"https://github.com/apache/openjpa/commit/817696298d8a20044076a0b19dd61531d744c2bd"}]},{"sha":"5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkNjU4MWJmN2Y3NWRkZjdjNzdlMzdhMDg3Y2Y2YTYzY2M3NTdlOTQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-03T00:45:17Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-03T00:45:17Z"},"message":"OPENJPA-1283 Incorrect SQL for a JPQL query selecting Map value from an elementCollection of a Map and the map the value is an embeddable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e0c1b62b270185c49dfeabacbba0b03a8c1e908","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e0c1b62b270185c49dfeabacbba0b03a8c1e908"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","html_url":"https://github.com/apache/openjpa/commit/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94/comments","author":null,"committer":null,"parents":[{"sha":"1908a911803951e2a3bb27f203ee2bd077092ff1","url":"https://api.github.com/repos/apache/openjpa/commits/1908a911803951e2a3bb27f203ee2bd077092ff1","html_url":"https://github.com/apache/openjpa/commit/1908a911803951e2a3bb27f203ee2bd077092ff1"}]},{"sha":"e01390051bc617047b7153868289c11ccb6f4cba","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwMTM5MDA1MWJjNjE3MDQ3YjcxNTM4NjgyODljMTFjY2I2ZjRjYmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-03T08:52:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-03T08:52:17Z"},"message":"OPENJPA-1278,OPENJPA-1276,OPENJPA-1013:   \n  Modify negation of predicate logic\n  Promote interfaces from internal implementaion argument to  public interfaces\n Add Fetch Join and logical precedence order to CQL generation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c03e84f6ffed46576d6ce6eda50f4877f4e73a61","url":"https://api.github.com/repos/apache/openjpa/git/trees/c03e84f6ffed46576d6ce6eda50f4877f4e73a61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e01390051bc617047b7153868289c11ccb6f4cba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e01390051bc617047b7153868289c11ccb6f4cba","html_url":"https://github.com/apache/openjpa/commit/e01390051bc617047b7153868289c11ccb6f4cba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e01390051bc617047b7153868289c11ccb6f4cba/comments","author":null,"committer":null,"parents":[{"sha":"5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","url":"https://api.github.com/repos/apache/openjpa/commits/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","html_url":"https://github.com/apache/openjpa/commit/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94"}]},{"sha":"301fc200d184da687730336c6da1eb6608bf0d44","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwMWZjMjAwZDE4NGRhNjg3NzMwMzM2YzZkYTFlYjY2MDhiZjBkNDQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-03T16:22:06Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-03T16:22:06Z"},"message":"Fix testcase : SQL assertion for Derby only\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811012 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f43b7591bb839fe528ce8e15fe20734a7d6709bd","url":"https://api.github.com/repos/apache/openjpa/git/trees/f43b7591bb839fe528ce8e15fe20734a7d6709bd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/301fc200d184da687730336c6da1eb6608bf0d44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/301fc200d184da687730336c6da1eb6608bf0d44","html_url":"https://github.com/apache/openjpa/commit/301fc200d184da687730336c6da1eb6608bf0d44","comments_url":"https://api.github.com/repos/apache/openjpa/commits/301fc200d184da687730336c6da1eb6608bf0d44/comments","author":null,"committer":null,"parents":[{"sha":"e01390051bc617047b7153868289c11ccb6f4cba","url":"https://api.github.com/repos/apache/openjpa/commits/e01390051bc617047b7153868289c11ccb6f4cba","html_url":"https://github.com/apache/openjpa/commit/e01390051bc617047b7153868289c11ccb6f4cba"}]},{"sha":"c880fdeb7f49d70236357c662480bb71349fa7ff","node_id":"MDY6Q29tbWl0MjA2MzY0OmM4ODBmZGViN2Y0OWQ3MDIzNjM1N2M2NjI0ODBiYjcxMzQ5ZmE3ZmY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-03T22:34:08Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-03T22:34:08Z"},"message":"OPENJPA-1287 Criteria query to generate 'optimize for 1 row' for DB2 if selection is an aggregate function\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8e6ebe9b269c38a5c6defbb2e9e23efb2fac1f88","url":"https://api.github.com/repos/apache/openjpa/git/trees/8e6ebe9b269c38a5c6defbb2e9e23efb2fac1f88"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c880fdeb7f49d70236357c662480bb71349fa7ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c880fdeb7f49d70236357c662480bb71349fa7ff","html_url":"https://github.com/apache/openjpa/commit/c880fdeb7f49d70236357c662480bb71349fa7ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c880fdeb7f49d70236357c662480bb71349fa7ff/comments","author":null,"committer":null,"parents":[{"sha":"301fc200d184da687730336c6da1eb6608bf0d44","url":"https://api.github.com/repos/apache/openjpa/commits/301fc200d184da687730336c6da1eb6608bf0d44","html_url":"https://github.com/apache/openjpa/commit/301fc200d184da687730336c6da1eb6608bf0d44"}]},{"sha":"c35277c156533287a6e20a0401cfc856f27cf36f","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzNTI3N2MxNTY1MzMyODdhNmUyMGEwNDAxY2ZjODU2ZjI3Y2YzNmY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-03T22:39:12Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-03T22:39:12Z"},"message":"OPENJPA-926  Update documentation for explicit access types\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811160 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95122bf947e82f1ee15dd5bbf8d3876a43d4cb2b","url":"https://api.github.com/repos/apache/openjpa/git/trees/95122bf947e82f1ee15dd5bbf8d3876a43d4cb2b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c35277c156533287a6e20a0401cfc856f27cf36f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c35277c156533287a6e20a0401cfc856f27cf36f","html_url":"https://github.com/apache/openjpa/commit/c35277c156533287a6e20a0401cfc856f27cf36f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c35277c156533287a6e20a0401cfc856f27cf36f/comments","author":null,"committer":null,"parents":[{"sha":"c880fdeb7f49d70236357c662480bb71349fa7ff","url":"https://api.github.com/repos/apache/openjpa/commits/c880fdeb7f49d70236357c662480bb71349fa7ff","html_url":"https://github.com/apache/openjpa/commit/c880fdeb7f49d70236357c662480bb71349fa7ff"}]},{"sha":"701221576dc7ff77a99ea8df5c8975ac866f92c0","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwMTIyMTU3NmRjN2ZmNzdhOTllYThkZjVjODk3NWFjODY2ZjkyYzA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T03:20:19Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T03:20:19Z"},"message":"OPENJPA-1286: Relationships in mapped superclass must be unidirectional\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811211 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ee4b2de13901492aa455425b3da1ca59715914f","url":"https://api.github.com/repos/apache/openjpa/git/trees/3ee4b2de13901492aa455425b3da1ca59715914f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/701221576dc7ff77a99ea8df5c8975ac866f92c0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/701221576dc7ff77a99ea8df5c8975ac866f92c0","html_url":"https://github.com/apache/openjpa/commit/701221576dc7ff77a99ea8df5c8975ac866f92c0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/701221576dc7ff77a99ea8df5c8975ac866f92c0/comments","author":null,"committer":null,"parents":[{"sha":"c35277c156533287a6e20a0401cfc856f27cf36f","url":"https://api.github.com/repos/apache/openjpa/commits/c35277c156533287a6e20a0401cfc856f27cf36f","html_url":"https://github.com/apache/openjpa/commit/c35277c156533287a6e20a0401cfc856f27cf36f"}]},{"sha":"d2cc5e03607fc70d84068cc4705e98997e760ebf","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyY2M1ZTAzNjA3ZmM3MGQ4NDA2OGNjNDcwNWU5ODk5N2U3NjBlYmY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T03:21:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T03:21:32Z"},"message":"OPENJPA-1286: Relationships in mapped superclass must be unidirectional\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811212 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59a3183bf807f0b41039e1230fac7faa889b2c87","url":"https://api.github.com/repos/apache/openjpa/git/trees/59a3183bf807f0b41039e1230fac7faa889b2c87"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d2cc5e03607fc70d84068cc4705e98997e760ebf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d2cc5e03607fc70d84068cc4705e98997e760ebf","html_url":"https://github.com/apache/openjpa/commit/d2cc5e03607fc70d84068cc4705e98997e760ebf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d2cc5e03607fc70d84068cc4705e98997e760ebf/comments","author":null,"committer":null,"parents":[{"sha":"701221576dc7ff77a99ea8df5c8975ac866f92c0","url":"https://api.github.com/repos/apache/openjpa/commits/701221576dc7ff77a99ea8df5c8975ac866f92c0","html_url":"https://github.com/apache/openjpa/commit/701221576dc7ff77a99ea8df5c8975ac866f92c0"}]},{"sha":"7bcdee7a609acbdf150ba5734f0400fed0905543","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiY2RlZTdhNjA5YWNiZGYxNTBiYTU3MzRmMDQwMGZlZDA5MDU1NDM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T18:28:29Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T18:28:29Z"},"message":"fix test case problem for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ca1728c87b6809b1c33fa3294dcb4cb1bfad8af","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ca1728c87b6809b1c33fa3294dcb4cb1bfad8af"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7bcdee7a609acbdf150ba5734f0400fed0905543","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7bcdee7a609acbdf150ba5734f0400fed0905543","html_url":"https://github.com/apache/openjpa/commit/7bcdee7a609acbdf150ba5734f0400fed0905543","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7bcdee7a609acbdf150ba5734f0400fed0905543/comments","author":null,"committer":null,"parents":[{"sha":"d2cc5e03607fc70d84068cc4705e98997e760ebf","url":"https://api.github.com/repos/apache/openjpa/commits/d2cc5e03607fc70d84068cc4705e98997e760ebf","html_url":"https://github.com/apache/openjpa/commit/d2cc5e03607fc70d84068cc4705e98997e760ebf"}]},{"sha":"35ef9efaecb177d32d24a064bcbd40ae0578f6d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjM1ZWY5ZWZhZWNiMTc3ZDMyZDI0YTA2NGJjYmQ0MGFlMDU3OGY2ZDU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T21:23:43Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-04T21:23:43Z"},"message":"fix MySQL test case problem.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c87d9fa774d6895cbb45d19907ba92cb900fb65","url":"https://api.github.com/repos/apache/openjpa/git/trees/3c87d9fa774d6895cbb45d19907ba92cb900fb65"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/35ef9efaecb177d32d24a064bcbd40ae0578f6d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/35ef9efaecb177d32d24a064bcbd40ae0578f6d5","html_url":"https://github.com/apache/openjpa/commit/35ef9efaecb177d32d24a064bcbd40ae0578f6d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/35ef9efaecb177d32d24a064bcbd40ae0578f6d5/comments","author":null,"committer":null,"parents":[{"sha":"7bcdee7a609acbdf150ba5734f0400fed0905543","url":"https://api.github.com/repos/apache/openjpa/commits/7bcdee7a609acbdf150ba5734f0400fed0905543","html_url":"https://github.com/apache/openjpa/commit/7bcdee7a609acbdf150ba5734f0400fed0905543"}]},{"sha":"f246cb19b4e883eca5316578acdfb137470d0eb1","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyNDZjYjE5YjRlODgzZWNhNTMxNjU3OGFjZGZiMTM3NDcwZDBlYjE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T04:01:29Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T04:01:29Z"},"message":"fix test case problem for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811754 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5394f66deed2041ae3104aa3f982d66db3765d80","url":"https://api.github.com/repos/apache/openjpa/git/trees/5394f66deed2041ae3104aa3f982d66db3765d80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f246cb19b4e883eca5316578acdfb137470d0eb1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f246cb19b4e883eca5316578acdfb137470d0eb1","html_url":"https://github.com/apache/openjpa/commit/f246cb19b4e883eca5316578acdfb137470d0eb1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f246cb19b4e883eca5316578acdfb137470d0eb1/comments","author":null,"committer":null,"parents":[{"sha":"35ef9efaecb177d32d24a064bcbd40ae0578f6d5","url":"https://api.github.com/repos/apache/openjpa/commits/35ef9efaecb177d32d24a064bcbd40ae0578f6d5","html_url":"https://github.com/apache/openjpa/commit/35ef9efaecb177d32d24a064bcbd40ae0578f6d5"}]},{"sha":"c39ec8a6deaa00473d24624b56a96535730df340","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzOWVjOGE2ZGVhYTAwNDczZDI0NjI0YjU2YTk2NTM1NzMwZGYzNDA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T04:47:28Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T04:47:28Z"},"message":"fix test case problem for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811759 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6862f1c600efcea2a82be18c2b92b51d43141184","url":"https://api.github.com/repos/apache/openjpa/git/trees/6862f1c600efcea2a82be18c2b92b51d43141184"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c39ec8a6deaa00473d24624b56a96535730df340","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c39ec8a6deaa00473d24624b56a96535730df340","html_url":"https://github.com/apache/openjpa/commit/c39ec8a6deaa00473d24624b56a96535730df340","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c39ec8a6deaa00473d24624b56a96535730df340/comments","author":null,"committer":null,"parents":[{"sha":"f246cb19b4e883eca5316578acdfb137470d0eb1","url":"https://api.github.com/repos/apache/openjpa/commits/f246cb19b4e883eca5316578acdfb137470d0eb1","html_url":"https://github.com/apache/openjpa/commit/f246cb19b4e883eca5316578acdfb137470d0eb1"}]},{"sha":"f45899eee858a5d7ab93096252ece5f509018095","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0NTg5OWVlZTg1OGE1ZDdhYjkzMDk2MjUyZWNlNWY1MDkwMTgwOTU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T06:05:39Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T06:05:39Z"},"message":"fix test case problem for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811767 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f7bc83d182038e9fa3720f68e3da66911dbac8de","url":"https://api.github.com/repos/apache/openjpa/git/trees/f7bc83d182038e9fa3720f68e3da66911dbac8de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f45899eee858a5d7ab93096252ece5f509018095","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f45899eee858a5d7ab93096252ece5f509018095","html_url":"https://github.com/apache/openjpa/commit/f45899eee858a5d7ab93096252ece5f509018095","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f45899eee858a5d7ab93096252ece5f509018095/comments","author":null,"committer":null,"parents":[{"sha":"c39ec8a6deaa00473d24624b56a96535730df340","url":"https://api.github.com/repos/apache/openjpa/commits/c39ec8a6deaa00473d24624b56a96535730df340","html_url":"https://github.com/apache/openjpa/commit/c39ec8a6deaa00473d24624b56a96535730df340"}]},{"sha":"e33f83901f65bee3a6cf166f00a8939a010c33ac","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzM2Y4MzkwMWY2NWJlZTNhNmNmMTY2ZjAwYTg5MzlhMDEwYzMzYWM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T20:29:15Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-06T20:29:15Z"},"message":"fix test case problem for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811876 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c41c7f0be98c27b4417e83ec570b81f0d9ab3c6e","url":"https://api.github.com/repos/apache/openjpa/git/trees/c41c7f0be98c27b4417e83ec570b81f0d9ab3c6e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e33f83901f65bee3a6cf166f00a8939a010c33ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e33f83901f65bee3a6cf166f00a8939a010c33ac","html_url":"https://github.com/apache/openjpa/commit/e33f83901f65bee3a6cf166f00a8939a010c33ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e33f83901f65bee3a6cf166f00a8939a010c33ac/comments","author":null,"committer":null,"parents":[{"sha":"f45899eee858a5d7ab93096252ece5f509018095","url":"https://api.github.com/repos/apache/openjpa/commits/f45899eee858a5d7ab93096252ece5f509018095","html_url":"https://github.com/apache/openjpa/commit/f45899eee858a5d7ab93096252ece5f509018095"}]},{"sha":"45f79b59afd5f6becc77ec00be47f30de99316a7","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1Zjc5YjU5YWZkNWY2YmVjYzc3ZWMwMGJlNDdmMzBkZTk5MzE2YTc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-07T02:16:17Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-07T02:16:17Z"},"message":"fix test case problem for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@811975 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdf06626059069f4640b9ee6e427e9310b1532af","url":"https://api.github.com/repos/apache/openjpa/git/trees/fdf06626059069f4640b9ee6e427e9310b1532af"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45f79b59afd5f6becc77ec00be47f30de99316a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45f79b59afd5f6becc77ec00be47f30de99316a7","html_url":"https://github.com/apache/openjpa/commit/45f79b59afd5f6becc77ec00be47f30de99316a7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45f79b59afd5f6becc77ec00be47f30de99316a7/comments","author":null,"committer":null,"parents":[{"sha":"e33f83901f65bee3a6cf166f00a8939a010c33ac","url":"https://api.github.com/repos/apache/openjpa/commits/e33f83901f65bee3a6cf166f00a8939a010c33ac","html_url":"https://github.com/apache/openjpa/commit/e33f83901f65bee3a6cf166f00a8939a010c33ac"}]},{"sha":"702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwMmE5YzY2MTYyYzFhM2U0OGY5MGE1YzIyNWM1NmFjNzFjMmY5ZTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T20:45:07Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T20:45:07Z"},"message":"fix test case problem for MySQL (microseconds are not stored in the MySQL Temporal column)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812689 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac47453e12a500e8196219f29c71b333ed5f8792","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac47453e12a500e8196219f29c71b333ed5f8792"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","html_url":"https://github.com/apache/openjpa/commit/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/comments","author":null,"committer":null,"parents":[{"sha":"45f79b59afd5f6becc77ec00be47f30de99316a7","url":"https://api.github.com/repos/apache/openjpa/commits/45f79b59afd5f6becc77ec00be47f30de99316a7","html_url":"https://github.com/apache/openjpa/commit/45f79b59afd5f6becc77ec00be47f30de99316a7"}]},{"sha":"435f66e27378cbb278fb64022a4e7158df521a5e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzNWY2NmUyNzM3OGNiYjI3OGZiNjQwMjJhNGU3MTU4ZGY1MjFhNWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T22:14:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T22:14:32Z"},"message":"exclude this test case for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812712 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e73fb432f8df805d670f329d2b50af8cf9430343","url":"https://api.github.com/repos/apache/openjpa/git/trees/e73fb432f8df805d670f329d2b50af8cf9430343"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/435f66e27378cbb278fb64022a4e7158df521a5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/435f66e27378cbb278fb64022a4e7158df521a5e","html_url":"https://github.com/apache/openjpa/commit/435f66e27378cbb278fb64022a4e7158df521a5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/435f66e27378cbb278fb64022a4e7158df521a5e/comments","author":null,"committer":null,"parents":[{"sha":"702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","url":"https://api.github.com/repos/apache/openjpa/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","html_url":"https://github.com/apache/openjpa/commit/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8"}]},{"sha":"a875ef52b1a9262faadd8c43ccf3f102fcced68e","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4NzVlZjUyYjFhOTI2MmZhYWRkOGM0M2NjZjNmMTAyZmNjZWQ2OGU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T13:45:06Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T13:45:06Z"},"message":"Updates to r812712 by Fay to also exclude tests for MSSQL and Oracle DBs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812958 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6341437a0f7f9597dceb655375d47427374708e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/6341437a0f7f9597dceb655375d47427374708e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e","html_url":"https://github.com/apache/openjpa/commit/a875ef52b1a9262faadd8c43ccf3f102fcced68e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e/comments","author":null,"committer":null,"parents":[{"sha":"435f66e27378cbb278fb64022a4e7158df521a5e","url":"https://api.github.com/repos/apache/openjpa/commits/435f66e27378cbb278fb64022a4e7158df521a5e","html_url":"https://github.com/apache/openjpa/commit/435f66e27378cbb278fb64022a4e7158df521a5e"}]},{"sha":"2691db6e0b646eb674c7a60e778b3f1467cf0fd1","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2OTFkYjZlMGI2NDZlYjY3NGM3YTYwZTc3OGIzZjE0NjdjZjBmZDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T14:29:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T14:29:09Z"},"message":"add a log.trace to denote the tests are being skipped for some DBs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fb79fad9a86362da700012abb2e91da04524512","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fb79fad9a86362da700012abb2e91da04524512"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","html_url":"https://github.com/apache/openjpa/commit/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1/comments","author":null,"committer":null,"parents":[{"sha":"a875ef52b1a9262faadd8c43ccf3f102fcced68e","url":"https://api.github.com/repos/apache/openjpa/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e","html_url":"https://github.com/apache/openjpa/commit/a875ef52b1a9262faadd8c43ccf3f102fcced68e"}]},{"sha":"ed40459a2a4f9bac6e449b5697c995d465d854a2","node_id":"MDY6Q29tbWl0MjA2MzY0OmVkNDA0NTlhMmE0ZjliYWM2ZTQ0OWI1Njk3Yzk5NWQ0NjVkODU0YTI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-09T19:56:37Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-09T19:56:37Z"},"message":"OPENJPA-1289 Added Oracle specific type to compatibility checking method.  Added new method to dictionary to pass in XML indicator.  Updated Oracle dictionary to use it to make LOB determination.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813098 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3eac8d438b2a4292c668a54d26a3f3b2e168282f","url":"https://api.github.com/repos/apache/openjpa/git/trees/3eac8d438b2a4292c668a54d26a3f3b2e168282f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2","html_url":"https://github.com/apache/openjpa/commit/ed40459a2a4f9bac6e449b5697c995d465d854a2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2/comments","author":null,"committer":null,"parents":[{"sha":"2691db6e0b646eb674c7a60e778b3f1467cf0fd1","url":"https://api.github.com/repos/apache/openjpa/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","html_url":"https://github.com/apache/openjpa/commit/2691db6e0b646eb674c7a60e778b3f1467cf0fd1"}]},{"sha":"94a0bc3781da7a432ce7c83a8ba05ecbf3235e20","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0YTBiYzM3ODFkYTdhNDMyY2U3YzgzYThiYTA1ZWNiZjMyMzVlMjA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-09T21:23:48Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-09T21:23:48Z"},"message":"OPENJPA-1270: check in test case for this JIRA\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813125 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"edb2c5db9682bd30c1518a51fe4a89e800b42ef3","url":"https://api.github.com/repos/apache/openjpa/git/trees/edb2c5db9682bd30c1518a51fe4a89e800b42ef3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94a0bc3781da7a432ce7c83a8ba05ecbf3235e20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94a0bc3781da7a432ce7c83a8ba05ecbf3235e20","html_url":"https://github.com/apache/openjpa/commit/94a0bc3781da7a432ce7c83a8ba05ecbf3235e20","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94a0bc3781da7a432ce7c83a8ba05ecbf3235e20/comments","author":null,"committer":null,"parents":[{"sha":"ed40459a2a4f9bac6e449b5697c995d465d854a2","url":"https://api.github.com/repos/apache/openjpa/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2","html_url":"https://github.com/apache/openjpa/commit/ed40459a2a4f9bac6e449b5697c995d465d854a2"}]},{"sha":"c28461ffddd7c60a862bb76d5cd084c1dd5506e7","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyODQ2MWZmZGRkN2M2MGE4NjJiYjc2ZDVjZDA4NGMxZGQ1NTA2ZTc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-09T22:23:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-09T22:23:27Z"},"message":"OPENJPA-1290: package descriptors\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813141 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98f1f0e6017b9f6569375308f097e1407dee5cb2","url":"https://api.github.com/repos/apache/openjpa/git/trees/98f1f0e6017b9f6569375308f097e1407dee5cb2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c28461ffddd7c60a862bb76d5cd084c1dd5506e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c28461ffddd7c60a862bb76d5cd084c1dd5506e7","html_url":"https://github.com/apache/openjpa/commit/c28461ffddd7c60a862bb76d5cd084c1dd5506e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c28461ffddd7c60a862bb76d5cd084c1dd5506e7/comments","author":null,"committer":null,"parents":[{"sha":"94a0bc3781da7a432ce7c83a8ba05ecbf3235e20","url":"https://api.github.com/repos/apache/openjpa/commits/94a0bc3781da7a432ce7c83a8ba05ecbf3235e20","html_url":"https://github.com/apache/openjpa/commit/94a0bc3781da7a432ce7c83a8ba05ecbf3235e20"}]},{"sha":"a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4NjQwY2M1ZDJiM2U4NGY1Y2IwNDM2MDQ1ZjE1ZGIzMGJmYjRiOTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-09T22:43:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-09T22:43:49Z"},"message":"OPENJPA-1285: Dynamic JDBC 4 Wrappers use constructor to save reflection cost\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813149 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c6a726a3a1a4373ca90a06724802f6a916e4829","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c6a726a3a1a4373ca90a06724802f6a916e4829"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","html_url":"https://github.com/apache/openjpa/commit/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/comments","author":null,"committer":null,"parents":[{"sha":"c28461ffddd7c60a862bb76d5cd084c1dd5506e7","url":"https://api.github.com/repos/apache/openjpa/commits/c28461ffddd7c60a862bb76d5cd084c1dd5506e7","html_url":"https://github.com/apache/openjpa/commit/c28461ffddd7c60a862bb76d5cd084c1dd5506e7"}]},{"sha":"a543403d2a283b4c6d30f4b0271308cd810ac0f2","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1NDM0MDNkMmEyODNiNGM2ZDMwZjRiMDI3MTMwOGNkODEwYWMwZjI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T13:40:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T13:40:10Z"},"message":"remove encoded chars to fix build issue with IBM 5 SDK\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813433 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ffed8868dfed2f6107c31bbb5a2d06422143ebff","url":"https://api.github.com/repos/apache/openjpa/git/trees/ffed8868dfed2f6107c31bbb5a2d06422143ebff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a543403d2a283b4c6d30f4b0271308cd810ac0f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a543403d2a283b4c6d30f4b0271308cd810ac0f2","html_url":"https://github.com/apache/openjpa/commit/a543403d2a283b4c6d30f4b0271308cd810ac0f2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a543403d2a283b4c6d30f4b0271308cd810ac0f2/comments","author":null,"committer":null,"parents":[{"sha":"a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","url":"https://api.github.com/repos/apache/openjpa/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","html_url":"https://github.com/apache/openjpa/commit/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93"}]},{"sha":"5113654485807a7884796562b9c62d56a2ec7999","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxMTM2NTQ0ODU4MDdhNzg4NDc5NjU2MmI5YzYyZDU2YTJlYzc5OTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T16:40:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T16:40:37Z"},"message":"add common setTestsDisabled()/isTestsDisabled() in AbstractPersistenceTestCase which is used by runTest() to automatically skip all tests.  added new setSupportedDatabases()/setUnsupportedDatabases() methods in SingleEMFTestCase to set the testsDisabled flag in AbstractPTC, along with moving a getLog() method from some testcases into the base SingleEMFTC class for everyone to use.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813506 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04df7d266b0a138790655b37e82c18d74205d215","url":"https://api.github.com/repos/apache/openjpa/git/trees/04df7d266b0a138790655b37e82c18d74205d215"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5113654485807a7884796562b9c62d56a2ec7999","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5113654485807a7884796562b9c62d56a2ec7999","html_url":"https://github.com/apache/openjpa/commit/5113654485807a7884796562b9c62d56a2ec7999","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5113654485807a7884796562b9c62d56a2ec7999/comments","author":null,"committer":null,"parents":[{"sha":"a543403d2a283b4c6d30f4b0271308cd810ac0f2","url":"https://api.github.com/repos/apache/openjpa/commits/a543403d2a283b4c6d30f4b0271308cd810ac0f2","html_url":"https://github.com/apache/openjpa/commit/a543403d2a283b4c6d30f4b0271308cd810ac0f2"}]},{"sha":"8e9696522573e9892b4b8aa56d6c311f639847ee","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlOTY5NjUyMjU3M2U5ODkyYjRiOGFhNTZkNmMzMTFmNjM5ODQ3ZWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-10T16:58:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-10T16:58:44Z"},"message":"OPENJPA-1288: alias() first version. Assumes in-place change and does not create new instance. Retired TupleElementImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813514 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52bba5b443dfb1932e515f54d13bf3dbf772e33d","url":"https://api.github.com/repos/apache/openjpa/git/trees/52bba5b443dfb1932e515f54d13bf3dbf772e33d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8e9696522573e9892b4b8aa56d6c311f639847ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8e9696522573e9892b4b8aa56d6c311f639847ee","html_url":"https://github.com/apache/openjpa/commit/8e9696522573e9892b4b8aa56d6c311f639847ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8e9696522573e9892b4b8aa56d6c311f639847ee/comments","author":null,"committer":null,"parents":[{"sha":"5113654485807a7884796562b9c62d56a2ec7999","url":"https://api.github.com/repos/apache/openjpa/commits/5113654485807a7884796562b9c62d56a2ec7999","html_url":"https://github.com/apache/openjpa/commit/5113654485807a7884796562b9c62d56a2ec7999"}]},{"sha":"0d3179cef9e7efb820cafda6a94ca141edcf32f5","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkMzE3OWNlZjllN2VmYjgyMGNhZmRhNmE5NGNhMTQxZWRjZjMyZjU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T17:16:31Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T17:16:31Z"},"message":"updated getLog() methods and switched testcase to use setUnsupportedDatabases()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813519 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"690c459bed8ec66ca178d86e987d0f4b5d2a39db","url":"https://api.github.com/repos/apache/openjpa/git/trees/690c459bed8ec66ca178d86e987d0f4b5d2a39db"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d3179cef9e7efb820cafda6a94ca141edcf32f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d3179cef9e7efb820cafda6a94ca141edcf32f5","html_url":"https://github.com/apache/openjpa/commit/0d3179cef9e7efb820cafda6a94ca141edcf32f5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d3179cef9e7efb820cafda6a94ca141edcf32f5/comments","author":null,"committer":null,"parents":[{"sha":"8e9696522573e9892b4b8aa56d6c311f639847ee","url":"https://api.github.com/repos/apache/openjpa/commits/8e9696522573e9892b4b8aa56d6c311f639847ee","html_url":"https://github.com/apache/openjpa/commit/8e9696522573e9892b4b8aa56d6c311f639847ee"}]},{"sha":"b5fabd88dd4c4f49b33b312fab9eece38418c8b6","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1ZmFiZDg4ZGQ0YzRmNDliMzNiMzEyZmFiOWVlY2UzODQxOGM4YjY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-10T19:31:01Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-10T19:31:01Z"},"message":"OPENJPA-869 Fixup order column test variations failing on Oracle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813556 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47e317f5e62a900fbb9bacbe7ee8979b26a8c726","url":"https://api.github.com/repos/apache/openjpa/git/trees/47e317f5e62a900fbb9bacbe7ee8979b26a8c726"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b5fabd88dd4c4f49b33b312fab9eece38418c8b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b5fabd88dd4c4f49b33b312fab9eece38418c8b6","html_url":"https://github.com/apache/openjpa/commit/b5fabd88dd4c4f49b33b312fab9eece38418c8b6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b5fabd88dd4c4f49b33b312fab9eece38418c8b6/comments","author":null,"committer":null,"parents":[{"sha":"0d3179cef9e7efb820cafda6a94ca141edcf32f5","url":"https://api.github.com/repos/apache/openjpa/commits/0d3179cef9e7efb820cafda6a94ca141edcf32f5","html_url":"https://github.com/apache/openjpa/commit/0d3179cef9e7efb820cafda6a94ca141edcf32f5"}]},{"sha":"fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhNDkwODBmOGY4ZTk0NmZjOWZjM2M2NDgxNmM4NTljZTJiNmJjZDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T20:02:52Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T20:02:52Z"},"message":"back out last getLog() additions, which caused failures on when not using Derby\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813568 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e3212904a37c5fc0f86651085d2130af7446ae97","url":"https://api.github.com/repos/apache/openjpa/git/trees/e3212904a37c5fc0f86651085d2130af7446ae97"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","html_url":"https://github.com/apache/openjpa/commit/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6/comments","author":null,"committer":null,"parents":[{"sha":"b5fabd88dd4c4f49b33b312fab9eece38418c8b6","url":"https://api.github.com/repos/apache/openjpa/commits/b5fabd88dd4c4f49b33b312fab9eece38418c8b6","html_url":"https://github.com/apache/openjpa/commit/b5fabd88dd4c4f49b33b312fab9eece38418c8b6"}]},{"sha":"dac8af35b4ade56f49747380f1de3487bd164c5b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhYzhhZjM1YjRhZGU1NmY0OTc0NzM4MGYxZGUzNDg3YmQxNjRjNWI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2009-09-10T21:35:57Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2009-09-10T21:35:57Z"},"message":"OPENJPA-1260.  Committing this change for Ravi Palacherla.  Mike had previously reviewed the patch for correctness.  Ravi changed the patch slightly and re-submitted.  Based on a request from the mailing list, I reviewed Ravi's second patch and am committing the changes with a couple of minor modifications.  I updated the comments slightly to make sentences.  And, I moved the testcases to the \"generationtype\" package to be with similar testcases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813597 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cffae74679d357cb06198a0caa7704a15ffa6dfb","url":"https://api.github.com/repos/apache/openjpa/git/trees/cffae74679d357cb06198a0caa7704a15ffa6dfb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dac8af35b4ade56f49747380f1de3487bd164c5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dac8af35b4ade56f49747380f1de3487bd164c5b","html_url":"https://github.com/apache/openjpa/commit/dac8af35b4ade56f49747380f1de3487bd164c5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dac8af35b4ade56f49747380f1de3487bd164c5b/comments","author":null,"committer":null,"parents":[{"sha":"fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","url":"https://api.github.com/repos/apache/openjpa/commits/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","html_url":"https://github.com/apache/openjpa/commit/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6"}]},{"sha":"eb5baa42a27e626373134486869b1ab873ac82cb","node_id":"MDY6Q29tbWl0MjA2MzY0OmViNWJhYTQyYTI3ZTYyNjM3MzEzNDQ4Njg2OWIxYWI4NzNhYzgyY2I=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-10T21:50:08Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-10T21:50:08Z"},"message":"OPENJPA-1286: use Compatibility to check if the relationship defined in the MappedSuperclass must be uni-directional.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813605 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8921fc0796d988ea102d3c28e06def37a68f892d","url":"https://api.github.com/repos/apache/openjpa/git/trees/8921fc0796d988ea102d3c28e06def37a68f892d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb5baa42a27e626373134486869b1ab873ac82cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb5baa42a27e626373134486869b1ab873ac82cb","html_url":"https://github.com/apache/openjpa/commit/eb5baa42a27e626373134486869b1ab873ac82cb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb5baa42a27e626373134486869b1ab873ac82cb/comments","author":null,"committer":null,"parents":[{"sha":"dac8af35b4ade56f49747380f1de3487bd164c5b","url":"https://api.github.com/repos/apache/openjpa/commits/dac8af35b4ade56f49747380f1de3487bd164c5b","html_url":"https://github.com/apache/openjpa/commit/dac8af35b4ade56f49747380f1de3487bd164c5b"}]},{"sha":"df860912a7ddda0ea5bed5167b3477ff99c48e81","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmODYwOTEyYTdkZGRhMGVhNWJlZDUxNjdiMzQ3N2ZmOTljNDhlODE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:22:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:22:00Z"},"message":"OPENJPA-1288: stop re-alias(). Added new utility to check validity of names for JPA reserved words and special symbols. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"78c132279697ce32920eb3b0464b6f09ce9f7693","url":"https://api.github.com/repos/apache/openjpa/git/trees/78c132279697ce32920eb3b0464b6f09ce9f7693"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81","html_url":"https://github.com/apache/openjpa/commit/df860912a7ddda0ea5bed5167b3477ff99c48e81","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81/comments","author":null,"committer":null,"parents":[{"sha":"eb5baa42a27e626373134486869b1ab873ac82cb","url":"https://api.github.com/repos/apache/openjpa/commits/eb5baa42a27e626373134486869b1ab873ac82cb","html_url":"https://github.com/apache/openjpa/commit/eb5baa42a27e626373134486869b1ab873ac82cb"}]},{"sha":"b573799fc3176ef578951fd8e0e8eced0ee82328","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1NzM3OTlmYzMxNzZlZjU3ODk1MWZkOGUwZThlY2VkMGVlODIzMjg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:24:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:24:27Z"},"message":"OPENJPA-1013: Tighten access to instance variables/methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813659 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89e7a8ec904e7420c361bd590a63189ffb4db079","url":"https://api.github.com/repos/apache/openjpa/git/trees/89e7a8ec904e7420c361bd590a63189ffb4db079"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b573799fc3176ef578951fd8e0e8eced0ee82328","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b573799fc3176ef578951fd8e0e8eced0ee82328","html_url":"https://github.com/apache/openjpa/commit/b573799fc3176ef578951fd8e0e8eced0ee82328","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b573799fc3176ef578951fd8e0e8eced0ee82328/comments","author":null,"committer":null,"parents":[{"sha":"df860912a7ddda0ea5bed5167b3477ff99c48e81","url":"https://api.github.com/repos/apache/openjpa/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81","html_url":"https://github.com/apache/openjpa/commit/df860912a7ddda0ea5bed5167b3477ff99c48e81"}]},{"sha":"ba5692da52f0daf51b14ca895ccbc70b334c5874","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhNTY5MmRhNTJmMGRhZjUxYjE0Y2E4OTVjY2JjNzBiMzM0YzU4NzQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-09-11T15:27:39Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-09-11T15:27:39Z"},"message":"OPENJPA-1292 - Committing contribution submitted by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813879 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41fba47243470447ecad45d6bd435a4b853e012d","url":"https://api.github.com/repos/apache/openjpa/git/trees/41fba47243470447ecad45d6bd435a4b853e012d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ba5692da52f0daf51b14ca895ccbc70b334c5874","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ba5692da52f0daf51b14ca895ccbc70b334c5874","html_url":"https://github.com/apache/openjpa/commit/ba5692da52f0daf51b14ca895ccbc70b334c5874","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ba5692da52f0daf51b14ca895ccbc70b334c5874/comments","author":null,"committer":null,"parents":[{"sha":"b573799fc3176ef578951fd8e0e8eced0ee82328","url":"https://api.github.com/repos/apache/openjpa/commits/b573799fc3176ef578951fd8e0e8eced0ee82328","html_url":"https://github.com/apache/openjpa/commit/b573799fc3176ef578951fd8e0e8eced0ee82328"}]},{"sha":"c534d29cb7b6163e1a7a8054ff7774f48a527a76","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1MzRkMjljYjdiNjE2M2UxYTdhODA1NGZmNzc3NGY0OGE1MjdhNzY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T17:14:52Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T17:14:52Z"},"message":"OPENJPA-1285: fix InitializerError in JDBCStoreManager$RefCountConnection.prepareStatement(JDBCStoreManager.java:1543)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bf032b357ae6319216730e4848ea9ee45d365a3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/bf032b357ae6319216730e4848ea9ee45d365a3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c534d29cb7b6163e1a7a8054ff7774f48a527a76","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c534d29cb7b6163e1a7a8054ff7774f48a527a76","html_url":"https://github.com/apache/openjpa/commit/c534d29cb7b6163e1a7a8054ff7774f48a527a76","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c534d29cb7b6163e1a7a8054ff7774f48a527a76/comments","author":null,"committer":null,"parents":[{"sha":"ba5692da52f0daf51b14ca895ccbc70b334c5874","url":"https://api.github.com/repos/apache/openjpa/commits/ba5692da52f0daf51b14ca895ccbc70b334c5874","html_url":"https://github.com/apache/openjpa/commit/ba5692da52f0daf51b14ca895ccbc70b334c5874"}]},{"sha":"677d34049c0ef5330680a8240f148065a6fda85d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3N2QzNDA0OWMwZWY1MzMwNjgwYTgyNDBmMTQ4MDY1YTZmZGE4NWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T17:53:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T17:53:07Z"},"message":"OPENJPA-1013: Refcator\n   1. Make implementaion non-public (mainly package scoped now)\n   2. Promote to interface for contracts as much as possible\n   3. Use more compact bridge pattern method signature\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813956 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eaece3e9e26f7482f9e6a393ad9c51ad0b258ff4","url":"https://api.github.com/repos/apache/openjpa/git/trees/eaece3e9e26f7482f9e6a393ad9c51ad0b258ff4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/677d34049c0ef5330680a8240f148065a6fda85d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/677d34049c0ef5330680a8240f148065a6fda85d","html_url":"https://github.com/apache/openjpa/commit/677d34049c0ef5330680a8240f148065a6fda85d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/677d34049c0ef5330680a8240f148065a6fda85d/comments","author":null,"committer":null,"parents":[{"sha":"c534d29cb7b6163e1a7a8054ff7774f48a527a76","url":"https://api.github.com/repos/apache/openjpa/commits/c534d29cb7b6163e1a7a8054ff7774f48a527a76","html_url":"https://github.com/apache/openjpa/commit/c534d29cb7b6163e1a7a8054ff7774f48a527a76"}]},{"sha":"38f31390a9cae34e9529eca252bfb0218b84ae79","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4ZjMxMzkwYTljYWUzNGU5NTI5ZWNhMjUyYmZiMDIxOGI4NGFlNzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:49:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:49:30Z"},"message":"bad argument corrected\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813981 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79f1d1fe942e3cbd84c130b8c42d6d42c1b3c06b","url":"https://api.github.com/repos/apache/openjpa/git/trees/79f1d1fe942e3cbd84c130b8c42d6d42c1b3c06b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38f31390a9cae34e9529eca252bfb0218b84ae79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38f31390a9cae34e9529eca252bfb0218b84ae79","html_url":"https://github.com/apache/openjpa/commit/38f31390a9cae34e9529eca252bfb0218b84ae79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38f31390a9cae34e9529eca252bfb0218b84ae79/comments","author":null,"committer":null,"parents":[{"sha":"677d34049c0ef5330680a8240f148065a6fda85d","url":"https://api.github.com/repos/apache/openjpa/commits/677d34049c0ef5330680a8240f148065a6fda85d","html_url":"https://github.com/apache/openjpa/commit/677d34049c0ef5330680a8240f148065a6fda85d"}]},{"sha":"dc5c7f487af26e5eaafba14db062a1450ea2408c","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjNWM3ZjQ4N2FmMjZlNWVhYWZiYTE0ZGIwNjJhMTQ1MGVhMjQwOGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:53:34Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:53:34Z"},"message":"OPENJPA-1285: Use tighter method signature\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a06585b04ae54fc5d865c08034dc8ea704e7ab23","url":"https://api.github.com/repos/apache/openjpa/git/trees/a06585b04ae54fc5d865c08034dc8ea704e7ab23"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c","html_url":"https://github.com/apache/openjpa/commit/dc5c7f487af26e5eaafba14db062a1450ea2408c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c/comments","author":null,"committer":null,"parents":[{"sha":"38f31390a9cae34e9529eca252bfb0218b84ae79","url":"https://api.github.com/repos/apache/openjpa/commits/38f31390a9cae34e9529eca252bfb0218b84ae79","html_url":"https://github.com/apache/openjpa/commit/38f31390a9cae34e9529eca252bfb0218b84ae79"}]},{"sha":"0d24829c8c2c1b7380587e67c21c87c83817afd7","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkMjQ4MjljOGMyYzFiNzM4MDU4N2U2N2MyMWM4N2M4MzgxN2FmZDc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:55:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:55:45Z"},"message":"Bring test for isManageable() outside of per-broker loop\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813983 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d0381509bb3919fbf3808a97604f44b9d03f026","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d0381509bb3919fbf3808a97604f44b9d03f026"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d24829c8c2c1b7380587e67c21c87c83817afd7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d24829c8c2c1b7380587e67c21c87c83817afd7","html_url":"https://github.com/apache/openjpa/commit/0d24829c8c2c1b7380587e67c21c87c83817afd7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d24829c8c2c1b7380587e67c21c87c83817afd7/comments","author":null,"committer":null,"parents":[{"sha":"dc5c7f487af26e5eaafba14db062a1450ea2408c","url":"https://api.github.com/repos/apache/openjpa/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c","html_url":"https://github.com/apache/openjpa/commit/dc5c7f487af26e5eaafba14db062a1450ea2408c"}]},{"sha":"32c6ca132ce4daa64f736d2ab50aa5267bc8048a","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyYzZjYTEzMmNlNGRhYTY0ZjczNmQyYWI1MGFhNTI2N2JjODA0OGE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-11T19:09:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-11T19:09:20Z"},"message":"OPENJPA-1184 Testcase contributed by David Minor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c465bff71a3355994850974315a96170beff0d02","url":"https://api.github.com/repos/apache/openjpa/git/trees/c465bff71a3355994850974315a96170beff0d02"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","html_url":"https://github.com/apache/openjpa/commit/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/comments","author":null,"committer":null,"parents":[{"sha":"0d24829c8c2c1b7380587e67c21c87c83817afd7","url":"https://api.github.com/repos/apache/openjpa/commits/0d24829c8c2c1b7380587e67c21c87c83817afd7","html_url":"https://github.com/apache/openjpa/commit/0d24829c8c2c1b7380587e67c21c87c83817afd7"}]},{"sha":"46734cf443c69afc0221c427a349aa251f9a1969","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2NzM0Y2Y0NDNjNjlhZmMwMjIxYzQyN2EzNDlhYTI1MWY5YTE5Njk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-11T19:27:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-11T19:27:08Z"},"message":"OPENJPA-1184 apply source formatting to new files\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813990 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0702f8dbba0477b4a72895e65b90c39fcb6cd8db","url":"https://api.github.com/repos/apache/openjpa/git/trees/0702f8dbba0477b4a72895e65b90c39fcb6cd8db"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/46734cf443c69afc0221c427a349aa251f9a1969","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/46734cf443c69afc0221c427a349aa251f9a1969","html_url":"https://github.com/apache/openjpa/commit/46734cf443c69afc0221c427a349aa251f9a1969","comments_url":"https://api.github.com/repos/apache/openjpa/commits/46734cf443c69afc0221c427a349aa251f9a1969/comments","author":null,"committer":null,"parents":[{"sha":"32c6ca132ce4daa64f736d2ab50aa5267bc8048a","url":"https://api.github.com/repos/apache/openjpa/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","html_url":"https://github.com/apache/openjpa/commit/32c6ca132ce4daa64f736d2ab50aa5267bc8048a"}]},{"sha":"15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1YjVlYzIwZGRmMDEwZjRhMzViYzVlMDVjM2RkZDk0MjU0MmI5YjA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T21:05:30Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T21:05:30Z"},"message":"fix unique constraint syntax in the test case for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814029 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e0acb624245d8f52f2779b10cf62f3c8efd574f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/e0acb624245d8f52f2779b10cf62f3c8efd574f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","html_url":"https://github.com/apache/openjpa/commit/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0/comments","author":null,"committer":null,"parents":[{"sha":"46734cf443c69afc0221c427a349aa251f9a1969","url":"https://api.github.com/repos/apache/openjpa/commits/46734cf443c69afc0221c427a349aa251f9a1969","html_url":"https://github.com/apache/openjpa/commit/46734cf443c69afc0221c427a349aa251f9a1969"}]},{"sha":"1e77f6a3e1492e289ce99b071376cdd3e90372cd","node_id":"MDY6Q29tbWl0MjA2MzY0OjFlNzdmNmEzZTE0OTJlMjg5Y2U5OWIwNzEzNzZjZGQzZTkwMzcyY2Q=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T21:24:12Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T21:24:12Z"},"message":"OPENJPA-1286: default isAbstractMappingUniDirectional to false\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2eed17a9e696f97636cd8f58ff9829c8953417b","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2eed17a9e696f97636cd8f58ff9829c8953417b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1e77f6a3e1492e289ce99b071376cdd3e90372cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1e77f6a3e1492e289ce99b071376cdd3e90372cd","html_url":"https://github.com/apache/openjpa/commit/1e77f6a3e1492e289ce99b071376cdd3e90372cd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1e77f6a3e1492e289ce99b071376cdd3e90372cd/comments","author":null,"committer":null,"parents":[{"sha":"15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","url":"https://api.github.com/repos/apache/openjpa/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","html_url":"https://github.com/apache/openjpa/commit/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0"}]},{"sha":"5120b0e629a208ae7dc9f7f049e342ef15c2ea7c","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxMjBiMGU2MjlhMjA4YWU3ZGM5ZjdmMDQ5ZTM0MmVmMTVjMmVhN2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:12:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:12:18Z"},"message":"OPENJPA-1294: Allow a new connection to obtain query for size of the result set when the original connection is still being open.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814053 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5e16d29d4b5e5f771d74b04cc2f7e8d6071d8a1","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5e16d29d4b5e5f771d74b04cc2f7e8d6071d8a1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5120b0e629a208ae7dc9f7f049e342ef15c2ea7c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5120b0e629a208ae7dc9f7f049e342ef15c2ea7c","html_url":"https://github.com/apache/openjpa/commit/5120b0e629a208ae7dc9f7f049e342ef15c2ea7c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5120b0e629a208ae7dc9f7f049e342ef15c2ea7c/comments","author":null,"committer":null,"parents":[{"sha":"1e77f6a3e1492e289ce99b071376cdd3e90372cd","url":"https://api.github.com/repos/apache/openjpa/commits/1e77f6a3e1492e289ce99b071376cdd3e90372cd","html_url":"https://github.com/apache/openjpa/commit/1e77f6a3e1492e289ce99b071376cdd3e90372cd"}]},{"sha":"ec90648e2bdb6c8877e2c9accd8d9a658075f088","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjOTA2NDhlMmJkYjZjODg3N2UyYzlhY2NkOGQ5YTY1ODA3NWYwODg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:27:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:27:27Z"},"message":"OPENJPA-703: Support RangeResultObjectProvider for prepared query cache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814065 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8ba6bcf0680782a334809dd973f1bdcf633b0fd","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8ba6bcf0680782a334809dd973f1bdcf633b0fd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec90648e2bdb6c8877e2c9accd8d9a658075f088","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec90648e2bdb6c8877e2c9accd8d9a658075f088","html_url":"https://github.com/apache/openjpa/commit/ec90648e2bdb6c8877e2c9accd8d9a658075f088","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec90648e2bdb6c8877e2c9accd8d9a658075f088/comments","author":null,"committer":null,"parents":[{"sha":"5120b0e629a208ae7dc9f7f049e342ef15c2ea7c","url":"https://api.github.com/repos/apache/openjpa/commits/5120b0e629a208ae7dc9f7f049e342ef15c2ea7c","html_url":"https://github.com/apache/openjpa/commit/5120b0e629a208ae7dc9f7f049e342ef15c2ea7c"}]},{"sha":"81065fea3c5601949690be85b52b01d34fcb3aa0","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxMDY1ZmVhM2M1NjAxOTQ5NjkwYmU4NWI1MmIwMWQzNGZjYjNhYTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:51:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:51:19Z"},"message":"OPENJPA-703: process RangeResultObjectProvider\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814071 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09258cc49df09e883645ab05c74213f1c2d3f5cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/09258cc49df09e883645ab05c74213f1c2d3f5cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/81065fea3c5601949690be85b52b01d34fcb3aa0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/81065fea3c5601949690be85b52b01d34fcb3aa0","html_url":"https://github.com/apache/openjpa/commit/81065fea3c5601949690be85b52b01d34fcb3aa0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/81065fea3c5601949690be85b52b01d34fcb3aa0/comments","author":null,"committer":null,"parents":[{"sha":"ec90648e2bdb6c8877e2c9accd8d9a658075f088","url":"https://api.github.com/repos/apache/openjpa/commits/ec90648e2bdb6c8877e2c9accd8d9a658075f088","html_url":"https://github.com/apache/openjpa/commit/ec90648e2bdb6c8877e2c9accd8d9a658075f088"}]},{"sha":"6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiOTZiODJkMzEwMjc0NTJjZWIxYmZkYzFlNmE2ZmE0MmY3Y2E3Zjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:59:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T22:59:15Z"},"message":"OPENJPA-1294: getNewConnection()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814072 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c11bcfcb1058ea37991888b52922d518ee80554","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c11bcfcb1058ea37991888b52922d518ee80554"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9","html_url":"https://github.com/apache/openjpa/commit/6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9/comments","author":null,"committer":null,"parents":[{"sha":"81065fea3c5601949690be85b52b01d34fcb3aa0","url":"https://api.github.com/repos/apache/openjpa/commits/81065fea3c5601949690be85b52b01d34fcb3aa0","html_url":"https://github.com/apache/openjpa/commit/81065fea3c5601949690be85b52b01d34fcb3aa0"}]},{"sha":"1aab5c3c6cfa9876161ff4b7e307012c7ee0b406","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhYWI1YzNjNmNmYTk4NzYxNjFmZjRiN2UzMDcwMTJjN2VlMGI0MDY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T23:15:06Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T23:15:06Z"},"message":"OPENJPA-1295: fix the problem of escape character for MySQL \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814074 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"239efb94d8c402ac460d8ce283ebfe4806964d7c","url":"https://api.github.com/repos/apache/openjpa/git/trees/239efb94d8c402ac460d8ce283ebfe4806964d7c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1aab5c3c6cfa9876161ff4b7e307012c7ee0b406","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1aab5c3c6cfa9876161ff4b7e307012c7ee0b406","html_url":"https://github.com/apache/openjpa/commit/1aab5c3c6cfa9876161ff4b7e307012c7ee0b406","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1aab5c3c6cfa9876161ff4b7e307012c7ee0b406/comments","author":null,"committer":null,"parents":[{"sha":"6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9","url":"https://api.github.com/repos/apache/openjpa/commits/6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9","html_url":"https://github.com/apache/openjpa/commit/6b96b82d31027452ceb1bfdc1e6a6fa42f7ca7f9"}]},{"sha":"60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwZTU1NTc0YzhhZTJlZTRmOTE1YjAxOTdhM2U1YTRjYWI3MmRkMWY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T23:41:34Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T23:41:34Z"},"message":"fix BigDecimal problem in the test case for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5477ca5d6d48dc0f98ee84dc21fbbccf8e088e2e","url":"https://api.github.com/repos/apache/openjpa/git/trees/5477ca5d6d48dc0f98ee84dc21fbbccf8e088e2e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f","html_url":"https://github.com/apache/openjpa/commit/60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f/comments","author":null,"committer":null,"parents":[{"sha":"1aab5c3c6cfa9876161ff4b7e307012c7ee0b406","url":"https://api.github.com/repos/apache/openjpa/commits/1aab5c3c6cfa9876161ff4b7e307012c7ee0b406","html_url":"https://github.com/apache/openjpa/commit/1aab5c3c6cfa9876161ff4b7e307012c7ee0b406"}]},{"sha":"fb34e0a0ec80346278678c39d2549d6752c119fd","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiMzRlMGEwZWM4MDM0NjI3ODY3OGMzOWQyNTQ5ZDY3NTJjMTE5ZmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-12T00:51:05Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-12T00:51:05Z"},"message":"Update error code for Oracle. Will pass ..openjpa.persistence.exception.TestException.testThrowsEntityExistsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814096 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e09cbb7c4f05881aace4e990007fc91f71ebfd8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/e09cbb7c4f05881aace4e990007fc91f71ebfd8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb34e0a0ec80346278678c39d2549d6752c119fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb34e0a0ec80346278678c39d2549d6752c119fd","html_url":"https://github.com/apache/openjpa/commit/fb34e0a0ec80346278678c39d2549d6752c119fd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb34e0a0ec80346278678c39d2549d6752c119fd/comments","author":null,"committer":null,"parents":[{"sha":"60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f","url":"https://api.github.com/repos/apache/openjpa/commits/60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f","html_url":"https://github.com/apache/openjpa/commit/60e55574c8ae2ee4f915b0197a3e5a4cab72dd1f"}]},{"sha":"d7b4296c8f53852894c3681a7f77afe98b56bd55","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ3YjQyOTZjOGY1Mzg1Mjg5NGMzNjgxYTdmNzdhZmU5OGI1NmJkNTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-12T02:49:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-12T02:49:29Z"},"message":"Failed Oracle test on bad column name 'date'.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814105 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b655bcac801a7f98cf69b3909f7d84a7a5112476","url":"https://api.github.com/repos/apache/openjpa/git/trees/b655bcac801a7f98cf69b3909f7d84a7a5112476"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d7b4296c8f53852894c3681a7f77afe98b56bd55","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d7b4296c8f53852894c3681a7f77afe98b56bd55","html_url":"https://github.com/apache/openjpa/commit/d7b4296c8f53852894c3681a7f77afe98b56bd55","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d7b4296c8f53852894c3681a7f77afe98b56bd55/comments","author":null,"committer":null,"parents":[{"sha":"fb34e0a0ec80346278678c39d2549d6752c119fd","url":"https://api.github.com/repos/apache/openjpa/commits/fb34e0a0ec80346278678c39d2549d6752c119fd","html_url":"https://github.com/apache/openjpa/commit/fb34e0a0ec80346278678c39d2549d6752c119fd"}]},{"sha":"558446dfe975d67e530e8ec35df976d605d35e0a","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1ODQ0NmRmZTk3NWQ2N2U1MzBlOGVjMzVkZjk3NmQ2MDVkMzVlMGE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-12T14:58:07Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-12T14:58:07Z"},"message":"OPENJPA-1295: fix the escape character\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814166 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bd69d07eda0041d4166a55fbb5f6209eeabb136","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bd69d07eda0041d4166a55fbb5f6209eeabb136"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/558446dfe975d67e530e8ec35df976d605d35e0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/558446dfe975d67e530e8ec35df976d605d35e0a","html_url":"https://github.com/apache/openjpa/commit/558446dfe975d67e530e8ec35df976d605d35e0a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/558446dfe975d67e530e8ec35df976d605d35e0a/comments","author":null,"committer":null,"parents":[{"sha":"d7b4296c8f53852894c3681a7f77afe98b56bd55","url":"https://api.github.com/repos/apache/openjpa/commits/d7b4296c8f53852894c3681a7f77afe98b56bd55","html_url":"https://github.com/apache/openjpa/commit/d7b4296c8f53852894c3681a7f77afe98b56bd55"}]},{"sha":"e9b5c53fd00be984157e131b94a7d5efee720a3c","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5YjVjNTNmZDAwYmU5ODQxNTdlMTMxYjk0YTdkNWVmZWU3MjBhM2M=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-13T10:02:01Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-13T10:02:01Z"},"message":"OPENJPA-1153: Speed tests up by using only needed entities rather than all entities from persistence.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814295 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a6885d0cf2e11cb52309a1c64f1f8b480416ded","url":"https://api.github.com/repos/apache/openjpa/git/trees/7a6885d0cf2e11cb52309a1c64f1f8b480416ded"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c","html_url":"https://github.com/apache/openjpa/commit/e9b5c53fd00be984157e131b94a7d5efee720a3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c/comments","author":null,"committer":null,"parents":[{"sha":"558446dfe975d67e530e8ec35df976d605d35e0a","url":"https://api.github.com/repos/apache/openjpa/commits/558446dfe975d67e530e8ec35df976d605d35e0a","html_url":"https://github.com/apache/openjpa/commit/558446dfe975d67e530e8ec35df976d605d35e0a"}]},{"sha":"b889ccb83462af0a6524c22a0a6e2e065a46d124","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4ODljY2I4MzQ2MmFmMGE2NTI0YzIyYTBhNmUyZTA2NWE0NmQxMjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T13:54:59Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T13:54:59Z"},"message":"OPENJPA-1247  WriteBehindCallback sleepTime interval of one EMF datacache adversely impacting other EMF datacache (testcase for OPENJPA-1296).  Contributed by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814644 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5e4661a13a51fdd8f707c665ed65399486c504b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d5e4661a13a51fdd8f707c665ed65399486c504b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b889ccb83462af0a6524c22a0a6e2e065a46d124","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b889ccb83462af0a6524c22a0a6e2e065a46d124","html_url":"https://github.com/apache/openjpa/commit/b889ccb83462af0a6524c22a0a6e2e065a46d124","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b889ccb83462af0a6524c22a0a6e2e065a46d124/comments","author":null,"committer":null,"parents":[{"sha":"e9b5c53fd00be984157e131b94a7d5efee720a3c","url":"https://api.github.com/repos/apache/openjpa/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c","html_url":"https://github.com/apache/openjpa/commit/e9b5c53fd00be984157e131b94a7d5efee720a3c"}]},{"sha":"ee9210be92ff0279aeed80460ead1f2a279c6f6e","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlOTIxMGJlOTJmZjAyNzlhZWVkODA0NjBlYWQxZjJhMjc5YzZmNmU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T14:29:34Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T14:29:34Z"},"message":"OPENJPA-1201 [Mapped by] field not set when contained in superclass.  Patch and testcases contributed by David Minor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0e5be69f7d8644bdb1962148a2d219972667a35b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0e5be69f7d8644bdb1962148a2d219972667a35b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e","html_url":"https://github.com/apache/openjpa/commit/ee9210be92ff0279aeed80460ead1f2a279c6f6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e/comments","author":null,"committer":null,"parents":[{"sha":"b889ccb83462af0a6524c22a0a6e2e065a46d124","url":"https://api.github.com/repos/apache/openjpa/commits/b889ccb83462af0a6524c22a0a6e2e065a46d124","html_url":"https://github.com/apache/openjpa/commit/b889ccb83462af0a6524c22a0a6e2e065a46d124"}]},{"sha":"416b8d3ccb65f8ecf612513489ed78e5cebe8641","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxNmI4ZDNjY2I2NWY4ZWNmNjEyNTEzNDg5ZWQ3OGU1Y2ViZTg2NDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T15:42:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T15:42:03Z"},"message":"OPENJPA-1227 SQL generation error when using data cache.  Patch and testcase contributed by David Minor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79fbc6340a1587de5bba1bbea839c7aaa3a600ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/79fbc6340a1587de5bba1bbea839c7aaa3a600ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641","html_url":"https://github.com/apache/openjpa/commit/416b8d3ccb65f8ecf612513489ed78e5cebe8641","comments_url":"https://api.github.com/repos/apache/openjpa/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641/comments","author":null,"committer":null,"parents":[{"sha":"ee9210be92ff0279aeed80460ead1f2a279c6f6e","url":"https://api.github.com/repos/apache/openjpa/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e","html_url":"https://github.com/apache/openjpa/commit/ee9210be92ff0279aeed80460ead1f2a279c6f6e"}]},{"sha":"b8dde5761fd5ce9452db8422f3a83dc7cb222463","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4ZGRlNTc2MWZkNWNlOTQ1MmRiODQyMmYzYTgzZGM3Y2IyMjI0NjM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T17:20:48Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T17:20:48Z"},"message":"OPENJPA-1214 Testcase to demonstrate RelationFieldStrategy behaviour differences between OpenJPA 1.x and 2.0.  Testcase contributed by Tim McConnell.  Doc updates by Donald Woods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814739 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c48f0d52fc7388a9024410f1fe1626b20a3c38b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c48f0d52fc7388a9024410f1fe1626b20a3c38b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8dde5761fd5ce9452db8422f3a83dc7cb222463","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8dde5761fd5ce9452db8422f3a83dc7cb222463","html_url":"https://github.com/apache/openjpa/commit/b8dde5761fd5ce9452db8422f3a83dc7cb222463","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8dde5761fd5ce9452db8422f3a83dc7cb222463/comments","author":null,"committer":null,"parents":[{"sha":"416b8d3ccb65f8ecf612513489ed78e5cebe8641","url":"https://api.github.com/repos/apache/openjpa/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641","html_url":"https://github.com/apache/openjpa/commit/416b8d3ccb65f8ecf612513489ed78e5cebe8641"}]},{"sha":"492a19573c98f9e933c3e5c66d191ef92c371c86","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5MmExOTU3M2M5OGY5ZTkzM2MzZTVjNjZkMTkxZWY5MmMzNzFjODY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T19:39:36Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T19:39:36Z"},"message":"OPENJPA-1151 Cache the current-time timestamp in AbstractQueryCache.onTypesChanged().  Updated tests contributed by Jody Grassel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814802 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d8492bea9b79dbde3bb38946cc35af43b3f3933","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d8492bea9b79dbde3bb38946cc35af43b3f3933"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/492a19573c98f9e933c3e5c66d191ef92c371c86","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/492a19573c98f9e933c3e5c66d191ef92c371c86","html_url":"https://github.com/apache/openjpa/commit/492a19573c98f9e933c3e5c66d191ef92c371c86","comments_url":"https://api.github.com/repos/apache/openjpa/commits/492a19573c98f9e933c3e5c66d191ef92c371c86/comments","author":null,"committer":null,"parents":[{"sha":"b8dde5761fd5ce9452db8422f3a83dc7cb222463","url":"https://api.github.com/repos/apache/openjpa/commits/b8dde5761fd5ce9452db8422f3a83dc7cb222463","html_url":"https://github.com/apache/openjpa/commit/b8dde5761fd5ce9452db8422f3a83dc7cb222463"}]},{"sha":"bda013675836889b321f4e60c557a716cfe4ad31","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkYTAxMzY3NTgzNjg4OWIzMjFmNGU2MGM1NTdhNzE2Y2ZlNGFkMzE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-14T23:39:02Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-14T23:39:02Z"},"message":"update document on derived identity\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814937 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69581ff65c0b017dc8aa06a618afca1a6c0c6354","url":"https://api.github.com/repos/apache/openjpa/git/trees/69581ff65c0b017dc8aa06a618afca1a6c0c6354"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bda013675836889b321f4e60c557a716cfe4ad31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bda013675836889b321f4e60c557a716cfe4ad31","html_url":"https://github.com/apache/openjpa/commit/bda013675836889b321f4e60c557a716cfe4ad31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bda013675836889b321f4e60c557a716cfe4ad31/comments","author":null,"committer":null,"parents":[{"sha":"492a19573c98f9e933c3e5c66d191ef92c371c86","url":"https://api.github.com/repos/apache/openjpa/commits/492a19573c98f9e933c3e5c66d191ef92c371c86","html_url":"https://github.com/apache/openjpa/commit/492a19573c98f9e933c3e5c66d191ef92c371c86"}]},{"sha":"643f4d130f3c5426194ee7775685e85977584f79","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0M2Y0ZDEzMGYzYzU0MjYxOTRlZTc3NzU2ODVlODU5Nzc1ODRmNzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-15T03:33:28Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-15T03:33:28Z"},"message":"Configure for trigger for auto-assign in Oracle\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814984 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2884b2ea9a45c10fcd1ec0eee89adb3c2bde4b90","url":"https://api.github.com/repos/apache/openjpa/git/trees/2884b2ea9a45c10fcd1ec0eee89adb3c2bde4b90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/643f4d130f3c5426194ee7775685e85977584f79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/643f4d130f3c5426194ee7775685e85977584f79","html_url":"https://github.com/apache/openjpa/commit/643f4d130f3c5426194ee7775685e85977584f79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/643f4d130f3c5426194ee7775685e85977584f79/comments","author":null,"committer":null,"parents":[{"sha":"bda013675836889b321f4e60c557a716cfe4ad31","url":"https://api.github.com/repos/apache/openjpa/commits/bda013675836889b321f4e60c557a716cfe4ad31","html_url":"https://github.com/apache/openjpa/commit/bda013675836889b321f4e60c557a716cfe4ad31"}]},{"sha":"d062b254af87515597cd53a853efb6afc8324eca","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwNjJiMjU0YWY4NzUxNTU5N2NkNTNhODUzZWZiNmFmYzgzMjRlY2E=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-09-15T15:15:13Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-09-15T15:15:13Z"},"message":"OPENJPA-1301 - Committing contribution by Tim McConnell\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815361 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"12e75a30d868fd4780481fd8925e92f2e5a3af39","url":"https://api.github.com/repos/apache/openjpa/git/trees/12e75a30d868fd4780481fd8925e92f2e5a3af39"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d062b254af87515597cd53a853efb6afc8324eca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d062b254af87515597cd53a853efb6afc8324eca","html_url":"https://github.com/apache/openjpa/commit/d062b254af87515597cd53a853efb6afc8324eca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d062b254af87515597cd53a853efb6afc8324eca/comments","author":null,"committer":null,"parents":[{"sha":"643f4d130f3c5426194ee7775685e85977584f79","url":"https://api.github.com/repos/apache/openjpa/commits/643f4d130f3c5426194ee7775685e85977584f79","html_url":"https://github.com/apache/openjpa/commit/643f4d130f3c5426194ee7775685e85977584f79"}]},{"sha":"c353d0541e8b246dbd1b584d5228603506216880","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzNTNkMDU0MWU4YjI0NmRiZDFiNTg0ZDUyMjg2MDM1MDYyMTY4ODA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-15T15:28:10Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-15T15:28:10Z"},"message":"OPENJPA-1151: fix this test case error for MySQL. DB object in MySQL is case-sensitive.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815366 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5e24d28d808266a8f1c5ee41cbaf7aca2cefabb","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5e24d28d808266a8f1c5ee41cbaf7aca2cefabb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c353d0541e8b246dbd1b584d5228603506216880","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c353d0541e8b246dbd1b584d5228603506216880","html_url":"https://github.com/apache/openjpa/commit/c353d0541e8b246dbd1b584d5228603506216880","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c353d0541e8b246dbd1b584d5228603506216880/comments","author":null,"committer":null,"parents":[{"sha":"d062b254af87515597cd53a853efb6afc8324eca","url":"https://api.github.com/repos/apache/openjpa/commits/d062b254af87515597cd53a853efb6afc8324eca","html_url":"https://github.com/apache/openjpa/commit/d062b254af87515597cd53a853efb6afc8324eca"}]},{"sha":"a9ea5c1817ff24274446213e6969f97eae0e7373","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5ZWE1YzE4MTdmZjI0Mjc0NDQ2MjEzZTY5NjlmOTdlYWUwZTczNzM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-15T15:38:12Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-15T15:38:12Z"},"message":"OPENJPA-1151: fix test case error for MySQL. DB object in MySQL is case-sensitive.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815369 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"33fcfbbfae44eabce3990680583e5f6faafd925b","url":"https://api.github.com/repos/apache/openjpa/git/trees/33fcfbbfae44eabce3990680583e5f6faafd925b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a9ea5c1817ff24274446213e6969f97eae0e7373","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a9ea5c1817ff24274446213e6969f97eae0e7373","html_url":"https://github.com/apache/openjpa/commit/a9ea5c1817ff24274446213e6969f97eae0e7373","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a9ea5c1817ff24274446213e6969f97eae0e7373/comments","author":null,"committer":null,"parents":[{"sha":"c353d0541e8b246dbd1b584d5228603506216880","url":"https://api.github.com/repos/apache/openjpa/commits/c353d0541e8b246dbd1b584d5228603506216880","html_url":"https://github.com/apache/openjpa/commit/c353d0541e8b246dbd1b584d5228603506216880"}]},{"sha":"3146afb1bc096750ae2c8a66e2f5346bceaffde8","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNDZhZmIxYmMwOTY3NTBhZTJjOGE2NmUyZjUzNDZiY2VhZmZkZTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-15T16:59:21Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-15T16:59:21Z"},"message":"Persistence attribute type for singular attributes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815396 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6c4921f70003c4664acdc44049414aec471e1cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/e6c4921f70003c4664acdc44049414aec471e1cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3146afb1bc096750ae2c8a66e2f5346bceaffde8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3146afb1bc096750ae2c8a66e2f5346bceaffde8","html_url":"https://github.com/apache/openjpa/commit/3146afb1bc096750ae2c8a66e2f5346bceaffde8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3146afb1bc096750ae2c8a66e2f5346bceaffde8/comments","author":null,"committer":null,"parents":[{"sha":"a9ea5c1817ff24274446213e6969f97eae0e7373","url":"https://api.github.com/repos/apache/openjpa/commits/a9ea5c1817ff24274446213e6969f97eae0e7373","html_url":"https://github.com/apache/openjpa/commit/a9ea5c1817ff24274446213e6969f97eae0e7373"}]},{"sha":"eded0dd8facefda2af83567ecdae12f4c09eb53f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVkZWQwZGQ4ZmFjZWZkYTJhZjgzNTY3ZWNkYWUxMmY0YzA5ZWI1M2Y=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-15T18:56:55Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-15T18:56:55Z"},"message":"OPENJPA-1302: Use ContextClassloader in addition to the ProductDeivation's ClassLoader to find/load product derivations. Patch contributed by Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815447 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"02cb17ede532f539435f334b5eff401b932385f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/02cb17ede532f539435f334b5eff401b932385f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eded0dd8facefda2af83567ecdae12f4c09eb53f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eded0dd8facefda2af83567ecdae12f4c09eb53f","html_url":"https://github.com/apache/openjpa/commit/eded0dd8facefda2af83567ecdae12f4c09eb53f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eded0dd8facefda2af83567ecdae12f4c09eb53f/comments","author":null,"committer":null,"parents":[{"sha":"3146afb1bc096750ae2c8a66e2f5346bceaffde8","url":"https://api.github.com/repos/apache/openjpa/commits/3146afb1bc096750ae2c8a66e2f5346bceaffde8","html_url":"https://github.com/apache/openjpa/commit/3146afb1bc096750ae2c8a66e2f5346bceaffde8"}]},{"sha":"8fc1404dadaff7478ac724b540c783ccf2dd5ac8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmYzE0MDRkYWRhZmY3NDc4YWM3MjRiNTQwYzc4M2NjZjJkZDVhYzg=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-15T20:38:07Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-15T20:38:07Z"},"message":"Modify entity definitions to avoid Oracle reserved words.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815473 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d014fe643036814e901df0bd7f962c45b418eef","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d014fe643036814e901df0bd7f962c45b418eef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8fc1404dadaff7478ac724b540c783ccf2dd5ac8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8fc1404dadaff7478ac724b540c783ccf2dd5ac8","html_url":"https://github.com/apache/openjpa/commit/8fc1404dadaff7478ac724b540c783ccf2dd5ac8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8fc1404dadaff7478ac724b540c783ccf2dd5ac8/comments","author":null,"committer":null,"parents":[{"sha":"eded0dd8facefda2af83567ecdae12f4c09eb53f","url":"https://api.github.com/repos/apache/openjpa/commits/eded0dd8facefda2af83567ecdae12f4c09eb53f","html_url":"https://github.com/apache/openjpa/commit/eded0dd8facefda2af83567ecdae12f4c09eb53f"}]},{"sha":"eb5bccdd493119854909f333bf16301488c93897","node_id":"MDY6Q29tbWl0MjA2MzY0OmViNWJjY2RkNDkzMTE5ODU0OTA5ZjMzM2JmMTYzMDE0ODhjOTM4OTc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-15T21:40:59Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-15T21:40:59Z"},"message":"OPENJPA-1149: Add embeddables sample to the examples module. Patch contributed by Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815501 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7dfd92c39c3bdb22e5362431540a6bd20861073d","url":"https://api.github.com/repos/apache/openjpa/git/trees/7dfd92c39c3bdb22e5362431540a6bd20861073d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb5bccdd493119854909f333bf16301488c93897","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb5bccdd493119854909f333bf16301488c93897","html_url":"https://github.com/apache/openjpa/commit/eb5bccdd493119854909f333bf16301488c93897","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb5bccdd493119854909f333bf16301488c93897/comments","author":null,"committer":null,"parents":[{"sha":"8fc1404dadaff7478ac724b540c783ccf2dd5ac8","url":"https://api.github.com/repos/apache/openjpa/commits/8fc1404dadaff7478ac724b540c783ccf2dd5ac8","html_url":"https://github.com/apache/openjpa/commit/8fc1404dadaff7478ac724b540c783ccf2dd5ac8"}]},{"sha":"72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZjJjYjg1MTZlZTExYWNjYmI0Y2RhMWVkN2M2ZDg0NzliNzllZTI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-16T22:13:26Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-16T22:13:26Z"},"message":"OPENJPA-1253: allow JoinColumn in conjunction with OneToMany annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815988 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f1a43bc411b89d6665face76116b25c9b2ea5ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f1a43bc411b89d6665face76116b25c9b2ea5ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","html_url":"https://github.com/apache/openjpa/commit/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/comments","author":null,"committer":null,"parents":[{"sha":"eb5bccdd493119854909f333bf16301488c93897","url":"https://api.github.com/repos/apache/openjpa/commits/eb5bccdd493119854909f333bf16301488c93897","html_url":"https://github.com/apache/openjpa/commit/eb5bccdd493119854909f333bf16301488c93897"}]},{"sha":"8c1e1a7ea57a3ebb21757762696ef9592022c71d","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMWUxYTdlYTU3YTNlYmIyMTc1Nzc2MjY5NmVmOTU5MjAyMmM3MWQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-17T07:49:13Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-17T07:49:13Z"},"message":"OPENJPA-1253: support non-default uni-directional OneToMany using foreign key strategy, using JoinColumn annotation. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"02498e6d0ca8823542d67c1d7a621f99f761befa","url":"https://api.github.com/repos/apache/openjpa/git/trees/02498e6d0ca8823542d67c1d7a621f99f761befa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d","html_url":"https://github.com/apache/openjpa/commit/8c1e1a7ea57a3ebb21757762696ef9592022c71d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d/comments","author":null,"committer":null,"parents":[{"sha":"72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","url":"https://api.github.com/repos/apache/openjpa/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","html_url":"https://github.com/apache/openjpa/commit/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2"}]},{"sha":"a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5NGJiOGVlMDYwMzcxYjFjNmU2MGY0N2ViYTJlZmY4YWIwZTVkYzk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T13:44:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T13:44:03Z"},"message":"OPENJPA-1214 moving testcases to the existing compat package\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816187 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e1f427ff1d15ce8c7a7e72e61cd96f5b3a921a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/6e1f427ff1d15ce8c7a7e72e61cd96f5b3a921a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9","html_url":"https://github.com/apache/openjpa/commit/a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9/comments","author":null,"committer":null,"parents":[{"sha":"8c1e1a7ea57a3ebb21757762696ef9592022c71d","url":"https://api.github.com/repos/apache/openjpa/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d","html_url":"https://github.com/apache/openjpa/commit/8c1e1a7ea57a3ebb21757762696ef9592022c71d"}]},{"sha":"0c3c6c3ba4d138aea4287e124539375b2a026549","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjM2M2YzNiYTRkMTM4YWVhNDI4N2UxMjQ1MzkzNzViMmEwMjY1NDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T16:44:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T16:44:54Z"},"message":"OPENJPA-1214 remove subdir\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816271 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e1f427ff1d15ce8c7a7e72e61cd96f5b3a921a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/6e1f427ff1d15ce8c7a7e72e61cd96f5b3a921a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c3c6c3ba4d138aea4287e124539375b2a026549","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c3c6c3ba4d138aea4287e124539375b2a026549","html_url":"https://github.com/apache/openjpa/commit/0c3c6c3ba4d138aea4287e124539375b2a026549","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c3c6c3ba4d138aea4287e124539375b2a026549/comments","author":null,"committer":null,"parents":[{"sha":"a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9","url":"https://api.github.com/repos/apache/openjpa/commits/a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9","html_url":"https://github.com/apache/openjpa/commit/a94bb8ee060371b1c6e60f47eba2eff8ab0e5dc9"}]},{"sha":"1c4a61758ace44c766491f32193ad5d4612a958f","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjNGE2MTc1OGFjZTQ0Yzc2NjQ5MWYzMjE5M2FkNWQ0NjEyYTk1OGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-17T16:52:28Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-17T16:52:28Z"},"message":"OPENJPA-1305:\nBroker used by the WriteBehindCallback should be considered unmanaged.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816275 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fbf18f89011d71df59a306d0ec564075ae91e683","url":"https://api.github.com/repos/apache/openjpa/git/trees/fbf18f89011d71df59a306d0ec564075ae91e683"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c4a61758ace44c766491f32193ad5d4612a958f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c4a61758ace44c766491f32193ad5d4612a958f","html_url":"https://github.com/apache/openjpa/commit/1c4a61758ace44c766491f32193ad5d4612a958f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c4a61758ace44c766491f32193ad5d4612a958f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0c3c6c3ba4d138aea4287e124539375b2a026549","url":"https://api.github.com/repos/apache/openjpa/commits/0c3c6c3ba4d138aea4287e124539375b2a026549","html_url":"https://github.com/apache/openjpa/commit/0c3c6c3ba4d138aea4287e124539375b2a026549"}]},{"sha":"add24283b4e0bf63b3ee0df65490d1e361edc410","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkZDI0MjgzYjRlMGJmNjNiM2VlMGRmNjU0OTBkMWUzNjFlZGM0MTA=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-17T17:19:09Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-17T17:19:09Z"},"message":"OPENJPA-1249 Make insertBlobForStreamingLoad method usage consistent for Oracle DB to eliminate NPE in updateBlob path.  \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816287 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"847992c341a07b8f069c84858a04c8926f86d3ae","url":"https://api.github.com/repos/apache/openjpa/git/trees/847992c341a07b8f069c84858a04c8926f86d3ae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/add24283b4e0bf63b3ee0df65490d1e361edc410","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/add24283b4e0bf63b3ee0df65490d1e361edc410","html_url":"https://github.com/apache/openjpa/commit/add24283b4e0bf63b3ee0df65490d1e361edc410","comments_url":"https://api.github.com/repos/apache/openjpa/commits/add24283b4e0bf63b3ee0df65490d1e361edc410/comments","author":null,"committer":null,"parents":[{"sha":"1c4a61758ace44c766491f32193ad5d4612a958f","url":"https://api.github.com/repos/apache/openjpa/commits/1c4a61758ace44c766491f32193ad5d4612a958f","html_url":"https://github.com/apache/openjpa/commit/1c4a61758ace44c766491f32193ad5d4612a958f"}]},{"sha":"cbe18c2f74e096ddf8930632c491d7ae5aceccfa","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiZTE4YzJmNzRlMDk2ZGRmODkzMDYzMmM0OTFkN2FlNWFjZWNjZmE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T17:22:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T17:22:49Z"},"message":"OPENJPA-1213 Compatibility tests showing change in query.setParameter() behaviour.  Contributed by Tim McConnell, but with some package name and OpenJPAVersion checks added.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816289 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6cf94c2c0c4cd41f8558893687a45aee518ed0f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f6cf94c2c0c4cd41f8558893687a45aee518ed0f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbe18c2f74e096ddf8930632c491d7ae5aceccfa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbe18c2f74e096ddf8930632c491d7ae5aceccfa","html_url":"https://github.com/apache/openjpa/commit/cbe18c2f74e096ddf8930632c491d7ae5aceccfa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbe18c2f74e096ddf8930632c491d7ae5aceccfa/comments","author":null,"committer":null,"parents":[{"sha":"add24283b4e0bf63b3ee0df65490d1e361edc410","url":"https://api.github.com/repos/apache/openjpa/commits/add24283b4e0bf63b3ee0df65490d1e361edc410","html_url":"https://github.com/apache/openjpa/commit/add24283b4e0bf63b3ee0df65490d1e361edc410"}]},{"sha":"daadd62bd2b1b740e24787e4bf85bf48f4f21fa2","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhYWRkNjJiZDJiMWI3NDBlMjQ3ODdlNGJmODViZjQ4ZjRmMjFmYTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T17:29:01Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T17:29:01Z"},"message":"OPENJPA-1213 Use OpenJPAVersion for handling expected test result differences\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816295 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"84a9f33d1d9578817d27f4c12794b74b4b87b1be","url":"https://api.github.com/repos/apache/openjpa/git/trees/84a9f33d1d9578817d27f4c12794b74b4b87b1be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/daadd62bd2b1b740e24787e4bf85bf48f4f21fa2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/daadd62bd2b1b740e24787e4bf85bf48f4f21fa2","html_url":"https://github.com/apache/openjpa/commit/daadd62bd2b1b740e24787e4bf85bf48f4f21fa2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/daadd62bd2b1b740e24787e4bf85bf48f4f21fa2/comments","author":null,"committer":null,"parents":[{"sha":"cbe18c2f74e096ddf8930632c491d7ae5aceccfa","url":"https://api.github.com/repos/apache/openjpa/commits/cbe18c2f74e096ddf8930632c491d7ae5aceccfa","html_url":"https://github.com/apache/openjpa/commit/cbe18c2f74e096ddf8930632c491d7ae5aceccfa"}]},{"sha":"7deb8217359235f9de58516dd7e4ab00d6abbf07","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkZWI4MjE3MzU5MjM1ZjlkZTU4NTE2ZGQ3ZTRhYjAwZDZhYmJmMDc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T17:58:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T17:58:33Z"},"message":"OPENJPA-1213 Add section to Migration appendix about Query.setParameter() behavior differences.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816310 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"520ae6cb77e871ef1a497b3ebd196332fddb751d","url":"https://api.github.com/repos/apache/openjpa/git/trees/520ae6cb77e871ef1a497b3ebd196332fddb751d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7deb8217359235f9de58516dd7e4ab00d6abbf07","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7deb8217359235f9de58516dd7e4ab00d6abbf07","html_url":"https://github.com/apache/openjpa/commit/7deb8217359235f9de58516dd7e4ab00d6abbf07","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7deb8217359235f9de58516dd7e4ab00d6abbf07/comments","author":null,"committer":null,"parents":[{"sha":"daadd62bd2b1b740e24787e4bf85bf48f4f21fa2","url":"https://api.github.com/repos/apache/openjpa/commits/daadd62bd2b1b740e24787e4bf85bf48f4f21fa2","html_url":"https://github.com/apache/openjpa/commit/daadd62bd2b1b740e24787e4bf85bf48f4f21fa2"}]},{"sha":"1318f98bc4c146bfdeba13b95c297a4f6015709f","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzMThmOThiYzRjMTQ2YmZkZWJhMTNiOTVjMjk3YTRmNjAxNTcwOWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-17T18:10:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-17T18:10:09Z"},"message":"OPENJPA-1173:\nUpdating postgresql test dependency to v8.4-701\nSubmitted By: Tim McConnell\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816317 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8586b56ad629efbe0ce4a5c8fd709231c74c858","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8586b56ad629efbe0ce4a5c8fd709231c74c858"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1318f98bc4c146bfdeba13b95c297a4f6015709f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1318f98bc4c146bfdeba13b95c297a4f6015709f","html_url":"https://github.com/apache/openjpa/commit/1318f98bc4c146bfdeba13b95c297a4f6015709f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1318f98bc4c146bfdeba13b95c297a4f6015709f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7deb8217359235f9de58516dd7e4ab00d6abbf07","url":"https://api.github.com/repos/apache/openjpa/commits/7deb8217359235f9de58516dd7e4ab00d6abbf07","html_url":"https://github.com/apache/openjpa/commit/7deb8217359235f9de58516dd7e4ab00d6abbf07"}]},{"sha":"846d1ef82ac6dbb253a19db1007a684c69e3416f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0NmQxZWY4MmFjNmRiYjI1M2ExOWRiMTAwN2E2ODRjNjllMzQxNmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-17T18:31:10Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-17T18:31:10Z"},"message":"OPENJPA-1173:\nRevert driver update (not in repo yet).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816320 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"520ae6cb77e871ef1a497b3ebd196332fddb751d","url":"https://api.github.com/repos/apache/openjpa/git/trees/520ae6cb77e871ef1a497b3ebd196332fddb751d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/846d1ef82ac6dbb253a19db1007a684c69e3416f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/846d1ef82ac6dbb253a19db1007a684c69e3416f","html_url":"https://github.com/apache/openjpa/commit/846d1ef82ac6dbb253a19db1007a684c69e3416f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/846d1ef82ac6dbb253a19db1007a684c69e3416f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1318f98bc4c146bfdeba13b95c297a4f6015709f","url":"https://api.github.com/repos/apache/openjpa/commits/1318f98bc4c146bfdeba13b95c297a4f6015709f","html_url":"https://github.com/apache/openjpa/commit/1318f98bc4c146bfdeba13b95c297a4f6015709f"}]},{"sha":"ac23a55b680440c84a1101ef95856e3d0aab337c","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjMjNhNTViNjgwNDQwYzg0YTExMDFlZjk1ODU2ZTNkMGFhYjMzN2M=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T18:44:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T18:44:29Z"},"message":"OPENJPA-1213 Additional Compatibility tests (patch #2) showing change in query.setParameter() behaviour.  Contributed by Tim McConnell, but with some package name and OpenJPAVersion checks added.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816330 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"757256045e1ff434f80fef81282368b26dadad7f","url":"https://api.github.com/repos/apache/openjpa/git/trees/757256045e1ff434f80fef81282368b26dadad7f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac23a55b680440c84a1101ef95856e3d0aab337c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac23a55b680440c84a1101ef95856e3d0aab337c","html_url":"https://github.com/apache/openjpa/commit/ac23a55b680440c84a1101ef95856e3d0aab337c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac23a55b680440c84a1101ef95856e3d0aab337c/comments","author":null,"committer":null,"parents":[{"sha":"846d1ef82ac6dbb253a19db1007a684c69e3416f","url":"https://api.github.com/repos/apache/openjpa/commits/846d1ef82ac6dbb253a19db1007a684c69e3416f","html_url":"https://github.com/apache/openjpa/commit/846d1ef82ac6dbb253a19db1007a684c69e3416f"}]},{"sha":"e5f7d97695681a8efb23f0cb67975fe25c5fd1c1","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1ZjdkOTc2OTU2ODFhOGVmYjIzZjBjYjY3OTc1ZmUyNWM1ZmQxYzE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T20:12:35Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T20:12:35Z"},"message":"OPENJPA-1178 Doc updates for Compatibility issues.  Added JIRA references for those looking for more details...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816366 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a0a5dea5e60eff9eab18e8c655444faf0fe4d32","url":"https://api.github.com/repos/apache/openjpa/git/trees/3a0a5dea5e60eff9eab18e8c655444faf0fe4d32"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5f7d97695681a8efb23f0cb67975fe25c5fd1c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5f7d97695681a8efb23f0cb67975fe25c5fd1c1","html_url":"https://github.com/apache/openjpa/commit/e5f7d97695681a8efb23f0cb67975fe25c5fd1c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5f7d97695681a8efb23f0cb67975fe25c5fd1c1/comments","author":null,"committer":null,"parents":[{"sha":"ac23a55b680440c84a1101ef95856e3d0aab337c","url":"https://api.github.com/repos/apache/openjpa/commits/ac23a55b680440c84a1101ef95856e3d0aab337c","html_url":"https://github.com/apache/openjpa/commit/ac23a55b680440c84a1101ef95856e3d0aab337c"}]},{"sha":"95a2c8f680e2b09ad9498f0d866f6f1f1afea62d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk1YTJjOGY2ODBlMmIwOWFkOTQ5OGYwZDg2NmY2ZjFmMWFmZWE2MmQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-17T21:46:56Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-17T21:46:56Z"},"message":"Fix SQL comparison failures in Criteria query by example tests on Oracle by using standard sql92 join syntax.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816392 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0988380a30082789d5a98e798924fee029ad3670","url":"https://api.github.com/repos/apache/openjpa/git/trees/0988380a30082789d5a98e798924fee029ad3670"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/95a2c8f680e2b09ad9498f0d866f6f1f1afea62d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/95a2c8f680e2b09ad9498f0d866f6f1f1afea62d","html_url":"https://github.com/apache/openjpa/commit/95a2c8f680e2b09ad9498f0d866f6f1f1afea62d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/95a2c8f680e2b09ad9498f0d866f6f1f1afea62d/comments","author":null,"committer":null,"parents":[{"sha":"e5f7d97695681a8efb23f0cb67975fe25c5fd1c1","url":"https://api.github.com/repos/apache/openjpa/commits/e5f7d97695681a8efb23f0cb67975fe25c5fd1c1","html_url":"https://github.com/apache/openjpa/commit/e5f7d97695681a8efb23f0cb67975fe25c5fd1c1"}]},{"sha":"1c0b9849f185f3a5f14c4a42f4b55379af331219","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjMGI5ODQ5ZjE4NWYzYTVmMTRjNGE0MmY0YjU1Mzc5YWYzMzEyMTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-18T15:33:11Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-18T15:33:11Z"},"message":"Remove uneeded imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816671 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"27e9a271d7c5faee37b97e83c6a3644a71bb0c64","url":"https://api.github.com/repos/apache/openjpa/git/trees/27e9a271d7c5faee37b97e83c6a3644a71bb0c64"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c0b9849f185f3a5f14c4a42f4b55379af331219","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c0b9849f185f3a5f14c4a42f4b55379af331219","html_url":"https://github.com/apache/openjpa/commit/1c0b9849f185f3a5f14c4a42f4b55379af331219","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c0b9849f185f3a5f14c4a42f4b55379af331219/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"95a2c8f680e2b09ad9498f0d866f6f1f1afea62d","url":"https://api.github.com/repos/apache/openjpa/commits/95a2c8f680e2b09ad9498f0d866f6f1f1afea62d","html_url":"https://github.com/apache/openjpa/commit/95a2c8f680e2b09ad9498f0d866f6f1f1afea62d"}]},{"sha":"3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmNDNlM2RkMGUyYzE3YjAwZTQ2N2RkMjg0MWI4YTljM2JiMGM4ZjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-18T18:38:00Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-18T18:38:00Z"},"message":"OPENJPA-1309 DB2 requires CAST for argument passed to datastore MOD function\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816737 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0bf73645f4ec6f9666c3372296e6c712e1e5a80a","url":"https://api.github.com/repos/apache/openjpa/git/trees/0bf73645f4ec6f9666c3372296e6c712e1e5a80a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","html_url":"https://github.com/apache/openjpa/commit/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/comments","author":null,"committer":null,"parents":[{"sha":"1c0b9849f185f3a5f14c4a42f4b55379af331219","url":"https://api.github.com/repos/apache/openjpa/commits/1c0b9849f185f3a5f14c4a42f4b55379af331219","html_url":"https://github.com/apache/openjpa/commit/1c0b9849f185f3a5f14c4a42f4b55379af331219"}]},{"sha":"946781881847f4dee118aa286f3dd788781913d9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0Njc4MTg4MTg0N2Y0ZGVlMTE4YWEyODZmM2RkNzg4NzgxOTEzZDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-18T20:06:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-18T20:06:12Z"},"message":"OPENJPA-1310 SQLServer requires JAXB marshalled XML to be in UTF-16 instead of UTF-8.  Also updated some of the XmlElement names to match the case used in the XmlType annotation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816767 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"00a41918ae27700b4dc08877b4fe66b78c8307c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/00a41918ae27700b4dc08877b4fe66b78c8307c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/946781881847f4dee118aa286f3dd788781913d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/946781881847f4dee118aa286f3dd788781913d9","html_url":"https://github.com/apache/openjpa/commit/946781881847f4dee118aa286f3dd788781913d9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/946781881847f4dee118aa286f3dd788781913d9/comments","author":null,"committer":null,"parents":[{"sha":"3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","url":"https://api.github.com/repos/apache/openjpa/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","html_url":"https://github.com/apache/openjpa/commit/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1"}]},{"sha":"cf7f69bbd57fe1f40f9c7341c10788a591278777","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmN2Y2OWJiZDU3ZmUxZjQwZjljNzM0MWMxMDc4OGE1OTEyNzg3Nzc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-18T21:53:47Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-18T21:53:47Z"},"message":"OPENJPA-1253: support non-default One-To-Many mappings\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816795 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ccc8a41765af6242ebf9e80ce7f8e3ea8f012978","url":"https://api.github.com/repos/apache/openjpa/git/trees/ccc8a41765af6242ebf9e80ce7f8e3ea8f012978"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777","html_url":"https://github.com/apache/openjpa/commit/cf7f69bbd57fe1f40f9c7341c10788a591278777","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777/comments","author":null,"committer":null,"parents":[{"sha":"946781881847f4dee118aa286f3dd788781913d9","url":"https://api.github.com/repos/apache/openjpa/commits/946781881847f4dee118aa286f3dd788781913d9","html_url":"https://github.com/apache/openjpa/commit/946781881847f4dee118aa286f3dd788781913d9"}]},{"sha":"5c23058b0ea70d802a55cdb3f94722138d75910b","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjMjMwNThiMGVhNzBkODAyYTU1Y2RiM2Y5NDcyMjEzOGQ3NTkxMGI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T02:13:18Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T02:13:18Z"},"message":"OPENJPA-1253: support non-default bi-directional one to many using Join Table/Join column annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817131 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3bf832d5cf391463d5903560c80017b8cea00621","url":"https://api.github.com/repos/apache/openjpa/git/trees/3bf832d5cf391463d5903560c80017b8cea00621"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c23058b0ea70d802a55cdb3f94722138d75910b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c23058b0ea70d802a55cdb3f94722138d75910b","html_url":"https://github.com/apache/openjpa/commit/5c23058b0ea70d802a55cdb3f94722138d75910b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c23058b0ea70d802a55cdb3f94722138d75910b/comments","author":null,"committer":null,"parents":[{"sha":"cf7f69bbd57fe1f40f9c7341c10788a591278777","url":"https://api.github.com/repos/apache/openjpa/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777","html_url":"https://github.com/apache/openjpa/commit/cf7f69bbd57fe1f40f9c7341c10788a591278777"}]},{"sha":"abbda7df8eb2a7108a2276c34bb4d8ad812b8349","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiYmRhN2RmOGViMmE3MTA4YTIyNzZjMzRiYjRkOGFkODEyYjgzNDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-21T14:43:58Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-21T14:43:58Z"},"message":"OPENJPA-1319 Incorrect hashcode()/equals() implementations - EntityManagerImpl.  Patch contributed by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817273 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cced96fe759a74ece44c9f2a6c939ebb147d8071","url":"https://api.github.com/repos/apache/openjpa/git/trees/cced96fe759a74ece44c9f2a6c939ebb147d8071"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/abbda7df8eb2a7108a2276c34bb4d8ad812b8349","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/abbda7df8eb2a7108a2276c34bb4d8ad812b8349","html_url":"https://github.com/apache/openjpa/commit/abbda7df8eb2a7108a2276c34bb4d8ad812b8349","comments_url":"https://api.github.com/repos/apache/openjpa/commits/abbda7df8eb2a7108a2276c34bb4d8ad812b8349/comments","author":null,"committer":null,"parents":[{"sha":"5c23058b0ea70d802a55cdb3f94722138d75910b","url":"https://api.github.com/repos/apache/openjpa/commits/5c23058b0ea70d802a55cdb3f94722138d75910b","html_url":"https://github.com/apache/openjpa/commit/5c23058b0ea70d802a55cdb3f94722138d75910b"}]},{"sha":"fdd330a116c55a89b1320f1c5e0c7dec242a0ec7","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkZDMzMGExMTZjNTVhODliMTMyMGYxYzVlMGM3ZGVjMjQyYTBlYzc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-21T18:51:23Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-21T18:51:23Z"},"message":"OPENJPA-1172 - Committing changes to trunk. Patch submitted by Rick Curtis\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817370 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a5d35619f1f124d0e122e6cbbd899cfb308152c","url":"https://api.github.com/repos/apache/openjpa/git/trees/4a5d35619f1f124d0e122e6cbbd899cfb308152c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fdd330a116c55a89b1320f1c5e0c7dec242a0ec7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fdd330a116c55a89b1320f1c5e0c7dec242a0ec7","html_url":"https://github.com/apache/openjpa/commit/fdd330a116c55a89b1320f1c5e0c7dec242a0ec7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fdd330a116c55a89b1320f1c5e0c7dec242a0ec7/comments","author":null,"committer":null,"parents":[{"sha":"abbda7df8eb2a7108a2276c34bb4d8ad812b8349","url":"https://api.github.com/repos/apache/openjpa/commits/abbda7df8eb2a7108a2276c34bb4d8ad812b8349","html_url":"https://github.com/apache/openjpa/commit/abbda7df8eb2a7108a2276c34bb4d8ad812b8349"}]},{"sha":"e53f8514f463fcc943bb8152f9f821419a8fa7dd","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1M2Y4NTE0ZjQ2M2ZjYzk0M2JiODE1MmY5ZjgyMTQxOWE4ZmE3ZGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-21T19:23:25Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-21T19:23:25Z"},"message":"OPENJPA-1309 fix testcase for DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817382 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f10da9a8368f84467677b1185ccdc1188cabc4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/2f10da9a8368f84467677b1185ccdc1188cabc4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e53f8514f463fcc943bb8152f9f821419a8fa7dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e53f8514f463fcc943bb8152f9f821419a8fa7dd","html_url":"https://github.com/apache/openjpa/commit/e53f8514f463fcc943bb8152f9f821419a8fa7dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e53f8514f463fcc943bb8152f9f821419a8fa7dd/comments","author":null,"committer":null,"parents":[{"sha":"fdd330a116c55a89b1320f1c5e0c7dec242a0ec7","url":"https://api.github.com/repos/apache/openjpa/commits/fdd330a116c55a89b1320f1c5e0c7dec242a0ec7","html_url":"https://github.com/apache/openjpa/commit/fdd330a116c55a89b1320f1c5e0c7dec242a0ec7"}]},{"sha":"828e08ee0e921f61df972f5b190b3bbf67c13b42","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyOGUwOGVlMGU5MjFmNjFkZjk3MmY1YjE5MGIzYmJmNjdjMTNiNDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-21T20:01:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-21T20:01:44Z"},"message":"OPENJPA-1182 Backwards compatibility issues - PreUpdate and PostUpdate behavior.  Patch contributed by Tim McConnell with some minor package name and version checking changes.  Doc updates by Donald Woods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817389 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e09dd2699ab0f87eafdc75cfab661736ef7996d","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e09dd2699ab0f87eafdc75cfab661736ef7996d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42","html_url":"https://github.com/apache/openjpa/commit/828e08ee0e921f61df972f5b190b3bbf67c13b42","comments_url":"https://api.github.com/repos/apache/openjpa/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42/comments","author":null,"committer":null,"parents":[{"sha":"e53f8514f463fcc943bb8152f9f821419a8fa7dd","url":"https://api.github.com/repos/apache/openjpa/commits/e53f8514f463fcc943bb8152f9f821419a8fa7dd","html_url":"https://github.com/apache/openjpa/commit/e53f8514f463fcc943bb8152f9f821419a8fa7dd"}]},{"sha":"19da9769b0b11017a169f84125813ecae51a3458","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5ZGE5NzY5YjBiMTEwMTdhMTY5Zjg0MTI1ODEzZWNhZTUxYTM0NTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T20:21:50Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T20:21:50Z"},"message":"OPENJPA-1253: support non-default uni-directional OneToMany mapping using foreign key strategy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817399 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61d2109ac66395f58f36348fbb06d72ed79bc5ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/61d2109ac66395f58f36348fbb06d72ed79bc5ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/19da9769b0b11017a169f84125813ecae51a3458","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/19da9769b0b11017a169f84125813ecae51a3458","html_url":"https://github.com/apache/openjpa/commit/19da9769b0b11017a169f84125813ecae51a3458","comments_url":"https://api.github.com/repos/apache/openjpa/commits/19da9769b0b11017a169f84125813ecae51a3458/comments","author":null,"committer":null,"parents":[{"sha":"828e08ee0e921f61df972f5b190b3bbf67c13b42","url":"https://api.github.com/repos/apache/openjpa/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42","html_url":"https://github.com/apache/openjpa/commit/828e08ee0e921f61df972f5b190b3bbf67c13b42"}]},{"sha":"437897789151a863d3db32d8c4692100bcb12a60","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzNzg5Nzc4OTE1MWE4NjNkM2RiMzJkOGM0NjkyMTAwYmNiMTJhNjA=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-21T21:59:21Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-21T21:59:21Z"},"message":"OPENJPA-250: Committing to trunk. Submitted by Patrick Linskey, Simon Droscher, and Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817429 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"726565c9385906684aa4d15721b5536982780671","url":"https://api.github.com/repos/apache/openjpa/git/trees/726565c9385906684aa4d15721b5536982780671"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/437897789151a863d3db32d8c4692100bcb12a60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/437897789151a863d3db32d8c4692100bcb12a60","html_url":"https://github.com/apache/openjpa/commit/437897789151a863d3db32d8c4692100bcb12a60","comments_url":"https://api.github.com/repos/apache/openjpa/commits/437897789151a863d3db32d8c4692100bcb12a60/comments","author":null,"committer":null,"parents":[{"sha":"19da9769b0b11017a169f84125813ecae51a3458","url":"https://api.github.com/repos/apache/openjpa/commits/19da9769b0b11017a169f84125813ecae51a3458","html_url":"https://github.com/apache/openjpa/commit/19da9769b0b11017a169f84125813ecae51a3458"}]},{"sha":"f1af41c44c631bd63da734386cdb329faf4ad9e6","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxYWY0MWM0NGM2MzFiZDYzZGE3MzQzODZjZGIzMjlmYWY0YWQ5ZTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-22T14:45:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-22T14:45:26Z"},"message":"OPENJPA-1298: \nRemove WriteBehindCallbackManager which 'shared' a single callback with multiple EMFs unintentionally\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8f232898bc9aa6d08103d757989e38e369abcb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8f232898bc9aa6d08103d757989e38e369abcb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6","html_url":"https://github.com/apache/openjpa/commit/f1af41c44c631bd63da734386cdb329faf4ad9e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"437897789151a863d3db32d8c4692100bcb12a60","url":"https://api.github.com/repos/apache/openjpa/commits/437897789151a863d3db32d8c4692100bcb12a60","html_url":"https://github.com/apache/openjpa/commit/437897789151a863d3db32d8c4692100bcb12a60"}]},{"sha":"01c26a9e21a80fd6339d0c2a406f11397f4e3d20","node_id":"MDY6Q29tbWl0MjA2MzY0OjAxYzI2YTllMjFhODBmZDYzMzlkMGMyYTQwNmYxMTM5N2Y0ZTNkMjA=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-22T20:15:07Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-22T20:15:07Z"},"message":"Updated test code to use mapping tool to regenerate subset of DB artifacts if running on Oracle.  This will create the triggers required to support generated identity columns.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817815 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dcbe92e848d0c713b7bfc358e47de2340f92881b","url":"https://api.github.com/repos/apache/openjpa/git/trees/dcbe92e848d0c713b7bfc358e47de2340f92881b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/01c26a9e21a80fd6339d0c2a406f11397f4e3d20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/01c26a9e21a80fd6339d0c2a406f11397f4e3d20","html_url":"https://github.com/apache/openjpa/commit/01c26a9e21a80fd6339d0c2a406f11397f4e3d20","comments_url":"https://api.github.com/repos/apache/openjpa/commits/01c26a9e21a80fd6339d0c2a406f11397f4e3d20/comments","author":null,"committer":null,"parents":[{"sha":"f1af41c44c631bd63da734386cdb329faf4ad9e6","url":"https://api.github.com/repos/apache/openjpa/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6","html_url":"https://github.com/apache/openjpa/commit/f1af41c44c631bd63da734386cdb329faf4ad9e6"}]},{"sha":"6f1b9627fe928732b637e409c95669fd0cc94746","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmMWI5NjI3ZmU5Mjg3MzJiNjM3ZTQwOWM5NTY2OWZkMGNjOTQ3NDY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-22T20:38:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-22T20:38:36Z"},"message":"OPENJPA-1253: support non-default bi-directional one-to-many using foreign key strategy to find/query from the ower's side\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817831 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01ce84344d29a3b6d826776a2d7db54d4ab0c376","url":"https://api.github.com/repos/apache/openjpa/git/trees/01ce84344d29a3b6d826776a2d7db54d4ab0c376"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f1b9627fe928732b637e409c95669fd0cc94746","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f1b9627fe928732b637e409c95669fd0cc94746","html_url":"https://github.com/apache/openjpa/commit/6f1b9627fe928732b637e409c95669fd0cc94746","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f1b9627fe928732b637e409c95669fd0cc94746/comments","author":null,"committer":null,"parents":[{"sha":"01c26a9e21a80fd6339d0c2a406f11397f4e3d20","url":"https://api.github.com/repos/apache/openjpa/commits/01c26a9e21a80fd6339d0c2a406f11397f4e3d20","html_url":"https://github.com/apache/openjpa/commit/01c26a9e21a80fd6339d0c2a406f11397f4e3d20"}]},{"sha":"fbb7e1208aaa9c9462a00766e26e5147e4ab44f1","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiYjdlMTIwOGFhYTljOTQ2MmEwMDc2NmUyNmU1MTQ3ZTRhYjQ0ZjE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-23T15:07:31Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-23T15:07:31Z"},"message":"OPENJPA-1325 Defer embeddable population until after class metadata is parsed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818134 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dfe3512ba7b6603d0350414189b763a06cf71f04","url":"https://api.github.com/repos/apache/openjpa/git/trees/dfe3512ba7b6603d0350414189b763a06cf71f04"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fbb7e1208aaa9c9462a00766e26e5147e4ab44f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fbb7e1208aaa9c9462a00766e26e5147e4ab44f1","html_url":"https://github.com/apache/openjpa/commit/fbb7e1208aaa9c9462a00766e26e5147e4ab44f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fbb7e1208aaa9c9462a00766e26e5147e4ab44f1/comments","author":null,"committer":null,"parents":[{"sha":"6f1b9627fe928732b637e409c95669fd0cc94746","url":"https://api.github.com/repos/apache/openjpa/commits/6f1b9627fe928732b637e409c95669fd0cc94746","html_url":"https://github.com/apache/openjpa/commit/6f1b9627fe928732b637e409c95669fd0cc94746"}]},{"sha":"6485137930cbfa27de554d5a1e6d75c8eff5529e","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0ODUxMzc5MzBjYmZhMjdkZTU1NGQ1YTFlNmQ3NWM4ZWZmNTUyOWU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-09-23T16:14:35Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-09-23T16:14:35Z"},"message":"OPENJPA-1323 Enhanced to conform to the new spec requirement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818153 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0327a3492ba2416492b6687951999c30dd2746f7","url":"https://api.github.com/repos/apache/openjpa/git/trees/0327a3492ba2416492b6687951999c30dd2746f7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6485137930cbfa27de554d5a1e6d75c8eff5529e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6485137930cbfa27de554d5a1e6d75c8eff5529e","html_url":"https://github.com/apache/openjpa/commit/6485137930cbfa27de554d5a1e6d75c8eff5529e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6485137930cbfa27de554d5a1e6d75c8eff5529e/comments","author":null,"committer":null,"parents":[{"sha":"fbb7e1208aaa9c9462a00766e26e5147e4ab44f1","url":"https://api.github.com/repos/apache/openjpa/commits/fbb7e1208aaa9c9462a00766e26e5147e4ab44f1","html_url":"https://github.com/apache/openjpa/commit/fbb7e1208aaa9c9462a00766e26e5147e4ab44f1"}]},{"sha":"2eeca2a8ac545585a51404c94e59c63559395f05","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlZWNhMmE4YWM1NDU1ODVhNTE0MDRjOTRlNTljNjM1NTkzOTVmMDU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-23T18:44:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-23T18:44:44Z"},"message":"OPENJPA-1315 Incorrect hashcode()/equals() implementations in QueryImpl causes NPE in Eclipse debugger.  Patch contributed by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818195 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ab65bf23f3bfc86e34c1077333b70f28c653a63","url":"https://api.github.com/repos/apache/openjpa/git/trees/9ab65bf23f3bfc86e34c1077333b70f28c653a63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2eeca2a8ac545585a51404c94e59c63559395f05","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2eeca2a8ac545585a51404c94e59c63559395f05","html_url":"https://github.com/apache/openjpa/commit/2eeca2a8ac545585a51404c94e59c63559395f05","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2eeca2a8ac545585a51404c94e59c63559395f05/comments","author":null,"committer":null,"parents":[{"sha":"6485137930cbfa27de554d5a1e6d75c8eff5529e","url":"https://api.github.com/repos/apache/openjpa/commits/6485137930cbfa27de554d5a1e6d75c8eff5529e","html_url":"https://github.com/apache/openjpa/commit/6485137930cbfa27de554d5a1e6d75c8eff5529e"}]},{"sha":"85a609aa5d3ac8a83048e121526f3519d7c8bdfc","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1YTYwOWFhNWQzYWM4YTgzMDQ4ZTEyMTUyNmYzNTE5ZDdjOGJkZmM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-23T19:12:07Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-23T19:12:07Z"},"message":"OPENJPA-1116 Annotation Strategy not working.  Checking in testcases as code patch already committed in r808703 by Pinaki.  Patches contributed by Ashish Paliwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818212 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c76878bc9aab09ae7e535a029816e6a93dbf1fa1","url":"https://api.github.com/repos/apache/openjpa/git/trees/c76878bc9aab09ae7e535a029816e6a93dbf1fa1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85a609aa5d3ac8a83048e121526f3519d7c8bdfc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85a609aa5d3ac8a83048e121526f3519d7c8bdfc","html_url":"https://github.com/apache/openjpa/commit/85a609aa5d3ac8a83048e121526f3519d7c8bdfc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85a609aa5d3ac8a83048e121526f3519d7c8bdfc/comments","author":null,"committer":null,"parents":[{"sha":"2eeca2a8ac545585a51404c94e59c63559395f05","url":"https://api.github.com/repos/apache/openjpa/commits/2eeca2a8ac545585a51404c94e59c63559395f05","html_url":"https://github.com/apache/openjpa/commit/2eeca2a8ac545585a51404c94e59c63559395f05"}]},{"sha":"c5954aa4a5bf0bd0279fbbe689f7808d913e9055","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1OTU0YWE0YTViZjBiZDAyNzlmYmJlNjg5Zjc4MDhkOTEzZTkwNTU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-23T19:17:06Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-23T19:17:06Z"},"message":"OPENJPA-1116 Update PU name to reflect the test name\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818215 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cffd13b96cce60be87d1351f86df7505713f057","url":"https://api.github.com/repos/apache/openjpa/git/trees/5cffd13b96cce60be87d1351f86df7505713f057"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c5954aa4a5bf0bd0279fbbe689f7808d913e9055","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c5954aa4a5bf0bd0279fbbe689f7808d913e9055","html_url":"https://github.com/apache/openjpa/commit/c5954aa4a5bf0bd0279fbbe689f7808d913e9055","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c5954aa4a5bf0bd0279fbbe689f7808d913e9055/comments","author":null,"committer":null,"parents":[{"sha":"85a609aa5d3ac8a83048e121526f3519d7c8bdfc","url":"https://api.github.com/repos/apache/openjpa/commits/85a609aa5d3ac8a83048e121526f3519d7c8bdfc","html_url":"https://github.com/apache/openjpa/commit/85a609aa5d3ac8a83048e121526f3519d7c8bdfc"}]},{"sha":"5d3fd3a726aa8f8fb32998c83ed649da068d4ed3","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkM2ZkM2E3MjZhYThmOGZiMzI5OThjODNlZDY0OWRhMDY4ZDRlZDM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-24T01:06:50Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-24T01:06:50Z"},"message":"Update TestEJBQLFunction test to assert empty strings as null for the Oracle DB.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f671c6281dc88f33c6330339d955e4e0df4ef72","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f671c6281dc88f33c6330339d955e4e0df4ef72"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d3fd3a726aa8f8fb32998c83ed649da068d4ed3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d3fd3a726aa8f8fb32998c83ed649da068d4ed3","html_url":"https://github.com/apache/openjpa/commit/5d3fd3a726aa8f8fb32998c83ed649da068d4ed3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d3fd3a726aa8f8fb32998c83ed649da068d4ed3/comments","author":null,"committer":null,"parents":[{"sha":"c5954aa4a5bf0bd0279fbbe689f7808d913e9055","url":"https://api.github.com/repos/apache/openjpa/commits/c5954aa4a5bf0bd0279fbbe689f7808d913e9055","html_url":"https://github.com/apache/openjpa/commit/c5954aa4a5bf0bd0279fbbe689f7808d913e9055"}]},{"sha":"2a98f2b93d8d6de33cc3df514644adba6b0fafd3","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhOThmMmI5M2Q4ZDZkZTMzY2MzZGY1MTQ2NDRhZGJhNmIwZmFmZDM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-24T02:32:38Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-24T02:32:38Z"},"message":"Fix SQL comparison failures in bidi eager tests on Oracle by using standard sql92 join syntax.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818349 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e39e71686df4072e1ff2c10ba6a48a678ce17da","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e39e71686df4072e1ff2c10ba6a48a678ce17da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a98f2b93d8d6de33cc3df514644adba6b0fafd3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a98f2b93d8d6de33cc3df514644adba6b0fafd3","html_url":"https://github.com/apache/openjpa/commit/2a98f2b93d8d6de33cc3df514644adba6b0fafd3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a98f2b93d8d6de33cc3df514644adba6b0fafd3/comments","author":null,"committer":null,"parents":[{"sha":"5d3fd3a726aa8f8fb32998c83ed649da068d4ed3","url":"https://api.github.com/repos/apache/openjpa/commits/5d3fd3a726aa8f8fb32998c83ed649da068d4ed3","html_url":"https://github.com/apache/openjpa/commit/5d3fd3a726aa8f8fb32998c83ed649da068d4ed3"}]},{"sha":"65ff86ce24da411ddb7d910730d8df97a93eb808","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1ZmY4NmNlMjRkYTQxMWRkYjdkOTEwNzMwZDhkZjk3YTkzZWI4MDg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T07:08:35Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T07:08:35Z"},"message":"OPENJPA-1116: fix test case error by providing a unique table name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e62ae376157002d76deda8bddabcdac06773012","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e62ae376157002d76deda8bddabcdac06773012"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/65ff86ce24da411ddb7d910730d8df97a93eb808","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/65ff86ce24da411ddb7d910730d8df97a93eb808","html_url":"https://github.com/apache/openjpa/commit/65ff86ce24da411ddb7d910730d8df97a93eb808","comments_url":"https://api.github.com/repos/apache/openjpa/commits/65ff86ce24da411ddb7d910730d8df97a93eb808/comments","author":null,"committer":null,"parents":[{"sha":"2a98f2b93d8d6de33cc3df514644adba6b0fafd3","url":"https://api.github.com/repos/apache/openjpa/commits/2a98f2b93d8d6de33cc3df514644adba6b0fafd3","html_url":"https://github.com/apache/openjpa/commit/2a98f2b93d8d6de33cc3df514644adba6b0fafd3"}]},{"sha":"067a6f0ffb8d51201614adace89568473ad4147c","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2N2E2ZjBmZmI4ZDUxMjAxNjE0YWRhY2U4OTU2ODQ3M2FkNDE0N2M=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T09:00:12Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T09:00:12Z"},"message":"OPENJPA-1253: support non-default uni-directional one to many map using foreign key strategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818410 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da66aeb0cb9627f805f4a8798087476e022a8222","url":"https://api.github.com/repos/apache/openjpa/git/trees/da66aeb0cb9627f805f4a8798087476e022a8222"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/067a6f0ffb8d51201614adace89568473ad4147c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/067a6f0ffb8d51201614adace89568473ad4147c","html_url":"https://github.com/apache/openjpa/commit/067a6f0ffb8d51201614adace89568473ad4147c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/067a6f0ffb8d51201614adace89568473ad4147c/comments","author":null,"committer":null,"parents":[{"sha":"65ff86ce24da411ddb7d910730d8df97a93eb808","url":"https://api.github.com/repos/apache/openjpa/commits/65ff86ce24da411ddb7d910730d8df97a93eb808","html_url":"https://github.com/apache/openjpa/commit/65ff86ce24da411ddb7d910730d8df97a93eb808"}]},{"sha":"d8eadfe600d7f05d99ecd30d3604d18f96d8b114","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4ZWFkZmU2MDBkN2YwNWQ5OWVjZDMwZDM2MDRkMThmOTZkOGIxMTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-24T15:34:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-24T15:34:22Z"},"message":"OPENJPA-1116: fix test case error on some DBs by providing a unique table name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"113040211a187c2e6e90d10104be387295843c0c","url":"https://api.github.com/repos/apache/openjpa/git/trees/113040211a187c2e6e90d10104be387295843c0c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d8eadfe600d7f05d99ecd30d3604d18f96d8b114","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d8eadfe600d7f05d99ecd30d3604d18f96d8b114","html_url":"https://github.com/apache/openjpa/commit/d8eadfe600d7f05d99ecd30d3604d18f96d8b114","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d8eadfe600d7f05d99ecd30d3604d18f96d8b114/comments","author":null,"committer":null,"parents":[{"sha":"067a6f0ffb8d51201614adace89568473ad4147c","url":"https://api.github.com/repos/apache/openjpa/commits/067a6f0ffb8d51201614adace89568473ad4147c","html_url":"https://github.com/apache/openjpa/commit/067a6f0ffb8d51201614adace89568473ad4147c"}]},{"sha":"7d3497781c1a9660863e9eb10ada9c2ae107360e","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkMzQ5Nzc4MWMxYTk2NjA4NjNlOWViMTBhZGE5YzJhZTEwNzM2MGU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T16:12:09Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T16:12:09Z"},"message":"OPENJPA-1253: clean up code for uni-directional one-to-many Map using foreign key strategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818531 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e42ca31a4814f302b3a807f72a996a2917ae3e1e","url":"https://api.github.com/repos/apache/openjpa/git/trees/e42ca31a4814f302b3a807f72a996a2917ae3e1e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7d3497781c1a9660863e9eb10ada9c2ae107360e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7d3497781c1a9660863e9eb10ada9c2ae107360e","html_url":"https://github.com/apache/openjpa/commit/7d3497781c1a9660863e9eb10ada9c2ae107360e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7d3497781c1a9660863e9eb10ada9c2ae107360e/comments","author":null,"committer":null,"parents":[{"sha":"d8eadfe600d7f05d99ecd30d3604d18f96d8b114","url":"https://api.github.com/repos/apache/openjpa/commits/d8eadfe600d7f05d99ecd30d3604d18f96d8b114","html_url":"https://github.com/apache/openjpa/commit/d8eadfe600d7f05d99ecd30d3604d18f96d8b114"}]},{"sha":"fc69f929e924622928c899ce7c65e1de85ce4840","node_id":"MDY6Q29tbWl0MjA2MzY0OmZjNjlmOTI5ZTkyNDYyMjkyOGM4OTljZTdjNjVlMWRlODVjZTQ4NDA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-24T19:23:40Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-24T19:23:40Z"},"message":"OPENJPA-1327 Doc update for JPA2 JPQL Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818599 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35c34ef89a642b048526d7e12d1aaffad4bb9046","url":"https://api.github.com/repos/apache/openjpa/git/trees/35c34ef89a642b048526d7e12d1aaffad4bb9046"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fc69f929e924622928c899ce7c65e1de85ce4840","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fc69f929e924622928c899ce7c65e1de85ce4840","html_url":"https://github.com/apache/openjpa/commit/fc69f929e924622928c899ce7c65e1de85ce4840","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fc69f929e924622928c899ce7c65e1de85ce4840/comments","author":null,"committer":null,"parents":[{"sha":"7d3497781c1a9660863e9eb10ada9c2ae107360e","url":"https://api.github.com/repos/apache/openjpa/commits/7d3497781c1a9660863e9eb10ada9c2ae107360e","html_url":"https://github.com/apache/openjpa/commit/7d3497781c1a9660863e9eb10ada9c2ae107360e"}]},{"sha":"ef54e75107ffb98f144f86937a292330a11fb823","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmNTRlNzUxMDdmZmI5OGYxNDRmODY5MzdhMjkyMzMwYTExZmI4MjM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T20:26:04Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T20:26:04Z"},"message":"OPENJPA-1253: support bi-directional one-to-many map using join table strategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818616 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b01d78552e41c6ce690187c02970a0d3c3074a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b01d78552e41c6ce690187c02970a0d3c3074a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef54e75107ffb98f144f86937a292330a11fb823","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef54e75107ffb98f144f86937a292330a11fb823","html_url":"https://github.com/apache/openjpa/commit/ef54e75107ffb98f144f86937a292330a11fb823","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef54e75107ffb98f144f86937a292330a11fb823/comments","author":null,"committer":null,"parents":[{"sha":"fc69f929e924622928c899ce7c65e1de85ce4840","url":"https://api.github.com/repos/apache/openjpa/commits/fc69f929e924622928c899ce7c65e1de85ce4840","html_url":"https://github.com/apache/openjpa/commit/fc69f929e924622928c899ce7c65e1de85ce4840"}]},{"sha":"a6af0f35e20d1161bf1039d545aafbf50eb3117c","node_id":"MDY6Q29tbWl0MjA2MzY0OmE2YWYwZjM1ZTIwZDExNjFiZjEwMzlkNTQ1YWFmYmY1MGViMzExN2M=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-25T15:53:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-25T15:53:44Z"},"message":"OPENJPA-1116: fix test case error on non-Derby DB by adding CLEAR_TABLES\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a579a5f1608f2e552453255d697ffbffd4df88e","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a579a5f1608f2e552453255d697ffbffd4df88e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a6af0f35e20d1161bf1039d545aafbf50eb3117c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a6af0f35e20d1161bf1039d545aafbf50eb3117c","html_url":"https://github.com/apache/openjpa/commit/a6af0f35e20d1161bf1039d545aafbf50eb3117c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a6af0f35e20d1161bf1039d545aafbf50eb3117c/comments","author":null,"committer":null,"parents":[{"sha":"ef54e75107ffb98f144f86937a292330a11fb823","url":"https://api.github.com/repos/apache/openjpa/commits/ef54e75107ffb98f144f86937a292330a11fb823","html_url":"https://github.com/apache/openjpa/commit/ef54e75107ffb98f144f86937a292330a11fb823"}]},{"sha":"eb8abb81fc295e47521262bf7c297fda3540c4b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmViOGFiYjgxZmMyOTVlNDc1MjEyNjJiZjdjMjk3ZmRhMzU0MGM0YjU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-25T16:23:31Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-25T16:23:31Z"},"message":"OPENJPA-1116: try DROP_TABLES\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818909 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e0392c123f0149bfed1ea5ff27b46511035953b","url":"https://api.github.com/repos/apache/openjpa/git/trees/2e0392c123f0149bfed1ea5ff27b46511035953b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb8abb81fc295e47521262bf7c297fda3540c4b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb8abb81fc295e47521262bf7c297fda3540c4b5","html_url":"https://github.com/apache/openjpa/commit/eb8abb81fc295e47521262bf7c297fda3540c4b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb8abb81fc295e47521262bf7c297fda3540c4b5/comments","author":null,"committer":null,"parents":[{"sha":"a6af0f35e20d1161bf1039d545aafbf50eb3117c","url":"https://api.github.com/repos/apache/openjpa/commits/a6af0f35e20d1161bf1039d545aafbf50eb3117c","html_url":"https://github.com/apache/openjpa/commit/a6af0f35e20d1161bf1039d545aafbf50eb3117c"}]},{"sha":"9c3a7117a83a2e0035cb7d73a14aa42663187a4b","node_id":"MDY6Q29tbWl0MjA2MzY0OjljM2E3MTE3YTgzYTJlMDAzNWNiN2Q3M2ExNGFhNDI2NjMxODdhNGI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-25T17:45:49Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-25T17:45:49Z"},"message":"OPENJPA-859: Handle having relational info in mapping file and annotations. Patch contributed by Rick Curtis. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818928 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ca48a134208414393dcb8fb1fc03fcf56f7a630","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ca48a134208414393dcb8fb1fc03fcf56f7a630"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c3a7117a83a2e0035cb7d73a14aa42663187a4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c3a7117a83a2e0035cb7d73a14aa42663187a4b","html_url":"https://github.com/apache/openjpa/commit/9c3a7117a83a2e0035cb7d73a14aa42663187a4b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c3a7117a83a2e0035cb7d73a14aa42663187a4b/comments","author":null,"committer":null,"parents":[{"sha":"eb8abb81fc295e47521262bf7c297fda3540c4b5","url":"https://api.github.com/repos/apache/openjpa/commits/eb8abb81fc295e47521262bf7c297fda3540c4b5","html_url":"https://github.com/apache/openjpa/commit/eb8abb81fc295e47521262bf7c297fda3540c4b5"}]},{"sha":"22391c91333a27e49dcbe9789bc7e456d8930161","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyMzkxYzkxMzMzYTI3ZTQ5ZGNiZTk3ODliYzdlNDU2ZDg5MzAxNjE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-25T19:17:14Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-25T19:17:14Z"},"message":"OPENJPA-1116:  Cleanup via SynchronizeMappings SchemaAction directive\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818960 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb39f06683b52c5e03aa30a31c0720e178f3e042","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb39f06683b52c5e03aa30a31c0720e178f3e042"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/22391c91333a27e49dcbe9789bc7e456d8930161","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/22391c91333a27e49dcbe9789bc7e456d8930161","html_url":"https://github.com/apache/openjpa/commit/22391c91333a27e49dcbe9789bc7e456d8930161","comments_url":"https://api.github.com/repos/apache/openjpa/commits/22391c91333a27e49dcbe9789bc7e456d8930161/comments","author":null,"committer":null,"parents":[{"sha":"9c3a7117a83a2e0035cb7d73a14aa42663187a4b","url":"https://api.github.com/repos/apache/openjpa/commits/9c3a7117a83a2e0035cb7d73a14aa42663187a4b","html_url":"https://github.com/apache/openjpa/commit/9c3a7117a83a2e0035cb7d73a14aa42663187a4b"}]},{"sha":"cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhZmJkNTU5ZDJiNTZhOWM3NTZlMGE1YmY5ZTdhM2U2NDM0MDNjMjU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-25T20:15:12Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-25T20:15:12Z"},"message":"OPENJPA-1115 Targeted delimited id tests for specific DB platforms based on schema support/usage.  Includes test updates contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8d77cda2aa6a3b0ff92e3a9b71e6962c3ac4e27c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8d77cda2aa6a3b0ff92e3a9b71e6962c3ac4e27c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","html_url":"https://github.com/apache/openjpa/commit/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/comments","author":null,"committer":null,"parents":[{"sha":"22391c91333a27e49dcbe9789bc7e456d8930161","url":"https://api.github.com/repos/apache/openjpa/commits/22391c91333a27e49dcbe9789bc7e456d8930161","html_url":"https://github.com/apache/openjpa/commit/22391c91333a27e49dcbe9789bc7e456d8930161"}]},{"sha":"dc3c2c43ed849779f7edeaabce67f1cb1c60d735","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjM2MyYzQzZWQ4NDk3NzlmN2VkZWFhYmNlNjdmMWNiMWM2MGQ3MzU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-25T21:15:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-25T21:15:22Z"},"message":"OPENJPA-1116 revert back to CLEAR_TABLES for speed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819012 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"034681d34dc201362f13657edf561e39f6380f19","url":"https://api.github.com/repos/apache/openjpa/git/trees/034681d34dc201362f13657edf561e39f6380f19"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc3c2c43ed849779f7edeaabce67f1cb1c60d735","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc3c2c43ed849779f7edeaabce67f1cb1c60d735","html_url":"https://github.com/apache/openjpa/commit/dc3c2c43ed849779f7edeaabce67f1cb1c60d735","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc3c2c43ed849779f7edeaabce67f1cb1c60d735/comments","author":null,"committer":null,"parents":[{"sha":"cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","url":"https://api.github.com/repos/apache/openjpa/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","html_url":"https://github.com/apache/openjpa/commit/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25"}]},{"sha":"5f03f77b5c07befba4c4545d1ec91023ef76e3b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmMDNmNzdiNWMwN2JlZmJhNGM0NTQ1ZDFlYzkxMDIzZWY3NmUzYjU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-26T01:12:53Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-26T01:12:53Z"},"message":"OPENJPA-1115 Fix DB2 failure in schema test.  Disable non-schema tests on DB2 until DB2 cleanup related exception is resolved.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819082 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d6f8b531d0dd354e1110357c19d01a12645d392","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d6f8b531d0dd354e1110357c19d01a12645d392"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5f03f77b5c07befba4c4545d1ec91023ef76e3b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5f03f77b5c07befba4c4545d1ec91023ef76e3b5","html_url":"https://github.com/apache/openjpa/commit/5f03f77b5c07befba4c4545d1ec91023ef76e3b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5f03f77b5c07befba4c4545d1ec91023ef76e3b5/comments","author":null,"committer":null,"parents":[{"sha":"dc3c2c43ed849779f7edeaabce67f1cb1c60d735","url":"https://api.github.com/repos/apache/openjpa/commits/dc3c2c43ed849779f7edeaabce67f1cb1c60d735","html_url":"https://github.com/apache/openjpa/commit/dc3c2c43ed849779f7edeaabce67f1cb1c60d735"}]},{"sha":"28573bfcfd38c7f08c15094d54f3769de7f60ea5","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4NTczYmZjZmQzOGM3ZjA4YzE1MDk0ZDU0ZjM3NjlkZTdmNjBlYTU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-26T05:26:35Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-26T05:26:35Z"},"message":"OPENJPA-1115 Allow schema-less delimited id tests to fail until intermittent cleanup issue is resolved.  Removed duplicate test case and unnecessary em creation in test framework database support methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819093 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7ee7ff71592101e8b25e7c4effe9385661eba4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7ee7ff71592101e8b25e7c4effe9385661eba4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5","html_url":"https://github.com/apache/openjpa/commit/28573bfcfd38c7f08c15094d54f3769de7f60ea5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5/comments","author":null,"committer":null,"parents":[{"sha":"5f03f77b5c07befba4c4545d1ec91023ef76e3b5","url":"https://api.github.com/repos/apache/openjpa/commits/5f03f77b5c07befba4c4545d1ec91023ef76e3b5","html_url":"https://github.com/apache/openjpa/commit/5f03f77b5c07befba4c4545d1ec91023ef76e3b5"}]},{"sha":"9f29552e858bceac4e69e11547db9118d228461d","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmMjk1NTJlODU4YmNlYWM0ZTY5ZTExNTQ3ZGI5MTE4ZDIyODQ2MWQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T13:42:19Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T13:42:19Z"},"message":"OPENJPA-1253: support foreign key strategy for uni-directional one to many mapping using Map with entity as the Map key.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819139 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb5603263b04da45d3066816a0e37e8affbb2281","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb5603263b04da45d3066816a0e37e8affbb2281"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f29552e858bceac4e69e11547db9118d228461d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f29552e858bceac4e69e11547db9118d228461d","html_url":"https://github.com/apache/openjpa/commit/9f29552e858bceac4e69e11547db9118d228461d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f29552e858bceac4e69e11547db9118d228461d/comments","author":null,"committer":null,"parents":[{"sha":"28573bfcfd38c7f08c15094d54f3769de7f60ea5","url":"https://api.github.com/repos/apache/openjpa/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5","html_url":"https://github.com/apache/openjpa/commit/28573bfcfd38c7f08c15094d54f3769de7f60ea5"}]},{"sha":"9eeb4b2fbd89570410fcfc165640852353b6c6d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjllZWI0YjJmYmQ4OTU3MDQxMGZjZmMxNjU2NDA4NTIzNTNiNmM2ZDc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T16:16:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T16:16:32Z"},"message":"OPENJPA-1253: check in test case of join table strategy for bi-directional one-to-many using Map with entity as map key\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819162 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"73ae4e60fc56372d8dc3add159eab02a31c1caed","url":"https://api.github.com/repos/apache/openjpa/git/trees/73ae4e60fc56372d8dc3add159eab02a31c1caed"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9eeb4b2fbd89570410fcfc165640852353b6c6d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9eeb4b2fbd89570410fcfc165640852353b6c6d7","html_url":"https://github.com/apache/openjpa/commit/9eeb4b2fbd89570410fcfc165640852353b6c6d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9eeb4b2fbd89570410fcfc165640852353b6c6d7/comments","author":null,"committer":null,"parents":[{"sha":"9f29552e858bceac4e69e11547db9118d228461d","url":"https://api.github.com/repos/apache/openjpa/commits/9f29552e858bceac4e69e11547db9118d228461d","html_url":"https://github.com/apache/openjpa/commit/9f29552e858bceac4e69e11547db9118d228461d"}]},{"sha":"bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiM2UxYTUxODVkYWRlNjdmZjRlN2UxYWI2YTNhM2E2MjU1YmYzYzQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T16:17:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T16:17:32Z"},"message":"OPENJPA-1253: check in test case of join table strategy for bi-directional one-to-many using Map with entity as map key\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819163 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"224fc6062cd5ef56b5eb2d089c1d23657422d638","url":"https://api.github.com/repos/apache/openjpa/git/trees/224fc6062cd5ef56b5eb2d089c1d23657422d638"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","html_url":"https://github.com/apache/openjpa/commit/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4/comments","author":null,"committer":null,"parents":[{"sha":"9eeb4b2fbd89570410fcfc165640852353b6c6d7","url":"https://api.github.com/repos/apache/openjpa/commits/9eeb4b2fbd89570410fcfc165640852353b6c6d7","html_url":"https://github.com/apache/openjpa/commit/9eeb4b2fbd89570410fcfc165640852353b6c6d7"}]},{"sha":"363f7f6e3f16bf0693fce192683685894946e252","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2M2Y3ZjZlM2YxNmJmMDY5M2ZjZTE5MjY4MzY4NTg5NDk0NmUyNTI=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-27T09:35:38Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-27T09:35:38Z"},"message":"OPENJPA-1248: Remove OracleDictionary.insertBlobForStreamingLoad(Row row, Column col, Object ob) - it was dead code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819280 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b0eb59bb0c5478b72afd63bc045556b89555458","url":"https://api.github.com/repos/apache/openjpa/git/trees/1b0eb59bb0c5478b72afd63bc045556b89555458"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/363f7f6e3f16bf0693fce192683685894946e252","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/363f7f6e3f16bf0693fce192683685894946e252","html_url":"https://github.com/apache/openjpa/commit/363f7f6e3f16bf0693fce192683685894946e252","comments_url":"https://api.github.com/repos/apache/openjpa/commits/363f7f6e3f16bf0693fce192683685894946e252/comments","author":null,"committer":null,"parents":[{"sha":"bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","url":"https://api.github.com/repos/apache/openjpa/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","html_url":"https://github.com/apache/openjpa/commit/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4"}]},{"sha":"174f2af0ded2b32e949724b0027263a99d484960","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3NGYyYWYwZGVkMmIzMmU5NDk3MjRiMDAyNzI2M2E5OWQ0ODQ5NjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:23:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:23:36Z"},"message":"OPENJPA-1253:\nSetting svn:eol-style = native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819549 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5269d563ae4401a9cf393e971daa0c41e4bb9373","url":"https://api.github.com/repos/apache/openjpa/git/trees/5269d563ae4401a9cf393e971daa0c41e4bb9373"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/174f2af0ded2b32e949724b0027263a99d484960","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/174f2af0ded2b32e949724b0027263a99d484960","html_url":"https://github.com/apache/openjpa/commit/174f2af0ded2b32e949724b0027263a99d484960","comments_url":"https://api.github.com/repos/apache/openjpa/commits/174f2af0ded2b32e949724b0027263a99d484960/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"363f7f6e3f16bf0693fce192683685894946e252","url":"https://api.github.com/repos/apache/openjpa/commits/363f7f6e3f16bf0693fce192683685894946e252","html_url":"https://github.com/apache/openjpa/commit/363f7f6e3f16bf0693fce192683685894946e252"}]},{"sha":"562b4942df21464b85b1a040019dde5936c06f0e","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2MmI0OTQyZGYyMTQ2NGI4NWIxYTA0MDAxOWRkZTU5MzZjMDZmMGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:36:49Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:36:49Z"},"message":"OPENJPA-1115:\nSetting svn:eol-style native on new files\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6466e8b0ef6e8f2c55c2d1f652177a2ec342ee76","url":"https://api.github.com/repos/apache/openjpa/git/trees/6466e8b0ef6e8f2c55c2d1f652177a2ec342ee76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/562b4942df21464b85b1a040019dde5936c06f0e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/562b4942df21464b85b1a040019dde5936c06f0e","html_url":"https://github.com/apache/openjpa/commit/562b4942df21464b85b1a040019dde5936c06f0e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/562b4942df21464b85b1a040019dde5936c06f0e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"174f2af0ded2b32e949724b0027263a99d484960","url":"https://api.github.com/repos/apache/openjpa/commits/174f2af0ded2b32e949724b0027263a99d484960","html_url":"https://github.com/apache/openjpa/commit/174f2af0ded2b32e949724b0027263a99d484960"}]},{"sha":"450f8352f856cd49bbf53525502db99821654441","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1MGY4MzUyZjg1NmNkNDliYmY1MzUyNTUwMmRiOTk4MjE2NTQ0NDE=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-28T17:37:54Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-28T17:37:54Z"},"message":"OPENJPA-1153: Speed tests up by using only needed entities rather than all entities from persistence.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"237d049b76a2bf005dbfa85fe2ef630a9dede698","url":"https://api.github.com/repos/apache/openjpa/git/trees/237d049b76a2bf005dbfa85fe2ef630a9dede698"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/450f8352f856cd49bbf53525502db99821654441","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/450f8352f856cd49bbf53525502db99821654441","html_url":"https://github.com/apache/openjpa/commit/450f8352f856cd49bbf53525502db99821654441","comments_url":"https://api.github.com/repos/apache/openjpa/commits/450f8352f856cd49bbf53525502db99821654441/comments","author":null,"committer":null,"parents":[{"sha":"562b4942df21464b85b1a040019dde5936c06f0e","url":"https://api.github.com/repos/apache/openjpa/commits/562b4942df21464b85b1a040019dde5936c06f0e","html_url":"https://github.com/apache/openjpa/commit/562b4942df21464b85b1a040019dde5936c06f0e"}]},{"sha":"9f24d10ecdd5c9286f22e363852e84f116d0f994","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmMjRkMTBlY2RkNWM5Mjg2ZjIyZTM2Mzg1MmU4NGYxMTZkMGY5OTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-28T23:51:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-28T23:51:33Z"},"message":"OPENJPA-1050: Use generics for DataCache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819771 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37c251f01f9afbee09513168c17d164a8f0067d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/37c251f01f9afbee09513168c17d164a8f0067d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f24d10ecdd5c9286f22e363852e84f116d0f994","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f24d10ecdd5c9286f22e363852e84f116d0f994","html_url":"https://github.com/apache/openjpa/commit/9f24d10ecdd5c9286f22e363852e84f116d0f994","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f24d10ecdd5c9286f22e363852e84f116d0f994/comments","author":null,"committer":null,"parents":[{"sha":"450f8352f856cd49bbf53525502db99821654441","url":"https://api.github.com/repos/apache/openjpa/commits/450f8352f856cd49bbf53525502db99821654441","html_url":"https://github.com/apache/openjpa/commit/450f8352f856cd49bbf53525502db99821654441"}]},{"sha":"9d37d74a105f2a97061e127791555495ccdc055b","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkMzdkNzRhMTA1ZjJhOTcwNjFlMTI3NzkxNTU1NDk1Y2NkYzA1NWI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-29T01:35:39Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-29T01:35:39Z"},"message":"OPENJPA-1327 Doc update for JPA2 JPQL Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819794 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2df76975ba96dc42cbca991829b7292b25780f84","url":"https://api.github.com/repos/apache/openjpa/git/trees/2df76975ba96dc42cbca991829b7292b25780f84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9d37d74a105f2a97061e127791555495ccdc055b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9d37d74a105f2a97061e127791555495ccdc055b","html_url":"https://github.com/apache/openjpa/commit/9d37d74a105f2a97061e127791555495ccdc055b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9d37d74a105f2a97061e127791555495ccdc055b/comments","author":null,"committer":null,"parents":[{"sha":"9f24d10ecdd5c9286f22e363852e84f116d0f994","url":"https://api.github.com/repos/apache/openjpa/commits/9f24d10ecdd5c9286f22e363852e84f116d0f994","html_url":"https://github.com/apache/openjpa/commit/9f24d10ecdd5c9286f22e363852e84f116d0f994"}]},{"sha":"baf800f3b02d6abbd6c3849191511ffdd6b9e0d1","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhZjgwMGYzYjAyZDZhYmJkNmMzODQ5MTkxNTExZmZkZDZiOWUwZDE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-29T02:43:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-29T02:43:32Z"},"message":"OPENJPA-1050: Use generics for BrokerFactory\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819800 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf6ca928d3bdb5b568870f92ba433f608fd8092c","url":"https://api.github.com/repos/apache/openjpa/git/trees/cf6ca928d3bdb5b568870f92ba433f608fd8092c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/baf800f3b02d6abbd6c3849191511ffdd6b9e0d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/baf800f3b02d6abbd6c3849191511ffdd6b9e0d1","html_url":"https://github.com/apache/openjpa/commit/baf800f3b02d6abbd6c3849191511ffdd6b9e0d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/baf800f3b02d6abbd6c3849191511ffdd6b9e0d1/comments","author":null,"committer":null,"parents":[{"sha":"9d37d74a105f2a97061e127791555495ccdc055b","url":"https://api.github.com/repos/apache/openjpa/commits/9d37d74a105f2a97061e127791555495ccdc055b","html_url":"https://github.com/apache/openjpa/commit/9d37d74a105f2a97061e127791555495ccdc055b"}]},{"sha":"7d6ccb108c5fdd31bf1a89441927ce8ff756a840","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkNmNjYjEwOGM1ZmRkMzFiZjFhODk0NDE5MjdjZThmZjc1NmE4NDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-29T02:43:39Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-29T02:43:39Z"},"message":"OPENJPA-1050: Use generics for Filters\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819801 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66675dae2ed02779280626be5592d160fcf92349","url":"https://api.github.com/repos/apache/openjpa/git/trees/66675dae2ed02779280626be5592d160fcf92349"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7d6ccb108c5fdd31bf1a89441927ce8ff756a840","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7d6ccb108c5fdd31bf1a89441927ce8ff756a840","html_url":"https://github.com/apache/openjpa/commit/7d6ccb108c5fdd31bf1a89441927ce8ff756a840","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7d6ccb108c5fdd31bf1a89441927ce8ff756a840/comments","author":null,"committer":null,"parents":[{"sha":"baf800f3b02d6abbd6c3849191511ffdd6b9e0d1","url":"https://api.github.com/repos/apache/openjpa/commits/baf800f3b02d6abbd6c3849191511ffdd6b9e0d1","html_url":"https://github.com/apache/openjpa/commit/baf800f3b02d6abbd6c3849191511ffdd6b9e0d1"}]},{"sha":"c8d1003612cd9845c5e6df4f2c27c10d12c02dae","node_id":"MDY6Q29tbWl0MjA2MzY0OmM4ZDEwMDM2MTJjZDk4NDVjNWU2ZGY0ZjJjMjdjMTBkMTJjMDJkYWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-29T03:31:34Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-29T03:31:34Z"},"message":"OPENJPA-1253: refactoring the checking of non-default mapping to AbstractFieldStrategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819822 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"abde3225a123cae75c4b0624101363fe4e64f10e","url":"https://api.github.com/repos/apache/openjpa/git/trees/abde3225a123cae75c4b0624101363fe4e64f10e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c8d1003612cd9845c5e6df4f2c27c10d12c02dae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c8d1003612cd9845c5e6df4f2c27c10d12c02dae","html_url":"https://github.com/apache/openjpa/commit/c8d1003612cd9845c5e6df4f2c27c10d12c02dae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c8d1003612cd9845c5e6df4f2c27c10d12c02dae/comments","author":null,"committer":null,"parents":[{"sha":"7d6ccb108c5fdd31bf1a89441927ce8ff756a840","url":"https://api.github.com/repos/apache/openjpa/commits/7d6ccb108c5fdd31bf1a89441927ce8ff756a840","html_url":"https://github.com/apache/openjpa/commit/7d6ccb108c5fdd31bf1a89441927ce8ff756a840"}]},{"sha":"c06481b4527a8e6903ebe62df9c040171435fbf5","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwNjQ4MWI0NTI3YThlNjkwM2ViZTYyZGY5YzA0MDE3MTQzNWZiZjU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-29T18:12:15Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-29T18:12:15Z"},"message":"OPENJPA-1224. Updated DBDictionary and AbstractDB2Dictionary to properly support java.math.BigDecimal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820050 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d78a111d897d50a93c92ccd82f1a034735f1c6e","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d78a111d897d50a93c92ccd82f1a034735f1c6e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c06481b4527a8e6903ebe62df9c040171435fbf5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c06481b4527a8e6903ebe62df9c040171435fbf5","html_url":"https://github.com/apache/openjpa/commit/c06481b4527a8e6903ebe62df9c040171435fbf5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c06481b4527a8e6903ebe62df9c040171435fbf5/comments","author":null,"committer":null,"parents":[{"sha":"c8d1003612cd9845c5e6df4f2c27c10d12c02dae","url":"https://api.github.com/repos/apache/openjpa/commits/c8d1003612cd9845c5e6df4f2c27c10d12c02dae","html_url":"https://github.com/apache/openjpa/commit/c8d1003612cd9845c5e6df4f2c27c10d12c02dae"}]},{"sha":"529bd3a876723a7af1f09aeb2ddf082708c2c841","node_id":"MDY6Q29tbWl0MjA2MzY0OjUyOWJkM2E4NzY3MjNhN2FmMWYwOWFlYjJkZGYwODI3MDhjMmM4NDE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-30T15:47:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-30T15:47:45Z"},"message":"OPENJPA-1276: Compound selection, JOIN clause rendering\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820307 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"796852a21f10b70ed9c78416d172863e7eb683e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/796852a21f10b70ed9c78416d172863e7eb683e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/529bd3a876723a7af1f09aeb2ddf082708c2c841","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/529bd3a876723a7af1f09aeb2ddf082708c2c841","html_url":"https://github.com/apache/openjpa/commit/529bd3a876723a7af1f09aeb2ddf082708c2c841","comments_url":"https://api.github.com/repos/apache/openjpa/commits/529bd3a876723a7af1f09aeb2ddf082708c2c841/comments","author":null,"committer":null,"parents":[{"sha":"c06481b4527a8e6903ebe62df9c040171435fbf5","url":"https://api.github.com/repos/apache/openjpa/commits/c06481b4527a8e6903ebe62df9c040171435fbf5","html_url":"https://github.com/apache/openjpa/commit/c06481b4527a8e6903ebe62df9c040171435fbf5"}]},{"sha":"02471ca7e75ee9360f249f67e255cd18e45c943f","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNDcxY2E3ZTc1ZWU5MzYwZjI0OWY2N2UyNTVjZDE4ZTQ1Yzk0M2Y=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T20:49:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T20:49:09Z"},"message":"OPENJPA-1229 Reworked Persistence.createEMF() exception handling in the geronimo-jpa2 spec api (PFD2), which wraps all exceptions in a PersistenceException and can now return multiple provider exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820440 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cefc63f2786a89bd5f7f4e4de4727c759b424622","url":"https://api.github.com/repos/apache/openjpa/git/trees/cefc63f2786a89bd5f7f4e4de4727c759b424622"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/02471ca7e75ee9360f249f67e255cd18e45c943f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/02471ca7e75ee9360f249f67e255cd18e45c943f","html_url":"https://github.com/apache/openjpa/commit/02471ca7e75ee9360f249f67e255cd18e45c943f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/02471ca7e75ee9360f249f67e255cd18e45c943f/comments","author":null,"committer":null,"parents":[{"sha":"529bd3a876723a7af1f09aeb2ddf082708c2c841","url":"https://api.github.com/repos/apache/openjpa/commits/529bd3a876723a7af1f09aeb2ddf082708c2c841","html_url":"https://github.com/apache/openjpa/commit/529bd3a876723a7af1f09aeb2ddf082708c2c841"}]},{"sha":"a56643889f0837b549268eb3b98d9d6491eeed1b","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1NjY0Mzg4OWYwODM3YjU0OTI2OGViM2I5OGQ5ZDY0OTFlZWVkMWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T21:36:30Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T21:36:30Z"},"message":"OPENJPA-1229 Update to geronimo-validation 1.0-CR5-SNAPSHOT while waiting for the release vote\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820463 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"775b77df080f0c020768f356e3272ab80082ec61","url":"https://api.github.com/repos/apache/openjpa/git/trees/775b77df080f0c020768f356e3272ab80082ec61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a56643889f0837b549268eb3b98d9d6491eeed1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a56643889f0837b549268eb3b98d9d6491eeed1b","html_url":"https://github.com/apache/openjpa/commit/a56643889f0837b549268eb3b98d9d6491eeed1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a56643889f0837b549268eb3b98d9d6491eeed1b/comments","author":null,"committer":null,"parents":[{"sha":"02471ca7e75ee9360f249f67e255cd18e45c943f","url":"https://api.github.com/repos/apache/openjpa/commits/02471ca7e75ee9360f249f67e255cd18e45c943f","html_url":"https://github.com/apache/openjpa/commit/02471ca7e75ee9360f249f67e255cd18e45c943f"}]},{"sha":"794e26d721bd6a34f48b0a3646ece9b7de8cf427","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5NGUyNmQ3MjFiZDZhMzRmNDhiMGEzNjQ2ZWNlOWI3ZGU4Y2Y0Mjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T22:02:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T22:02:02Z"},"message":"OPENJPA-1229 Use geronimo specs being voted upon from the staging repo until they are released\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94f772eef2beb4305b5a25bcf408b93282c88141","url":"https://api.github.com/repos/apache/openjpa/git/trees/94f772eef2beb4305b5a25bcf408b93282c88141"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/794e26d721bd6a34f48b0a3646ece9b7de8cf427","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/794e26d721bd6a34f48b0a3646ece9b7de8cf427","html_url":"https://github.com/apache/openjpa/commit/794e26d721bd6a34f48b0a3646ece9b7de8cf427","comments_url":"https://api.github.com/repos/apache/openjpa/commits/794e26d721bd6a34f48b0a3646ece9b7de8cf427/comments","author":null,"committer":null,"parents":[{"sha":"a56643889f0837b549268eb3b98d9d6491eeed1b","url":"https://api.github.com/repos/apache/openjpa/commits/a56643889f0837b549268eb3b98d9d6491eeed1b","html_url":"https://github.com/apache/openjpa/commit/a56643889f0837b549268eb3b98d9d6491eeed1b"}]},{"sha":"797de03a1097401bd08b3befa0fe7c5bd506b6ed","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5N2RlMDNhMTA5NzQwMWJkMDhiM2JlZmEwZmU3YzViZDUwNmI2ZWQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-01T15:19:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-01T15:19:10Z"},"message":"OPENJPA-1229 Update NOTICE files to match new ASF/Sun agreement for releasing early access specs.  Also point to new geronimo-staging-017 to pickup latest spec releases under vote with updated notices.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820684 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"18dafef17edd7b31f71290e2a411bacf2df628d4","url":"https://api.github.com/repos/apache/openjpa/git/trees/18dafef17edd7b31f71290e2a411bacf2df628d4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/797de03a1097401bd08b3befa0fe7c5bd506b6ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/797de03a1097401bd08b3befa0fe7c5bd506b6ed","html_url":"https://github.com/apache/openjpa/commit/797de03a1097401bd08b3befa0fe7c5bd506b6ed","comments_url":"https://api.github.com/repos/apache/openjpa/commits/797de03a1097401bd08b3befa0fe7c5bd506b6ed/comments","author":null,"committer":null,"parents":[{"sha":"794e26d721bd6a34f48b0a3646ece9b7de8cf427","url":"https://api.github.com/repos/apache/openjpa/commits/794e26d721bd6a34f48b0a3646ece9b7de8cf427","html_url":"https://github.com/apache/openjpa/commit/794e26d721bd6a34f48b0a3646ece9b7de8cf427"}]},{"sha":"7f833b7b76767e57b52b44c594c4b3b758e9300f","node_id":"MDY6Q29tbWl0MjA2MzY0OjdmODMzYjdiNzY3NjdlNTdiNTJiNDRjNTk0YzRiM2I3NThlOTMwMGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-01T15:43:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-01T15:43:56Z"},"message":"Adding config property documentation for DataCacheMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820693 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7e7f50d692d0e0d93962270db58b6a28f799056c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7e7f50d692d0e0d93962270db58b6a28f799056c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7f833b7b76767e57b52b44c594c4b3b758e9300f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7f833b7b76767e57b52b44c594c4b3b758e9300f","html_url":"https://github.com/apache/openjpa/commit/7f833b7b76767e57b52b44c594c4b3b758e9300f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7f833b7b76767e57b52b44c594c4b3b758e9300f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"797de03a1097401bd08b3befa0fe7c5bd506b6ed","url":"https://api.github.com/repos/apache/openjpa/commits/797de03a1097401bd08b3befa0fe7c5bd506b6ed","html_url":"https://github.com/apache/openjpa/commit/797de03a1097401bd08b3befa0fe7c5bd506b6ed"}]},{"sha":"6119ff76b9b1bed7baa42f554fc73da4ba54176b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxMTlmZjc2YjliMWJlZDdiYWE0MmY1NTRmYzczZGE0YmE1NDE3NmI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-01T16:12:41Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-01T16:12:41Z"},"message":"alphabetizing datacachemode documentation and fixing default value\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820700 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee0bf93cf7eb1ffef25a25ee0dfd20726587cd6a","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee0bf93cf7eb1ffef25a25ee0dfd20726587cd6a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6119ff76b9b1bed7baa42f554fc73da4ba54176b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6119ff76b9b1bed7baa42f554fc73da4ba54176b","html_url":"https://github.com/apache/openjpa/commit/6119ff76b9b1bed7baa42f554fc73da4ba54176b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6119ff76b9b1bed7baa42f554fc73da4ba54176b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f833b7b76767e57b52b44c594c4b3b758e9300f","url":"https://api.github.com/repos/apache/openjpa/commits/7f833b7b76767e57b52b44c594c4b3b758e9300f","html_url":"https://github.com/apache/openjpa/commit/7f833b7b76767e57b52b44c594c4b3b758e9300f"}]},{"sha":"99844b6b1f3d13c07bdb6223d2edc2f47320aad2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5ODQ0YjZiMWYzZDEzYzA3YmRiNjIyM2QyZWRjMmY0NzMyMGFhZDI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T16:43:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T16:43:19Z"},"message":"OPENJPA-1332: Make some Value \"private\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820712 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1ba554f334c3c09531659b93a2d2eb2392a6d7c","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1ba554f334c3c09531659b93a2d2eb2392a6d7c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","html_url":"https://github.com/apache/openjpa/commit/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/comments","author":null,"committer":null,"parents":[{"sha":"6119ff76b9b1bed7baa42f554fc73da4ba54176b","url":"https://api.github.com/repos/apache/openjpa/commits/6119ff76b9b1bed7baa42f554fc73da4ba54176b","html_url":"https://github.com/apache/openjpa/commit/6119ff76b9b1bed7baa42f554fc73da4ba54176b"}]},{"sha":"c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyYTcyMzgxNmJkZGIwNzMwYzNmN2M0NGU2ZDE1ZmExZmQ0MTg5ZDE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T18:49:05Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T18:49:05Z"},"message":"OPENJPA-1330: bi-directional many-to-one/one-to-many using join table strategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820748 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c1056941d0e4ebc0bc17c81cd8f8439b227f113","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c1056941d0e4ebc0bc17c81cd8f8439b227f113"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","html_url":"https://github.com/apache/openjpa/commit/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/comments","author":null,"committer":null,"parents":[{"sha":"99844b6b1f3d13c07bdb6223d2edc2f47320aad2","url":"https://api.github.com/repos/apache/openjpa/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","html_url":"https://github.com/apache/openjpa/commit/99844b6b1f3d13c07bdb6223d2edc2f47320aad2"}]},{"sha":"30bb14da07e162e0e8f7959f6ab83dfba46ae86f","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwYmIxNGRhMDdlMTYyZTBlOGY3OTU5ZjZhYjgzZGZiYTQ2YWU4NmY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-01T20:40:36Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-01T20:40:36Z"},"message":"OPENJPA-1229 sync up rat-maven-plugin config settings across all profiles\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820778 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3be9ea51b0cee0be17131dda8f61453429c3d0a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/3be9ea51b0cee0be17131dda8f61453429c3d0a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/30bb14da07e162e0e8f7959f6ab83dfba46ae86f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/30bb14da07e162e0e8f7959f6ab83dfba46ae86f","html_url":"https://github.com/apache/openjpa/commit/30bb14da07e162e0e8f7959f6ab83dfba46ae86f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/30bb14da07e162e0e8f7959f6ab83dfba46ae86f/comments","author":null,"committer":null,"parents":[{"sha":"c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","url":"https://api.github.com/repos/apache/openjpa/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","html_url":"https://github.com/apache/openjpa/commit/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1"}]},{"sha":"fa02d2a5faea007b48a3158808de79c584d03574","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhMDJkMmE1ZmFlYTAwN2I0OGEzMTU4ODA4ZGU3OWM1ODRkMDM1NzQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-01T20:44:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-01T20:44:24Z"},"message":"OPENJPA-1229 get rat-maven-plugin passing again, as any file included in the source distribution has to pass rat:check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820779 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"945e6a9d18460882e101f3fbb69feac96aae8102","url":"https://api.github.com/repos/apache/openjpa/git/trees/945e6a9d18460882e101f3fbb69feac96aae8102"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fa02d2a5faea007b48a3158808de79c584d03574","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fa02d2a5faea007b48a3158808de79c584d03574","html_url":"https://github.com/apache/openjpa/commit/fa02d2a5faea007b48a3158808de79c584d03574","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fa02d2a5faea007b48a3158808de79c584d03574/comments","author":null,"committer":null,"parents":[{"sha":"30bb14da07e162e0e8f7959f6ab83dfba46ae86f","url":"https://api.github.com/repos/apache/openjpa/commits/30bb14da07e162e0e8f7959f6ab83dfba46ae86f","html_url":"https://github.com/apache/openjpa/commit/30bb14da07e162e0e8f7959f6ab83dfba46ae86f"}]},{"sha":"1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmZjU4MTBlOWU5OGRiY2Q5Y2NiOWNiZmIyNmUxMTk2YmU4NzM3YTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T21:30:39Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T21:30:39Z"},"message":"OPENJPA-250: Correct MetaDataRepository plug-in configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820804 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"757b0f44d6bea0349dd76b63cfb2195e08f53087","url":"https://api.github.com/repos/apache/openjpa/git/trees/757b0f44d6bea0349dd76b63cfb2195e08f53087"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","html_url":"https://github.com/apache/openjpa/commit/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/comments","author":null,"committer":null,"parents":[{"sha":"fa02d2a5faea007b48a3158808de79c584d03574","url":"https://api.github.com/repos/apache/openjpa/commits/fa02d2a5faea007b48a3158808de79c584d03574","html_url":"https://github.com/apache/openjpa/commit/fa02d2a5faea007b48a3158808de79c584d03574"}]},{"sha":"c14838950cd361f54f9ca913c396df570e368b1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxNDgzODk1MGNkMzYxZjU0ZjljYTkxM2MzOTZkZjU3MGUzNjhiMWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T23:18:56Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T23:18:56Z"},"message":"OPENJPA-1330: support join table strategy for uni-directional many-to-one relation and uni-/bi-directional one-to-one relation. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820839 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98b162d1df1e1f129b7c4204cf08e09438ad3d84","url":"https://api.github.com/repos/apache/openjpa/git/trees/98b162d1df1e1f129b7c4204cf08e09438ad3d84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c14838950cd361f54f9ca913c396df570e368b1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c14838950cd361f54f9ca913c396df570e368b1e","html_url":"https://github.com/apache/openjpa/commit/c14838950cd361f54f9ca913c396df570e368b1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c14838950cd361f54f9ca913c396df570e368b1e/comments","author":null,"committer":null,"parents":[{"sha":"1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","url":"https://api.github.com/repos/apache/openjpa/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","html_url":"https://github.com/apache/openjpa/commit/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4"}]},{"sha":"4327063d636e1118b2baf9ac4c5fe689420576d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzMjcwNjNkNjM2ZTExMThiMmJhZjlhYzRjNWZlNjg5NDIwNTc2ZDc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-02T00:36:33Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-02T00:36:33Z"},"message":"OPENJPA-1327 Doc update for JPA2 JPQL Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820853 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4f6554e918434643664415f73292bc19e8e80c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b4f6554e918434643664415f73292bc19e8e80c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4327063d636e1118b2baf9ac4c5fe689420576d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4327063d636e1118b2baf9ac4c5fe689420576d7","html_url":"https://github.com/apache/openjpa/commit/4327063d636e1118b2baf9ac4c5fe689420576d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4327063d636e1118b2baf9ac4c5fe689420576d7/comments","author":null,"committer":null,"parents":[{"sha":"c14838950cd361f54f9ca913c396df570e368b1e","url":"https://api.github.com/repos/apache/openjpa/commits/c14838950cd361f54f9ca913c396df570e368b1e","html_url":"https://github.com/apache/openjpa/commit/c14838950cd361f54f9ca913c396df570e368b1e"}]},{"sha":"400c5921009d3059994ea8bc2ce408729943aaa3","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwMGM1OTIxMDA5ZDMwNTk5OTRlYThiYzJjZTQwODcyOTk0M2FhYTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-02T14:36:30Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-02T14:36:30Z"},"message":"fix ASL 2.0 header and change test-mysql profile to test-mysql-slice profile to keep it from running during the nightly auotmated tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821035 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"33b7fa89c29e1c39a21954724762d9a6a0faaf86","url":"https://api.github.com/repos/apache/openjpa/git/trees/33b7fa89c29e1c39a21954724762d9a6a0faaf86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/400c5921009d3059994ea8bc2ce408729943aaa3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/400c5921009d3059994ea8bc2ce408729943aaa3","html_url":"https://github.com/apache/openjpa/commit/400c5921009d3059994ea8bc2ce408729943aaa3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/400c5921009d3059994ea8bc2ce408729943aaa3/comments","author":null,"committer":null,"parents":[{"sha":"4327063d636e1118b2baf9ac4c5fe689420576d7","url":"https://api.github.com/repos/apache/openjpa/commits/4327063d636e1118b2baf9ac4c5fe689420576d7","html_url":"https://github.com/apache/openjpa/commit/4327063d636e1118b2baf9ac4c5fe689420576d7"}]},{"sha":"bcdfee33fef0ec24ec348dbfd99162e32d10a3b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjZGZlZTMzZmVmMGVjMjRlYzM0OGRiZmQ5OTE2MmUzMmQxMGEzYjI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-02T16:20:01Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-02T16:20:01Z"},"message":"OPENJPA-1333 Updated db support docs with potential solutions for limited batch support of Oracle drivers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821077 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21af7893768ee2213f9e29059f6e37464f2d482d","url":"https://api.github.com/repos/apache/openjpa/git/trees/21af7893768ee2213f9e29059f6e37464f2d482d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bcdfee33fef0ec24ec348dbfd99162e32d10a3b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bcdfee33fef0ec24ec348dbfd99162e32d10a3b2","html_url":"https://github.com/apache/openjpa/commit/bcdfee33fef0ec24ec348dbfd99162e32d10a3b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bcdfee33fef0ec24ec348dbfd99162e32d10a3b2/comments","author":null,"committer":null,"parents":[{"sha":"400c5921009d3059994ea8bc2ce408729943aaa3","url":"https://api.github.com/repos/apache/openjpa/commits/400c5921009d3059994ea8bc2ce408729943aaa3","html_url":"https://github.com/apache/openjpa/commit/400c5921009d3059994ea8bc2ce408729943aaa3"}]},{"sha":"4c6ecef1ba10438268154d33c16520588f574fbb","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjNmVjZWYxYmExMDQzODI2ODE1NGQzM2MxNjUyMDU4OGY1NzRmYmI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-02T16:32:49Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-02T16:32:49Z"},"message":"OPENJPA-859: Backing out 818928 while investigating a regression.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821084 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bc4cfece3dad9f127fa18c10ace49f09af685a67","url":"https://api.github.com/repos/apache/openjpa/git/trees/bc4cfece3dad9f127fa18c10ace49f09af685a67"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c6ecef1ba10438268154d33c16520588f574fbb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c6ecef1ba10438268154d33c16520588f574fbb","html_url":"https://github.com/apache/openjpa/commit/4c6ecef1ba10438268154d33c16520588f574fbb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c6ecef1ba10438268154d33c16520588f574fbb/comments","author":null,"committer":null,"parents":[{"sha":"bcdfee33fef0ec24ec348dbfd99162e32d10a3b2","url":"https://api.github.com/repos/apache/openjpa/commits/bcdfee33fef0ec24ec348dbfd99162e32d10a3b2","html_url":"https://github.com/apache/openjpa/commit/bcdfee33fef0ec24ec348dbfd99162e32d10a3b2"}]},{"sha":"b68c975ebf49b65004c42fcc3bd39dd3f8d6a432","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2OGM5NzVlYmY0OWI2NTAwNGM0MmZjYzNiZDM5ZGQzZjhkNmE0MzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-02T18:33:59Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-02T18:33:59Z"},"message":"OPENJPA-1229 Upgrade to agimatec-validation 0.9.3 which supports 1.0.CR5 now, but still lacks support for XML constraints (so 1 test in testMappedSuperXMLConstraint fails)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aadf738031224b8d998dc1b2e29d19434fc92109","url":"https://api.github.com/repos/apache/openjpa/git/trees/aadf738031224b8d998dc1b2e29d19434fc92109"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b68c975ebf49b65004c42fcc3bd39dd3f8d6a432","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b68c975ebf49b65004c42fcc3bd39dd3f8d6a432","html_url":"https://github.com/apache/openjpa/commit/b68c975ebf49b65004c42fcc3bd39dd3f8d6a432","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b68c975ebf49b65004c42fcc3bd39dd3f8d6a432/comments","author":null,"committer":null,"parents":[{"sha":"4c6ecef1ba10438268154d33c16520588f574fbb","url":"https://api.github.com/repos/apache/openjpa/commits/4c6ecef1ba10438268154d33c16520588f574fbb","html_url":"https://github.com/apache/openjpa/commit/4c6ecef1ba10438268154d33c16520588f574fbb"}]},{"sha":"680320a73310a82637a937be18da25848859101e","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4MDMyMGE3MzMxMGE4MjYzN2E5MzdiZTE4ZGEyNTg0ODg1OTEwMWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-02T18:47:25Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-02T18:47:25Z"},"message":"OPENJPA-1229 Upgrade to agimatec-validation 0.9.3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821129 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f4742011a9f673a24a08c4ee0ddbb80de76c0d9d","url":"https://api.github.com/repos/apache/openjpa/git/trees/f4742011a9f673a24a08c4ee0ddbb80de76c0d9d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/680320a73310a82637a937be18da25848859101e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/680320a73310a82637a937be18da25848859101e","html_url":"https://github.com/apache/openjpa/commit/680320a73310a82637a937be18da25848859101e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/680320a73310a82637a937be18da25848859101e/comments","author":null,"committer":null,"parents":[{"sha":"b68c975ebf49b65004c42fcc3bd39dd3f8d6a432","url":"https://api.github.com/repos/apache/openjpa/commits/b68c975ebf49b65004c42fcc3bd39dd3f8d6a432","html_url":"https://github.com/apache/openjpa/commit/b68c975ebf49b65004c42fcc3bd39dd3f8d6a432"}]},{"sha":"58539dd83369c3a64907bc22c418ba8684e29274","node_id":"MDY6Q29tbWl0MjA2MzY0OjU4NTM5ZGQ4MzM2OWMzYTY0OTA3YmMyMmM0MThiYTg2ODRlMjkyNzQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-02T19:51:55Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-02T19:51:55Z"},"message":"OPENJPA-250: Update user manual.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821144 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58732892cc38fcef657a64f773556351fcb6b5c3","url":"https://api.github.com/repos/apache/openjpa/git/trees/58732892cc38fcef657a64f773556351fcb6b5c3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/58539dd83369c3a64907bc22c418ba8684e29274","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/58539dd83369c3a64907bc22c418ba8684e29274","html_url":"https://github.com/apache/openjpa/commit/58539dd83369c3a64907bc22c418ba8684e29274","comments_url":"https://api.github.com/repos/apache/openjpa/commits/58539dd83369c3a64907bc22c418ba8684e29274/comments","author":null,"committer":null,"parents":[{"sha":"680320a73310a82637a937be18da25848859101e","url":"https://api.github.com/repos/apache/openjpa/commits/680320a73310a82637a937be18da25848859101e","html_url":"https://github.com/apache/openjpa/commit/680320a73310a82637a937be18da25848859101e"}]},{"sha":"31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxYzQ3OTBjMzI4ZmEyMDhlZDhiOWUzYzRlZDRiYjhiMTY4YjljNTA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-03T01:35:09Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-03T01:35:09Z"},"message":"OPENJPA-1327 Doc update for JPA2 JPQL Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821214 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a2c617402b1922f943570edd5f6e83e5cc8423b","url":"https://api.github.com/repos/apache/openjpa/git/trees/3a2c617402b1922f943570edd5f6e83e5cc8423b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50","html_url":"https://github.com/apache/openjpa/commit/31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50/comments","author":null,"committer":null,"parents":[{"sha":"58539dd83369c3a64907bc22c418ba8684e29274","url":"https://api.github.com/repos/apache/openjpa/commits/58539dd83369c3a64907bc22c418ba8684e29274","html_url":"https://github.com/apache/openjpa/commit/58539dd83369c3a64907bc22c418ba8684e29274"}]},{"sha":"97aca65ddc006b3bd868faadc3893222b0609cd6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3YWNhNjVkZGMwMDZiM2JkODY4ZmFhZGMzODkzMjIyYjA2MDljZDY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-03T03:42:01Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-03T03:42:01Z"},"message":"OPENJPA-1237: allow customized MappingRepository\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821236 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c32d4d7a79730681eb33840622b6855e1487b3a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/c32d4d7a79730681eb33840622b6855e1487b3a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/97aca65ddc006b3bd868faadc3893222b0609cd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/97aca65ddc006b3bd868faadc3893222b0609cd6","html_url":"https://github.com/apache/openjpa/commit/97aca65ddc006b3bd868faadc3893222b0609cd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/97aca65ddc006b3bd868faadc3893222b0609cd6/comments","author":null,"committer":null,"parents":[{"sha":"31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50","url":"https://api.github.com/repos/apache/openjpa/commits/31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50","html_url":"https://github.com/apache/openjpa/commit/31c4790c328fa208ed8b9e3c4ed4bb8b168b9c50"}]},{"sha":"cc5664fe2d6d2cdd08e7b9744d69075541931965","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjNTY2NGZlMmQ2ZDJjZGQwOGU3Yjk3NDRkNjkwNzU1NDE5MzE5NjU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-03T23:40:49Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-03T23:40:49Z"},"message":"OPENJPA-1328:\nCheck cacheability in ClassMetaData instead of AbstractDataCache. \nMerged patch from Jody Grassel to trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821450 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdf7b81767cf874b1724ccd82be91d11df3ce159","url":"https://api.github.com/repos/apache/openjpa/git/trees/fdf7b81767cf874b1724ccd82be91d11df3ce159"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cc5664fe2d6d2cdd08e7b9744d69075541931965","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cc5664fe2d6d2cdd08e7b9744d69075541931965","html_url":"https://github.com/apache/openjpa/commit/cc5664fe2d6d2cdd08e7b9744d69075541931965","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cc5664fe2d6d2cdd08e7b9744d69075541931965/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"97aca65ddc006b3bd868faadc3893222b0609cd6","url":"https://api.github.com/repos/apache/openjpa/commits/97aca65ddc006b3bd868faadc3893222b0609cd6","html_url":"https://github.com/apache/openjpa/commit/97aca65ddc006b3bd868faadc3893222b0609cd6"}]},{"sha":"38a54f39f7ac96ab26c1eda3420362376338ccf8","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4YTU0ZjM5ZjdhYzk2YWIyNmMxZWRhMzQyMDM2MjM3NjMzOGNjZjg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-05T17:14:29Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-05T17:14:29Z"},"message":"OPENJPA-250: Moved preloading to later in the init process and only create MDR if preload is configured.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821925 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"265f3e76bc925be11e8b41a85deefdd97783e696","url":"https://api.github.com/repos/apache/openjpa/git/trees/265f3e76bc925be11e8b41a85deefdd97783e696"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8","html_url":"https://github.com/apache/openjpa/commit/38a54f39f7ac96ab26c1eda3420362376338ccf8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8/comments","author":null,"committer":null,"parents":[{"sha":"cc5664fe2d6d2cdd08e7b9744d69075541931965","url":"https://api.github.com/repos/apache/openjpa/commits/cc5664fe2d6d2cdd08e7b9744d69075541931965","html_url":"https://github.com/apache/openjpa/commit/cc5664fe2d6d2cdd08e7b9744d69075541931965"}]},{"sha":"bb67dae45e14faa02b6b4916add3b25f870594d6","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiNjdkYWU0NWUxNGZhYTAyYjZiNDkxNmFkZDNiMjVmODcwNTk0ZDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-05T18:32:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-05T18:32:38Z"},"message":"OPENJPA-1033 Update Supported Database appendix to denote tested/verified vs. known compatible databases and drivers\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821951 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"daa8624ebe79be7133637c3e869ef0e7ef0fc882","url":"https://api.github.com/repos/apache/openjpa/git/trees/daa8624ebe79be7133637c3e869ef0e7ef0fc882"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb67dae45e14faa02b6b4916add3b25f870594d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb67dae45e14faa02b6b4916add3b25f870594d6","html_url":"https://github.com/apache/openjpa/commit/bb67dae45e14faa02b6b4916add3b25f870594d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb67dae45e14faa02b6b4916add3b25f870594d6/comments","author":null,"committer":null,"parents":[{"sha":"38a54f39f7ac96ab26c1eda3420362376338ccf8","url":"https://api.github.com/repos/apache/openjpa/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8","html_url":"https://github.com/apache/openjpa/commit/38a54f39f7ac96ab26c1eda3420362376338ccf8"}]},{"sha":"210581b625a50468f70b243f8420b1fb635796c7","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxMDU4MWI2MjVhNTA0NjhmNzBiMjQzZjg0MjBiMWZiNjM1Nzk2Yzc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-05T19:26:11Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-05T19:26:11Z"},"message":"OPENJPA250: Fix compile error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821980 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"616099be83944be8f5fd13b3cd28b109177e5187","url":"https://api.github.com/repos/apache/openjpa/git/trees/616099be83944be8f5fd13b3cd28b109177e5187"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/210581b625a50468f70b243f8420b1fb635796c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/210581b625a50468f70b243f8420b1fb635796c7","html_url":"https://github.com/apache/openjpa/commit/210581b625a50468f70b243f8420b1fb635796c7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/210581b625a50468f70b243f8420b1fb635796c7/comments","author":null,"committer":null,"parents":[{"sha":"bb67dae45e14faa02b6b4916add3b25f870594d6","url":"https://api.github.com/repos/apache/openjpa/commits/bb67dae45e14faa02b6b4916add3b25f870594d6","html_url":"https://github.com/apache/openjpa/commit/bb67dae45e14faa02b6b4916add3b25f870594d6"}]},{"sha":"b058e703822c814c089cd9e814a702b263e976d0","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwNThlNzAzODIyYzgxNGMwODljZDllODE0YTcwMmIyNjNlOTc2ZDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-05T19:40:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-05T19:40:55Z"},"message":"OPENJPA-1229 Geronimo specs have been released, but still have not been mirrored to all repos, so point to ASF release repo for now\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6603967aa6b1c0dfbe2a8d37345ab4052b16f851","url":"https://api.github.com/repos/apache/openjpa/git/trees/6603967aa6b1c0dfbe2a8d37345ab4052b16f851"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b058e703822c814c089cd9e814a702b263e976d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b058e703822c814c089cd9e814a702b263e976d0","html_url":"https://github.com/apache/openjpa/commit/b058e703822c814c089cd9e814a702b263e976d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b058e703822c814c089cd9e814a702b263e976d0/comments","author":null,"committer":null,"parents":[{"sha":"210581b625a50468f70b243f8420b1fb635796c7","url":"https://api.github.com/repos/apache/openjpa/commits/210581b625a50468f70b243f8420b1fb635796c7","html_url":"https://github.com/apache/openjpa/commit/210581b625a50468f70b243f8420b1fb635796c7"}]},{"sha":"18cd43dfcd9a98e8954634a5a7ff3455a7ef4744","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4Y2Q0M2RmY2Q5YTk4ZTg5NTQ2MzRhNWE3ZmYzNDU1YTdlZjQ3NDQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-05T21:01:51Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-05T21:01:51Z"},"message":"OPENJPA-1203 Doc createEMF() exception behaviors\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1aa4519a72493d4a16beee12be14b8487b0818ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/1aa4519a72493d4a16beee12be14b8487b0818ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18cd43dfcd9a98e8954634a5a7ff3455a7ef4744","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18cd43dfcd9a98e8954634a5a7ff3455a7ef4744","html_url":"https://github.com/apache/openjpa/commit/18cd43dfcd9a98e8954634a5a7ff3455a7ef4744","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18cd43dfcd9a98e8954634a5a7ff3455a7ef4744/comments","author":null,"committer":null,"parents":[{"sha":"b058e703822c814c089cd9e814a702b263e976d0","url":"https://api.github.com/repos/apache/openjpa/commits/b058e703822c814c089cd9e814a702b263e976d0","html_url":"https://github.com/apache/openjpa/commit/b058e703822c814c089cd9e814a702b263e976d0"}]},{"sha":"63a3408d7d291fd3c965500c33fabf2189530d65","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzYTM0MDhkN2QyOTFmZDNjOTY1NTAwYzMzZmFiZjIxODk1MzBkNjU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-06T14:14:49Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-06T14:14:49Z"},"message":"OPENJPA-1224: backing out changes while investigating a test regression.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822288 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e98347d9aa49b5d486b50ec8869b62f5a25aef86","url":"https://api.github.com/repos/apache/openjpa/git/trees/e98347d9aa49b5d486b50ec8869b62f5a25aef86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63a3408d7d291fd3c965500c33fabf2189530d65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63a3408d7d291fd3c965500c33fabf2189530d65","html_url":"https://github.com/apache/openjpa/commit/63a3408d7d291fd3c965500c33fabf2189530d65","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63a3408d7d291fd3c965500c33fabf2189530d65/comments","author":null,"committer":null,"parents":[{"sha":"18cd43dfcd9a98e8954634a5a7ff3455a7ef4744","url":"https://api.github.com/repos/apache/openjpa/commits/18cd43dfcd9a98e8954634a5a7ff3455a7ef4744","html_url":"https://github.com/apache/openjpa/commit/18cd43dfcd9a98e8954634a5a7ff3455a7ef4744"}]},{"sha":"5b9c0cb8f893cd2c022b1260a3787cd41c62daca","node_id":"MDY6Q29tbWl0MjA2MzY0OjViOWMwY2I4Zjg5M2NkMmMwMjJiMTI2MGEzNzg3Y2Q0MWM2MmRhY2E=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-06T15:04:06Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-06T15:04:06Z"},"message":"OPENJPA-1124: Adding @AllowFailure to failing test variation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822307 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e39bc3d411d8cc8d49f53858b87d16f0361f4a8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/e39bc3d411d8cc8d49f53858b87d16f0361f4a8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b9c0cb8f893cd2c022b1260a3787cd41c62daca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b9c0cb8f893cd2c022b1260a3787cd41c62daca","html_url":"https://github.com/apache/openjpa/commit/5b9c0cb8f893cd2c022b1260a3787cd41c62daca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b9c0cb8f893cd2c022b1260a3787cd41c62daca/comments","author":null,"committer":null,"parents":[{"sha":"63a3408d7d291fd3c965500c33fabf2189530d65","url":"https://api.github.com/repos/apache/openjpa/commits/63a3408d7d291fd3c965500c33fabf2189530d65","html_url":"https://github.com/apache/openjpa/commit/63a3408d7d291fd3c965500c33fabf2189530d65"}]},{"sha":"020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyMGQ0NmVmMTIzMWNlNTFjZTIzMTU4MWMyZTljM2Q1MmRkN2ZiYjQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-06T16:13:33Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-06T16:13:33Z"},"message":"OPENJPA-1338 Allow comparison for VALUE(e) that maps to basic type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822330 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d76793a58c7ef0cf2cc2d6a7e8f505efb515384d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d76793a58c7ef0cf2cc2d6a7e8f505efb515384d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","html_url":"https://github.com/apache/openjpa/commit/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/comments","author":null,"committer":null,"parents":[{"sha":"5b9c0cb8f893cd2c022b1260a3787cd41c62daca","url":"https://api.github.com/repos/apache/openjpa/commits/5b9c0cb8f893cd2c022b1260a3787cd41c62daca","html_url":"https://github.com/apache/openjpa/commit/5b9c0cb8f893cd2c022b1260a3787cd41c62daca"}]},{"sha":"39240eb1ecf22f6b47db987bfcdf918bfd0faa78","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5MjQwZWIxZWNmMjJmNmI0N2RiOTg3YmZjZGY5MThiZmQwZmFhNzg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T16:59:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T16:59:37Z"},"message":"OPENJPA-1284 Fix missing schema license headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822348 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"293559e10a6c3a0b43068fc593941ee582b9e553","url":"https://api.github.com/repos/apache/openjpa/git/trees/293559e10a6c3a0b43068fc593941ee582b9e553"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/39240eb1ecf22f6b47db987bfcdf918bfd0faa78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/39240eb1ecf22f6b47db987bfcdf918bfd0faa78","html_url":"https://github.com/apache/openjpa/commit/39240eb1ecf22f6b47db987bfcdf918bfd0faa78","comments_url":"https://api.github.com/repos/apache/openjpa/commits/39240eb1ecf22f6b47db987bfcdf918bfd0faa78/comments","author":null,"committer":null,"parents":[{"sha":"020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","url":"https://api.github.com/repos/apache/openjpa/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","html_url":"https://github.com/apache/openjpa/commit/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4"}]},{"sha":"c6085cd2961fb178d64a2f739fc25cdc33c9195c","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2MDg1Y2QyOTYxZmIxNzhkNjRhMmY3MzlmYzI1Y2RjMzNjOTE5NWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:07:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:07:54Z"},"message":"OPENJPA-1229 Remove extra Geronimo repo as the artifacts are mirrored now.  Update the repoId for sonatype.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822350 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eda6005b545467cacd267338ac94f476fda2daa3","url":"https://api.github.com/repos/apache/openjpa/git/trees/eda6005b545467cacd267338ac94f476fda2daa3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c","html_url":"https://github.com/apache/openjpa/commit/c6085cd2961fb178d64a2f739fc25cdc33c9195c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c/comments","author":null,"committer":null,"parents":[{"sha":"39240eb1ecf22f6b47db987bfcdf918bfd0faa78","url":"https://api.github.com/repos/apache/openjpa/commits/39240eb1ecf22f6b47db987bfcdf918bfd0faa78","html_url":"https://github.com/apache/openjpa/commit/39240eb1ecf22f6b47db987bfcdf918bfd0faa78"}]},{"sha":"a4dff0f5e405eda3717be28a0db53f5e52c84baf","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0ZGZmMGY1ZTQwNWVkYTM3MTdiZTI4YTBkYjUzZjVlNTJjODRiYWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:14:16Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:14:16Z"},"message":"creating M3 branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-M3@822352 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eda6005b545467cacd267338ac94f476fda2daa3","url":"https://api.github.com/repos/apache/openjpa/git/trees/eda6005b545467cacd267338ac94f476fda2daa3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4dff0f5e405eda3717be28a0db53f5e52c84baf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4dff0f5e405eda3717be28a0db53f5e52c84baf","html_url":"https://github.com/apache/openjpa/commit/a4dff0f5e405eda3717be28a0db53f5e52c84baf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4dff0f5e405eda3717be28a0db53f5e52c84baf/comments","author":null,"committer":null,"parents":[{"sha":"c6085cd2961fb178d64a2f739fc25cdc33c9195c","url":"https://api.github.com/repos/apache/openjpa/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c","html_url":"https://github.com/apache/openjpa/commit/c6085cd2961fb178d64a2f739fc25cdc33c9195c"}]},{"sha":"8c8940166da68fc9ed7e9d6e93daaa2c79a21e88","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjODk0MDE2NmRhNjhmYzllZDdlOWQ2ZTkzZGFhYTJjNzlhMjFlODg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:26:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:26:29Z"},"message":"OPENJPA-1229 Update version and scm info to 2.0.0-M3 in preparation for M3 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-M3@822363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6d872a13980d54db29d272d298268090dd47c80","url":"https://api.github.com/repos/apache/openjpa/git/trees/e6d872a13980d54db29d272d298268090dd47c80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c8940166da68fc9ed7e9d6e93daaa2c79a21e88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c8940166da68fc9ed7e9d6e93daaa2c79a21e88","html_url":"https://github.com/apache/openjpa/commit/8c8940166da68fc9ed7e9d6e93daaa2c79a21e88","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c8940166da68fc9ed7e9d6e93daaa2c79a21e88/comments","author":null,"committer":null,"parents":[{"sha":"a4dff0f5e405eda3717be28a0db53f5e52c84baf","url":"https://api.github.com/repos/apache/openjpa/commits/a4dff0f5e405eda3717be28a0db53f5e52c84baf","html_url":"https://github.com/apache/openjpa/commit/a4dff0f5e405eda3717be28a0db53f5e52c84baf"}]},{"sha":"ea1ebb47175f8d1e086951892705f83a513e35f9","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhMWViYjQ3MTc1ZjhkMWUwODY5NTE4OTI3MDVmODNhNTEzZTM1Zjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T20:32:57Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T20:32:57Z"},"message":"OPENJPA-1229 Correct where the 2.0 schemas came from.  Thanks Jeremy for pointing it out.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-M3@822485 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44737588a2783f75bef316d949dd1378c5a2a4ac","url":"https://api.github.com/repos/apache/openjpa/git/trees/44737588a2783f75bef316d949dd1378c5a2a4ac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea1ebb47175f8d1e086951892705f83a513e35f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea1ebb47175f8d1e086951892705f83a513e35f9","html_url":"https://github.com/apache/openjpa/commit/ea1ebb47175f8d1e086951892705f83a513e35f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea1ebb47175f8d1e086951892705f83a513e35f9/comments","author":null,"committer":null,"parents":[{"sha":"8c8940166da68fc9ed7e9d6e93daaa2c79a21e88","url":"https://api.github.com/repos/apache/openjpa/commits/8c8940166da68fc9ed7e9d6e93daaa2c79a21e88","html_url":"https://github.com/apache/openjpa/commit/8c8940166da68fc9ed7e9d6e93daaa2c79a21e88"}]},{"sha":"0f84cfbd4fb37d16b049b9a501d6d82a186202e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmODRjZmJkNGZiMzdkMTZiMDQ5YjlhNTAxZDZkODJhMTg2MjAyZTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-07T18:41:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-07T18:41:24Z"},"message":"OPENJPA-1229 Update release-notes, changes, readme, ... for M3 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-M3@822833 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83af820035ebd38f9f38a132498b2bc3bed6de53","url":"https://api.github.com/repos/apache/openjpa/git/trees/83af820035ebd38f9f38a132498b2bc3bed6de53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f84cfbd4fb37d16b049b9a501d6d82a186202e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f84cfbd4fb37d16b049b9a501d6d82a186202e2","html_url":"https://github.com/apache/openjpa/commit/0f84cfbd4fb37d16b049b9a501d6d82a186202e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/comments","author":null,"committer":null,"parents":[{"sha":"ea1ebb47175f8d1e086951892705f83a513e35f9","url":"https://api.github.com/repos/apache/openjpa/commits/ea1ebb47175f8d1e086951892705f83a513e35f9","html_url":"https://github.com/apache/openjpa/commit/ea1ebb47175f8d1e086951892705f83a513e35f9"}]}],"files":[{"sha":"334886a995e2883064d2b4b5b3f364856176f4e0","filename":".gitignore","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/.gitignore","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/.gitignore","contents_url":"https://api.github.com/repos/apache/openjpa/contents/.gitignore?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,7 @@\n+.settings\n+.project\n+.classpath\n+target\n+velocity.log\n+derby.log\n+*.iml"},{"sha":"c4fbb3ea5dbfb4174cfa386cfb23ffc0cfe3d393","filename":"LICENSE.txt","status":"added","additions":348,"deletions":0,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/LICENSE.txt","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/LICENSE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/LICENSE.txt?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,348 @@\n+\r\n+                                 Apache License\r\n+                           Version 2.0, January 2004\r\n+                        http://www.apache.org/licenses/\r\n+\r\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n+\r\n+   1. Definitions.\r\n+\r\n+      \"License\" shall mean the terms and conditions for use, reproduction,\r\n+      and distribution as defined by Sections 1 through 9 of this document.\r\n+\r\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n+      the copyright owner that is granting the License.\r\n+\r\n+      \"Legal Entity\" shall mean the union of the acting entity and all\r\n+      other entities that control, are controlled by, or are under common\r\n+      control with that entity. For the purposes of this definition,\r\n+      \"control\" means (i) the power, direct or indirect, to cause the\r\n+      direction or management of such entity, whether by contract or\r\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n+      outstanding shares, or (iii) beneficial ownership of such entity.\r\n+\r\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n+      exercising permissions granted by this License.\r\n+\r\n+      \"Source\" form shall mean the preferred form for making modifications,\r\n+      including but not limited to software source code, documentation\r\n+      source, and configuration files.\r\n+\r\n+      \"Object\" form shall mean any form resulting from mechanical\r\n+      transformation or translation of a Source form, including but\r\n+      not limited to compiled object code, generated documentation,\r\n+      and conversions to other media types.\r\n+\r\n+      \"Work\" shall mean the work of authorship, whether in Source or\r\n+      Object form, made available under the License, as indicated by a\r\n+      copyright notice that is included in or attached to the work\r\n+      (an example is provided in the Appendix below).\r\n+\r\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n+      form, that is based on (or derived from) the Work and for which the\r\n+      editorial revisions, annotations, elaborations, or other modifications\r\n+      represent, as a whole, an original work of authorship. For the purposes\r\n+      of this License, Derivative Works shall not include works that remain\r\n+      separable from, or merely link (or bind by name) to the interfaces of,\r\n+      the Work and Derivative Works thereof.\r\n+\r\n+      \"Contribution\" shall mean any work of authorship, including\r\n+      the original version of the Work and any modifications or additions\r\n+      to that Work or Derivative Works thereof, that is intentionally\r\n+      submitted to Licensor for inclusion in the Work by the copyright owner\r\n+      or by an individual or Legal Entity authorized to submit on behalf of\r\n+      the copyright owner. For the purposes of this definition, \"submitted\"\r\n+      means any form of electronic, verbal, or written communication sent\r\n+      to the Licensor or its representatives, including but not limited to\r\n+      communication on electronic mailing lists, source code control systems,\r\n+      and issue tracking systems that are managed by, or on behalf of, the\r\n+      Licensor for the purpose of discussing and improving the Work, but\r\n+      excluding communication that is conspicuously marked or otherwise\r\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n+\r\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n+      on behalf of whom a Contribution has been received by Licensor and\r\n+      subsequently incorporated within the Work.\r\n+\r\n+   2. Grant of Copyright License. Subject to the terms and conditions of\r\n+      this License, each Contributor hereby grants to You a perpetual,\r\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n+      copyright license to reproduce, prepare Derivative Works of,\r\n+      publicly display, publicly perform, sublicense, and distribute the\r\n+      Work and such Derivative Works in Source or Object form.\r\n+\r\n+   3. Grant of Patent License. Subject to the terms and conditions of\r\n+      this License, each Contributor hereby grants to You a perpetual,\r\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n+      (except as stated in this section) patent license to make, have made,\r\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n+      where such license applies only to those patent claims licensable\r\n+      by such Contributor that are necessarily infringed by their\r\n+      Contribution(s) alone or by combination of their Contribution(s)\r\n+      with the Work to which such Contribution(s) was submitted. If You\r\n+      institute patent litigation against any entity (including a\r\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n+      or a Contribution incorporated within the Work constitutes direct\r\n+      or contributory patent infringement, then any patent licenses\r\n+      granted to You under this License for that Work shall terminate\r\n+      as of the date such litigation is filed.\r\n+\r\n+   4. Redistribution. You may reproduce and distribute copies of the\r\n+      Work or Derivative Works thereof in any medium, with or without\r\n+      modifications, and in Source or Object form, provided that You\r\n+      meet the following conditions:\r\n+\r\n+      (a) You must give any other recipients of the Work or\r\n+          Derivative Works a copy of this License; and\r\n+\r\n+      (b) You must cause any modified files to carry prominent notices\r\n+          stating that You changed the files; and\r\n+\r\n+      (c) You must retain, in the Source form of any Derivative Works\r\n+          that You distribute, all copyright, patent, trademark, and\r\n+          attribution notices from the Source form of the Work,\r\n+          excluding those notices that do not pertain to any part of\r\n+          the Derivative Works; and\r\n+\r\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n+          distribution, then any Derivative Works that You distribute must\r\n+          include a readable copy of the attribution notices contained\r\n+          within such NOTICE file, excluding those notices that do not\r\n+          pertain to any part of the Derivative Works, in at least one\r\n+          of the following places: within a NOTICE text file distributed\r\n+          as part of the Derivative Works; within the Source form or\r\n+          documentation, if provided along with the Derivative Works; or,\r\n+          within a display generated by the Derivative Works, if and\r\n+          wherever such third-party notices normally appear. The contents\r\n+          of the NOTICE file are for informational purposes only and\r\n+          do not modify the License. You may add Your own attribution\r\n+          notices within Derivative Works that You distribute, alongside\r\n+          or as an addendum to the NOTICE text from the Work, provided\r\n+          that such additional attribution notices cannot be construed\r\n+          as modifying the License.\r\n+\r\n+      You may add Your own copyright statement to Your modifications and\r\n+      may provide additional or different license terms and conditions\r\n+      for use, reproduction, or distribution of Your modifications, or\r\n+      for any such Derivative Works as a whole, provided Your use,\r\n+      reproduction, and distribution of the Work otherwise complies with\r\n+      the conditions stated in this License.\r\n+\r\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n+      any Contribution intentionally submitted for inclusion in the Work\r\n+      by You to the Licensor shall be under the terms and conditions of\r\n+      this License, without any additional terms or conditions.\r\n+      Notwithstanding the above, nothing herein shall supersede or modify\r\n+      the terms of any separate license agreement you may have executed\r\n+      with Licensor regarding such Contributions.\r\n+\r\n+   6. Trademarks. This License does not grant permission to use the trade\r\n+      names, trademarks, service marks, or product names of the Licensor,\r\n+      except as required for reasonable and customary use in describing the\r\n+      origin of the Work and reproducing the content of the NOTICE file.\r\n+\r\n+   7. Disclaimer of Warranty. Unless required by applicable law or\r\n+      agreed to in writing, Licensor provides the Work (and each\r\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n+      implied, including, without limitation, any warranties or conditions\r\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n+      appropriateness of using or redistributing the Work and assume any\r\n+      risks associated with Your exercise of permissions under this License.\r\n+\r\n+   8. Limitation of Liability. In no event and under no legal theory,\r\n+      whether in tort (including negligence), contract, or otherwise,\r\n+      unless required by applicable law (such as deliberate and grossly\r\n+      negligent acts) or agreed to in writing, shall any Contributor be\r\n+      liable to You for damages, including any direct, indirect, special,\r\n+      incidental, or consequential damages of any character arising as a\r\n+      result of this License or out of the use or inability to use the\r\n+      Work (including but not limited to damages for loss of goodwill,\r\n+      work stoppage, computer failure or malfunction, or any and all\r\n+      other commercial damages or losses), even if such Contributor\r\n+      has been advised of the possibility of such damages.\r\n+\r\n+   9. Accepting Warranty or Additional Liability. While redistributing\r\n+      the Work or Derivative Works thereof, You may choose to offer,\r\n+      and charge a fee for, acceptance of support, warranty, indemnity,\r\n+      or other liability obligations and/or rights consistent with this\r\n+      License. However, in accepting such obligations, You may act only\r\n+      on Your own behalf and on Your sole responsibility, not on behalf\r\n+      of any other Contributor, and only if You agree to indemnify,\r\n+      defend, and hold each Contributor harmless for any liability\r\n+      incurred by, or claims asserted against, such Contributor by reason\r\n+      of your accepting any such warranty or additional liability.\r\n+\r\n+   END OF TERMS AND CONDITIONS\r\n+\r\n+   APPENDIX: How to apply the Apache License to your work.\r\n+\r\n+      To apply the Apache License to your work, attach the following\r\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n+      replaced with your own identifying information. (Don't include\r\n+      the brackets!)  The text should be enclosed in the appropriate\r\n+      comment syntax for the file format. We also recommend that a\r\n+      file or class name and description of purpose be included on the\r\n+      same \"printed page\" as the copyright notice for easier\r\n+      identification within third-party archives.\r\n+\r\n+   Copyright [yyyy] [name of copyright owner]\r\n+\r\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+   you may not use this file except in compliance with the License.\r\n+   You may obtain a copy of the License at\r\n+\r\n+       http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+   Unless required by applicable law or agreed to in writing, software\r\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+   See the License for the specific language governing permissions and\r\n+   limitations under the License.\r\n+\r\n+\r\n+======================================\r\n+  LICENSES FOR INCLUDED DEPENDENCIES\r\n+======================================\r\n+\r\n+All the source code for the OpenJPA project is released under the\r\n+license above. Additionally, the OpenJPA binary distribution\r\n+includes a number of third-party files that are required in\r\n+order to the software to function. Unless noted below, these jars\r\n+and resource files are also released under the ASF license above.\r\n+\r\n+The exceptions are as follows:\r\n+\r\n+===========================\r\n+  orm-xsd.rsrc - included in the openjpa jar, taken from:\r\n+    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd)\r\n+  orm_2_0-xsd.rsrc - included in the openjpa jar, taken from:\r\n+    JSR-317 Java Persistence 2.0 Specification, Proposed Final Draft 2\r\n+  persistence-xsd.rsrc - included in the openjpa jar, taken from:\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd)\r\n+  persistence_2_0-xsd.rsrc - included in the openjpa jar, taken from:\r\n+    JSR-317 Java Persistence 2.0 Specification, Proposed Final Draft 2\r\n+  websphere-uow-api.jar - this jar file contains WebSphere proprietary\r\n+    API code which is licensed for use when compiling OpenJPA. The\r\n+    jar is not distributed with OpenJPA and is only included with the\r\n+    source archive in order to resolve compilation dependencies. \r\n+===========================\r\n+\r\n+COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\r\n+\r\n+1. Definitions.\r\n+\r\n+1.1. Contributor means each individual or entity that creates or contributes to the creation of Modifications.\r\n+\r\n+1.2. Contributor Version means the combination of the Original Software, prior Modifications used by a Contributor (if any), and the Modifications made by that particular Contributor.\r\n+\r\n+1.3. Covered Software means (a) the Original Software, or (b) Modifications, or (c) the combination of files containing Original Software with files containing Modifications, in each case including portions thereof.\r\n+\r\n+1.4. Executable means the Covered Software in any form other than Source Code.\r\n+\r\n+1.5. Initial Developer means the individual or entity that first makes Original Software available under this License.\r\n+\r\n+1.6. Larger Work means a work which combines Covered Software or portions thereof with code not governed by the terms of this License.\r\n+\r\n+1.7. License means this document.\r\n+\r\n+1.8. Licensable means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.\r\n+\r\n+1.9. Modifications means the Source Code and Executable form of any of the following:\r\n+\r\n+A. Any file that results from an addition to, deletion from or modification of the contents of a file containing Original Software or previous Modifications;\r\n+\r\n+B. Any new file that contains any part of the Original Software or previous Modification; or\r\n+\r\n+C. Any new file that is contributed or otherwise made available under the terms of this License.\r\n+\r\n+1.10. Original Software means the Source Code and Executable form of computer software code that is originally released under this License.\r\n+\r\n+1.11. Patent Claims means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.\r\n+\r\n+1.12. Source Code means (a) the common form of computer software code in which modifications are made and (b) associated documentation included in or with such code.\r\n+\r\n+1.13. You (or Your) means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, You includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, control means (a)�the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b)�ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\r\n+\r\n+2. License Grants.\r\n+\r\n+2.1. The Initial Developer Grant.\r\n+Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, the Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license:\r\n+(a) under intellectual property rights (other than patent or trademark) Licensable by Initial Developer, to use, reproduce, modify, display, perform, sublicense and distribute the Original Software (or portions thereof), with or without Modifications, and/or as part of a Larger Work; and\r\n+(b) under Patent Claims infringed by the making, using or selling of Original Software, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Software (or portions thereof).\r\n+(c) The licenses granted in Sections�2.1(a) and (b) are effective on the date Initial Developer first distributes or otherwise makes the Original Software available to a third party under the terms of this License.\r\n+(d) Notwithstanding Section�2.1(b) above, no patent license is granted: (1)�for code that You delete from the Original Software, or (2)�for infringements caused by: (i)�the modification of the Original Software, or (ii)�the combination of the Original Software with other software or devices.\r\n+\r\n+2.2. Contributor Grant.\r\n+Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\r\n+(a) under intellectual property rights (other than patent or trademark) Licensable by Contributor to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof), either on an unmodified basis, with other Modifications, as Covered Software and/or as part of a Larger Work; and\r\n+(b) under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)�Modifications made by that Contributor (or portions thereof); and (2)�the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).\r\n+(c) The licenses granted in Sections�2.2(a) and 2.2(b) are effective on the date Contributor first distributes or otherwise makes the Modifications available to a third party.\r\n+(d) Notwithstanding Section�2.2(b) above, no patent license is granted: (1)�for any code that Contributor has deleted from the Contributor Version; (2)�for infringements caused by: (i)�third party modifications of Contributor Version, or (ii)�the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or (3)�under Patent Claims infringed by Covered Software in the absence of Modifications made by that Contributor.\r\n+\r\n+3. Distribution Obligations.\r\n+\r\n+3.1. Availability of Source Code.\r\n+\r\n+Any Covered Software that You distribute or otherwise make available in Executable form must also be made available in Source Code form and that Source Code form must be distributed only under the terms of this License. You must include a copy of this License with every copy of the Source Code form of the Covered Software You distribute or otherwise make available. You must inform recipients of any such Covered Software in Executable form as to how they can obtain such Covered Software in Source Code form in a reasonable manner on or through a medium customarily used for software exchange.\r\n+\r\n+3.2. Modifications.\r\n+\r\n+The Modifications that You create or to which You contribute are governed by the terms of this License. You represent that You believe Your Modifications are Your original creation(s) and/or You have sufficient rights to grant the rights conveyed by this License.\r\n+\r\n+3.3. Required Notices.\r\n+You must include a notice in each of Your Modifications that identifies You as the Contributor of the Modification. You may not remove or alter any copyright, patent or trademark notices contained within the Covered Software, or any notices of licensing or any descriptive text giving attribution to any Contributor or the Initial Developer.\r\n+\r\n+3.4. Application of Additional Terms.\r\n+You may not offer or impose any terms on any Covered Software in Source Code form that alters or restricts the applicable version of this License or the recipients rights hereunder. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, you may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear that any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.\r\n+\r\n+3.5. Distribution of Executable Versions.\r\n+You may distribute the Executable form of the Covered Software under the terms of this License or under the terms of a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable form does not attempt to limit or alter the recipients rights in the Source Code form from the rights set forth in this License. If You distribute the Covered Software in Executable form under a different license, You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.\r\n+\r\n+3.6. Larger Works.\r\n+You may create a Larger Work by combining Covered Software with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Software.\r\n+\r\n+4. Versions of the License.\r\n+\r\n+4.1. New Versions.\r\n+Sun Microsystems, Inc. is the initial license steward and may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Except as provided in Section 4.3, no one other than the license steward has the right to modify this License.\r\n+\r\n+4.2. Effect of New Versions.\r\n+\r\n+You may always continue to use, distribute or otherwise make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. If the Initial Developer includes a notice in the Original Software prohibiting it from being distributed or otherwise made available under any subsequent version of the License, You must distribute and make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. Otherwise, You may also choose to use, distribute or otherwise make the Covered Software available under the terms of any subsequent version of the License published by the license steward.\r\n+4.3. Modified Versions.\r\n+\r\n+When You are an Initial Developer and You want to create a new license for Your Original Software, You may create and use a modified version of this License if You: (a)�rename the license and remove any references to the name of the license steward (except to note that the license differs from this License); and (b)�otherwise make it clear that the license contains terms which differ from this License.\r\n+\r\n+5. DISCLAIMER OF WARRANTY.\r\n+\r\n+COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN AS IS BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\r\n+\r\n+6. TERMINATION.\r\n+\r\n+6.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.\r\n+\r\n+6.2. If You assert a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You assert such claim is referred to as Participant) alleging that the Participant Software (meaning the Contributor Version where the Participant is a Contributor or the Original Software where the Participant is the Initial Developer) directly or indirectly infringes any patent, then any and all rights granted directly or indirectly to You by such Participant, the Initial Developer (if the Initial Developer is not the Participant) and all Contributors under Sections�2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively and automatically at the expiration of such 60 day notice period, unless if within such 60 day period You withdraw Your claim with respect to the Participant Software against such Participant either unilaterally or pursuant to a written agreement with Participant.\r\n+\r\n+6.3. In the event of termination under Sections�6.1 or 6.2 above, all end user licenses that have been validly granted by You or any distributor hereunder prior to termination (excluding licenses granted to You by any distributor) shall survive termination.\r\n+\r\n+7. LIMITATION OF LIABILITY.\r\n+\r\n+UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTYS NEGLIGENCE TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\r\n+\r\n+8. U.S. GOVERNMENT END USERS.\r\n+\r\n+The Covered Software is a commercial item, as that term is defined in 48�C.F.R.�2.101 (Oct. 1995), consisting of commercial computer software (as that term is defined at 48 C.F.R. �252.227-7014(a)(1)) and commercial computer software documentation as such terms are used in 48�C.F.R.�12.212 (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Software with only those rights set forth herein. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or provision that addresses Government rights in computer software under this License.\r\n+\r\n+9. MISCELLANEOUS.\r\n+\r\n+This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by the law of the jurisdiction specified in a notice contained within the Original Software (except to the extent applicable law, if any, provides otherwise), excluding such jurisdictions conflict-of-law provisions. Any litigation relating to this License shall be subject to the jurisdiction of the courts located in the jurisdiction and venue specified in a notice contained within the Original Software, with the losing party responsible for costs, including, without limitation, court costs and reasonable attorneys fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. You agree that You alone are responsible for compliance with the United States export administration regulations (and the export control laws and regulation of any other countries) when You use, distribute or otherwise make available any Covered Software.\r\n+\r\n+10. RESPONSIBILITY FOR CLAIMS.\r\n+\r\n+As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.\r\n+\r\n+NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)\r\n+The GlassFish code released under the CDDL shall be governed by the laws of the State of California (excluding conflict-of-law provisions). Any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California and the state courts of the State of California, with venue lying in Santa Clara County, California. \r\n+\r"},{"sha":"bdf4aee4b4101ce978c8587ea2d6526160ce3057","filename":"NOTICE.txt","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/NOTICE.txt?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,29 @@\n+================================================================================\r\n+==  NOTICE file corresponding to the section 4 d of                           ==\r\n+==  the Apache License, Version 2.0,                                          ==\r\n+==  in this case for the Apache OpenJPA distribution.                         ==\r\n+================================================================================\r\n+\r\n+This product includes software developed by\r\n+The Apache Software Foundation (http://www.apache.org/).\r\n+\r\n+This is an implementation of an early-draft specification developed under the Java Community Process (JCP). The code is untested and presumed not to be a compatible implementation of the JSR-317 Java Persistence API, Version 2.0 specification.  We encourage you to migrate to an implementation of the JSR-317 Java Persistence API, Version 2.0 specification that has been tested and verified to be compatible as soon as such an implementation is available, and we encourage you to retain this notice in any implementation of JSR-317 Java Persistence API, Version 2.0 specification that you distribute.\r\n+\r\n+\r\n+COPYRIGHT NOTICES\r\n+\r\n+OpenJPA includes software developed by the SERP project\r\n+Copyright (c) 2002-2006, A. Abram White. All rights reserved.\r\n+\r\n+OpenJPA includes the persistence and orm schemas from the JPA specifications.\r\n+Copyright 2005-2009 Sun Microsystems, Inc. All rights reserved.\r\n+OpenJPA elects to include this software in this distribution under the\r\n+CDDL license.  You can obtain a copy of the License at:\r\n+    https://glassfish.dev.java.net/public/CDDL+GPL.html\r\n+The source code is available at:\r\n+    https://glassfish.dev.java.net/source/browse/glassfish/\r\n+\r\n+OpenJPA includes software written by Miroslav Nachev\r\n+\r\n+OpenJPA uses test code written by Charles Tillman.\r\n+\r"},{"sha":"b8a5c66db95ebf352ef0cc54060817258bbd953c","filename":"README.txt","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/README.txt","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/README.txt?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,13 @@\n+Apache OpenJPA README\n+=====================\n+\n+Thank you for downloading this release of Apache OpenJPA.\n+\n+The following files can be found in the openjpa-project subdirectory:\n+    BUILDING.txt\n+    CHANGES.txt\n+    RELEASE-NOTES.html\n+\n+For documentation and project information, please visit our project site:\n+    http://openjpa.apache.org/\n+"},{"sha":"8bdabad3156de32e806115577da37d32689f4240","filename":"openjpa-all/pom.xml","status":"modified","additions":39,"deletions":98,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -23,123 +23,57 @@\n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n-    <artifactId>openjpa</artifactId>\n+    <artifactId>openjpa-all</artifactId>\n     <packaging>jar</packaging>\n-    <name>OpenJPA Aggregate Jar</name>\n+    <name>OpenJPA Aggregate Jar with Dependencies</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0-SNAPSHOT</version>\n+        <version>2.0.0-M3</version>\n     </parent>\n \n     <build>\n         <plugins>\n             <plugin>\n-                <!--\n-                    Manually build an aggregate jar of all the other\n-                    openjpa-* jars using ant. We cannot use the assembly\n-                    plugin, since it doesn't provide support for appending\n-                    multiple same-named files to each other (which is\n-                    required for correctly aggregating services files).\n-                -->\n-                <artifactId>maven-antrun-plugin</artifactId>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n                 <executions>\n                     <execution>\n-                        <id>build-single-jar</id>\n-                        <phase>process-classes</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <unjar overwrite=\"false\" dest=\"${basedir}/target/classes\">\n-                                    <fileset dir=\"${basedir}/..\">\n-                                        <include name=\"*/target/openjpa-*.jar\" />\n-                                        <exclude name=\"*/target/openjpa-examples-*.jar\" />\n-                                    </fileset>\n-                                </unjar>\n-\n-                                <!--\n-                                    need to manually concatinate the services \n-                                    resources so they are aggregated\n-                                -->\n-                                <macrodef name=\"aggregate-file\">\n-                                   <attribute name=\"servicename\" />\n-                                    <sequential>\n-                                        <echo>Building service: @{servicename}</echo>\n-                                        <concat destfile=\"${basedir}/target/classes/META-INF/services/@{servicename}\">\n-                                            <fileset dir=\"${basedir}/..\" includes=\"*/src/main/resources/META-INF/services/@{servicename}\" />\n-                                        </concat>\n-                                    </sequential>\n-                                </macrodef>\n-\n-                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ProductDerivation\" />\n-                                <aggregate-file servicename=\"javax.persistence.spi.PersistenceProvider\" />\n-                                <aggregate-file servicename=\"org.apache.openjpa.kernel.exps.ExpressionParser\" />\n-                            </tasks>\n-                        </configuration>\n+                        <phase>package</phase>\n                         <goals>\n-                            <goal>run</goal>\n+                            <goal>shade</goal>\n                         </goals>\n+                        <configuration>\n+                            <createDependencyReducedPom>true</createDependencyReducedPom>\n+                            <keepDependenciesWithProvidedScope>true</keepDependenciesWithProvidedScope>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                    <manifestEntries>\n+                                        <Main-Class>org.apache.openjpa.conf.OpenJPAVersion</Main-Class>\n+                                        <Premain-Class>org.apache.openjpa.enhance.PCEnhancerAgent</Premain-Class>\n+                                        <Agent-Class>org.apache.openjpa.enhance.InstrumentationFactory</Agent-Class>\n+                                        <Can-Redefine-Classes>true</Can-Redefine-Classes>\n+                                        <Specification-Title>JSR-317 Java Persistence</Specification-Title>\n+                                        <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>\n+                                        <Specification-Version>2.0</Specification-Version>\n+                                    </manifestEntries>\n+                                </transformer>\n+                            </transformers>\n+                        </configuration>\n                     </execution>\n                 </executions>\n             </plugin>\n-\n-            <!--\n-                create enhancer pre-main attribute\n-            -->\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <configuration>\n-                    <archive>\n-                        <manifest>\n-                           <mainClass>org.apache.openjpa.conf.OpenJPAVersion</mainClass>\n-                        </manifest>\n-                        <manifestEntries>\n-                            <Premain-Class>\n-                                org.apache.openjpa.enhance.PCEnhancerAgent\n-                            </Premain-Class>\n-                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n-                        </manifestEntries>\n-                    </archive>\n-                </configuration>\n-            </plugin>\n         </plugins>\n     </build>\n     <dependencies>\n+        <!--\n+            Only include openjpa.jar and its required dependencies here, which\n+            will be used by maven-shade-plugin to determine the inclusions.\n+        -->\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-lib</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-jdbc</artifactId>\n+            <artifactId>openjpa</artifactId>\n             <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-xmlstore</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>net.sourceforge.serp</groupId>\n@@ -163,15 +97,22 @@\n         </dependency>\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\n+            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+        </dependency>\n+        <!-- optional runtime dependencies -->\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jms_1.1_spec</artifactId>\n         </dependency>\n+        <!-- excluded optional runtime dependencies\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jpa_3.0_spec</artifactId>\n+            <artifactId>geronimo-validation_1.0_spec</artifactId>\n         </dependency>\n+        -->\n     </dependencies>\n </project>"},{"sha":"13f4dfce2e942ed184ac90b364a936bfb76e33b8","filename":"openjpa-all/src/main/appended-resources/META-INF/LICENSE.vm","status":"added","additions":378,"deletions":0,"changes":378,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-all/src/main/appended-resources/META-INF/LICENSE.vm","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-all/src/main/appended-resources/META-INF/LICENSE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/src/main/appended-resources/META-INF/LICENSE.vm?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,378 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+\n+======================================\n+  LICENSES FOR INCLUDED DEPENDENCIES\n+======================================\n+\n+All the source code for the OpenJPA project is released under the\n+license above. Additionally, the OpenJPA binary distribution\n+includes a number of third-party files that are required in\n+order to the software to function. Unless noted below, these jars\n+and resource files are also released under the ASF license above.\n+\n+The exceptions are as follows:\n+\n+===========================\n+  orm-xsd.rsrc - included in the openjpa jar, taken from:\n+    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd)\n+  orm_2_0-xsd.rsrc - included in the openjpa jar, taken from:\n+    JSR-317 Java Persistence 2.0 Specification, Proposed Final Draft 2\n+  persistence-xsd.rsrc - included in the openjpa jar, taken from:\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd)\n+  persistence_2_0-xsd.rsrc - included in the openjpa jar, taken from:\n+    JSR-317 Java Persistence 2.0 Specification, Proposed Final Draft 2\n+  websphere-uow-api.jar - this jar file contains WebSphere proprietary\n+    API code which is licensed for use when compiling OpenJPA. The\n+    jar is not distributed with OpenJPA and is only included with the\n+    source archive in order to resolve compilation dependencies. \n+===========================\n+\n+COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n+\n+1. Definitions.\n+\n+1.1. Contributor means each individual or entity that creates or contributes to the creation of Modifications.\n+\n+1.2. Contributor Version means the combination of the Original Software, prior Modifications used by a Contributor (if any), and the Modifications made by that particular Contributor.\n+\n+1.3. Covered Software means (a) the Original Software, or (b) Modifications, or (c) the combination of files containing Original Software with files containing Modifications, in each case including portions thereof.\n+\n+1.4. Executable means the Covered Software in any form other than Source Code.\n+\n+1.5. Initial Developer means the individual or entity that first makes Original Software available under this License.\n+\n+1.6. Larger Work means a work which combines Covered Software or portions thereof with code not governed by the terms of this License.\n+\n+1.7. License means this document.\n+\n+1.8. Licensable means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.\n+\n+1.9. Modifications means the Source Code and Executable form of any of the following:\n+\n+A. Any file that results from an addition to, deletion from or modification of the contents of a file containing Original Software or previous Modifications;\n+\n+B. Any new file that contains any part of the Original Software or previous Modification; or\n+\n+C. Any new file that is contributed or otherwise made available under the terms of this License.\n+\n+1.10. Original Software means the Source Code and Executable form of computer software code that is originally released under this License.\n+\n+1.11. Patent Claims means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.\n+\n+1.12. Source Code means (a) the common form of computer software code in which modifications are made and (b) associated documentation included in or with such code.\n+\n+1.13. You (or Your) means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, You includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, control means (a)�the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b)�ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n+\n+2. License Grants.\n+\n+2.1. The Initial Developer Grant.\n+Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, the Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license:\n+(a) under intellectual property rights (other than patent or trademark) Licensable by Initial Developer, to use, reproduce, modify, display, perform, sublicense and distribute the Original Software (or portions thereof), with or without Modifications, and/or as part of a Larger Work; and\n+(b) under Patent Claims infringed by the making, using or selling of Original Software, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Software (or portions thereof).\n+(c) The licenses granted in Sections�2.1(a) and (b) are effective on the date Initial Developer first distributes or otherwise makes the Original Software available to a third party under the terms of this License.\n+(d) Notwithstanding Section�2.1(b) above, no patent license is granted: (1)�for code that You delete from the Original Software, or (2)�for infringements caused by: (i)�the modification of the Original Software, or (ii)�the combination of the Original Software with other software or devices.\n+\n+2.2. Contributor Grant.\n+Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n+(a) under intellectual property rights (other than patent or trademark) Licensable by Contributor to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof), either on an unmodified basis, with other Modifications, as Covered Software and/or as part of a Larger Work; and\n+(b) under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)�Modifications made by that Contributor (or portions thereof); and (2)�the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).\n+(c) The licenses granted in Sections�2.2(a) and 2.2(b) are effective on the date Contributor first distributes or otherwise makes the Modifications available to a third party.\n+(d) Notwithstanding Section�2.2(b) above, no patent license is granted: (1)�for any code that Contributor has deleted from the Contributor Version; (2)�for infringements caused by: (i)�third party modifications of Contributor Version, or (ii)�the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or (3)�under Patent Claims infringed by Covered Software in the absence of Modifications made by that Contributor.\n+\n+3. Distribution Obligations.\n+\n+3.1. Availability of Source Code.\n+\n+Any Covered Software that You distribute or otherwise make available in Executable form must also be made available in Source Code form and that Source Code form must be distributed only under the terms of this License. You must include a copy of this License with every copy of the Source Code form of the Covered Software You distribute or otherwise make available. You must inform recipients of any such Covered Software in Executable form as to how they can obtain such Covered Software in Source Code form in a reasonable manner on or through a medium customarily used for software exchange.\n+\n+3.2. Modifications.\n+\n+The Modifications that You create or to which You contribute are governed by the terms of this License. You represent that You believe Your Modifications are Your original creation(s) and/or You have sufficient rights to grant the rights conveyed by this License.\n+\n+3.3. Required Notices.\n+You must include a notice in each of Your Modifications that identifies You as the Contributor of the Modification. You may not remove or alter any copyright, patent or trademark notices contained within the Covered Software, or any notices of licensing or any descriptive text giving attribution to any Contributor or the Initial Developer.\n+\n+3.4. Application of Additional Terms.\n+You may not offer or impose any terms on any Covered Software in Source Code form that alters or restricts the applicable version of this License or the recipients rights hereunder. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, you may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear that any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.\n+\n+3.5. Distribution of Executable Versions.\n+You may distribute the Executable form of the Covered Software under the terms of this License or under the terms of a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable form does not attempt to limit or alter the recipients rights in the Source Code form from the rights set forth in this License. If You distribute the Covered Software in Executable form under a different license, You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.\n+\n+3.6. Larger Works.\n+You may create a Larger Work by combining Covered Software with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Software.\n+\n+4. Versions of the License.\n+\n+4.1. New Versions.\n+Sun Microsystems, Inc. is the initial license steward and may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Except as provided in Section 4.3, no one other than the license steward has the right to modify this License.\n+\n+4.2. Effect of New Versions.\n+\n+You may always continue to use, distribute or otherwise make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. If the Initial Developer includes a notice in the Original Software prohibiting it from being distributed or otherwise made available under any subsequent version of the License, You must distribute and make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. Otherwise, You may also choose to use, distribute or otherwise make the Covered Software available under the terms of any subsequent version of the License published by the license steward.\n+4.3. Modified Versions.\n+\n+When You are an Initial Developer and You want to create a new license for Your Original Software, You may create and use a modified version of this License if You: (a)�rename the license and remove any references to the name of the license steward (except to note that the license differs from this License); and (b)�otherwise make it clear that the license contains terms which differ from this License.\n+\n+5. DISCLAIMER OF WARRANTY.\n+\n+COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN AS IS BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\n+\n+6. TERMINATION.\n+\n+6.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.\n+\n+6.2. If You assert a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You assert such claim is referred to as Participant) alleging that the Participant Software (meaning the Contributor Version where the Participant is a Contributor or the Original Software where the Participant is the Initial Developer) directly or indirectly infringes any patent, then any and all rights granted directly or indirectly to You by such Participant, the Initial Developer (if the Initial Developer is not the Participant) and all Contributors under Sections�2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively and automatically at the expiration of such 60 day notice period, unless if within such 60 day period You withdraw Your claim with respect to the Participant Software against such Participant either unilaterally or pursuant to a written agreement with Participant.\n+\n+6.3. In the event of termination under Sections�6.1 or 6.2 above, all end user licenses that have been validly granted by You or any distributor hereunder prior to termination (excluding licenses granted to You by any distributor) shall survive termination.\n+\n+7. LIMITATION OF LIABILITY.\n+\n+UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTYS NEGLIGENCE TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\n+\n+8. U.S. GOVERNMENT END USERS.\n+\n+The Covered Software is a commercial item, as that term is defined in 48�C.F.R.�2.101 (Oct. 1995), consisting of commercial computer software (as that term is defined at 48 C.F.R. �252.227-7014(a)(1)) and commercial computer software documentation as such terms are used in 48�C.F.R.�12.212 (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Software with only those rights set forth herein. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or provision that addresses Government rights in computer software under this License.\n+\n+9. MISCELLANEOUS.\n+\n+This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by the law of the jurisdiction specified in a notice contained within the Original Software (except to the extent applicable law, if any, provides otherwise), excluding such jurisdictions conflict-of-law provisions. Any litigation relating to this License shall be subject to the jurisdiction of the courts located in the jurisdiction and venue specified in a notice contained within the Original Software, with the losing party responsible for costs, including, without limitation, court costs and reasonable attorneys fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. You agree that You alone are responsible for compliance with the United States export administration regulations (and the export control laws and regulation of any other countries) when You use, distribute or otherwise make available any Covered Software.\n+\n+10. RESPONSIBILITY FOR CLAIMS.\n+\n+As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.\n+\n+NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)\n+The GlassFish code released under the CDDL shall be governed by the laws of the State of California (excluding conflict-of-law provisions). Any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California and the state courts of the State of California, with venue lying in Santa Clara County, California. \n+\n+\n+serp-1.13.1.jar - BSD License\n+=============================\n+\n+Copyright (c) 2002, A. Abram White\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without \n+modification, are permitted provided that the following conditions are met:\n+\n+* Redistributions of source code must retain the above copyright notice, this \n+  list of conditions and the following disclaimer.\n+* Redistributions in binary form must reproduce the above copyright notice, \n+  this list of conditions and the following disclaimer in the documentation \n+  and/or other materials provided with the distribution.\n+* Neither the name of 'serp' nor the names of its contributors may\n+  be used to endorse or promote products derived from this software without \n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON \n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+"},{"sha":"7851f3473c75285503ce8de18b92f7b20357a944","filename":"openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,26 @@\n+\n+This is an implementation of an early-draft specification developed under the Java Community Process (JCP). The code is untested and presumed not to be a compatible implementation of the JSR-317 Java Persistence API, Version 2.0 specification.  We encourage you to migrate to an implementation of the JSR-317 Java Persistence API, Version 2.0 specification that has been tested and verified to be compatible as soon as such an implementation is available, and we encourage you to retain this notice in any implementation of JSR-317 Java Persistence API, Version 2.0 specification that you distribute.\n+\n+openjpa-all includes software developed by the:\n+    Apache Commons Collections project\n+    Apache Commons Lang project\n+    Apache Commons Logging project\n+    Apache Commons Pool project\n+    Apache Geronimo project (JMS 1.1, JTA 1.1 and JPA 2.0 spec apis)\n+    SERP project\n+\n+OpenJPA includes software developed by the SERP project\n+Copyright (c) 2002-2006, A. Abram White. All rights reserved.\n+\n+OpenJPA includes the persistence and orm schemas from the JPA specifications.\n+Copyright 2005-2007 Sun Microsystems, Inc. All rights reserved.\n+OpenJPA elects to include this software in this distribution under the\n+CDDL license.  You can obtain a copy of the License at:\n+    https://glassfish.dev.java.net/public/CDDL+GPL.html\n+The source code is available at:\n+    https://glassfish.dev.java.net/source/browse/glassfish/\n+\n+OpenJPA includes software written by Miroslav Nachev\n+\n+OpenJPA uses test code written by Charles Tillman.\n+"},{"sha":"f7324285d05fc60728752ffd8ce3e90cb26bc030","filename":"openjpa-examples/pom.xml","status":"modified","additions":30,"deletions":28,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -26,20 +26,19 @@\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-examples</artifactId>\n     <packaging>jar</packaging>\n-    <name>OpenJPA Persistence Examples</name>\n-    <description>OpenJPA Persistence Examples</description>\n+    <name>OpenJPA Examples</name>\n+    <description>OpenJPA Examples</description>\n     <url>http://openjpa.apache.org</url>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0-SNAPSHOT</version>\n+        <version>2.0.0-M3</version>\n     </parent>\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-persistence-jdbc</artifactId>\n             <version>${pom.version}</version>\n-            <scope>compile</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.derby</groupId>\n@@ -74,38 +73,41 @@\n                     </excludes>\n                 </configuration>\n             </plugin>\n-            <!-- ###\n             <plugin>\n-                <artifactId>maven-antrun-plugin</artifactId>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-Name>${artifactId}</Bundle-Name>\n+                        <Bundle-SymbolicName>${groupId}.${artifactId};singleton=true</Bundle-SymbolicName>\n+                        <Bundle-DocURL>http://openjpa.apache.org/documentation.html</Bundle-DocURL>\n+                        <Bundle-Activator>hellojpa.Main</Bundle-Activator>\n+                        <!-- Eclipse metadata -->\n+                        <Eclipse-Autostart>false</Eclipse-Autostart>\n+                        <Bundle-ClassPath>.</Bundle-ClassPath>\n+                    </instructions>\n+                    <unpackBundle>true</unpackBundle>\n+                </configuration>\n                 <executions>\n                     <execution>\n-                        <phase>test-compile</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <path id=\"cp\">\n-                                    <path refid=\"maven.test.classpath\" />\n-                                    <path refid=\"maven.compile.classpath\" />\n-                                    <path refid=\"maven.dependency.classpath\" />\n-                                </path>\n-\t\t\t\t\t\t\t\t<taskdef name=\"openjpac\" classname= \"org.apache.openjpa.ant.PCEnhancerTask\">\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\" />\n-\t\t\t\t\t\t\t\t</taskdef>\n-                                <fileset id=\"enhance.path.ref\" dir=\"${project.build.testOutputDirectory}\">\n-                                    <include name=\"**/*.class\" />\n-                                </fileset>\n-\t\t\t\t\t\t\t\t<openjpac>\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\" />\n-\t\t\t\t\t\t\t\t\t<fileset refid=\"enhance.path.ref\" />\n-\t\t\t\t\t\t\t\t</openjpac>\n-                            </tasks>\n-                        </configuration>\n+                        <id>bundle-manifest</id>\n+                        <phase>process-classes</phase>\n                         <goals>\n-                            <goal>run</goal>\n+                            <goal>manifest</goal>\n                         </goals>\n                     </execution>\n                 </executions>\n             </plugin>\n-            -->\n         </plugins>\n     </build>\n </project>"},{"sha":"880c8667787f2538e46aa38944118094c2729f54","filename":"openjpa-examples/src/main/java/META-INF/persistence.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/META-INF/persistence.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -81,4 +81,14 @@\n     <persistence-unit name=\"reversemapping\" transaction-type=\"RESOURCE_LOCAL\">\n         <mapping-file>reversemapping/orm.xml</mapping-file>\n     </persistence-unit>\n+    \n+    <persistence-unit name=\"embeddables\" transaction-type=\"RESOURCE_LOCAL\">\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <class>embeddables.Address</class>\n+        <class>embeddables.ContactInfo</class>\n+        <class>embeddables.Coordinates</class>\n+        <class>embeddables.Phone</class>\n+        <class>embeddables.User</class>\n+    </persistence-unit>\n+    \n </persistence>"},{"sha":"314d644be15012d06dd59060aa7cb764cc2eb4df","filename":"openjpa-examples/src/main/java/README.txt","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/README.txt","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/README.txt?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,24 @@\n+Apache OpenJPA Examples\n+Copyright © 2005-2009, The Apache Software Foundation.\n+Licensed under ASL 2.0 - http://www.apache.org/licenses/LICENSE-2.0\n+--------------------------------------------------------------------------------\n+\n+Prerequisites:\n+  The following must be on the user's path:\n+         - Java SE 5 or 6\n+         - Apache ANT v1.6.5 or later\n+\n+Building and Running Individual Examples:\n+  1) Open a command prompt to the directory where this README is located\n+  2) Change to the subdirectory of the example to build and run, like:\n+         cd hellojpa\n+  3) Run ANT\n+         ant\n+     For the hellojpa exmaple, at the end of the build you should see the text:\n+         \"Hello Persistence!\"\n+\n+Building and Running All Examples:\n+  1) Open a command prompt to the directory where this README is located\n+  2) Run ANT with the \"all\" project\n+         ant all\n+"},{"sha":"55dc44947a98143d5935cfee2aa584537548b240","filename":"openjpa-examples/src/main/java/build.xml","status":"modified","additions":30,"deletions":1,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/build.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/build.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -32,21 +32,50 @@\n \n     <target name=\"usagewarning\">\n         <fail>\n-Please traverse to a sub-directory and run \"ant\" from there.\n+Please traverse to a sub-directory, like hellojpa, and run \"ant\" from there.\n         </fail>\n     </target>\n \n+    <target name=\"init\" depends=\"init:discover, init:windows, init:unix\">\n+    </target>\n+    <target name=\"init:discover\">\n+        <condition property=\"isWindows\">\n+            <os family=\"windows\"/>\n+        </condition>\n+    </target>\n+    <target name=\"init:windows\" if=\"isWindows\">\n+        <property name=\"platform.script.ext\" value=\".bat\"/>\n+    </target>\n+    <target name=\"init:unix\" unless=\"isWindows\">\n+        <property name=\"platform.script.ext\" value=\"\"/>\n+    </target>\n+\n+    <target name=\"all\" depends=\"init\">\n+        <exec dir=\"${basedir}/hellojpa\" executable=\"ant${platform.script.ext}\"/>\n+        <exec dir=\"${basedir}/relations\" executable=\"ant${platform.script.ext}\"/>\n+        <exec dir=\"${basedir}/reversemapping\" executable=\"ant${platform.script.ext}\"/>\n+    </target>\n+\n     <path id=\"classpath\"\n         description=\"The classpath to use for compiling and running\">\n         <pathelement path=\"${parent}\"/>\n+        <!-- we could include the individual jars as below, but lets use the\n+             openjpa-all.jar with Derby instead\n         <fileset dir=\"${root}\">\n             <include name=\"**/*.jar\"/>\n+            <exclude name=\"openjpa-all-*.jar\"/>\n+        </fileset>\n+        -->\n+        <fileset dir=\"${root}\">\n+            <include name=\"openjpa-all-*.jar\"/>\n+            <include name=\"lib/derby*.jar\"/>\n         </fileset>\n     </path>\n \n     <path id=\"javaagent\">\n         <fileset dir=\"${root}\">\n             <include name=\"openjpa-*.jar\"/>\n+            <exclude name=\"openjpa-all-*.jar\"/>\n         </fileset>\n     </path>\n     <pathconvert property=\"javaagent\" refid=\"javaagent\"/>"},{"sha":"6e998410add2a61b10f3ba4faae0a3a6788c956f","filename":"openjpa-examples/src/main/java/embeddables/Address.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Address.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/Address.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package embeddables;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Embeddable;\n+import javax.persistence.ManyToOne;\n+\n+@Embeddable\n+public class Address {\n+    @Basic\n+    private String street;\n+    @Basic\n+    private String city;\n+    @Basic\n+    private String state;\n+    @Basic\n+    private Integer zip;\n+\n+    // Relationship from an Embeddable to an Entity\n+    @ManyToOne(cascade = CascadeType.ALL)\n+    Coordinates coordinates;\n+\n+    public Address() {\n+\n+    }\n+\n+    public Address(String street, String city, String state, Integer zip, Coordinates c) {\n+        this.street = street;\n+        this.city = city;\n+        this.state = state;\n+        this.zip = zip;\n+        coordinates = c;\n+    }\n+\n+    public String toString() {\n+        return street + \" \" + city + \", \" + state + \" \" + zip;\n+    }\n+}"},{"sha":"b5338bcae1413826372be7300e0f5d7d52739b23","filename":"openjpa-examples/src/main/java/embeddables/ContactInfo.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/ContactInfo.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/ContactInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/ContactInfo.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package embeddables;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.Embedded;\n+\n+@Embeddable\n+public class ContactInfo {\n+    public ContactInfo() {\n+    }\n+\n+    public ContactInfo(Address a, Phone p) {\n+        homeAddress = a;\n+        homePhone = p;\n+    }\n+\n+    // Nested embeddable\n+    @Embedded\n+    Address homeAddress;\n+\n+    // Nested embeddable\n+    @Embedded\n+    Phone homePhone;\n+\n+    public String toString() {\n+        return homeAddress.toString() + \" \" + homePhone.toString();\n+    }\n+}"},{"sha":"889b5de01f1198996511ea8b2a98fa14528e4c83","filename":"openjpa-examples/src/main/java/embeddables/Coordinates.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Coordinates.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Coordinates.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/Coordinates.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package embeddables;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Coordinates {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    int id;\n+\n+    @Basic\n+    String longitude;\n+    @Basic\n+    String latitude;\n+\n+    public Coordinates() {\n+    }\n+\n+    public Coordinates(String lon, String lat) {\n+        longitude = lon;\n+        latitude = lat;\n+    }\n+}"},{"sha":"c82e4987439b0cafc451cd3025e1a867f0033c0f","filename":"openjpa-examples/src/main/java/embeddables/Main.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Main.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/Main.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package embeddables;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws Exception {\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"embeddables\", System.getProperties());\n+        EntityManager em = emf.createEntityManager();\n+        init(em);\n+        runQueries(em);\n+    }\n+\n+    public static void runQueries(EntityManager em) {\n+        // Find all users that have a secondary address that is in MI\n+        Query q = em.createQuery(\"SELECT u FROM User u , in (u.addresses) a \" + \"WHERE a.state='xx'\");\n+\n+        List<User> res = q.getResultList();\n+        for (User b : res) {\n+            System.out.println(b);\n+        }\n+\n+        Query q1 = em.createQuery(\"SELECT u FROM User u , in (u.addresses) a \" + \"WHERE a.coordinates.longitude='38'\");\n+        List<User> res1 = q1.getResultList();\n+        for (User b : res1) {\n+            System.out.println(b);\n+        }\n+\n+        // Find users who's conatctInfo cell phone is 507-555-5555\n+        // Entity -> embedded -> embedded\n+        q =\n+            em.createQuery(\"SELECT DISTINCT u FROM User u \" + \"WHERE u.contactInfo.homePhone.number='507-555-5555'\"\n+                + \"AND u.contactInfo.homePhone.type='cell'\");\n+        res = q.getResultList();\n+        for (User b : res) {\n+            System.out.println(b);\n+        }\n+\n+        // Find users who's conatctInfo cell phone is 507-555-5555\n+        // Entity -> embedded -> embedded\n+        q =\n+            em.createQuery(\"SELECT u FROM User u \" + \"WHERE u.contactInfo.homePhone.number='507-555-5555'\"\n+                + \"AND u.contactInfo.homePhone.type='cell'\");\n+        res = q.getResultList();\n+        for (User b : res) {\n+            System.out.println(b);\n+        }\n+\n+    }\n+\n+    public static void init(EntityManager em) {\n+        Coordinates c = new Coordinates(\"37.0\", \"23.516\");\n+        Coordinates c1 = new Coordinates(\"38\", \"23.516\");\n+        Coordinates c2 = new Coordinates(\"39\", \"23.516\");\n+\n+        Phone p = new Phone(\"507-555-5555\", \"cell\");\n+        Address a = new Address(\"Cariou Ln\", \"Minneapolis\", \"MN\", 90210, c);\n+        ContactInfo ci = new ContactInfo(a, p);\n+\n+        User u = new User(ci, \"user_name\" + System.currentTimeMillis(), \"user_asdf\");\n+        u.addAddress(new Address(\"100 Rodeo Dr\", \"Arroyo Grande\", \"CA\", 93420, c1));\n+        u.addAddress(new Address(\"1700 W 3rd Ave\", \"Flint\", \"MI\", 48504, c2));\n+        u.addAddress(new Address(\"4301 Farm Ln.\", \"East Lansing\", \"MI\", 48824, c2));\n+\n+        em.getTransaction().begin();\n+        em.persist(c);\n+        em.persist(c1);\n+        em.persist(c2);\n+        em.persist(u);\n+        em.getTransaction().commit();\n+\n+    }\n+\n+}"},{"sha":"0583f09fcf9850afb916a9a18f8fc57e309e2410","filename":"openjpa-examples/src/main/java/embeddables/Phone.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Phone.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/Phone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/Phone.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package embeddables;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class Phone {\n+    public Phone() {\n+\n+    }\n+\n+    public Phone(String n, String t) {\n+        number = n;\n+        type = t;\n+    }\n+\n+    @Basic\n+    private String number;\n+    @Basic\n+    private String type;\n+\n+    public String toString() {\n+        return \"type: \" + type + \" number:\" + number;\n+    }\n+}"},{"sha":"f6700ca39932a7307df040281c5d8a613db175f7","filename":"openjpa-examples/src/main/java/embeddables/User.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/User.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/User.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/User.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package embeddables;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+// User is a reserved keyword for derby, so use a different table name.\n+@Table(name = \"User0\")\n+public class User {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id;\n+    @Embedded\n+    ContactInfo contactInfo;\n+\n+    // Collection of embeddables\n+    @ElementCollection\n+    @CollectionTable(name = \"user_addresses\")\n+    private Set<Address> addresses = new HashSet<Address>();\n+    @Basic\n+    private String user_name;\n+\n+    @Basic\n+    private String user;\n+\n+    public User() {\n+    }\n+\n+    public User(ContactInfo c, String u_n, String u) {\n+        contactInfo = c;\n+        user = u;\n+        user_name = u_n;\n+\n+    }\n+\n+    public void addAddress(Address a) {\n+        addresses.add(a);\n+    }\n+\n+    public String toString() {\n+        String res = user_name + \" \" + user + \" \" + contactInfo;\n+\n+        for (Address a : addresses) {\n+            res += \"\\n\" + a.toString();\n+        }\n+        return res;\n+    }\n+}"},{"sha":"78d40508274223e2fd0c1578394196535da25c28","filename":"openjpa-examples/src/main/java/embeddables/build.xml","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/build.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/embeddables/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/embeddables/build.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<project name=\"embeddables\" default=\"run\">\n+    <property name=\"example\" value=\"embeddables\"/>\n+    <import file=\"../build.xml\"/>\n+</project>"},{"sha":"7ae8c6d17c8914d9f1f26080ef994db91882aa80","filename":"openjpa-examples/src/main/java/hellojpa/Main.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/hellojpa/Main.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-examples/src/main/java/hellojpa/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/hellojpa/Main.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -74,3 +74,4 @@ public static void main(String[] args) {\n         factory.close();\n     }\n }\n+"},{"sha":"ee8688dbd982aab5d23124e99b01316ad320666a","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -32,13 +32,14 @@\n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n-    <artifactId>examples</artifactId>\n+    <artifactId>openjpa-integration-examples</artifactId>\n     <packaging>pom</packaging>\n-    <name>OpenJPA Examples Integration Tests</name>\n+    <name>OpenJPA Integration Tests - Examples</name>\n+    <description>OpenJPA Integration Tests - Examples</description>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.2.0-SNAPSHOT</version>\n+        <version>2.0.0-M3</version>\n     </parent>\n \n     <profiles>\n@@ -47,6 +48,7 @@\n     <build>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -57,13 +59,14 @@\n                         <echo>Running OpenJPA Examples</echo>\n \n                         <property name=\"examples.base\" value=\"${basedir}/target/examples\" />\n+                        <delete dir=\"${examples.base}\" quiet=\"true\"/>\n                         <mkdir dir=\"${examples.base}\" />\n \n-                        <unzip overwrite=\"false\" dest=\"${examples.base}\" src=\"../../target/site/downloads/apache-openjpa-${pom.version}-binary.zip\" />\n+                        <unzip overwrite=\"false\" dest=\"${examples.base}\" src=\"../../openjpa-project/target/site/downloads/apache-openjpa-${pom.version}-binary.zip\" />\n \n                         <path id=\"assembly.classpath\"> \n                             <fileset dir=\"${examples.base}\">\n-                                <include name=\"**/*.jar\" />\n+                                <include name=\"**/openjpa-all-${pom.version}.jar\" />\n                             </fileset>\n                         </path>\n                         <available classname=\"org.apache.openjpa.conf.OpenJPAVersion\" classpathref=\"assembly.classpath\" property=\"unzip.success\" />\n@@ -91,7 +94,7 @@\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa</artifactId>\n+            <artifactId>openjpa-all</artifactId>\n             <version>${pom.version}</version>\n         </dependency>\n     </dependencies>"},{"sha":"5b4871ec6b87ab807eefa880dd7cbed1649db43b","filename":"openjpa-integration/osgi-itests/pom.xml","status":"added","additions":236,"deletions":0,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,236 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<!--\n+    Maven release plugin requires the project tag to be on a single line.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-integration</artifactId>\n+        <version>2.0.0-M3</version>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>openjpa-integration-osgi-itests</artifactId>\n+    <version>2.0.0-M3</version>\n+    <name>OpenJPA Integration Tests - OSGi</name>\n+    <description>OpenJPA Integration Tests - OSGi</description>\n+\n+    <dependencies>\n+        <!--\n+            Note: Scope should be set to test for all depends\n+        -->\n+        <!-- OpenJPA runtime and depends -->\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa</artifactId>\n+            <version>${version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jms_1.1_spec</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-validation_1.0_spec</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Note: Overriding parent versions as these have bundle metadata -->\n+        <dependency>\n+            <groupId>commons-collections</groupId>\n+            <artifactId>commons-collections</artifactId>\n+            <version>3.2.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-lang</groupId>\n+            <artifactId>commons-lang</artifactId>\n+            <version>2.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-pool</groupId>\n+            <artifactId>commons-pool</artifactId>\n+            <version>1.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Testcase depends -->\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-examples</artifactId>\n+            <version>${version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.derby</groupId>\n+            <artifactId>derby</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- use the bundlized version of commons-dbcp from servicemix -->\n+        <dependency>\n+            <groupId>org.apache.servicemix.bundles</groupId>\n+            <artifactId>org.apache.servicemix.bundles.commons-dbcp</artifactId>\n+            <version>1.2.2_3</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Test framework depends -->\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.5</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.exam</groupId>\n+            <artifactId>pax-exam</artifactId>\n+            <version>0.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.exam</groupId>\n+            <artifactId>pax-exam-junit</artifactId>\n+            <version>0.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.exam</groupId>\n+            <artifactId>pax-exam-container-default</artifactId>\n+            <version>0.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.exam</groupId>\n+            <artifactId>pax-exam-junit-extender-impl</artifactId>\n+            <version>0.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+            <version>1.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-service</artifactId>\n+            <version>1.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.url</groupId>\n+            <artifactId>pax-url-mvn</artifactId>\n+            <version>0.3.3</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.felix</groupId>\n+            <artifactId>org.osgi.core</artifactId>\n+            <version>1.2.0</version>\n+        </dependency>\n+        <!-- Apache Felix framework -->\n+        <dependency>\n+            <groupId>org.apache.felix</groupId>\n+            <artifactId>org.apache.felix.configadmin</artifactId>\n+            <version>1.0.10</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Note: This depend has to be after all the rest -->\n+        <dependency>\n+            <groupId>org.apache.felix</groupId>\n+            <artifactId>org.apache.felix.main</artifactId>\n+            <version>1.6.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ops4j.releases</id>\n+            <url>http://repository.ops4j.org/maven2</url>\n+        </repository>\n+        <repository>\n+            <id>ops4j.snapshots</id>\n+            <url>http://repository.ops4j.org/mvn-snapshots</url>\n+        </repository>\n+    </repositories>\n+    <pluginRepositories>\n+        <pluginRepository>\n+            <id>ops4j.releases</id>\n+            <url>http://repository.ops4j.org/maven2</url>\n+            <snapshots>\n+                <enabled>true</enabled>\n+            </snapshots>\n+        </pluginRepository>\n+    </pluginRepositories>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/test/resources</directory>\n+            </resource>\n+            <!-- also include license and notice files in all the jars -->\n+            <resource>\n+                <directory>${basedir}/../../openjpa-project/</directory>\n+                <includes>\n+                    <include>NOTICE.txt</include>\n+                    <include>LICENSE.txt</include>\n+                    <include>DISCLAIMER.txt</include>\n+                </includes>\n+                <targetPath>META-INF</targetPath>\n+            </resource>\n+        </resources>\n+\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.servicemix.tooling</groupId>\n+                <artifactId>depends-maven-plugin</artifactId>\n+                <version>1.1</version>\n+                <executions>\n+                    <execution>\n+                        <id>generate-depends-file</id>\n+                        <goals>\n+                            <goal>generate-depends-file</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <forkMode>pertest</forkMode>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>"},{"sha":"ece1fa5058014101c0db4c790ce3390a42f2c7fa","filename":"openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.integration.osgi.itests;\n+\n+import org.ops4j.pax.exam.CoreOptions;\n+import org.ops4j.pax.exam.Inject;\n+import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.framework.Filter;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.util.tracker.ServiceTracker;\n+\n+public abstract class AbstractIntegrationTest {\n+\n+    public static final long DEFAULT_TIMEOUT = 30000;\n+\n+    @Inject\n+    protected BundleContext bundleContext;\n+\n+\n+    protected <T> T getOsgiService(Class<T> type, long timeout) {\n+        return getOsgiService(type, null, timeout);\n+    }\n+\n+    protected <T> T getOsgiService(Class<T> type) {\n+        return getOsgiService(type, null, DEFAULT_TIMEOUT);\n+    }\n+\n+    protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {\n+        ServiceTracker tracker = null;\n+        try {\n+            String flt;\n+            if (filter != null) {\n+                if (filter.startsWith(\"(\")) {\n+                    flt = \"(&(\" + Constants.OBJECTCLASS + \"=\" + type.getName() + \")\" + filter + \")\";\n+                } else {\n+                    flt = \"(&(\" + Constants.OBJECTCLASS + \"=\" + type.getName() + \")(\" + filter + \"))\";\n+                }\n+            } else {\n+                flt = \"(\" + Constants.OBJECTCLASS + \"=\" + type.getName() + \")\";\n+            }\n+            Filter osgiFilter = FrameworkUtil.createFilter(flt);\n+            tracker = new ServiceTracker(bundleContext, osgiFilter, null);\n+            tracker.open();\n+            // Note that the tracker is not closed to keep the reference\n+            // This is buggy, has the service reference may change i think\n+            Object svc = type.cast(tracker.waitForService(timeout));\n+            if (svc == null) {\n+                throw new RuntimeException(\"Gave up waiting for service \" + flt);\n+            }\n+            return type.cast(svc);\n+        } catch (InvalidSyntaxException e) {\n+            throw new IllegalArgumentException(\"Invalid filter\", e);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected Bundle installBundle(String groupId, String artifactId) throws Exception {\n+        MavenArtifactProvisionOption mvnUrl = mavenBundle(groupId, artifactId);\n+        return bundleContext.installBundle(mvnUrl.getURL());\n+    }\n+\n+    protected Bundle getInstalledBundle(String symbolicName) {\n+        for (Bundle b : bundleContext.getBundles()) {\n+            if (symbolicName.equals(b.getSymbolicName())) {\n+                return b;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) {\n+        return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();\n+    }\n+}"},{"sha":"a623fd35e710e0c7fb682d75a8a660d22f0703f1","filename":"openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.integration.osgi.itests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import static org.ops4j.pax.exam.CoreOptions.felix;\n+import static org.ops4j.pax.exam.CoreOptions.mavenConfiguration;\n+import static org.ops4j.pax.exam.CoreOptions.options;\n+import static org.ops4j.pax.exam.CoreOptions.systemProperty;\n+import org.ops4j.pax.exam.Option;\n+import org.ops4j.pax.exam.OptionUtils;\n+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.profile;\n+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;\n+import org.ops4j.pax.exam.junit.JUnit4TestRunner;\n+import org.osgi.framework.Bundle;\n+\n+\n+@RunWith(JUnit4TestRunner.class)\n+public class TestOpenJPA extends AbstractIntegrationTest {\n+\n+    @Test\n+    public void testExamples() throws Exception {\n+        System.out.println(\"********** testExamples starting\");\n+        System.out.println(\"***** Checking that openjpa-examples is installed\");\n+        // check for our openjpa-examples via the SymbolicName\n+        Bundle bundle = getInstalledBundle(\"org.apache.openjpa.openjpa-examples\");\n+        assertNotNull(bundle);\n+        System.out.println(\"***** Starting openjpa-examples bundle\");\n+        bundle.start();\n+        System.out.println(\"***** Stopping openjpa-examples bundle\");\n+        bundle.stop();\n+        System.out.println(\"********** testExamples returning\");\n+    }\n+    \n+    @Test\n+    public void testEMF() throws Exception {\n+        System.out.println(\"********** testEMF starting\");\n+        System.out.println(\"***** Creating a EMF\");\n+        EntityManagerFactory emf = Persistence.\n+            createEntityManagerFactory(\"hellojpa\", System.getProperties());\n+        assertNotNull(emf);\n+        System.out.println(\"***** After createEMF\");\n+        //OpenJPAConfiguration conf = emf.getConfiguration();\n+        //System.out.println(\"***** After Config *****\");\n+        //assertNotNull(conf);\n+        System.out.println(\"********** testEMF returning\");\n+    }\n+\n+    @org.ops4j.pax.exam.junit.Configuration\n+    public static Option[] configuration() {\n+        Option[] options = options(\n+            // Log\n+            mavenBundle(\"org.ops4j.pax.logging\", \"pax-logging-api\"),\n+            mavenBundle(\"org.ops4j.pax.logging\", \"pax-logging-service\"),\n+            // Felix Config Admin\n+            mavenBundle(\"org.apache.felix\", \"org.apache.felix.configadmin\"),\n+            // Maven url handler\n+            mavenBundle(\"org.ops4j.pax.url\", \"pax-url-mvn\"),\n+\n+            // this is how you set the default log level when using pax logging\n+            systemProperty(\"org.ops4j.pax.logging.DefaultServiceLog.level\")\n+                .value(\"DEBUG\"),\n+\n+            // OpenJPA runtime depends\n+            mavenBundle(\"org.apache.geronimo.specs\", \"geronimo-jpa_2.0_spec\"),\n+            mavenBundle(\"org.apache.geronimo.specs\",\n+                \"geronimo-validation_1.0_spec\"),\n+            //mavenBundle(\"org.apache.geronimo.specs\", \"geronimo-jms_1.1_spec\"),\n+            //mavenBundle(\"org.apache.geronimo.specs\", \"geronimo-jta_1.1_spec\"),\n+            mavenBundle(\"commons-collections\", \"commons-collections\"),\n+            mavenBundle(\"commons-lang\", \"commons-lang\"),\n+            mavenBundle(\"commons-pool\", \"commons-pool\"),\n+            mavenBundle(\"org.apache.openjpa\", \"openjpa\"),\n+            \n+            // Testcase depends\n+            mavenBundle(\"org.apache.derby\", \"derby\"),\n+            mavenBundle(\"org.apache.servicemix.bundles\",\n+                \"org.apache.servicemix.bundles.commons-dbcp\"),\n+            mavenBundle(\"org.apache.openjpa\", \"openjpa-examples\"),\n+            //vmOption(\"-Xdebug -Xrunjdwp:transport=dt_socket,\n+            //server=y,suspend=y,address=5005\"),\n+\n+            felix() //, equinox(), knopflerfish()\n+        );\n+\n+        // use config generated by the Maven plugin (until PAXEXAM-62/64 fixed)\n+        if (TestOpenJPA.class.getClassLoader().getResource(\n+                \"META-INF/maven/paxexam-config.args\") != null) {\n+            options = OptionUtils.combine(options, mavenConfiguration());\n+        }\n+\n+        return options;\n+    }\n+}\n+"},{"sha":"6ceab49d4e8360fbfb69154df8327c8ac4289dd2","filename":"openjpa-integration/osgi-itests/src/test/resources/log4j.properties","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/osgi-itests/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/test/resources/log4j.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,33 @@\n+################################################################################\n+#\n+#    Licensed to the Apache Software Foundation (ASF) under one or more\n+#    contributor license agreements.  See the NOTICE file distributed with\n+#    this work for additional information regarding copyright ownership.\n+#    The ASF licenses this file to You under the Apache License, Version 2.0\n+#    (the \"License\"); you may not use this file except in compliance with\n+#    the License.  You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing, software\n+#    distributed under the License is distributed on an \"AS IS\" BASIS,\n+#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#    See the License for the specific language governing permissions and\n+#    limitations under the License.\n+#\n+################################################################################\n+\n+# Root logger\n+log4j.rootLogger=DEBUG, stdout\n+\n+# CONSOLE appender not used by default\n+log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n+log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} | %-5.5p | %-16.16t | %-32.32c{1} | %-32.32C %4L | %m%n\n+\n+# File appender\n+log4j.appender.out=org.apache.log4j.FileAppender\n+log4j.appender.out.layout=org.apache.log4j.PatternLayout\n+log4j.appender.out.layout.ConversionPattern=%d{ABSOLUTE} | %-5.5p | %-16.16t | %-32.32c{1} | %-32.32C %4L | %m%n\n+log4j.appender.out.file=${karaf.base}/data/log/karaf.log\n+log4j.appender.out.append=true"},{"sha":"af5dd9fb203a90095429a43ad1f744b02c386209","filename":"openjpa-integration/pom.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -29,10 +29,12 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0-SNAPSHOT</version>\n+        <version>2.0.0-M3</version>\n     </parent>\n     <modules>\n         <module>examples</module>\n         <module>tck</module>\n+        <module>validation</module>\n+        <!-- <module>osgi-itests</module> -->\n     </modules>\n </project>"},{"sha":"2d93049affe2c5ddf26e2a37eeba8b095301ff4b","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -55,13 +55,14 @@\n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n-    <artifactId>tck</artifactId>\n+    <artifactId>openjpa-integration-tck</artifactId>\n     <packaging>pom</packaging>\n-    <name>OpenJPA JPA TCK Integration Tests</name>\n+    <name>OpenJPA Integration Tests - JPA TCK</name>\n+    <description>OpenJPA Integration Tests - JPA TCK</description>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.2.0-SNAPSHOT</version>\n+        <version>2.0.0-M3</version>\n     </parent>\n \n     <profiles>\n@@ -70,6 +71,7 @@\n     <build>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -100,7 +102,6 @@\n                             <!-- use official JPA API instead of GM's -->\n                             <fileset dir=\"${tck.dir}/lib\">\n                                 <include name=\"**/*.jar\" />\n-                                <exclude name=\"**/geronimo-jpa*\" />\n                             </fileset>\n                             <pathelement path=\"${java.class.path}\" />\n                             <pathelement path=\"${db.jar}\" />\n@@ -175,7 +176,7 @@ databaseName=${db.name}\n                         </concat>\n \n                         <path id=\"agent.path\">\n-                            <fileset dir=\"../../openjpa-all/target\">\n+                            <fileset dir=\"../../openjpa/target\">\n                                 <include name=\"*.jar\" />\n                             </fileset>\n                         </path>\n@@ -278,11 +279,11 @@ databaseName=${db.name}\n     </repositories>\n \n     <dependencies>\n-        <!-- use the authoritative javax.persistence API for testing -->\n+        <!--  Use early access version of JPA spec from Geronimo -->\n         <dependency>\n-            <groupId>javax.persistence</groupId>\n-            <artifactId>persistence-api</artifactId>\n-            <version>1.0b</version>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+            <scope>compile</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n@@ -292,7 +293,7 @@ databaseName=${db.name}\n         <dependency>\n             <groupId>org.apache.derby</groupId>\n             <artifactId>derby</artifactId>\n-            <version>10.2.1.6</version>\n+            <version>${derby.version}</version>\n             <scope>compile</scope>\n         </dependency>\n     </dependencies>"},{"sha":"80ef76d13869860e78109c71c2e3bb94157c5e68","filename":"openjpa-integration/validation/pom.xml","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,319 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-integration</artifactId>\n+        <version>2.0.0-M3</version>\n+    </parent>\n+\n+    <artifactId>openjpa-integration-validation</artifactId>\n+    <packaging>jar</packaging>\n+    <name>OpenJPA Integration Tests - Bean Validation</name>\n+    <description>OpenJPA Integration Tests - Bean Validation</description>\n+\n+    <properties>\n+        <dbcp.maxActive>10</dbcp.maxActive>\n+        <dbcp.maxIdle>5</dbcp.maxIdle>\n+        <dbcp.minIdle>2</dbcp.minIdle>\n+        <dbcp.maxWait>10000</dbcp.maxWait>\n+        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n+        <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n+        <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n+        <connection.username />\n+        <connection.password />\n+    </properties>\n+\n+    <profiles>\n+        <!-- Profile for testing with Agimatec validation provider -->\n+        <profile>\n+            <id>agimatec</id>\n+            <activation>\n+                <property>\n+                    <name>agimatec</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <!-- See http://code.google.com/p/agimatec-validation/wiki/GettingStarted -->\n+                <!-- Validation API RI, which we'll test with the RI\n+                <dependency>\n+                    <groupId>javax.validation</groupId>\n+                    <artifactId>validation-api</artifactId>\n+                    <version>1.0.CR5</version>\n+                    <scope>test</scope>\n+                </dependency>\n+                -->\n+                <dependency>\n+                    <groupId>org.apache.geronimo.specs</groupId>\n+                    <artifactId>geronimo-validation_1.0_spec</artifactId>\n+                    <scope>test</scope>\n+                </dependency>\n+                <dependency>\n+                    <groupId>com.agimatec</groupId>\n+                    <artifactId>agimatec-jsr303</artifactId>\n+                    <version>0.9.3</version>\n+                    <scope>test</scope>\n+                    <exclusions>\n+                        <!-- force usage of the geronimo-validation_1.0_spec -->\n+                        <exclusion>\n+                            <groupId>javax.validation</groupId>\n+                            <artifactId>validation-api</artifactId>\n+                        </exclusion>\n+                        <!-- use our level of the geronimo-jpa_2.0_spec -->\n+                        <exclusion>\n+                            <groupId>javax.validation</groupId>\n+                            <artifactId>validation-api</artifactId>\n+                        </exclusion>\n+                    </exclusions>\n+                </dependency>\n+                <dependency>\n+                    <groupId>com.agimatec</groupId>\n+                    <artifactId>agimatec-validation</artifactId>\n+                    <version>0.9.3</version>\n+                    <scope>test</scope>\n+                </dependency>\n+                <dependency>\n+                    <groupId>commons-beanutils</groupId>\n+                    <artifactId>commons-beanutils</artifactId>\n+                    <version>1.8.0</version>\n+                    <scope>test</scope>\n+                </dependency>\n+                <dependency>\n+                    <groupId>commons-lang</groupId>\n+                    <artifactId>commons-lang</artifactId>\n+                    <version>2.4</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <repositories>\n+                <repository>\n+                    <id>agimatec.oss.sonatype.org</id>\n+                    <name>Sonatype OSS Repository</name>\n+                    <url>http://oss.sonatype.org/content/repositories/agimatec</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                        <updatePolicy>daily</updatePolicy>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>fail</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>\n+\n+        <!-- Default profile for testing with Hibernate Bean Validation RI -->\n+        <profile>\n+            <id>hibernate</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+                <property>\n+                    <name>hibernate</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>javax.validation</groupId>\n+                    <artifactId>validation-api</artifactId>\n+                    <version>1.0.CR5</version>\n+                    <scope>test</scope>\n+                </dependency>\n+                <!-- Hibernate that implements 1.0.CR5 -->\n+                <dependency>\n+                    <groupId>org.hibernate</groupId>\n+                    <artifactId>hibernate-validator</artifactId>\n+                    <version>4.0.0.CR1</version>\n+                    <scope>test</scope>\n+                    <exclusions>\n+                        <!-- force usage of the geronimo-jpa_2.0_spec -->\n+                        <exclusion>\n+                            <groupId>org.hibernate.java-persistence</groupId>\n+                            <artifactId>jpa-api</artifactId>\n+                        </exclusion>\n+                        <!-- force usage of the RI API level above -->\n+                        <exclusion>\n+                            <groupId>javax.validation</groupId>\n+                            <artifactId>validation-api</artifactId>\n+                        </exclusion>\n+                    </exclusions>\n+                </dependency>\n+                <dependency>\n+                    <groupId>org.slf4j</groupId>\n+                    <artifactId>slf4j-api</artifactId>\n+                    <version>1.5.6</version>\n+                    <scope>test</scope>\n+                </dependency>\n+                <dependency>\n+                    <groupId>org.slf4j</groupId>\n+                    <artifactId>slf4j-log4j12</artifactId>\n+                    <version>1.5.6</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <repositories>\n+                <repository>\n+                    <id>repository.jboss.org</id>\n+                    <name>JBoss Repository</name>\n+                    <url>http://repository.jboss.org/maven2</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                    </releases>\n+                </repository>\n+                <repository>\n+                    <id>snapshots.jboss.org</id>\n+                    <name>JBoss Repository</name>\n+                    <url>http://snapshots.jboss.org/maven2</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>true</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>false</enabled>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>\n+    </profiles>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa</artifactId>\n+            <version>${pom.version}</version>\n+            <!-- allow profiles to decide which validation spec to use -->\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.apache.geronimo.specs</groupId>\n+                    <artifactId>geronimo-validation_1.0_spec</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-persistence-jdbc</artifactId>\n+            <version>${pom.version}</version>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-dbcp</groupId>\n+            <artifactId>commons-dbcp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.derby</groupId>\n+            <artifactId>derby</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>jakarta-regexp</groupId>\n+            <artifactId>jakarta-regexp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>test-compile</phase>\n+                        <configuration>\n+                            <tasks>                           \n+                                <ant antfile=\"src/main/ant/enhancer.xml\" target=\"enhance\" inheritRefs=\"true\">\n+                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\n+                                    <property name=\"test\" value=\"${test}\" />\n+                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n+                                    <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n+                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n+                                    <property name=\"build.enhance\" value=\"${build.enhance}\" />\n+                                </ant>\n+                            </tasks>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <argLine>${test.jvm.arguments}</argLine>\n+                    <excludes>\n+                        <!-- exclude classes that end with 'Test'; these \n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*Test.java</exclude>\n+\n+                        <!-- exclude classes that include a $; inner classes\n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*$*.class</exclude>\n+                        <exclude>org/apache/openjpa/**/*.*.class</exclude>\n+                    </excludes>\n+                    <systemProperties>\n+                        <property>\n+                            <name>openjpa.Log</name>\n+                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.DynamicEnhancementAgent</name>\n+                            <value>false</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.ConnectionDriverName</name>\n+                            <value>org.apache.commons.dbcp.BasicDataSource</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.stream.error.file</name>\n+                            <value>target/derby.log</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.locks.deadlockTimeout</name>\n+                            <value>5</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.locks.waitTimeout</name>\n+                            <value>6</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.ConnectionProperties</name>\n+                            <value>DriverClassName=${connection.driver.name},Url=${connection.url},Username=${connection.username},Password=${connection.password},${dbcp.args}</value>\n+                        </property>\n+                    </systemProperties>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"},{"sha":"718ecf9f3016c488d0c530d974778eb8d962972c","filename":"openjpa-integration/validation/src/main/ant/enhancer.xml","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/main/ant/enhancer.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+    http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.   \n+-->\n+<project name=\"enhance\" basedir=\".\">\n+    <!--\n+        This build file executes the PCEnhancer on the test entities. It's in a\n+        separate file instead of nested in pom.xml to make some conditional \n+        processing easier.\n+        \n+        Test classes will not be compiled if maven is invoked with \n+        -Dmaven.test.skip=true. \n+    -->\n+\n+    <condition property=\"maven.test.skip.istrue\">\n+        <istrue value=\"${maven.test.skip}\" />\n+    </condition>\n+\n+\t<condition property=\"skip.enhance\">\n+\t\t<or>\n+        <equals arg1=\"${test}\" arg2=\"false\" />\n+\t\t\t<equals arg1=\"${build.enhance}\" arg2=\"false\" />\n+\t\t\t<istrue value=\"${maven.test.skip}\" />\n+\t\t\t<istrue value=\"${skipTests}\" />\n+        </or>\n+    </condition>\n+\n+    <!-- ================================= \n+          target: enhance              \n+         ================================= -->\n+    <target name=\"enhance\"\n+            description=\"--> run the enhancer unless test=false\"\n+            unless=\"skip.enhance\">\n+        <antcall target=\"enhance.all.entities\"\n+                 inheritall=\"true\"\n+                 inheritrefs=\"true\" />\n+    </target>\n+\n+    <!-- ================================= \n+          target: enhance.all.entities              \n+         ================================= -->\n+    <target name=\"enhance.all.entities\"\n+            description=\"--> enhance the test entities\"\n+            unless=\"skip.enhance\">\n+        <echo> running enhancer</echo>\n+        <!-- \n+            Inherited references won't be present until the task is called. \n+            Therefore the path definition needs to stay inside the task.\n+          -->\n+        <path id=\"cp\">\n+            <path refid=\"maven.test.classpath\" />\n+        </path>\n+\n+        <taskdef name=\"openjpac\"\n+                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\n+            <classpath refid=\"cp\" />\n+        </taskdef>\n+\n+        <fileset id=\"enhance.path.ref\"\n+                 dir=\"${project.build.testOutputDirectory}\">\n+            <include name=\"**/integration/validation/*.class\" />\n+            <exclude name=\"**/Test*.class\" />\n+            <exclude name=\"**/persistence/**/*.class\" />\n+            <exclude name=\"**/inheritance/serializable/*.class\" />\n+            <exclude name=\"**/xml/*.class\" />\n+            <exclude name=\"**/Unenhanced*.class\" />\n+            <exclude name=\"**/AbstractUnenhanced*.class\" />\n+            <exclude name=\"**/unenhanced/*.class\" />\n+\t\t\t<exclude name=\"**/XMLBase.class\"/>\n+\t\t\t<exclude name=\"**/XMLSuper.class\"/>\n+        </fileset>\n+        <openjpac>\n+            <classpath refid=\"cp\" />\n+            <fileset refid=\"enhance.path.ref\" />\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+        </openjpac>\n+        <openjpac>\n+        \t<!-- enhance XML-defined pc's separately since they use their own mapping file -->\n+            <config propertiesFile=\"${project.build.testOutputDirectory}/META-INF/ehn-persistence.xml\" />\n+            <classpath refid=\"cp\" />\n+            <fileset dir=\"${project.build.testOutputDirectory}\">\n+\t\t\t\t<include name=\"**/XMLBase.class\"/>\n+\t\t\t\t<include name=\"**/XMLSuper.class\"/>\n+            </fileset>\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+        </openjpac>\n+    </target>\n+</project>"},{"sha":"461ce276dc49a37c80afabbe56f50cb17fbc2d12","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Address.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Address.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Address.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Pattern;\n+import javax.validation.constraints.Size;\n+\n+@Entity(name=\"VAddress\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class Address implements IAddress, Serializable {\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Pattern(regexp = \"^.*$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can contain any character\")\n+    private String streetAddress;   // @NotNull is on IAddress getter\n+\n+    @Basic\n+    @Pattern(regexp = \"^[A-Z .-]*$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can only contain alpha, '.', '-' and ' ' characters\")\n+    private String city;            // @NotNull is on IAddress getter\n+\n+    @Basic\n+    @Size(min = 2, max = 2)\n+    @Pattern(regexp = \"^[A-Z]+$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can only contain alpha characters\")\n+    private String state;           // @NotNull is on IAddress getter\n+\n+    @Basic\n+    @Size(min = 5, max = 5)\n+    @Pattern(regexp = \"^[0-9]+$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can only contain numeric characters\")\n+    private String postalCode;      // @NotNull is on IAddress getter\n+\n+    @Basic\n+    private String phoneNumber;\n+\n+    \n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getStreetAddress() {\n+        return this.streetAddress;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getCity() {\n+        return this.city;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getState() {\n+        return this.state;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getPostalCode() {\n+        return this.postalCode;\n+    }\n+\n+    public void setPhoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public String getPhoneNumber() {\n+        return this.phoneNumber;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+}"},{"sha":"3f30dd068c0a80995e807d3fe71e7760f5552b01","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintBoolean.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintBoolean.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintBoolean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintBoolean.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.AssertFalse;\n+import javax.validation.constraints.AssertTrue;\n+\n+\n+@Entity(name = \"VBOOLEAN\")\n+@Table(name = \"BOOLEAN_ENTITY\")\n+public class ConstraintBoolean implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @AssertTrue\n+    private Boolean trueRequired;\n+\n+    @Basic\n+    private Boolean falseRequired;  // @AssertFalse constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintBoolean createInvalidTrue() {\n+        ConstraintBoolean c = new ConstraintBoolean();\n+        c.setTrueRequired(Boolean.FALSE);\n+        c.setFalseRequired(Boolean.FALSE);\n+        return c;\n+    }\n+    \n+    public static ConstraintBoolean createInvalidFalse() {\n+        ConstraintBoolean c = new ConstraintBoolean();\n+        c.setTrueRequired(Boolean.TRUE);\n+        c.setFalseRequired(Boolean.TRUE);\n+        return c;\n+    }\n+\n+    public static ConstraintBoolean createValid() {\n+        ConstraintBoolean c = new ConstraintBoolean();\n+        c.setTrueRequired(Boolean.TRUE);\n+        c.setFalseRequired(Boolean.FALSE);\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintBoolean() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public Boolean getTrueRequired() {\n+        return trueRequired;\n+    }\n+\n+    public void setTrueRequired(Boolean b) {\n+        trueRequired = b;\n+    }\n+    \n+    @AssertFalse\n+    public Boolean getFalseRequired() {\n+        return falseRequired;\n+    }\n+\n+    public void setFalseRequired(Boolean b) {\n+        falseRequired = b;\n+    }\n+\n+}"},{"sha":"08c6f2056c85a76e8c3fda16b4e2c00e3edd0291","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDates.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDates.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDates.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDates.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Future;\n+import javax.validation.constraints.Past;\n+\n+\n+@Entity(name = \"VDATES\")\n+@Table(name = \"DATES_ENTITY\")\n+public class ConstraintDates implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    \n+    // current time when class loaded\n+    @Transient\n+    private static final Date CURRENT_DATE = new Date();\n+\n+    // Eight hours in the past\n+    @Transient\n+    private static final Date PAST_DATE = new Date(\n+        CURRENT_DATE.getTime() - (8 * 3600 * 1000));\n+\n+    // Eight hours in the future\n+    @Transient\n+    private static final Date FUTURE_DATE = new Date(\n+        CURRENT_DATE.getTime() + (8* 3600 * 1000));\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Future\n+    private Date futureDate;\n+\n+    @Basic\n+    private GregorianCalendar pastCalendar; // @Past constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintDates createInvalidFuture() {\n+        ConstraintDates c = new ConstraintDates();\n+        c.setFutureDate(PAST_DATE);\n+        return c;\n+    }\n+\n+    public static ConstraintDates createInvalidPast() {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.add(Calendar.HOUR, 8);\n+\n+        ConstraintDates c = new ConstraintDates();\n+        c.setPastCalendar(cal);\n+        return c;\n+    }\n+\n+    public static ConstraintDates createInvalidFuturePast() {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.add(Calendar.HOUR, 8);\n+\n+        ConstraintDates c = new ConstraintDates();\n+        c.setFutureDate(PAST_DATE);\n+        c.setPastCalendar(cal);\n+        return c;\n+    }\n+\n+    public static ConstraintDates createValid() {\n+        ConstraintDates c = new ConstraintDates();\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     * Create a valid entity by default\n+     */\n+    public ConstraintDates() {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.add(Calendar.HOUR, -8);\n+        setPastCalendar(cal);\n+        setFutureDate(FUTURE_DATE);\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public Date getFutureDate() {\n+        return futureDate;\n+    }\n+\n+    public void setFutureDate(Date d) {\n+        futureDate = d;            \n+    }\n+\n+    @Past\n+    public GregorianCalendar getPastCalendar() {\n+        return pastCalendar;\n+    }\n+\n+    public void setPastCalendar(GregorianCalendar d) {\n+        pastCalendar = d;\n+    }\n+}"},{"sha":"a2b64844e125e939dc5fed5ccae5989b4b874a0a","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDecimal.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDecimal.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDecimal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDecimal.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n+\n+\n+@Entity(name = \"VDECIMAL\")\n+@Table(name = \"DECIMAL_ENTITY\")\n+public class ConstraintDecimal implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Transient\n+    private static final BigDecimal negative = new BigDecimal(-99.99);\n+\n+    @Transient\n+    private static final BigDecimal positive = new BigDecimal(99.99);\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @DecimalMin(value = \"0\")\n+    private BigDecimal minZero;\n+\n+    @Basic\n+    private BigDecimal maxZero;     // @DecimalMax(value = \"0\") constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintDecimal createInvalidMin() {\n+        ConstraintDecimal c = new ConstraintDecimal();\n+        c.setMinZero(negative);\n+        c.setMaxZero(negative);\n+        return c;\n+    }\n+\n+    public static ConstraintDecimal createInvalidMax() {\n+        ConstraintDecimal c = new ConstraintDecimal();\n+        c.setMinZero(positive);\n+        c.setMaxZero(positive);\n+        return c;\n+    }\n+\n+    public static ConstraintDecimal createInvalidMinMax() {\n+        ConstraintDecimal c = new ConstraintDecimal();\n+        c.setMinZero(negative);\n+        c.setMaxZero(positive);\n+        return c;\n+    }\n+\n+    public static ConstraintDecimal createValid() {\n+        ConstraintDecimal c = new ConstraintDecimal();\n+        c.setMinZero(positive);\n+        c.setMaxZero(negative);\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintDecimal() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public BigDecimal getMinZero() {\n+        return minZero;\n+    }\n+\n+    public void setMinZero(BigDecimal d) {\n+        minZero = d;\n+    }\n+\n+    @DecimalMax(value = \"0\")\n+    public BigDecimal getMaxZero() {\n+        return maxZero;\n+    }\n+\n+    public void setMaxZero(BigDecimal d) {\n+        maxZero = d;\n+    }\n+}"},{"sha":"793af0a797ced73d4805d41614a789b942017a72","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDigits.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDigits.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDigits.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintDigits.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Digits;\n+\n+\n+@Entity(name = \"VDIGITS\")\n+@Table(name = \"DIGITS_ENTITY\")\n+public class ConstraintDigits implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Transient\n+    private static final BigDecimal SIX_DIGITS = new BigDecimal(\"666666.666666\");\n+\n+    @Transient\n+    private static final BigDecimal FIVE_DIGITS = new BigDecimal(\"55555.55555\");\n+\n+    @Transient\n+    private static final BigDecimal ONE_DIGITS = new BigDecimal(\"1.1\");\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Digits(integer = 2, fraction = 2)\n+    private BigDecimal twoDigits;\n+\n+    @Basic\n+    private BigDecimal fiveDigits;  // @Digits(5,5) constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintDigits createInvalidTwoDigits() {\n+        ConstraintDigits c = new ConstraintDigits();\n+        c.setTwoDigits(FIVE_DIGITS);\n+        c.setFiveDigits(FIVE_DIGITS);\n+        return c;\n+    }\n+\n+    public static ConstraintDigits createInvalidFiveDigits() {\n+        ConstraintDigits c = new ConstraintDigits();\n+        c.setTwoDigits(ONE_DIGITS);\n+        c.setFiveDigits(SIX_DIGITS);\n+        return c;\n+    }\n+\n+    public static ConstraintDigits createInvalidDigits() {\n+        ConstraintDigits c = new ConstraintDigits();\n+        c.setTwoDigits(FIVE_DIGITS);\n+        c.setFiveDigits(SIX_DIGITS);\n+        return c;\n+    }\n+\n+    public static ConstraintDigits createValid() {\n+        ConstraintDigits c = new ConstraintDigits();\n+        // extra leading zeros only count as 1 digit\n+        c.setTwoDigits(\"00000000.1\");\n+        // as long as one of integer/fraction is supplied and valid\n+        c.setFiveDigits(\"1234\");\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintDigits() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public BigDecimal getTwoDigits() {\n+        return twoDigits;\n+    }\n+\n+    public void setTwoDigits(BigDecimal d) {\n+        twoDigits = d;\n+    }\n+\n+    public void setTwoDigits(String s) {\n+        twoDigits = toBigDecimal(s);\n+    }\n+\n+    @Digits(integer = 5, fraction = 5)\n+    public BigDecimal getFiveDigits() {\n+        return fiveDigits;\n+    }\n+\n+    public void setFiveDigits(BigDecimal d) {\n+        fiveDigits = d;\n+    }\n+    \n+    public void setFiveDigits(String s) {\n+        fiveDigits = toBigDecimal(s);\n+    }\n+    \n+\n+    private BigDecimal toBigDecimal(String s) {\n+        try {\n+            return new BigDecimal(s);\n+        } catch (NumberFormatException nfe) {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"378578355a1110d01679846873d25f4550028bc6","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNull.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNull.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNull.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNull.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Null;\n+\n+\n+@Entity(name = \"VNULL\")\n+@Table(name = \"NULL_ENTITY\")\n+public class ConstraintNull implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Null\n+    private String nullRequired;\n+\n+    @Basic\n+    private String nullInvalid;     // @NotNull constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintNull createInvalidNotNull() {\n+        ConstraintNull c = new ConstraintNull();\n+        return c;\n+    }\n+\n+    public static ConstraintNull createInvalidNull() {\n+        ConstraintNull c = new ConstraintNull();\n+        c.setNullInvalid(\"not null\");\n+        c.setNullRequired(\"not null\");\n+        return c;\n+    }\n+\n+    public static ConstraintNull createValid() {\n+        ConstraintNull c = new ConstraintNull();\n+        c.setNullInvalid(\"not null\");\n+        c.setNullRequired(null);\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintNull() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getNullRequired() {\n+        return nullRequired;\n+    }\n+\n+    public void setNullRequired(String s) {\n+        nullRequired = s;\n+    }\n+\n+    @NotNull\n+    public String getNullInvalid() {\n+        return nullInvalid;\n+    }\n+\n+    public void setNullInvalid(String s) {\n+        nullInvalid = s;\n+    }\n+\n+}"},{"sha":"c059995ec3edceaee102ca1d1368fe669c2fdbfb","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNumber.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNumber.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintNumber.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+\n+\n+@Entity(name = \"VNUMBER\")\n+@Table(name = \"NUMBER_ENTITY\")\n+public class ConstraintNumber implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Transient\n+    private static final long negative = -99;\n+\n+    @Transient\n+    private static final long positive = 99;\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Min(value = 0)\n+    private long minZero;\n+\n+    @Basic\n+    private long maxZero;   // @Max(value = 0) constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintNumber createInvalidMin() {\n+        ConstraintNumber c = new ConstraintNumber();\n+        c.setMinZero(negative);\n+        c.setMaxZero(negative);\n+        return c;\n+    }\n+\n+    public static ConstraintNumber createInvalidMax() {\n+        ConstraintNumber c = new ConstraintNumber();\n+        c.setMinZero(positive);\n+        c.setMaxZero(positive);\n+        return c;\n+    }\n+\n+    public static ConstraintNumber createInvalidMinMax() {\n+        ConstraintNumber c = new ConstraintNumber();\n+        c.setMinZero(negative);\n+        c.setMaxZero(positive);\n+        return c;\n+    }\n+\n+    public static ConstraintNumber createValid() {\n+        ConstraintNumber c = new ConstraintNumber();\n+        c.setMinZero(positive);\n+        c.setMaxZero(negative);\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintNumber() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public long getMinZero() {\n+        return minZero;\n+    }\n+\n+    public void setMinZero(long d) {\n+        minZero = d;\n+    }\n+\n+    @Max(value = 0)\n+    public long getMaxZero() {\n+        return maxZero;\n+    }\n+\n+    public void setMaxZero(long d) {\n+        maxZero = d;\n+    }\n+}"},{"sha":"30ef3ef53c44f5736ada4cd6c27e9b8d63452324","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintPattern.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintPattern.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintPattern.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintPattern.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Pattern;\n+\n+\n+@Entity(name = \"VPATTERN\")\n+@Table(name = \"PATTERN_ENTITY\")\n+public class ConstraintPattern implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Pattern(regexp = \"^[A-Z0-9-]+$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+             message = \"can only contain alphanumeric characters\")\n+    private String myString;\n+\n+    @Basic\n+    private String zipcode;     // @Pattern([0-9]) constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintPattern createInvalidString() {\n+        ConstraintPattern c = new ConstraintPattern();\n+        c.setMyString(\"a1!b2@c3#\");\n+        c.setZipcode(\"90210\");\n+        return c;\n+    }\n+\n+    public static ConstraintPattern createInvalidZipcode() {\n+        ConstraintPattern c = new ConstraintPattern();\n+        c.setMyString(\"\");\n+        c.setZipcode(\"1a2b3c\");\n+        return c;\n+    }\n+\n+    public static ConstraintPattern createValid() {\n+        ConstraintPattern c = new ConstraintPattern();\n+        c.setMyString(\"a1b2c3\");\n+        c.setZipcode(\"90210\");\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintPattern() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getMyString() {\n+        return myString;\n+    }\n+\n+    public void setMyString(String s) {\n+        myString = s;\n+    }\n+\n+    @Pattern(regexp = \"^[0-9]+$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can only contain numeric characters\")\n+    public String getZipcode() {\n+        return zipcode;\n+    }\n+\n+    public void setZipcode(String s) {\n+        zipcode = s;\n+    }\n+}"},{"sha":"b17ba61bd22b92d0fceddee253be6f08dbc92e2d","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintSize.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintSize.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintSize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ConstraintSize.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Size;\n+\n+\n+@Entity(name = \"VSIZE\")\n+@Table(name = \"SIZE_ENTITY\")\n+public class ConstraintSize implements Serializable {\n+\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Size(min = 0, max = 10)\n+    private String myString;\n+\n+    private Map<String,String> myMap;  // @Size(1,2) constraint is on the getter\n+\n+    \n+    /* \n+     * Some helper methods to create the entities to test with\n+     */\n+    public static ConstraintSize createInvalidString() {\n+        ConstraintSize c = new ConstraintSize();\n+        c.setMyString(\"abcdefghijklmno\");\n+        c.setValidMap();\n+        return c;\n+    }\n+\n+    public static ConstraintSize createInvalidMap() {\n+        ConstraintSize c = new ConstraintSize();\n+        c.setMyString(\"\");\n+        c.setInvalidMap();\n+        return c;\n+    }\n+\n+    public static ConstraintSize createInvalidSize() {\n+        ConstraintSize c = new ConstraintSize();\n+        c.setMyString(\"abcdefghijklmno\");\n+        c.setInvalidMap();\n+        return c;\n+    }\n+\n+    public static ConstraintSize createValid() {\n+        ConstraintSize c = new ConstraintSize();\n+        c.setMyString(\"abc\");\n+        c.setValidMap();\n+        return c;\n+    }\n+\n+    \n+    /*\n+     * Main entity code\n+     */\n+    public ConstraintSize() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getMyString() {\n+        return myString;\n+    }\n+\n+    public void setMyString(String s) {\n+        myString = s;\n+    }\n+\n+    @Size(min = 1, max = 2)\n+    public Map<String,String> getMyMap() {\n+        return myMap;\n+    }\n+\n+    public void setMyMap(Map<String,String> m) {\n+        myMap = m;\n+    }\n+    \n+    \n+    private void setInvalidMap() {\n+        Map<String,String> m = new HashMap<String,String>();\n+        m.put(\"a\", \"a value\");\n+        m.put(\"b\", \"b value\");\n+        m.put(\"c\", \"c value\");\n+        setMyMap(m);\n+    }\n+    \n+    private void setValidMap() {\n+        Map<String,String> m = new HashMap<String,String>();\n+        m.put(\"a\", \"a value\");\n+        setMyMap(m);\n+    }\n+    \n+}"},{"sha":"ea4561fea46b92b1fa59f92ef7144efdf6d1d3a3","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Customer.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Customer.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Transient;\n+\n+@Entity(name=\"VCustomer\")\n+public class Customer extends Person implements ICustomer, Serializable {\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Address shippingAddress;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Address billingAddress;\n+\n+\n+    public void setShippingAddress(IAddress shippingAddress) {\n+        this.shippingAddress = (Address) shippingAddress;\n+    }\n+\n+    public IAddress getShippingAddress() {\n+        return this.shippingAddress;\n+    }\n+\n+\n+    public void setBillingAddress(IAddress billingAddress) {\n+        this.billingAddress = (Address) billingAddress;\n+    }\n+\n+    public IAddress getBillingAddress() {\n+        return this.billingAddress;\n+    }\n+}"},{"sha":"f9dfd9053723ebc427daa893e92531e800e7f6e2","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/DefGrpEntity.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/DefGrpEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/DefGrpEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/DefGrpEntity.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n+\n+@Entity\n+public class DefGrpEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    \n+    // NotNull constraint with default validation group\n+    @NotNull\n+    private String dgName;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setDgName(String dgName) {\n+        this.dgName = dgName;\n+    }\n+\n+    public String getDgName() {\n+        return dgName;\n+    }    \n+}"},{"sha":"53a497fb4a65674f6223b1364872f2b35bbc6102","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IAddress.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IAddress.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IAddress.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public interface IAddress {\n+\n+    @NotNull\n+    public String getStreetAddress();\n+    public void setStreetAddress(String streetAddress);\n+\n+    @NotNull\n+    public String getCity();\n+    public void setCity(String city);\n+\n+    @NotNull\n+    public String getState();\n+    public void setState(String state);\n+\n+    @NotNull\n+    public String getPostalCode();\n+    public void setPostalCode(String postalCode);\n+\n+    public String getPhoneNumber();\n+    public void setPhoneNumber(String phoneNumber);\n+}"},{"sha":"728c9583b355e7b450d9bf133714d15e125d0ef9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ICustomer.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ICustomer.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ICustomer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ICustomer.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.*;\n+\n+public interface ICustomer extends IPerson {\n+\n+    public void setShippingAddress(IAddress shippingAddress);\n+    public IAddress getShippingAddress();\n+\n+    public void setBillingAddress(IAddress billingAddress);\n+    public IAddress getBillingAddress();\n+}"},{"sha":"dde0a3d0e2f294f1e710eae479d683bee62048ce","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IPerson.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IPerson.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/IPerson.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public interface IPerson {\n+\n+    @NotNull\n+    public String getFirstName();\n+    public void setFirstName(String firstName);\n+\n+    @NotNull\n+    public String getLastName();\n+    public void setLastName(String lastName);\n+\n+    @NotNull\n+    public IAddress getHomeAddress();\n+    public void setHomeAddress(IAddress homeAddress);\n+}"},{"sha":"4b8aafa2c79a58dc55e34c3cda7671208b450212","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/MixedGrpEntity.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/MixedGrpEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/MixedGrpEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/MixedGrpEntity.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n+\n+@Entity\n+public class MixedGrpEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @NotNull\n+    private String defNotNull;\n+    \n+    @NotNull(groups=ValGroup1.class)\n+    private String vg1NotNull;\n+    \n+    @NotNull(groups=ValGroup2.class)\n+    private String vg2NotNull;\n+    \n+    @NotNull(groups={ValGroup1.class, ValGroup2.class})\n+    private String vg12NotNull;\n+\n+    public void setDefNotNull(String defNotNull) {\n+        this.defNotNull = defNotNull;\n+    }\n+\n+    public String getDefNotNull() {\n+        return defNotNull;\n+    }\n+\n+    public void setVg1NotNull(String vg1NotNull) {\n+        this.vg1NotNull = vg1NotNull;\n+    }\n+\n+    public String getVg1NotNull() {\n+        return vg1NotNull;\n+    }\n+\n+    public void setVg2NotNull(String vg2NotNull) {\n+        this.vg2NotNull = vg2NotNull;\n+    }\n+\n+    public String getVg2NotNull() {\n+        return vg2NotNull;\n+    }\n+\n+    public void setVg12NotNull(String vg12NotNull) {\n+        this.vg12NotNull = vg12NotNull;\n+    }\n+\n+    public String getVg12NotNull() {\n+        return vg12NotNull;\n+    }\n+}"},{"sha":"14b4803c1f7b567406e04b360f2e761ffb7beba4","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/NonDefGrpEntity.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/NonDefGrpEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/NonDefGrpEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/NonDefGrpEntity.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n+import org.apache.openjpa.integration.validation.ValGroup1;\n+\n+@Entity\n+public class NonDefGrpEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    \n+    // NotNull constraint with default validation group\n+    @NotNull\n+    private String dgName;\n+    \n+    // NotNull constraint with specified validation group\n+    @NotNull(groups=ValGroup1.class)\n+    private String ndgName;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setDgName(String dgName) {\n+        this.dgName = dgName;\n+    }\n+\n+    public String getDgName() {\n+        return dgName;\n+    }    \n+\n+    public void setNdgName(String dgName) {\n+        this.ndgName = dgName;\n+    }\n+\n+    public String getNdgName() {\n+        return ndgName;\n+    }    \n+}"},{"sha":"6a4f44a01987d7d50e0e45385e1da3ffc4f439f1","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Person.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Person.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Person.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Transient;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Pattern;\n+\n+@Entity(name=\"VPerson\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class Person implements IPerson, Serializable {\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Pattern(regexp = \"^[A-Z0-9-]+$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can only contain alphanumeric characters\")\n+    private String firstName;   // @NotNull is on IPerson getter\n+\n+    @Basic\n+    @Pattern(regexp = \"^[A-Z0-9-]+$\", flags = Pattern.Flag.CASE_INSENSITIVE,\n+        message = \"can only contain alphanumeric characters\")\n+    private String lastName;    // @NotNull is on IPerson getter\n+\n+    @OneToOne\n+    @NotNull\n+    @Valid\n+    private Address homeAddress;\n+\n+    \n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getFirstName() {\n+        return this.firstName;\n+    }\n+\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getLastName() {\n+        return this.lastName;\n+    }\n+\n+\n+    public void setHomeAddress(IAddress homeAddress) {\n+        this.homeAddress = (Address) homeAddress;\n+    }\n+\n+    public IAddress getHomeAddress() {\n+        return this.homeAddress;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"069cb2479e2fb43ec05d78ade29a6c52a8d51907","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/SimpleEntity.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/SimpleEntity.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.FieldResult;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\",\n+            query=\"select s from simple s where s.name = ?1\"),\n+    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\n+})\n+\n+@NamedNativeQueries( { \n+    @NamedNativeQuery(name = \"findSimpleEntitites\",\n+        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \n+        resultSetMapping = \"simpleEntitiesResult\") })\n+\n+@SqlResultSetMapping(name = \"simpleEntitiesResult\",\n+    entities = @EntityResult(\n+    entityClass = org.apache.openjpa.integration.validation.SimpleEntity.class, \n+    fields = {@FieldResult(name = \"id\", column = \"ID\"),\n+        @FieldResult(name = \"name\", column = \"NAME\"),\n+        @FieldResult(name = \"value\", column = \"VALUE\") }))\n+\n+@Entity(name = \"simple\")\n+@Table(name = \"SIMPLE_ENTITY\")\n+public class SimpleEntity implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity() {\n+    }\n+\n+    public SimpleEntity(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}\n+"},{"sha":"6f6e80e0083dc6c27a5cee8009b5d45d1ea6aa07","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java","status":"added","additions":1292,"deletions":0,"changes":1292,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,1292 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.Set;\n+\n+import javax.persistence.Query;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+/**\n+ * Tests the new Bean Validation constraint support in the JPA 2.0 spec by\n+ * focusing on the following Validation scenarios:\n+ *      \n+ *   Check special update/delete/ignore cases once:\n+ *   1)  Update @Null constraint exception on variables in mode=AUTO\n+ *       Tests that a constraint violation will occur on invalid update.\n+ *   2)  No invalid Delete @Null constraint exception when mode=AUTO\n+ *       Tests that a violation will not occur when deleting invalid entity.\n+ *   3)  No invalid Persist constraint exception when mode=NONE\n+ *       Tests that no Validation Providers are used when disabled.\n+ *   \n+ *   Basic constraint tests for violation exceptions:\n+ *   4)  Persist @Null constraint exception on variables in mode=AUTO\n+ *   5)  Persist @NotNull constraint exception on getter in mode=AUTO\n+ *   7)  Test @AssertTrue constraint exception on variables in mode=AUTO\n+ *   8)  Test @AssertFalse constraint exception on getter in mode=AUTO\n+ *   10) Test @DecimalMin constraint exception on variables in mode=AUTO\n+ *   11) Test @DecimalMax constraint exception on getter in mode=AUTO\n+ *   13) Test @Min constraint exception on variables in mode=AUTO\n+ *   14) Test @Max constraint exception on getter in mode=AUTO\n+ *   16) Test @Digits constraint exception on variables in mode=AUTO\n+ *   17) Test @Digits constraint exception on getter in mode=AUTO\n+ *   19) Test @Size constraint exception on variables in mode=AUTO\n+ *   20) Test @Size constraint exception on getter in mode=AUTO\n+ *   22) Test @Future constraint exception on variables in mode=AUTO\n+ *   23) Test @Past constraint exception on getter in mode=AUTO\n+ *   25) Test @Pattern constraint exception on variables in mode=AUTO\n+ *   26) Test @Pattern constraint exception on getter in mode=AUTO\n+ *   28) Test @Valid constraint exceptions in mode=AUTO\n+ *   \n+ *   Basic constraint test for no violations:\n+ *   6)  Persist @NotNull and @Null constraints pass in mode=AUTO\n+ *   9)  Test @AssertFalse and @AssertTrue constraints pass in mode=AUTO\n+ *   12) Test @DecimalMin and @DecimalMax constraints pass in mode=AUTO\n+ *   15) Test @Min and @Max constraints pass in mode=AUTO\n+ *   18) Test @Digits constraints pass in mode=AUTO\n+ *   21) Test @Size constraints pass in mode=AUTO\n+ *   24) Test @Past and @Future constraints pass in mode=AUTO\n+ *   27) Test @Pattern constraints pass in mode=AUTO\n+ *   29) Test @Valid constraints pass in mode=AUTO\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TestConstraints extends PersistenceTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    \n+    @Override\n+    public void setUp() {\n+        \n+        emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"ConstraintPU\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+    }\n+    \n+    @Override\n+    public void tearDown() {\n+        if (emf != null) {\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   1) Update @Null constraint exception on variables in mode=AUTO\n+     *      Tests that a constraint violation will occur on invalid update.\n+     */\n+    public void testNullUpdateConstraint() {\n+        getLog().trace(\"testNullUpdateConstraint() started\");\n+        \n+        long id = 0;\n+        // Part 1 - Create and persist a valid entity\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintNull instance\n+            em.getTransaction().begin();\n+            ConstraintNull c = ConstraintNull.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            id = c.getId();\n+            getLog().trace(\"testNullUpdateConstraint() Part 1 of 2 passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testNullUpdateConstraint() Part 1 of 2 failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+        \n+        // Part 2 - Verify that invalid properties are caught on an update\n+        // create EM from default EMF\n+        em = emf.createEntityManager();\n+        assertNotNull(em);        \n+        try {\n+            // update entity to be invalid\n+            ConstraintNull c = em.find(ConstraintNull.class, id);\n+            em.getTransaction().begin();\n+            c.setNullRequired(new String(\"not null\"));\n+            em.flush();\n+            em.getTransaction().commit();            \n+            getLog().trace(\"testNullUpdateConstraint() Part 2 of 2 failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testNullUpdateConstraint() Part 2 of 2 passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   2) No invalid Delete @Null constraint exception when mode=AUTO\n+     *      Tests that a violation will not occur when deleting invalid entity.\n+     */\n+    public void testNullDeleteIgnored() {\n+        getLog().trace(\"testNullDeleteIgnored() started\");\n+        \n+        // Part 1 - Create an invalid entity\n+        // create our EMF w/ props\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"null-none-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"NONE\"));\n+            // create invalid ConstraintNull instance\n+            em.getTransaction().begin();\n+            ConstraintNull c = ConstraintNull.createInvalidNull();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testNullDeleteIgnored() Part 1 of 2 passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testNullDeleteIgnored() Part 1 of 2 failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            cleanup(emf);\n+        }\n+\n+        // Part 2 - Verify delete using default group does not cause Validation\n+        // create our EMF w/ validation mode=CALLBACK\n+        emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence\n+            .createEntityManagerFactory(\n+                \"null-callback-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        // create EM\n+        em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"CALLBACK\"));\n+            // get the invalid entity to delete\n+            Query q = em.createQuery(\"DELETE FROM VNULL c WHERE c.id = 1\");\n+            em.getTransaction().begin();\n+            int count = q.executeUpdate();\n+            em.getTransaction().commit();\n+            getLog().trace(\"testNullDeleteIgnored() Part 2 of 2 passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testNullDeleteIgnored() Part 2 of 2 failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            cleanup(emf);\n+        }\n+    }\n+    \n+    /**\n+     * Scenario being tested:\n+     *   3) No invalid Persist constraint exception when mode=NONE\n+     *      Tests that no Validation Providers are used when disabled.\n+     */\n+    public void testNullConstraintIgnored() {\n+        getLog().trace(\"testNullConstraintIgnored() started\");\n+        // create our EMF w/ props\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                \"null-none-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"NONE\"));\n+            // create invalid ConstraintNull instance\n+            em.getTransaction().begin();\n+            ConstraintNull c = ConstraintNull.createInvalidNull();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testNullConstraintIgnored() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testNullConstraintIgnored() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   4) Test @Null constraint exception on variables in mode=AUTO\n+     *      Basic constraint test for a violation exception.\n+     */\n+    public void testNullConstraint() {\n+        getLog().trace(\"testNullConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintNull instance\n+            em.getTransaction().begin();\n+            ConstraintNull c = ConstraintNull.createInvalidNull();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testNullConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testNullConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   5) Test @NotNull constraint exception on getter in mode=AUTO\n+     *      Basic constraint test for a violation exception.\n+     */\n+    public void testNotNullConstraint() {\n+        getLog().trace(\"testNotNullConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintNull instance\n+            em.getTransaction().begin();\n+            ConstraintNull c = ConstraintNull.createInvalidNotNull();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testNotNullConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testNotNullConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   6) Test @NotNull and @Null constraints pass in mode=AUTO\n+     *      Basic constraint test for no violations.\n+     */\n+    public void testNullNotNullConstraint() {\n+        getLog().trace(\"testNullNotNullConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintNull instance\n+            em.getTransaction().begin();\n+            ConstraintNull c = ConstraintNull.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testNullNotNullConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testNullNotNullConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   7) Test @AssertTrue constraint exception on variables in mode=AUTO\n+     *      Basic constraint test for a violation exception.\n+     */\n+    public void testAssertTrueConstraint() {\n+        getLog().trace(\"testAssertTrueConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintBoolean c = ConstraintBoolean.createInvalidTrue();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testAssertTrueConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testAssertTrueConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   8) Test @AssertFalse constraint exception on getter in mode=AUTO\n+     *      Basic constraint test for a violation exception.\n+     */\n+    public void testAssertFalseConstraint() {\n+        getLog().trace(\"testAssertFalseConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintBoolean c = ConstraintBoolean.createInvalidFalse();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testAssertFalseConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testAssertFalseConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   9) Test @AssertFalse and @AssertTrue constraints pass in mode=AUTO\n+     *      Basic constraint test for no violations.\n+     */\n+    public void testAssertTrueFalseConstraint() {\n+        getLog().trace(\"testAssertTrueFalseConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintBoolean c = ConstraintBoolean.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testAssertTrueFalseConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testAssertTrueFalseConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   10) Test @DecimalMin constraint exception on variables in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testDecimalMinConstraint() {\n+        getLog().trace(\"testDecimalMinConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDecimal c = ConstraintDecimal.createInvalidMin();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDecimalMinConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testDecimalMinConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   11) Test @DecimalMax constraint exception on getter in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testDecimalMaxConstraint() {\n+        getLog().trace(\"testDecimalMaxConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDecimal c = ConstraintDecimal.createInvalidMax();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDecimalMaxConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testDecimalMaxConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   12) Test @DecimalMin and @DecimalMax constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testDecimalMinMaxConstraint() {\n+        getLog().trace(\"testDecimalMinMaxConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDecimal c = ConstraintDecimal.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDecimalMinMaxConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testDecimalMinMaxConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   13) Test @Min constraint exception on variables in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testMinConstraint() {\n+        getLog().trace(\"testMinConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintNumber c = ConstraintNumber.createInvalidMin();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testMinConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testMinConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   14) Test @Max constraint exception on getter in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testMaxConstraint() {\n+        getLog().trace(\"testMaxConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintNumber c = ConstraintNumber.createInvalidMax();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testMaxConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testMaxConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   15) Test @Min and @Max constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testMinMaxConstraint() {\n+        getLog().trace(\"testMinMaxConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintNumber c = ConstraintNumber.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testMinMaxConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testMinMaxConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   16) Test @Digits constraint exception on variables in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testDigitsTwoConstraint() {\n+        getLog().trace(\"testDigitsTwoConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDigits c = ConstraintDigits.createInvalidTwoDigits();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDigitsTwoConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testDigitsTwoConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   17) Test @Digits constraint exception on getter in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testDigitsFiveConstraint() {\n+        getLog().trace(\"testDigitsFiveConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDigits c = ConstraintDigits.createInvalidFiveDigits();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDigitsFiveConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testDigitsFiveConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   18) Test @Digits constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testDigitsConstraint() {\n+        getLog().trace(\"testDigitsConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDigits c = ConstraintDigits.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDigitsConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testDigitsConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   19) Test @Size constraint exception on variables in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testSizeStringConstraint() {\n+        getLog().trace(\"testSizeStringConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintSize c = ConstraintSize.createInvalidString();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testSizeStringConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testSizeStringConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   20) Test @Size constraint exception on getter in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testSizeMapConstraint() {\n+        getLog().trace(\"testSizeMapConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintSize c = ConstraintSize.createInvalidMap();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testSizeMapConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testSizeMapConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   21) Test @Size constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testSizeConstraint() {\n+        getLog().trace(\"testSizeConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintSize c = ConstraintSize.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testSizeConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testSizeConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   22) Test @Future constraint exception on variables in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testDatesFutureConstraint() {\n+        getLog().trace(\"testDatesFutureConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDates c = ConstraintDates.createInvalidFuture();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDatesFutureConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testDatesFutureConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   23) Test @Past constraint exception on getter in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testDatesPastConstraint() {\n+        getLog().trace(\"testDatesPastConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDates c = ConstraintDates.createInvalidPast();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDatesPastConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testDatesPastConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   24) Test @Past and @Future constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testDatesConstraint() {\n+        getLog().trace(\"testDatesConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintDates c = ConstraintDates.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testDatesConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testDatesConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   25) Test @Pattern constraint exception on variables in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testPatternAlphaConstraint() {\n+        getLog().trace(\"testPatternAlphaConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintPattern c = ConstraintPattern.createInvalidString();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testPatternAlphaConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testPatternAlphaConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   26) Test @Pattern constraint exception on getter in mode=AUTO\n+     *       Basic constraint test for a violation exception.\n+     */\n+    public void testPatternNumericConstraint() {\n+        getLog().trace(\"testPatternNumericConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintPattern c = ConstraintPattern.createInvalidZipcode();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testPatternNumericConstraint() failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testPatternNumericConstraint() passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   27) Test @Pattern constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testPatternConstraint() {\n+        getLog().trace(\"testPatternConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create valid ConstraintBoolean instance\n+            em.getTransaction().begin();\n+            ConstraintPattern c = ConstraintPattern.createValid();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testPatternConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testPatternConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   28) Test @Valid constraint exceptions in mode=AUTO\n+     *       Basic constraint test for violation exceptions.\n+     */\n+    public void testValidFailuresConstraint() {\n+        Address a = new Address();\n+        getLog().trace(\"testValidFailuresConstraint() started\");\n+        \n+        // Part 1 - Create an invalid Address entity\n+        try {\n+            OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                    \"address-none-mode\",\n+                    \"org/apache/openjpa/integration/validation/persistence.xml\");\n+            assertNotNull(emf);\n+            // create EM\n+            OpenJPAEntityManager em = emf.createEntityManager();\n+            assertNotNull(em);\n+            try{\n+                // verify Validation Mode\n+                OpenJPAConfiguration conf = em.getConfiguration();\n+                assertNotNull(conf);\n+                assertTrue(\"ValidationMode\",\n+                    conf.getValidationMode().equalsIgnoreCase(\"NONE\"));\n+                // provide an invalid Address (every value is invalid)\n+                em.getTransaction().begin();\n+                a.setStreetAddress(null);\n+                a.setCity(\"a1!b2@c3#\");\n+                a.setState(\"00\");\n+                a.setPostalCode(\"a1b2c3\");\n+                // persist, which should NOT cause a CVE\n+                em.persist(a);\n+                em.getTransaction().commit();\n+                getLog().trace(\"testValidFailuresConstraint() Part 1 of 2 passed\");\n+            } catch (Exception e) {\n+                // unexpected\n+                getLog().trace(\"testValidFailuresConstraint() Part 1 of 2 failed\");\n+                fail(\"Caught unexpected exception = \" + e);\n+            } finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                cleanup(emf);\n+                em = null;\n+            }\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testValidFailuresConstraint() Part 1 of 2 failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        }\n+\n+        // Part 2 - Create a Person entity that uses the invalid address above\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            // create invalid Person instance\n+            em.getTransaction().begin();\n+            // create a valid Person, minus the address\n+            Person p = new Person();\n+            p.setFirstName(\"Java\");\n+            p.setLastName(\"Joe\");\n+            // use invalid Address, which should cause CVEs due to @Valid\n+            //a = em.getReference(Address.class, a.getId());\n+            assertNotNull(a);\n+            p.setHomeAddress(a);\n+            // persist, which should cause a CVE\n+            em.persist(p);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testValidFailuresConstraint() Part 2 of 2 failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            Set<ConstraintViolation<?>> cves = e.getConstraintViolations();\n+            assertNotNull(cves);\n+            for (ConstraintViolation<?> cv: cves) {\n+                getLog().trace(\"CVE Contains ConstraintViolation = \" + cv.getMessage());\n+            }\n+            assertEquals(\"Wrong number of embedded ConstraintViolation failures\",\n+                5, cves.size());\n+            getLog().trace(\"testValidFailuresConstraint() Part 2 of 2 passed\");\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }            \n+    }\n+    \n+    /**\n+     * Scenario being tested:\n+     *   29) Test @Pattern constraints pass in mode=AUTO\n+     *       Basic constraint test for no violations.\n+     */\n+    public void testValidPassConstraint() {\n+        getLog().trace(\"testValidPassConstraint() started\");\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // provide a valid Address\n+            em.getTransaction().begin();\n+            Address a = new Address();\n+            a.setStreetAddress(\"4205 South Miami Blvd.\");\n+            a.setCity(\"R.T.P.\");\n+            a.setState(\"NC\");\n+            a.setPostalCode(\"27709\");\n+            // persist, which should NOT cause a CVE\n+            em.persist(a);\n+            em.getTransaction().commit();\n+\n+            // create a valid Person\n+            em.getTransaction().begin();\n+            Person p = new Person();\n+            p.setFirstName(\"Java\");\n+            p.setLastName(\"Joe\");\n+            p.setHomeAddress(a);\n+            // persist, which should NOT cause a CVE\n+            em.persist(p);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testValidPassConstraint() passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testValidPassConstraint() failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Helper method to remove entities and close the emf an any open em's.\n+     * @param emf\n+     */\n+    private void cleanup(OpenJPAEntityManagerFactorySPI emf) {\n+        clear(emf);\n+        closeEMF(emf);\n+    }\n+        \n+    /**\n+     * Internal convenience method for getting the OpenJPA logger\n+     * \n+     * @return\n+     */\n+    private Log getLog() {\n+        return emf.getConfiguration().getLog(\"Tests\");\n+    }\n+}"},{"sha":"10303bf0414795c4497c4d33f47afb01f0c02df9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+\n+public class TestMappedSuper extends PersistenceTestCase {\n+\n+    /*\n+     * Verify constraints defined via XML on a mapped superclass are validated.\n+     */\n+    public void testMappedSuperXMLConstraint() {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"XMLConstraintPU\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        \n+        XMLBase be = new XMLBase();\n+        try {\n+            em.getTransaction().begin();\n+            em.persist(be);\n+            em.getTransaction().commit();\n+            fail(\"Should have caught a ConstraintViolationException\");\n+        }\n+        catch (ConstraintViolationException e) {\n+            checkCVE(e, \"superStrValue\", \"strValue\");\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().setRollbackOnly();\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Should have caught a ConstraintViolationException, but instead caught Exception=\" + e);\n+        }\n+        finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            if (emf != null) {\n+                clear(emf);\n+                closeEMF(emf);\n+            }\n+        }\n+    }\n+    \n+    private void checkCVE(ConstraintViolationException e,\n+        String... vioProperties) {\n+        Set<ConstraintViolation<?>>cvs = e.getConstraintViolations();\n+        if (vioProperties.length == 0 && cvs == null)\n+            return;\n+        assertEquals(vioProperties.length, cvs.size());\n+        Iterator<ConstraintViolation<?>> i = \n+            (Iterator<ConstraintViolation<?>>) cvs.iterator();\n+        while (i.hasNext()) {\n+            ConstraintViolation<?> v = (ConstraintViolation<?>)i.next();\n+            boolean found = false;\n+            for (String vio : vioProperties) {\n+                if (v.getPropertyPath().toString().compareTo(vio) == 0) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                fail(\"Unexpected ConstraintViolation for: \" + \n+                    v.getPropertyPath());\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"110a60aad993d60ab7639025c952a329cdc36144","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","status":"added","additions":247,"deletions":0,"changes":247,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.spi.ValidationMode;\n+import javax.validation.Validation;\n+import javax.validation.ValidatorFactory;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.validation.ValidatingLifecycleEventManager;\n+\n+/**\n+ * Tests the new Bean Validation Factory support in the JPA 2.0 spec by\n+ * focusing on the following Validation Provider scenarios:\n+ *   1) Mode of NONE will create a LifecycleEventManager\n+ *   2) Mode of AUTO will create a ValidatingLifecycleEventManager\n+ *   3) Map mode of CALLBACK will create a ValidatingLifecycleEventManager\n+ *   4) Verify a passed in ValidatorFactory is used\n+ * \n+ * @version $Rev$ $Date$\n+ */\n+public class TestValidatingLEM extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, SimpleEntity.class);\n+\n+        EntityManager em = null;\n+        // create some initial entities\n+        try {\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+            getLog().trace(\"setup() - creating 1 SimpleEntity\");\n+            em.getTransaction().begin();\n+            SimpleEntity se = new SimpleEntity(\"entity\",\"1\");\n+            em.persist(se);\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            fail(\"setup() - Unexpected Exception - \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   1) Mode of NONE will create a LifecycleEventManager\n+     */\n+    public void testValidatingLEM1() {\n+        getLog().trace(\"testValidatingLEM1() - NONE\");\n+        // create our EMF\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                \"simple-none-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        OpenJPAEntityManager em = null;\n+        try {\n+            // create EM\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+            // verify created LifecycleEventManager type\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"NONE\"));\n+            Class<?> lem = conf.getLifecycleEventManagerInstance().getClass();\n+            assertNotNull(lem);\n+            assertFalse(\"Expected a LifecycleEventManager instance\", \n+                ValidatingLifecycleEventManager.class.isAssignableFrom(lem));\n+        } catch (Exception e) {\n+            fail(\"Unexpected testValidatingLEM1() exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                em.close();\n+            }\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   2) Mode of AUTO will create a ValidatingLifecycleEventManager\n+     */\n+    public void testValidatingLEM2() {\n+        getLog().trace(\"testValidatingLEM2() - AUTO\");\n+        // create our EMF\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                \"simple-auto-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        OpenJPAEntityManager em = null;\n+        try {\n+            // create EM\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+            // verify created LifecycleEventManager type\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            Class<?> lem = conf.getLifecycleEventManagerInstance().getClass();\n+            assertNotNull(lem);\n+            assertTrue(\"Expected a ValidatingLifecycleEventManager instance\", \n+                ValidatingLifecycleEventManager.class.isAssignableFrom(lem));\n+        } catch (Exception e) {\n+            fail(\"Unexpected testValidatingLEM2() exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                em.close();\n+            }\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   3) Map mode of CALLBACK will create a ValidatingLifecycleEventManager\n+     */\n+    public void testValidatingLEM3() {\n+        getLog().trace(\"testValidatingLEM3() - CALLBACK\");\n+        // create the Map to test overrides\n+        //   Just use current class object, as we have no provider to test with\n+        Map<String,Object> props = new HashMap<String,Object>();\n+        props.put(\"javax.persistence.validation.mode\",\n+            String.valueOf(ValidationMode.CALLBACK));\n+        // create our EMF w/ props\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                \"simple-none-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\",\n+                props);\n+        assertNotNull(emf);\n+        OpenJPAEntityManager em = null;\n+        try {\n+            // create EM\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+            // verify created LifecycleEventManager type\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"CALLBACK\"));\n+            Class<?> lem = conf.getLifecycleEventManagerInstance().getClass();\n+            assertNotNull(lem);\n+            assertTrue(\"Expected a ValidatingLifecycleEventManager instance\", \n+                ValidatingLifecycleEventManager.class.isAssignableFrom(lem));\n+        } catch (Exception e) {\n+            fail(\"Unexpected testValidatingLEM3() exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                em.close();\n+            }\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * Scenario being tested:\n+     *   4) Verify a passed in ValidatorFactory is used\n+     */\n+    public void testValidatingLEM4() {\n+        getLog().trace(\"testValidatingLEM4() - provided ValidatorFactory\");\n+        // create a default factory to pass in\n+        ValidatorFactory factory = null;\n+        try {\n+            factory = Validation.buildDefaultValidatorFactory();\n+        } catch (javax.validation.ValidationException e) {\n+            fail(\"testValidatingLEM4() - no validation providers found\" + e);\n+        }\n+        assertNotNull(factory);\n+        // create the Map to test overrides\n+        Map<String,Object> props = new HashMap<String,Object>();\n+        props.put(\"javax.persistence.validation.factory\", factory);\n+        // create our EMF w/ props\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                \"simple-auto-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\",\n+                props);\n+        assertNotNull(emf);\n+        OpenJPAEntityManager em = null;\n+        try {\n+            // create EM\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+            // verify expected validation config items\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+            Class<?> lem = conf.getLifecycleEventManagerInstance().getClass();\n+            assertNotNull(lem);\n+            assertTrue(\"Expected a ValidatingLifecycleEventManager instance\", \n+                ValidatingLifecycleEventManager.class.isAssignableFrom(lem));\n+            // verify factory matches\n+            assertEquals(\"Expected same ValidatorFactory instance\",\n+                factory, conf.getValidationFactoryInstance());\n+        } catch (Exception e) {\n+            fail(\"Unexpected testValidatingLEM4() exception = \" + e);\n+        } finally {\n+            if ((em != null) && em.isOpen()) {\n+                em.close();\n+            }\n+            cleanup(emf);\n+        }\n+    }\n+\n+    \n+    /**\n+     * Helper method to remove entities and close the emf an any open em's.\n+     * @param emf\n+     */\n+    private void cleanup(OpenJPAEntityManagerFactorySPI emf) {\n+        clear(emf);\n+        closeEMF(emf);\n+    }    \n+\n+}"},{"sha":"00bcd4fcf4be1d42c6caabd0aed34467d20fdffb","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","status":"added","additions":644,"deletions":0,"changes":644,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,644 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+/**\n+ * Tests the Bean Validation groups support as defined in the JPA 2.0 spec\n+ * via the following scenarios:\n+ *      \n+ * Verify default validation group on lifecycle events:\n+ * 1a) PrePersist and PreUpdate validate with default validation group\n+ * 1b) PreRemove does not validate with default validation group\n+ * 1c) Specify the default group for PreRemove and verify that it validates with\n+ *     the default group.\n+ * 1d) Verify validation for constraints using non-default validation groups \n+ *     does not occur.\n+ *    \n+ * Verify validation occurs when specific validation groups are specified:\n+ * 2a) Specify a non-default group for all lifecycle events.\n+ * 2b) Specify multiple/mixed non-default groups for lifecycle events.\n+ * \n+ * Verify validation does not occur when no validation groups are specified:\n+ * 3a) Specify an empty validation group for PrePersist and PreUpdate and\n+ *     verify validation does not occur on these events.\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TestValidationGroups extends PersistenceTestCase {\n+\n+    /**\n+     * 1a) verify validation occurs using the default validation groups\n+     * on pre-persist and pre-update on commit\n+     */\n+    public void testDefaultValidationGroup() {\n+        verifyDefaultValidationGroup(false);\n+    }\n+\n+    /**\n+     * 1af) verify validation occurs using the default validation groups\n+     * on pre-persist and pre-update on flush\n+     */\n+    public void testDefaultValidationGroupFlush() {\n+        verifyDefaultValidationGroup(true);\n+    }\n+    \n+\n+    /**\n+     * 1b) verify validation does not occur using the default validation group\n+     * on the PreRemove lifecycle event on commit.  \n+     */\n+    public void testDefaultPreRemove() {\n+        verifyDefaultPreRemove(false);\n+    }\n+\n+    /**\n+     * 1bf) verify validation does not occur using the default validation group\n+     * on the PreRemove lifecycle event on flush.  \n+     */\n+    public void testDefaultPreRemoveFlush() {\n+        verifyDefaultPreRemove(true);\n+    }\n+    \n+    /**\n+\t * 1c) verify validation occurs on the default group when default is \n+\t *  specified for pre-remove on commit\n+\t */\n+\tpublic void testSpecifiedDefaultPreRemove() {\n+\t    verifySpecifiedDefaultPreRemove(true);\n+\t}\n+\n+    /**\n+     * 1cf) verify validation occurs on the default group when default is \n+     *  specified for pre-remove on flush\n+     */\n+    public void testSpecifiedDefaultPreRemoveFlush() {\n+        verifySpecifiedDefaultPreRemove(false);\n+    }\n+    \n+    /**\n+     * 2a) verify non-default validation group for all lifecycle events on\n+     * commit.  default validation group constraints should not validate\n+     */\n+    public void testNonDefaultValidationGroup() {\n+        verifyNonDefaultValidationGroup(false);\n+    }\n+\n+    /**\n+     * 2af) verify non-default validation group for all lifecycle events on\n+     * flush.  default validation group constraints should not validate\n+     */\n+    public void testNonDefaultValidationGroupFlush() {\n+        verifyNonDefaultValidationGroup(true);\n+    }\n+    \n+    /**\n+     * 2b) verify multiple/mixed validation groups\n+     * @param flush\n+     */\n+    public void testMultipleValidationGroups() {\n+\n+        // Configure persistence properties via map\n+        Map<String, Object> propMap = new HashMap<String, Object>();\n+        propMap.put(\"javax.persistence.validation.group.pre-persist\",\n+            \"org.apache.openjpa.integration.validation.ValGroup1,\" +\n+            \"org.apache.openjpa.integration.validation.ValGroup2\");\n+\n+        propMap.put(\"javax.persistence.validation.group.pre-update\",\n+            \"\");\n+\n+        propMap.put(\"javax.persistence.validation.group.pre-remove\",\n+            \"org.apache.openjpa.integration.validation.ValGroup2\");\n+\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"multi-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\",\n+                propMap);\n+        assertNotNull(emf);\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        try {\n+            MixedGrpEntity mge = new MixedGrpEntity();\n+            \n+            // Assert vg1 and vg2 fire on pre-persist\n+            try\n+            {\n+                em.getTransaction().begin();\n+                em.persist(mge);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \n+                    \"vg1NotNull\",\n+                    \"vg2NotNull\",\n+                    \"vg12NotNull\");\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }            \n+            // Assert no validation occurs on pre-update\n+            // Persist an entity.  Default should not validate on pre-persist\n+            em.getTransaction().begin();\n+            mge.setVg1NotNull(\"Vg1\");\n+            mge.setVg2NotNull(\"Vg2\");\n+            mge.setVg12NotNull(\"Vg1&2\");\n+            em.persist(mge);\n+            em.getTransaction().commit();\n+\n+            \n+            try {\n+                em.getTransaction().begin();\n+                mge.setDefNotNull(null);\n+                mge.setVg12NotNull(null);\n+                mge.setVg1NotNull(null);\n+                mge.setVg2NotNull(null);\n+                em.getTransaction().commit(); \n+            } catch (ConstraintViolationException e) {\n+                fail(\"Update should have been successful.\" +\n+                     \" Caught unexpected ConstraintViolationException.\");\n+            }\n+            catch (Exception e) {\n+                fail(\"Update should have been successful.\" +\n+                     \" Caught unexpected exception.\");\n+            }\n+            \n+            // Update the entity again so that it can be cleaned up by the\n+            // emf cleanup facility.  The update should not validate\n+            em.getTransaction().begin();\n+            mge.setVg2NotNull(\"Vg2NotNull\");\n+            mge.setVg12NotNull(\"Vg12NotNull\");\n+            em.getTransaction().commit();   \n+\n+            // Assert vg2 and default groups validate on pre-remove\n+            try {\n+                em.getTransaction().begin();\n+                mge.setDefNotNull(null);\n+                mge.setVg1NotNull(null);\n+                mge.setVg2NotNull(null);\n+                mge.setVg12NotNull(null);\n+                em.remove(mge);\n+                em.getTransaction().commit();                \n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \n+                    \"vg2NotNull\",\n+                    \"vg12NotNull\");\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+            \n+        }\n+        finally {\n+            cleanup(emf);\n+        }        \n+    }\n+\n+    /**\n+     * 3a) No validation groups for pre-persist and pre-update and none for\n+     * pre-remove by default.  No validation should occur.\n+     */\n+    public void testNoValidationGroups() {\n+\n+        // Configure persistence properties via map\n+        Map<String, Object> propMap = new HashMap<String, Object>();\n+        propMap.put(\"javax.persistence.validation.group.pre-persist\",\"\");\n+\n+        propMap.put(\"javax.persistence.validation.group.pre-update\",\"\");\n+\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"multi-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\",\n+                propMap);\n+        assertNotNull(emf);\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        try {\n+            MixedGrpEntity mge = new MixedGrpEntity();\n+            \n+            try\n+            {\n+                // No validation on pre-persist\n+                em.getTransaction().begin();\n+                em.persist(mge);\n+                em.getTransaction().commit();                \n+                \n+                // No validation on pre-update\n+                em.getTransaction().begin();\n+                mge.setVg12NotNull(null);\n+                em.getTransaction().commit();\n+\n+                // No validation on pre-remove\n+                em.getTransaction().begin();\n+                em.remove(mge);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                fail(\"Operations should have been successful.\" +\n+                     \" Caught unexpected ConstraintViolationException.\");\n+            }\n+            catch (Exception e) {\n+                fail(\"Operations should have been successful.\" +\n+                     \" Caught unexpected exception.\");\n+            }            \n+        }\n+        finally {\n+            cleanup(emf);\n+        }        \n+    }\n+\n+    private void verifyDefaultValidationGroup(boolean flush) {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        getLog(emf).trace(\"verifyDefaultValidationGroup(\" + flush + \")\");\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            DefGrpEntity dge = new DefGrpEntity();\n+            // Test pre-persist with default group with flush after persist\n+            // 1a) pre-persist\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(dge);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                    \"on pre-persist\");\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \"dgName\");\n+                // If flushing, tx should be marked for rollback\n+                if (flush) {\n+                    assertTrue(em.getTransaction().isActive());\n+                    assertTrue(em.getTransaction().getRollbackOnly());\n+                }\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+\n+            // 1a) test pre-update with default group\n+            // Add an entity with valid data (validation passes)\n+            dge.setDgName(\"NonNullName\");\n+            em.getTransaction().begin();\n+            em.persist(dge);\n+            em.getTransaction().commit();\n+            try {\n+                // Update the entity with null value.  pre-update \n+                // validation should fail on flush or commit\n+                em.getTransaction().begin();\n+                dge.setDgName(null);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                    \"on pre-update\");\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \"dgName\");\n+                // If flushing, tx should be marked for rollback\n+                if (flush) {\n+                    assertTrue(em.getTransaction().isActive());\n+                    assertTrue(em.getTransaction().getRollbackOnly());\n+                }\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+        }\n+        finally {\n+            cleanup(emf);\n+        }\n+    }\n+\n+    private void verifyNonDefaultValidationGroup(boolean flush) {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"non-default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        getLog(emf).trace(\"verifyNonDefaultValidationGroup(\" + flush + \")\");\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            NonDefGrpEntity ndge = new NonDefGrpEntity();\n+            // Test pre-persist with non-default group with flush after persist\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(ndge);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                    \"on pre-persist\");\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \"ndgName\");\n+                getLog(emf).trace(\"Caught expected exception\");\n+                // If flushing, tx should be marked for rollback\n+                if (flush) {\n+                    assertTrue(em.getTransaction().isActive());\n+                    assertTrue(em.getTransaction().getRollbackOnly());\n+                }\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+\n+            // pre-update with non-default group.  default group\n+            // validation should not occur\n+            // Add an entity with valid data (validation passes)\n+            try {\n+                ndge.setNdgName(\"NonNullName\");\n+                ndge.setDgName(null);\n+                em.getTransaction().begin();\n+                em.persist(ndge);\n+                em.getTransaction().commit();\n+                getLog(emf).trace(\"Entity was persisted. As expected, no \" +\n+                \"validation took place on pre-persist with default group.\");\n+            }\n+            catch (ConstraintViolationException e) {\n+                fail(\"Caught unexpected exception\");\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+            }                \n+            try {\n+                // Update the entity with null value.  pre-update \n+                // validation should fail on flush or commit\n+                \n+                em.getTransaction().begin();\n+                ndge.setNdgName(null);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                    \"on pre-update\");\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \"ndgName\");\n+                // If flushing, tx should be marked for rollback\n+                if (flush) {\n+                    assertTrue(em.getTransaction().isActive());\n+                    assertTrue(em.getTransaction().getRollbackOnly());\n+                }\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+\n+            // Merge the entity so that it can be removed.\n+            em.getTransaction().begin();\n+            ndge.setDgName(null);\n+            ndge.setNdgName(\"Some name\");\n+            ndge = em.merge(ndge);\n+            em.getTransaction().commit();\n+            \n+            try {\n+                // Update the entity with null value and remove the entity.  \n+                // validation should not fail on pre-remove\n+                em.getTransaction().begin();\n+                ndge.setNdgName(null);\n+                em.remove(ndge);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                    \"on pre-remove\");\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \"ndgName\");\n+                // If flushing, tx should be marked for rollback\n+                if (flush) {\n+                    assertTrue(em.getTransaction().isActive());\n+                    assertTrue(em.getTransaction().getRollbackOnly());\n+                }\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+\n+        }\n+        finally {\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * verify validation does not occur using the default validation group\n+     * on the PreRemove lifecycle event.  \n+     */\n+    public void verifyDefaultPreRemove(boolean flush) {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        getLog(emf).trace(\"verifyDefaultPreRemove(\" + flush + \")\");\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        try {\n+            // Add an entity \n+            DefGrpEntity dge = new DefGrpEntity();\n+            dge.setDgName(\"NonNullName\");\n+            em.getTransaction().begin();\n+            em.persist(dge);\n+            em.getTransaction().commit();\n+            try {\n+                // Update the entity with null value and remove the entity.  \n+                // validation should not fail on pre-remove\n+                em.getTransaction().begin();\n+                dge.setDgName(null);\n+                em.remove(dge);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                getLog(emf).trace(\"Entity was removed. As expected, no \" +\n+                    \"validation took place on pre-remove.\");\n+            } catch (ConstraintViolationException e) {\n+                fail(\"Should not have caught a ConstraintViolationException\");\n+                getLog(emf).trace(\"Caught expected exception\");\n+            }\n+            catch (Exception e) {\n+                fail(\"Should not have caught an Exception\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+        }\n+        finally {\n+            cleanup(emf);\n+        }\n+    }\n+\n+    /**\n+     * verify validation occurs when the default validation group\n+     * is specified for the PreRemove lifecycle event via the \n+     * \"javax.persistence.validation.group.pre-remove\" property.\n+     */\n+    public void verifySpecifiedDefaultPreRemove(boolean flush) {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"pre-remove-default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+        getLog(emf).trace(\"verifySpecifiedDefaultPreRemove(\" + flush + \")\");\n+        // create EM\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        try {\n+            // Add an entity \n+            DefGrpEntity dge = new DefGrpEntity();\n+            dge.setDgName(\"NonNullName\");\n+            em.getTransaction().begin();\n+            em.persist(dge);\n+            em.getTransaction().commit();\n+            try {\n+                // Update the entity with null value and remove the entity.  \n+                // validation should not fail on pre-remove\n+                em.getTransaction().begin();\n+                dge.setDgName(null);\n+                em.remove(dge);\n+                if (flush)\n+                    em.flush();\n+                else\n+                    em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                    \"on pre-remove\");\n+            } catch (ConstraintViolationException e) {\n+                checkCVE(e, \"dgName\");\n+                // If flushing, tx should be marked for rollback\n+                if (flush) {\n+                    assertTrue(em.getTransaction().isActive());\n+                    assertTrue(em.getTransaction().getRollbackOnly());\n+                }\n+            }\n+            catch (Exception e) {\n+                fail(\"Should have caught a ConstraintViolationException\");\n+            }\n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+        }\n+        finally {\n+            cleanup(emf);\n+        }\n+    }\n+\n+    private void checkCVE(ConstraintViolationException e,\n+        String... vioProperties) {\n+        Set<ConstraintViolation<?>>cvs = e.getConstraintViolations();\n+        if (vioProperties.length == 0 && cvs == null)\n+            return;\n+        assertEquals(vioProperties.length, cvs.size());\n+        Iterator<ConstraintViolation<?>> i = \n+            (Iterator<ConstraintViolation<?>>) cvs.iterator();\n+        while (i.hasNext()) {\n+            ConstraintViolation<?> v = (ConstraintViolation<?>)i.next();\n+            boolean found = false;\n+            for (String vio : vioProperties) {\n+                if (v.getPropertyPath().toString().compareTo(vio) == 0) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                fail(\"Unexpected ConstraintViolation for: \" + \n+                    v.getPropertyPath());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Remove entities and close the emf an any open em's.\n+     * @param emf\n+     */\n+    private void cleanup(OpenJPAEntityManagerFactorySPI emf) {\n+        clear(emf);\n+        closeEMF(emf);\n+    }\n+    \n+    /**\n+     * Internal convenience method for getting the OpenJPA logger\n+     * \n+     * @return Log\n+     */\n+    private Log getLog(OpenJPAEntityManagerFactorySPI emf) {\n+        return emf.getConfiguration().getLog(\"Tests\");\n+    }\n+}"},{"sha":"052253c794650f3eb18f6dc63964571e6f19e0ad","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup1.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup1.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup1.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+public interface ValGroup1 {\n+}"},{"sha":"77a1a5fb1e10aa66f9ea39802f30dcd72b74968e","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup2.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup2.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/ValGroup2.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+public interface ValGroup2 {\n+}"},{"sha":"048fb206584d210cffd5497274b1beab0bc3e998","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLBase.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLBase.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLBase.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+public class XMLBase extends XMLSuper {\n+   \n+    private int id;        \n+    private String strValue;\n+    \n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    public int getId() {\n+        return id;\n+    }\n+    \n+    public void setStrValue(String strValue) {\n+        this.strValue = strValue;\n+    }\n+    public String getStrValue() {\n+        return strValue;\n+    }    \n+}"},{"sha":"e91f859960a92b28da8652b16e4665d33398fd14","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLSuper.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLSuper.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/XMLSuper.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+public class XMLSuper {\n+\n+    private String superStrValue;\n+    \n+    public void setSuperStrValue(String superStrValue) {\n+        this.superStrValue = superStrValue;\n+    }\n+    public String getSuperStrValue() {\n+        return superStrValue;\n+    }   \n+}"},{"sha":"0fa5ea09be2ffaaeda45188ca1e11256b7379af7","filename":"openjpa-integration/validation/src/test/resources/META-INF/ehn-persistence.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/META-INF/ehn-persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/META-INF/ehn-persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/META-INF/ehn-persistence.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+    <persistence-unit name=\"XMLConstraintPU\">\n+        <description>Persistence file used explicitly by the enhancer</description>\n+        <mapping-file>org/apache/openjpa/integration/validation/validation-orm.xml</mapping-file>\n+        <class>org.apache.openjpa.integration.validation.XMLBase</class>\n+        <class>org.apache.openjpa.integration.validation.XMLSuper</class>\n+    </persistence-unit>\n+</persistence>"},{"sha":"71018bb6d8f1081d09d20e449a6cbd6cee83bb16","filename":"openjpa-integration/validation/src/test/resources/META-INF/validation.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/META-INF/validation.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/META-INF/validation.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/META-INF/validation.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<validation-config\n+        xmlns=\"http://jboss.org/xml/ns/javax/validation/configuration\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\n+            \"http://jboss.org/xml/ns/javax/validation/configuration validation-configuration-1.0.xsd\">\n+    <constraint-mapping>org/apache/openjpa/integration/validation/constraints.xml</constraint-mapping>\n+</validation-config>\n\\ No newline at end of file"},{"sha":"1c01c6894c6ad6c35e6124bb46c6355ed7ea8375","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/constraints.xml","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/constraints.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/constraints.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/constraints.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<constraint-mappings\n+        xmlns=\"http://jboss.org/xml/ns/javax/validation/mapping\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\n+            \"http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd\">\n+    <default-package>org.apache.openjpa.integration.validation</default-package>\n+    <bean class=\"XMLSuper\" ignore-annotations=\"false\">\n+        <getter name=\"superStrValue\">\n+        <valid/>\n+            <constraint annotation=\"javax.validation.constraints.NotNull\"/>\n+        </getter>\n+    </bean>\n+    <bean class=\"XMLBase\" ignore-annotations=\"false\">\n+        <getter name=\"strValue\">\n+        <valid/>\n+            <constraint annotation=\"javax.validation.constraints.NotNull\"/>\n+        </getter>\n+    </bean>\n+</constraint-mappings>\n\\ No newline at end of file"},{"sha":"9e3467c34833ade1bbb4e62a1d13856cf84da988","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,159 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+    \n+    <persistence-unit name=\"simple\">\n+    \t<class>org.apache.openjpa.integration.validation.SimpleEntity</class>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"simple-auto-mode\">\n+    \t<class>org.apache.openjpa.integration.validation.SimpleEntity</class>\n+        <validation-mode>AUTO</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"simple-callback-mode\">\n+    \t<class>org.apache.openjpa.integration.validation.SimpleEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"simple-none-mode\">\n+    \t<class>org.apache.openjpa.integration.validation.SimpleEntity</class>\n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"boolean-none-mode\">\n+        <class>org.apache.openjpa.integration.validation.ConstraintBoolean</class>\n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"boolean-callback-mode\">\n+        <class>org.apache.openjpa.integration.validation.ConstraintBoolean</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"decimal-none-mode\">\n+        <class>org.apache.openjpa.integration.validation.ConstraintDecimal</class>\n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"decimal-callback-mode\">\n+        <class>org.apache.openjpa.integration.validation.ConstraintDecimal</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"null-none-mode\">\n+    \t<class>org.apache.openjpa.integration.validation.ConstraintNull</class>\n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"null-callback-mode\">\n+    \t<class>org.apache.openjpa.integration.validation.ConstraintNull</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"address-none-mode\">\n+        <class>org.apache.openjpa.integration.validation.Address</class>\n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"person-none-mode\">\n+        <class>org.apache.openjpa.integration.validation.Person</class>\n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"default-validation-group\">\n+        <class>org.apache.openjpa.integration.validation.DefGrpEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+        </properties>        \n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"pre-remove-default-validation-group\">\n+        <class>org.apache.openjpa.integration.validation.DefGrpEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+            <property name=\"javax.persistence.validation.group.pre-remove\"\n+                value=\"javax.validation.groups.Default\"/>\n+        </properties>        \n+    </persistence-unit>\n+\n+    <persistence-unit name=\"non-default-validation-group\">\n+        <class>org.apache.openjpa.integration.validation.NonDefGrpEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+            <property name=\"javax.persistence.validation.group.pre-persist\"\n+                value=\"org.apache.openjpa.integration.validation.ValGroup1\"/>\n+            <property name=\"javax.persistence.validation.group.pre-update\"\n+                value=\"org.apache.openjpa.integration.validation.ValGroup1\"/>\n+            <property name=\"javax.persistence.validation.group.pre-remove\"\n+                value=\"org.apache.openjpa.integration.validation.ValGroup1\"/>\n+        </properties>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"multi-validation-group\">\n+        <class>org.apache.openjpa.integration.validation.MixedGrpEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+            <!-- Properties passed in via createEMF -->\n+        </properties>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"ConstraintPU\">\n+        <class>org.apache.openjpa.integration.validation.ConstraintNull</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintBoolean</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintDecimal</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintNumber</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintDigits</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintSize</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintDates</class>\n+        <class>org.apache.openjpa.integration.validation.ConstraintPattern</class>\n+        <class>org.apache.openjpa.integration.validation.Person</class>\n+        <class>org.apache.openjpa.integration.validation.Address</class>        \n+        <validation-mode>AUTO</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+        </properties>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"XMLConstraintPU\">\n+        <description>Make sure the mapping file and class listings match the same PU\n+         in META-INF/ehn-persistence.xml</description>\n+        <mapping-file>org/apache/openjpa/integration/validation/validation-orm.xml</mapping-file>\n+        <class>org.apache.openjpa.integration.validation.XMLBase</class>\n+        <class>org.apache.openjpa.integration.validation.XMLSuper</class>\n+        <validation-mode>AUTO</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+        </properties>\n+    </persistence-unit>\n+    \n+</persistence>"},{"sha":"213f477cda5f4bb306686ade89f07eb621bb5324","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/validation-orm.xml","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/validation-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/validation-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/validation-orm.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd\"\n+    version=\"2.0\">\n+    <mapped-superclass\n+        class=\n+        \"org.apache.openjpa.integration.validation.XMLSuper\"\n+        access=\"PROPERTY\">\n+        <attributes>\n+            <basic name=\"superStrValue\"/>\n+        </attributes>\n+    </mapped-superclass>\n+    <entity name=\"XMLBase\" \n+            class=\"org.apache.openjpa.integration.validation.XMLBase\" \n+            access=\"PROPERTY\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value/>\n+            </id>\n+            <basic name=\"strValue\"/>\n+        </attributes>\n+    </entity>    \n+</entity-mappings>"},{"sha":"4f4bf07f604bf0c2e6ae4110ea35fba5f64f36db","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -31,39 +31,48 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0-SNAPSHOT</version>\n+        <version>2.0.0-M3</version>\n     </parent>\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-kernel</artifactId>\n             <version>${pom.version}</version>\n-            <scope>compile</scope>\n         </dependency>\n         <dependency>\n             <groupId>javax.xml.bind</groupId>\n             <artifactId>jaxb-api</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>com.sun.xml.bind</groupId>\n+            <artifactId>jaxb-impl</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n         <dependency>\n             <groupId>hsqldb</groupId>\n             <artifactId>hsqldb</artifactId>\n-            <scope>compile</scope>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>postgresql</groupId>\n             <artifactId>postgresql</artifactId>\n-            <version>8.1-407.jdbc3</version>\n+            <version>8.3-603.jdbc3</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>ant</groupId>\n+            <artifactId>ant</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jmock</groupId>\n+            <artifactId>jmock</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jmock</groupId>\n+            <artifactId>jmock-junit3</artifactId>\n+            <scope>test</scope>\n         </dependency>\n     </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n </project>"},{"sha":"37f8685dc60e9d02c2db9db9752657d7cdaee5bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -178,14 +178,14 @@ protected void executeOn(String[] files)\n         if (MappingTool.ACTION_IMPORT.equals(flags.action))\n             assertFiles(files);\n \n-        ClassLoader toolLoader = (ClassLoader) AccessController\n+        ClassLoader toolLoader = AccessController\n                 .doPrivileged(J2DoPrivHelper\n                         .getClassLoaderAction(MappingTool.class));\n         ClassLoader loader = toolLoader;\n         MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n \n         if (tmpClassLoader) {\n-            loader = (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+            loader = AccessController.doPrivileged(J2DoPrivHelper\n                     .newTemporaryClassLoaderAction(getClassLoader()));\n             resolver.addClassLoader(loader);\n         }"},{"sha":"07f5e1ce7e17735b6deb09d1ff5655447f147a3f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -262,11 +262,11 @@ protected void executeOn(String[] files)\n         // load customizer properties\n         Properties customProps = new Properties();\n         File propsFile = Files.getFile(customizerProperties, loader);\n-        if (propsFile != null && ((Boolean) AccessController.doPrivileged(\n+        if (propsFile != null && (AccessController.doPrivileged(\n             J2DoPrivHelper.existsAction(propsFile))).booleanValue()) {\n             FileInputStream fis = null;\n             try {\n-                fis = (FileInputStream) AccessController.doPrivileged(\n+                fis = AccessController.doPrivileged(\n                     J2DoPrivHelper.newFileInputStreamAction(propsFile));\n             } catch (PrivilegedActionException pae) {\n                  throw (FileNotFoundException) pae.getException();\n@@ -278,7 +278,7 @@ protected void executeOn(String[] files)\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         flags.customizer = (ReverseCustomizer) Configurations.\n             newInstance(customizerClass, conf, null,\n-                (ClassLoader) AccessController.doPrivileged(\n+                AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(\n                         ReverseCustomizer.class)));\n         if (flags.customizer != null)"},{"sha":"64944a4f634acceb3b8d3bfdac00a1d1b56edc0b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -68,6 +68,13 @@ public void setIgnoreErrors(boolean ignoreErrors) {\n         flags.ignoreErrors = ignoreErrors;\n     }\n \n+    /**\n+     * Set whether the SchemaTool should drop tables.\n+     */\n+    public void setDropTables(boolean dropTables) {\n+        flags.dropTables = dropTables;\n+    }\n+\n     /**\n      * Set whether to drop or reflect on OpenJPA tables.\n      */"},{"sha":"62cdb30edc5dfdc90151ce01f995177c2c649c81","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.openjpa.jdbc.conf;\n \n-import java.util.Map;\n-\n import javax.sql.DataSource;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n@@ -604,23 +602,4 @@\n      * @see #getDataSource\n      */\n     public DataSource getDataSource2(StoreContext ctx);\n-    \n-    /**\n-     * Return QuerySQLCacheValue.\n-     * @since 1.2.0\n-     */\n-    public QuerySQLCacheValue getQuerySQLCache();\n-        \n-    /**\n-     * Whether querySQLCache is enabled or not.\n-     * @since 1.2.0\n-     */\n-    public boolean isQuerySQLCacheOn();\n-    \n-    /**\n-     * Return QuerySQLCacheInstance.\n-     * @since 1.2.0\n-     */\n-    public Map getQuerySQLCacheInstance();     \n-    \n }"},{"sha":"f2b369e4a10cd190e13a25c3cf6c70c266366c54","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":31,"deletions":25,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -20,9 +20,6 @@\n \n import java.sql.Connection;\n import java.sql.ResultSet;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -43,6 +40,8 @@\n import org.apache.openjpa.jdbc.sql.DBDictionaryFactory;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.kernel.BrokerImpl;\n+import org.apache.openjpa.kernel.FinderCache;\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.conf.IntValue;\n import org.apache.openjpa.lib.conf.ObjectValue;\n@@ -85,8 +84,6 @@\n     public ObjectValue mappingDefaultsPlugin;\n     public PluginValue driverDataSourcePlugin;\n     public MappingFactoryValue mappingFactoryPlugin;\n-    public QuerySQLCacheValue querySQLCache;\n-    private Map querySQLCacheInstance = new HashMap(); \n \n     // used internally\n     private String firstUser = null;\n@@ -208,6 +205,7 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"h2\", \"org.apache.openjpa.jdbc.sql.H2Dictionary\",\n             \"hsql\", \"org.apache.openjpa.jdbc.sql.HSQLDictionary\",\n             \"informix\", \"org.apache.openjpa.jdbc.sql.InformixDictionary\",\n+            \"ingres\", \"org.apache.openjpa.jdbc.sql.IngresDictionary\",\n             \"jdatastore\", \"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\",\n             \"mysql\", \"org.apache.openjpa.jdbc.sql.MySQLDictionary\",\n             \"oracle\", \"org.apache.openjpa.jdbc.sql.OracleDictionary\",\n@@ -306,9 +304,34 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         seqPlugin.setAliases(JDBCSeqValue.ALIASES);\n         seqPlugin.setDefault(JDBCSeqValue.ALIASES[0]);\n         seqPlugin.setString(JDBCSeqValue.ALIASES[0]);\n-\n-        querySQLCache = new QuerySQLCacheValue(\"jdbc.QuerySQLCache\");\n-        addValue(querySQLCache);\n+        \n+        // This plug-in is declared in superclass but defined here\n+        // because PreparedQueryCache is currently available for JDBC\n+        // backend only\n+        preparedQueryCachePlugin = addPlugin(\"jdbc.QuerySQLCache\", true);\n+        aliases = new String[] {\n+            \"true\", \"org.apache.openjpa.jdbc.kernel.PreparedQueryCacheImpl\",\n+            \"false\", null\n+        };\n+        preparedQueryCachePlugin.setAliases(aliases);\n+        preparedQueryCachePlugin.setAliasListComprehensive(true);\n+        preparedQueryCachePlugin.setDefault(aliases[0]);\n+        preparedQueryCachePlugin.setClassName(aliases[1]);\n+        preparedQueryCachePlugin.setDynamic(true);\n+        preparedQueryCachePlugin.setInstantiatingGetter(\n+                \"getQuerySQLCacheInstance\");\n+\n+        finderCachePlugin = addPlugin(\"jdbc.FinderCache\", true);\n+        aliases = new String[] {\n+            \"true\", \"org.apache.openjpa.jdbc.kernel.FinderCacheImpl\",\n+            \"false\", null\n+        };\n+        finderCachePlugin.setAliases(aliases);\n+        finderCachePlugin.setAliasListComprehensive(true);\n+        finderCachePlugin.setDefault(aliases[0]);\n+        finderCachePlugin.setClassName(aliases[1]);\n+        finderCachePlugin.setDynamic(true);\n+        finderCachePlugin.setInstantiatingGetter(\"getFinderCacheInstance\");\n \n         // this static initializer is to get past a weird\n         // ClassCircularityError that happens only under IBM's\n@@ -864,21 +887,4 @@ protected boolean isInvalidProperty(String propName) {\n                 return true; \n         return false;\n     }\n-    \n-    public void setQuerySQLCache(String querySQLCache) {\n-        this.querySQLCache.setString(querySQLCache);\n-    }\n-\n-    public QuerySQLCacheValue getQuerySQLCache() {\n-        return querySQLCache;\n-    }\n-    \n-    public boolean isQuerySQLCacheOn() {\n-        return querySQLCache.isSQLCacheOn();\n-    }\n-\n-    public Map getQuerySQLCacheInstance() {\n-        return querySQLCacheInstance;\n-    }\n-    \n }"},{"sha":"294bbbd3bc824cc6c5ad00a0a93e706bed3766b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,11 +18,16 @@\n  */\n package org.apache.openjpa.jdbc.conf;\n \n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n \n import org.apache.openjpa.conf.BrokerFactoryValue;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n \n@@ -32,6 +37,14 @@\n public class JDBCProductDerivation extends AbstractProductDerivation\n     implements OpenJPAProductDerivation {\n \n+    private static Set<String> supportedQueryHints = new HashSet<String>(2);\n+\n+    static {\n+        supportedQueryHints.add(MySQLDictionary.SELECT_HINT);\n+        supportedQueryHints.add(OracleDictionary.SELECT_HINT);\n+        supportedQueryHints = Collections.unmodifiableSet(supportedQueryHints);\n+    }\n+\n     public void putBrokerFactoryAliases(Map m) {\n         m.put(\"jdbc\", JDBCBrokerFactory.class.getName());\n     }\n@@ -48,4 +61,9 @@ public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         }\n         return false;\n     }\n+    \n+    @Override\n+    public Set<String> getSupportedQueryHints() {\n+        return supportedQueryHints;\n+    }\n }"},{"sha":"660073cb68a8983ef9e960e854fa04d6a3412bf2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -48,7 +48,7 @@ public Object newInstance(String clsName, Class type,\n         // we need to manually perform the instantiation\n         try {\n             Class cls = Strings.toClass(clsName,\n-                (ClassLoader) AccessController.doPrivileged(\n+                AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(type)));        \n             return cls.getConstructor(new Class[]{ JDBCConfiguration.class }).\n                 newInstance(new Object[]{ conf });"},{"sha":"7db54b7e2bb5ffdbdcd913f8d5c7e844ebcfe2bf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java?ref=191f26d72d58b992ee7a6f82c6973681a3bdc275","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import java.util.Collections;\n-import java.util.Hashtable;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.util.CacheMap;\n-\n-\n-/**\n- * A cache of sql queries.\n- *\n- * @since 1.2\n- * @nojavadoc\n- */\n-public class QuerySQLCacheValue\n-    extends PluginValue {\n-\n-    public static final String[] ALIASES = {\n-        \"true\", CacheMap.class.getName(),\n-        \"all\", ConcurrentHashMap.class.getName(),\n-        \"false\", null,\n-    };\n-    \n-    public QuerySQLCacheValue(String prop) {\n-        super(prop, true); \n-        setAliases(ALIASES);\n-        setDefault(ALIASES[0]);\n-        setClassName(ALIASES[1]);\n-    }\n-    \n-    public boolean isSQLCacheOn() {\n-        if (getClassName() == null) \n-            return false;\n-        return true;\n-    }\n-    \n-    public Object newInstance() {\n-        // make sure map handles concurrency\n-        String clsName = getClassName();\n-        if (clsName == null)\n-            return null;\n-        Map map = null;\n-\n-        try {\n-            // Use the \"OpenJPA\" classloader first...\n-            map = (Map) Configurations.newInstance(clsName, this.getClass()\n-                    .getClassLoader());\n-        } catch (Exception e) {\n-            // If the \"OpenJPA\" classloader fails, then try the classloader\n-            // that was used to load java.util.Map...\n-            map = (Map) Configurations.newInstance(clsName,\n-                    Map.class.getClassLoader());\n-        }\n-        if (map != null\n-                && !(map instanceof Hashtable)\n-                && !(map instanceof CacheMap)\n-                && !(map instanceof \n-                        org.apache.openjpa.lib.util.concurrent.ConcurrentMap)\n-                && !(map instanceof java.util.concurrent.ConcurrentMap))\n-            map = Collections.synchronizedMap(map);\n-        return map;\n-    }\n-\n-}"},{"sha":"e3da56391de642082c1b1a7639cd550f5630b845","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":19,"deletions":6,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -25,6 +25,7 @@\n import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager.RefCountConnection;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n@@ -56,8 +57,9 @@ public void setType(int type) {\n     public Object next(StoreContext ctx, ClassMetaData meta) {\n         JDBCStore store = getStore(ctx);\n         try {\n-            current = nextInternal(store, (ClassMapping) meta);\n-            return current;\n+            Object currentLocal = nextInternal(store, (ClassMapping) meta);\n+            current = currentLocal;\n+            return currentLocal;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (SQLException se) {\n@@ -150,14 +152,16 @@ private JDBCStore getStore(StoreContext ctx) {\n      * <code>TYPE_CONTIGUOUS</code> the connection from the {@link StoreManager}\n      * will be returned. \n      * \n-     * <P>Otherwise a new connection will be obtained using DataSource2 from the \n+     * <P>Otherwise a new connection will be obtained using DataSource2 from the\n      * current configuration. In this case autocommit is set to false prior to \n      * returning the connection.</P>\n      */\n     protected Connection getConnection(JDBCStore store)\n         throws SQLException {\n-        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS)\n+        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n+            // Also increments ref count.\n             return store.getConnection();\n+        }\n         else {\n             JDBCConfiguration conf = store.getConfiguration();\n             DataSource ds = conf.getDataSource2(store.getContext());\n@@ -171,13 +175,22 @@ protected Connection getConnection(JDBCStore store)\n     /**\n      * Close the current connection. If the sequence is\n      * <code>TYPE_TRANSACTIONAL</code> or <code>TYPE_CONTIGUOUS</code>\n-     * nothing will be done. Otherwise the connection will be closed.\n+     * we will decrement the ref count. Otherwise the connection will be\n+     * committed and then closed. \n      */\n     protected void closeConnection(Connection conn) {\n         if (conn == null)\n             return;\n         if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n-            // do nothing; this seq is part of the business transaction\n+            // The seq is part of the business transaction however we need\n+            // to decrement the ref count so that the connection may be \n+            // closed appropriately.\n+          \ttry { \n+           \t\tconn.close();\n+           \t}\n+           \tcatch(SQLException se) { \n+           \t\tthrow SQLExceptions.getStore(se);\n+           \t}\n             return;\n         }\n         else {"},{"sha":"fe8c8835a781a13a615b4fdfe41a8fe0eeeeb20e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":90,"deletions":16,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -20,10 +20,12 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedList;\n+import java.util.List;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -36,8 +38,10 @@\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n@@ -75,18 +79,37 @@ public Collection flush(Collection states, JDBCStore store) {\n         }\n     }\n \n-    private Collection flush(Collection states, JDBCStore store,\n+    protected Collection flush(Collection states, JDBCStore store,\n         PreparedStatementManager psMgr) {\n         // run through all the states and update them as necessary\n         RowManager rowMgr = newRowManager();\n         Collection customs = new LinkedList();\n         Collection exceps = psMgr.getExceptions();\n-        for (Iterator itr = states.iterator(); itr.hasNext();)\n-            exceps = populateRowManager((OpenJPAStateManager) itr.next(),\n-                rowMgr, store, exceps, customs);\n+        Collection mappedByIdStates = new ArrayList();\n+        for (Iterator itr = states.iterator(); itr.hasNext();) {\n+            OpenJPAStateManager obj = (OpenJPAStateManager)itr.next();\n+            if (obj instanceof StateManagerImpl) {\n+                StateManagerImpl sm = (StateManagerImpl) obj;\n+                if (sm.getMappedByIdFields() != null)\n+                    mappedByIdStates.add(sm);\n+                else exceps = populateRowManager(sm, rowMgr, store, exceps,\n+                        customs);\n+            } else \n+                exceps = populateRowManager(obj, rowMgr, store, exceps,\n+                        customs);\n+        }\n \n         // flush rows\n         exceps = flush(rowMgr, psMgr, exceps);\n+        \n+        if (mappedByIdStates.size() != 0) {\n+            for (Iterator itr = mappedByIdStates.iterator(); itr.hasNext();) {\n+                StateManagerImpl sm = (StateManagerImpl) itr.next();\n+                exceps = populateRowManager(sm, rowMgr, store, exceps, customs);\n+            }\n+            // flush rows\n+            exceps = flush(rowMgr, psMgr, exceps);\n+        }\n \n         // now do any custom mappings\n         for (Iterator itr = customs.iterator(); itr.hasNext();) {\n@@ -144,7 +167,7 @@ protected Collection populateRowManager(OpenJPAStateManager sm,\n                     customs);\n             } else if ((dirty = ImplHelper.getUpdateFields(sm)) != null) {\n                 update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n-                    store, customs);\n+                    store, customs, false);\n             } else if (sm.isVersionUpdateRequired()) {\n                 updateIndicators(sm, (ClassMapping) sm.getMetaData(), rowMgr,\n                     store, customs, true);\n@@ -190,11 +213,22 @@ protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n \n         mapping.insert(sm, store, rowMgr);\n         FieldMapping[] fields = mapping.getDefinedFieldMappings();\n+        if (((StateManagerImpl)sm).getMappedByIdFields() != null) {\n+            // when there is mappedByIdFields, the id field is not\n+            // fully populated. We need to insert other fields first\n+            // so that in the process of inserting other fields,\n+            // the values of mappedById fields can be set into\n+            // the id fields. Once the id fields are fully populated,\n+            // we will then insert the id fields.\n+            fields = reorderFields(fields);\n+        }  \n+        \n         BitSet dirty = sm.getDirty();\n         for (int i = 0; i < fields.length; i++) {\n             if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomInsert(fields[i], sm, store, customs))\n+                && !bufferCustomInsert(fields[i], sm, store, customs)) {\n                 fields[i].insert(sm, store, rowMgr);\n+            }\n         }\n         if (sup == null) {\n             Version vers = mapping.getVersion();\n@@ -205,6 +239,22 @@ protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n                 dsc.insert(sm, store, rowMgr);\n         }\n     }\n+    \n+    private FieldMapping[] reorderFields(FieldMapping[] fields) {\n+        List<FieldMapping> pkFmds = new ArrayList<FieldMapping>();\n+        FieldMapping[] ret = new FieldMapping[fields.length];\n+        int j = 0;\n+        for (int i = 0; i < fields.length; i++) {\n+            if (!fields[i].isPrimaryKey())\n+                ret[j++] = fields[i];\n+            else\n+                pkFmds.add(fields[i]);\n+        }\n+        for (int i = 0; i <pkFmds.size(); i++) {\n+            ret[j++] = pkFmds.get(i);\n+        }\n+        return ret;\n+    }\n \n     /**\n      * If the given mapping uses a custom insert, places a\n@@ -267,7 +317,7 @@ private boolean bufferCustomDelete(Strategy strat, OpenJPAStateManager sm,\n      */\n     protected void update(OpenJPAStateManager sm, BitSet dirty,\n         ClassMapping mapping, RowManager rowMgr, JDBCStore store,\n-        Collection customs) throws SQLException {\n+        Collection customs, boolean updateIndicators) throws SQLException {\n         Boolean custom = mapping.isCustomUpdate(sm, store);\n         if (!Boolean.FALSE.equals(custom))\n             mapping.customUpdate(sm, store);\n@@ -278,24 +328,47 @@ protected void update(OpenJPAStateManager sm, BitSet dirty,\n         // detect whether any fields in their rows have been modified\n         FieldMapping[] fields = mapping.getDefinedFieldMappings();\n         for (int i = 0; i < fields.length; i++) {\n-            if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomUpdate(fields[i], sm, store, customs))\n-                fields[i].update(sm, store, rowMgr);\n+            FieldMapping field = fields[i];\n+            if (dirty.get(field.getIndex())\n+                && !bufferCustomUpdate(field, sm, store, customs)) {\n+                field.update(sm, store, rowMgr);\n+                if (!updateIndicators) {\n+                    FieldMapping[] inverseFieldMappings =\n+                        field.getInverseMappings();\n+                    if (inverseFieldMappings.length == 0) {\n+                        updateIndicators = true;\n+                    }\n+                    else {\n+                        for (FieldMapping inverseFieldMapping :\n+                            inverseFieldMappings) {\n+                            if (inverseFieldMapping.getMappedBy() != null) {\n+                                updateIndicators = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        if (sup == null)\n-            updateIndicators(sm, mapping, rowMgr, store, customs, false);\n+        if (sup == null) {\n+            if (updateIndicators) {\n+                updateIndicators(sm, mapping, rowMgr, store, customs, false);\n+            }\n+        }\n         else\n-            update(sm, dirty, sup, rowMgr, store, customs);\n+            update(sm, dirty, sup, rowMgr, store, customs, updateIndicators);\n+\n         mapping.update(sm, store, rowMgr);\n     }\n \n     /**\n      * Update version and discriminator indicators.\n      */\n-    protected void updateIndicators(OpenJPAStateManager sm, ClassMapping mapping,\n-        RowManager rowMgr, JDBCStore store, Collection customs,\n+    protected void updateIndicators(OpenJPAStateManager sm,\n+            ClassMapping mapping, RowManager rowMgr, JDBCStore store,\n+            Collection customs,\n         boolean versionUpdateOnly) throws SQLException {\n         while (mapping.getJoinablePCSuperclassMapping() != null)\n             mapping = mapping.getJoinablePCSuperclassMapping();\n@@ -340,7 +413,8 @@ private boolean bufferCustomUpdate(Strategy strat, OpenJPAStateManager sm,\n         private final OpenJPAStateManager _sm;\n         private final Strategy _strat;\n \n-        public CustomMapping(int action, OpenJPAStateManager sm, Strategy strat) {\n+        public CustomMapping(int action, OpenJPAStateManager sm, Strategy strat)\n+        {\n             _action = action;\n             _sm = sm;\n             _strat = strat;"},{"sha":"14bdd66e916cc2e6e1cd585cbe7b660801e3bea2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -36,7 +36,7 @@\n  * the following property: \n  * <PRE>\n  *   < property name=\"openjpa.jdbc.UpdateManager\" \n- *     value=\"org.apache.openjpa.jdbc.kernel.YourOperationOrderUpdateManager\" />   \n+ *     value=\"org.apache.openjpa.jdbc.kernel.YourOperationOrderUpdateManager\" />\n  * </PRE></P>\n  * @author Teresa Kan\n  */"},{"sha":"ceca3c754b20067a2b0fd8f442908b5e4b993e84","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -55,7 +55,6 @@\n     private List _batchedRows = new ArrayList();\n     private int _batchLimit;\n     private boolean _disableBatch = false;\n-    private transient Log _log = null;\n \n     /**\n      * Constructor. Supply connection.\n@@ -64,7 +63,6 @@ public BatchingPreparedStatementManagerImpl(JDBCStore store,\n         Connection conn, int batchLimit) {\n         super(store, conn);\n         _batchLimit = batchLimit;\n-        _log = store.getConfiguration().getLog(JDBCConfiguration.LOG_JDBC);\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"batch_limit\", String.valueOf(_batchLimit)));\n     }\n@@ -216,6 +214,7 @@ private void flushSingleRow(RowImpl row, PreparedStatement ps)\n             row.flush(ps, _dict, _store);\n         int count = executeUpdate(ps, row.getSQL(_dict), row);\n         if (count != 1) {\n+            logSQLWarnings(ps);\n             Object failed = row.getFailedObject();\n             if (failed != null)\n                 _exceptions.add(new OptimisticException(failed));\n@@ -257,7 +256,7 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                         row.getSQL(_dict)).getMessage());\n                 break;\n             case Statement.SUCCESS_NO_INFO: // -2\n-                if (_dict.reportsSuccessNoInfoOnBatchUpdates &&                    \n+                if (_dict.reportsSuccessNoInfoOnBatchUpdates &&\n                     updateSuccessCnt != count.length) {\n                     // Oracle batching specifics:\n                     // treat update/delete of SUCCESS_NO_INFO as failed case\n@@ -280,6 +279,7 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                 break;\n             case 0: // no row is inserted, treats it as failed\n                 // case\n+                logSQLWarnings(ps);\n                 if (failed != null)\n                     _exceptions.add(new OptimisticException(failed));\n                 else if (row.getAction() == Row.ACTION_INSERT)"},{"sha":"42537e672c08d196a3fd1307e23d7eadeab504e4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","status":"modified","additions":555,"deletions":546,"changes":1101,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -1,546 +1,555 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.jdbc.kernel;\r\n-\r\n-import java.sql.Connection;\r\n-import java.sql.SQLException;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n-import org.apache.openjpa.jdbc.schema.Table;\r\n-import org.apache.openjpa.jdbc.sql.PrimaryRow;\r\n-import org.apache.openjpa.jdbc.sql.Row;\r\n-import org.apache.openjpa.jdbc.sql.RowImpl;\r\n-import org.apache.openjpa.jdbc.sql.RowManager;\r\n-import org.apache.openjpa.jdbc.sql.RowManagerImpl;\r\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.lib.graph.DepthFirstAnalysis;\r\n-import org.apache.openjpa.lib.graph.Edge;\r\n-import org.apache.openjpa.lib.graph.Graph;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.InternalException;\r\n-import org.apache.openjpa.util.OpenJPAException;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * <p>Standard update manager, capable of foreign key constraint evaluation.</p>\r\n- *\r\n- * @since 1.0.0\r\n- */\r\n-public class ConstraintUpdateManager\r\n-    extends AbstractUpdateManager {\r\n-\r\n-    private static final Localizer _loc = Localizer.forPackage\r\n-        (ConstraintUpdateManager.class);\r\n-\r\n-    public boolean orderDirty() {\r\n-        return false;\r\n-    }\r\n-\r\n-    protected PreparedStatementManager newPreparedStatementManager\r\n-        (JDBCStore store, Connection conn) {\r\n-        return new PreparedStatementManagerImpl(store, conn);\r\n-    }\r\n-\r\n-    protected RowManager newRowManager() {\r\n-        return new RowManagerImpl(false);\r\n-    }\r\n-\r\n-    protected Collection flush(RowManager rowMgr,\r\n-        PreparedStatementManager psMgr, Collection exceps) {\r\n-        RowManagerImpl rmimpl = (RowManagerImpl) rowMgr;\r\n-\r\n-        // first take care of all secondary table deletes and 'all row' deletes\r\n-        // (which are probably secondary table deletes), since no foreign\r\n-        // keys ever rely on secondary table pks\r\n-        flush(rmimpl.getAllRowDeletes(), psMgr);\r\n-        flush(rmimpl.getSecondaryDeletes(), psMgr);\r\n-\r\n-        // now do any 'all row' updates\r\n-        flush(rmimpl.getAllRowUpdates(), psMgr);\r\n-\r\n-        // analyze foreign keys\r\n-        Collection inserts = rmimpl.getInserts();\r\n-        Collection updates = rmimpl.getUpdates();\r\n-        Collection deletes = rmimpl.getDeletes();\r\n-        Graph[] graphs = new Graph[2];    // insert graph, delete graph\r\n-        analyzeForeignKeys(inserts, updates, deletes, rmimpl, graphs);\r\n-\r\n-        // flush insert graph, if any\r\n-        boolean autoAssign = rmimpl.hasAutoAssignConstraints();\r\n-        try {\r\n-            flushGraph(graphs[0], psMgr, autoAssign);\r\n-        } catch (SQLException se) {\r\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\r\n-        } catch (OpenJPAException ke) {\r\n-            exceps = addException(exceps, ke);\r\n-        }\r\n-\r\n-        // flush the rest of the inserts and updates; inserts before updates\r\n-        // because some update fks might reference pks that have to be inserted\r\n-        flush(inserts, psMgr);\r\n-        flush(updates, psMgr);\r\n-\r\n-        // flush the delete graph, if any\r\n-        try {\r\n-            flushGraph(graphs[1], psMgr, autoAssign);\r\n-        } catch (SQLException se) {\r\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\r\n-        } catch (OpenJPAException ke) {\r\n-            exceps = addException(exceps, ke);\r\n-        }\r\n-\r\n-        // put the remainder of the deletes after updates because some updates\r\n-        // may be nulling fks to rows that are going to be deleted\r\n-        flush(deletes, psMgr);\r\n-\r\n-        // take care of all secondary table inserts and updates last, since\r\n-        // they may rely on previous inserts or updates, but nothing relies\r\n-        // on them\r\n-        flush(rmimpl.getSecondaryUpdates(), psMgr);\r\n-\r\n-        // flush any left over prepared statements\r\n-        psMgr.flush();\r\n-        return exceps;\r\n-    }\r\n-\r\n-    /**\r\n-     * Analyze foreign key dependencies on the given rows\r\n-     * and create an insert and a delete graph to execute.  The insert\r\n-     * graph will be flushed before all other rows, and the delete graph will\r\n-     * be flushed after them.\r\n-     */\r\n-    private void analyzeForeignKeys(Collection inserts, Collection updates,\r\n-        Collection deletes, RowManagerImpl rowMgr, Graph[] graphs) {\r\n-        // if there are any deletes, we have to map the insert objects on their\r\n-        // oids so we'll be able to detect delete-then-insert-same-pk cases\r\n-        Map insertMap = null;\r\n-        OpenJPAStateManager sm;\r\n-        if (!deletes.isEmpty() && !inserts.isEmpty()) {\r\n-            insertMap = new HashMap((int) (inserts.size() * 1.33 + 1));\r\n-            for (Iterator itr = inserts.iterator(); itr.hasNext();) {\r\n-                sm = ((Row) itr.next()).getPrimaryKey();\r\n-                if (sm != null && sm.getObjectId() != null)\r\n-                    insertMap.put(sm.getObjectId(), sm);\r\n-            }\r\n-        }\r\n-\r\n-        // first construct the graph for deletes; this may expand to include\r\n-        // inserts and updates as well if there are any inserts that rely on\r\n-        // deletes (delete-then-insert-same-pk cases)\r\n-        PrimaryRow row;\r\n-        Row row2;\r\n-        ForeignKey[] fks;\r\n-        OpenJPAStateManager fkVal;\r\n-        boolean ignoreUpdates = true;\r\n-        for (Iterator itr = deletes.iterator(); itr.hasNext();) {\r\n-            row = (PrimaryRow) itr.next();\r\n-            if (!row.isValid())\r\n-                continue;\r\n-\r\n-            row2 = getInsertRow(insertMap, rowMgr, row);\r\n-            if (row2 != null) {\r\n-                ignoreUpdates = false;\r\n-                graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row, null);\r\n-            }\r\n-\r\n-            // now check this row's fks against other deletes\r\n-            fks = row.getTable().getForeignKeys();\r\n-            for (int j = 0; j < fks.length; j++) {\r\n-                // when deleting ref fks they'll just set a where value, so\r\n-                // check both for fk updates (relation fks) and wheres (ref fks)\r\n-                fkVal = row.getForeignKeySet(fks[j]);\r\n-                if (fkVal == null)\r\n-                    fkVal = row.getForeignKeyWhere(fks[j]);\r\n-                if (fkVal == null)\r\n-                    continue;\r\n-\r\n-                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\r\n-                    Row.ACTION_DELETE, fkVal, false);\r\n-                if (row2 != null && row2.isValid() && row2 != row)\r\n-                    graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row,\r\n-                        fks[j]);\r\n-            }\r\n-        }\r\n-\r\n-        if (ignoreUpdates)\r\n-            graphs[0] = analyzeAgainstInserts(inserts, rowMgr, graphs[0]);\r\n-        else {\r\n-            // put inserts *and updates* in the delete graph; they all rely\r\n-            // on each other\r\n-            graphs[1] = analyzeAgainstInserts(updates, rowMgr, graphs[1]);\r\n-            graphs[1] = analyzeAgainstInserts(inserts, rowMgr, graphs[1]);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Check to see if there is an insert for for the same table and primary\r\n-     * key values as the given delete row.\r\n-     */\r\n-    private Row getInsertRow(Map insertMap, RowManagerImpl rowMgr, Row row) {\r\n-        if (insertMap == null)\r\n-            return null;\r\n-\r\n-        OpenJPAStateManager sm = row.getPrimaryKey();\r\n-        if (sm == null)\r\n-            return null;\r\n-\r\n-        // look for a new object whose insert id is the same as this delete one\r\n-        Object oid = sm.getObjectId();\r\n-        OpenJPAStateManager nsm = (OpenJPAStateManager) insertMap.get(oid);\r\n-        if (nsm == null)\r\n-            return null;\r\n-\r\n-        // found new object; get its row\r\n-        row = rowMgr.getRow(row.getTable(), Row.ACTION_INSERT, nsm, false);\r\n-        return (row == null || row.isValid()) ? row : null;\r\n-    }\r\n-\r\n-    /**\r\n-     * Analyze the given rows against the inserts, placing dependencies\r\n-     * in the given graph.\r\n-     */\r\n-    private Graph analyzeAgainstInserts(Collection rows, RowManagerImpl rowMgr,\r\n-        Graph graph) {\r\n-        PrimaryRow row;\r\n-        Row row2;\r\n-        ForeignKey[] fks;\r\n-        Column[] cols;\r\n-        for (Iterator itr = rows.iterator(); itr.hasNext();) {\r\n-            row = (PrimaryRow) itr.next();\r\n-            if (!row.isValid())\r\n-                continue;\r\n-\r\n-            // check this row's fks against inserts; a logical fk to an auto-inc\r\n-            // column is treated just as actual database fk because the result\r\n-            // is the same: the pk row has to be inserted before the fk row\r\n-            fks = row.getTable().getForeignKeys();\r\n-            for (int j = 0; j < fks.length; j++) {\r\n-                if (row.getForeignKeySet(fks[j]) == null)\r\n-                    continue;\r\n-\r\n-                // see if this row is dependent on another.  if it's only\r\n-                // depenent on itself, see if the fk is logical or deferred, in\r\n-                // which case it must be an auto-inc because otherwise we\r\n-                // wouldn't have recorded it\r\n-                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\r\n-                    Row.ACTION_INSERT, row.getForeignKeySet(fks[j]), false);\r\n-                if (row2 != null && row2.isValid() && (row2 != row\r\n-                    || fks[j].isDeferred() || fks[j].isLogical()))\r\n-                    graph = addEdge(graph, row, (PrimaryRow) row2, fks[j]);\r\n-            }\r\n-\r\n-            // see if there are any relation id columns dependent on\r\n-            // auto-inc objects\r\n-            cols = row.getTable().getRelationIdColumns();\r\n-            for (int j = 0; j < cols.length; j++) {\r\n-                OpenJPAStateManager sm = row.getRelationIdSet(cols[j]);\r\n-                if (sm == null)\r\n-                    continue;\r\n-\r\n-                row2 = rowMgr.getRow(getBaseTable(sm), Row.ACTION_INSERT,\r\n-                    sm, false);\r\n-                if (row2 != null && row2.isValid())\r\n-                    graph = addEdge(graph, row, (PrimaryRow) row2, cols[j]);\r\n-            }\r\n-        }\r\n-        return graph;\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the base table for the given instance.\r\n-     */\r\n-    private static Table getBaseTable(OpenJPAStateManager sm) {\r\n-        ClassMapping cls = (ClassMapping) sm.getMetaData();\r\n-        while (cls.getJoinablePCSuperclassMapping() != null)\r\n-            cls = cls.getJoinablePCSuperclassMapping();\r\n-        return cls.getTable();\r\n-    }\r\n-\r\n-    /**\r\n-     * Add an edge between the given rows in the given foreign key graph.\r\n-     */\r\n-    private Graph addEdge(Graph graph, PrimaryRow row1, PrimaryRow row2,\r\n-        Object fk) {\r\n-        // delay creation of the graph\r\n-        if (graph == null)\r\n-            graph = new Graph();\r\n-\r\n-        row1.setDependent(true);\r\n-        row2.setDependent(true);\r\n-        graph.addNode(row1);\r\n-        graph.addNode(row2);\r\n-\r\n-        // add an edge from row1 to row2, and set the fk causing the\r\n-        // dependency as the user object so we can retrieve it when resolving\r\n-        // circular constraints\r\n-        Edge edge = new Edge(row1, row2, true);\r\n-        edge.setUserObject(fk);\r\n-        graph.addEdge(edge);\r\n-\r\n-        return graph;\r\n-    }\r\n-\r\n-    /**\r\n-     * Flush the given graph of rows in the proper order.\r\n-     * @param graph The graph of statements to be walked\r\n-     * @param psMgr The prepared statement manager to use to issue the\r\n-     * statements\r\n-     * @param autoAssign Whether any of the rows in the graph have any\r\n-     * auto-assign constraints\r\n-     */\r\n-    protected void flushGraph(Graph graph, PreparedStatementManager psMgr,\r\n-        boolean autoAssign)\r\n-        throws SQLException {\r\n-        if (graph == null)\r\n-            return;\r\n-\r\n-        DepthFirstAnalysis dfa = newDepthFirstAnalysis(graph, autoAssign);\r\n-        Collection insertUpdates = new LinkedList();\r\n-        Collection deleteUpdates = new LinkedList();\r\n-        boolean recalculate;\r\n-\r\n-        // Handle circular constraints:\r\n-        // - if deleted row A has a ciricular fk to deleted row B, \r\n-        //   then use an update statement to null A's fk to B before flushing, \r\n-        //   and then flush\r\n-        // - if inserted row A has a circular fk to updated/inserted row B,\r\n-        //   then null the fk in the B row object, then flush,\r\n-        //   and after flushing, use an update to set the fk back to A\r\n-        // Depending on where circular dependencies are broken, the  \r\n-        // topological order of the graph nodes has to be re-calculated.\r\n-        recalculate = resolveCycles(graph, dfa.getEdges(Edge.TYPE_BACK),\r\n-                deleteUpdates, insertUpdates);\r\n-        recalculate |= resolveCycles(graph, dfa.getEdges(Edge.TYPE_FORWARD),\r\n-                deleteUpdates, insertUpdates);\r\n-\r\n-        if (recalculate) {\r\n-            dfa = recalculateDepthFirstAnalysis(graph, autoAssign);\r\n-        }\r\n-\r\n-        // flush delete updates to null fks, then all rows in order, then\r\n-        // the insert updates to set circular fk values\r\n-        flush(deleteUpdates, psMgr);\r\n-        Collection nodes = dfa.getSortedNodes();\r\n-        for (Iterator itr = nodes.iterator(); itr.hasNext();)\r\n-            psMgr.flush((RowImpl) itr.next());\r\n-        flush(insertUpdates, psMgr);\r\n-    }\r\n-\r\n-    /**\r\n-     * Break a circular dependency caused by delete operations.\r\n-     * If deleted row A has a ciricular fk to deleted row B, then use an update \r\n-     * statement to null A's fk to B before deleting B, then delete A.\r\n-     * @param edge Edge in the dependency graph corresponding to a foreign key\r\n-     * constraint. This dependency is broken by nullifying the foreign key.\r\n-     * @param deleteUpdates Collection of update statements that are executed\r\n-     * before the delete operations are flushed \r\n-     */\r\n-    private void addDeleteUpdate(Edge edge, Collection deleteUpdates)\r\n-        throws SQLException {\r\n-        PrimaryRow row;\r\n-        RowImpl update;\r\n-        ForeignKey fk;\r\n-\r\n-        // copy where conditions into new update that nulls the fk\r\n-        row = (PrimaryRow) edge.getTo();\r\n-        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\r\n-        row.copyInto(update, true);\r\n-        if (edge.getUserObject() instanceof ForeignKey) {\r\n-            fk = (ForeignKey) edge.getUserObject();\r\n-            update.setForeignKey(fk, row.getForeignKeyIO(fk), null);\r\n-        } else\r\n-            update.setNull((Column) edge.getUserObject());\r\n-\r\n-        deleteUpdates.add(update);\r\n-    }\r\n-\r\n-    /**\r\n-     * Break a circular dependency caused by insert operations.\r\n-     * If inserted row A has a circular fk to updated/inserted row B,\r\n-     * then null the fk in the B row object, then flush,\r\n-     * and after flushing, use an update to set the fk back to A.\r\n-     * @param row Row to be flushed\r\n-     * @param edge Edge in the dependency graph corresponding to a foreign key\r\n-     * constraint. This dependency is broken by nullifying the foreign key.\r\n-     * @param insertUpdates Collection of update statements that are executed\r\n-     * after the insert/update operations are flushed \r\n-     */\r\n-    private void addInsertUpdate(PrimaryRow row, Edge edge,\r\n-        Collection insertUpdates) throws SQLException {\r\n-        RowImpl update;\r\n-        ForeignKey fk;\r\n-        Column col;\r\n-\r\n-        // copy where conditions into new update that sets the fk\r\n-        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\r\n-        if (row.getAction() == Row.ACTION_INSERT) {\r\n-            if (row.getPrimaryKey() == null)\r\n-                throw new InternalException(_loc.get(\"ref-cycle\"));\r\n-            update.wherePrimaryKey(row.getPrimaryKey());\r\n-        } else {\r\n-            // Row.ACTION_UPDATE\r\n-            row.copyInto(update, true);\r\n-        }\r\n-        if (edge.getUserObject() instanceof ForeignKey) {\r\n-            fk = (ForeignKey) edge.getUserObject();\r\n-            update.setForeignKey(fk, row.getForeignKeyIO(fk),\r\n-                row.getForeignKeySet(fk));\r\n-            row.clearForeignKey(fk);\r\n-        } else {\r\n-            col = (Column) edge.getUserObject();\r\n-            update.setRelationId(col, row.getRelationIdSet(col),\r\n-                row.getRelationIdCallback(col));\r\n-            row.clearRelationId(col);\r\n-        }\r\n-\r\n-        insertUpdates.add(update);\r\n-    }\r\n-\r\n-    /**\r\n-     * Finds a nullable foreign key by walking the dependency cycle. \r\n-     * Circular dependencies can be broken at this point.\r\n-     * @param cycle Cycle in the dependency graph.\r\n-     * @return Edge corresponding to a nullable foreign key.\r\n-     */\r\n-    private Edge findBreakableLink(List cycle) {\r\n-        Edge breakableLink = null;\r\n-        for (Iterator iter = cycle.iterator(); iter.hasNext(); ) {\r\n-            Edge edge = (Edge) iter.next();\r\n-            Object userObject = edge.getUserObject();\r\n-            if (userObject instanceof ForeignKey) {\r\n-                 if (!((ForeignKey) userObject).hasNotNullColumns()) {\r\n-                     breakableLink = edge;\r\n-                     break;\r\n-                 }\r\n-            } else if (userObject instanceof Column) {\r\n-                if (!((Column) userObject).isNotNull()) {\r\n-                    breakableLink = edge;\r\n-                    break;\r\n-                }\r\n-            }\r\n-        }\r\n-        return breakableLink;\r\n-    }\r\n-\r\n-    /**\r\n-     * Re-calculates the DepthFirstSearch analysis of the graph \r\n-     * after some of the edges have been removed. Ensures\r\n-     * that the dependency graph is cycle free.\r\n-     * @param graph The graph of statements to be walked\r\n-     * @param autoAssign Whether any of the rows in the graph have any\r\n-     * auto-assign constraints\r\n-     */\r\n-    private DepthFirstAnalysis recalculateDepthFirstAnalysis(Graph graph,\r\n-        boolean autoAssign) {\r\n-        DepthFirstAnalysis dfa;\r\n-        // clear previous traversal data\r\n-        graph.clearTraversal();\r\n-        dfa = newDepthFirstAnalysis(graph, autoAssign);\r\n-        // make sure that the graph is non-cyclic now\r\n-        assert (dfa.hasNoCycles()): _loc.get(\"graph-not-cycle-free\");\r\n-        return dfa;\r\n-    }\r\n-\r\n-    /**\r\n-     * Resolve circular dependencies by identifying and breaking\r\n-     * a nullable foreign key.\r\n-     * @param graph Dependency graph.\r\n-     * @param edges Collection of edges. Each edge indicates a possible \r\n-     * circular dependency\r\n-     * @param deleteUpdates Collection of update operations (nullifying \r\n-     * foreign keys) to be filled. These updates will be executed before \r\n-     * the rows in the dependency graph are flushed\r\n-     * @param insertUpdates CCollection of update operations (nullifying \r\n-     * foreign keys) to be filled. These updates will be executed after \r\n-     * the rows in the dependency graph are flushed\r\n-     * @return Depending on where circular dependencies are broken, the  \r\n-     * topological order of the graph nodes has to be re-calculated.\r\n-     */\r\n-    private boolean resolveCycles(Graph graph, Collection edges,\r\n-        Collection deleteUpdates, Collection insertUpdates)\r\n-        throws SQLException {\r\n-        boolean recalculate = false;\r\n-        for (Iterator itr = edges.iterator(); itr.hasNext();) {\r\n-            Edge edge = (Edge) itr.next();\r\n-            List cycle = edge.getCycle();\r\n-\r\n-            if (cycle != null) {\r\n-                // find a nullable foreign key\r\n-                Edge breakableLink = findBreakableLink(cycle);\r\n-                if (breakableLink == null) {\r\n-                    throw new UserException(_loc.get(\"no-nullable-fk\"));\r\n-                }\r\n-\r\n-                // topologic node order must be re-calculated,  if the\r\n-                // breakable link is different from the edge where\r\n-                // the circular dependency was originally detected\r\n-                if (edge != breakableLink) {\r\n-                    recalculate = true;\r\n-                }\r\n-\r\n-                if (!breakableLink.isRemovedFromGraph()) {\r\n-\r\n-                    // use a primary row update to prevent setting pk and fk values\r\n-                    // until after flush, to get latest auto-increment values\r\n-                    PrimaryRow row = (PrimaryRow) breakableLink.getFrom();\r\n-                    if (row.getAction() == Row.ACTION_DELETE) {\r\n-                        addDeleteUpdate(breakableLink, deleteUpdates);\r\n-                    } else {\r\n-                        addInsertUpdate(row, breakableLink, insertUpdates);\r\n-                    }\r\n-                    graph.removeEdge(breakableLink);\r\n-                }\r\n-            }\r\n-        }\r\n-        return recalculate;\r\n-    }\r\n-\r\n-    /**\r\n-     * Create a new {@link DepthFirstAnalysis} suitable for the given graph\r\n-     * and auto-assign settings.\r\n-     */\r\n-    protected DepthFirstAnalysis newDepthFirstAnalysis(Graph graph,\r\n-        boolean autoAssign) {\r\n-        return new DepthFirstAnalysis(graph);\r\n-    }\r\n-\r\n-    /**\r\n-     * Flush the given collection of secondary rows.\r\n-     */\r\n-    protected void flush(Collection rows, PreparedStatementManager psMgr) {\r\n-        if (rows.size() == 0)\r\n-            return;\r\n-\r\n-        RowImpl row;\r\n-        for (Iterator itr = rows.iterator(); itr.hasNext(); ) {\r\n-            row = (RowImpl) itr.next();\r\n-            if (row.isValid() && !row.isDependent())\r\n-                psMgr.flush(row);\r\n-        }\r\n-    }\r\n-}\n\\ No newline at end of file\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.PrimaryRow;\n+import org.apache.openjpa.jdbc.sql.Row;\n+import org.apache.openjpa.jdbc.sql.RowImpl;\n+import org.apache.openjpa.jdbc.sql.RowManager;\n+import org.apache.openjpa.jdbc.sql.RowManagerImpl;\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.graph.DepthFirstAnalysis;\n+import org.apache.openjpa.lib.graph.Edge;\n+import org.apache.openjpa.lib.graph.Graph;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * <p>Standard update manager, capable of foreign key constraint evaluation.</p>\n+ *\n+ * @since 1.0.0\n+ */\n+public class ConstraintUpdateManager\n+    extends AbstractUpdateManager {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (ConstraintUpdateManager.class);\n+\n+    public boolean orderDirty() {\n+        return true;\n+    }\n+\n+    protected PreparedStatementManager newPreparedStatementManager\n+        (JDBCStore store, Connection conn) {\n+        return new PreparedStatementManagerImpl(store, conn);\n+    }\n+\n+    protected RowManager newRowManager() {\n+        return new RowManagerImpl(false);\n+    }\n+\n+    protected Collection flush(RowManager rowMgr,\n+        PreparedStatementManager psMgr, Collection exceps) {\n+        RowManagerImpl rmimpl = (RowManagerImpl) rowMgr;\n+\n+        // first take care of all secondary table deletes and 'all row' deletes\n+        // (which are probably secondary table deletes), since no foreign\n+        // keys ever rely on secondary table pks\n+        flush(rmimpl.getAllRowDeletes(), psMgr);\n+        flush(rmimpl.getSecondaryDeletes(), psMgr);\n+\n+        // now do any 'all row' updates\n+        flush(rmimpl.getAllRowUpdates(), psMgr);\n+\n+        // analyze foreign keys\n+        Collection<PrimaryRow> inserts = rmimpl.getInserts();\n+        Collection<PrimaryRow> updates = rmimpl.getUpdates();\n+        Collection<PrimaryRow> deletes = rmimpl.getDeletes();\n+    \n+        Graph[] graphs = new Graph[2];    // insert graph, delete graph\n+        analyzeForeignKeys(inserts, updates, deletes, rmimpl, graphs);\n+\n+        // flush insert graph, if any\n+        boolean autoAssign = rmimpl.hasAutoAssignConstraints();\n+        try {\n+            flushGraph(graphs[0], psMgr, autoAssign);\n+        } catch (SQLException se) {\n+            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n+        } catch (OpenJPAException ke) {\n+            exceps = addException(exceps, ke);\n+        }\n+\n+        // flush the rest of the inserts and updates; inserts before updates\n+        // because some update fks might reference pks that have to be inserted\n+        flush(inserts, psMgr);\n+        flush(updates, psMgr);\n+\n+        // flush the delete graph, if any\n+        try {\n+            flushGraph(graphs[1], psMgr, autoAssign);\n+        } catch (SQLException se) {\n+            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n+        } catch (OpenJPAException ke) {\n+            exceps = addException(exceps, ke);\n+        }\n+\n+        // put the remainder of the deletes after updates because some updates\n+        // may be nulling fks to rows that are going to be deleted\n+        flush(deletes, psMgr);\n+\n+        // take care of all secondary table inserts and updates last, since\n+        // they may rely on previous inserts or updates, but nothing relies\n+        // on them\n+        flush(rmimpl.getSecondaryUpdates(), psMgr);\n+\n+        // flush any left over prepared statements\n+        psMgr.flush();\n+        return exceps;\n+    }\n+\n+    /**\n+     * Analyze foreign key dependencies on the given rows\n+     * and create an insert and a delete graph to execute.  The insert\n+     * graph will be flushed before all other rows, and the delete graph will\n+     * be flushed after them.\n+     */\n+    private void analyzeForeignKeys(Collection inserts, Collection updates,\n+        Collection deletes, RowManagerImpl rowMgr, Graph[] graphs) {\n+        // if there are any deletes, we have to map the insert objects on their\n+        // oids so we'll be able to detect delete-then-insert-same-pk cases\n+        Map insertMap = null;\n+        OpenJPAStateManager sm;\n+        if (!deletes.isEmpty() && !inserts.isEmpty()) {\n+            insertMap = new HashMap((int) (inserts.size() * 1.33 + 1));\n+            for (Iterator itr = inserts.iterator(); itr.hasNext();) {\n+                sm = ((Row) itr.next()).getPrimaryKey();\n+                if (sm != null && sm.getObjectId() != null)\n+                    insertMap.put(sm.getObjectId(), sm);\n+            }\n+        }\n+\n+        // first construct the graph for deletes; this may expand to include\n+        // inserts and updates as well if there are any inserts that rely on\n+        // deletes (delete-then-insert-same-pk cases)\n+        PrimaryRow row;\n+        Row row2;\n+        ForeignKey[] fks;\n+        OpenJPAStateManager fkVal;\n+        boolean ignoreUpdates = true;\n+        for (Iterator itr = deletes.iterator(); itr.hasNext();) {\n+            row = (PrimaryRow) itr.next();\n+            if (!row.isValid())\n+                continue;\n+\n+            row2 = getInsertRow(insertMap, rowMgr, row);\n+            if (row2 != null) {\n+                ignoreUpdates = false;\n+                graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row, null);\n+            }\n+\n+            // now check this row's fks against other deletes\n+            fks = row.getTable().getForeignKeys();\n+            for (int j = 0; j < fks.length; j++) {\n+                // when deleting ref fks they'll just set a where value, so\n+                // check both for fk updates (relation fks) and wheres (ref fks)\n+                fkVal = row.getForeignKeySet(fks[j]);\n+                if (fkVal == null)\n+                    fkVal = row.getForeignKeyWhere(fks[j]);\n+                if (fkVal == null)\n+                    continue;\n+\n+                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\n+                    Row.ACTION_DELETE, fkVal, false);\n+                if (row2 != null && row2.isValid() && row2 != row)\n+                    graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row,\n+                        fks[j]);\n+            }\n+        }\n+\n+        if (ignoreUpdates)\n+            graphs[0] = analyzeAgainstInserts(inserts, rowMgr, graphs[0]);\n+        else {\n+            // put inserts *and updates* in the delete graph; they all rely\n+            // on each other\n+            graphs[1] = analyzeAgainstInserts(updates, rowMgr, graphs[1]);\n+            graphs[1] = analyzeAgainstInserts(inserts, rowMgr, graphs[1]);\n+        }\n+    }\n+\n+    /**\n+     * Check to see if there is an insert for for the same table and primary\n+     * key values as the given delete row.\n+     */\n+    private Row getInsertRow(Map insertMap, RowManagerImpl rowMgr, Row row) {\n+        if (insertMap == null)\n+            return null;\n+\n+        OpenJPAStateManager sm = row.getPrimaryKey();\n+        if (sm == null)\n+            return null;\n+\n+        // look for a new object whose insert id is the same as this delete one\n+        Object oid = sm.getObjectId();\n+        OpenJPAStateManager nsm = (OpenJPAStateManager) insertMap.get(oid);\n+        if (nsm == null)\n+            return null;\n+\n+        // found new object; get its row\n+        row = rowMgr.getRow(row.getTable(), Row.ACTION_INSERT, nsm, false);\n+        return (row == null || row.isValid()) ? row : null;\n+    }\n+\n+    /**\n+     * Analyze the given rows against the inserts, placing dependencies\n+     * in the given graph.\n+     */\n+    private Graph analyzeAgainstInserts(Collection rows, RowManagerImpl rowMgr,\n+        Graph graph) {\n+        PrimaryRow row;\n+        Row row2;\n+        ForeignKey[] fks;\n+        Column[] cols;\n+        for (Iterator itr = rows.iterator(); itr.hasNext();) {\n+            row = (PrimaryRow) itr.next();\n+            if (!row.isValid())\n+                continue;\n+\n+            // check this row's fks against inserts; a logical fk to an auto-inc\n+            // column is treated just as actual database fk because the result\n+            // is the same: the pk row has to be inserted before the fk row\n+            fks = row.getTable().getForeignKeys();\n+            for (int j = 0; j < fks.length; j++) {\n+                if (row.getForeignKeySet(fks[j]) == null)\n+                    continue;\n+\n+                // see if this row is dependent on another.  if it's only\n+                // depenent on itself, see if the fk is logical or deferred, in\n+                // which case it must be an auto-inc because otherwise we\n+                // wouldn't have recorded it\n+                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\n+                    Row.ACTION_INSERT, row.getForeignKeySet(fks[j]), false);\n+                if (row2 != null && row2.isValid() && (row2 != row\n+                    || fks[j].isDeferred() || fks[j].isLogical()))\n+                    graph = addEdge(graph, row, (PrimaryRow) row2, fks[j]);\n+            }\n+\n+            // see if there are any relation id columns dependent on\n+            // auto-inc objects\n+            cols = row.getTable().getRelationIdColumns();\n+            for (int j = 0; j < cols.length; j++) {\n+                OpenJPAStateManager sm = row.getRelationIdSet(cols[j]);\n+                if (sm == null)\n+                    continue;\n+\n+                row2 = rowMgr.getRow(getBaseTable(sm), Row.ACTION_INSERT,\n+                    sm, false);\n+                if (row2 != null && row2.isValid())\n+                    graph = addEdge(graph, row, (PrimaryRow) row2, cols[j]);\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    /**\n+     * Return the base table for the given instance.\n+     */\n+    private static Table getBaseTable(OpenJPAStateManager sm) {\n+        ClassMapping cls = (ClassMapping) sm.getMetaData();\n+        while (cls.getJoinablePCSuperclassMapping() != null)\n+            cls = cls.getJoinablePCSuperclassMapping();\n+        return cls.getTable();\n+    }\n+\n+    /**\n+     * Add an edge between the given rows in the given foreign key graph.\n+     */\n+    private Graph addEdge(Graph graph, PrimaryRow row1, PrimaryRow row2,\n+        Object fk) {\n+        // delay creation of the graph\n+        if (graph == null)\n+            graph = new Graph();\n+\n+        row1.setDependent(true);\n+        row2.setDependent(true);\n+        graph.addNode(row1);\n+        graph.addNode(row2);\n+\n+        // add an edge from row1 to row2, and set the fk causing the\n+        // dependency as the user object so we can retrieve it when resolving\n+        // circular constraints\n+        Edge edge = new Edge(row1, row2, true);\n+        edge.setUserObject(fk);\n+        graph.addEdge(edge);\n+\n+        return graph;\n+    }\n+\n+    /**\n+     * Flush the given graph of rows in the proper order.\n+     * @param graph The graph of statements to be walked\n+     * @param psMgr The prepared statement manager to use to issue the\n+     * statements\n+     * @param autoAssign Whether any of the rows in the graph have any\n+     * auto-assign constraints\n+     */\n+    protected void flushGraph(Graph graph, PreparedStatementManager psMgr,\n+        boolean autoAssign)\n+        throws SQLException {\n+        if (graph == null)\n+            return;\n+\n+        DepthFirstAnalysis dfa = newDepthFirstAnalysis(graph, autoAssign);\n+        Collection insertUpdates = new LinkedList();\n+        Collection deleteUpdates = new LinkedList();\n+        boolean recalculate;\n+\n+        // Handle circular constraints:\n+        // - if deleted row A has a ciricular fk to deleted row B, \n+        //   then use an update statement to null A's fk to B before flushing, \n+        //   and then flush\n+        // - if inserted row A has a circular fk to updated/inserted row B,\n+        //   then null the fk in the B row object, then flush,\n+        //   and after flushing, use an update to set the fk back to A\n+        // Depending on where circular dependencies are broken, the  \n+        // topological order of the graph nodes has to be re-calculated.\n+        recalculate = resolveCycles(graph, dfa.getEdges(Edge.TYPE_BACK),\n+                deleteUpdates, insertUpdates);\n+        recalculate |= resolveCycles(graph, dfa.getEdges(Edge.TYPE_FORWARD),\n+                deleteUpdates, insertUpdates);\n+\n+        if (recalculate) {\n+            dfa = recalculateDepthFirstAnalysis(graph, autoAssign);\n+        }\n+\n+        // flush delete updates to null fks, then all rows in order, then\n+        // the insert updates to set circular fk values\n+        Collection nodes = dfa.getSortedNodes();\n+        flush(deleteUpdates, nodes, psMgr);\n+        flush(insertUpdates, psMgr);\n+    }\n+\n+    protected void flush(Collection deleteUpdates, Collection nodes,\n+    \tPreparedStatementManager psMgr) {\n+        flush(deleteUpdates, psMgr);\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();)\n+            psMgr.flush((RowImpl) itr.next());\n+    }\n+\n+    /**\n+     * Break a circular dependency caused by delete operations.\n+     * If deleted row A has a ciricular fk to deleted row B, then use an update \n+     * statement to null A's fk to B before deleting B, then delete A.\n+     * @param edge Edge in the dependency graph corresponding to a foreign key\n+     * constraint. This dependency is broken by nullifying the foreign key.\n+     * @param deleteUpdates Collection of update statements that are executed\n+     * before the delete operations are flushed \n+     */\n+    private void addDeleteUpdate(Edge edge, Collection deleteUpdates)\n+        throws SQLException {\n+        PrimaryRow row;\n+        RowImpl update;\n+        ForeignKey fk;\n+\n+        // copy where conditions into new update that nulls the fk\n+        row = (PrimaryRow) edge.getTo();\n+        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\n+        row.copyInto(update, true);\n+        if (edge.getUserObject() instanceof ForeignKey) {\n+            fk = (ForeignKey) edge.getUserObject();\n+            update.setForeignKey(fk, row.getForeignKeyIO(fk), null);\n+        } else\n+            update.setNull((Column) edge.getUserObject());\n+\n+        deleteUpdates.add(update);\n+    }\n+\n+    /**\n+     * Break a circular dependency caused by insert operations.\n+     * If inserted row A has a circular fk to updated/inserted row B,\n+     * then null the fk in the B row object, then flush,\n+     * and after flushing, use an update to set the fk back to A.\n+     * @param row Row to be flushed\n+     * @param edge Edge in the dependency graph corresponding to a foreign key\n+     * constraint. This dependency is broken by nullifying the foreign key.\n+     * @param insertUpdates Collection of update statements that are executed\n+     * after the insert/update operations are flushed \n+     */\n+    private void addInsertUpdate(PrimaryRow row, Edge edge,\n+        Collection insertUpdates) throws SQLException {\n+        RowImpl update;\n+        ForeignKey fk;\n+        Column col;\n+\n+        // copy where conditions into new update that sets the fk\n+        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\n+        if (row.getAction() == Row.ACTION_INSERT) {\n+            if (row.getPrimaryKey() == null)\n+                throw new InternalException(_loc.get(\"ref-cycle\"));\n+            update.wherePrimaryKey(row.getPrimaryKey());\n+        } else {\n+            // Row.ACTION_UPDATE\n+            row.copyInto(update, true);\n+        }\n+        if (edge.getUserObject() instanceof ForeignKey) {\n+            fk = (ForeignKey) edge.getUserObject();\n+            update.setForeignKey(fk, row.getForeignKeyIO(fk),\n+                row.getForeignKeySet(fk));\n+            row.clearForeignKey(fk);\n+        } else {\n+            col = (Column) edge.getUserObject();\n+            update.setRelationId(col, row.getRelationIdSet(col),\n+                row.getRelationIdCallback(col));\n+            row.clearRelationId(col);\n+        }\n+\n+        insertUpdates.add(update);\n+    }\n+\n+    /**\n+     * Finds a nullable foreign key by walking the dependency cycle. \n+     * Circular dependencies can be broken at this point.\n+     * @param cycle Cycle in the dependency graph.\n+     * @return Edge corresponding to a nullable foreign key.\n+     */\n+    private Edge findBreakableLink(List cycle) {\n+        Edge breakableLink = null;\n+        for (Iterator iter = cycle.iterator(); iter.hasNext(); ) {\n+            Edge edge = (Edge) iter.next();\n+            Object userObject = edge.getUserObject();\n+            if (userObject instanceof ForeignKey) {\n+                 if (!((ForeignKey) userObject).hasNotNullColumns()) {\n+                     breakableLink = edge;\n+                     break;\n+                 }\n+            } else if (userObject instanceof Column) {\n+                if (!((Column) userObject).isNotNull()) {\n+                    breakableLink = edge;\n+                    break;\n+                }\n+            }\n+        }\n+        return breakableLink;\n+    }\n+\n+    /**\n+     * Re-calculates the DepthFirstSearch analysis of the graph \n+     * after some of the edges have been removed. Ensures\n+     * that the dependency graph is cycle free.\n+     * @param graph The graph of statements to be walked\n+     * @param autoAssign Whether any of the rows in the graph have any\n+     * auto-assign constraints\n+     */\n+    private DepthFirstAnalysis recalculateDepthFirstAnalysis(Graph graph,\n+        boolean autoAssign) {\n+        DepthFirstAnalysis dfa;\n+        // clear previous traversal data\n+        graph.clearTraversal();\n+        dfa = newDepthFirstAnalysis(graph, autoAssign);\n+        // make sure that the graph is non-cyclic now\n+        assert (dfa.hasNoCycles()): _loc.get(\"graph-not-cycle-free\");\n+        return dfa;\n+    }\n+\n+    /**\n+     * Resolve circular dependencies by identifying and breaking\n+     * a nullable foreign key.\n+     * @param graph Dependency graph.\n+     * @param edges Collection of edges. Each edge indicates a possible \n+     * circular dependency\n+     * @param deleteUpdates Collection of update operations (nullifying \n+     * foreign keys) to be filled. These updates will be executed before \n+     * the rows in the dependency graph are flushed\n+     * @param insertUpdates CCollection of update operations (nullifying \n+     * foreign keys) to be filled. These updates will be executed after \n+     * the rows in the dependency graph are flushed\n+     * @return Depending on where circular dependencies are broken, the  \n+     * topological order of the graph nodes has to be re-calculated.\n+     */\n+    private boolean resolveCycles(Graph graph, Collection edges,\n+        Collection deleteUpdates, Collection insertUpdates)\n+        throws SQLException {\n+        boolean recalculate = false;\n+        for (Iterator itr = edges.iterator(); itr.hasNext();) {\n+            Edge edge = (Edge) itr.next();\n+            List cycle = edge.getCycle();\n+\n+            if (cycle != null) {\n+                // find a nullable foreign key\n+                Edge breakableLink = findBreakableLink(cycle);\n+                if (breakableLink == null) {\n+                    throw new UserException(_loc.get(\"no-nullable-fk\"));\n+                }\n+\n+                // topologic node order must be re-calculated,  if the\n+                // breakable link is different from the edge where\n+                // the circular dependency was originally detected\n+                if (edge != breakableLink) {\n+                    recalculate = true;\n+                }\n+\n+                if (!breakableLink.isRemovedFromGraph()) {\n+\n+                    // use a primary row update to prevent setting pk and fk\n+                    // values until after flush, to get latest auto-increment\n+                    // values\n+                    PrimaryRow row = (PrimaryRow) breakableLink.getFrom();\n+                    if (row.getAction() == Row.ACTION_DELETE) {\n+                        addDeleteUpdate(breakableLink, deleteUpdates);\n+                    } else {\n+                        addInsertUpdate(row, breakableLink, insertUpdates);\n+                    }\n+                    graph.removeEdge(breakableLink);\n+                }\n+            }\n+        }\n+        return recalculate;\n+    }\n+\n+    /**\n+     * Create a new {@link DepthFirstAnalysis} suitable for the given graph\n+     * and auto-assign settings.\n+     */\n+    protected DepthFirstAnalysis newDepthFirstAnalysis(Graph graph,\n+        boolean autoAssign) {\n+        return new DepthFirstAnalysis(graph);\n+    }\n+\n+    /**\n+     * Flush the given collection of secondary rows.\n+     */\n+    protected void flush(Collection rows, PreparedStatementManager psMgr) {\n+        if (rows.size() == 0)\n+            return;\n+\n+        RowImpl row;\n+        for (Iterator itr = rows.iterator(); itr.hasNext(); ) {\n+            row = (RowImpl) itr.next();\n+            if (!row.isFlushed() && row.isValid() && !row.isDependent()) {\n+                psMgr.flush(row);\n+                row.setFlushed(true);\n+            }\n+        }\n+    }\n+}"},{"sha":"46b247b47d2a385cafd5b9e1e28af0dd69a420f9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","status":"added","additions":420,"deletions":0,"changes":420,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,420 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.FinderCache;\n+import org.apache.openjpa.kernel.FinderQuery;\n+import org.apache.openjpa.kernel.QueryHints;\n+import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Implementation of FinderCache for JDBC.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ * @since 2.0.0\n+ *\n+ */\n+public class FinderCacheImpl \n+    implements FinderCache<ClassMapping, SelectExecutor, Result> {\n+    private static final String PATTERN_SEPARATOR = \"\\\\;\";\n+    private static final String EXLUDED_BY_USER = \"Excluded by user\";\n+     \n+    private final Map<ClassMapping, \n+        FinderQuery<ClassMapping, SelectExecutor, Result>> _delegate;\n+    // Key: class name Value: Reason why excluded\n+    private final Map<String, String> _uncachables;\n+    private List<String> _exclusionPatterns;\n+    private QueryStatistics<ClassMapping> _stats;\n+    private ReentrantLock _lock = new ReentrantLock();\n+    private Log _log;\n+    private Localizer _loc = Localizer.forPackage(FinderCacheImpl.class);\n+\n+    \n+    public FinderCacheImpl() {\n+        _delegate = new HashMap<ClassMapping, \n+            FinderQuery<ClassMapping, SelectExecutor, Result>>();\n+        _uncachables = new HashMap<String, String>();\n+        _stats = new QueryStatistics.Default<ClassMapping>();\n+    }\n+    \n+    /**\n+     * Get a map-oriented view of the cache.\n+     * \n+     * @return a map of the query string with class names as key. \n+     */\n+    public Map<String, String> getMapView() {\n+        lock();\n+        try {\n+            Map<String, String> view = new TreeMap<String, String>();\n+            for (ClassMapping mapping : _delegate.keySet())\n+                view.put(mapping.getDescribedType().getName(), \n+                    _delegate.get(mapping).getQueryString());\n+            return view;\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n+    /**\n+     * Gets basic statistics of execution and hit count of finder queries. \n+     */\n+    public QueryStatistics<ClassMapping> getStatistics() {\n+        return _stats;\n+    }\n+\n+    /**\n+     * Gets the finder query for the given mapping. The get operation can be\n+     * controlled by FetchConfiguration hints. \n+     * {@link QueryHints#HINT_IGNORE_FINDER HINT_IGNORE_FINDER} will ignore\n+     * any cached finder that may exist in this cache and will return null.\n+     * {@link QueryHints#HINT_INVALIDATE_FINDER HINT_INVALIDATE_FINDER} will \n+     * invalidate any cached finder that may exist in this cache and will return\n+     * null.\n+     * \n+     */\n+    public FinderQuery<ClassMapping,SelectExecutor,Result> \n+        get(ClassMapping mapping, FetchConfiguration fetch) {\n+        if (fetch.getReadLockLevel() != 0)\n+            return null;\n+        boolean ignore = isHinted(fetch, QueryHints.HINT_IGNORE_FINDER);\n+        boolean invalidate = isHinted(fetch, QueryHints.HINT_INVALIDATE_FINDER);\n+        if (invalidate)\n+            invalidate(mapping);\n+        if (ignore)\n+            return null;\n+        FinderQuery<ClassMapping, SelectExecutor, Result> result = \n+            _delegate.get(mapping);\n+        _stats.recordExecution(mapping);\n+        return result;\n+    }\n+    \n+    /**\n+     * Cache a Finder Query for the given mapping and select. The put operation \n+     * can be controlled by FetchConfiguration hints. \n+     * If no entry exists for the given mapping then an attempt is made to \n+     * create a new FinderQuery. The attempt, however, may not be successful\n+     * because all Selects can not be cached.\n+     * @see FinderQueryImpl#newFinder(ClassMapping, Select).\n+     *  \n+     * If a entry for the given mapping exists then the value of\n+     * {@link QueryHints#HINT_RECACHE_FINDER HINT_RECACHE_FINDER} hint \n+     * determines whether the existing entry is returned or a new FinderQuery \n+     * with the given argument overwrites the existing one.\n+     * \n+     * @param mapping the class for which the finder is to be cached\n+     * @param select the finder query\n+     * @param fetch may contain hints to control cache operation\n+     */\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> cache\n+       (ClassMapping mapping, SelectExecutor select, FetchConfiguration fetch) {\n+        lock();\n+        try {\n+            if (fetch.getReadLockLevel() != 0)\n+                return null;\n+            boolean recache = isHinted(fetch, QueryHints.HINT_RECACHE_FINDER);\n+            if (isExcluded(mapping)) {\n+                return recache ? put(mapping, select) : null;\n+            }\n+            if (_delegate.containsKey(mapping)) {\n+                return recache ? put(mapping, select) : _delegate.get(mapping);\n+            }\n+            return put(mapping, select);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    \n+    /**\n+     * Creates and puts a FinderQuery in the internal map indexed by the\n+     * given ClassMapping.\n+     * If a new FinderQuery can not be created for the given Select (because\n+     * some Select are not cached), then the mapping is marked invalid.\n+     *  \n+    */\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> put\n+       (ClassMapping mapping, SelectExecutor select) {\n+        FinderQuery<ClassMapping, SelectExecutor, Result> finder = \n+            FinderQueryImpl.newFinder(mapping, select);\n+        if (finder != null) {\n+            _delegate.put(mapping, finder);\n+            if (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"finder-cached\", mapping, \n+                    finder.getQueryString())); \n+        } else {\n+            if (_log != null && _log.isWarnEnabled())\n+                _log.warn(_loc.get(\"finder-not-cachable\", mapping));\n+            invalidate(mapping);\n+        }\n+        return finder;\n+    }\n+    \n+    /**\n+     * Affirms if the given mapping is excluded from being cached.\n+     */\n+    public boolean isExcluded(ClassMapping mapping) {\n+        return mapping != null && \n+            isExcluded(mapping.getDescribedType().getName());\n+    }\n+\n+    /**\n+     * Searches the exclusion patterns to find out if the given string matches\n+     * any element.\n+     */\n+    private boolean isExcluded(String target) {\n+        if (_exclusionPatterns != null && _exclusionPatterns.contains(target))\n+            return true;\n+        return getMatchedExclusionPattern(target) != null;\n+    }\n+\n+    /**\n+     * Adds a pattern for exclusion. Any cached finder whose class name\n+     * matches the given pattern will be marked invalidated as a side-effect.\n+     */\n+    public void addExclusionPattern(String pattern) {\n+        lock();\n+        try {\n+            if (_exclusionPatterns == null)\n+                _exclusionPatterns = new ArrayList<String>();\n+            _exclusionPatterns.add(pattern);\n+            Collection<ClassMapping> invalidMappings = getMatchedKeys(pattern, \n+                    _delegate.keySet());\n+            if (!invalidMappings.isEmpty() \n+                && _log != null && _log.isInfoEnabled())\n+                _log.info(_loc.get(\"finder-add-pattern\", pattern, \n+                    invalidMappings.size(), invalidMappings));\n+            for (ClassMapping invalidMapping : invalidMappings)\n+                markUncachable(invalidMapping, pattern);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    /**\n+     * Removes a pattern for exclusion. Any query identifier marked as not \n+     * cachable due to the given pattern will now be removed from the list of\n+     * uncachables as a side-effect.\n+     */\n+    public void removeExclusionPattern(String pattern) {\n+        lock();\n+        try {\n+            if (_exclusionPatterns == null)\n+                return;\n+            _exclusionPatterns.remove(pattern);\n+            Collection<String> reborns = getMatchedKeys(pattern, \n+                _uncachables.keySet());\n+            if (!reborns.isEmpty() && _log != null && _log.isInfoEnabled())\n+                _log.info(_loc.get(\"finder-remove-pattern\", pattern, \n+                    reborns.size(), reborns));\n+            for (String rebornKey : reborns)\n+                _uncachables.remove(rebornKey);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    \n+    /**\n+     * Gets the pattern that matches the given identifier.\n+     */\n+    private String getMatchedExclusionPattern(String id) {\n+        if (_exclusionPatterns == null || _exclusionPatterns.isEmpty())\n+            return null;\n+        for (String pattern : _exclusionPatterns)\n+            if (matches(pattern, id))\n+                return pattern;\n+        return null;\n+    }\n+    \n+    /**\n+     * Gets the elements of the given set that match the given pattern. \n+     */\n+    private Collection<ClassMapping> getMatchedKeys(String pattern, \n+            Set<ClassMapping> set) {\n+        List<ClassMapping> result = new ArrayList<ClassMapping>();\n+        for (ClassMapping entry : set) {\n+            if (matches(pattern, entry)) {\n+                result.add(entry);\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Gets the elements of the given list which match the given pattern. \n+     */\n+    private Collection<String> getMatchedKeys(String pattern, \n+            Collection<String> coll) {\n+        List<String> result = new ArrayList<String>();\n+        for (String key : coll) {\n+            if (matches(pattern, key)) {\n+                result.add(key);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    boolean matches(String pattern, ClassMapping mapping) {\n+        return matches(pattern, mapping.getDescribedType().getName());\n+    }\n+    \n+    boolean matches(String pattern, String target) {\n+        return target != null && (target.equals(pattern) \n+          || target.matches(pattern));\n+    }\n+    \n+    public boolean invalidate(ClassMapping mapping) {\n+        lock();\n+        try {\n+            if (_log.isTraceEnabled())\n+                _log.trace(_loc.get(\"finder-invalidate\", mapping));\n+            return _delegate.remove(mapping) != null;\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n+        ClassMapping mapping) {\n+        return markUncachable(mapping.getDescribedType().getName());\n+    }\n+\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n+        String id) {\n+        return markUncachable(id, EXLUDED_BY_USER);\n+    }\n+    \n+    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n+        String cls, String reason) {\n+        lock();\n+        try {\n+            boolean excludedByUser = _uncachables.get(cls) == EXLUDED_BY_USER;\n+            if (!excludedByUser)\n+                _uncachables.put(cls, reason);\n+            if (_log != null && _log.isInfoEnabled()) {\n+                if (excludedByUser) \n+                    _log.info(_loc.get(\"finder-uncache-strong\", cls));\n+                else \n+                    _log.info(_loc.get(\"finder-uncache-weak\", cls, \n+                        reason));\n+            }\n+            return _delegate.remove(searchMappingByName(cls));\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    \n+    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n+        ClassMapping mapping, String reason) {\n+        lock();\n+        try {\n+            String cls = mapping.getDescribedType().getName();\n+            boolean excludedByUser = _uncachables.get(cls) == EXLUDED_BY_USER;\n+            if (!excludedByUser)\n+                _uncachables.put(cls, reason);\n+            if (_log != null && _log.isInfoEnabled()) {\n+                if (excludedByUser) \n+                    _log.info(_loc.get(\"finder-uncache-strong\", cls));\n+                else \n+                    _log.info(_loc.get(\"finder-uncache-weak\", cls, reason));\n+            }\n+            return _delegate.remove(mapping);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    \n+    ClassMapping searchMappingByName(String cls) {\n+        for (ClassMapping mapping : _delegate.keySet())\n+            if (matches(cls, mapping))\n+                return mapping;\n+        return null;\n+    }\n+\n+    \n+    public void setExcludes(String excludes) {\n+        lock();\n+        try {\n+            if (StringUtils.isEmpty(excludes))\n+                return;\n+            if (_exclusionPatterns == null)\n+                _exclusionPatterns = new ArrayList<String>();\n+            String[] patterns = excludes.split(PATTERN_SEPARATOR);\n+            for (String pattern : patterns)\n+                addExclusionPattern(pattern);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> getExcludes() {\n+        return (List<String>)_exclusionPatterns == null \n+            ? Collections.EMPTY_LIST \n+            : Collections.unmodifiableList(_exclusionPatterns);\n+    }\n+    \n+    boolean isHinted(FetchConfiguration fetch, String hint) {\n+        if (fetch == null)\n+            return false;\n+        Object result = fetch.getHint(hint);\n+        return result != null && \"true\".equalsIgnoreCase(result.toString());\n+    }\n+        \n+    void lock() {\n+        if (_lock != null)\n+            _lock.lock();\n+    }\n+\n+    void unlock() {\n+        if (_lock != null && _lock.isLocked())\n+            _lock.unlock();\n+    }\n+     \n+    // ----------------------------------------------------\n+    //  Configuration contract\n+    // ----------------------------------------------------\n+    public void startConfiguration() {\n+    }\n+    \n+    public void setConfiguration(Configuration conf) {\n+        _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+    }\n+\n+    public void endConfiguration() {\n+    }\n+\n+}"},{"sha":"50b4f23aeb81cdb106bd7829c8ecd5da88b9c7c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Joinable;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.LogicalUnion;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n+import org.apache.openjpa.jdbc.sql.Union;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.FinderQuery;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.util.ApplicationIds;\n+import org.apache.openjpa.util.Id;\n+\n+import serp.util.Numbers;\n+\n+/**\n+ * Implements Finder Query identified by ClassMappping for SelectExecutor that \n+ * can be executed to generate Result. \n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ * @since 2.0.0\n+ */\n+public class FinderQueryImpl \n+    implements FinderQuery<ClassMapping, SelectExecutor, Result> {\n+    private final ClassMapping _mapping;\n+    private final SelectImpl _select;\n+    private final Column[] _pkCols;\n+    private final Joinable[]  _joins;\n+    private final int[] _pkIndices;\n+    private final SQLBuffer _buffer;\n+    private final String _sql;\n+    \n+    /**\n+     * Attempts to construct a FinderQuery from the given Select for the given\n+     * mapping. The given Select may not be amenable for caching and then a null\n+     * value is returned. \n+     */\n+    static FinderQueryImpl newFinder(ClassMapping mapping,\n+        SelectExecutor select) {\n+        SelectImpl impl = extractImplementation(select);\n+        if (impl == null)\n+            return null;\n+        SQLBuffer buffer = impl.getSQL();\n+        Column[] pkCols = mapping.getPrimaryKeyColumns();\n+        boolean canCache = pkCols.length == buffer.getParameters().size();\n+        return (canCache)\n+            ? new FinderQueryImpl(mapping, impl, buffer) : null;\n+    }\n+\n+    private FinderQueryImpl(ClassMapping mapping, SelectImpl select,\n+        SQLBuffer buffer) {\n+        super();\n+        _mapping = mapping;\n+        _select = select;\n+        _buffer = buffer;\n+        _sql = _buffer.getSQL();\n+        _pkCols = _mapping.getPrimaryKeyColumns();\n+        _joins = new Joinable[_pkCols.length];\n+        for (int i = 0; i < _pkCols.length; i++)\n+            _joins[i] = _mapping.assertJoinable(_pkCols[i]);\n+        _pkIndices = new int[_pkCols.length];\n+        for (int i = 0; i < _pkCols.length; i++) {\n+            FieldMetaData pk = _mapping.getField(_joins[i].getFieldIndex());\n+            _pkIndices[i] = pk == null ? 0 : pk.getPrimaryKeyIndex();\n+        }\n+        \n+    }\n+    \n+    public ClassMapping getIdentifier() {\n+        return _mapping;\n+    }\n+    \n+    public SelectExecutor getDelegate() {\n+        return _select;\n+    }\n+    \n+    public String getQueryString() {\n+        return _sql;\n+    }\n+    \n+    public Column[] getPKColumns() {\n+        return _pkCols;\n+    }\n+    \n+    private Object[] getPKValues(OpenJPAStateManager sm, JDBCStore store) {\n+        Object[] pks = null;\n+        Object oid = sm.getObjectId();\n+        if (_mapping.getIdentityType() == ClassMapping.ID_APPLICATION)\n+            pks = ApplicationIds.toPKValues(oid, _mapping);\n+    \n+        Object[] val = new Object[_pkCols.length];\n+        int count = 0;\n+        for (int i = 0; i < _pkCols.length; i++, count++) {\n+            if (pks == null)\n+                val[0] = (oid == null) \n+                    ? null : Numbers.valueOf(((Id) oid).getId());\n+            else {\n+                val[i] = _joins[i].getJoinValue(pks[_pkIndices[i]], _pkCols[i], \n+                    store);\n+            }\n+        }\n+        return val;\n+    }\n+    \n+    public Result execute(OpenJPAStateManager sm, StoreManager store, \n+        FetchConfiguration fetch) {\n+        boolean forUpdate = false;\n+        JDBCStore jstore = (JDBCStore)store;\n+        Connection conn = jstore.getConnection();\n+        DBDictionary dict = jstore.getDBDictionary();\n+        PreparedStatement stmnt = null;\n+        ResultSet rs = null;\n+        try {\n+            stmnt = _select.prepareStatement(conn, _sql);\n+            Object[] params = getPKValues(sm, jstore);\n+            if (stmnt != null) {\n+                for (int i = 0; i <params.length; i++) {\n+                    dict.setUnknown(stmnt, i+1, params[i], _pkCols[i]);\n+                }\n+            }\n+            dict.setTimeouts(stmnt, (JDBCFetchConfiguration)fetch, forUpdate);\n+            rs = _select.executeQuery(conn, stmnt, getQueryString(), jstore,\n+                params, _pkCols);\n+            return _select.getEagerResult(conn, stmnt, rs, jstore, \n+                (JDBCFetchConfiguration)fetch, forUpdate, _buffer);\n+        } catch (SQLException se) {\n+            if (stmnt != null)\n+                try { stmnt.close(); } catch (SQLException se2) {}\n+            try { conn.close(); } catch (SQLException se2) {}\n+            throw new RuntimeException(se);\n+        }\n+    }\n+    \n+    private static SelectImpl extractImplementation(SelectExecutor selector) {\n+        if (selector == null || selector.hasMultipleSelects())\n+            return null;\n+        if (selector instanceof SelectImpl) \n+            return (SelectImpl)selector;\n+        if (selector instanceof LogicalUnion.UnionSelect)\n+            return ((LogicalUnion.UnionSelect)selector).getDelegate();\n+        if (selector instanceof Union) \n+            return extractImplementation(((Union)selector).getSelects()[0]);\n+        \n+        return null;\n+    }\n+    \n+    public String toString() {\n+        return _mapping + \": [\" + getQueryString() + \"]\";\n+    }\n+}"},{"sha":"12bd7ec76bc333e5d95a5e7d8f40fc28e2246d5d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -20,8 +20,6 @@\n \n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.Properties;\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n@@ -44,6 +42,7 @@\n  * @author Abe White\n  * @author Marc Prud'hommeaux\n  */\n+@SuppressWarnings(\"serial\")\n public class JDBCBrokerFactory\n     extends AbstractBrokerFactory {\n \n@@ -67,7 +66,7 @@ public static JDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n      * Invoked from {@link Bootstrap#getBrokerFactory}.\n      */\n     public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n-        Map props = cp.getProperties();\n+        Map<String,Object> props = cp.getProperties();\n         Object key = toPoolKey(props);\n         JDBCBrokerFactory factory = (JDBCBrokerFactory)\n             getPooledFactoryForKey(key);\n@@ -86,18 +85,17 @@ public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n     public JDBCBrokerFactory(JDBCConfiguration conf) {\n         super(conf);\n     }\n-\n-    public Properties getProperties() {\n+   \n+    public Map<String,Object> getProperties() {\n         // add platform property\n-        Properties props = super.getProperties();\n+        Map<String,Object> props = super.getProperties();\n         String db = \"Unknown\";\n         try {\n             JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n             db = conf.getDBDictionaryInstance().platform;\n         } catch (RuntimeException re) {\n         }\n-        props.setProperty(\"Platform\",\n-            \"OpenJPA JDBC Edition: \" + db + \" Database\");\n+        props.put(\"Platform\", \"OpenJPA JDBC Edition: \" + db + \" Database\");\n \n         return props;\n     }\n@@ -128,14 +126,14 @@ protected BrokerImpl newBrokerImpl(String user, String pass) {\n     /**\n      * Synchronize the mappings of the classes listed in the configuration.\n      */\n-    protected void synchronizeMappings(ClassLoader loader) {\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n+    protected void synchronizeMappings(ClassLoader loader, \n+        JDBCConfiguration conf) {\n         String action = conf.getSynchronizeMappings();\n         if (StringUtils.isEmpty(action))\n             return;\n \n         MappingRepository repo = conf.getMappingRepositoryInstance();\n-        Collection classes = repo.loadPersistentTypes(false, loader);\n+        Collection<Class<?>> classes = repo.loadPersistentTypes(false, loader);\n         if (classes.isEmpty())\n             return;\n \n@@ -146,9 +144,7 @@ protected void synchronizeMappings(ClassLoader loader) {\n             \"SynchronizeMappings\");\n \n         // initialize the schema\n-        Class cls;\n-        for (Iterator itr = classes.iterator(); itr.hasNext();) {\n-            cls = (Class) itr.next();\n+        for (Class<?> cls : classes) {\n             try {\n                 tool.run(cls);\n             } catch (IllegalArgumentException iae) {\n@@ -158,4 +154,8 @@ protected void synchronizeMappings(ClassLoader loader) {\n         }\n         tool.record();\n     }\n+    \n+    protected void synchronizeMappings(ClassLoader loader) {\n+        synchronizeMappings(loader, (JDBCConfiguration) getConfiguration());\n+    }\n }"},{"sha":"56a1c2becf49ca4a185f8c58096e56e9e6e6d09d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":44,"deletions":1,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -19,8 +19,8 @@\n package org.apache.openjpa.jdbc.kernel;\n \n import java.io.Serializable;\n-import java.sql.ResultSet;\n import java.sql.Connection;\n+import java.sql.ResultSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -31,6 +31,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.FetchConfigurationImpl;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -121,6 +122,13 @@ public int getEagerFetchMode() {\n     }\n \n     public JDBCFetchConfiguration setEagerFetchMode(int mode) {\n+        if (mode != DEFAULT\n+            && mode != EagerFetchModes.EAGER_NONE\n+            && mode != EagerFetchModes.EAGER_JOIN\n+            && mode != EagerFetchModes.EAGER_PARALLEL)\n+            throw new IllegalArgumentException(\n+                _loc.get(\"bad-fetch-mode\", new Integer(mode)).getMessage());\n+\n         if (mode == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n@@ -145,6 +153,13 @@ public int getSubclassFetchMode(ClassMapping cls) {\n     }\n \n     public JDBCFetchConfiguration setSubclassFetchMode(int mode) {\n+        if (mode != DEFAULT\n+            && mode != EagerFetchModes.EAGER_NONE\n+            && mode != EagerFetchModes.EAGER_JOIN\n+            && mode != EagerFetchModes.EAGER_PARALLEL)\n+            throw new IllegalArgumentException(\n+                _loc.get(\"bad-fetch-mode\", new Integer(mode)).getMessage());\n+\n         if (mode == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n@@ -160,6 +175,13 @@ public int getResultSetType() {\n     }\n \n     public JDBCFetchConfiguration setResultSetType(int type) {\n+        if (type != DEFAULT\n+            && type != ResultSet.TYPE_FORWARD_ONLY\n+            && type != ResultSet.TYPE_SCROLL_INSENSITIVE\n+            && type != ResultSet.TYPE_SCROLL_SENSITIVE)\n+            throw new IllegalArgumentException(_loc.get(\"bad-resultset-type\",\n+                new Integer(type)).getMessage());\n+\n         if (type == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n@@ -174,6 +196,13 @@ public int getFetchDirection() {\n     }\n \n     public JDBCFetchConfiguration setFetchDirection(int direction) {\n+        if (direction != DEFAULT\n+            && direction != ResultSet.FETCH_FORWARD\n+            && direction != ResultSet.FETCH_REVERSE\n+            && direction != ResultSet.FETCH_UNKNOWN)\n+            throw new IllegalArgumentException(_loc.get(\"bad-fetch-direction\",\n+                new Integer(direction)).getMessage());\n+\n         if (direction == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n@@ -188,6 +217,13 @@ public int getLRSSize() {\n     }\n \n     public JDBCFetchConfiguration setLRSSize(int size) {\n+        if (size != DEFAULT\n+            && size != LRSSizes.SIZE_QUERY\n+            && size != LRSSizes.SIZE_LAST\n+            && size != LRSSizes.SIZE_UNKNOWN)\n+            throw new IllegalArgumentException(\n+                _loc.get(\"bad-lrs-size\", new Integer(size)).getMessage());\n+\n         if (size == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n@@ -202,6 +238,13 @@ public int getJoinSyntax() {\n     }\n \n     public JDBCFetchConfiguration setJoinSyntax(int syntax) {\n+        if (syntax != DEFAULT\n+            && syntax != JoinSyntaxes.SYNTAX_SQL92\n+            && syntax != JoinSyntaxes.SYNTAX_TRADITIONAL\n+            && syntax != JoinSyntaxes.SYNTAX_DATABASE)\n+            throw new IllegalArgumentException(\n+                _loc.get(\"bad-join-syntax\", new Integer(syntax)).getMessage());\n+\n         if (syntax == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)"},{"sha":"ee430e3068a7c168c7dfbd034832017e75daaea7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -68,6 +68,16 @@\n      * method is implemented as a no-op.\n      */\n     public Connection getConnection();\n+    \n+    /**\n+     * Return a new SQL connection to the database.\n+     * This is used when the current connection still has a open result set\n+     * and a new database operation needs to be done. \n+     * The <code>close</code> method should always be called on the connection\n+     * to free any resources it is using. When appropriate, the close\n+     * method is implemented as a no-op.\n+     */\n+    public Connection getNewConnection();\n \n     /**\n      * Return the current default fetch configuration."},{"sha":"e6cafc951dec7ed0b180afe1849425563b026ee2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":222,"deletions":272,"changes":494,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -29,20 +30,19 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import javax.sql.DataSource;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.QuerySQLCacheValue;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -52,7 +52,9 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.Union;\n+import org.apache.openjpa.kernel.BrokerImpl;\n import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.FinderCache;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n@@ -65,12 +67,11 @@\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.jdbc.DelegatingStatement;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.FetchGroup;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n@@ -106,11 +107,27 @@\n \n     // track the pending statements so we can cancel them\n     private Set _stmnts = Collections.synchronizedSet(new HashSet());\n-    \n-    private Map _sqlCache = null;\n-    private boolean _isQuerySQLCache = true;\n-    private static final Object _nullCacheValue = new Object();\n-    \n+\n+    private static final Constructor<ClientConnection> clientConnectionImpl;\n+    private static final Constructor<RefCountConnection> refCountConnectionImpl;\n+    private static final Constructor<CancelStatement> cancelStatementImpl;\n+    private static final Constructor<CancelPreparedStatement> cancelPreparedStatementImpl;\n+\n+    static {\n+        try {\n+            clientConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(ClientConnection.class, \n+                Connection.class);\n+            refCountConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(RefCountConnection.class,\n+                JDBCStoreManager.class, Connection.class);\n+            cancelStatementImpl = ConcreteClassGenerator.getConcreteConstructor(CancelStatement.class,\n+                JDBCStoreManager.class, Statement.class, Connection.class);\n+            cancelPreparedStatementImpl = ConcreteClassGenerator.getConcreteConstructor(CancelPreparedStatement.class,\n+                JDBCStoreManager.class, PreparedStatement.class, Connection.class);\n+        } catch (Exception e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+    }\n+\n     public StoreContext getContext() {\n         return _ctx;\n     }\n@@ -136,9 +153,6 @@ public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n \n         if (_conf.getUpdateManagerInstance().orderDirty())\n             ctx.setOrderDirtyObjects(true);\n-        \n-        _sqlCache = _conf.getQuerySQLCacheInstance();\n-        _isQuerySQLCache = _conf.isQuerySQLCacheOn();\n     }\n \n     public JDBCConfiguration getConfiguration() {\n@@ -222,7 +236,7 @@ public void releaseConnection() {\n     }\n \n     public Object getClientConnection() {\n-        return new ClientConnection(getConnection());\n+        return ConcreteClassGenerator.newInstance(clientConnectionImpl, getConnection());\n     }\n \n     public Connection getConnection() {\n@@ -279,7 +293,8 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n+            throw SQLExceptions.getStoreSQLException(sm, se, _dict,\n+                fetch.getReadLockLevel());\n         }\n     }\n \n@@ -354,14 +369,29 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                     getMappedByFieldMapping();\n                 Object mappedByObject = info.result.getMappedByValue();\n                 if (mappedByFieldMapping != null && mappedByObject != null)\n-                    setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+                    if (mappedByObject instanceof OpenJPAId &&\n+                        mapping.getExtraFieldDataIndex(mappedByFieldMapping.\n+                        getIndex()) != -1)\n+                        // The inverse relation can not be set since\n+                        // we are eagerly loading this sm for\n+                        // a sm owner that is still in the process of \n+                        // initializing itself.\n+                        // Remember owner oid by setIntermediate().\n+                        // The inverse relation is set later by\n+                        // setInverseRelation() when the sm owner is fully\n+                        // initialized.\n+                        sm.setIntermediate(mappedByFieldMapping.getIndex(),\n+                            mappedByObject);\n+                    else\n+                        setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n             }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n                 mapping = (ClassMapping) sm.getMetaData();\n                 load(mapping, sm, fetch, res);\n                 getVersion(mapping, sm, res);\n+                setInverseRelation(sm, mapping, res);\n             }\n             return true;\n         } finally {\n@@ -370,10 +400,60 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n         }\n     }\n \n+    private void setInverseRelation(OpenJPAStateManager owner,\n+        ClassMapping mapping, Result res) {\n+        FieldMapping[] fms = mapping.getFieldMappings();\n+\n+        // At this point, the owner is fully initialized.\n+        // Check if the owner has eagerly loaded ToMany relations.\n+        for (int i = 0; i < fms.length; i++) {\n+            if (res.getEager(fms[i]) != null) {\n+                if (fms[i].isElementCollection() && !fms[i].getElement().isTypePC())\n+                    continue;\n+                Object coll =  owner.fetchObject(fms[i].getIndex());\n+                if (coll instanceof Map)\n+                    coll = ((Map)coll).values();\n+                if (coll instanceof Collection && \n+                    ((Collection) coll).size() > 0) {\n+                    // Found eagerly loaded collection.\n+                    // Publisher (1) <==>  (M) Magazine\n+                    //    publisher has a EAGER OneToMany relation\n+                    //    magazine has a EAGER or LAZY ManyToOne publisher\n+                    // For each member (Magazine) in the collection, \n+                    // set its inverse relation (Publisher).\n+                    for (Iterator itr = ((Collection) coll).iterator();\n+                        itr.hasNext();) {\n+                        PersistenceCapable pc = (PersistenceCapable) itr.next();\n+\n+                        if (pc == null)\n+                            continue;\n+\n+                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n+                            pcGetStateManager();\n+                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n+                            getFieldMappings();\n+                        for (int j = 0; j < fmd.length; j++) {\n+                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n+                            // if oid was setIntermediate() previously\n+                            // and it is the same as the owner,\n+                            // then set the inverse relation\n+                            if (oid != null &&\n+                                oid.equals(owner.getObjectId())) {\n+                                sm.storeObject(fmd[j].getIndex(),\n+                                    owner.getPersistenceCapable());\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     protected void setMappedBy(OpenJPAStateManager sm,\n         FieldMapping mappedByFieldMapping, Object mappedByObject) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        FieldMapping[] fms = mapping.getDeclaredFieldMappings();\n+        FieldMapping[] fms = mapping.getFieldMappings();\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i] == mappedByFieldMapping) {\n                 sm.storeObject(fms[i].getIndex(), mappedByObject);\n@@ -435,86 +515,18 @@ private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n     private Result getInitializeStateResult(OpenJPAStateManager sm,\n         ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n         throws SQLException {\n-        List params = new ArrayList();\n-        Select sel = newSelect(sm, mapping, fetch, subs, params);\n-        if (sel == null) return null;\n-        return sel.execute(this, fetch, params);\n-    }\n-\n-    private Select newSelect(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs,\n-        List params) {\n-        if (!_isQuerySQLCache) \n-            return newSelect(sm, mapping, fetch, subs);       \n-           \n-        Map<SelectKey, Select> selectImplCacheMap = \n-            getCacheMapFromQuerySQLCache(JDBCStoreManager.class);\n-        JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n-        fetchClone.copy(fetch);\n-        SelectKey selKey = new SelectKey(mapping, null, fetchClone);\n-        Select sel = null;\n-        boolean found = true;\n-        Object obj = selectImplCacheMap.get(selKey);\n-        if (obj == null) {\n-            synchronized (selectImplCacheMap) {\n-                obj = selectImplCacheMap.get(selKey);\n-                if (obj == null) {\n-                    // Not found in cache, create a new select\n-                    obj = newSelect(sm, mapping, fetch, subs);\n-                    found = false;\n-                }\n-                    \n-                if (obj == null) {\n-                    // If the generated SelectImpl is null, store a generic\n-                    // known object in the cache as a placeholder. Some map \n-                    // implementations do not allow null values.\n-                    obj = _nullCacheValue;\n-                    found = false;\n-                }\n-                else if (obj != _nullCacheValue)\n-                {\n-                    sel = (Select)obj;\n-                    if (sel.getSQL() == null) {\n-                        sel.setSQL(this, fetch);\n-                        found = false;\n-                    }\n-                }\n-                if (!found) {\n-                    addToSqlCache(selectImplCacheMap, selKey, obj);\n-                }\n-            }\n-        }\n-\n-        if (obj != null && obj != _nullCacheValue)\n-            sel = (Select) obj;\n-\n-        Log log = _conf.getLog(JDBCConfiguration.LOG_JDBC);\n-        if (log.isTraceEnabled()) {\n-            if (!found)\n-                log.trace(_loc.get(\"cache-missed\", mapping, this.getClass()));\n-            else\n-                log.trace(_loc.get(\"cache-hit\", mapping, this.getClass()));\n-        }\n-\n-        if (sel == null)\n-            return null;\n-        \n-        Object oid = sm.getObjectId();\n-        Column[] cols = mapping.getPrimaryKeyColumns();\n-        sel.wherePrimaryKey(mapping, cols, cols, oid, this, \n-        \tnull, null, params);\n-        return sel;\n-    }\n-\n-    protected Select newSelect(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs) {\n+        FinderQueryImpl fq = getFinder(mapping, fetch);\n+        if (fq != null)\n+            return fq.execute(sm, this, fetch);\n         Select sel = _sql.newSelect();\n         if (!select(sel, mapping, subs, sm, null, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN, true, false))\n             return null;\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n         sel.setExpectedResultCount(1, false);\n-        return sel;\n+        Result result = sel.execute(this, fetch);\n+        cacheFinder(mapping, sel, fetch);\n+        return result;\n     }\n \n     /**\n@@ -524,6 +536,9 @@ protected Select newSelect(OpenJPAStateManager sm,\n     private Result getInitializeStateUnionResult(final OpenJPAStateManager sm,\n         ClassMapping mapping, final ClassMapping[] mappings,\n         final JDBCFetchConfiguration fetch) throws SQLException {\n+        FinderQueryImpl fq = getFinder(mapping, fetch);\n+        if (fq != null)\n+            return fq.execute(sm, this, fetch);\n         final JDBCStoreManager store = this;\n         final int eager = Math.min(fetch.getEagerFetchMode(),\n             JDBCFetchConfiguration.EAGER_JOIN);\n@@ -539,7 +554,9 @@ public void select(Select sel, int i) {\n                 sel.wherePrimaryKey(sm.getObjectId(), mappings[i], store);\n             }\n         });\n-        return union.execute(this, fetch);\n+        Result result = union.execute(this, fetch);\n+        cacheFinder(mapping, union, fetch);\n+        return result;\n     }\n \n     /**\n@@ -652,6 +669,11 @@ public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n     }\n \n     public Collection flush(Collection sms) {\n+        try {\n+            if (_conn != null && _conn.getInnermostDelegate().isReadOnly())\n+                _conn.setReadOnly(false);\n+        } catch (SQLException e) {\n+        }\n         return _conf.getUpdateManagerInstance().flush(sms, this);\n     }\n \n@@ -825,6 +847,8 @@ public StoreQuery newQuery(String language) {\n             return new JDBCStoreQuery(this, ep);\n         if (QueryLanguages.LANG_SQL.equals(language))\n             return new SQLStoreQuery(this);\n+        if (QueryLanguages.LANG_PREPARED_SQL.equals(language))\n+            return new PreparedSQLStoreQuery(this);\n         return null;\n     }\n \n@@ -876,7 +900,15 @@ private void connect(boolean ref) {\n      * can be overridden.\n      */\n     protected RefCountConnection connectInternal() throws SQLException {\n-        return new RefCountConnection(_ds.getConnection());\n+        return ConcreteClassGenerator.newInstance(refCountConnectionImpl, JDBCStoreManager.this, _ds.getConnection());\n+    }\n+    \n+    public Connection getNewConnection() {\n+        try {\n+            return connectInternal();\n+        } catch (SQLException e) {\n+            throw SQLExceptions.getStore(e, _dict);\n+        }\n     }\n \n     /**\n@@ -914,9 +946,29 @@ public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n         ConnectionInfo info = new ConnectionInfo();\n         info.result = result;\n         info.mapping = mapping;\n+\n+        // if inverse relation is known, exclude loading during find\n+        exclude = excludeInverseRelation(mapping, info, exclude);\n         return _ctx.find(oid, fetch, exclude, info, 0);\n     }\n \n+    private BitSet excludeInverseRelation(ClassMapping mapping,\n+        ConnectionInfo info, BitSet exclude) {\n+        FieldMapping inverse = info.result.getMappedByFieldMapping();\n+        if (inverse != null) {\n+            FieldMapping[] fms = mapping.getDefinedFieldMappings();\n+            if (exclude == null)\n+                exclude = new BitSet(fms.length);\n+            for (int i = 0; i < fms.length; i++) {\n+                if (fms[i] == inverse) {\n+                    exclude.set(fms[i].getIndex());\n+                    break;\n+                }\n+            }\n+        }\n+        return exclude;\n+    }\n+\n     /**\n      * Load the given state manager with data from the result set. Only\n      * mappings originally selected will be loaded.\n@@ -1004,15 +1056,11 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n         OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n         int eager, boolean ident, boolean outer) {\n         // add class conditions so that they're cloned for any batched selects\n-        boolean joinedSupers = false;\n-        if ((sm == null || sm.getPCState() == PCState.TRANSIENT)\n-            && (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_NONE)) {\n-            loadSubclasses(mapping); \n-            Joins joins = (outer) ? sel.newOuterJoins() : null;\n-            joinedSupers = mapping.getDiscriminator().addClassConditions(sel,\n-                subs == Select.SUBS_JOINABLE, joins);\n+        boolean joinedSupers = false;    \n+        if(needClassCondition(mapping, subs, sm)) {\n+            joinedSupers = getJoinedSupers(sel, mapping, subs, outer);\n         }\n-\n+        \n         // create all our eager selects so that those fields are reserved\n         // and cannot be reused during the actual eager select process,\n         // preventing infinite recursion\n@@ -1041,6 +1089,31 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n         return seld > 0;\n     }\n \n+    private boolean getJoinedSupers(Select sel, ClassMapping mapping, int subs, boolean outer) {\n+        loadSubclasses(mapping); \n+        Joins joins = (outer) ? sel.newOuterJoins() : null;\n+        return mapping.getDiscriminator().addClassConditions(sel, subs == Select.SUBS_JOINABLE, joins);\n+    }\n+    \n+    private boolean needClassCondition(ClassMapping mapping, int subs,\n+        OpenJPAStateManager sm) {\n+        boolean retVal = false;\n+        if(sm == null || sm.getPCState() == PCState.TRANSIENT) {\n+            if(subs == Select.SUBS_JOINABLE || subs == Select.SUBS_NONE) {\n+                retVal = true;\n+            }\n+            else {\n+                if (mapping.getDiscriminator() != null\n+                    && SuperclassDiscriminatorStrategy.class.isInstance(mapping.getDiscriminator().getStrategy())\n+                    && mapping.getMappingRepository().getConfiguration().getCompatibilityInstance()\n+                        .getSuperclassDiscriminatorStrategyByDefault()) {\n+                    retVal = true;\n+                }\n+            }\n+        }\n+        return retVal;\n+    }\n+    \n     /**\n      * Mark the fields of this mapping as reserved so that eager fetches can't\n      * get into infinite recursive situations.\n@@ -1210,6 +1283,19 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n             }\n         }\n \n+        // in certain circumstances force join to superclass table to avoid\n+        // SQL generation error.\n+        if ( eagerToMany != null && pseld < 0 && seld > 0 && !joined\n+                && parent != null ) {\n+            FieldMapping[] pfms = parent.getDefinedFieldMappings();\n+            for (int i = 0; i < pfms.length; i++) {\n+                if (pfms[i] == eagerToMany ) {\n+                    pseld = 0;\n+                    break;\n+                }\n+            }\n+        }\n+        \n         // join to parent table if the parent / any ancestors have selected\n         // anything\n         if (!joined && pseld >= 0 && parent.getTable() != mapping.getTable())\n@@ -1352,12 +1438,31 @@ private void beforeExecuteStatement(Statement stmnt) {\n     private void afterExecuteStatement(Statement stmnt) {\n         _stmnts.remove(stmnt);\n     }\n+    \n+    FinderQueryImpl getFinder(ClassMapping mapping, FetchConfiguration fetch) {\n+        FinderCache cache = getFinderCache();\n+        return cache == null \n+             ? null : (FinderQueryImpl)cache.get(mapping, fetch);\n+    }\n+    \n+    boolean cacheFinder(ClassMapping mapping, SelectExecutor select, \n+        FetchConfiguration fetch) {\n+        FinderCache cache = getFinderCache();\n+        return cache != null && cache.cache(mapping, select, fetch) != null;\n+    }\n+    \n+    FinderCache getFinderCache() {\n+        return (((BrokerImpl)getContext()).getCacheFinderQuery())\n+             ? getConfiguration().getFinderCacheInstance() : null;\n+    }\n+\n \n     /**\n      * Connection returned to client code. Makes sure its wrapped connection\n      * ref count is decremented on finalize.\n      */\n-    private static class ClientConnection extends DelegatingConnection {\n+    public abstract static class ClientConnection extends\n+            DelegatingConnection {\n \n         private boolean _closed = false;\n \n@@ -1380,7 +1485,7 @@ protected void finalize() throws SQLException {\n      * Connection wrapper that keeps an internal ref count so that it knows\n      * when to really close.\n      */\n-    protected class RefCountConnection extends DelegatingConnection {\n+    protected abstract class RefCountConnection extends DelegatingConnection {\n \n         private boolean _retain = false;\n         private int _refs = 0;\n@@ -1434,34 +1539,36 @@ public void free() {\n         }\n \n         protected Statement createStatement(boolean wrap) throws SQLException {\n-            return new CancelStatement(super.createStatement(false),\n-                RefCountConnection.this);\n+            return ConcreteClassGenerator.newInstance(cancelStatementImpl, JDBCStoreManager.this,\n+                    super.createStatement(false), RefCountConnection.this);\n         }\n \n         protected Statement createStatement(int rsType, int rsConcur,\n             boolean wrap) throws SQLException {\n-            return new CancelStatement(super.createStatement(rsType, rsConcur,\n-                false), RefCountConnection.this);\n+            return ConcreteClassGenerator.newInstance(cancelStatementImpl, JDBCStoreManager.this,\n+                    super.createStatement(rsType, rsConcur, false), RefCountConnection.this);\n         }\n \n         protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n-            return new CancelPreparedStatement(super.prepareStatement(sql,\n-                false), RefCountConnection.this);\n+            return ConcreteClassGenerator.newInstance(cancelPreparedStatementImpl,\n+                    JDBCStoreManager.this, super.prepareStatement(sql, false), RefCountConnection.this);\n         }\n \n         protected PreparedStatement prepareStatement(String sql, int rsType,\n             int rsConcur, boolean wrap) throws SQLException {\n-            return new CancelPreparedStatement(super.prepareStatement(sql,\n-                rsType, rsConcur, false), RefCountConnection.this);\n+            return ConcreteClassGenerator.newInstance\n+                (cancelPreparedStatementImpl,\n+                    JDBCStoreManager.this, super.prepareStatement(sql, rsType, rsConcur, false),\n+                    RefCountConnection.this);\n         }\n     }\n \n     /**\n      * Statement type that adds and removes itself from the set of active\n      * statements so that it can be canceled.\n      */\n-    private class CancelStatement extends DelegatingStatement {\n+    protected abstract class CancelStatement extends DelegatingStatement {\n \n         public CancelStatement(Statement stmnt, Connection conn) {\n             super(stmnt, conn);\n@@ -1491,7 +1598,8 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n      * Statement type that adds and removes itself from the set of active\n      * statements so that it can be canceled.\n      */\n-    private class CancelPreparedStatement extends DelegatingPreparedStatement {\n+    protected abstract class CancelPreparedStatement extends\n+            DelegatingPreparedStatement {\n \n         public CancelPreparedStatement(PreparedStatement stmnt, \n             Connection conn) {\n@@ -1525,163 +1633,5 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n             }\n         }\n     }\n-    \n-    public Map getCacheMapFromQuerySQLCache(Object key) {\n-        synchronized(_sqlCache) {\n-            //sqlCache is a map of map\n-            Map cacheMap = (Map)_sqlCache.get(key);\n-            if (cacheMap == null) {\n-                cacheMap = createSQLCache();\n-                _sqlCache.put(key, cacheMap);\n-            }\n-            return cacheMap;\n-        }\n-    }\n-    \n-    public void addToSqlCache(Map cacheMap, Object key, Object value) {\n-        cacheMap.put(key, value);\n-    }\n-    \n-    public Map createSQLCache() {\n-        QuerySQLCacheValue querySQLCache = _conf.getQuerySQLCache();\n-        return (Map)querySQLCache.newInstance();\n-    }\n-\n-    public boolean isQuerySQLCacheOn() {\n-        return _isQuerySQLCache;  \n-    }\n-    \n-    public Map getQuerySQLCache() {\n-        return _sqlCache;\n-    }\n-    \n-    public static class SelectKey {\n-        public ClassMapping mapping;\n-        public FieldMapping fm;\n-        public JDBCFetchConfiguration fetch;\n-        \n-        public SelectKey (ClassMapping mapping, FieldMapping fm, \n-            JDBCFetchConfiguration fetch) {\n-            this.mapping = mapping;\n-            this.fm = fm;\n-            this.fetch = fetch;\n-        }\n-        \n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-\n-            SelectKey selectKey = (SelectKey) o;\n-            if (fetch != null ? !equals(fetch, selectKey.fetch) :\n-                selectKey.fetch != null) return false;\n-            if (mapping != null ? !mapping.equals(selectKey.mapping) :\n-                selectKey.mapping != null) return false;\n-            if (fm != null ? !fm.equals(selectKey.fm) :\n-                selectKey.fm != null) return false;\n-            return true;\n-        }\n-        \n-        public boolean equals(JDBCFetchConfiguration fetch1,\n-        \tJDBCFetchConfiguration fetch2) {\n-            if (fetch1 == fetch2) \n-            \treturn true;\n-\n-            if (fetch1.getIsolation() != fetch2.getIsolation()) \n-            \treturn false;\n-            if (fetch1.getFetchDirection() != fetch2.getFetchDirection()) \n-            \treturn false;\n-            if (fetch1.getEagerFetchMode() != fetch2.getEagerFetchMode()) \n-            \treturn false;\n-            if (fetch1.getSubclassFetchMode() != fetch2.getSubclassFetchMode()) \n-            \treturn false;\n-            if (fetch1.getJoinSyntax() != fetch2.getJoinSyntax()) \n-            \treturn false;\n-            Set joins1 = fetch1.getJoins();\n-            Set joins2 = fetch2.getJoins();\n-            if (joins1 != null ? !joins1.equals(joins2) : joins2 != null)\n-                return false;\n-            \n-            if (fetch1.getMaxFetchDepth() != fetch2.getMaxFetchDepth()) \n-            \treturn false;\n-            if (fetch1.getReadLockLevel() != fetch2.getReadLockLevel()) \n-            \treturn false;\n-            if (fetch1.getWriteLockLevel() != fetch2.getWriteLockLevel()) \n-            \treturn false;\n-            \n-            boolean sameFetchGroup = false;\n-            boolean hasFetchGroupAll = ((JDBCFetchConfigurationImpl)fetch1).\n-            \thasFetchGroupAll();\n-            boolean hasFetchGroupAll1 = ((JDBCFetchConfigurationImpl)fetch2).\n-            \thasFetchGroupAll();\n-            if (hasFetchGroupAll && hasFetchGroupAll1) \n-                sameFetchGroup = true;\n-            else if (!hasFetchGroupAll && !hasFetchGroupAll1){\n-                boolean hasFetchGroupDefault = \n-                \t((JDBCFetchConfigurationImpl)fetch1).hasFetchGroupDefault();\n-                boolean hasFetchGroupDefault1 = \n-                \t((JDBCFetchConfigurationImpl)fetch2).hasFetchGroupDefault();\n-                if (hasFetchGroupDefault && hasFetchGroupDefault1) \n-                    sameFetchGroup = true;\n-            }\n-            \n-            if (!sameFetchGroup) {\n-                Set fetchGroups = fetch1.getFetchGroups();\n-                Set fetchGroups1 = fetch2.getFetchGroups();\n-                if (fetchGroups != null ? !fetchGroups.equals(fetchGroups1) : \n-                \tfetchGroups1 != null)\n-                    return false;\n-            }\n-            \n-            Set fields = fetch1.getFields();\n-            Set fields1 = fetch2.getFields();\n-            int size = fields.size();\n-            int size1 = fields1.size();\n-            if (size == 0 && size1 == 0)\n-                return true;\n-            else if (size != size1) \n-                return false;   \n-            \n-            if (fields != null ? !fields.equals(fields1) : fields1 != null)\n-                return false;\n-            \n-            return true;\n-        }\n-        \n-        \n-        public int hashCode() {\n-            int result = 0;\n-            result = 31 * result + (mapping != null ? mapping.hashCode() : 0);\n-            result = 31 * result + (fm != null ? fm.hashCode() : 0);\n-            result = 31 * result + fetch.getIsolation();\n-            result = 31 * result + fetch.getFetchDirection();\n-            result = 31 * result + fetch.getEagerFetchMode();\n-            result = 31 * result + fetch.getSubclassFetchMode();\n-            result = 31 * result + fetch.getJoinSyntax();\n-            Set joins = fetch.getJoins();\n-            result = 31 * result + (joins != null ? joins.hashCode() : 0);\n-            \n-            result = 31 * result + fetch.getMaxFetchDepth();\n-            result = 31 * result + fetch.getReadLockLevel();\n-            result = 31 * result + fetch.getWriteLockLevel();\n-        \t\n-            if (((JDBCFetchConfigurationImpl)fetch).hasFetchGroupAll()) \n-            \tresult = 31 * result + FetchGroup.NAME_ALL.hashCode();\n-            else {\n-                Set fetchGroups = fetch.getFetchGroups();\n-                if (((JDBCFetchConfigurationImpl)fetch).hasFetchGroupDefault() \n-                \t&& fetchGroups != null && fetchGroups.size() == 1)\n-                    result = 31 * result + FetchGroup.NAME_DEFAULT.hashCode();\n-                else {\n-                    result = 31 * result + (fetchGroups != null && \n-                        fetchGroups.size() > 0 ? \n-                        fetchGroups.hashCode() : 0);\n-                }\n-            }\n-            Set fields = fetch.getFields();\n-        \tresult = 31 * result + (fields != null &&  fields.size() > 0 ? \n-        \t\tfields.hashCode() : 0);\n-            \n-            return result;\n-        }\n-    }\n }\n+"},{"sha":"b7be50d7216bd5e955fe907658cc414f942071ef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":116,"deletions":4,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -50,13 +50,15 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.ExpressionStoreQuery;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\n import org.apache.openjpa.kernel.QueryHints;\n import org.apache.openjpa.kernel.exps.Constant;\n+import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n import org.apache.openjpa.kernel.exps.FilterListener;\n@@ -100,6 +102,7 @@\n     }\n \n     private final transient JDBCStore _store;\n+    private static ThreadLocalContext localContext = new ThreadLocalContext();\n \n     /**\n      * Constructor. Supply store manager.\n@@ -140,11 +143,15 @@ public boolean supportsDataStoreExecution() {\n     protected ExpressionFactory getExpressionFactory(ClassMetaData meta) {\n         return new JDBCExpressionFactory((ClassMapping) meta);\n     }\n-\n+    \n     protected ResultObjectProvider executeQuery(Executor ex,\n         ClassMetaData base, ClassMetaData[] metas, boolean subclasses,\n         ExpressionFactory[] facts, QueryExpressions[] exps, Object[] params,\n         Range range) {\n+        Context[] ctxs = new Context[exps.length];\n+        for (int i = 0; i < exps.length; i++)\n+            ctxs[i] = exps[i].ctx();\n+        localContext.set(clone(ctxs, null));\n         if (metas.length > 1 && exps[0].isAggregate())\n             throw new UserException(Localizer.forPackage(JDBCStoreQuery.class).\n                 get(\"mult-mapping-aggregate\", Arrays.asList(metas)));\n@@ -167,8 +174,10 @@ protected ResultObjectProvider executeQuery(Executor ex,\n         long end = (dict.supportsSelectEndIndex) ? range.end : Long.MAX_VALUE;\n \n         QueryExpressionsState[] states = new QueryExpressionsState[exps.length];\n-        for (int i = 0; i < states.length; i++)\n+        for (int i = 0; i < states.length; i++) {\n             states[i] = new QueryExpressionsState();\n+            exps[i].state = states[i];\n+        }\n         ExpContext ctx = new ExpContext(_store, params, fetch);\n \n         // add selects with populate WHERE conditions to list\n@@ -233,6 +242,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n         if ((rops != null && range.end != Long.MAX_VALUE) \n             || start != range.start || end != range.end)\n             rop = new RangeResultObjectProvider(rop, range.start, range.end);\n+\n+        localContext.remove();\n         return rop;\n     }\n \n@@ -444,6 +455,11 @@ protected Number executeUpdate(Executor ex, ClassMetaData base,\n     private Number executeBulkOperation(ClassMetaData[] metas,\n         boolean subclasses, ExpressionFactory[] facts, QueryExpressions[] exps,\n         Object[] params, Map updates) {\n+        Context[] ctxs = new Context[exps.length];\n+        for (int i = 0; i < exps.length; i++)\n+            ctxs[i] = exps[i].ctx();\n+        localContext.set(clone(ctxs, null));\n+        \n         // we cannot execute a bulk delete statement when have mappings in\n         // multiple tables, so indicate we want to use in-memory with null\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n@@ -510,7 +526,8 @@ private Number executeBulkOperation(ClassMetaData[] metas,\n                 stmnt = null;\n                 try {\n                     stmnt = prepareStatement(conn, sql[i]);\n-                    count += executeUpdate(conn, stmnt, sql[i], isUpdate);                    \n+                    dict.setTimeouts(stmnt, fetch, true);\n+                    count += executeUpdate(conn, stmnt, sql[i], isUpdate);\n                 } catch (SQLException se) {\n                     throw SQLExceptions.getStore(se, sql[i].getSQL(), \n                         _store.getDBDictionary());\n@@ -522,6 +539,8 @@ private Number executeBulkOperation(ClassMetaData[] metas,\n         } finally {\n             try { conn.close(); } catch (SQLException se) {}\n         }\n+\n+        localContext.remove();\n         return Numbers.valueOf(count);\n     }\n \n@@ -580,7 +599,8 @@ private Table getTable(FieldMapping[] fields, Table table) {\n      * returns INVALID. Also returns INVALID if field is dependent.\n      */\n     private Table getTable(FieldMapping fm, Table table) {\n-        if (fm.getCascadeDelete() != ValueMetaData.CASCADE_NONE)\n+        if (fm.getCascadeDelete() != ValueMetaData.CASCADE_NONE \n+            && !fm.isEmbeddedPC())\n             return INVALID;\n \n         Column[] columns = fm.getColumns();\n@@ -590,6 +610,8 @@ private Table getTable(FieldMapping fm, Table table) {\n             else if (table != columns[i].getTable())\n                 return INVALID;\n         }\n+        if (fm.isBidirectionalJoinTableMappingOwner())\n+        \treturn INVALID;\n         return table;\n     }\n \n@@ -602,6 +624,10 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n     protected String[] getDataStoreActions(ClassMetaData base,\n         ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n         QueryExpressions[] exps, Object[] params, Range range) {\n+        Context[] ctxs = new Context[exps.length];\n+        for (int i = 0; i < exps.length; i++)\n+            ctxs[i] = exps[i].ctx();\n+        localContext.set(clone(ctxs, null));\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n         JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx.\n             getFetchConfiguration();\n@@ -659,6 +685,8 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n         String[] sql = new String[sels.size()];\n         for (int i = 0; i < sels.size(); i++)\n             sql[i] = ((Select) sels.get(i)).toSelect(false, fetch).getSQL(true);\n+\n+        localContext.remove();\n         return sql;\n     }\n     \n@@ -954,4 +982,88 @@ private Object getValue(Object ob, FieldMapping fmd,\n             throw new UnsupportedException();\n         }\n     }\n+\n+    private static class ThreadLocalContext extends ThreadLocal<Context[]> {\n+        public Context[] initialValue() {\n+          return null;\n+        }\n+    }\n+\n+    public static Context[] getThreadLocalContext() {\n+        return localContext.get();\n+    }\n+\n+    public static Context getThreadLocalContext(Context orig) {\n+        Context[] root = localContext.get();\n+        for (int i = 0; i < root.length; i++) {\n+            Context lctx = getThreadLocalContext(root[i], orig);\n+            if (lctx != null)\n+                return lctx;\n+        }\n+        return null;\n+    }\n+\n+    public static Select getThreadLocalSelect(Select select) {\n+        if (select == null)\n+            return null;\n+        Context[] lctx = JDBCStoreQuery.getThreadLocalContext();\n+        Context cloneFrom = select.ctx();\n+        for (int i = 0; i < lctx.length; i++) {\n+            Context cloneTo = getThreadLocalContext(lctx[i], cloneFrom);\n+            if (cloneTo != null)\n+                return (Select)cloneTo.getSelect();\n+        }\n+        return select;\n+    }\n+\n+    public static Context getThreadLocalContext(Context lctx, Context cloneFrom) {\n+        if (lctx.cloneFrom == cloneFrom)\n+            return lctx;\n+        java.util.List<Context> subselCtxs = lctx.getSubselContexts();\n+        if (subselCtxs != null) {\n+            for (Context subselCtx : subselCtxs) {\n+                Context ctx = getThreadLocalContext(subselCtx, cloneFrom);\n+                if (ctx != null)\n+                    return ctx;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static Context[] clone(Context[] orig, Context parent) {\n+        Context[] newCtx = new Context[orig.length];\n+        for (int i = 0; i < orig.length; i++) {\n+            newCtx[i] = clone(orig[i], parent);\n+        }\n+        return newCtx;\n+    }\n+\n+    private static Context clone(Context orig, Context parent) {\n+        Context myParent = null;\n+        if (parent == null) {\n+            Context origParent = orig.getParent();\n+            if (origParent != null)\n+                myParent = clone(orig.getParent(), null);\n+        } else\n+            myParent = parent;\n+\n+        Context newCtx = new Context(orig.parsed, null, myParent);\n+        newCtx.from = orig.from;\n+        newCtx.meta = orig.meta;\n+        newCtx.schemaAlias = orig.schemaAlias;\n+        newCtx.setSchemas(orig.getSchemas());\n+        newCtx.setVariables(orig.getVariables());\n+        newCtx.cloneFrom = orig;\n+        Object select = orig.getSelect();\n+        if (select != null)\n+            newCtx.setSelect(((SelectImpl)select).clone(newCtx));\n+        newCtx.subquery = orig.subquery;\n+        List<Context> subsels = orig.getSubselContexts();\n+        if (subsels != null) {\n+            for (Context subsel : subsels) \n+                newCtx.addSubselContext(clone(subsel, newCtx));\n+        }\n+\n+        return newCtx;        \n+    }\n }"},{"sha":"907c683b5369584fe81db7b088561d780c4ef651","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.MixedLockLevels;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.OptimisticException;\n+\n+/**\n+ * Mixed lock manager implements both optimistic and pessimistic locking\n+ * semantics in parallel to the JPA 2.0 specification.\n+ *\n+ * @author Albert Lee\n+ * @since 2.0.0\n+ */\n+public class MixedLockManager extends PessimisticLockManager {\n+\n+    private static final Localizer _loc = Localizer\n+        .forPackage(MixedLockManager.class);\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.apache.openjpa.jdbc.kernel.PessimisticLockManager\n+     *  #selectForUpdate(org.apache.openjpa.jdbc.sql.Select,int)\n+     */\n+    public boolean selectForUpdate(Select sel, int lockLevel) {\n+        return (lockLevel >= MixedLockLevels.LOCK_PESSIMISTIC_READ) \n+            ? super.selectForUpdate(sel, lockLevel) : false;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.apache.openjpa.jdbc.kernel.PessimisticLockManager#\n+     *  lockInternal(org.apache.openjpa.kernel.OpenJPAStateManager, int, int,\n+     *               java.lang.Object)\n+     */\n+    protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n+        Object sdata, boolean postLockVersionCheck) {\n+        if (level >= MixedLockLevels.LOCK_PESSIMISTIC_FORCE_INCREMENT) {\n+            setVersionCheckOnReadLock(true);\n+            setVersionUpdateOnWriteLock(true);\n+            super.lockInternal(sm, level, timeout, sdata, postLockVersionCheck);\n+        } else if (level >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n+            setVersionCheckOnReadLock(true);\n+            setVersionUpdateOnWriteLock(false);\n+            super.lockInternal(sm, level, timeout, sdata, postLockVersionCheck);\n+        } else if (level >= MixedLockLevels.LOCK_READ) {\n+            setVersionCheckOnReadLock(true);\n+            setVersionUpdateOnWriteLock(true);\n+            optimisticLockInternal(sm, level, timeout, sdata,\n+                postLockVersionCheck);\n+        }\n+    }\n+\n+    protected void optimisticLockInternal(OpenJPAStateManager sm, int level,\n+        int timeout, Object sdata, boolean postLockVersionCheck) {\n+        super.optimisticLockInternal(sm, level, timeout, sdata,\n+            postLockVersionCheck);\n+        if (postLockVersionCheck) {\n+            if (level >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n+                ClassMapping mapping = (ClassMapping) sm.getMetaData();\n+                try {\n+                    if (!mapping.getVersion().checkVersion(sm, this.getStore(),\n+                        false)) {\n+                        throw (new OptimisticException(_loc.get(\n+                            \"optimistic-violation-lock\").getMessage()))\n+                            .setFailedObject(sm.getObjectId());\n+                    }\n+                } catch (SQLException se) {\n+                    throw SQLExceptions.getStore(se, sm.getObjectId(),\n+                        getStore().getDBDictionary());\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"ac0e62aed92e5d91f91ee69012dd46995ba835fb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":32,"deletions":7,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -81,6 +81,8 @@\n     private String _tableName = \"DUAL\";\n     private boolean _subTable = false;\n \n+    private String _schema = null;\n+        \n     /**\n      * The sequence name. Defaults to <code>OPENJPA_SEQUENCE</code>.\n      */\n@@ -169,9 +171,12 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         if (group.isKnownSequence(_seqName))\n             return;\n \n-        String schemaName = Strings.getPackageName(_seqName);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n+        String schemaName = getSchema();\n+        if (schemaName == null || schemaName.length() == 0) {\n+            schemaName = Strings.getPackageName(_seqName);\n+            if (schemaName.length() == 0)\n+                schemaName = Schemas.getNewTableSchema(_conf);\n+        }\n \n         // create table in this group\n         Schema schema = group.getSchema(schemaName);\n@@ -228,9 +233,17 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n      */\n     private void buildSequence() {\n         String seqName = Strings.getClassName(_seqName);\n-        String schemaName = Strings.getPackageName(_seqName);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n+        // JPA 2 added schema as a configurable attribute on  \n+        // sequence generator.  OpenJPA <= 1.x allowed this via\n+        // schema.sequence on the sequence name.  Specifying a schema\n+        // name on the annotation or in the orm will override the old \n+        // behavior.\n+        String schemaName = _schema;\n+        if (schemaName == null || schemaName.length() == 0) {\n+            schemaName = Strings.getPackageName(_seqName);\n+            if (schemaName.length() == 0)\n+                schemaName = Schemas.getNewTableSchema(_conf);\n+        }\n \n         // build the sequence in one of the designated schemas\n         SchemaGroup group = new SchemaGroup();\n@@ -277,11 +290,15 @@ public void dropSequence()\n      */\n     private long getSequence(Connection conn)\n         throws SQLException {\n+        DBDictionary dict = _conf.getDBDictionaryInstance();\n         PreparedStatement stmnt = null;\n         ResultSet rs = null;\n         try {\n             stmnt = conn.prepareStatement(_select);\n-            rs = stmnt.executeQuery();\n+            dict.setTimeouts(stmnt, _conf, false);\n+            synchronized(this) {\n+                rs = stmnt.executeQuery();\n+            }\n             if (rs.next())\n                 return rs.getLong(1);\n \n@@ -380,4 +397,12 @@ else if (ACTION_GET.equals(action)) {\n             return false;\n         return true;\n     }\n+\n+    public void setSchema(String _schema) {\n+        this._schema = _schema;\n+    }\n+\n+    public String getSchema() {\n+        return _schema;\n+    }\n }"},{"sha":"5284e6b29a5063be87623c048a2cbb9545e75021","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":12,"deletions":27,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -90,27 +90,28 @@ public void loadedForUpdate(OpenJPAStateManager sm) {\n     }\n \n     protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n-        Object sdata) {\n+        Object sdata, boolean postVersionCheck) {\n         // we can skip any already-locked instance regardless of level because\n         // we treat all locks the same (though super doesn't)\n         if (getLockLevel(sm) == LOCK_NONE) {\n             // only need to lock if not loaded from locking result\n             ConnectionInfo info = (ConnectionInfo) sdata;\n             if (info == null || info.result == null || !info.result.isLocking())\n-                lockRow(sm, timeout);\n+                lockRow(sm, timeout, level);\n         }\n-        super.lockInternal(sm, level, timeout, sdata);\n+        optimisticLockInternal(sm, level, timeout, sdata, postVersionCheck);\n     }\n \n     /**\n      * Lock the specified instance row by issuing a \"SELECT ... FOR UPDATE\"\n      * statement.\n      */\n-    private void lockRow(OpenJPAStateManager sm, int timeout) {\n+    private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         // assert that the dictionary supports the \"SELECT ... FOR UPDATE\"\n         // construct; if not, and we the assertion does not throw an\n         // exception, then just return without locking\n         DBDictionary dict = _store.getDBDictionary();\n+        JDBCFetchConfiguration fetch = _store.getFetchConfiguration();\n         if (dict.simulateLocking)\n             return;\n         dict.assertSupport(dict.supportsSelectForUpdate,\n@@ -125,19 +126,20 @@ private void lockRow(OpenJPAStateManager sm, int timeout) {\n         Select select = _store.getSQLFactory().newSelect();\n         select.select(mapping.getPrimaryKeyColumns());\n         select.wherePrimaryKey(id, mapping, _store);\n-        SQLBuffer sql = select.toSelect(true, _store.getFetchConfiguration());\n+        SQLBuffer sql = select.toSelect(true, fetch);\n \n         ensureStoreManagerTransaction();\n         Connection conn = _store.getConnection();\n         PreparedStatement stmnt = null;\n         ResultSet rs = null;\n         try {\n             stmnt = prepareStatement(conn, sql);\n-            setTimeout(stmnt, timeout);\n+            dict.setTimeouts(stmnt, fetch, true);\n             rs = executeQuery(conn, stmnt, sql);\n-            checkLock(rs, sm);\n+            checkLock(rs, sm, timeout);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, dict);\n+            throw SQLExceptions.getStoreSQLException(sm, se, dict,\n+                level);\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}\n@@ -174,23 +176,6 @@ protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n         return sql.prepareStatement(conn);\n     }\n     \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of setting query timeout.\n-     */\n-    protected void setTimeout(PreparedStatement stmnt, int timeout)\n-        throws SQLException {\n-        DBDictionary dict = _store.getDBDictionary();\n-        if (timeout >= 0 && dict.supportsQueryTimeout) {\n-            if (timeout < 1000) {\n-                timeout = 1000;\n-                if (log.isWarnEnabled())\n-                    log.warn(_loc.get(\"millis-query-timeout\"));\n-            }\n-            stmnt.setQueryTimeout(timeout / 1000);\n-        }\n-    }\n-    \n     /**\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of executing query.\n@@ -204,10 +189,10 @@ protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt,\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of checking lock from the result set.\n      */\n-    protected void checkLock(ResultSet rs, OpenJPAStateManager sm)\n+    protected void checkLock(ResultSet rs, OpenJPAStateManager sm, int timeout)\n         throws SQLException { \n         if (!rs.next())\n-            throw new LockException(sm.getManagedInstance());\n+            throw new LockException(sm.getManagedInstance(), timeout);\n         return;\n     }\n }"},{"sha":"93e640da0fa8b87f000d678852969ea6b03f55f6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedProjectionResultObjectProvider.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedProjectionResultObjectProvider.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n+import org.apache.openjpa.jdbc.kernel.exps.QueryExpressionsState;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.kernel.exps.QueryExpressions;\n+\n+/**\n+ * Object provider implementation wrapped around a projection select that has been executed earlier.\n+ *\n+ * @author Pinaki Poddar\n+ */\n+class PreparedProjectionResultObjectProvider\n+    extends ProjectionResultObjectProvider {\n+\n+    public PreparedProjectionResultObjectProvider(SelectExecutor sel, \n+        QueryExpressions exps, QueryExpressionsState state, ExpContext ctx, Result res) {\n+        super(sel, exps, state, ctx);\n+        _res = res;\n+    }\n+\n+    public PreparedProjectionResultObjectProvider(SelectExecutor sel, \n+        QueryExpressions[] exps, QueryExpressionsState[] state, ExpContext ctx, Result res){\n+        super(sel, exps, state, ctx);\n+        _res = res;\n+    }\n+\n+    public Result getResult() {\n+        return _res;\n+    }\n+    \n+    public void open() throws SQLException {\n+        // do nothing\n+    }\n+\n+}"},{"sha":"abbaf42d7f60a4691dd2547184cae6502f526e2c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"added","additions":418,"deletions":0,"changes":418,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,418 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.PreparedQuery;\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.QueryHints;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * An implementation of the cache of {@link PreparedQuery prepared queries}. \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ * @since 2.0.0\n+ * \n+ * @nojavadoc\n+ */\n+public class PreparedQueryCacheImpl implements PreparedQueryCache {\n+\tprivate static final String PATTERN_SEPARATOR = \"\\\\;\";\n+\t// Key: Query identifier \n+\tprivate final Map<String, PreparedQuery> _delegate;\n+\t// Key: Query identifier Value: Reason why excluded\n+\tprivate final Map<String, Exclusion> _uncachables;\n+\tprivate final List<Exclusion> _exclusionPatterns;\n+\tprivate final QueryStatistics<String> _stats;\n+\tprivate ReentrantLock _lock = new ReentrantLock();\n+\tprivate Log _log;\n+    private static Localizer _loc = Localizer.forPackage(PreparedQueryCacheImpl.class);\n+    \n+\tpublic PreparedQueryCacheImpl() {\n+\t\t_delegate = new HashMap<String, PreparedQuery>();\n+\t\t_uncachables = new HashMap<String, Exclusion>();\n+\t\t_stats = new QueryStatistics.Default<String>();\n+\t\t_exclusionPatterns = new ArrayList<Exclusion>();\n+\t}\n+\t\n+    public Boolean register(String id, Query query, FetchConfiguration hints) {\n+        if (id == null \n+            || query == null \n+            || QueryLanguages.LANG_SQL.equals(query.getLanguage()) \n+            || QueryLanguages.LANG_METHODQL.equals(query.getLanguage())\n+            || isHinted(hints, QueryHints.HINT_IGNORE_PREPARED_QUERY)\n+            || isHinted(hints, QueryHints.HINT_INVALIDATE_PREPARED_QUERY))\n+            return Boolean.FALSE;\n+        if (isCachable(id) == Boolean.FALSE)\n+            return Boolean.FALSE;\n+        PreparedQuery cached = get(id);\n+        if (cached != null)\n+            return null; // implies that it is already cached\n+        \n+        PreparedQuery newEntry = new PreparedQueryImpl(id, query); \n+        return cache(newEntry);\n+\t}\n+\t\n+\tpublic Map<String,String> getMapView() {\n+\t\tlock();\n+\t\ttry {\n+            Map<String, String> view = new TreeMap<String, String>();\n+            for (Map.Entry<String, PreparedQuery> entry : _delegate.entrySet())\n+                view.put(entry.getKey(), entry.getValue().getTargetQuery());\n+\t\t\treturn view;\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Cache the given query keyed by its identifier. Does not cache if the \n+\t * identifier matches any exclusion pattern or has been marked as \n+\t * non-cachable. Also register the identifier as not cachable against \n+\t * the matched exclusion pattern.\n+\t */\n+\tpublic boolean cache(PreparedQuery q) {\n+\t\tlock();\n+\t\ttry {\n+\t\t\tString id = q.getIdentifier();\n+\t\t\tif (isCachable(id) == Boolean.FALSE) {\n+\t\t\t\tif (_log != null && _log.isWarnEnabled())\n+                    _log.warn(_loc.get(\"prepared-query-not-cachable\", id));\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tExclusion exclusion = getMatchedExclusionPattern(id);\n+\t\t\tif (exclusion != null) {\n+\t\t\t\tmarkUncachable(id, exclusion);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t_delegate.put(id, q);\n+            if (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"prepared-query-cached\", id));\n+\t\t\treturn true;\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+    public PreparedQuery initialize(String key, Object result) {\n+        PreparedQuery pq = get(key);\n+        if (pq == null)\n+            return null;\n+        \n+        Exclusion exclusion = pq.initialize(result);\n+        if (exclusion != null) {\n+            markUncachable(key, exclusion);\n+            return null;\n+        } \n+        return pq;\n+    }\n+\t\n+\tpublic boolean invalidate(String id) {\n+\t\tlock();\n+\t\ttry {\n+\t\t\tif (_log != null && _log.isInfoEnabled())\n+                _log.info(_loc.get(\"prepared-query-invalidate\", id));\n+\t\t\treturn _delegate.remove(id) != null;\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+    public PreparedQuery get(String id) {\n+        lock();\n+        try {\n+            return _delegate.get(id);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    \n+\tpublic Boolean isCachable(String id) {\n+\t\tlock();\n+\t\ttry {\n+\t\t\tif (_uncachables.containsKey(id))\n+\t\t\t\treturn Boolean.FALSE;\n+\t\t\tif (_delegate.containsKey(id))\n+\t\t\t\treturn Boolean.TRUE;\n+\t\t\treturn null;\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+\tpublic PreparedQuery markUncachable(String id, Exclusion exclusion) {\n+\t\tlock();\n+\t\ttry {\n+\t\t\tif (_uncachables.put(id, exclusion) == null) {\n+\t\t\t    if (_log != null && _log.isInfoEnabled()) \n+\t\t\t        _log.info(_loc.get(\"prepared-query-uncache\", id, exclusion));\n+\t\t\t}\n+\t\t\treturn _delegate.remove(id);\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+\tpublic Exclusion isExcluded(String id) {\n+\t\treturn getMatchedExclusionPattern(id);\n+\t}\n+\t\n+\tpublic void setExcludes(String excludes) {\n+\t\tlock();\n+\t\ttry {\n+\t\t\tif (StringUtils.isEmpty(excludes))\n+\t\t\t\treturn;\n+\t\t\tString[] patterns = excludes.split(PATTERN_SEPARATOR);\n+\t\t\tfor (String pattern : patterns)\n+\t\t\t\taddExclusionPattern(pattern);\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\n+\tpublic List<Exclusion> getExcludes() {\n+\t\treturn Collections.unmodifiableList(_exclusionPatterns);\n+\t}\n+\t\n+\t/**\n+     * Adds a pattern for exclusion. Any query cached currently whose identifier\n+     * matches the given pattern will be marked invalidated as a side-effect.\n+\t */\n+\tpublic void addExclusionPattern(String pattern) {\n+\t\tlock();\n+\t\ttry {\n+\t\t    String reason = _loc.get(\"prepared-query-excluded-by-user\", pattern).getMessage();\n+\t\t\tExclusion exclusion = new WeakExclusion(pattern, reason);\n+\t\t\t_exclusionPatterns.add(exclusion);\n+            Collection<String> invalidKeys = getMatchedKeys(pattern, _delegate.keySet());\n+\t\t\tfor (String invalidKey : invalidKeys) {\n+\t\t\t    Exclusion invalid = new WeakExclusion(invalidKey, reason);\n+\t\t\t\tmarkUncachable(invalidKey, invalid);\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Removes a pattern for exclusion. Any query identifier marked as not \n+     * cachable due to the given pattern will now be removed from the list of\n+\t * uncachables as a side-effect.\n+\t */\n+\tpublic void removeExclusionPattern(String pattern) {\n+\t\tlock();\n+\t\ttry {\n+            Exclusion exclusion = new WeakExclusion(pattern, null);\n+\t\t\t_exclusionPatterns.remove(exclusion);\n+            Collection<String> reborns = getMatchedKeys(pattern, _uncachables);\n+\t\t\tfor (String rebornKey : reborns) {\n+                _uncachables.remove(rebornKey);\n+\t            if (_log != null && _log.isInfoEnabled())\n+\t                _log.info(_loc.get(\"prepared-query-remove-pattern\", pattern, rebornKey));\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tunlock();\n+\t\t}\n+\t}\n+\t\n+\tpublic QueryStatistics<String> getStatistics() {\n+\t\treturn _stats;\n+\t}\n+\t\n+\t/**\n+\t * Gets the pattern that matches the given identifier.\n+\t */\n+\tprivate Exclusion getMatchedExclusionPattern(String id) {\n+\t\tfor (Exclusion pattern : _exclusionPatterns)\n+\t\t\tif (pattern.matches(id))\n+\t\t\t\treturn pattern;\n+\t\treturn null;\n+\t}\n+\t\n+\t/**\n+\t * Gets the keys of the given map whose values match the given pattern. \n+\t */\n+\tprivate Collection<String> getMatchedKeys(String pattern, Map<String,Exclusion> map) {\n+        List<String> result = new ArrayList<String>();\n+\t\tfor (Map.Entry<String, Exclusion> entry : map.entrySet()) {\n+\t\t    Exclusion exclusion = entry.getValue();\n+\t\t\tif (!exclusion.isStrong() && exclusion.matches(pattern)) {\n+\t\t\t\tresult.add(entry.getKey());\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Gets the elements of the given list which match the given pattern. \n+\t */\n+\tprivate Collection<String> getMatchedKeys(String pattern, Collection<String> coll) {\n+\t\tList<String> result = new ArrayList<String>();\n+\t\tfor (String key : coll) {\n+\t\t\tif (matches(pattern, key)) {\n+\t\t\t\tresult.add(key);\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+    void lock() {\n+        if (_lock != null)\n+            _lock.lock();\n+    }\n+\n+    void unlock() {\n+        if (_lock != null && _lock.isLocked())\n+            _lock.unlock();\n+    }\n+    \n+    boolean matches(String pattern, String target) {\n+    \treturn target != null && (target.equals(pattern) \n+    \t  || target.matches(pattern));\n+    }\n+    \n+    boolean isHinted(FetchConfiguration fetch, String hint) {\n+        if (fetch == null)\n+            return false;\n+        Object result = fetch.getHint(hint);\n+        return result != null && \"true\".equalsIgnoreCase(result.toString());\n+    }\n+    \n+    public void clear() {\n+        _delegate.clear();\n+        _stats.clear();\n+    }\n+        \n+\t//-------------------------------------------------------\n+\t// Configurable contract\n+\t//-------------------------------------------------------\n+    public void setConfiguration(Configuration conf) {\n+    \t_log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+\n+    public void endConfiguration() {\n+    }\n+    \n+    /**\n+     * An immutable abstract pattern for exclusion.\n+     *\n+     */\n+    private static abstract class ExclusionPattern implements PreparedQueryCache.Exclusion {\n+        private final boolean _strong;\n+        private final String  _pattern;\n+        private final String  _reason;\n+        \n+        private static Localizer _loc = Localizer.forPackage(PreparedQueryCacheImpl.class);\n+        private static String STRONG = _loc.get(\"strong-exclusion\").getMessage();\n+        private static String WEAK   = _loc.get(\"weak-exclusion\").getMessage();\n+        \n+        public ExclusionPattern(boolean _strong, String _pattern, String _reason) {\n+            super();\n+            this._strong = _strong;\n+            this._pattern = _pattern;\n+            this._reason = _reason;\n+        }\n+\n+        public String getPattern() {\n+            return _pattern;\n+        }\n+\n+        public String getReason() {\n+            return _reason;\n+        }\n+\n+        public boolean isStrong() {\n+            return _strong;\n+        }\n+\n+        public boolean matches(String id) {\n+            return _pattern != null && (_pattern.equals(id) || _pattern.matches(id));\n+        }\n+        \n+        /**\n+         * Equals by strength and pattern (not by reason).\n+         */\n+        @Override\n+        public final boolean equals(Object other) {\n+            if (other == this)\n+                return true;\n+            if (!(other instanceof Exclusion))\n+                return false;\n+            Exclusion that = (Exclusion)other;\n+            return this._strong == that.isStrong() \n+                && StringUtils.equals(this._pattern, that.getPattern());\n+        }\n+        \n+        @Override\n+        public int hashCode() {\n+            return (_strong ? 1 : 0) \n+                 + (_pattern == null ? 0 : _pattern.hashCode());\n+        }\n+        \n+        public String toString() {\n+            StringBuilder buf = new StringBuilder();\n+            buf.append(_strong ? STRONG : WEAK);\n+            if (_reason != null)\n+                buf.append(_reason);\n+            return buf.toString();\n+        }\n+    }\n+    \n+    /**\n+     * Strong exclusion.\n+     *\n+     */\n+    public static class StrongExclusion extends ExclusionPattern {\n+\n+        public StrongExclusion(String pattern, String reason) {\n+            super(true, pattern, reason);\n+        }\n+    }\n+    \n+    /**\n+     * Weak exclusion.\n+     *\n+     */\n+    public static class WeakExclusion extends ExclusionPattern {\n+\n+        public WeakExclusion(String pattern, String reason) {\n+            super(false, pattern, reason);\n+        }\n+    }\n+}"},{"sha":"0eded34adefeea53971e6b6a29d58e0589378c19","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"added","additions":374,"deletions":0,"changes":374,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,374 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.LogicalUnion;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n+import org.apache.openjpa.jdbc.sql.Union;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.PreparedQuery;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.QueryImpl;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.kernel.PreparedQueryCache.Exclusion;\n+import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ResultList;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Implements {@link PreparedQuery} for SQL queries.\n+ * PreparedQuery holds the post-compilation and post-execution state of a kernel Query.\n+ * The post-execution internal state of a query is appended as a <em>user object</em>\n+ * to the user-visible result to maintain the API contract. \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class PreparedQueryImpl implements PreparedQuery {\n+    private static Localizer _loc = \n+        Localizer.forPackage(PreparedQueryImpl.class);\n+\n+    private final String _id;\n+    private String _sql;\n+    private boolean _initialized;\n+    \n+    // Post-compilation state of an executable query, populated on construction\n+    private Class<?> _candidate;\n+    private boolean _subclasses;\n+    \n+    // post-execution state of a query\n+    private QueryExpressions[] _exps;\n+    private Class<?>[] _projTypes;\n+\n+    // Position of the user defined parameters in the _params list\n+    private Map<Object, int[]>    _userParamPositions;\n+    private Map<Integer, Object> _template;\n+    private SelectImpl select;\n+\n+    /**\n+     * Construct.\n+     * \n+     * @param id an identifier for this query to be used as cache key\n+     * @param compiled a compiled query \n+     */\n+    public PreparedQueryImpl(String id, Query compiled) {\n+        this(id, null, compiled);\n+    }\n+    \n+    /**\n+     * Construct.\n+     * \n+     * @param id an identifier for this query to be used as cache key\n+     * @param corresponding data store language query string \n+     * @param compiled a compiled query \n+     */\n+    public PreparedQueryImpl(String id, String sql, Query compiled) {\n+        this._id = id;\n+        this._sql = sql;\n+        if (compiled != null) {\n+            _candidate    = compiled.getCandidateType();\n+            _subclasses   = compiled.hasSubclasses();\n+        }\n+    }\n+    \n+    public String getIdentifier() {\n+        return _id;\n+    }\n+    \n+    public String getLanguage() {\n+        return QueryLanguages.LANG_PREPARED_SQL;\n+    }\n+    \n+    /**\n+     * Get the original query string which is same as the identifier of this \n+     * receiver.\n+     */\n+    public String getOriginalQuery() {\n+        return getIdentifier();\n+    }\n+    \n+    public String getTargetQuery() {\n+        return _sql;\n+    }\n+    \n+    void setTargetQuery(String sql) {\n+        _sql = sql;\n+    }\n+    \n+    public boolean isInitialized() {\n+        return _initialized;\n+    }\n+    \n+    public QueryExpressions[] getQueryExpressions() {\n+        return _exps;\n+    }\n+    \n+    public Class[] getProjectionTypes() {\n+        return _projTypes;\n+    }\n+    \n+    /**\n+     * Pours the post-compilation state held by this receiver to the given\n+     * query.\n+     */\n+    public void setInto(Query q) {\n+    \tq.setQuery(_id);\n+        q.setCandidateType(_candidate, _subclasses);\n+    }\n+\n+    /**\n+     * Initialize this receiver with post-execution result.\n+     * The input argument is processed only if it is a {@link ResultList} with\n+     * an attached {@link SelectResultObjectProvider} as its\n+     * {@link ResultList#getUserObject() user object}. \n+     * \n+     * @return an exclusion if can not be initialized for some reason. \n+     * null if initialization is successful. \n+     */\n+    public Exclusion initialize(Object result) {\n+        if (isInitialized())\n+            return null;\n+        Object[] extract = extractSelectExecutor(result);\n+        SelectExecutor selector = (SelectExecutor)extract[0];\n+        if (selector == null)\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, ((Localizer.Message)extract[1]).getMessage());\n+        if (selector == null || selector.hasMultipleSelects()\n+            || ((selector instanceof Union) \n+            && (((Union)selector).getSelects().length != 1)))\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-multi-select\").getMessage());\n+        select = extractImplementation(selector);\n+        if (select == null)\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-select\").getMessage());\n+        SQLBuffer buffer = selector.getSQL();\n+        if (buffer == null)\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\").getMessage());;\n+        setTargetQuery(buffer.getSQL());\n+        setParameters(buffer.getParameters());\n+        setUserParameterPositions(buffer.getUserParameters());\n+        _initialized = true;\n+        \n+        return null;\n+    }\n+    \n+    /**\n+     * Extract the underlying SelectExecutor from the given argument, if possible.\n+     * \n+     * @return two objects in an array. The element at index 0 is SelectExecutor, \n+     * if it can be extracted. The element at index 1 is the reason why it can\n+     * not be extracted.\n+     */\n+    private Object[] extractSelectExecutor(Object result) {\n+        if (result instanceof ResultList == false)\n+            return new Object[]{null, _loc.get(\"exclude-not-result\")};\n+        Object userObject = ((ResultList<?>)result).getUserObject();\n+        if (userObject == null || !userObject.getClass().isArray() || ((Object[])userObject).length != 2)\n+            return new Object[]{null, _loc.get(\"exclude-no-user-object\")};\n+        Object provider = ((Object[])userObject)[0];\n+        Object executor = ((Object[])userObject)[1];\n+        if (executor instanceof StoreQuery.Executor == false)\n+            return new Object[]{null, _loc.get(\"exclude-not-executor\")};\n+        _exps = ((StoreQuery.Executor)executor).getQueryExpressions();\n+        if (_exps[0].projections.length == 0) {\n+            _projTypes = StoreQuery.EMPTY_CLASSES;\n+        } else {\n+            _projTypes = new Class[_exps[0].projections.length];\n+            for (int i = 0; i < _exps[0].projections.length; i++) {\n+                _projTypes[i] = _exps[0].projections[i].getType();\n+            }\n+        }\n+        if (provider instanceof QueryImpl.PackingResultObjectProvider) {\n+            provider = ((QueryImpl.PackingResultObjectProvider)provider).getDelegate();\n+        }\n+        if (provider instanceof RangeResultObjectProvider) {\n+            provider = ((RangeResultObjectProvider)provider).getDelegate();\n+        }\n+        if (provider instanceof SelectResultObjectProvider) {\n+            return new Object[]{((SelectResultObjectProvider)provider).getSelect(), null};\n+        } \n+        return new Object[]{null, _loc.get(\"exclude-not-select-rop\", provider)};\n+    }\n+    \n+    private SelectImpl extractImplementation(SelectExecutor selector) {\n+        if (selector == null)\n+            return null;\n+        if (selector instanceof SelectImpl) \n+            return (SelectImpl)selector;\n+        if (selector instanceof LogicalUnion.UnionSelect)\n+            return ((LogicalUnion.UnionSelect)selector).getDelegate();\n+        if (selector instanceof Union) \n+            return extractImplementation(((Union)selector).getSelects()[0]);\n+        \n+        return null;\n+    }\n+    \n+    /**\n+     * Merge the given user parameters with its own parameter. The given map\n+     * must be compatible with the user parameters extracted during \n+     * {@link #initialize(Object) initialization}. \n+     * \n+     * @return 0-based parameter index mapped to corresponding values.\n+     * \n+     */\n+    public Map<Integer, Object> reparametrize(Map user, Broker broker) {\n+        if (!isInitialized())\n+            throw new InternalException(\"reparameterize() on uninitialized.\");\n+        if (user == null || user.isEmpty()) {\n+            if (!_userParamPositions.isEmpty()) {\n+                throw new UserException(_loc.get(\"uparam-null\", \n+                    _userParamPositions.keySet(), this));\n+            } else {\n+                return _template;\n+            }\n+        }\n+        if (!_userParamPositions.keySet().equals(user.keySet())) {\n+            throw new UserException(_loc.get(\"uparam-mismatch\", \n+                _userParamPositions.keySet(), user.keySet(), this));\n+        }\n+        Map<Integer, Object> result = new HashMap<Integer, Object>(_template);\n+        \n+        for (Object key : user.keySet()) {\n+            int[] indices = _userParamPositions.get(key);\n+            if (indices == null || indices.length == 0)\n+                throw new UserException(_loc.get(\"uparam-no-pos\", key, this));\n+            Object val = user.get(key);\n+            if (ImplHelper.isManageable(val)) {\n+                setPersistenceCapableParameter(result, val, indices, broker);\n+            } else if (val instanceof Collection) {\n+                setCollectionValuedParameter(result, (Collection)val, indices, \n+                    key);\n+            } else {\n+                for (int j : indices)\n+                    result.put(j, val);\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Calculate primary key identity value(s) of the given manageable instance\n+     * and fill in the given map.\n+     * \n+     * @param values a map of integer parameter index to parameter value\n+     * @param pc a manageable instance\n+     * @param indices the indices of the column values\n+     * @param broker used to obtain the primary key values\n+     */\n+    private void setPersistenceCapableParameter(Map<Integer,Object> result, \n+        Object pc, int[] indices, Broker broker) {\n+        JDBCStore store = (JDBCStore)broker.getStoreManager()\n+            .getInnermostDelegate();\n+        MappingRepository repos = store.getConfiguration()\n+            .getMappingRepositoryInstance();\n+        ClassMapping mapping = repos.getMapping(pc.getClass(), \n+            broker.getClassLoader(), true);\n+        Column[] pks = mapping.getPrimaryKeyColumns();\n+        Object cols = mapping.toDataStoreValue(pc, pks, store);\n+        if (cols instanceof Object[]) {\n+            Object[] array = (Object[])cols;\n+            int n = array.length;\n+            if (n > indices.length || indices.length%n != 0)\n+                throw new UserException(_loc.get(\"uparam-pc-key\", \n+                    pc.getClass(), n, Arrays.toString(indices)));\n+            int k = 0;\n+            for (int j : indices) {\n+                result.put(j, array[k%n]);\n+                k++;\n+            }\n+        } else {\n+            for (int j : indices) {\n+                result.put(j, cols);\n+            }\n+        } \n+    }\n+    \n+    private void setCollectionValuedParameter(Map<Integer,Object> result, \n+        Collection values, int[] indices, Object param) {\n+        int n = values.size();\n+        Object[] array = values.toArray();\n+        if (n > indices.length || indices.length%n != 0) {\n+            throw new UserException(_loc.get(\"uparam-coll-size\", param, values, \n+                Arrays.toString(indices)));\n+        }\n+        int k = 0;\n+        for (int j : indices) {\n+            result.put(j, array[k%n]);\n+            k++;\n+        }\n+        \n+    }\n+    /**\n+     * Marks the positions and keys of user parameters.\n+     * \n+     * @param list even elements are numbers representing the position of a \n+     * user parameter in the _param list. Odd elements are the user parameter\n+     * key. A user parameter key may appear more than once.\n+     */\n+    void setUserParameterPositions(List list) {\n+        _userParamPositions = new HashMap<Object, int[]>();\n+        for (int i = 1; list != null && i < list.size(); i += 2) {\n+            Object key = list.get(i);\n+            int p = (Integer)list.get(i-1);\n+            int[] positions = _userParamPositions.get(key);\n+            if (positions == null) {\n+                positions = new int[]{p};\n+            } else {\n+                int[] temp = new int[positions.length+1];\n+                System.arraycopy(positions, 0, temp, 0, positions.length);\n+                temp[positions.length] = p;\n+                positions = temp;\n+            }\n+            _userParamPositions.put(key, positions);\n+        }\n+    }\n+    \n+    void setParameters(List list) {\n+        Map<Integer, Object> tmp = new HashMap<Integer, Object>();\n+        for (int i = 0; list != null && i < list.size(); i++) {\n+            tmp.put(i, list.get(i));\n+        }\n+        _template = Collections.unmodifiableMap(tmp);\n+    }\n+    \n+    SelectImpl getSelect() {\n+        return select;\n+    }\n+    \n+    public String toString() {\n+        return \"PreparedQuery: [\" + getOriginalQuery() + \"] --> [\" + \n+               getTargetQuery() + \"]\";\n+    }\n+}"},{"sha":"accf616c5a834f9d661e839a460630c31bfa9f66","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedResultObjectProvider.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedResultObjectProvider.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+\n+/**\n+ * A Select-oriented Result Object Provider whose Select has been executed\n+ * outside its own scope.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class PreparedResultObjectProvider extends InstanceResultObjectProvider {\n+    /**\n+     * Constructor.\n+     *\n+     * @param sel the select to execute\n+     * @param store the store to delegate loading to\n+     * @param fetch the fetch configuration, or null for the default\n+     * @param res the result of the given select\n+     */\n+    public PreparedResultObjectProvider(SelectExecutor sel,\n+        ClassMapping mapping, JDBCStore store, JDBCFetchConfiguration fetch, \n+        Result res) {\n+        super(sel, mapping, store, fetch);\n+        _res = res;\n+    }\n+    \n+    public void open() throws SQLException {\n+        // do nothing\n+    }\n+}"},{"sha":"286221bc666d969172ed8788af597e795b3eb604","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedSQLStoreQuery.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedSQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedSQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedSQLStoreQuery.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n+import org.apache.openjpa.jdbc.kernel.exps.QueryExpressionsState;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.ResultSetResult;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.kernel.ExpressionStoreQuery.AbstractExpressionExecutor;\n+import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.util.InternalException;\n+\n+/**\n+ * A executor for Prepared SQL Query.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@SuppressWarnings(\"serial\")\n+public class PreparedSQLStoreQuery extends SQLStoreQuery {\n+    private PreparedQueryImpl _cached;\n+    public PreparedSQLStoreQuery(JDBCStore store) {\n+        super(store);\n+    }\n+    \n+    public Executor newDataStoreExecutor(ClassMetaData meta,\n+        boolean subclasses) {\n+        return new PreparedSQLExecutor(this, meta);\n+    }\n+    \n+    public boolean setQuery(Object query) {\n+        if (query instanceof PreparedQueryImpl == false) {\n+            throw new InternalException(query.getClass() + \" not recognized\");\n+        }\n+        _cached = (PreparedQueryImpl)query;\n+        return true;\n+    }\n+    \n+    PreparedQueryImpl getPreparedQuery() {\n+        return _cached;\n+    }\n+\n+    /**\n+     * Executor of a prepared query uses the QueryExpressions of the original query\n+     * available via the PreparedQuery.\n+     *\n+     */\n+    public static class PreparedSQLExecutor extends AbstractExpressionExecutor {\n+        private final ClassMetaData _meta;\n+        private final PreparedSQLStoreQuery _query;\n+        \n+        public PreparedSQLExecutor(PreparedSQLStoreQuery q, ClassMetaData candidate) {\n+            _meta = candidate;\n+            _query = q;\n+        }\n+        \n+        public QueryExpressions[] getQueryExpressions() {\n+            return _query.getPreparedQuery().getQueryExpressions();\n+        }\n+        \n+        public Class[] getProjectionTypes(StoreQuery q) {\n+            return _query.getPreparedQuery().getProjectionTypes();\n+        }\n+\n+        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params, Range range) {\n+            PreparedSQLStoreQuery psq = (PreparedSQLStoreQuery) q;\n+            PreparedQueryImpl pq = psq.getPreparedQuery();\n+            JDBCStore store = psq.getStore();\n+            DBDictionary dict = store.getDBDictionary();\n+\n+            SQLBuffer buf = new SQLBuffer(dict).append(pq.getTargetQuery());\n+            Connection conn = store.getConnection();\n+            JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)q.getContext().getFetchConfiguration();\n+\n+            ResultObjectProvider rop;\n+            PreparedStatement stmnt = null;\n+            try {\n+                stmnt = !range.lrs ? buf.prepareStatement(conn) : buf.prepareStatement(conn, fetch, -1, -1);\n+\n+                int index = 0;\n+                for (int i = 0; i < params.length; i++) {\n+                    dict.setUnknown(stmnt, ++index, params[i], null);\n+                }\n+                dict.setTimeouts(stmnt, fetch, false);\n+\n+                ResultSet rs = stmnt.executeQuery();\n+                \n+                SelectImpl cachedSelect = pq.getSelect();\n+                Result res = cachedSelect.getEagerResult(conn, stmnt, rs, store, fetch, false, null);\n+                \n+                if (getQueryExpressions()[0].projections.length > 0) {\n+                    ExpContext ctx = new ExpContext(store, params, fetch);\n+                    QueryExpressionsState state = (QueryExpressionsState)getQueryExpressions()[0].state;\n+                    rop = new PreparedProjectionResultObjectProvider(cachedSelect, getQueryExpressions(), \n+                            new QueryExpressionsState[]{state}, ctx, res);\n+                } else if (q.getContext().getCandidateType() != null) {\n+                    rop = new PreparedResultObjectProvider(cachedSelect, \n+                        (ClassMapping) _meta, store, fetch, res);\n+                } else {\n+                    rop = new SQLProjectionResultObjectProvider(store, fetch,\n+                        (ResultSetResult)res, q.getContext().getResultType());\n+                }\n+            } catch (SQLException se) {\n+                if (stmnt != null)\n+                    try { stmnt.close(); } catch (SQLException se2) {}\n+                try { conn.close(); } catch (SQLException se2) {}\n+                throw SQLExceptions.getStore(se, dict);\n+            }\n+\n+            if (range.start != 0 || range.end != Long.MAX_VALUE)\n+                rop = new RangeResultObjectProvider(rop, range.start,range.end);\n+            return rop;\n+        }\n+        \n+        /**\n+         * Convert given userParams to an array whose ordering matches as \n+         * per expected during executeXXX() methods.\n+         * The given userParams is already re-parameterized, so this method have\n+         * to merely copy the given Map values.\n+         * \n+         * @see PreparedQueryImpl#reparametrize(Map, org.apache.openjpa.kernel.Broker)\n+         */\n+        public Object[] toParameterArray(StoreQuery q, Map userParams) {\n+            Object[] array = new Object[userParams.size()];\n+            for (Object key : userParams.keySet()) {\n+                int idx = ((Integer)key).intValue();\n+                array[idx] = userParams.get(key);\n+            }\n+            return array;\n+        }\n+    }\n+}"},{"sha":"662625fbf63314faf377133c124d480d4714dd93","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":150,"deletions":26,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -20,18 +20,27 @@\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.LinkedList;\n+import java.util.List;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n@@ -50,6 +59,7 @@\n     protected final JDBCStore _store;\n     protected final Connection _conn;\n     protected final DBDictionary _dict;\n+    protected transient Log _log = null;\n \n     // track exceptions\n     protected final Collection _exceptions = new LinkedList();\n@@ -61,6 +71,8 @@ public PreparedStatementManagerImpl(JDBCStore store, Connection conn) {\n         _store = store;\n         _dict = store.getDBDictionary();\n         _conn = conn;\n+        if (store.getConfiguration() != null)\n+            _log = store.getConfiguration().getLog(JDBCConfiguration.LOG_JDBC);\n     }\n \n     public Collection getExceptions() {\n@@ -69,7 +81,8 @@ public Collection getExceptions() {\n \n     public void flush(RowImpl row) {\n         try {\n-            flushInternal(row);\n+            if (!row.isFlushed())\n+                flushInternal(row);\n         } catch (SQLException se) {\n             _exceptions.add(SQLExceptions.getStore(se, _dict));\n         } catch (OpenJPAException ke) {\n@@ -81,44 +94,28 @@ public void flush(RowImpl row) {\n      * Flush the given row.\n      */\n     protected void flushInternal(RowImpl row) throws SQLException {\n-        // can't batch rows with auto-inc columns\n-        Column[] autoAssign = null;\n-        if (row.getAction() == Row.ACTION_INSERT)\n-            autoAssign = row.getTable().getAutoAssignedColumns();\n-\n         flushAndUpdate(row);\n-\n-        // set auto assign values\n-        if (autoAssign != null && autoAssign.length > 0\n-            && row.getPrimaryKey() != null) {\n-            OpenJPAStateManager sm = row.getPrimaryKey();\n-            ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-            Object val;\n-            for (int i = 0; i < autoAssign.length; i++) {\n-                val = _dict.getGeneratedKey(autoAssign[i], _conn);\n-                mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n-                    _store, autoAssign[i], val);\n-            }\n-            sm.setObjectId(\n-                ApplicationIds.create(sm.getPersistenceCapable(), mapping));\n-        }\n     }\n \n     /**\n      * Flush the given row immediately. \n      */\n     protected void flushAndUpdate(RowImpl row)\n-        throws SQLException {\n+    throws SQLException {\n+        Column[] autoAssign = getAutoAssignColumns(row);\n+        String[] autoAssignColNames = getAutoAssignColNames(autoAssign, row);\n+\n         // prepare statement\n         String sql = row.getSQL(_dict);\n-        PreparedStatement stmnt = prepareStatement(sql);\n+        PreparedStatement stmnt = prepareStatement(sql, autoAssignColNames);\n \n         // setup parameters and execute statement\n         if (stmnt != null)\n             row.flush(stmnt, _dict, _store);\n         try {\n             int count = executeUpdate(stmnt, sql, row);\n             if (count != 1) {\n+                logSQLWarnings(stmnt);\n                 Object failed = row.getFailedObject();\n                 if (failed != null)\n                     _exceptions.add(new OptimisticException(failed));\n@@ -127,6 +124,19 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                         \"update-failed-no-failed-obj\", String.valueOf(count),\n                         sql).getMessage());\n             }\n+            if (autoAssignColNames != null)\n+                populateAutoAssignCols(stmnt, autoAssign, autoAssignColNames,\n+                    row);\n+            else {\n+                StateManagerImpl sm = (StateManagerImpl)row.getPrimaryKey();\n+                if (sm != null) {\n+                    ClassMapping meta = (ClassMapping)sm.getMetaData();\n+                    if (hasGeneratedKey(meta)) {\n+                        sm.setObjectId(ApplicationIds.create(\n+                            sm.getPersistenceCapable(), meta));\n+                    }\n+                }\n+            }\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, row.getFailedObject(), _dict);\n         } finally {\n@@ -138,6 +148,91 @@ else if (row.getAction() == Row.ACTION_INSERT)\n             }\n         }\n     }\n+    \n+    private boolean hasGeneratedKey(ClassMapping meta) {\n+        FieldMapping[] pks = meta.getPrimaryKeyFieldMappings();\n+        for (int i = 0; i < pks.length; i++) {\n+            ClassMapping pkMeta = pks[i].getTypeMapping(); \n+            if (pkMeta != null) {\n+                return hasGeneratedKey(pkMeta);\n+            } else if (pks[i].getValueStrategy() == ValueStrategies.AUTOASSIGN)\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    /** \n+     * This method will only be called when there is auto assign columns.\n+     * If database supports getGeneratedKeys, the keys will be obtained\n+     * from the result set associated with the stmnt. If not, a separate \n+     * sql to select the key will be issued from DBDictionary. \n+     */\n+    protected List populateAutoAssignCols(PreparedStatement stmnt, \n+        Column[] autoAssign, String[] autoAssignColNames, RowImpl row) \n+        throws SQLException {\n+        List vals = null;\n+        if (_dict.supportsGetGeneratedKeys) {\n+            // set auto assign values to id col\n+            vals = getGeneratedKeys(stmnt, autoAssignColNames);\n+        }\n+        setObjectId(vals, autoAssign, autoAssignColNames, row);\n+        return vals;\n+    }\n+\n+    protected void setObjectId(List vals, Column[] autoAssign,\n+        String[] autoAssignColNames, RowImpl row) \n+        throws SQLException{\n+        OpenJPAStateManager sm = row.getPrimaryKey();\n+        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n+        Object val = null;\n+        for (int i = 0; i < autoAssign.length; i++) {\n+            if (_dict.supportsGetGeneratedKeys && vals != null && \n+                vals.size() > 0)\n+                val = vals.get(i);\n+            else\n+                val = _dict.getGeneratedKey(autoAssign[i], _conn);\n+            mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n+                _store, autoAssign[i], val);\n+        }\n+        sm.setObjectId(\n+            ApplicationIds.create(sm.getPersistenceCapable(), mapping));\n+    }\n+\n+    /**\n+     * This method will only be called when the database supports\n+     * getGeneratedKeys.\n+     */\n+    protected List getGeneratedKeys(PreparedStatement stmnt, \n+        String[] autoAssignColNames) \n+        throws SQLException {\n+        ResultSet rs = stmnt.getGeneratedKeys();\n+        List<Object> vals = new ArrayList<Object>();\n+        while (rs.next()) {\n+            for (int i = 0; i < autoAssignColNames.length; i++)\n+                vals.add(rs.getObject(i + 1));\n+        }\n+        rs.close();\n+        return vals;\n+    }\n+\n+    protected Column[] getAutoAssignColumns(RowImpl row) {\n+        Column[] autoAssign = null;\n+        if (row.getAction() == Row.ACTION_INSERT)\n+            autoAssign = row.getTable().getAutoAssignedColumns();\n+        return autoAssign;\n+    }\n+\n+    protected String[] getAutoAssignColNames(Column[] autoAssign, RowImpl row) {\n+        String[] autoAssignColNames = null;\n+        if (autoAssign != null && autoAssign.length > 0\n+            && row.getPrimaryKey() != null) {\n+            autoAssignColNames = new String[autoAssign.length];\n+            for (int i = 0; i < autoAssign.length; i++)\n+                autoAssignColNames[i] =\n+                    _dict.convertSchemaCase(autoAssign[i].getName());\n+        }\n+        return autoAssignColNames;\n+    }\n \n     public void flush() {\n     }\n@@ -150,13 +245,42 @@ protected int executeUpdate(PreparedStatement stmnt, String sql,\n         RowImpl row) throws SQLException {\n         return stmnt.executeUpdate();\n     }\n-        \n+\n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(String sql) \n+        throws SQLException {\n+        return prepareStatement(sql, null);\n+    }    \n     /**\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of preparing statement.\n      */\n-    protected PreparedStatement prepareStatement(String sql)\n+    protected PreparedStatement prepareStatement(String sql, \n+        String[] autoAssignColNames)\n         throws SQLException {\n-        return _conn.prepareStatement(sql);\n+        // pass in AutoAssignColumn names\n+        if (autoAssignColNames != null && _dict.supportsGetGeneratedKeys) \n+            return _conn.prepareStatement(sql, autoAssignColNames);\n+        else\n+            return _conn.prepareStatement(sql);\n+    }\n+    \n+    /**\n+     * Provided the JDBC log category is logging warnings, this method will \n+     * log any SQL warnings that result from the execution of a SQL statement. \n+     */\n+    protected void logSQLWarnings(PreparedStatement stmt) {\n+        if (stmt != null && _log != null && _log.isTraceEnabled()) {\n+            try {\n+                SQLWarning warn = stmt.getWarnings();\n+                while (warn != null) {\n+                    _log.trace(_loc.get(\"sql-warning\", warn.getMessage()));\n+                    warn = warn.getNextWarning();\n+                }\n+            } catch (SQLException e) {}\n+        }\n     }\n }"},{"sha":"12db989ba8a050d0e83c347ba24a5c5a9792f937","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":97,"deletions":85,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -27,9 +27,9 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -47,6 +47,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n \n /**\n@@ -74,66 +75,6 @@ public JDBCStore getStore() {\n         return _store;\n     }\n \n-    /**\n-     * Utility method to substitute '?num' for parameters in the given SQL\n-     * statement, and re-order the <code>params</code> array to match\n-     * the order of the specified parameters.\n-     */\n-    private static String substituteParams(String sql, List params)\n-        throws IOException {\n-        // if there's no \"?1\" positional parameter, then we don't need to\n-        // perform the parsing process\n-        if (sql.indexOf(\"?1\") == -1)\n-            return sql;\n-\n-        List paramOrder = new ArrayList();\n-        StreamTokenizer tok = new StreamTokenizer(new StringReader(sql));\n-        tok.resetSyntax();\n-        tok.quoteChar('\\'');\n-        tok.wordChars('0', '9');\n-        tok.wordChars('?', '?');\n-\n-        StringBuffer buf = new StringBuffer(sql.length());\n-        for (int ttype; (ttype = tok.nextToken()) != StreamTokenizer.TT_EOF;) {\n-            switch (ttype) {\n-                case StreamTokenizer.TT_WORD:\n-                    // a token is a positional parameter if it starts with\n-                    // a \"?\" and the rest of the token are all numbers\n-                    if (tok.sval.startsWith(\"?\") && tok.sval.length() > 1 &&\n-                        tok.sval.substring(1).indexOf(\"?\") == -1) {\n-                        buf.append(\"?\");\n-                        paramOrder.add(Integer.valueOf(tok.sval.substring(1)));\n-                    } else\n-                        buf.append(tok.sval);\n-                    break;\n-                case'\\'':\n-                    buf.append('\\'');\n-                    if (tok.sval != null) {\n-                        buf.append(tok.sval);\n-                        buf.append('\\'');\n-                    }\n-                    break;\n-                default:\n-                    buf.append((char) ttype);\n-            }\n-        }\n-\n-        // now go through the paramOrder list and re-order the params array\n-        List translated = new ArrayList();\n-        for (Iterator i = paramOrder.iterator(); i.hasNext();) {\n-            int index = ((Number) i.next()).intValue() - 1;\n-            if (index >= params.size())\n-                throw new UserException(_loc.get(\"sqlquery-missing-params\",\n-                    sql, String.valueOf(index), params));\n-            translated.add(params.get(index));\n-        }\n-\n-        // transfer the translated list into the original params list\n-        params.clear();\n-        params.addAll(translated);\n-        return buf.toString();\n-    }\n-\n     public boolean supportsParameterDeclarations() {\n         return false;\n     }\n@@ -203,17 +144,7 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n             DBDictionary dict = store.getDBDictionary();\n             String sql = q.getContext().getQueryString();\n \n-            List paramList;\n-            if (params.length > 0) {\n-                paramList = new ArrayList(Arrays.asList(params));\n-                try {\n-                    sql = substituteParams(sql, paramList);\n-                } catch (IOException ioe) {\n-                    throw new UserException(ioe);\n-                }\n-            } else\n-                paramList = Collections.EMPTY_LIST;\n-\n+            List paramList = new ArrayList(Arrays.asList(params));\n             SQLBuffer buf = new SQLBuffer(dict).append(sql);\n             \n             // we need to make sure we have an active store connection\n@@ -224,12 +155,17 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n \n             PreparedStatement stmnt = null;\n             try {\n-                stmnt = prepareCall(conn, buf);\n-\n+                if (_call)\n+                    stmnt = prepareCall(conn, buf);\n+                else\n+                    stmnt = prepareStatement(conn, buf);\n+                \n                 buf.setParameters(paramList);\n                 if (stmnt != null)\n                     buf.setParameters(stmnt);\n \n+                dict.setTimeouts(stmnt, fetch, true);\n+                \n                 int count = executeUpdate(store, conn, stmnt, buf);  \n               \n                 return Numbers.valueOf(count);\n@@ -258,17 +194,7 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n             DBDictionary dict = store.getDBDictionary();\n             String sql = q.getContext().getQueryString();\n \n-            List paramList;\n-            if (params.length > 0) {\n-                paramList = new ArrayList(Arrays.asList(params));\n-                try {\n-                    sql = substituteParams(sql, paramList);\n-                } catch (IOException ioe) {\n-                    throw new UserException(ioe);\n-                }\n-            } else\n-                paramList = Collections.EMPTY_LIST;\n-\n+            List paramList = new ArrayList(Arrays.asList(params));\n             SQLBuffer buf = new SQLBuffer(dict).append(sql);\n             Connection conn = store.getConnection();\n             JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)\n@@ -292,6 +218,7 @@ else if (!range.lrs)\n                     stmnt != null;)\n                     dict.setUnknown(stmnt, ++index, i.next(), null);\n \n+                dict.setTimeouts(stmnt, fetch, false);\n                 ResultSet rs = executeQuery(store, conn, stmnt, buf, paramList);\n                 ResultSetResult res = stmnt != null ? \n                     new ResultSetResult(conn, stmnt, rs, store) :\n@@ -391,5 +318,90 @@ protected ResultSet executeQuery(JDBCStore store, Connection conn,\n             throws SQLException {\n             return stmnt.executeQuery();\n         }\n+        \n+        /**\n+         * The given query is parsed to find the parameter tokens of the form\n+         * <code>?n</code> which is different than <code>?</code> tokens in\n+         * actual SQL parameter tokens. These <code>?n</code> style tokens\n+         * are replaced in the query string by <code>?</code> tokens. \n+         * \n+         * During the token parsing, the ordering of the tokens is recorded. \n+         * The given userParam must contain parameter keys as Integer and\n+         * the same Integers must appear in the tokens. \n+         * \n+         */\n+        public Object[] toParameterArray(StoreQuery q, Map userParams) {\n+            if (userParams == null || userParams.isEmpty())\n+                return StoreQuery.EMPTY_OBJECTS;\n+            String sql = q.getContext().getQueryString();\n+            List<Integer> paramOrder = new ArrayList<Integer>();\n+            try {\n+                sql = substituteParams(sql, paramOrder);\n+            } catch (IOException ex) {\n+                throw new UserException(ex.getLocalizedMessage());\n+            }\n+            \n+            Object[] result = new Object[paramOrder.size()];\n+            int idx = 0;\n+            for (Integer key : paramOrder) {\n+                if (!userParams.containsKey(key)) \n+                    throw new UserException(_loc.get(\"uparam-missing\", \n+                        key, sql, userParams));\n+                result[idx++] = userParams.get(key);\n+            }\n+            // modify original JPA-style SQL to proper SQL\n+            q.getContext().getQuery().setQuery(sql);\n+            return result;\n+        }\n+    }\n+    \n+    /**\n+     * Utility method to substitute '?num' for parameters in the given SQL\n+     * statement, and fill-in the order of the parameter tokens\n+     */\n+    public static String substituteParams(String sql, List<Integer> paramOrder)\n+            throws IOException {\n+            // if there's no \"?\" parameter marker, then we don't need to\n+            // perform the parsing process\n+            if (sql.indexOf(\"?\") == -1)\n+                return sql;\n+\n+            paramOrder.clear();\n+            StreamTokenizer tok = new StreamTokenizer(new StringReader(sql));\n+            tok.resetSyntax();\n+            tok.quoteChar('\\'');\n+            tok.wordChars('0', '9');\n+            tok.wordChars('?', '?');\n+\n+            StringBuffer buf = new StringBuffer(sql.length());\n+            for (int ttype; (ttype = tok.nextToken()) !=\n+                    StreamTokenizer.TT_EOF;) {\n+                switch (ttype) {\n+                    case StreamTokenizer.TT_WORD:\n+                        // a token is a positional parameter if it starts with\n+                        // a \"?\" and the rest of the token are all numbers\n+                        if (tok.sval.startsWith(\"?\")) {\n+                            buf.append(\"?\");\n+                            String pIndex = tok.sval.substring(1);\n+                            if (pIndex.length() > 0) {\n+                                paramOrder.add(Integer.valueOf(pIndex));\n+                            } else { // or nothing\n+                                paramOrder.add(paramOrder.size()+1);\n+                            }\n+                        } else\n+                            buf.append(tok.sval);\n+                        break;\n+                    case'\\'':\n+                        buf.append('\\'');\n+                        if (tok.sval != null) {\n+                            buf.append(tok.sval);\n+                            buf.append('\\'');\n+                        }\n+                        break;\n+                    default:\n+                        buf.append((char) ttype);\n+                }\n+            }\n+            return buf.toString();\n     }\n }"},{"sha":"38b5dea6ee114daa47ee508c33b13f7aa12a98fd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -39,7 +39,7 @@\n     private final SelectExecutor _sel;\n     private final JDBCStore _store;\n     private final JDBCFetchConfiguration _fetch;\n-    private Result _res = null;\n+    protected Result _res = null;\n     private int _size = -1;\n     private Boolean _ra = null;\n "},{"sha":"f472b8cfbc4ebe91f56279ee14eec8dcbac23840","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":49,"deletions":16,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -76,7 +76,8 @@\n     public static final String ACTION_ADD = \"add\";\n     public static final String ACTION_GET = \"get\";\n     public static final String ACTION_SET = \"set\";\n-\n+    public static final String DEFAULT_TABLE = \"OPENJPA_SEQUENCE_TABLE\";\n+    \n     private static final Localizer _loc = Localizer.forPackage\n         (TableJDBCSeq.class);\n \n@@ -87,10 +88,11 @@\n     private final HashMap<ClassMapping, Status> _stat =\n         new HashMap<ClassMapping, Status>();\n \n-    private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n+    private String _table = DEFAULT_TABLE;\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n     private String[] _uniqueColumnNames;\n+    private String _uniqueConstraintName;\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n@@ -356,7 +358,7 @@ protected Column addPrimaryKeyColumn(Table table) {\n     }\n \n     /**\n-     * Return the primary key value for the given class.\n+     * Return the primary key value for the sequence table for the given class.\n      */\n     protected Object getPrimaryKey(ClassMapping mapping) {\n         return Numbers.valueOf(0);\n@@ -366,8 +368,18 @@ protected Object getPrimaryKey(ClassMapping mapping) {\n      * Creates the object-level representation of the sequence table.\n      */\n     private void buildTable() {\n-        String tableName = Strings.getClassName(_table);\n-        String schemaName = Strings.getPackageName(_table);\n+        String tableName = null;\n+        String schemaName = \"\";\n+        if (StringUtils.contains(_table,'.')) {\n+            String[] tableParts = StringUtils.split(_table, '.');\n+            // TODO: do we need to check for length? Could we have xxx. or .xxx?\n+            schemaName = tableParts[0];\n+            tableName = tableParts[1];\n+        }\n+        else {\n+            tableName = _table;\n+        }\n+        \n         if (schemaName.length() == 0)\n             schemaName = Schemas.getNewTableSchema(_conf);\n \n@@ -386,13 +398,17 @@ private void buildTable() {\n         _seqColumn.setJavaType(JavaTypes.LONG);\n         \n         if (_uniqueColumnNames != null) {\n-    \t\tString uniqueName = dict.getValidUniqueName(\"UNQ\", table);\n+            String uniqueName = _uniqueConstraintName;\n+            if (StringUtils.isEmpty(uniqueName)) {\n+                uniqueName = dict.getValidUniqueName(\"UNQ\", table);\n+            }\n     \t\tUnique u = table.addUnique(uniqueName);\n     \t\tfor (String columnName : _uniqueColumnNames) {\n-    \t\t\tif (!table.containsColumn(columnName))\n-    \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\",\n-    \t\t\t\t\tcolumnName, table.getName(), table.getColumnNames()));\n-    \t\t\tColumn col = table.getColumn(columnName);\n+    \t\t\tif (!table.containsColumn(columnName, _conf.getDBDictionaryInstance()))\n+                    throw new UserException(_loc.get(\"unique-missing-column\",\n+                            columnName, table.getName(),\n+                            table.getColumnNames()));\n+    \t\t\tColumn col = table.getColumn(columnName, _conf.getDBDictionaryInstance());\n     \t\t\tu.addColumn(col);\n     \t\t}\n         }\n@@ -416,7 +432,8 @@ private void allocateSequence(JDBCStore store, ClassMapping mapping,\n                         runnable);\n                 }\n                 catch(NotSupportedException nse) { \n-                    SQLException sqlEx = new SQLException(nse.getLocalizedMessage());\n+                    SQLException sqlEx = new SQLException(\n+                            nse.getLocalizedMessage());\n                     sqlEx.initCause(nse);\n                     throw sqlEx;\n                 }\n@@ -467,6 +484,7 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n         PreparedStatement stmnt = null;\n         try {\n             stmnt = prepareStatement(conn, insert);\n+            dict.setTimeouts(stmnt, _conf, true);\n             executeUpdate(_conf, conn, stmnt, insert, RowImpl.ACTION_INSERT);\n         } finally {\n             if (stmnt != null)\n@@ -508,9 +526,11 @@ protected long getSequence(ClassMapping mapping, Connection conn)\n                 null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE,\n                 false, true);\n \n-        PreparedStatement stmnt = prepareStatement(conn, select);\n+        PreparedStatement stmnt = null;\n         ResultSet rs = null;\n         try {\n+            stmnt = prepareStatement(conn, select);\n+            dict.setTimeouts(stmnt, _conf, false);\n             rs = executeQuery(_conf, conn, stmnt, select);\n             return getSequence(rs, dict);\n         } finally {\n@@ -557,7 +577,8 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n \n                 // update the value\n                 upd = new SQLBuffer(dict);\n-                String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+                String tableName = resolveTableName(mapping,\n+                        _seqColumn.getTable());\n                 upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n                     appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n@@ -566,7 +587,9 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n                     appendValue(Numbers.valueOf(cur), _seqColumn);\n \n                 stmnt = prepareStatement(conn, upd);\n-                updates = executeUpdate(_conf, conn, stmnt, upd, RowImpl.ACTION_UPDATE);\n+                dict.setTimeouts(stmnt, _conf, true);\n+                updates = executeUpdate(_conf, conn, stmnt, upd,\n+                        RowImpl.ACTION_UPDATE);\n             } finally {\n                 if (rs != null) \n                     try { rs.close(); } catch (SQLException se) {}\n@@ -761,7 +784,8 @@ protected PreparedStatement prepareStatement(Connection conn, SQLBuffer buf)\n      * implementation of executing update.\n      */\n     protected int executeUpdate(JDBCConfiguration conf, Connection conn,  \n-        PreparedStatement stmnt, SQLBuffer buf, int opcode) throws SQLException {\n+        PreparedStatement stmnt, SQLBuffer buf, int opcode) throws SQLException\n+    {\n         return stmnt.executeUpdate();\n     }\n     \n@@ -778,12 +802,21 @@ protected ResultSet executeQuery(JDBCConfiguration conf, Connection conn,\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of getting sequence from the result set.\n      */\n-    protected long getSequence(ResultSet rs, DBDictionary dict) throws SQLException {\n+    protected long getSequence(ResultSet rs, DBDictionary dict)\n+            throws SQLException {\n         if (rs == null || !rs.next())\n             return -1;\n         return dict.getLong(rs, 1);\n     }\n \n+    public void setUniqueConstraintName(String _uniqueConstraintName) {\n+        this._uniqueConstraintName = _uniqueConstraintName;\n+    }\n+\n+    public String getUniqueConstraintName() {\n+        return _uniqueConstraintName;\n+    }\n+\n     /**\n      * AllocateSequenceRunnable is a runnable wrapper that will inserts the\n      * initial sequence value into the database."},{"sha":"fcbc2f3f0f58f46b72780c41fb3562e4d8b854fb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -21,6 +21,8 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Path;\n+import org.apache.openjpa.kernel.exps.Value;\n \n /**\n  * Abstract value for easy extension.\n@@ -32,6 +34,7 @@\n \n     protected static final String TRUE = \"1 = 1\";\n     protected static final String FALSE = \"1 <> 1\";\n+    private String _alias = null;\n \n     public boolean isVariable() {\n         return false;\n@@ -72,6 +75,16 @@ public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state,\n         sql.append(\" IS NOT \").appendValue(null);\n     }\n \n+    public void appendIndex(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql) {\n+        sql.append(\"1\");\n+    }\n+\n+    public void appendType(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql) {\n+        sql.append(\"1\");\n+    }\n+\n     public void appendSize(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql) {\n         sql.append(\"1\");\n@@ -85,5 +98,25 @@ public void acceptVisit(ExpressionVisitor visitor) {\n     public int getId() {\n         return Val.VAL;\n     }\n+\n+    public String getAlias() {\n+        return _alias;\n+    }\n+\n+    public void setAlias(String alias) {\n+        _alias = alias;\n+    }\n+\n+    public Value getSelectAs() {\n+        return _alias != null ? this : null;\n+    }\n+\n+    public Path getPath() {\n+        return null;\n+    }\n+    \n+    public String getName() {\n+        return null;\n+    }    \n }\n "},{"sha":"717814d628352345c99c29af7b1078c8100fdb8a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -114,7 +114,8 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false,\n+            getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"3902821386ee8041c8f342895a62d4e981d70308","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"modified","additions":25,"deletions":12,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -43,18 +47,21 @@\n      * Constructor. Supply values being combined.\n      */\n     public Args(Val val1, Val val2) {\n-        int len1 = (val1 instanceof Args) ? ((Args) val1)._args.length : 1;\n-        int len2 = (val2 instanceof Args) ? ((Args) val2)._args.length : 1;\n-\n-        _args = new Val[len1 + len2];\n-        if (val1 instanceof Args)\n-            System.arraycopy(((Args) val1)._args, 0, _args, 0, len1);\n-        else\n-            _args[0] = val1;\n-        if (val2 instanceof Args)\n-            System.arraycopy(((Args) val2)._args, 0, _args, len1, len2);\n-        else\n-            _args[len1] = val2;\n+        this(new Val[]{val1, val2});\n+    }\n+    \n+    public Args (Val... values) {\n+        List<Val> list = new ArrayList<Val>();\n+        if (values != null) {\n+            for (Val v : values) {\n+                if (v instanceof Args) {\n+                    list.addAll(Arrays.asList(((Args)v)._args));\n+                } else {\n+                    list.add(v);\n+                }\n+            }\n+        }\n+        _args = list.toArray(new Val[list.size()]);\n     }\n \n     /**\n@@ -166,6 +173,12 @@ public int length(Select sel, ExpContext ctx, ExpState state) {\n \n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n+        ArgsExpState astate = (ArgsExpState) state;\n+        for (int i = 0; i < _args.length; i++) {\n+            _args[i].appendTo(sel, ctx, astate.states[i], sql, index);\n+            if (i < _args.length-1)\n+                sql.append(\", \");\n+        }\n     }\n \n     public void appendIsEmpty(Select sel, ExpContext ctx, ExpState state, "},{"sha":"fe66cdf8153ed735b6a94b0e024ceb7276633d3a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CoalesceExpression.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CoalesceExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CoalesceExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CoalesceExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.Raw;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Coalesce expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class CoalesceExpression\n+    extends AbstractVal {\n+\n+    private final Val[] _vals;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+    private Value other = null;\n+    private ExpState otherState = null;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public CoalesceExpression(Val[] vals) {\n+        _vals = vals;\n+    }\n+\n+    public Val[] getVal() {\n+        return _vals;\n+    }\n+\n+    public Class getType() {\n+        if (_cast != null)\n+            return _cast;\n+        Class type = _vals[0].getType();\n+        for (int i = 1; i < _vals.length; i++)\n+            type = Filters.promote(type, _vals[i].getType());\n+        if (type == Raw.class)\n+            return String.class;\n+        return type;\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        ExpState[] states = new ExpState[_vals.length];\n+        Joins joins = null;\n+        for (int i = 0; i < _vals.length; i++) {\n+            states[i] = _vals[i].initialize(sel, ctx, flags);\n+            if (joins == null)\n+                joins = states[i].joins;\n+            else\n+                joins = sel.and(joins, states[i].joins);\n+        }\n+        return new CoalesceExpState(joins, states);\n+    }\n+\n+    private static class CoalesceExpState\n+        extends ExpState {\n+        \n+        public ExpState[] states;\n+        \n+        public CoalesceExpState(Joins joins, ExpState[] states) {\n+            super(joins);\n+            this.states = states;\n+        }\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer buf, int index) {\n+        CoalesceExpState cstate = (CoalesceExpState) state;\n+        \n+        buf.append(\" COALESCE(\"); // MySQL does not like space before bracket\n+\n+        for (int i = 0; i < _vals.length; i++) {\n+            if (i > 0)\n+                buf.append(\",\");\n+            _vals[i].appendTo(sel, ctx, cstate.states[i], buf, 0);\n+        }\n+\n+        buf.append(\")\");\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n+        boolean pks) {\n+        CoalesceExpState cstate = (CoalesceExpState) state;\n+\n+        for (int i = 0; i < _vals.length; i++)\n+            _vals[i].selectColumns(sel, ctx, cstate.states[i], pks);\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        for (int i = 0; i < _vals.length; i++)\n+            _vals[i].acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n+\n+    public int getId() {\n+        return Val.COALESCE_VAL;\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n+        Val other, ExpState otherState) {\n+        CoalesceExpState cstate = (CoalesceExpState) state;\n+        for (int i = 0; i < _vals.length; i++)   \n+            _vals[i].calculateValue(sel, ctx, cstate.states[i], other, otherState);\n+    }\n+\n+    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n+        sel.groupBy(newSQLBuffer(sel, ctx, state));\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        return 1;\n+    }\n+\n+    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n+        calculateValue(sel, ctx, state, (Val)other, otherState);\n+        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n+        appendTo(sel, ctx, state, buf, 0);\n+        return buf;\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        return Filters.convert(res.getObject(this,\n+            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+    }\n+\n+    public void orderBy(Select sel, ExpContext ctx, ExpState state,\n+        boolean asc) {\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, boolean pks){\n+        sel.select(newSQLBuffer(sel, ctx, state), this);\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _cast = type;        \n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;\n+    }\n+    \n+    public void setOtherPath(Value other) {\n+        this.other = other;\n+    }\n+    \n+    public Value getOtherPath() {\n+        return other;\n+    }\n+    \n+    public void setOtherState(ExpState otherState) {\n+        this.otherState = otherState;\n+    }\n+    \n+    public ExpState getOtherState() {\n+        return otherState;\n+    }\n+}\n+"},{"sha":"dbe80552d175cf3d56fb63edfa52422328eaaab1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java","status":"added","additions":192,"deletions":0,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.Parameter;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ImplHelper;\n+\n+/**\n+ * A collection-valued input parameter in an in-expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class CollectionParam\n+    extends Const\n+    implements Parameter {\n+    private static final Localizer _loc = Localizer.forPackage(\n+        CollectionParam.class);\n+\n+    private final Object _key;\n+    private Class _type = null;\n+    private int _idx = -1;\n+    private boolean _container = false;\n+\n+    /**\n+     * Constructor. Supply parameter name and type.\n+     */\n+    public CollectionParam(Object key, Class type) {\n+        _key = key;\n+        setImplicitType(type);\n+    }\n+\n+    public Object getParameterKey() {\n+        return _key;\n+    }\n+\n+    public Class getType() {\n+        return _type;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _type = type;\n+        _container = (getMetaData() == null || !ImplHelper.isManagedType(\n+            getMetaData().getRepository().getConfiguration(), type))\n+            && (Collection.class.isAssignableFrom(type)\n+            || Map.class.isAssignableFrom(type));\n+    }\n+\n+    public int getIndex() {\n+        return _idx;\n+    }\n+\n+    public void setIndex(int idx) {\n+        _idx = idx;\n+    }\n+\n+    public Object getValue(Object[] params) {\n+        return Filters.convert(params[_idx], getType());\n+    }\n+\n+    public Object getValue(ExpContext ctx, ExpState state) {\n+        ParamExpState pstate = (ParamExpState) state;\n+        if (pstate.discValue[0] != null)\n+            return Arrays.asList(pstate.discValue);\n+        else\n+            return getValue(ctx.params);\n+    }\n+\n+    public Object getSQLValue(Select sel, ExpContext ctx, ExpState state) {\n+        return ((ParamExpState) state).sqlValue;\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        return new ParamExpState(ctx.params[_idx]);\n+    }\n+\n+    /**\n+     * Expression state.\n+     */\n+    public static class ParamExpState\n+        extends ConstExpState {\n+\n+        public int size = 0;\n+        public Object[] sqlValue = null;\n+        public int[] otherLength;\n+        public ClassMapping[] mapping = null;\n+        public Discriminator[] disc = null;\n+        public Object discValue[] = null;\n+        \n+        ParamExpState(Object params) {\n+            if (params instanceof Collection)\n+                size = ((Collection) params).size();\n+            sqlValue = new Object[size];\n+            otherLength = new int[size];\n+            mapping = new ClassMapping[size];\n+            disc = new Discriminator[size];\n+            discValue = new Object[size];\n+            for (int i = 0; i < size; i++) {\n+                sqlValue[i] = null;\n+                otherLength[i] = 1;\n+                mapping[i] = null;\n+                disc[i] = null;\n+                discValue[i] = null;\n+            }\n+        }\n+    } \n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n+        Val other, ExpState otherState) {\n+        super.calculateValue(sel, ctx, state, other, otherState);\n+        ParamExpState pstate = (ParamExpState) state;\n+        Object value = getValue(ctx.params);\n+\n+        if (!(value instanceof Collection))\n+            throw new IllegalArgumentException(_loc.get(\n+                \"not-collection-parm\", _key).toString());\n+\n+        if (((Collection) value).isEmpty())\n+            throw new IllegalArgumentException(_loc.get(\n+                \"empty-collection-parm\", _key).toString());\n+\n+        Iterator itr = ((Collection) value).iterator();\n+        for (int i = 0; i < pstate.size && itr.hasNext(); i++) {\n+            Object val = itr.next();\n+            if (other != null && !_container) {\n+                pstate.sqlValue[i] = other.toDataStoreValue(sel, ctx,\n+                    otherState, val);\n+                pstate.otherLength[i] = other.length(sel, ctx, otherState);\n+                if (other instanceof Type) {\n+                    pstate.mapping[i] = ctx.store.getConfiguration().\n+                    getMappingRepositoryInstance().getMapping((Class) val,\n+                        ctx.store.getContext().getClassLoader(), true);\n+                    pstate.disc[i] = pstate.mapping[i].getDiscriminator();\n+                    pstate.discValue[i] = pstate.disc != null ?\n+                        pstate.disc[i].getValue() : null;\n+                }\n+            } else if (ImplHelper.isManageable(val)) {\n+                ClassMapping mapping = ctx.store.getConfiguration().\n+                getMappingRepositoryInstance().getMapping(val.getClass(),\n+                    ctx.store.getContext().getClassLoader(), true);\n+                pstate.sqlValue[i] = mapping.toDataStoreValue(val,\n+                    mapping.getPrimaryKeyColumns(), ctx.store);\n+                pstate.otherLength[i] = mapping.getPrimaryKeyColumns().length;\n+            } else\n+                pstate.sqlValue[i] = val;\n+        }\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        ParamExpState pstate = (ParamExpState) state;\n+        for (int i = 0; i < pstate.size; i++) {\n+            if (pstate.otherLength[i] > 1)\n+                sql.appendValue(((Object[]) pstate.sqlValue[i])[index], \n+                        pstate.getColumn(index), this);\n+            else if (pstate.cols != null)\n+                sql.appendValue(pstate.sqlValue[i], pstate.getColumn(index),\n+                        this);\n+            else if (pstate.discValue[i] != null)\n+                sql.appendValue(pstate.discValue[i]);\n+            else\n+                sql.appendValue(pstate.sqlValue[i], pstate.getColumn(index),\n+                        this);\n+        }\n+    }\n+}"},{"sha":"e587a66660e13943fa0a88bac5d61f9e861e08ed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -47,6 +47,10 @@\n     public CompareEqualExpression(Val val1, Val val2) {\n         _val1 = val1;\n         _val2 = val2;\n+        if (_val1 instanceof Lit && _val2 instanceof Lit) {\n+            ((Lit)_val1).setRaw(true);\n+            ((Lit)_val2).setRaw(true);\n+        }\n     }\n \n     public Val getValue1() {\n@@ -73,6 +77,12 @@ public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n             if (direct && ((Const) _val2).getValue(ctx, s2) == null)\n                 flags1 = Val.NULL_CMP;\n         }\n+\n+        if (_val1 instanceof PCPath && _val2 instanceof PCPath &&\n+            (((PCPath)_val1).isSubqueryPath() || ((PCPath)_val2).isSubqueryPath())) {\n+            flags1 = flags1 | Val.CMP_EQUAL;\n+            flags2 = flags2 | Val.CMP_EQUAL;\n+        }\n         \n         if (s1 == null)\n             s1 = _val1.initialize(sel, ctx, flags1);"},{"sha":"305585f19fdddf90f2b6aa66e622b44c02378856","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -75,7 +75,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         ctx.store.getDBDictionary().comparison(buf, _op,\n             new FilterValueImpl(sel, ctx, bstate.state1, _val1),\n             new FilterValueImpl(sel, ctx, bstate.state2, _val2));\n-        sel.append(buf, state.joins);\n+        if (sel != null)\n+            sel.append(buf, state.joins);\n     }\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, "},{"sha":"77be847fc3000df26c392f03701f463b6d3c50fc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -97,7 +97,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"e2fc0de47396c9f747debe9038139890e6c32105","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -130,7 +130,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     public Object load(ExpContext ctx, ExpState state, Result res)"},{"sha":"174459464a29dd591837480d9e20284a02876e7d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -217,4 +218,18 @@ public void get(XMLMetaData meta, String name) {\n     public XMLMetaData getXmlMapping() {\n         return null;\n     }\n+\n+    public void setSchemaAlias(String schemaAlias) {\n+    }\n+    \n+    public String getSchemaAlias() {\n+        return null;\n+    }\n+    \n+    public void setSubqueryContext(Context conext, String correlationVar) {\n+    }\n+\n+    public String getCorrelationVar() {\n+        return null;\n+    }\n }"},{"sha":"af2189a719e594c7d64983286d0b7974e928b170","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -42,7 +42,7 @@ public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n         Val val1 = getValue1();\n         if (contains != null && val1 instanceof PCPath) {\n             PCPath sql = (PCPath) val1;\n-            String path = sql.getPath();\n+            String path = sql.getPCPathString();\n \n             // update the count for this path\n             Integer count = (Integer) contains.get(path);"},{"sha":"9a0c6172b70d5a4ecbed3def88cf9b56744539d5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.Arguments;\n+\n+/**\n+ * A unary operator that executes a datastore specific function with zero or more arguments.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@SuppressWarnings(\"serial\")\n+public class DatastoreFunction extends UnaryOp {\n+    private final String _functionName;\n+    \n+    public DatastoreFunction(String name, Class<?> resultType, Arguments args) {\n+        super((Val)args);\n+        _functionName = name;\n+        setImplicitType(resultType);\n+    }\n+\n+    @Override\n+    protected String getOperator() {\n+        return _functionName;\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        Args args = (Args) getValue();\n+        if (!ctx.store.getDBDictionary().requiresCastForMathFunctions || args.getValues().length == 1)\n+            super.appendTo(sel, ctx, state, sql, index);\n+        else {\n+            sql.append(getOperator());\n+            sql.append(\"(\");            \n+            args.appendTo(sel, ctx, state, sql, 0);\n+            Val[] vals = args.getVals();\n+            for (int i = 1; i < vals.length; i++) {\n+                sql.addCastForParam(getOperator(), vals[i]);\n+            }\n+            sql.append(\")\");\n+        }            \n+    }\n+}"},{"sha":"4f66cd355e30eb861da835e36711f4d1d51fc54f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -203,5 +203,9 @@ public PCPath getXPath() {\n         public XMLMetaData getXmlMapping() {\n             return null;\n         }\n+\n+        public boolean requiresCast() {\n+            return false;\n+        }\n     }\n }"},{"sha":"c03c0166dfa018f790cbcb57a3cebd84c0cbd36e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -62,7 +62,7 @@ else if (val1Null || val2Null) {\n                     new FilterValueImpl(sel, ctx, bstate.state1, val1),\n                     new FilterValueImpl(sel, ctx, bstate.state2, val2));\n             } else {\n-                int len = java.lang.Math.max(val1.length(sel, ctx, \n+                int len = java.lang.Math.min(val1.length(sel, ctx, \n                     bstate.state1), val2.length(sel, ctx, bstate.state2));\n                 for (int i = 0; i < len; i++) {\n                     if (i > 0)"},{"sha":"85780e0090110c5ff553d0a16b9720de418ecda0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -149,7 +149,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"daf2c33acd2205f82b4cfac5ccbf1fef1814fcc7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -116,4 +116,10 @@\n      * else return null;\n      */\n     public XMLMetaData getXmlMapping();\n+\n+    /**\n+     * return true if CAST is required for this filter value\n+     * else return false.\n+     */\n+    public boolean requiresCast();\n }"},{"sha":"6ca988d4dc0464f2fa952dcff45ad13e7c3624ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -110,4 +110,8 @@ public PCPath getXPath() {\n     public XMLMetaData getXmlMapping() {\n         return (getXPath() == null) ? null : getXPath().getXmlMapping();\n     }\n+\n+    public boolean requiresCast() {\n+        return !(_val instanceof All || _val instanceof Any || _val instanceof PCPath);\n+    }\n }"},{"sha":"0f4c61a6a08bb119dc9db3db63eb5091ef41841a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GeneralCaseExpression.java","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GeneralCaseExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GeneralCaseExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GeneralCaseExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.Raw;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * General case expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class GeneralCaseExpression\n+    extends AbstractVal {\n+\n+    private final Exp[] _exp;\n+    private final Val _val;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+    private Value other = null;\n+    private ExpState otherState = null;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public GeneralCaseExpression(Exp[] exp, Val val) {\n+        _exp = exp;\n+        _val = val;\n+    }\n+\n+    public Exp[] getExp() {\n+        return _exp;\n+    }\n+\n+    public Val getVal() {\n+        return _val;\n+    }\n+\n+    public Class getType() {\n+        if (_cast != null)\n+            return _cast;\n+        Class type = _val.getType();\n+        for (int i = 0; i < _exp.length; i++)\n+            type = Filters.promote(type,\n+                ((WhenCondition) _exp[i]).getVal().getType());\n+        if (type == Raw.class)\n+            return String.class;\n+        return type;\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        ExpState[] states = new ExpState[_exp.length+1];\n+        Joins joins = null;\n+        int i = 0;\n+        for (; i < _exp.length; i++) {\n+            states[i] = _exp[i].initialize(sel, ctx, null);\n+            if (joins == null)\n+                joins = states[i].joins;\n+            else\n+                joins = sel.and(joins, states[i].joins);\n+        }\n+        states[i] = _val.initialize(sel, ctx, 0);\n+        if (joins == null)\n+            joins = states[i].joins;\n+        else\n+            joins = sel.and(joins, states[i].joins);\n+        return new GeneralCaseExpState(joins, states);\n+    }\n+\n+    private static class GeneralCaseExpState\n+        extends ExpState {\n+        \n+        public ExpState[] states;\n+        \n+        public GeneralCaseExpState(Joins joins, ExpState[] states) {\n+            super(joins);\n+            this.states = states;\n+        }\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer buf, int index) {\n+        GeneralCaseExpState cstate = (GeneralCaseExpState) state;\n+\n+        buf.append(\" CASE \");\n+        int i = 0;\n+        for (; i < _exp.length; i++)\n+            _exp[i].appendTo(sel, ctx, cstate.states[i], buf);\n+\n+        buf.append(\" ELSE \");\n+        _val.appendTo(sel, ctx, cstate.states[i], buf, 0);\n+\n+        buf.append(\" END \");\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n+        boolean pks) {\n+        GeneralCaseExpState cstate = (GeneralCaseExpState) state;\n+        int i = 0;\n+        for (; i < _exp.length; i++)\n+            _exp[i].selectColumns(sel, ctx, cstate.states[i], pks);\n+        _val.selectColumns(sel, ctx, cstate.states[i], pks);\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        for (int i = 0; i < _exp.length; i++)\n+            _exp[i].acceptVisit(visitor);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n+\n+    public int getId() {\n+        return Val.SIMPLECASE_VAL;\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n+        Val other, ExpState otherState) {\n+        GeneralCaseExpState gstate = (GeneralCaseExpState) state;\n+        for (int i = 0; i < _exp.length; i++) {   \n+            BinaryOpExpState bstate = (BinaryOpExpState) gstate.states[i];\n+            ((WhenCondition) _exp[i]).getVal().calculateValue(sel, ctx,\n+                bstate.state2, other, otherState);\n+        }\n+        _val.calculateValue(sel, ctx, gstate.states[_exp.length], other, \n+            otherState);\n+    }\n+\n+    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n+        sel.groupBy(newSQLBuffer(sel, ctx, state));\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        return 1;\n+    }\n+\n+    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n+        calculateValue(sel, ctx, state, (Val)other, otherState);\n+        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n+        appendTo(sel, ctx, state, buf, 0);\n+        return buf;\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        return Filters.convert(res.getObject(this,\n+            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+    }\n+\n+    public void orderBy(Select sel, ExpContext ctx, ExpState state,\n+        boolean asc) {\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, boolean pks){\n+        sel.select(newSQLBuffer(sel, ctx, state), this);\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _cast = type;        \n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;\n+    }\n+    public void setOtherPath(Value other) {\n+        this.other = other;\n+    }\n+    \n+    public Value getOtherPath() {\n+        return other;\n+    }\n+    \n+    public void setOtherState(ExpState otherState) {\n+        this.otherState = otherState;\n+    }\n+    \n+    public ExpState getOtherState() {\n+        return otherState;\n+    }\n+}\n+"},{"sha":"c41f11396293bce9260610d770919a6726ffc3fc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -185,10 +185,10 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         for (int i = 0; i < values.length; i++) {\n             if (i > 0)\n                 sql.append(\", \");\n-            sql.append(values[i].getFullName());\n+            sql.append(values[i].getTable()).append(\".\").append(values[i]);\n         }\n-        sql.append(\" FROM \").append(values[0].getTable().getFullName()).\n-            append(\" WHERE \");\n+        sql.append(\" FROM \").append(values[0].getTable());\n+        sql.append(\" WHERE \");\n \n         // add in the joins\n         ContainerFieldStrategy.appendUnaliasedJoin(sql, sel, null, \n@@ -200,7 +200,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         Object[] vals = (cols.length == 1) ? null : (Object[]) key;\n \n         for (int i = 0; i < cols.length; i++) {\n-            sql.append(cols[i].getFullName());\n+            sql.append(cols[i].getTable()).append(\".\").append(cols[i]);\n             if (vals == null)\n                 sql.append((key == null) ? \" IS \" : \" = \").\n                     appendValue(key, cols[i]);"},{"sha":"d99e518b8081569ef10c89e69c35145b725c5b15","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Parameter;\n \n /**\n  * Tests whether a value is IN a collection.\n@@ -91,7 +92,11 @@ public InExpState(Joins joins, ExpState constantState,\n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer buf) {\n         InExpState istate = (InExpState) state; \n-        _const.calculateValue(sel, ctx, istate.constantState, null, null);\n+        if (_val instanceof Type)\n+            _const.calculateValue(sel, ctx, istate.constantState, _val,\n+                istate.valueState);\n+        else\n+            _const.calculateValue(sel, ctx, istate.constantState, null, null);\n         _val.calculateValue(sel, ctx, istate.valueState, null, null);\n \n         List list = null;\n@@ -150,7 +155,8 @@ private void inContains(Select sel, ExpContext ctx, ExpState state,\n \n         Column col = (cols != null && cols.length == 1) ? cols[0] : null;\n         for (Iterator itr = coll.iterator(); itr.hasNext();) {\n-            buf.appendValue(itr.next(), col);\n+                buf.appendValue(itr.next(), col, _const instanceof Parameter \n+                    ? (Parameter)_const : null);\n             if (itr.hasNext())\n                 buf.append(\", \");\n         }"},{"sha":"ddea63eb17fb919d95e22fd36436a2b0f81b0781","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Index.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Index.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Index.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Index.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.util.InternalException;\n+\n+/**\n+ * Index.\n+ *\n+ * @author Catalina Wei\n+ */\n+class Index\n+    extends UnaryOp {\n+\n+    public Index(Val val) {\n+        super(val);\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        // initialize the value with a null test\n+        return initializeValue(sel, ctx, NULL_CMP);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        getValue().calculateValue(sel, ctx, state, null, null);\n+        getValue().appendIndex(sel, ctx, state, sql);\n+        sel.append(sql, state.joins);\n+    }\n+\n+    protected Class getType(Class c) {\n+        return long.class;\n+    }\n+\n+    protected String getOperator() {\n+        // since we override appendTo(), this method should never be called\n+        throw new InternalException();\n+    }\n+}"},{"sha":"5f0a5fd16e767b3057ff3b3de39a595c3f21cbd4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -98,7 +98,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"9ff42702d7ab9f23bdab8cf05c96d612f9467428","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":123,"deletions":5,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.Raw;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Arguments;\n import org.apache.openjpa.kernel.exps.Expression;\n@@ -166,7 +167,8 @@ public Expression or(Expression exp1, Expression exp2) {\n     }\n \n     public Expression not(Expression exp) {\n-        if (HasContainsExpressionVisitor.hasContains(exp))\n+        if (!(exp instanceof IsNotEmptyExpression) &&\n+            HasContainsExpressionVisitor.hasContains(exp))\n             return new NotContainsExpression((Exp) exp);\n         return new NotExpression((Exp) exp);\n     }\n@@ -218,9 +220,12 @@ public Expression matches(Value v1, Value v2,\n         String single, String multi, String esc) {\n         if (!(v2 instanceof Const))\n             throw new UserException(_loc.get(\"const-only\", \"matches\"));\n-        return new MatchesExpression((Val) v1, (Const) v2, single, multi,\n-            esc != null ? esc : _type.getMappingRepository().\n-                getDBDictionary().searchStringEscape);\n+        if (esc == null && _type.getMappingRepository().\n+                getDBDictionary().requiresSearchStringEscapeForLike == true) { \n+            esc = _type.getMappingRepository().\n+                getDBDictionary().searchStringEscape;\n+        }        \n+        return new MatchesExpression((Val) v1, (Const) v2, single, multi, esc);\n     }\n \n     public Subquery newSubquery(ClassMetaData candidate, boolean subs,\n@@ -246,6 +251,10 @@ public Literal newLiteral(Object val, int ptype) {\n         return new Lit(val, ptype);\n     }\n \n+    public Literal newTypeLiteral(Object val, int ptype) {\n+        return new TypeLit(val, ptype);\n+    }\n+\n     public Value getThis() {\n         return new PCPath(_type);\n     }\n@@ -266,10 +275,14 @@ public Value getCurrentTimestamp() {\n         return CURRENT_TIMESTAMP;\n     }\n \n-    public Parameter newParameter(String name, Class type) {\n+    public Parameter newParameter(Object name, Class type) {\n         return new Param(name, type);\n     }\n \n+    public Parameter newCollectionValuedParameter(Object key, Class type) {\n+        return new CollectionParam(key, type);\n+    }\n+\n     public Value newExtension(FilterListener listener, Value target,\n         Value arg) {\n         return new Extension((JDBCFilterListener) listener,\n@@ -284,6 +297,17 @@ public Value newAggregate(AggregateListener listener, Value arg) {\n     public Arguments newArgumentList(Value v1, Value v2) {\n         return new Args((Val) v1, (Val) v2);\n     }\n+    \n+    public Arguments newArgumentList(Value... vs) {\n+        if (vs == null)\n+           return new Args(null);\n+        Val[] vals = new Val[vs.length];\n+        int i = 0;\n+        for (Value v : vs) {\n+            vals[i++] = (Val)v;\n+        }\n+        return new Args(vals);\n+    }\n \n     public Value newUnboundVariable(String name, Class type) {\n         return new Variable(name, type);\n@@ -390,6 +414,28 @@ public Value size(Value val) {\n         return new Size((Val) val);\n     }\n \n+    public Value index(Value val) {\n+        ((PCPath) val).verifyIndexedField();\n+        return new Index((Val) val);\n+    }\n+\n+    public Value type(Value val) {\n+        return new Type((Val) val);\n+    }\n+\n+    public Value mapEntry(Value key, Value val) {\n+        return new MapEntry((Val) key, (Val) val);\n+    }\n+\n+    public Value mapKey(Value key, Value val) {\n+        return new MapKey((Val) key);\n+    }\n+\n+    public Value getKey(Value val) {\n+        ((PCPath) val).getKey();\n+        return val;\n+    }\n+\n     public Value getObjectId(Value val) {\n         if (val instanceof Const)\n             return new ConstGetObjectId((Const) val);\n@@ -400,4 +446,76 @@ public Value getMapValue(Value map, Value arg) {\n         return new GetMapValue((Val) map, (Val) arg, \n             \"gmv\" + _getMapValueAlias++);\n     }\n+\n+    private Value getLiteralRawString(Value val) {\n+        if (val instanceof Lit) {\n+            Lit lit = (Lit) val;\n+            StringBuffer value = new StringBuffer();\n+            int pType = lit.getParseType(); \n+            if (pType == Literal.TYPE_SQ_STRING ||\n+                pType == Literal.TYPE_STRING)\n+                value.append(\"'\").append(lit.getValue().toString()).append(\"'\");\n+            else if (pType == Literal.TYPE_BOOLEAN) {\n+                if ((Boolean) lit.getValue())\n+                    value.append(\"1\");\n+                else\n+                    value.append(\"0\");\n+            } else if (pType == Literal.TYPE_ENUM) {\n+                lit.setRaw(true);\n+                return val;\n+            } else\n+                value.append(lit.getValue().toString());\n+            lit.setValue(new Raw(value.toString()));\n+            return lit;\n+        }\n+        return val;\n+    }\n+\n+    public Value simpleCaseExpression(Value caseOperand, Expression[] exp,\n+            Value val1) {\n+        Exp[] exps = new Exp[exp.length];\n+        for (int i = 0; i < exp.length; i++)\n+            exps[i] = (Exp) exp[i];\n+        val1 = getLiteralRawString(val1);\n+        return new SimpleCaseExpression((Val) caseOperand, exps,\n+            (Val) val1);\n+    }\n+\n+    public Value generalCaseExpression(Expression[] exp,\n+            Value val) {\n+        Exp[] exps = new Exp[exp.length];\n+        for (int i = 0; i < exp.length; i++)\n+            exps[i] = (Exp) exp[i];\n+        val = getLiteralRawString(val);\n+        return new GeneralCaseExpression(exps, (Val) val);\n+    }\n+\n+    public Expression whenCondition(Expression exp, Value val) {\n+        val = getLiteralRawString(val);\n+        return new WhenCondition((Exp) exp, (Val) val);\n+    }\n+\n+    public Expression whenScalar(Value val1, Value val2) {\n+        val1 = getLiteralRawString(val1);\n+        val2 = getLiteralRawString(val2);\n+        return new WhenScalar((Val) val1, (Val) val2);\n+    }\n+\n+    public Value coalesceExpression(Value[] vals) {;\n+        Object[] values = new Val[vals.length];\n+        for (int i = 0; i < vals.length; i++) {\n+            values[i] = getLiteralRawString(vals[i]);\n+        }\n+        return new CoalesceExpression((Val[]) values);\n+    }\n+\n+    public Value nullIfExpression(Value val1, Value val2) {\n+        val1 = getLiteralRawString(val1);\n+        val2 = getLiteralRawString(val2);\n+        return new NullIfExpression((Val) val1, (Val) val2);\n+    }\n+    \n+    public Value newFunction(String functionName, Class<?> resultType, Value... args) {\n+        return new DatastoreFunction(functionName, resultType, newArgumentList(args));\n+    }\n }"},{"sha":"11dd5fb031b00921d063ae51533214592dd1cc09","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":44,"deletions":2,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.sql.Raw;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n@@ -34,16 +35,23 @@\n \n     private Object _val;\n     private int _ptype;\n+    private boolean _isRaw;\n+    private Object _rawVal;\n \n     /**\n      * Constructor. Supply literal value.\n      */\n     public Lit(Object val, int ptype) {\n         _val = val;\n         _ptype = ptype;\n+        if (_ptype == Literal.TYPE_DATE || _ptype == Literal.TYPE_TIME ||\n+            _ptype == Literal.TYPE_TIMESTAMP)\n+            _isRaw = true;\n     }\n \n     public Class getType() {\n+        if (_isRaw && _rawVal != null)\n+            return Raw.class;\n         return (_val == null) ? Object.class : _val.getClass();\n     }\n \n@@ -66,6 +74,18 @@ public void setValue(Object val) {\n     public Object getValue(Object[] params) {\n         return getValue();\n     }\n+    \n+    public boolean isRaw() {\n+        return _isRaw;\n+    }\n+    \n+    public void setRaw(boolean isRaw) {\n+        _isRaw = isRaw;\n+    }\n+\n+    public Object getRawValue() {\n+        return _rawVal;\n+    }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         return new LitExpState();\n@@ -98,7 +118,29 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         if (lstate.otherLength > 1)\n             sql.appendValue(((Object[]) lstate.sqlValue)[index], \n                 lstate.getColumn(index));\n-        else\n-            sql.appendValue(lstate.sqlValue, lstate.getColumn(index));\n+        else if (_isRaw) {\n+            int parseType = getParseType();\n+            if (parseType == Literal.TYPE_ENUM) { \n+                StringBuilder value = new StringBuilder();\n+                boolean isOrdinal = false;\n+                if (lstate.sqlValue instanceof Integer)\n+                    isOrdinal = true;\n+                if (!isOrdinal)\n+                    value.append(\"'\");\n+                value.append(lstate.sqlValue);\n+                if (!isOrdinal)\n+                    value.append(\"'\");\n+                lstate.sqlValue = new Raw(value.toString());\n+                _rawVal = lstate.sqlValue;\n+            } else if (parseType == Literal.TYPE_DATE || parseType == Literal.TYPE_TIME ||\n+                parseType == Literal.TYPE_TIMESTAMP) {\n+                lstate.sqlValue = new Raw(_val.toString());\n+                _rawVal = lstate.sqlValue;\n+            } else {\n+                lstate.sqlValue = new Raw(_val instanceof String ? \"'\"+_val+\"'\" : _val.toString());\n+                _rawVal = lstate.sqlValue;\n+            }\n+        }\n+        sql.appendValue(lstate.sqlValue, lstate.getColumn(index));\n     }\n }"},{"sha":"2461f3237d6f9bb297c3ff6e423bfa9c0762edcf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapEntry.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapEntry.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapEntry.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Returns the Map.Entry<K,V> of a map value.\n+ *\n+ * @author Catalina Wei\n+ * @since 2.0.0\n+ */\n+public class MapEntry\n+    extends AbstractVal {\n+\n+    private final Val _key;\n+    private final Val _val;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+    private Class _type = null;\n+\n+    /**\n+     * Constructor. Provide the map value to operate on.\n+     */\n+    public MapEntry(Val key, Val val) {\n+        ((PCPath) key).getKey();\n+        _key = key;\n+        _val = val;\n+    }\n+\n+    /**\n+     * Expression state.\n+     */\n+    public static class EntryExpState\n+        extends ExpState {\n+        public ExpState key;\n+        public ExpState val;\n+    \n+        EntryExpState(ExpState key, ExpState val) {\n+            this.key = key;\n+            this.val = val;\n+        }\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state,\n+        SQLBuffer sql, int index) {\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n+        Val other, ExpState otherState) {\n+        _val.calculateValue(sel, ctx, state, other, otherState);\n+        _key.calculateValue(sel, ctx, state, other, otherState);\n+    }\n+\n+    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        ExpState val = _val.initialize(sel, ctx, flags);\n+        ExpState key = _key.initialize(sel, ctx, flags);\n+        return new EntryExpState(key, val);\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        return 1;\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        EntryExpState estate = (EntryExpState) state;\n+        Object key = _key.load(ctx, estate.key, res);\n+        Object val = _val.load(ctx, estate.val, res);\n+        if (key == null || val == null)\n+            return null;\n+        return new Entry(key, val);\n+    }\n+\n+    public void orderBy(Select sel, ExpContext ctx, ExpState state, boolean asc)\n+    {\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, boolean pks)\n+    {\n+        selectColumns(sel, ctx, state, pks);\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n+        boolean pks) {\n+        EntryExpState estate = (EntryExpState) state;\n+        _key.selectColumns(sel, ctx, estate.key, pks);\n+        _val.selectColumns(sel, ctx, estate.val, pks);\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public Class getType() {\n+        return Map.Entry.class;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;        \n+    }\n+\n+    private class Entry<K,V> implements Map.Entry<K, V> {\n+        private final K key;\n+        private final V value;\n+\n+        public Entry(K k, V v) {\n+            key = k;\n+            value = v;\n+        }\n+        public K getKey() {\n+            return key;\n+        }\n+\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        public V setValue(V v) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        public boolean equals(Object other) {\n+            if (other instanceof Map.Entry == false)\n+                return false;\n+            Map.Entry that = (Map.Entry)other;\n+            return (this.key == null ?\n+                that.getKey() == null : key.equals(that.getKey())) &&\n+                (value == null ?\n+                that.getValue() == null : value.equals(that.getValue()));\n+        }\n+\n+        public int hashCode() {\n+            return  (key == null   ? 0 : key.hashCode()) ^\n+            (value == null ? 0 : value.hashCode());\n+        }\n+    }\n+}"},{"sha":"56260abfc2dad72e7980201f2b447e118bfca6e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapKey.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapKey.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MapKey.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Returns the key of a map value.\n+ *\n+ * @author Catalina Wei\n+ * @since 2.0.0\n+ */\n+public class MapKey\n+    extends AbstractVal {\n+\n+    private final Val _key;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+    private Class _type = null;\n+\n+    /**\n+     * Constructor. Provide the map value to operate on.\n+     */\n+    public MapKey(Val key) {\n+        ((PCPath) key).getKey();\n+        _key = key;\n+    }\n+\n+    /**\n+     * Expression state.\n+     */\n+    public static class KeyExpState\n+        extends ExpState {\n+        public ExpState key;\n+        public ExpState val;\n+    \n+        KeyExpState(ExpState key) {\n+            this.key = key;\n+        }\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state,\n+        SQLBuffer sql, int index) {\n+        KeyExpState estate = (KeyExpState) state;\n+        _key.appendTo(sel, ctx, estate.key, sql, index);\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n+        Val other, ExpState otherState) {\n+        KeyExpState estate = (KeyExpState) state;\n+        _key.calculateValue(sel, ctx, estate.key, other, otherState);\n+    }\n+\n+    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n+        KeyExpState estate = (KeyExpState) state;\n+        _key.groupBy(sel, ctx, estate.key);\n+    }\n+\n+    public void orderBy(Select sel, ExpContext ctx, ExpState state,\n+        boolean asc) {\n+        KeyExpState estate = (KeyExpState) state;\n+        _key.orderBy(sel, ctx, estate.key, asc);\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        ExpState key = _key.initialize(sel, ctx, flags);\n+        return new KeyExpState(key);\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        return 1;\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        KeyExpState estate = (KeyExpState) state;\n+        Object key = _key.load(ctx, estate.key, res);\n+        return key;\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, boolean pks)\n+    {\n+        selectColumns(sel, ctx, state, pks);\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n+        boolean pks) {\n+        KeyExpState estate = (KeyExpState) state;\n+        _key.selectColumns(sel, ctx, estate.key, pks);\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public Class getType() {\n+        return _key.getType();\n+    }\n+\n+    public void setImplicitType(Class type) {\n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;        \n+    }\n+\n+    public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state, \n+        Object val) {\n+        KeyExpState estate = (KeyExpState) state;\n+        return _key.toDataStoreValue(sel, ctx, \n+            estate.key, val);\n+    }\n+}"},{"sha":"d5e717e0620f1842fe4d6a21048a6128df02f791","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -21,6 +21,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n@@ -103,8 +104,14 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n             buf.append(\" LIKE \").appendValue(str, col);\n \n             // escape out characters by using the database's escape sequence\n-            if (_escape != null)\n-                buf.append(\" ESCAPE '\").append(_escape).append(\"'\");\n+            DBDictionary dict = ctx.store.getDBDictionary();\n+            if (_escape != null) {\n+                if (_escape.equals(\"\\\\\")) \n+                    buf.append(\" ESCAPE '\").append(dict.searchStringEscape).append(\"'\");\n+                else\n+                    buf.append(\" ESCAPE '\").append(_escape).append(\"'\");\n+            }\n+            \n         }\n         sel.append(buf, state.joins);\n     }"},{"sha":"282c1f64c16b7fa3b5193174daae70be1a32e410","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -113,7 +113,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"5c2c97a78328cd2c42e6eaccde9cd6d4acbc04a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -67,6 +67,10 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n \n         Select sub = ctx.store.getSQLFactory().newSelect();\n         sub.setParent(sel, null);\n+        // this subselect has the same context as its parent\n+        sub.setContext(sel.ctx());\n+        // the context select should still belong to parent\n+        sub.ctx().setSelect(sel);\n         ExpState estate = _exp.initialize(sub, ctx, ((NotContainsExpState) \n             state).contains);\n         sub.where(sub.and(null, estate.joins));"},{"sha":"6bb29a745b09c62288358a113d0cc1903ee42897","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullIfExpression.java","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullIfExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullIfExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullIfExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.sql.Raw;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * NullIf expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class NullIfExpression\n+    extends AbstractVal {\n+\n+    private final Val _val1;\n+    private final Val _val2;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+    private Value other = null;\n+    private ExpState otherState = null;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public NullIfExpression(Val val1, Val val2) {\n+        _val1 = val1;\n+        _val2 = val2;\n+    }\n+\n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n+    public Class getType() {\n+        if (_cast != null)\n+            return _cast;\n+        Class c1 = _val1.getType();\n+        Class c2 = _val2.getType();\n+        Class type = Filters.promote(c1, c2);\n+        if (type == Raw.class)\n+            return String.class;\n+        return type;\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        ExpState s1 = _val1.initialize(sel, ctx, 0);\n+        ExpState s2 = _val2.initialize(sel, ctx, 0);\n+        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer buf, int index) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+        \n+        buf.append(\" NULLIF(\"); // MySQL does not like space before bracket\n+\n+        _val1.appendTo(sel, ctx, bstate.state1, buf, 0);\n+        buf.append(\",\");\n+        _val2.appendTo(sel, ctx, bstate.state2, buf, 0);\n+\n+        buf.append(\")\");\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n+        boolean pks) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+        _val1.selectColumns(sel, ctx, bstate.state1, true);\n+        _val2.selectColumns(sel, ctx, bstate.state2, true);\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n+\n+    public int getId() {\n+        return Val.NULLIF_VAL;\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n+        Val other, ExpState otherState) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+        _val1.calculateValue(sel, ctx, bstate.state1, _val2, bstate.state2);\n+        _val2.calculateValue(sel, ctx, bstate.state2, _val1, bstate.state1);\n+    }\n+\n+    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n+        sel.groupBy(newSQLBuffer(sel, ctx, state));\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        return 1;\n+    }\n+\n+    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n+        calculateValue(sel, ctx, state, null, null);\n+        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n+        appendTo(sel, ctx, state, buf, 0);\n+        return buf;\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        return Filters.convert(res.getObject(this,\n+            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+    }\n+\n+    public void orderBy(Select sel, ExpContext ctx, ExpState state,\n+        boolean asc) {\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, boolean pks){\n+        sel.select(newSQLBuffer(sel, ctx, state), this);\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _cast = type;        \n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;\n+    }\n+    \n+    public void setOtherPath(Value other) {\n+        this.other = other;\n+    }\n+    \n+    public Value getOtherPath() {\n+        return other;\n+    }\n+    \n+    public void setOtherState(ExpState otherState) {\n+        this.otherState = otherState;\n+    }\n+    \n+    public ExpState getOtherState() {\n+        return otherState;\n+    }\n+    \n+}\n+"},{"sha":"9a8c52bb25c93ccd44398a846d859161cfb950bd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":315,"deletions":25,"changes":340,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -26,22 +26,34 @@\n \n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.Strategy;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerCollectionTableFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerHandlerMapTableFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.LRSMapFieldStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.exps.CandidatePath;\n+import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.XMLMetaData;\n+import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -50,8 +62,11 @@\n  * @author Abe White\n  */\n public class PCPath\n-    extends AbstractVal\n+    extends CandidatePath\n     implements JDBCPath {\n+\t\n+    protected static final String TRUE = \"1 = 1\";\n+    protected static final String FALSE = \"1 <> 1\";\n \n     private static final int PATH = 0;\n     private static final int BOUND_VAR = 1;\n@@ -63,13 +78,14 @@\n \n     private final ClassMapping _candidate;\n     private ClassMapping _class = null;\n-    private LinkedList _actions = null;\n     private boolean _key = false;\n     private int _type = PATH;\n     private String _varName = null;\n     private Class _cast = null;\n     private boolean _cid = false;\n     private FieldMetaData _xmlfield = null;\n+    private boolean _keyPath = false;\n+    private String _schemaAlias = null;\n \n     /**\n      * Return a path starting with the 'this' ptr.\n@@ -87,10 +103,12 @@ public PCPath(ClassMapping candidate, Variable var) {\n \n         PCPath other = var.getPCPath();\n         Action action = new Action();\n+        action.var = var.getName();\n         if (other == null) {\n             _type = UNBOUND_VAR;\n             action.op = Action.UNBOUND_VAR;\n             action.data = var;\n+            _schemaAlias = var.getName();\n         } else {\n             // bound variable; copy path\n             _type = UNACCESSED_VAR;\n@@ -99,6 +117,8 @@ public PCPath(ClassMapping candidate, Variable var) {\n \n             action.op = Action.VAR;\n             action.data = var.getName();\n+            _schemaAlias = other._schemaAlias;\n+            _correlationVar = other._correlationVar;\n         }\n         _actions.add(action);\n         _cast = var.getType(); // initial type is var type\n@@ -119,6 +139,23 @@ public PCPath(SubQ sub) {\n         _varName = sub.getCandidateAlias();\n     }\n \n+    public void setSchemaAlias(String schemaAlias) {\n+        if (_schemaAlias == null) \n+            _schemaAlias = schemaAlias;\n+    }\n+\n+    public String getSchemaAlias() {\n+        return _schemaAlias;\n+    }\n+    \n+    public void setSubqueryContext(Context context, String correlationVar) {\n+        Action action = lastFieldAction();\n+        if (action == null)\n+            return;\n+        action.context = context;\n+        _correlationVar = correlationVar;\n+    }\n+    \n     /**\n      * Set the path as a binding of the given variable.\n      */\n@@ -196,7 +233,7 @@ public String getXPath() {\n         // we build the remaining xpath that follows the root element.\n         while (itr.hasNext()) {\n             action = (Action) itr.next();\n-            if (((XMLMetaData) action.data).getXmlname() != null)                 \n+            if (((XMLMetaData) action.data).getXmlname() != null)\n                 xpath.append(((XMLMetaData) action.data).getXmlname());\n             else\n                 xpath.append(\"*\");\n@@ -206,7 +243,7 @@ public String getXPath() {\n         return xpath.toString();\n     }\n     \n-    public String getPath() {\n+    public String getPCPathString() {\n         if (_actions == null)\n             return (_varName == null) ? \"\" : _varName + \".\";\n \n@@ -236,8 +273,12 @@ public ClassMapping getClassMapping(ExpState state) {\n                 return pstate.field.getKeyMapping().getTypeMapping();\n             return null;\n         }\n-        if (pstate.field.getElement().getTypeCode() == JavaTypes.PC)\n+        if (pstate.field.getElement().getTypeCode() == JavaTypes.PC) {\n+            if (pstate.field.isElementCollection() &&\n+                pstate.field.getElement().isEmbedded())\n+                pstate.isEmbedElementColl = true;\n             return pstate.field.getElementMapping().getTypeMapping();\n+        }\n         if (pstate.field.getTypeCode() == JavaTypes.PC)\n             return pstate.field.getTypeMapping();\n         return null;\n@@ -258,7 +299,9 @@ public FieldMapping getFieldMapping(ExpState state) {\n      * The columns used by this path.\n      */\n     private Column[] calculateColumns(PathExpState pstate) {\n-        if (_key) {\n+        if (_key ||\n+            (_keyPath && pstate.field.getKey() != null &&\n+                !pstate.field.getKey().isEmbedded())) {\n             if (!pstate.joinedRel \n                 && pstate.field.getKey().getValueMappedBy() != null)\n                 joinRelation(pstate, _key, false, false);\n@@ -274,6 +317,16 @@ else if (pstate.joinedRel\n                 case JavaTypes.ARRAY:\n                 case JavaTypes.COLLECTION:\n                     ValueMapping elem = pstate.field.getElementMapping();\n+                    if (pstate.field.isElementCollection() && pstate.field.getElement().isEmbedded()) {\n+                        Strategy strategy = pstate.field.getStrategy();\n+                        if (strategy instanceof HandlerCollectionTableFieldStrategy) {\n+                            return ((HandlerCollectionTableFieldStrategy) strategy).\n+                                getElementColumns(elem.getTypeMapping());\n+                        } else if (strategy instanceof HandlerHandlerMapTableFieldStrategy) {\n+                            return ((HandlerHandlerMapTableFieldStrategy) strategy).\n+                            getValueColumns(elem.getTypeMapping());\n+                        }\n+                    }\n                     if (pstate.joinedRel && elem.getTypeCode() == JavaTypes.PC)\n                         return elem.getTypeMapping().getPrimaryKeyColumns();\n                     if (elem.getColumns().length > 0)\n@@ -346,17 +399,23 @@ public synchronized void getKey() {\n         if (_cid)\n             return;\n \n-        // change the last action to a get key\n-        Action action = (Action) _actions.getLast();\n-        action.op = Action.GET_KEY;\n+        // replace the last field action to a get key\n+        Action action = lastFieldAction();\n+        Action key = new Action();\n+        key.op = Action.GET_KEY;\n+        key.data = action.data;\n+        int pos = _actions.indexOf(action);\n+        _actions.remove(action);\n+        _actions.add(pos, key);\n         _cast = null;\n         _key = true;\n+        _type = PATH;\n     }\n \n     public FieldMetaData last() {\n         Action act = lastFieldAction();\n-        return (act == null) ? null : isXPath() ? _xmlfield :\n-            (FieldMetaData) act.data;\n+        return (act == null) ? null : isXPath() ?\n+            _xmlfield : (FieldMetaData) act.data;\n     }\n \n     /**\n@@ -423,32 +482,58 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         boolean forceOuter = false;\n         ClassMapping rel = _candidate;\n \n+        sel.setSchemaAlias(_schemaAlias);\n+\n         // iterate to the final field\n         ClassMapping owner;\n         ClassMapping from, to;\n         Action action;\n         Variable var;\n         Iterator itr = (_actions == null) ? null : _actions.iterator();\n-        FieldMapping field;\n+        FieldMapping field = null;\n+        Action prevaction = null;\n+        boolean isCorrelatedPath = false;\n+        boolean fromParentRootInSubselect = navigateFromParentRootInSubselect(sel);\n+                \n         while (itr != null && itr.hasNext()) {\n             action = (Action) itr.next();\n \n             // treat subqueries like variables for alias generation purposes\n-            if (action.op == Action.VAR)\n-                pstate.joins = pstate.joins.setVariable((String) action.data);\n-            else if (action.op == Action.SUBQUERY)\n+            if (action.op == Action.VAR) {\n+                if (sel.getParent() != null && action.var != null &&\n+                    prevaction != null && prevaction.data != null &&\n+                    sel.ctx().getVariable(action.var) == null) {\n+                    isCorrelatedPath = true;\n+                    pstate.joins = pstate.joins.setCorrelatedVariable(action.var);\n+                } else \n+                    pstate.joins = pstate.joins.setVariable((String) action.data);\n+            }\n+            else if (action.op == Action.SUBQUERY) {\n                 pstate.joins = pstate.joins.setSubselect((String) action.data);\n+            }\n             else if (action.op == Action.UNBOUND_VAR) {\n                 // unbound vars are cross-joined to the candidate table\n                 var = (Variable) action.data;\n                 rel = (ClassMapping) var.getMetaData();\n-                pstate.joins = pstate.joins.setVariable(var.getName());\n-                pstate.joins = pstate.joins.crossJoin(_candidate.getTable(), \n+                if (rel == null)\n+                \tthrow new IllegalArgumentException(_loc.get(\n+                \t    \"invalid-unbound-var\", var.getName()).toString());\n+                \t    \n+                if (sel.getParent() != null && action.var != null &&\n+                    sel.ctx().getVariable(action.var) == null) {\n+                    //System.out.println(\"Correlated action var=\"+action.var);\n+                    isCorrelatedPath = true;\n+                    pstate.joins = pstate.joins.setCorrelatedVariable(var.getName());\n+                } else                 \n+                    pstate.joins = pstate.joins.setVariable(var.getName());\n+\n+                pstate.joins = pstate.joins.crossJoin(_candidate.getTable(),\n                     rel.getTable());\n             } else {\n                 // move past the previous field, if any\n-                field = (action.op == Action.GET_XPATH) ? (FieldMapping) _xmlfield :\n-                    (FieldMapping) action.data;\n+                field = (FieldMapping) ((action.op == Action.GET_XPATH) ?\n+                    _xmlfield : action.data);\n+\n                 if (pstate.field != null) {\n                     // if this is the second-to-last field and the last is\n                     // the related field this field joins to, no need to\n@@ -458,16 +543,27 @@ else if (action.op == Action.UNBOUND_VAR) {\n                         pstate.cmpfield = field;\n                         break;\n                     }\n+                    \n+                    if (fromParentRootInSubselect) {\n+                        isCorrelatedPath = true;\n+                        pstate.joins = pstate.joins.setCorrelatedVariable(_schemaAlias);\n+                        pstate.joins.setJoinContext(null);\n+                    }\n+                    \n                     rel = traverseField(pstate, key, forceOuter, false);\n                 }\n \n                 // mark if the next traversal should go through\n                 // the key rather than value\n                 key = action.op == Action.GET_KEY;\n                 forceOuter |= action.op == Action.GET_OUTER;\n+                \n+                if (key && itr.hasNext())\n+                    _keyPath = true;\n \n                 // get mapping for the current field\n                 pstate.field = field;\n+\n                 owner = pstate.field.getDefiningMapping();\n                 if (pstate.field.getManagement() \n                     != FieldMapping.MANAGE_PERSISTENT)\n@@ -488,13 +584,24 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     }\n \n                     for (; from != null && from != to;\n-                        from = from.getJoinablePCSuperclassMapping())\n+                        from = from.getJoinablePCSuperclassMapping()) {\n+                    \tFieldMapping cast = from.getFieldMapping(pstate.field\n+                    \t\t\t.getName());\n+                    \tif (cast != null)\n+                    \t\tpstate.field = cast;\n                         pstate.joins = from.joinSuperclass(pstate.joins, false);\n+                    }\n                 }\n-                // nothing more to do from here on as we encountered an xpath action\n+                // nothing more to do from here on as we encountered an xpath\n+                // action\n                 if (action.op == Action.GET_XPATH)\n                     break;\n             }\n+            prevaction = action;\n+            if (prevaction != null && prevaction.context != null) {\n+                Context jCtx = JDBCStoreQuery.getThreadLocalContext(prevaction.context);\n+                pstate.joins = pstate.joins.setJoinContext(jCtx);\n+            }\n         }\n         if (_varName != null)\n             pstate.joins = pstate.joins.setVariable(_varName);\n@@ -509,9 +616,55 @@ else if (action.op == Action.UNBOUND_VAR) {\n         if ((flags & JOIN_REL) != 0)\n             joinRelation(pstate, key, forceOuter || (flags & FORCE_OUTER) != 0,\n                 false);\n+        if (isCorrelatedPath) {\n+            // check if there are joins that belong to parent\n+            pstate.joins.moveJoinsToParent();\n+        }\n+        pstate.joins.setJoinContext(null);\n+        \n+        if (_actions == null) {\n+            String subqAlias = findSubqAlias(sel);\n+            pstate.joins = pstate.joins.setSubselect(subqAlias);\n+            pstate.joins.setCorrelatedVariable(_schemaAlias);\n+        }\n+        \n         return pstate;\n     }\n+    \n+    private String findSubqAlias(Select sel) {\n+        Select pSel = sel.getParent();\n+        if (pSel == null)\n+            return null;\n+        Context pCtx = pSel.ctx();\n+        if (pCtx.subquery == null)\n+            return null;\n+        if (pCtx.getSchema(_schemaAlias) != null)\n+            return ((SubQ)pCtx.subquery).getCandidateAlias();\n+        return findSubqAlias(pSel);\n+    }\n \n+    /**\n+     * When a PCPath is in subselect, and it is simply a navigation\n+     * from the parent root, the joins involved in this PCPath\n+     * must happen in the main select.  \n+     */\n+    private boolean navigateFromParentRootInSubselect(Select sel) {\n+        if (sel.getParent() == null)\n+            return false;\n+        Iterator itr = (_actions == null) ? null : _actions.iterator();\n+        boolean navigateFromRoot = false;\n+        boolean hasVar = false;\n+        boolean startsWithSubquery = false;\n+        while (itr != null && itr.hasNext()) {\n+            Action action = (Action) itr.next();\n+            if (action.op == Action.VAR) \n+                hasVar = true;\n+            else if (action.op == Action.SUBQUERY)\n+                startsWithSubquery = true;\n+        }\n+        return !hasVar && !startsWithSubquery && sel.ctx().getSchema(_schemaAlias) == null;\n+    }\n+    \n     /**\n      * Return whether the given source field joins to the given target field.\n      */\n@@ -545,6 +698,45 @@ private static boolean isJoinedField(FieldMapping src, boolean key,\n                 return false;\n         return true;\n     }\n+    \n+    protected Object eval(Object candidate, Object orig,\n+        StoreContext ctx, Object[] params) {\n+        if (_actions == null)\n+            return candidate;\n+\n+        Action action;\n+        OpenJPAStateManager sm;\n+        Broker tmpBroker;\n+        for (Iterator itr = _actions.iterator(); itr.hasNext();) {\n+            action = (Action)itr.next();\n+            sm = null;\n+            tmpBroker = null;\n+            if (ImplHelper.isManageable(candidate))\n+                sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(\n+                    candidate, ctx.getConfiguration())).\n+                    pcGetStateManager();\n+            if (sm == null) {\n+                tmpBroker = ctx.getBroker();\n+                tmpBroker.transactional(candidate, false, null);\n+                sm = tmpBroker.getStateManager(candidate);\n+            }\n+            if (action.op != Action.GET && action.op != Action.GET_OUTER)\n+                continue;\n+            try {\n+                candidate = sm.fetchField(\n+                        ((FieldMapping)action.data).getIndex(), true);\n+            } catch (ClassCastException cce) {\n+                throw new RuntimeException(action.data + \" not a field path\");\n+            } finally {\n+                // transactional does not clear the state, which is\n+                // important since tmpCandidate might be also managed by\n+                // another broker if it's a proxied non-pc instance\n+                if (tmpBroker != null)\n+                    tmpBroker.nontransactional(sm.getManagedInstance(), null);\n+            }\n+        }\n+        return candidate;\n+    }\n \n     /**\n      * Expression state.\n@@ -556,7 +748,8 @@ private static boolean isJoinedField(FieldMapping src, boolean key,\n         public FieldMapping cmpfield = null;\n         public Column[] cols = null;\n         public boolean joinedRel = false;\n-\n+        public boolean isEmbedElementColl = false;\n+        \n         public PathExpState(Joins joins) {\n             super(joins);\n         }\n@@ -634,10 +827,14 @@ public void select(Select sel, ExpContext ctx, ExpState state,\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n         boolean pks) {\n+        sel.setSchemaAlias(_schemaAlias);\n         ClassMapping mapping = getClassMapping(state);\n         PathExpState pstate = (PathExpState) state;\n-        if (mapping == null || !pstate.joinedRel)\n+        if (mapping == null || !pstate.joinedRel ||\n+            pstate.isEmbedElementColl)            \n             sel.select(getColumns(state), pstate.joins);\n+        else if (_key && pstate.field.getKey().isEmbedded())\n+            selectEmbeddedMapKey(sel, ctx, state);\n         else if (pks)\n             sel.select(mapping.getPrimaryKeyColumns(), pstate.joins);\n         else {\n@@ -685,13 +882,20 @@ Object load(ExpContext ctx, ExpState state, Result res, boolean pks)\n             if (pks)\n                 return mapping.getObjectId(ctx.store, res, null, true, \n                     pstate.joins);\n+            if (_key && pstate.field.getKey().isEmbedded())\n+                return loadEmbeddedMapKey(ctx, state, res);\n+            if (pstate.isEmbedElementColl)\n+                return pstate.field.loadProjection(ctx.store, ctx.fetch, res,\n+                    pstate.joins);\n             return res.load(mapping, ctx.store, ctx.fetch, pstate.joins);\n         }\n \n         Object ret;\n         if (_key)\n-            ret = pstate.field.loadKeyProjection(ctx.store, ctx.fetch, res, \n-                pstate.joins);\n+            // Map key is a java primitive type\n+            //    example: Map<Integer, Employee> emps\n+            ret = res.getObject(pstate.cols[0],\n+                null, pstate.joins);\n         else\n             ret = pstate.field.loadProjection(ctx.store, ctx.fetch, res, \n                 pstate.joins);\n@@ -700,20 +904,56 @@ Object load(ExpContext ctx, ExpState state, Result res, boolean pks)\n         return ret;\n     }\n \n+    private void validateMapStrategy(Strategy strategy) {\n+        if (strategy == null ||\n+            !(strategy instanceof LRSMapFieldStrategy))\n+            throw new RuntimeException(\"Invalid map field strategy:\"+strategy);\n+    }\n+\n+    private void selectEmbeddedMapKey(Select sel, ExpContext ctx,\n+        ExpState state) {\n+        PathExpState pstate = (PathExpState) state;\n+        validateMapStrategy(pstate.field.getStrategy());\n+        LRSMapFieldStrategy strategy = (LRSMapFieldStrategy)\n+            pstate.field.getStrategy();\n+        ClassMapping mapping = pstate.field.getKeyMapping().getTypeMapping();\n+        strategy.selectKey(sel, mapping, null, ctx.store, ctx.fetch,\n+            pstate.joins);\n+    }\n+\n+    private Object loadEmbeddedMapKey(ExpContext ctx, ExpState state,\n+        Result res) throws SQLException {\n+        PathExpState pstate = (PathExpState) state;\n+        validateMapStrategy(pstate.field.getStrategy());\n+        LRSMapFieldStrategy strategy =\n+            (LRSMapFieldStrategy) pstate.field.getStrategy();\n+        return strategy.loadKey(null, ctx.store, ctx.fetch, res,\n+            pstate.joins);\n+    }\n+\n     public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n         Val other, ExpState otherState) {\n         // we don't create the SQL b/c it forces the Select to cache aliases\n         // for the tables we use, and these aliases might not ever be used if\n         // we eventually call appendIsEmpty or appendIsNull rather than appendTo\n     }\n \n+    public void verifyIndexedField() {\n+        Action lastAction = (Action) lastFieldAction();\n+        FieldMapping fm = (FieldMapping) lastAction.data;\n+        if (fm.getOrderColumn() == null)\n+            throw new UserException(_loc.get(\"no-order-column\", fm.getName()));\n+    }\n+\n     public int length(Select sel, ExpContext ctx, ExpState state) {\n         return getColumns(state).length;\n     }\n \n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n         Column col = getColumns(state)[index];\n+        if (sel != null)\n+            sel.setSchemaAlias(_schemaAlias);\n \n         // if select is null, it means we are not aliasing columns\n         // (e.g., during a bulk update)\n@@ -744,6 +984,42 @@ public void appendIsNotEmpty(Select sel, ExpContext ctx, ExpState state,\n             pstate.field.appendIsNotEmpty(sql, sel, pstate.joins);\n     }\n \n+    public void appendIndex(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql) {\n+        PathExpState pstate = (PathExpState) state;\n+        if (pstate.field == null)\n+            sql.append(\"1\");\n+        else\n+            pstate.field.appendIndex(sql, sel, pstate.joins);\n+    }\n+\n+    public void appendType(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql) {\n+        Discriminator disc = null;\n+        ClassMapping sup = _class;\n+        while (sup.getMappedPCSuperclassMapping() != null)\n+            sup = sup.getMappedPCSuperclassMapping();\n+\n+        disc = sup.getDiscriminator();\n+\n+        Column[] cols = null;\n+        if (disc != null)\n+            cols = disc.getColumns();\n+        else\n+            cols = getColumns(state);\n+\n+        if (cols == null) {\n+            sql.append(\"1\");\n+            return;\n+        }\n+\n+        for (int i = 0; i < cols.length; i++) {\n+            if (i > 0)\n+                sql.append(\", \");\n+            sql.append(sel.getColumnAlias(cols[i], state.joins));\n+        }\n+    }\n+\n     public void appendSize(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql) {\n         PathExpState pstate = (PathExpState) state;\n@@ -770,6 +1046,13 @@ public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state,\n         else\n             pstate.field.appendIsNotNull(sql, sel, pstate.joins);\n     }\n+    \n+    public boolean isSubqueryPath() {\n+        if (_actions != null && _actions.size() == 1 && \n+           ((Action)_actions.get(0)).op == Action.SUBQUERY)\n+            return true;\n+        return false;\n+    }\n \n     public int hashCode() {\n         if (_actions == null)\n@@ -786,6 +1069,11 @@ public boolean equals(Object other) {\n         return ObjectUtils.equals(_candidate, path._candidate)\n             && ObjectUtils.equals(_actions, path._actions);\n     }\n+    \n+    public int getId() {\n+        return Val.VAL;\n+    }\n+\n \n     /**\n      * Helper class representing an action.\n@@ -804,6 +1092,8 @@ public boolean equals(Object other) {\n \n         public int op = -1;\n         public Object data = null;\n+        public String var = null;\n+        public Context context = null;\n \n         public String toString() {\n             return op + \"|\" + data;"},{"sha":"809ece0b8a451a35470d25597ae620094fbc572d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":37,"deletions":12,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -22,6 +22,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n@@ -37,25 +38,21 @@\n     extends Const\n     implements Parameter {\n \n-    private final String _name;\n+    private final Object _key;\n     private Class _type = null;\n     private int _idx = -1;\n     private boolean _container = false;\n \n     /**\n      * Constructor. Supply parameter name and type.\n      */\n-    public Param(String name, Class type) {\n-        _name = name;\n+    public Param(Object key, Class type) {\n+        _key = key;\n         setImplicitType(type);\n     }\n \n-    public String getName() {\n-        return _name;\n-    }\n-\n-    public String getParameterName() {\n-        return getName();\n+    public Object getParameterKey() {\n+        return _key;\n     }\n \n     public Class getType() {\n@@ -82,6 +79,12 @@ public Object getValue(Object[] params) {\n         return Filters.convert(params[_idx], getType());\n     }\n \n+    public Object getValue(ExpContext ctx, ExpState state) {\n+        ParamExpState pstate = (ParamExpState) state;\n+        return (pstate.discValue != null) ? pstate.discValue :\n+            getValue(ctx.params);\n+    }\n+\n     public Object getSQLValue(Select sel, ExpContext ctx, ExpState state) {\n         return ((ParamExpState) state).sqlValue;\n     }\n@@ -97,7 +100,10 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         extends ConstExpState {\n \n         public Object sqlValue = null;\n-        public int otherLength = 1; \n+        public int otherLength = 1;\n+        public ClassMapping mapping = null;\n+        public Discriminator disc = null;\n+        public Object discValue = null;\n     } \n \n     public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n@@ -108,6 +114,14 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n         if (other != null && !_container) {\n             pstate.sqlValue = other.toDataStoreValue(sel, ctx, otherState, val);\n             pstate.otherLength = other.length(sel, ctx, otherState);\n+            if (other instanceof Type) {\n+                pstate.mapping = ctx.store.getConfiguration().\n+                    getMappingRepositoryInstance().getMapping((Class) val,\n+                        ctx.store.getContext().getClassLoader(), true);\n+                pstate.disc = pstate.mapping.getDiscriminator();\n+                pstate.discValue = pstate.disc != null ? pstate.disc.getValue()\n+                    : null;\n+            }\n         } else if (ImplHelper.isManageable(val)) {\n             ClassMapping mapping = ctx.store.getConfiguration().\n                 getMappingRepositoryInstance().getMapping(val.getClass(),\n@@ -124,8 +138,19 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         ParamExpState pstate = (ParamExpState) state;\n         if (pstate.otherLength > 1)\n             sql.appendValue(((Object[]) pstate.sqlValue)[index], \n-                pstate.getColumn(index));\n+                pstate.getColumn(index), this);\n+        else if (pstate.cols != null)\n+            sql.appendValue(pstate.sqlValue, pstate.getColumn(index), this);\n+        else if (pstate.discValue != null)\n+            sql.appendValue(pstate.discValue);\n         else\n-            sql.appendValue(pstate.sqlValue, pstate.getColumn(index));\n+            sql.appendValue(pstate.sqlValue, pstate.getColumn(index), this);\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        ParamExpState pstate = (ParamExpState) state;\n+        if (getMetaData() == null || pstate.cols == null)\n+            return 1;\n+        return pstate.cols.length;\n     }\n }"},{"sha":"9dcf8d71f13df6a9a6180c525b9c246ce5cae8c5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -20,17 +20,21 @@\n \n import java.io.Serializable;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.AbstractExpressionVisitor;\n import org.apache.openjpa.kernel.exps.Constant;\n+import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.Expression;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n \n /**\n@@ -43,6 +47,7 @@\n     implements Serializable {\n \n     private boolean _extent = false;\n+    private Select _subselect = null;\n \n     /**\n      * Return true if we know the select to have on criteria; to be an extent.\n@@ -53,6 +58,10 @@ public boolean isExtent() {\n         return _extent;\n     }\n \n+    public void setSubselect(Select subselect) {\n+        _subselect = subselect;\n+    }\n+\n     /**\n      * Evaluate the expression, returning a new select and filling in any\n      * associated expression state. Use {@link #select} to then select the data.\n@@ -114,10 +123,35 @@ public Select evaluate(ExpContext ctx, Select parent, String alias,\n      */\n     private Select newSelect(ExpContext ctx, Select parent,\n         String alias, QueryExpressions exps, QueryExpressionsState state) {\n-        Select sel = ctx.store.getSQLFactory().newSelect();\n+        Select subselect = JDBCStoreQuery.getThreadLocalSelect(_subselect);\n+        Select sel = parent != null ? subselect\n+            : ctx.store.getSQLFactory().newSelect();\n         sel.setAutoDistinct((exps.distinct & exps.DISTINCT_AUTO) != 0);\n         sel.setJoinSyntax(ctx.fetch.getJoinSyntax());\n         sel.setParent(parent, alias);\n+\n+        Context[] qryCtx = JDBCStoreQuery.getThreadLocalContext();\n+        Context lctx = null;\n+        for (int i = 0; i < qryCtx.length; i++) {\n+            if (qryCtx[i].cloneFrom == exps.ctx()) {\n+                lctx = qryCtx[i];\n+                break;\n+            }\n+        }\n+\n+        if (sel.ctx() == null)\n+            sel.setContext(lctx);\n+\n+        if (parent == null && lctx.getSubselContexts() != null) {\n+            // this is the case subselect was created before parent got created\n+            List<Context> subselCtxs = lctx.getSubselContexts();\n+            for (Context subselCtx : subselCtxs) {\n+                Select subsel = (Select) subselCtx.getSelect();\n+                Subquery subquery = subselCtx.getSubquery();\n+                subsel.setParent(sel, subquery.getCandidateAlias());\n+            }\n+        }\n+     \n         initialize(sel, ctx, exps, state);\n \n         if (!sel.getAutoDistinct()) {"},{"sha":"34b33cb9fbb620d0187f1eb2f1f05b483f477240","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SimpleCaseExpression.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SimpleCaseExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SimpleCaseExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SimpleCaseExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.Raw;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Simple case expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class SimpleCaseExpression\n+    extends AbstractVal {\n+\n+    private final Val _caseOperand;\n+    private final Exp[] _exp;\n+    private final Val _val;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+    private Value other = null;\n+    private ExpState otherState = null;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public SimpleCaseExpression(Val caseOperand, Exp[] exp, Val val) {\n+        _caseOperand = caseOperand;\n+        _exp = exp;\n+        _val = val;\n+    }\n+\n+    public Val getCaseOperand() {\n+        return _caseOperand;\n+    }\n+\n+    public Exp[] getExp() {\n+        return _exp;\n+    }\n+\n+    public Val getVal() {\n+        return _val;\n+    }\n+\n+    public Class getType() {\n+        if (_cast != null)\n+            return _cast;\n+        Class type = _val.getType();\n+        for (int i = 0; i < _exp.length; i++)\n+            type = Filters.promote(type,\n+                ((WhenScalar) _exp[i]).getVal2().getType());\n+        if (type == Raw.class)\n+            return String.class;\n+        return type;\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        ExpState[] states = new ExpState[_exp.length+2];\n+        Joins joins = null;\n+\n+        states[0] = _caseOperand.initialize(sel, ctx, 0);\n+        if (joins == null)\n+            joins = states[0].joins;\n+        else\n+            joins = sel.and(joins, states[0].joins);\n+        for (int i = 0; i < _exp.length; i++) {\n+            states[i+1] = _exp[i].initialize(sel, ctx, null);\n+            if (joins == null)\n+                joins = states[i+1].joins;\n+            else\n+                joins = sel.and(joins, states[i+1].joins);\n+        }\n+        states[_exp.length+1] = _val.initialize(sel, ctx, 0);\n+        if (joins == null)\n+            joins = states[_exp.length+1].joins;\n+        else\n+            joins = sel.and(joins, states[_exp.length+1].joins);\n+        return new SimpleCaseExpState(joins, states);\n+    }\n+\n+    private static class SimpleCaseExpState\n+        extends ExpState {\n+        \n+        public ExpState[] states;\n+        \n+        public SimpleCaseExpState(Joins joins, ExpState[] states) {\n+            super(joins);\n+            this.states = states;\n+        }\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state,\n+        SQLBuffer buf, int index) {\n+        SimpleCaseExpState cstate = (SimpleCaseExpState) state;\n+\n+        DBDictionary dict = ctx.store.getDBDictionary();\n+\n+        buf.append(\" CASE \");\n+\n+        for (int i = 0; i < _exp.length; i++) {\n+            // if back-end does not support simple case expression,\n+            // pushdown sql as general case expression.\n+\n+            if (!dict.supportsSimpleCaseExpression)\n+                buf.append(\" WHEN \");\n+\n+            if (i == 0 || !dict.supportsSimpleCaseExpression)\n+                _caseOperand.appendTo(sel, ctx, cstate.states[0], buf, 0);\n+\n+            if (!dict.supportsSimpleCaseExpression)\n+                buf.append(\" = \");\n+            else\n+                buf.append(\" WHEN \");\n+\n+            _exp[i].appendTo(sel, ctx, cstate.states[i+1], buf);\n+        }\n+        buf.append(\" ELSE \");\n+        _val.appendTo(sel, ctx, cstate.states[_exp.length+1], buf, 0);\n+\n+        buf.append(\" END \");\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n+        boolean pks) {\n+        SimpleCaseExpState cstate = (SimpleCaseExpState) state;\n+        \n+        _caseOperand.selectColumns(sel, ctx, cstate.states[0], pks);\n+        for (int i = 0; i < _exp.length; i++)\n+            _exp[i].selectColumns(sel, ctx, cstate.states[i+1], pks);\n+        _val.selectColumns(sel, ctx, cstate.states[_exp.length+1], pks);\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _caseOperand.acceptVisit(visitor);\n+        for (int i = 0; i < _exp.length; i++)\n+            _exp[i].acceptVisit(visitor);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n+\n+    public int getId() {\n+        return Val.SIMPLECASE_VAL;\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n+        Val other, ExpState otherState) {\n+        SimpleCaseExpState cstate = (SimpleCaseExpState) state;\n+        _caseOperand.calculateValue(sel, ctx, cstate.states[0], other,\n+            otherState);\n+        for (int i = 0; i < _exp.length; i++) {\n+            BinaryOpExpState bstate = (BinaryOpExpState) cstate.states[i+1];\n+            ((WhenScalar) _exp[i]).getVal1().calculateValue(sel, ctx,\n+                bstate.state1, null, null);\n+            ((WhenScalar) _exp[i]).getVal2().calculateValue(sel, ctx,\n+                bstate.state2, other, otherState);\n+        }\n+        _val.calculateValue(sel, ctx, cstate.states[_exp.length+1], other,\n+            otherState);\n+    }\n+\n+    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n+        sel.groupBy(newSQLBuffer(sel, ctx, state));\n+    }\n+\n+    public int length(Select sel, ExpContext ctx, ExpState state) {\n+        return 1;\n+    }\n+\n+    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n+        calculateValue(sel, ctx, state, (Val)other, otherState);\n+        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n+        appendTo(sel, ctx, state, buf, 0);\n+        return buf;\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        return Filters.convert(res.getObject(this,\n+            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+    }\n+\n+    public void orderBy(Select sel, ExpContext ctx, ExpState state,\n+        boolean asc) {\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, boolean pks){\n+        sel.select(newSQLBuffer(sel, ctx, state), this);\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _cast = type;        \n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;\n+    }\n+    public void setOtherPath(Value other) {\n+        this.other = other;\n+    }\n+    \n+    public Value getOtherPath() {\n+        return other;\n+    }\n+    \n+    public void setOtherState(ExpState otherState) {\n+        this.otherState = otherState;\n+    }\n+    \n+    public ExpState getOtherState() {\n+        return otherState;\n+    }\n+}\n+"},{"sha":"2b43ce58a33e154264feee0aa0ee0a76966ef7d8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -194,6 +194,10 @@ public XMLMetaData getXmlMapping() {\n             return null;\n         }\n \n+        public boolean requiresCast() {\n+            return false;\n+        }\n+\n     }\n \n     /**\n@@ -278,5 +282,9 @@ public PCPath getXPath() {\n         public XMLMetaData getXmlMapping() {\n             return null;\n         }\n+\n+        public boolean requiresCast() {\n+            return false;\n+        }\n     }\n }"},{"sha":"7580b87434a7190960e56bff4e5bde3936dd83c7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -85,7 +85,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"477e132bd762aa4f802d2aa02743b8360ec537b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"modified","additions":52,"deletions":9,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -20,7 +20,9 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -30,25 +32,27 @@\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Subquery;\n+import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n  * A subquery.\n  *\n  * @author Abe White\n  */\n-class SubQ\n+public class SubQ\n     extends AbstractVal\n     implements Subquery {\n \n     private final ClassMapping _candidate;\n     private final boolean _subs;\n-    private final String _alias;\n+    private String _subqAlias;\n     private final SelectConstructor _cons = new SelectConstructor();\n \n     private Class _type = null;\n     private ClassMetaData _meta = null;\n     private QueryExpressions _exps = null;\n+    private Select _select = null;\n \n     /**\n      * Constructor. Supply candidate, whether subclasses are included in\n@@ -57,7 +61,14 @@\n     public SubQ(ClassMapping candidate, boolean subs, String alias) {\n         _candidate = candidate;\n         _subs = subs;\n-        _alias = alias;\n+        _subqAlias = alias;\n+        _select = (((JDBCConfiguration) candidate.getMappingRepository().\n+            getConfiguration()).getSQLFactoryInstance().newSelect());\n+        _cons.setSubselect(_select);\n+    }\n+\n+    public Object getSelect() {\n+        return _select;\n     }\n \n     /**\n@@ -66,9 +77,21 @@ public SubQ(ClassMapping candidate, boolean subs, String alias) {\n     public ClassMapping getCandidate() {\n         return _candidate;\n     }\n+    \n+    public boolean getSubs() {\n+        return _subs;\n+    }\n+\n+    public void setSubqAlias(String subqAlias) {\n+        _subqAlias = subqAlias;\n+    }\n+    \n+    public String getSubqAlias() {\n+        return _subqAlias;\n+    }\n \n     public Class getType() {\n-        if (_exps != null) {\n+        if (_exps != null && _type == null) {\n             if (_exps.projections.length == 0)\n                 return _candidate.getDescribedType();\n             if (_exps.projections.length == 1)\n@@ -92,16 +115,20 @@ public void setMetaData(ClassMetaData meta) {\n     }\n \n     public String getCandidateAlias() {\n-        return _alias;\n+        return _subqAlias;\n     }\n \n     public void setQueryExpressions(QueryExpressions query) {\n         _exps = query;\n+        _select.setContext(query.ctx());\n     }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        if (_exps.projections.length == 1)\n-            return ((Val) _exps.projections[0]).initialize(sel, ctx, flags);\n+        Select select = JDBCStoreQuery.getThreadLocalSelect(_select);\n+        select.setParent(sel, null);\n+        if (_exps.projections.length == 1) {\n+            return ((Val) _exps.projections[0]).initialize(select, ctx, flags);\n+        }\n         return ExpState.NULL;\n     }\n \n@@ -132,7 +159,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n@@ -149,6 +176,22 @@ public Object load(ExpContext ctx, ExpState state, Result res)\n \n     public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n         Val other, ExpState otherState) {\n+        Value[] projs = _exps.projections;\n+        for (int i = 0; i < projs.length; i++) {\n+            if (projs[i] instanceof GeneralCaseExpression) {\n+                ((GeneralCaseExpression)projs[i]).setOtherPath(other);\n+                ((GeneralCaseExpression)projs[i]).setOtherState(otherState);\n+            } else if (projs[i] instanceof SimpleCaseExpression) {\n+                ((SimpleCaseExpression)projs[i]).setOtherPath(other);\n+                ((SimpleCaseExpression)projs[i]).setOtherState(otherState);\n+            } else if (projs[i] instanceof NullIfExpression) {\n+                ((NullIfExpression)projs[i]).setOtherPath(other);\n+                ((NullIfExpression)projs[i]).setOtherState(otherState);\n+            } else if (projs[i] instanceof CoalesceExpression) {\n+                ((CoalesceExpression)projs[i]).setOtherPath(other);\n+                ((CoalesceExpression)projs[i]).setOtherState(otherState);\n+            }\n+        }\n     }\n \n     public int length(Select sel, ExpContext ctx, ExpState state) {\n@@ -163,7 +206,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n     private void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index, boolean size) {\n         QueryExpressionsState substate = new QueryExpressionsState();\n-        Select sub = _cons.evaluate(ctx, sel, _alias, _exps, substate);\n+        Select sub = _cons.evaluate(ctx, sel, _subqAlias, _exps, substate);\n         _cons.select(sub, ctx, _candidate, _subs, _exps, substate, \n             JDBCFetchConfiguration.EAGER_NONE);\n "},{"sha":"ca6e3d54eb24560d0a3966c103838b7a80cc29b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -95,7 +95,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"ac4acf98434e1721195ef4355f08ad33780afab3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -122,7 +122,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"24965d8ec23a6c494f25f888793208beaa6c63ee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.util.InternalException;\n+\n+/**\n+ * Entity Type expression.\n+ *\n+ * @author Catalina Wei\n+ * @since 2.0.0\n+ */\n+class Type\n+    extends UnaryOp {\n+    \n+    Discriminator _disc = null;\n+\n+    public Type(Val val) {\n+        super(val);\n+        setMetaData(val.getMetaData());\n+        if (getMetaData() != null)\n+            _disc = ((ClassMapping) getMetaData()).getDiscriminator();\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        return initializeValue(sel, ctx, flags);\n+    }\n+\n+    public Object load(ExpContext ctx, ExpState state, Result res)\n+        throws SQLException {\n+        Object type = null;\n+        if (_disc != null && _disc.getColumns().length > 0) {\n+            type = res.getObject(_disc.getColumns()[0], null, state.joins);\n+            ClassMapping sup = (ClassMapping) getMetaData();\n+            ClassMapping[] subs = sup.getMappedPCSubclassMappings();\n+            for (ClassMapping sub : subs) {\n+                if (sub.getDiscriminator().getValue().equals(type))\n+                    return sub.getDescribedType();\n+            }\n+        }\n+        else\n+            type = getValue().load(ctx, state, res);\n+        return type.getClass();\n+    }\n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n+        Val other, ExpState otherState) {\n+        super.calculateValue(sel, ctx, state, null, null);\n+    }\n+\n+    public void select(Select sel, ExpContext ctx, ExpState state, \n+        boolean pks) {\n+        if (_disc != null && _disc.getColumns().length > 0)\n+            sel.select(_disc.getColumns(), state.joins);\n+        else\n+            getValue().select(sel, ctx, state, pks);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        getValue().calculateValue(sel, ctx, state, null, null);\n+        getValue().appendType(sel, ctx, state, sql);\n+        sel.append(sql, state.joins);\n+    }\n+\n+    protected Class getType(Class c) {\n+        return Class.class;\n+    }\n+\n+    protected String getOperator() {\n+        // since we override appendTo(), this method should never be called\n+        throw new InternalException();\n+    }\n+}"},{"sha":"1f56b8cf27cec357a9b8aa2c168b8436408cc3db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.Literal;\n+import org.apache.openjpa.meta.JavaTypes;\n+\n+/**\n+ * A type literal value.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class TypeLit\n+    extends Const\n+    implements Literal {\n+\n+    private Object _val;\n+    private int _ptype;\n+\n+    /**\n+     * Constructor. Supply literal value.\n+     */\n+    public TypeLit(Object val, int ptype) {\n+        _val = val;\n+        _ptype = ptype;\n+    }\n+\n+    public Class getType() {\n+        return (_val == null) ? Object.class : _val.getClass();\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _val = Filters.convert(_val, type);\n+    }\n+\n+    public int getParseType() {\n+        return _ptype;\n+    }\n+\n+    public Object getValue() { \n+        return _val;\n+    }\n+\n+    public void setValue(Object val) {\n+        _val = val;\n+    }\n+\n+    public Object getValue(Object[] params) {\n+        return getValue();\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n+        return new LitExpState();\n+    }\n+\n+    /**\n+     * Expression state.\n+     */\n+    private static class LitExpState\n+        extends ConstExpState {\n+\n+        public Object sqlValue;\n+        public int otherLength; \n+        public ClassMapping mapping = null;\n+        public Discriminator disc = null;\n+        public Object discValue = null;\n+    } \n+\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n+        Val other, ExpState otherState) {\n+        super.calculateValue(sel, ctx, state, other, otherState);\n+        LitExpState lstate = (LitExpState) state;\n+        lstate.mapping = (ClassMapping) getMetaData();\n+        lstate.disc = lstate.mapping.getDiscriminator();\n+        lstate.discValue = lstate.disc != null ? lstate.disc.getValue() :\n+            null;\n+        sel.select(((ClassMapping) getMetaData()).getPrimaryKeyColumns(),\n+            lstate.joins);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        LitExpState lstate = (LitExpState) state;\n+        if (lstate.otherLength > 1)\n+            sql.appendValue(((Object[]) lstate.sqlValue)[index], \n+                lstate.getColumn(index));\n+        else {\n+            if (lstate.discValue != null)                \n+                sql.append(getDiscriminator(lstate));\n+            else\n+                sql.append(\"1\");\n+        }\n+    }\n+\n+    private String getDiscriminator(LitExpState lstate) {\n+        StringBuffer disc = new StringBuffer(lstate.discValue.toString());\n+        switch(lstate.disc.getJavaType()) {\n+        case JavaTypes.INT:\n+            return disc.toString();\n+        case JavaTypes.CHAR:\n+        case JavaTypes.STRING:\n+        default:\n+            return disc.insert(0, \"'\").append(\"'\").toString();\n+        }        \n+    }\n+}"},{"sha":"d73cd458b53d40d893b79c8b983f1ce8912ee867","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -101,7 +101,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false, getSelectAs());\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"0edfc5222948b3599cd77f3a2a2b93ce2068f366","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -51,6 +51,12 @@\n      */\n     public final int FORCE_OUTER = 2 << 2; \n \n+    /**\n+     * Initialization flag indicating to this value is for compare/equal \n+     * path.\n+     */\n+    public final int CMP_EQUAL = 2 << 3; \n+\n     public final int VAL = 0;\n     public final int MATH_VAL = 1;\n     public final int CONCAT_VAL = 2;\n@@ -64,6 +70,12 @@\n     public final int INDEXOF_VAL = 10;\n     public final int ABS_VAL = 11;\n     public final int SQRT_VAL = 12;\n+    public final int SIMPLECASE_VAL = 13;\n+    public final int GENERALCASE_VAL = 14;\n+    public final int WHENCONDITION_VAL = 15;\n+    public final int WHENSCALAR_VAL = 16;\n+    public final int COALESCE_VAL = 17;\n+    public final int NULLIF_VAL = 18;\n \n     /**\n      * Initialize the value. This method should recursively initialize any\n@@ -140,6 +152,18 @@ public void appendIsEmpty(Select sel, ExpContext ctx, ExpState state,\n     public void appendIsNotEmpty(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql);\n \n+    /**\n+     * Append the SQL checking the index of this value.\n+     */\n+    public void appendIndex(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql);\n+\n+    /**\n+     * Append the SQL checking the type of this value.\n+     */\n+    public void appendType(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql);\n+\n     /**\n      * Append the SQL checking the size of this value.\n      */\n@@ -160,4 +184,6 @@ public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state,\n         SQLBuffer sql);\n \n     public int getId();\n+\n+    public Value getSelectAs();\n }"},{"sha":"a65ad355e1c2ab32e5cc4962231bcb982abf4fd7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -24,6 +24,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -32,7 +33,7 @@\n  * only called if the variable is bound but otherwise unused in the filter,\n  * in which case we must at least make the joins to the variable because the\n  * act of binding a variable should at least guarantee that an instance\n- * represting the variable could exist (i.e. the binding collection is not\n+ * representing the variable could exist (i.e. the binding collection is not\n  * empty).\n  *\n  * @author Abe White\n@@ -41,7 +42,7 @@\n     extends AbstractVal {\n \n     private final String _name;\n-    private final Class _type;\n+    private Class _type;\n     private ClassMetaData _meta;\n     private PCPath _path = null;\n     private Class _cast = null;\n@@ -75,6 +76,10 @@ public PCPath getPCPath() {\n         return _path;\n     }\n \n+    public Path getPath() {\n+        return _path;\n+    }\n+\n     /**\n      * Set the path this variable is aliased to.\n      */\n@@ -88,6 +93,8 @@ public ClassMetaData getMetaData() {\n \n     public void setMetaData(ClassMetaData meta) {\n         _meta = meta;\n+        if (meta != null)\n+            _type = meta.getDescribedType();\n     }\n \n     public boolean isVariable() {"},{"sha":"cc3215248655146a4dfc66a188ed65c269dd7826","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenCondition.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenCondition.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenCondition.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenCondition.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+\n+/**\n+ * Value produced by a when_clause of a case expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class WhenCondition\n+    implements Exp {\n+\n+    private final Exp _exp;\n+    private final Val _val;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public WhenCondition(Exp exp, Val val) {\n+        _exp = exp;\n+        _val = val;\n+    }\n+\n+    public Exp getExp() {\n+        return _exp;\n+    }\n+\n+    public Val getVal() {\n+        return _val;\n+    }\n+\n+    public Class getType() {\n+        return _val.getType();\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n+        ExpState s1 = _exp.initialize(sel, ctx, contains);\n+        ExpState s2 = _val.initialize(sel, ctx, 0);\n+        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer buf) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+\n+        buf.append(\" WHEN \");\n+\n+        _exp.appendTo(sel, ctx, bstate.state1, buf);\n+        buf.append(\" THEN \");\n+        _val.appendTo(sel, ctx, bstate.state2, buf, 0);\n+\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n+        boolean pks) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+        _exp.selectColumns(sel, ctx, bstate.state1, pks);\n+        _val.selectColumns(sel, ctx, bstate.state2, pks);\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp.acceptVisit(visitor);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n+\n+    public int getId() {\n+        return Val.WHENCONDITION_VAL;\n+    }\n+}\n+"},{"sha":"4522de01e37ca66a860e291bea9479ca653145ee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenScalar.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenScalar.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenScalar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/WhenScalar.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+\n+/**\n+ * Value produced by a when_clause of a case expression.\n+ *\n+ * @author Catalina Wei\n+ */\n+public class WhenScalar\n+    implements Exp {\n+\n+    private final Val _val1;\n+    private final Val _val2;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public WhenScalar(Val val1, Val val2) {\n+        _val1 = val1;\n+        _val2 = val2;\n+    }\n+\n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n+    public Class getType() {\n+        return _val2.getType();\n+    }\n+\n+    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n+        ExpState s1 = _val1.initialize(sel, ctx, 0);\n+        ExpState s2 = _val2.initialize(sel, ctx, 0);\n+        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer buf) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+        _val1.appendTo(sel, ctx, bstate.state1, buf, 0);\n+        buf.append(\" THEN \");\n+        _val2.appendTo(sel, ctx, bstate.state2, buf, 0);\n+    }\n+\n+    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n+        boolean pks) {\n+        BinaryOpExpState bstate = (BinaryOpExpState) state;\n+        _val1.selectColumns(sel, ctx, bstate.state1, pks);\n+        _val2.selectColumns(sel, ctx, bstate.state2, pks);\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n+\n+    public int getId() {\n+        return Val.WHENSCALAR_VAL;\n+    }\n+}\n+"},{"sha":"484f17da05c34a93454e8ae5290f63823f0ad808","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":144,"deletions":25,"changes":169,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -22,15 +22,15 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -52,10 +52,10 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.ApplicationIds;\n+import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n-import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Specialization of metadata for relational databases.\n@@ -86,7 +86,7 @@\n     private ClassMapping[] _assignMaps = null;\n \n     // maps columns to joinables\n-    private final Map _joinables = Collections.synchronizedMap(new HashMap());\n+    private final Map _joinables = new ConcurrentHashMap();\n \n     /**\n      * Constructor. Supply described type and owning repository.\n@@ -171,14 +171,15 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         FieldMapping fm;\n         Joinable join;\n         int pkIdx;\n+        boolean canReadDiscriminator = true;\n         for (int i = 0; i < pks.length; i++) {\n             // we know that all pk column join mappings use primary key fields,\n             // cause this mapping uses the oid as its primary key (we recursed\n             // at the beginning of the method to ensure this)\n             join = assertJoinable(pks[i]);\n             fm = getFieldMapping(join.getFieldIndex());\n             pkIdx = fm.getPrimaryKeyIndex();\n-\n+            canReadDiscriminator &= isSelfReference(fk, join.getColumns()); \n             // could have already set value with previous multi-column joinable\n             if (vals[pkIdx] == null) {\n                 res.startDataRequest(fm);\n@@ -193,8 +194,13 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         // the oid data is loaded by the base type, but if discriminator data\n         // is present, make sure to use it to construct the actual oid instance\n         // so that we get the correct app id class, etc\n+        \n+        // Discriminator refers to the row but the vals[] may hold data that\n+        // refer to another row. Then there is little point reading the disc\n+        // value\n+\n         ClassMapping dcls = cls;\n-        if (subs) {\n+        if (subs && canReadDiscriminator) {\n             res.startDataRequest(cls.getDiscriminator());\n             try {\n                 Class dtype = cls.getDiscriminator().getClass(store, cls, res);\n@@ -213,6 +219,15 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         }\n         return oid;\n     }\n+    \n+    boolean isSelfReference(ForeignKey fk, Column[] cols) {\n+    \tif (fk == null)\n+    \t\treturn true;\n+    \tfor (Column col : cols)\n+    \t\tif (fk.getColumn(col) != col)\n+    \t\t\treturn false;\n+    \treturn true;\n+    }\n \n     /**\n      * Return the given column value(s) for the given object. The given\n@@ -228,12 +243,19 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         // from other persistence contexts, so try to get sm directly from\n         // instance before asking our context\n         OpenJPAStateManager sm;\n-        if (ImplHelper.isManageable(obj))\n-            sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(obj,\n-                getRepository().getConfiguration()))\n-                .pcGetStateManager();\n-        else\n+        if (ImplHelper.isManageable(obj)) {\n+        \tPersistenceCapable pc = ImplHelper.toPersistenceCapable(obj,\n+                    getRepository().getConfiguration());\n+            sm = (OpenJPAStateManager) pc.pcGetStateManager();\n+            if (sm == null) {\n+            \tret = getValueFromUnmanagedInstance(obj, cols, true);\n+            } else if (sm.isDetached()) {\n+            \tobj = store.getContext().find(sm.getObjectId(), false, null);\n+            \tsm = store.getContext().getStateManager(obj);\n+            }\n+        } else {\n             sm = store.getContext().getStateManager(obj);\n+        }\n         if (sm == null)\n             return ret;\n \n@@ -247,7 +269,7 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         }\n         return ret;\n     }\n-\n+    \n     /**\n      * Return the joinable for the given column, or throw an exception if\n      * none is available.\n@@ -392,17 +414,22 @@ public void setTable(Table table) {\n      * class uses to link to its superclass table.\n      */\n     public Column[] getPrimaryKeyColumns() {\n-        if (_cols.length == 0 && getIdentityType() == ID_APPLICATION\n-            && isMapped()) {\n-            FieldMapping[] pks = getPrimaryKeyFieldMappings();\n-            Collection cols = new ArrayList(pks.length);\n-            Column[] fieldCols;\n-            for (int i = 0; i < pks.length; i++) {\n-                fieldCols = pks[i].getColumns();\n-                for (int j = 0; j < fieldCols.length; j++)\n-                    cols.add(fieldCols[j]);\n+        if (getIdentityType() == ID_APPLICATION && isMapped()) {\n+            if (_cols.length == 0) {\n+                FieldMapping[] pks = getPrimaryKeyFieldMappings();\n+                Collection cols = new ArrayList(pks.length);\n+                Column[] fieldCols;\n+                for (int i = 0; i < pks.length; i++) {\n+                    fieldCols = pks[i].getColumns();\n+                    if (fieldCols.length == 0) {\n+                        _cols = new Column[0];\n+                        return _cols;\n+                    }\n+                    for (int j = 0; j < fieldCols.length; j++)\n+                        cols.add(fieldCols[j]);\n+                }\n+                _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n             }\n-            _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n         }\n         return _cols;\n     }\n@@ -800,9 +827,29 @@ protected void resolveMapping(boolean runtime) {\n         // recursion, then resolve all fields\n         resolveNonRelationMappings();\n         FieldMapping[] fms = getFieldMappings();\n-        for (int i = 0; i < fms.length; i++)\n-            if (fms[i].getDefiningMetaData() == this)\n+        for (int i = 0; i < fms.length; i++) {\n+            if (fms[i].getDefiningMetaData() == this) {\n+                boolean fill = getMappingRepository().getMappingDefaults().\n+                    defaultMissingInfo();\n+                ForeignKey fk = fms[i].getForeignKey();\n+                if (fill && fk != null && \n+                    fk.getPrimaryKeyColumns().length == 0) { \n+                    // set resolve mode to force this field mapping to be \n+                    // resolved again. The need to resolve again occurs when \n+                    // a primary key is a relation field with the foreign key\n+                    // annotation. In this situation, this primary key field\n+                    // mapping is resolved during the call to \n+                    // resolveNonRelationMapping. Since it is a relation\n+                    // field, the foreign key will be constructed. However, \n+                    // the primary key of the parent entity may not have been \n+                    // resolved yet, resulting in missing information in the fk\n+                    fms[i].setResolve(MODE_META); \n+                    if (fms[i].getStrategy() != null)\n+                        fms[i].getStrategy().map(false);\n+                }                \n                 fms[i].resolve(MODE_MAPPING);\n+            }\n+        }\n         fms = getDeclaredUnmanagedFieldMappings();\n         for (int i = 0; i < fms.length; i++)\n             fms[i].resolve(MODE_MAPPING);\n@@ -979,4 +1026,76 @@ private ClassStrategy assertStrategy() {\n             throw new InternalException();\n         return _strategy;\n     }\n+    \n+    /**\n+     * Find the field mappings that correspond to the given columns.\n+     * \n+     * @return null if no columns are given or no field mapping uses the given\n+     * columns.\n+     */\n+    private List<FieldMapping> getFieldMappings(Column[] cols, boolean prime) {\n+    \tif (cols == null || cols.length == 0)\n+    \t\treturn null;\n+    \tList<FieldMapping> result = null;\n+    \tfor (Column c : cols) {\n+    \t\tList<FieldMapping> fms = hasColumn(c, prime);\n+    \t\tif (fms == null) continue;\n+\t\t\tif (result == null)\n+\t\t\t\tresult = new ArrayList<FieldMapping>();\n+\t\t\tfor (FieldMapping fm : fms)\n+\t\t\t\tif (!result.contains(fm))\n+\t\t\t\t\tresult.add(fm);\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    /**\n+     * Looks up in reverse to find the list of field mappings that include the\n+     * given column. Costly.\n+     * \n+     * @return null if no field mappings carry this column. \n+     */\n+    private List<FieldMapping> hasColumn(Column c, boolean prime) {\n+    \tList<FieldMapping> result = null;\n+    \tFieldMapping[] fms = (prime) ? \n+    \t\tgetPrimaryKeyFieldMappings() : getFieldMappings();\n+    \tfor (FieldMapping fm : fms) {\n+    \t\tColumn[] cols = fm.getColumns();\n+    \t\tif (contains(cols, c)) {\n+    \t\t\tif (result == null)\n+    \t\t\t\tresult = new ArrayList<FieldMapping>();\n+    \t\t\tresult.add(fm);\n+    \t\t}\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    boolean contains(Column[] cols, Column c) {\n+    \tfor (Column col : cols)\n+    \t\tif (col == c)\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    /**\n+     * Gets the field values of the given instance for the given columns.\n+     * The given columns are used to identify the fields by a reverse lookup.\n+     *  \n+     * @return a single object or an array of objects based on number of \n+     * fields the given columns represent.\n+     */\n+    private Object getValueFromUnmanagedInstance(Object obj, Column[] cols, \n+    \t\tboolean prime) {\n+    \tList<FieldMapping> fms = getFieldMappings(cols, prime);\n+    \tif (fms == null)\n+    \t\treturn null;\n+    \tif (fms.size() == 1)\n+    \t\treturn Reflection.getValue(obj, fms.get(0).getName(), true);\n+    \tObject[] result = new Object[fms.size()];\n+    \tint i = 0;\n+    \tfor (FieldMapping fm : fms) {\n+    \t\tresult[i++] = Reflection.getValue(obj, fm.getName(), true);\n+    \t}\n+    \treturn result;\n+    }\n }"},{"sha":"e403bf34c530235f7c4576b156ebb9c93159e484","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":34,"deletions":12,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -66,6 +67,9 @@\n     private File _file = null;\n     private int _srcType = SRC_OTHER;\n     private String[] _comments = null;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n+    \n     // Unique constraints indexed by primary or secondary table name\n     private Map<String,List<Unique>> _uniques;\n \n@@ -229,7 +233,7 @@ public void setSecondaryTableJoinColumns(String tableName, List cols) {\n         if (cols == null)\n             cols = Collections.EMPTY_LIST;\n         if (_seconds == null)\n-            _seconds = new HashMap();\n+            _seconds = new LinkedHashMap();\n         _seconds.put(tableName, cols);\n     }\n     \n@@ -362,7 +366,7 @@ public void copy(MappingInfo info) {\n         if (cinfo._uniques != null) {\n         \tif (_uniques == null)\n         \t\t_uniques = new HashMap<String, List<Unique>>();\n-        \tfor (Entry<String, List<Unique>> entry : cinfo._uniques.entrySet())\n+        for (Entry<String, List<Unique>> entry : cinfo._uniques.entrySet())\n         \t\tif (!_uniques.containsKey(entry.getKey()))\n         \t\t\t_uniques.put(entry.getKey(), entry.getValue());\n         }\n@@ -378,9 +382,9 @@ public void copy(MappingInfo info) {\n     public void addUnique(String table, Unique unique) {\n     \tif (!StringUtils.equals(_tableName, table) &&\n     \t   (_seconds == null || !_seconds.containsKey(table))) {\n-    \t   \t\tthrow new UserException(_loc.get(\"unique-no-table\", \n-    \t   \t\t\tnew Object[]{table, _className, _tableName, \n-    \t   \t\t\t\t((_seconds == null) ? \"\" : _seconds.keySet())}));\n+            throw new UserException(_loc.get(\"unique-no-table\", \n+                    new Object[]{table, _className, _tableName, \n+                    ((_seconds == null) ? \"\" : _seconds.keySet())}));\n     \t}\n     \tif (unique == null)\n     \t\treturn;\n@@ -421,16 +425,17 @@ public void addUnique(String table, Unique unique) {\n         \tList<Unique> uniqueConstraints = _uniques.get(tableName);\n         \tfor (Unique template : uniqueConstraints) {\n         \t\tColumn[] templateColumns = template.getColumns();\n-        \t\tColumn[] uniqueColumns = new Column[templateColumns.length];\n-        \t\tTable table = getTable((ClassMapping)cm, tableName, adapt);\n+                Column[] uniqueColumns = new Column[templateColumns.length];\n+                Table table = getTable((ClassMapping)cm, tableName, adapt);\n         \t\tfor (int i=0; i<uniqueColumns.length; i++) {\n-        \t\t\tString columnName = templateColumns[i].getName();\n+                    String columnName = templateColumns[i].getName();\n         \t\t\tif (!table.containsColumn(columnName)) {\n-        \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\", \n-                           new Object[]{cm, columnName, tableName, \n-        \t\t\t\t\t\tArrays.toString(table.getColumnNames())}));\n+                        throw new UserException(_loc.get(\n+                                \"unique-missing-column\", \n+                                new Object[]{cm, columnName, tableName, \n+                                Arrays.toString(table.getColumnNames())}));\n         \t\t\t}\n-        \t\t\tColumn uniqueColumn = table.getColumn(columnName);\n+                    Column uniqueColumn = table.getColumn(columnName);\n         \t\t\tuniqueColumns[i] = uniqueColumn;\n         \t\t}\n         \t\tUnique unique = createUnique(cm, \"unique\", template,  \n@@ -470,4 +475,21 @@ public String getResourceName() {\n     public void setComments(String[] comments) {\n         _comments = comments;\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n+    \n }"},{"sha":"a4d8f5eb165c8c8c60c7a960c2805d6aeeae01af","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":289,"deletions":1,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -19,10 +19,14 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.sql.SQLException;\n+import java.util.List;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.PrimitiveFieldStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -38,12 +42,16 @@\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.ObjectId;\n \n /**\n  * Specialization of metadata for relational databases.\n@@ -71,7 +79,20 @@\n     private boolean _outer = false;\n     private int _fetchMode = Integer.MAX_VALUE;\n     private Unique[] _joinTableUniques; // Unique constraints on JoinTable\n+    private Boolean _bidirectionalJoinTableOwner = null;\n+    private Boolean _bidirectionalJoinTableNonOwner = null;\n     \n+    private Boolean _bi_MTo1_JT = null;\n+    private Boolean _uni_1ToM_FK = null;\n+    private Boolean _uni_MTo1_JT = null;\n+    private Boolean _uni_1To1_JT = null;\n+    private Boolean _bi_1To1_JT = null;\n+    \n+    private FieldMapping _bi_1ToM_JT_Field = null;\n+    private FieldMapping _bi_MTo1_JT_Field = null;\n+    private ForeignKey _bi_1ToM_Join_FK = null;\n+    private ForeignKey _bi_1ToM_Elem_FK = null;\n+        \n     /**\n      * Constructor.\n      */\n@@ -139,6 +160,23 @@ public Table getTable() {\n             return _fk.getTable();\n         if (_val.getForeignKey() != null)\n             return _val.getForeignKey().getTable();\n+        \n+        // if this is a map of bi-directional relation,\n+        // the column of this field should be in the table \n+        // of the entity that is the value of the map\n+        if (_val.getDeclaredTypeCode() == JavaTypes.MAP) {\n+            ClassMapping meta = _elem.getDeclaredTypeMapping();\n+            if (meta != null)\n+                return meta.getTable();\n+        }\n+        \n+        ValueMappingImpl vm = (ValueMappingImpl)getDefiningMapping().\n+            getEmbeddingMetaData();\n+        if (vm != null && vm.getValueMappedBy() != null) {\n+            return vm.getFieldMapping().getElementMapping().\n+                getDeclaredTypeMapping().getTable();\n+        }\n+        \n         return getDefiningMapping().getTable();\n     }\n \n@@ -498,7 +536,7 @@ public void copyMappingInfo(FieldMapping fm) {\n     private void initializeMapping() {\n         _val.resolve(MODE_MAPPING_INIT);\n         _key.resolve(MODE_MAPPING_INIT);\n-        _val.resolve(MODE_MAPPING_INIT);\n+        _elem.resolve(MODE_MAPPING_INIT);\n         if (_strategy != null)\n             _strategy.initialize();\n     }\n@@ -556,6 +594,7 @@ public void mapJoin(boolean adapt, boolean joinRequired) {\n             _unq = _info.getJoinUnique(this, false, adapt);\n             _joinTableUniques = _info.getJoinTableUniques(this, false, adapt);\n             _idx = _info.getJoinIndex(this, adapt);\n+            table.setAssociation();\n         }\n     }\n \n@@ -576,9 +615,81 @@ public void initialize() {\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n+    \tsetPKValueFromMappedByIdField(sm);\n         assertStrategy().insert(sm, store, rm);\n     }\n \n+    private void setPKValueFromMappedByIdField(OpenJPAStateManager sm) {\n+        if (sm instanceof StateManagerImpl) {\n+            List mappedByIdFields = ((StateManagerImpl)sm).\n+                getMappedByIdFields();\n+            if (mappedByIdFields == null)\n+                return;\n+            if (!mappedByIdFields.contains(this))\n+                return;\n+            if (!isMappedById()) \n+                return;\n+            PersistenceCapable pc = (PersistenceCapable)sm.\n+                fetchObject(getIndex());\n+            if (pc == null)\n+                return;\n+            StateManagerImpl pkSm = (StateManagerImpl)pc.\n+                pcGetStateManager();\n+            Object pkVal = getPKValue(pkSm);\n+            if (pkVal == null)\n+                return;\n+            setPKValue((StateManagerImpl)sm, pkVal);\n+            sm.setObjectId(\n+            ApplicationIds.create(sm.getPersistenceCapable(), \n+                sm.getMetaData()));\n+        }\n+    }\n+    \n+    private Object getPKValue(StateManagerImpl pkSm) {\n+        ClassMetaData pkMeta = pkSm.getMetaData();\n+        FieldMetaData[] fmds = pkMeta.getPrimaryKeyFields();\n+        // MappedById is for single value primary key or embeddable id\n+        if (fmds.length == 0)\n+            return null;\n+        else \n+            return ApplicationIds.getKey(pkSm.getObjectId(), pkMeta);\n+    }\n+    \n+    private void setPKValue(StateManagerImpl sm, Object pkVal) {\n+        ClassMetaData meta = sm.getMetaData();\n+        FieldMetaData[] fmds = meta.getPrimaryKeyFields();\n+        if (fmds.length == 0)\n+            return;\n+\n+        Strategy strat = ((FieldMapping)fmds[0]).getStrategy();\n+        // single value primary key\n+        if (strat instanceof PrimitiveFieldStrategy) \n+            ((PrimitiveFieldStrategy)strat).setAutoAssignedValue(sm, null, null,\n+            pkVal);\n+        else {\n+            //composite key\n+            String mappedByIdFieldName = getMappedByIdValue();\n+            if (mappedByIdFieldName != null && \n+                mappedByIdFieldName.length() > 0) {\n+                //The name of the attribute within the composite key to which \n+                //the relationship attribute corresponds.\n+                Object target = ((ObjectId)sm.getObjectId()).getId();\n+                if (target == null)\n+                    return;\n+                setMappedByIdValue(target, pkVal, mappedByIdFieldName);\n+                pkVal = target;\n+            }\n+            sm.storeObjectField(fmds[0].getIndex(), pkVal);\n+        }\n+    }\n+    \n+    public void setMappedByIdValue(Object target, \n+        Object val, String mappedByIdFieldName) {\n+        Reflection.set(target, \n+            Reflection.findField(target.getClass(), mappedByIdFieldName, true), \n+            val);\n+    }\n+\n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         assertStrategy().update(sm, store, rm);\n@@ -847,6 +958,14 @@ public void appendSize(SQLBuffer sql, Select sel, Joins joins) {\n         assertStrategy().appendSize(sql, sel, joins);\n     }\n \n+    public void appendIndex(SQLBuffer sql, Select sel, Joins joins) {\n+        assertStrategy().appendIndex(sql, sel, joins);\n+    }\n+\n+    public void appendType(SQLBuffer sql, Select sel, Joins joins) {\n+        assertStrategy().appendType(sql, sel, joins);\n+    }\n+\n     public Joins join(Joins joins, boolean forceOuter) {\n         return assertStrategy().join(joins, forceOuter);\n     }\n@@ -1047,4 +1166,173 @@ public void mapConstraints(String name, boolean adapt) {\n     public void copyMappingInfo(ValueMapping vm) {\n         _val.copyMappingInfo(vm);\n     }\n+    \n+    /**\n+     * Affirms if this field is the owning side of a bidirectional relation\n+     * with a join table. Evaluated only once and the result cached for \n+     * subsequent call. Hence must be called after resolution.\n+     */\n+    public boolean isBidirectionalJoinTableMappingOwner() {\n+    \tif (_bidirectionalJoinTableOwner != null)\n+    \t\treturn _bidirectionalJoinTableOwner.booleanValue();\n+    \t\n+    \t_bidirectionalJoinTableOwner = false;\n+        ForeignKey fk = getForeignKey();\n+        if (fk != null) \n+        \treturn false;\n+        ForeignKey jfk = getJoinForeignKey();\n+        if (jfk == null) \n+        \treturn false;\n+        FieldMapping mappedBy = getValueMappedByMapping();\n+        if (mappedBy != null) \n+        \treturn false;\n+        ValueMapping elem = getElementMapping();\n+        if (elem == null) \n+        \treturn false;\n+        ClassMapping relType = elem.getDeclaredTypeMapping();\n+        if (relType == null) \n+        \treturn false;\n+        FieldMapping[] relFmds = relType.getFieldMappings();\n+        for (int i=0; i<relFmds.length;i++) {\n+            FieldMapping rfm = relFmds[i];\n+            if (rfm.getDeclaredTypeMetaData() == getDeclaringMapping()) {\n+        \t\tForeignKey rjfk = rfm.getJoinForeignKey();\n+        \t\tif (rjfk == null) \n+        \t\t    continue;\n+                if (rjfk.getTable() == jfk.getTable() &&\n+                        jfk.getTable().getColumns().length ==\n+                        jfk.getColumns().length + rjfk.getColumns().length) {\n+        \t\t\t_bidirectionalJoinTableOwner = true;\n+        \t\t\tbreak;\n+        \t\t}\n+        \t}\n+        }\n+        return _bidirectionalJoinTableOwner.booleanValue();\n+    }\n+    \n+    /**\n+     * Affirms if this field is the non-owning side of a bidirectional relation\n+     * with a join table. Evaluated only once and the result cached for \n+     * subsequent call. Hence must be called after resolution.\n+     */\n+    public boolean isBidirectionalJoinTableMappingNonOwner() {\n+    \tif (_bidirectionalJoinTableNonOwner != null)\n+    \t\treturn _bidirectionalJoinTableNonOwner.booleanValue();\n+    \t\n+    \t_bidirectionalJoinTableNonOwner = false;\n+        ForeignKey fk = getForeignKey();\n+        if (fk == null) \n+        \treturn false;\n+        ForeignKey jfk = getJoinForeignKey();\n+        if (jfk == null) \n+        \treturn false;\n+        FieldMapping mappedBy = getValueMappedByMapping();\n+        if (mappedBy != null) \n+        \treturn false;\n+        ValueMapping elem = getElementMapping();\n+        if (elem == null) \n+        \treturn false;\n+        ClassMapping relType = getDeclaredTypeMapping();\n+        if (relType == null) \n+        \treturn false;\n+        FieldMapping[] relFmds = relType.getFieldMappings();\n+        for (int i=0; i<relFmds.length;i++) {\n+            FieldMapping rfm = relFmds[i];\n+            ValueMapping relem = rfm.getElementMapping();\n+            if (relem != null && relem.getDeclaredTypeMapping() ==\n+                    getDeclaringMapping()) {\n+        \t\tForeignKey rjfk = rfm.getJoinForeignKey();\n+        \t\tif (rjfk == null) \n+        \t\t    continue;\n+        \t\tif (rjfk.getTable() == jfk.getTable() && \n+        \t\t        jfk.getTable().getColumns().length ==\n+                        jfk.getColumns().length + rjfk.getColumns().length) {\n+        \t\t\t_bidirectionalJoinTableNonOwner = true;\n+        \t\t\tbreak;\n+        \t\t}\n+        \t}\n+        }\n+        return _bidirectionalJoinTableNonOwner.booleanValue();\n+    }\n+    \n+    public boolean isBiMTo1JT() {\n+        if (_bi_MTo1_JT == null) {\n+            _bi_MTo1_JT = getMappingRepository().isBiMTo1JT(this);\n+        }\n+        return _bi_MTo1_JT;\n+    }\n+\n+    public boolean isUni1ToMFK() {\n+        if (_uni_1ToM_FK == null)\n+            _uni_1ToM_FK = getMappingRepository().isUni1ToMFK(this);\n+        return _uni_1ToM_FK;\n+    }\n+    \n+    public boolean isUniMTo1JT() {\n+        if (_uni_MTo1_JT == null)\n+            _uni_MTo1_JT = getMappingRepository().isUniMTo1JT(this);\n+        return _uni_MTo1_JT;\n+    }\n+\n+    public boolean isUni1To1JT() {\n+        if (_uni_1To1_JT == null)\n+            _uni_1To1_JT = getMappingRepository().isUni1To1JT(this);\n+        return _uni_1To1_JT;\n+    }\n+\n+    public boolean isBi1To1JT() {\n+        if (_bi_1To1_JT == null)\n+            _bi_1To1_JT = getMappingRepository().isBi1To1JT(this);\n+        return _bi_1To1_JT;\n+    }\n+    \n+    public FieldMapping getBi_1ToM_JTField() {\n+        if (_bi_1ToM_JT_Field == null) {\n+            _bi_1ToM_JT_Field = getMappingRepository().getBi_1ToM_JoinTableField(this);\n+        }\n+        return _bi_1ToM_JT_Field;\n+    }\n+    \n+    public FieldMapping getBi_MTo1_JTField() {\n+        if (_bi_MTo1_JT_Field == null) {\n+            _bi_MTo1_JT_Field = getMappingRepository().getBi_MTo1_JoinTableField(this);\n+        }\n+        return _bi_MTo1_JT_Field;\n+    }\n+\n+    public ForeignKey getBi1ToMJoinFK() {\n+        if (_bi_1ToM_Join_FK == null) {\n+            getBi_1ToM_JTField();\n+            if (_bi_1ToM_JT_Field != null)\n+                _bi_1ToM_Join_FK = _bi_1ToM_JT_Field.getJoinForeignKey();\n+        }\n+        return _bi_1ToM_Join_FK;\n+    }\n+    \n+    public ForeignKey getBi1ToMElemFK() {\n+        if (_bi_1ToM_Elem_FK == null) {\n+            getBi_1ToM_JTField();\n+            if (_bi_1ToM_JT_Field != null)\n+                _bi_1ToM_Elem_FK = _bi_1ToM_JT_Field.getElementMapping().getForeignKey();\n+        }\n+        return _bi_1ToM_Elem_FK;\n+    }\n+    \n+    public void setBi1MJoinTableInfo() {\n+        if (getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n+            FieldMapping mapped = getBi_MTo1_JTField();\n+            if (mapped != null) {\n+                FieldMappingInfo info = getMappingInfo();\n+                FieldMappingInfo mappedInfo = mapped.getMappingInfo();\n+                info.setTableName(mappedInfo.getTableName());\n+                info.setColumns(mapped.getElementMapping().getValueInfo().getColumns());\n+                getElementMapping().getValueInfo().setColumns(\n+                    mappedInfo.getColumns());\n+            }\n+        }\n+    }\n+   \n+    public boolean isNonDefaultMappingUsingJoinTableStrategy() {\n+        return isBi1To1JT() || isUni1To1JT() || isUniMTo1JT() || isBiMTo1JT();\n+    }\n }"},{"sha":"f097f0989e281aa2bc394f0f6a607032f2179ece","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"modified","additions":55,"deletions":12,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -22,6 +22,8 @@\n import java.util.Collection;\n import java.util.List;\n \n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.jdbc.meta.strats.MapTableFieldStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -35,7 +37,6 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.MetaDataException;\n-import org.apache.openjpa.util.UserException;\n \n /**\n  * Information about the mapping from a field to the schema, in raw form.\n@@ -58,7 +59,7 @@\n     private Column _orderCol = null;\n     private boolean _canOrderCol = true;\n     private String[] _comments = null;\n-    private List<Unique> _joinTableUniques; // Unique constraints on the JoinTable\n+    private List<Unique> _joinTableUniques; // Unique constraints on JoinTable\n \n     /**\n      * The user-supplied name of the table for this field.\n@@ -147,17 +148,39 @@ public String get(Schema schema) {\n         }, schemaName, tableName, adapt);\n     }\n \n+    public ForeignKey getJoinForeignKey (final FieldMapping field, Table table,\n+        boolean adapt) {\n+        if (field.isUni1ToMFK()) {\n+            List cols = field.getElementMapping().getValueInfo().getColumns();\n+            return getJoin(field, table, adapt, cols);\n+        }\n+        return null;\n+    }\n+    \n     /**\n      * Return the join from the field table to the owning class table.\n      */\n     public ForeignKey getJoin(final FieldMapping field, Table table,\n         boolean adapt) {\n         // if we have no join columns defined, check class-level join\n-        List cols = getColumns();\n-        if (cols.isEmpty())\n-            cols = field.getDefiningMapping().getMappingInfo().\n+    \t// if the given field is embedded then consider primary table of owner\n+        return getJoin(field, table, adapt, getColumns());\n+    }\n+    \n+    public ForeignKey getJoin(final FieldMapping field, Table table,\n+            boolean adapt, List cols) {\n+        if (cols.isEmpty()) {\n+        \tClassMapping mapping;\n+        \tif (field.isEmbedded() && \n+                    field.getDeclaringMapping().getEmbeddingMapping() != null) {\n+                mapping = field.getDeclaringMapping().getEmbeddingMapping()\n+        \t\t\t.getFieldMapping().getDeclaringMapping();\n+        \t} else {\n+        \t\tmapping = field.getDefiningMapping();\n+        \t}\n+            cols = mapping.getMappingInfo().\n                 getSecondaryTableJoinColumns(_tableName);\n-\n+        }\n         ForeignKeyDefaults def = new ForeignKeyDefaults() {\n             public ForeignKey get(Table local, Table foreign, boolean inverse) {\n                 return field.getMappingRepository().getMappingDefaults().\n@@ -171,11 +194,20 @@ public void populate(Table local, Table foreign, Column col,\n                         pos, cols);\n             }\n         };\n-        ClassMapping cls = field.getDefiningMapping();\n+        ClassMapping cls = getDefiningMapping(field);\n         return createForeignKey(field, \"join\", cols, def, table, cls, cls,\n             false, adapt);\n     }\n-\n+    \n+    private ClassMapping getDefiningMapping(FieldMapping field) {\n+        ClassMapping clm = field.getDefiningMapping();\n+        ValueMappingImpl value = (ValueMappingImpl)clm.getEmbeddingMetaData();\n+        if (value == null)\n+            return clm;\n+        FieldMapping field1 = value.getFieldMapping();\n+        return getDefiningMapping(field1);\n+    }\n+    \n     /**\n      * Unique constraint on the field join.\n      */\n@@ -268,15 +300,25 @@ public Column getOrderColumn(FieldMapping field, Table table,\n             return null;\n \n         Column tmplate = new Column();\n-        tmplate.setName(\"ordr\");\n+        // Compatibility option determines what should be used for\n+        // the default order column name\n+        if (field.getMappingRepository().getConfiguration()\n+            .getCompatibilityInstance().getUseJPA2DefaultOrderColumnName()) {\n+            // Use the same strategy as column to build the field name\n+            tmplate.setName(field.getName() + \"_ORDER\");            \n+        } else {        \n+            tmplate.setName(\"ordr\");\n+        }\n+        \n         tmplate.setJavaType(JavaTypes.INT);\n         if (!def.populateOrderColumns(field, table, new Column[]{ tmplate })\n             && _orderCol == null)\n             return null;\n \n-        if (_orderCol != null && (_orderCol.getFlag(Column.FLAG_UNINSERTABLE)\n-            || _orderCol.getFlag(Column.FLAG_UNUPDATABLE))) {\n+        if (_orderCol != null) {\n             ColumnIO io = new ColumnIO();\n+            io.setNullInsertable(0, !_orderCol.isNotNull());\n+            io.setNullUpdatable(0, !_orderCol.isNotNull());\n             io.setInsertable(0, !_orderCol.getFlag(Column.FLAG_UNINSERTABLE));\n             io.setUpdatable(0, !_orderCol.getFlag(Column.FLAG_UNUPDATABLE));\n             setColumnIO(io);\n@@ -340,7 +382,8 @@ public void syncOrderColumn(FieldMapping field) {\n     /**\n      * Sets internal constraint information to match given mapped constraint.\n      */\n-    protected void syncJoinTableUniques(MetaDataContext context, Unique[] unqs) {\n+    protected void syncJoinTableUniques(MetaDataContext context, Unique[] unqs)\n+    {\n         if (unqs == null) {\n             _joinTableUniques = null;\n             return;"},{"sha":"e62c790a63ce32b391f640d17279941974922734","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -180,6 +180,16 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n      */\n     public void appendSize(SQLBuffer sql, Select sel, Joins joins);\n \n+    /**\n+     * Append the ordered column alias to the given statement.\n+     */\n+    public void appendIndex(SQLBuffer sql, Select sel, Joins joins);\n+\n+    /**\n+     * Append the entity discriminator value to the given statement.\n+     */\n+    public void appendType(SQLBuffer sql, Select sel, Joins joins);\n+\n     /**\n      * Join this value to the class table. Does nothing by default.\n      */"},{"sha":"8ae026f3c1c27f20af7a099d256820312f26ad1c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -66,7 +66,9 @@ public boolean isInRelation() {\n     }\n \n     public void order(Select sel, ClassMapping elem, Joins joins) {\n-        FieldMapping fm = elem.getFieldMapping(_fm.getIndex());\n+        FieldMapping fm = _fm;\n+        if (elem != null)\n+            fm = elem.getFieldMapping(_fm.getIndex());\n         sel.orderBy(fm.getColumns(), _asc, joins, false);\n     }\n }"},{"sha":"5624308e77aa779e3af40b8d47f5ce30b3409958","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -470,7 +470,7 @@ public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n      * Provides a default value for the given Discriminator. \n      * \n      * <P>\n-     * The type of the object returned relies on the javaType field being set on \n+     * The type of the object returned relies on the javaType field being set on\n      * the Discriminator which is provided.\n      * <TABLE border=\"2\"> \n      * <TH>JavaType\n@@ -539,7 +539,9 @@ public void populateDataStoreIdColumns(ClassMapping cls, Table table,\n             else if (_dsIdName != null)\n                 cols[i].setName(_dsIdName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n     }\n \n     /**\n@@ -582,7 +584,9 @@ else if (_versName != null) {\n             } else if (_versName != null)\n                 cols[i].setName(_versName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n     }\n \n     public void populateColumns(Discriminator disc, Table table,\n@@ -593,7 +597,9 @@ public void populateColumns(Discriminator disc, Table table,\n             else if (_discName != null)\n                 cols[i].setName(_discName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n     }\n \n     public void populateJoinColumn(ClassMapping cm, Table local, Table foreign,\n@@ -618,8 +624,11 @@ else if (target instanceof Column)\n \n     public void populateColumns(ValueMapping vm, String name, Table table,\n         Column[] cols) {\n-        for (int i = 0; i < cols.length; i++)\n+        for (int i = 0; i < cols.length; i++) {\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n+        }\n+        table.resetSubColumns();\n     }\n \n     public boolean populateOrderColumns(FieldMapping fm, Table table,\n@@ -630,7 +639,9 @@ public boolean populateOrderColumns(FieldMapping fm, Table table,\n             else if (_orderName != null)\n                 cols[i].setName(_orderName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n         return _orderLists && (JavaTypes.ARRAY == fm.getTypeCode()\n             || List.class.isAssignableFrom(fm.getType()));\n     }\n@@ -643,7 +654,9 @@ public boolean populateNullIndicatorColumns(ValueMapping vm, String name,\n             else if (_nullIndName != null)\n                 cols[i].setName(_nullIndName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n         return _addNullInd;\n     }\n "},{"sha":"dd3b004bc51be92cd9b3514777e79da95801746b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":118,"deletions":23,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -71,6 +71,7 @@\n     private boolean _canIdx = true;\n     private boolean _canUnq = true;\n     private boolean _canFK = true;\n+    private boolean _implicitRelation = false;\n     private int _join = JOIN_NONE;\n     private ColumnIO _io = null;\n \n@@ -94,6 +95,21 @@ public void setStrategy(String strategy) {\n     public List getColumns() {\n         return (_cols == null) ? Collections.EMPTY_LIST : _cols;\n     }\n+    \n+    /**\n+     * Gets the columns whose table name matches the given table name. \n+     */\n+    public List getColumns(String tableName) {\n+        if (_cols == null) \n+        \treturn Collections.EMPTY_LIST;\n+        List result = new ArrayList();\n+        for (Object col : _cols) {\n+        \tif (StringUtils.equals(((Column)col).getTableName(), \n+        \t\t\ttableName)) \n+        \t\tresult.add(col);\n+        }\n+        return result;\n+    }\n \n     /**\n      * Raw column data.\n@@ -130,6 +146,30 @@ public void setCanIndex(boolean indexable) {\n         _canIdx = indexable;\n     }\n \n+    /** \n+     *  Affirms if this instance represents an implicit relation. For example, a\n+     *  relation expressed as the value of primary key of the related class and\n+\t *  not as object reference.\n+     *\n+     * @since 1.3.0\n+     */\n+    public boolean isImplicitRelation() {\n+    \treturn _implicitRelation;\n+    }\n+    \n+    /**\n+     * Sets a marker to imply a logical relation that can not have any physical\n+     * manifest in the database. For example, a relation expressed as the value\n+     * of primary key of the related class and not as object reference.\n+     * Populated from @ForeignKey(implicit=true) annotation.\n+     * The mutator can only transit from false to true but not vice versa.\n+     * \n+     * @since 1.3.0\n+     */\n+    public void setImplicitRelation(boolean flag) {\n+    \t_implicitRelation |= flag;\n+    }\n+\n     /**\n      * Raw foreign key information.\n      */\n@@ -280,7 +320,7 @@ public void copy(MappingInfo info) {\n             else\n                 _canFK = info.canForeignKey();\n         }\n-\n+        _implicitRelation = info.isImplicitRelation();\n         List cols = getColumns();\n         List icols = info.getColumns();\n         if (!icols.isEmpty() && (cols.isEmpty()\n@@ -386,10 +426,11 @@ public void assertNoUnique(MetaDataContext context, boolean die) {\n     }\n \n     /**\n-     * Assert that the user did not try to place a foreign key on this mapping.\n+     * Assert that the user did not try to place a foreign key on this mapping\n+     * or placed an implicit foreign key. \n      */\n     public void assertNoForeignKey(MetaDataContext context, boolean die) {\n-        if (_fk == null)\n+        if (_fk == null || isImplicitRelation())\n             return;\n \n         Message msg = _loc.get(\"unexpected-fk\", context);\n@@ -451,9 +492,10 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         }\n \n         String fullName;\n-        int dotIdx = given.lastIndexOf('.');\n+        String sep = repos.getDBDictionary().catalogSeparator;\n+        int dotIdx = given.lastIndexOf(sep);\n         if (dotIdx == -1)\n-            fullName = (schemaName == null) ? given : schemaName + \".\" + given;\n+            fullName = (schemaName == null) ? given : schemaName + sep + given;\n         else {\n             fullName = given;\n             schema = null;\n@@ -505,10 +547,19 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         boolean fill = ((MappingRepository) context.getRepository()).\n             getMappingDefaults().defaultMissingInfo();\n         if ((!given.isEmpty() || (!adapt && !fill))\n-            && given.size() != tmplates.length)\n-            throw new MetaDataException(_loc.get(prefix + \"-num-cols\",\n-                context, String.valueOf(tmplates.length),\n-                String.valueOf(given.size())));\n+            && given.size() != tmplates.length) {\n+        \t// also consider when this info has columns from multiple tables\n+        \tgiven = getColumns(table.getName());\n+        \tif ((!adapt && !fill) && given.size() != tmplates.length) {\n+        \t\t// try default table\n+        \t\tgiven = getColumns(\"\");\n+                if ((!adapt && !fill) && given.size() != tmplates.length) {\n+                    throw new MetaDataException(_loc.get(prefix + \"-num-cols\",\n+                            context, String.valueOf(tmplates.length),\n+                            String.valueOf(given.size())));\n+            \t}\n+        \t}\n+        }\n \n         Column[] cols = new Column[tmplates.length];\n         _io = null;\n@@ -521,6 +572,12 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         }\n         return cols;\n     }\n+    \n+    boolean canMerge(List given, Column[] templates, boolean adapt,\n+            boolean fill) {\n+    \treturn !((!given.isEmpty() || (!adapt && !fill)) \n+    \t\t\t&& given.size() != templates.length);\n+    }\n \n     /**\n      * Set the proper internal column I/O metadata for the given column's flags.\n@@ -571,12 +628,15 @@ protected static Column mergeColumn(MetaDataContext context, String prefix,\n             throw new MetaDataException(_loc.get(prefix + \"-no-col-name\",\n                 context));\n \n+        MappingRepository repos = (MappingRepository) context.getRepository();\n+        DBDictionary dict = repos.getDBDictionary();\n+\n         // determine the column name based on given info, or template if none;\n         // also make sure that if the user gave a column name, he didn't try\n         // to put the column in an unexpected table\n         if (colName == null)\n             colName = tmplate.getName();\n-        int dotIdx = colName.lastIndexOf('.');\n+        int dotIdx = colName.lastIndexOf(dict.catalogSeparator);\n         if (dotIdx == 0)\n             colName = colName.substring(1);\n         else if (dotIdx != -1) {\n@@ -587,19 +647,45 @@ else if (dotIdx != -1) {\n \n         // find existing column\n         Column col = table.getColumn(colName);\n-        if (col == null && !adapt)\n-            throw new MetaDataException(_loc.get(prefix + \"-bad-col-name\",\n-                context, colName, table));\n-\n-        MappingRepository repos = (MappingRepository) context.getRepository();\n-        DBDictionary dict = repos.getDBDictionary();\n+        if (col == null && !adapt) {\n+            // \n+            // See if column name has already been validated in a dynamic table.\n+            // If so then want to use that validated column name instead. This\n+            // should seldom if ever occur as long as the database dictionaries\n+            // are kept up-to-date. \n+            // \n+            if ((colName.length() > dict.maxColumnNameLength) || \n+               dict.getInvalidColumnWordSet().contains(colName.toUpperCase()) &&\n+              !(table.getClass().getName().contains(\"DynamicTable\"))) {\n+                colName=dict.getValidColumnName(colName, new Table());\n+                col = table.getColumn(colName);\n+                if (col == null && !adapt) {\n+                    throw new MetaDataException(_loc.\n+                        get(prefix + \"-bad-col-name\", context, colName, table));\n+                }\n+            }\n+            else {\n+                throw new MetaDataException(_loc.\n+                    get(prefix + \"-bad-col-name\", context, colName, table));\n+            }\n+        }\n \n         // use information from template column by default, allowing any\n         // user-given specifics to override it\n         int type = tmplate.getType();\n         int size = tmplate.getSize();\n-        if (type == Types.OTHER)\n-            type = dict.getJDBCType(tmplate.getJavaType(), size == -1);\n+        if (type == Types.OTHER) {\n+            int precis = 0;\n+            int scale = 0;\n+            if(given != null) {\n+                precis = given.getSize();\n+                scale = given.getDecimalDigits();\n+            }\n+            type =\n+                dict.getJDBCType(tmplate.getJavaType(), size == -1, precis,\n+                    scale, tmplate.isXML());\n+        }\n+            \n         boolean ttype = true;\n         int otype = type;\n         String typeName = tmplate.getTypeName();\n@@ -610,6 +696,7 @@ else if (dotIdx != -1) {\n         String defStr = tmplate.getDefaultString();\n         boolean autoAssign = tmplate.isAutoAssigned();\n         boolean relationId = tmplate.isRelationId();\n+        boolean implicitRelation = tmplate.isImplicitRelation();\n         String targetField = tmplate.getTargetField();\n         if (given != null) {\n             // use given type if provided, but warn if it isn't compatible with\n@@ -640,6 +727,8 @@ else if (dotIdx != -1) {\n                 autoAssign = true;\n             if (given.isRelationId())\n                 relationId = true;\n+            if (given.isImplicitRelation())\n+            \timplicitRelation = true;\n         }\n \n         // default char column size if original type is char (test original\n@@ -684,6 +773,7 @@ else if (col.getJavaType() == JavaTypes.OBJECT) {\n         }\n         col.setAutoAssigned(autoAssign);\n         col.setRelationId(relationId);\n+        col.setImplicitRelation(implicitRelation);\n         col.setTargetField(targetField);\n \n         // we need this for runtime, and the dynamic schema factory might\n@@ -705,6 +795,8 @@ else if (col.getJavaType() == JavaTypes.OBJECT) {\n \n         if (tmplate.hasComment())\n             col.setComment(tmplate.getComment());\n+        if (tmplate.isXML())\n+            col.setXML(tmplate.isXML());\n         return col;\n     }\n \n@@ -1398,13 +1490,16 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n             // if one primary key column use it for target; if multiple joins\n             // look for a foreign column with same name as local column\n             PrimaryKey pk = foreign.getPrimaryKey();\n-            if (joins.length == 1 && pk != null && pk.getColumns().length == 1)\n+            if (joins.length == 1 && pk != null && pk.getColumns().length == 1) {\n                 targetName = pk.getColumns()[0].getName();\n-            else if (foreign.getColumn(name) != null)\n+            }\n+            else if (foreign.getColumn(name) != null) {\n                 targetName = name;\n-            else\n+            }\n+            else {\n                 throw new MetaDataException(_loc.get(prefix\n                     + \"-no-fkcol-target-adapt\", context, name));\n+            }\n         }\n \n         // find the target column, and create template for local column based\n@@ -1627,7 +1722,7 @@ protected static Column syncColumn(MetaDataContext context, Column col,\n         Column copy = new Column();\n         if (col.getTable() != colTable || inverse)\n             copy.setName(dict.getFullName(col.getTable(), true)\n-                + \".\" + col.getName());\n+                + dict.catalogSeparator + col.getName());\n         else\n             copy.setName(col.getName());\n \n@@ -1640,7 +1735,7 @@ else if (target instanceof Column) {\n                 if ((!inverse && tcol.getTable() != targetTable)\n                     || (inverse && tcol.getTable() != colTable))\n                     copy.setTarget(dict.getFullName(tcol.getTable(), true)\n-                        + \".\" + tcol.getName());\n+                        + dict.catalogSeparator + tcol.getName());\n                 else if (!defaultTarget(col, tcol, num))\n                     copy.setTarget(tcol.getName());\n             } else if (target instanceof Number)"},{"sha":"082238d9d376500fb2ad792076f90fafd11ffaee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":316,"deletions":43,"changes":359,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -24,9 +24,11 @@\n import java.sql.Types;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.ByteArrayValueHandler;\n@@ -49,7 +51,9 @@\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedByteArrayFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedCharArrayFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n-import org.apache.openjpa.jdbc.meta.strats.NanoPrecisionTimestampVersionStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.\n+        NanoPrecisionTimestampVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n@@ -58,13 +62,15 @@\n import org.apache.openjpa.jdbc.meta.strats.ObjectIdClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.ObjectIdValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.PrimitiveFieldStrategy;\n-import org.apache.openjpa.jdbc.meta.strats.RelationCollectionInverseKeyFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.\n+        RelationCollectionInverseKeyFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationCollectionTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationHandlerMapTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\n-import org.apache.openjpa.jdbc.meta.strats.RelationRelationMapTableFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.\n+        RelationRelationMapTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.StateComparisonVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SubclassJoinDiscriminatorStrategy;\n@@ -91,6 +97,7 @@\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Repository of object/relational mapping information.\n@@ -142,7 +149,7 @@ public void setMappingDefaults(MappingDefaults defaults) {\n     /**\n      * Representation of the database schema.\n      */\n-    public synchronized SchemaGroup getSchemaGroup() {\n+    public SchemaGroup getSchemaGroup() {\n         if (_schema == null)\n             _schema = ((JDBCConfiguration) getConfiguration()).\n                 getSchemaFactoryInstance().readSchema();\n@@ -152,14 +159,14 @@ public synchronized SchemaGroup getSchemaGroup() {\n     /**\n      * Representation of the database schema.\n      */\n-    public synchronized void setSchemaGroup(SchemaGroup schema) {\n+    public void setSchemaGroup(SchemaGroup schema) {\n         _schema = schema;\n     }\n \n     /**\n      * Installs mapping strategies on components.\n      */\n-    public synchronized StrategyInstaller getStrategyInstaller() {\n+    public StrategyInstaller getStrategyInstaller() {\n         if (_installer == null)\n             _installer = new RuntimeStrategyInstaller(this);\n         return _installer;\n@@ -168,20 +175,24 @@ public synchronized StrategyInstaller getStrategyInstaller() {\n     /**\n      * Installs mapping strategies on components.\n      */\n-    public synchronized void setStrategyInstaller(StrategyInstaller installer) {\n+    public void setStrategyInstaller(StrategyInstaller installer) {\n         _installer = installer;\n     }\n \n     /**\n      * Return the query result mapping for the given name.\n      */\n-    public synchronized QueryResultMapping getQueryResultMapping(Class cls,\n+    public QueryResultMapping getQueryResultMapping(Class cls,\n         String name, ClassLoader envLoader, boolean mustExist) {\n-        QueryResultMapping res = getQueryResultMappingInternal(cls, name,\n-            envLoader);\n-        if (res == null && mustExist)\n-            throw new MetaDataException(_loc.get(\"no-query-res\", cls, name));\n-        return res;\n+        lock();\n+        try {\n+            QueryResultMapping res = getQueryResultMappingInternal(cls, name, envLoader);\n+            if (res == null && mustExist)\n+                throw new MetaDataException(_loc.get(\"no-query-res\", cls, name));\n+            return res;\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     /**\n@@ -219,47 +230,71 @@ private QueryResultMapping getQueryResultMappingInternal(Class cls,\n      * Return all cached query result mappings.\n      */\n     public synchronized QueryResultMapping[] getQueryResultMappings() {\n-        Collection values = _results.values();\n-        return (QueryResultMapping[]) values.toArray\n-            (new QueryResultMapping[values.size()]);\n+        lock();\n+        try {\n+            Collection values = _results.values();\n+            return (QueryResultMapping[]) values.toArray(new QueryResultMapping[values.size()]);\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     /**\n      * Return the cached query result mapping with the given name, or null if\n      * none.\n      */\n-    public synchronized QueryResultMapping getCachedQueryResultMapping\n+    public QueryResultMapping getCachedQueryResultMapping\n         (Class cls, String name) {\n-        return (QueryResultMapping) _results.get(getQueryResultKey(cls, name));\n+        lock();\n+        try {\n+            return (QueryResultMapping) _results.get(getQueryResultKey(cls, name));\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     /**\n      * Add a query result mapping.\n      */\n-    public synchronized QueryResultMapping addQueryResultMapping(Class cls,\n+    public QueryResultMapping addQueryResultMapping(Class cls,\n         String name) {\n-        QueryResultMapping res = new QueryResultMapping(name, this);\n-        res.setDefiningType(cls);\n-        _results.put(getQueryResultKey(res), res);\n-        return res;\n+        lock();\n+        try {\n+            QueryResultMapping res = new QueryResultMapping(name, this);\n+            res.setDefiningType(cls);\n+            _results.put(getQueryResultKey(res), res);\n+            return res;\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     /**\n      * Remove a query result mapping.\n      */\n-    public synchronized boolean removeQueryResultMapping\n+    public boolean removeQueryResultMapping\n         (QueryResultMapping res) {\n-        return _results.remove(getQueryResultKey(res)) != null;\n+        lock();\n+        try {\n+            return _results.remove(getQueryResultKey(res)) != null;\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     /**\n      * Remove a query result mapping.\n      */\n-    public synchronized boolean removeQueryResultMapping(Class cls,\n+    public boolean removeQueryResultMapping(Class cls,\n         String name) {\n-        if (name == null)\n-            return false;\n-        return _results.remove(getQueryResultKey(cls, name)) != null;\n+        lock();\n+        try {\n+            if (name == null)\n+                return false;\n+            return _results.remove(getQueryResultKey(cls, name)) != null;\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     /**\n@@ -300,9 +335,14 @@ public ClassMapping getMapping(Object oid, ClassLoader envLoader,\n     }\n \n     public synchronized void clear() {\n-        super.clear();\n-        _schema = null;\n-        _results.clear();\n+        lock();\n+        try {\n+            super.clear();\n+            _schema = null;\n+            _results.clear();\n+        } finally {\n+            unlock();\n+        }\n     }\n \n     protected void prepareMapping(ClassMetaData meta) {\n@@ -312,6 +352,20 @@ protected void prepareMapping(ClassMetaData meta) {\n         ClassMapping sup = mapping.getPCSuperclassMapping();\n         if (sup != null && (mapping.getResolve() & MODE_MAPPING) != 0)\n             return;\n+        \n+        // if this mapping is not for a managed interface, ensure that if \n+        // we have an inheritance hierarchy there is a default strategy\n+        // applied to the root class\n+        if (!mapping.getDescribedType().isInterface() &&\n+            !mapping.isEmbeddedOnly()) {\n+            // if an inheritance strategy has not been set on this mapping\n+            // determine if needs one and if so, set it\n+            if (!hasInheritanceStrategy(mapping)) {\n+                ClassMapping baseMapping = findBaseClassMapping(mapping); \n+                if (baseMapping != null)\n+                    setDefaultInheritanceStrategy(baseMapping);\n+            }            \n+        }\n \n         // define superclass fields after mapping class, so we can tell whether\n         // the class is mapped and needs to redefine abstract superclass fields\n@@ -451,7 +505,7 @@ else if (VerticalClassStrategy.ALIAS.equals(name))\n         try {\n             if (strat == null)\n                 strat = JavaTypes.classForName(name, cls,\n-                    (ClassLoader) AccessController.doPrivileged(\n+                    AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             ClassStrategy.class)));\n             ClassStrategy strategy = \n@@ -485,7 +539,7 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, field,\n-                (ClassLoader) AccessController.doPrivileged(\n+                AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             if (FieldStrategy.class.isAssignableFrom(c)) {\n                 FieldStrategy strat = (FieldStrategy)\n@@ -558,7 +612,7 @@ else if (SubclassJoinDiscriminatorStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     discrim.getClassMapping(),\n-                    (ClassLoader) AccessController.doPrivileged(\n+                    AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             DiscriminatorStrategy.class)));\n             DiscriminatorStrategy strategy = (DiscriminatorStrategy)\n@@ -611,6 +665,8 @@ protected VersionStrategy instantiateVersionStrategy(String name,\n \n         if (NumberVersionStrategy.ALIAS.equals(name))\n             strat = NumberVersionStrategy.class;\n+        else if (MultiColumnVersionStrategy.ALIAS.equals(name))\n+        \tstrat = MultiColumnVersionStrategy.class;\n         else if (TimestampVersionStrategy.ALIAS.equals(name))\n             strat = TimestampVersionStrategy.class;\n         else if (NanoPrecisionTimestampVersionStrategy.ALIAS.equals(name))\n@@ -622,7 +678,7 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     version.getClassMapping(),\n-                    (ClassLoader) AccessController.doPrivileged(\n+                    AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             VersionStrategy.class)));\n         } catch (Exception e) {\n@@ -859,11 +915,16 @@ protected FieldStrategy defaultTypeStrategy(FieldMapping field,\n                 boolean vrel = vhandler == null \n                     && val.getTypeCode() == JavaTypes.PC\n                     && !val.isSerialized() && !val.isEmbeddedPC();\n-                if (!krel && vrel && key.getValueMappedBy() != null) {\n+                if (vrel && key.getValueMappedBy() != null) {\n                     if (useInverseKeyMapping(field))\n                         return new RelationMapInverseKeyFieldStrategy();\n                     return new RelationMapTableFieldStrategy();\n                 }\n+                //TODO: in JPA 2.0 if MapKeyClass type is not specified\n+                // an exception is thrown. In OpenJpa 1.x, the map will\n+                // be serialized to a blob (the null value returned by\n+                // this method will lead to a strategy to serialize\n+                // the map).\n                 if (!krel && khandler == null)\n                     break;\n                 if (!vrel && vhandler == null)\n@@ -883,6 +944,7 @@ protected FieldStrategy defaultTypeStrategy(FieldMapping field,\n      */\n     protected FieldStrategy handlerCollectionStrategy(FieldMapping field, \n         ValueHandler ehandler, boolean installHandlers) {\n+        // TODO: JPA 2.0 should ignore this flag and not to serialize\n         if (getConfiguration().getCompatibilityInstance()\n             .getStoreMapCollectionInEntityAsBlob())\n             return null;\n@@ -898,6 +960,7 @@ protected FieldStrategy handlerCollectionStrategy(FieldMapping field,\n     protected FieldStrategy handlerMapStrategy(FieldMapping field, \n         ValueHandler khandler, ValueHandler vhandler, boolean krel, \n         boolean vrel,  boolean installHandlers) {\n+        // TODO: JPA 2.0 should ignore this flag and not to serialize\n         if (getConfiguration().getCompatibilityInstance()\n             .getStoreMapCollectionInEntityAsBlob())\n             return null;\n@@ -921,6 +984,9 @@ protected FieldStrategy handlerMapStrategy(FieldMapping field,\n     private boolean useInverseKeyMapping(FieldMapping field) {\n         FieldMapping mapped = field.getMappedByMapping();\n         if (mapped != null) {\n+            //bi-/M-1/JoinTable ==> join table strategy\n+            if (isBiMTo1JT(field)) \n+                return false;\n             if (mapped.getTypeCode() == JavaTypes.PC)\n                 return true;\n             if (mapped.getElement().getTypeCode() == JavaTypes.PC)\n@@ -935,10 +1001,144 @@ private boolean useInverseKeyMapping(FieldMapping field) {\n         // an association table\n         FieldMappingInfo info = field.getMappingInfo();\n         ValueMapping elem = field.getElementMapping();\n-        return info.getTableName() == null && info.getColumns().isEmpty()\n+        boolean useInverseKeyMapping = info.getTableName() == null && info.getColumns().isEmpty()\n             && !elem.getValueInfo().getColumns().isEmpty();\n+        \n+        // JPA 2.0: non-default mapping: uni-/1-M/JoinColumn ==> foreign key strategy\n+        if (isUni1ToMFK(field)) {\n+            return true;\n+        }\n+        return useInverseKeyMapping;\n+    }\n+        \n+    public boolean isNonDefaultMappingAllowed() {\n+        OpenJPAConfiguration conf = getConfiguration();\n+        return getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n+    }\n+    \n+    public boolean isUniMTo1JT(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.MANY_TO_ONE &&\n+            hasJoinTable(field) && \n+            !isBidirectional(field))  {\n+            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean isUni1To1JT(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.ONE_TO_ONE && \n+            hasJoinTable(field) && \n+            !isBidirectional(field)) {\n+            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n     }\n \n+    public boolean isBi1To1JT(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.ONE_TO_ONE && \n+            hasJoinTable(field) && \n+            isBidirectional(field)) {\n+            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    public boolean isUni1ToMFK(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.ONE_TO_MANY &&\n+            hasJoinColumn(field) &&\n+            !isBidirectional(field)) {\n+            field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    public boolean isBiMTo1JT(FieldMapping field) {\n+        FieldMapping mapped = field.getMappedByMapping();\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY ) {\n+                if (mapped != null && hasJoinTable(mapped))\n+                    return true;\n+            } else if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n+                if (getBi_1ToM_JoinTableField(field) != null)\n+                    return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // return the inverse field of bidirectional many to one\n+    // relation using join table strategy\n+    public FieldMapping getBi_1ToM_JoinTableField(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n+                FieldMapping mappedBy = field.getMappedByMapping();\n+                if (mappedBy != null && hasJoinTable(mappedBy))\n+                    return field;\n+            } else if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n+                if (!hasJoinTable(field))\n+                    return null;\n+                ClassMapping inverse = field.getValueMapping().getTypeMapping();\n+                FieldMapping[] fmds = inverse.getFieldMappings();\n+                for (int i = 0; i < fmds.length; i++) {\n+                    if (field == fmds[i].getMappedByMapping()) \n+                        return fmds[i];\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    // return the owning field of bidirectional one to many\n+    // relation using join table strategy\n+    public FieldMapping getBi_MTo1_JoinTableField(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n+                if (!hasJoinTable(field))\n+                    return null;\n+                if (isBidirectional(field))\n+                    return field;\n+             } else if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n+                FieldMapping mappedBy = field.getMappedByMapping();\n+                if (mappedBy != null && hasJoinTable(mappedBy))\n+                    return mappedBy;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public boolean hasJoinColumn(FieldMapping field) {\n+        boolean hasJoinColumn = (field.getValueInfo().getColumns().size() > 0 ? true : false);\n+        return hasJoinColumn;\n+    }\n+    \n+    public boolean hasJoinTable(FieldMapping field) {\n+        boolean hasJoinTable = field.getMappingInfo().getTableName() != null ? true : false;\n+        return hasJoinTable;\n+    }\n+\n+    public boolean isBidirectional(FieldMapping field) {\n+        if (field.getMappedByMapping() != null) return true;\n+        int assoType = field.getAssociationType();\n+        if (assoType == FieldMetaData.ONE_TO_ONE || \n+            assoType == FieldMetaData.MANY_TO_ONE) {\n+            ClassMapping inverse = field.getValueMapping().getTypeMapping();\n+            FieldMapping[] fmds = inverse.getFieldMappings();\n+            for (int i = 0; i < fmds.length; i++) {\n+                if (field == fmds[i].getMappedByMapping()) \n+                    return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n     /**\n      * Check the given value against mapped strategies.\n      */\n@@ -964,7 +1164,7 @@ private Object mappedStrategy(ValueMapping val, Class type,\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, val,\n-                (ClassLoader) AccessController.doPrivileged(\n+                AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             Object o = AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(c));\n@@ -991,7 +1191,7 @@ protected ValueHandler namedHandler(ValueMapping val) {\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, val,\n-                (ClassLoader) AccessController.doPrivileged(\n+                AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(ValueHandler.class)));\n             if (ValueHandler.class.isAssignableFrom(c)) {\n                 ValueHandler vh = (ValueHandler) AccessController.doPrivileged(\n@@ -1238,12 +1438,12 @@ protected VersionStrategy defaultStrategy(Version vers,\n             case JavaTypes.NUMBER:\n                 return new NumberVersionStrategy();\n             default:\n-                return NoneVersionStrategy.getInstance();\n+                throw new UserException(_loc.get(\"version-type-unsupported\", vfield, vfield.getDeclaredType()));\n+//                return NoneVersionStrategy.getInstance();\n         }\n     }\n     \n-    public void endConfiguration()\n-    {\n+    public void endConfiguration() {\n         super.endConfiguration();\n \n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n@@ -1256,4 +1456,77 @@ public void endConfiguration()\n             ((Configurable) _schema).endConfiguration();\n         }            \n     }\n+    \n+    /**\n+     * Finds the base class mapping for the specified mapping.  Loads all\n+     * persistent types if necessary, since all persistent subclasses of this\n+     * mapping may not have been resolved before this method is called.\n+     */\n+    protected ClassMapping findBaseClassMapping(ClassMapping mapping) {        \n+        ClassMapping baseMapping = null;\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\n+        if (sup == null) {\n+            // no superclass metadata was provided.  check to see if this class\n+            // has any persistent subclasses.\n+            if (mapping.getPCSubclasses().length > 0)\n+                baseMapping = mapping;\n+            else {\n+                // persistent subclasses may not have been resolved yet.  \n+                // run through the persistent types to see if any of them \n+                // or their superclass is a subclass of this class.\n+                Collection classes = loadPersistentTypes(false, \n+                        mapping.getEnvClassLoader());\n+                Class cls;\n+                for (Iterator itr = classes.iterator(); itr.hasNext();) {\n+                    cls = (Class) itr.next();\n+                    Class supcl = cls.getSuperclass();\n+                    while (supcl != null && \n+                           !supcl.getClass().equals(java.lang.Object.class)) {\n+                        if (!supcl.isInterface() &&\n+                            supcl.equals(mapping.getDescribedType())) {\n+                            baseMapping = mapping;    \n+                            break;\n+                        }\n+                        supcl = supcl.getSuperclass();\n+                    }\n+                    if (baseMapping != null) break;\n+                }\n+            }\n+        } else if (!sup.getDescribedType().isInterface()) {\n+            // if the superclass is not a managed interface, find the root\n+            // superclass and get its mapping info\n+            ClassMapping supcm = sup;\n+            while (supcm != null && \n+                    !supcm.getDescribedType().isInterface() &&\n+                    !supcm.isEmbeddedOnly()) {\n+                ClassMapping supcm2 = supcm.getPCSuperclassMapping();\n+                if (supcm2 == null)\n+                    baseMapping = supcm;\n+                supcm = supcm2;\n+            }\n+        }\n+        return baseMapping;\n+    }\n+   \n+    /**\n+     * If an inheritance strategy has not been set on this mapping, set it\n+     * to the default (flat).  This method should be called before strategies\n+     * are created for the specified mapping.\n+     */\n+    protected void setDefaultInheritanceStrategy(ClassMapping mapping) {\n+        ClassMappingInfo info = mapping.getMappingInfo();\n+        if (info != null && info.getHierarchyStrategy() == null)\n+            info.setHierarchyStrategy(FlatClassStrategy.ALIAS);        \n+    } \n+    \n+    /**\n+     * Determines whether an inhertance strategy has been set on the\n+     * specified mapping.\n+     */\n+    protected boolean hasInheritanceStrategy(ClassMapping mapping) {\n+        ClassMappingInfo info = mapping.getMappingInfo();\n+        if (info != null && info.getHierarchyStrategy() != null)\n+            return true;\n+        return false;        \n+    }\n }"},{"sha":"b724ae6931b5e12565558230d3edffea87c258d2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -57,6 +57,8 @@\n     private File _file = null;\n     private Object _scope = null;\n     private int _srcType = SRC_OTHER;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n     private int _mode = MODE_QUERY;\n     private Class _class = null;\n     private int _idx = 0;\n@@ -224,6 +226,22 @@ public void setSource(File file, Object scope, int srcType) {\n     public String getResourceName() {\n         return (_class == null) ? _name : _class.getName() + \":\" + _name;\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n \n     /**\n      * A persistence-capable result."},{"sha":"787218bebdb2a9e436388a8a898d47f5fbf358f9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -54,7 +54,8 @@\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.PrimitiveFieldStrategy;\n-import org.apache.openjpa.jdbc.meta.strats.RelationCollectionInverseKeyFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.\n+        RelationCollectionInverseKeyFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationCollectionTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.StateComparisonVersionStrategy;\n@@ -179,7 +180,7 @@\n     private final Log _log;\n     private final Map _tables = new HashMap();\n     private final Project _project = new Project();\n-    private final BCClassLoader _loader = (BCClassLoader) AccessController\n+    private final BCClassLoader _loader = AccessController\n         .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project));\n     private StrategyInstaller _strat = null;\n     private String _package = null;\n@@ -1899,11 +1900,11 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         File customFile = Files.getFile\n             (opts.removeProperty(\"customizerProperties\", \"cp\", null), null);\n         Properties customProps = new Properties();\n-        if (customFile != null && ((Boolean) AccessController.doPrivileged(\n+        if (customFile != null && (AccessController.doPrivileged(\n             J2DoPrivHelper.existsAction(customFile))).booleanValue()) {\n             FileInputStream fis = null;\n             try {\n-                fis = (FileInputStream) AccessController.doPrivileged(\n+                fis = AccessController.doPrivileged(\n                     J2DoPrivHelper.newFileInputStreamAction(customFile));\n             } catch (PrivilegedActionException pae) {\n                  throw (FileNotFoundException) pae.getException();"},{"sha":"0d289f29a67936bd1dafd8c460028ef2f1e1b068","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -68,10 +68,8 @@ public void installStrategy(FieldMapping field) {\n                     || field.getMappedBy() != null\n                     || field.getMappingInfo().hasSchemaComponents()\n                     || field.getValueInfo().hasSchemaComponents()\n-                    || field.getElementMapping().getValueInfo().\n-                    hasSchemaComponents()\n-                    || field.getKeyMapping().getValueInfo().\n-                    hasSchemaComponents())\n+                    || field.getElementMapping().getValueInfo().hasSchemaComponents()\n+                    || field.getKeyMapping().getValueInfo().hasSchemaComponents())\n                     throw mde;\n \n                 strategy = NoneFieldStrategy.getInstance();"},{"sha":"7bd8135cf919d579b62f8df813a879903b182858","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","status":"modified","additions":38,"deletions":4,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCSeqValue;\n import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\n@@ -61,13 +62,15 @@\n     private static final String PROP_PK_COL = \"PrimaryKeyColumn\";\n     private static final String PROP_PK_VALUE = \"PrimaryKeyValue\";\n     private static final String PROP_UNIQUE = \"UniqueColumns\";\n+    private static final String PROP_UNIQUE_CONSTRAINT = \"UniqueConstraintName\";\n \n     private File _mapFile = null;\n     private String _table = null;\n     private String _sequenceColumn = null;\n     private String _primaryKeyColumn = null;\n     private String _primaryKeyValue = null;\n     private String[] _uniqueColumns   = null;\n+    private String _uniqueConstraintName = null;\n     \n     public SequenceMapping(String name, MappingRepository repos) {\n         super(name, repos);\n@@ -157,17 +160,48 @@ protected PluginValue newPluginValue(String property) {\n         return new JDBCSeqValue(property);\n     }\n \n+    @Override\n     protected void addStandardProperties(StringBuffer props) {\n         super.addStandardProperties(props);\n-        appendProperty(props, PROP_TABLE, _table);\n-        appendProperty(props, PROP_SEQUENCE_COL, _sequenceColumn);\n-        appendProperty(props, PROP_PK_COL, _primaryKeyColumn);\n-        appendProperty(props, PROP_PK_VALUE, _primaryKeyValue);\n+        // Quotes are conditionally added to the following because the props\n+        // are eventually passed to the Configurations.parseProperties()\n+        // method, which strips off quotes. This is a problem when these\n+        // properties are intentionally delimited with quotes. So, an extra\n+        // set preserves the intended ones. While this is an ugly solution,\n+        // it's less ugly than other ones.\n+        \n+        appendProperty(props, PROP_TABLE, addQuotes(_table));\n+        appendProperty(props, PROP_SEQUENCE_COL, addQuotes(_sequenceColumn));\n+        appendProperty(props, PROP_PK_COL, addQuotes(_primaryKeyColumn));\n+        appendProperty(props, PROP_PK_VALUE, addQuotes(_primaryKeyValue));\n         // Array of unique column names are passed to configuration\n         // as a single string \"x|y|z\". The configurable (TableJDBCSeq) must\n         // parse it back.\n+        if (_uniqueConstraintName != null && \n+                _uniqueConstraintName.length() > 0) {\n+            appendProperty(props, PROP_UNIQUE_CONSTRAINT, \n+                addQuotes(_uniqueConstraintName));\n+        }\n+            \n         if (_uniqueColumns != null && _uniqueColumns.length > 0)\n         \tappendProperty(props, PROP_UNIQUE, \n         \t\t\tStringUtils.join(_uniqueColumns,'|'));\n     }\n+    \n+    private String addQuotes(String name) {\n+        if (name != null && name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\")) {\n+            return \"\\\"\" + name + \"\\\"\";\n+        }\n+        return name;\n+    }\n+\n+    public void setUniqueConstraintName(String name) {\n+        _uniqueConstraintName = name;\n+        \n+    }\n+\n+    public String getUniqueConstraintName() {\n+        return _uniqueConstraintName;\n+        \n+    }\n }"},{"sha":"e3f505c91f80e2164fbb6ac2f449419ed460a01a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -161,6 +161,15 @@ public ForeignKey getForeignKey(ClassMapping target) {\n             return getValueMappedByMapping().getForeignKey(target);\n         if (target == null)\n             return _fk;\n+        ClassMapping embeddedMeta = (ClassMapping)getEmbeddedMetaData(); \n+        if (embeddedMeta != null) {\n+            FieldMapping[] fields = embeddedMeta.getFieldMappings();\n+            for (int i = 0; i < fields.length; i++) {\n+                ValueMapping val = fields[i].getValueMapping(); \n+                if (val.getDeclaredTypeMapping() == target)\n+                    return val.getForeignKey();\n+            }\n+        }\n         if (_fk == null && _cols.length == 0)\n             return null;\n "},{"sha":"3687aefc51225fc34537b107e4b32b4175032240","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -101,11 +101,24 @@ public void populate(Table local, Table foreign, Column col,\n                         target, inverse, pos, cols);\n             }\n         };\n+        Table table = getTable(val);\n         return createForeignKey(val, null, getColumns(), def,\n-            val.getFieldMapping().getTable(), val.getFieldMapping().\n+            table, val.getFieldMapping().\n             getDefiningMapping(), rel, inversable, adapt);\n     }\n \n+    public Table getTable(ValueMapping val) {\n+        FieldMapping field = val.getFieldMapping();\n+        Table table = field.getTable();\n+        if (table == null) {\n+            ClassMapping cls = (ClassMapping)field.getDefiningMetaData();\n+            ValueMapping val1 = (ValueMapping)cls.getEmbeddingMetaData();\n+            if (val1 != null)\n+                return getTable(val1);\n+        }\n+        return table;\n+    }\n+    \n     /**\n      * Return the join from the related type to this value.\n      */"},{"sha":"baf919f441b1b8f44a8739bf98adc0db8cf98b54","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","status":"modified","additions":85,"deletions":5,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,12 +18,23 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassVersionStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Information about the mapping from a version indicator to the schema, in\n@@ -36,17 +47,60 @@\n public class VersionMappingInfo\n     extends MappingInfo {\n \n+    private static final Localizer _loc = Localizer.forPackage\n+    \t(VersionMappingInfo.class);\n     /**\n      * Return the columns set for this version, based on the given templates.\n      */\n-    public Column[] getColumns(Version version, Column[] tmplates,\n+    public Column[] getColumns(Version version, Column[] templates,\n         boolean adapt) {\n-        Table table = version.getClassMapping().getTable();\n+    \tif (spansMultipleTables(templates))\n+    \t\treturn getMultiTableColumns(version, templates, adapt);\n+        Table table = getSingleTable(version, templates);\n         version.getMappingRepository().getMappingDefaults().populateColumns\n-            (version, table, tmplates);\n-        return createColumns(version, null, tmplates, table, adapt);\n+            (version, table, templates);\n+        return createColumns(version, null, templates, table, adapt);\n     }\n-\n+    \n+    /**\n+     * Return the columns set for this version when the columns are spread \n+     * across multiple tables.\n+     */\n+    public Column[] getMultiTableColumns(Version vers, Column[] templates,\n+            boolean adapt) {\n+    \tTable primaryTable = vers.getClassMapping().getTable();\n+    \tList<String> secondaryTableNames = Arrays.asList(vers\n+                .getClassMapping().getMappingInfo().getSecondaryTableNames());\n+        Map<Table, List<Column>> assign = new LinkedHashMap<Table,\n+                List<Column>>();\n+    \tfor (Column col : templates) {\n+    \t    String tableName = col.getTableName();\n+    \t    Table table;\n+    \t\tif (StringUtils.isEmpty(tableName) \n+    \t\t  || tableName.equals(primaryTable.getName())) {\n+    \t\t\ttable = primaryTable;\n+    \t\t} else if (secondaryTableNames.contains(tableName)) {\n+    \t\t\ttable = primaryTable.getSchema().getTable(tableName);\n+    \t\t} else {\n+                throw new UserException(_loc.get(\"bad-version-column-table\",\n+    \t\t\t\t\tcol.getName(), tableName));\n+    \t\t}\n+    \t\tif (!assign.containsKey(table))\n+    \t\t\tassign.put(table, new ArrayList<Column>());\n+    \t\tassign.get(table).add(col);\n+    \t}\n+    \tMappingDefaults def = vers.getMappingRepository().getMappingDefaults();\n+    \tList<Column> result = new ArrayList<Column>();\n+    \tfor (Table table : assign.keySet()) {\n+    \t\tList<Column> cols = assign.get(table);\n+    \t\tColumn[] partTemplates = cols.toArray(new Column[cols.size()]);\n+    \t\tdef.populateColumns(vers, table, partTemplates);\n+            result.addAll(Arrays.asList(createColumns(vers, null, partTemplates,\n+    \t\t\t\ttable, adapt)));\n+    \t}\n+    \treturn result.toArray(new Column[result.size()]);\n+    }\n+    \n     /**\n      * Return the index to set on the version columns, or null if none.\n      */\n@@ -86,4 +140,30 @@ public void syncWith(Version version) {\n             && cls.getJoinablePCSuperclassMapping() == null))\n             setStrategy(strat);\n     }\n+    \n+    /**\n+     * Affirms if the given columns belong to more than one tables.\n+     */\n+    boolean spansMultipleTables(Column[] cols) {\n+    \tif (cols == null || cols.length <= 1) \n+    \t\treturn false;\n+    \tSet<String> tables = new HashSet<String>();\n+    \tfor (Column col : cols)\n+    \t\tif (tables.add(col.getTableName()) && tables.size() > 1)\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    /**\n+     * Gets the table where this version columns are mapped.\n+     */\n+    private Table getSingleTable(Version version, Column[] cols) {\n+    \tif (cols == null || cols.length == 0 \n+    \t || StringUtils.isEmpty(cols[0].getTableName()))\n+    \t\treturn version.getClassMapping().getTable();\n+    \treturn version.getClassMapping().getTable().getSchema()\n+    \t\t.getTable(cols[0].getTableName());\n+    }\n+\n+\n }"},{"sha":"1e97d6681686f4101f56666f04ddbaff50273890","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -135,6 +135,14 @@ public void appendSize(SQLBuffer sql, Select sel, Joins joins) {\n         sql.append(\"1\");\n     }\n \n+    public void appendIndex(SQLBuffer sql, Select sel, Joins joins) {\n+        sql.append(\"1\");\n+    }\n+\n+    public void appendType(SQLBuffer sql, Select sel, Joins joins) {\n+        sql.append(\"1\");\n+    }\n+\n     public Joins join(Joins joins, boolean forceOuter) {\n         return joins;\n     }"},{"sha":"2c81abe6485adfc1017b798d78550ce3bd10ece7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -24,6 +24,8 @@\n import java.sql.SQLException;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -73,9 +75,9 @@ public void loadSubclasses(JDBCStore store)\n \n         Column col = disc.getColumns()[0];\n         DBDictionary dict = store.getDBDictionary();\n+        JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n         SQLBuffer select = dict.toSelect(new SQLBuffer(dict).append(col),\n-            store.getFetchConfiguration(),\n-            new SQLBuffer(dict).append(col.getTable()), null, null,\n+            fetch, new SQLBuffer(dict).append(col.getTable()), null, null,\n             null, null, true, false, 0, Long.MAX_VALUE);\n \n         Log log = disc.getMappingRepository().getLog();\n@@ -88,6 +90,7 @@ public void loadSubclasses(JDBCStore store)\n         ResultSet rs = null;\n         try {\n             stmnt = select.prepareStatement(conn);\n+            dict.setTimeouts(stmnt, fetch, false);\n             rs = stmnt.executeQuery();\n             String className;\n             while (rs.next()) {"},{"sha":"ddae2f8e5244e0f96a8d4e646cba896b76dde686","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":150,"deletions":73,"changes":223,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import java.lang.reflect.Array;\n import java.math.BigDecimal;\n import java.sql.SQLException;\n import java.util.Comparator;\n@@ -27,6 +28,7 @@\n import org.apache.openjpa.jdbc.meta.VersionMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n@@ -36,12 +38,14 @@\n import org.apache.openjpa.kernel.StoreManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n- * Uses a single column and corresponding version object.\n+ * Uses a one or more column(s) and corresponding version object.\n  *\n  * @author Marc Prud'hommeaux\n+ * @author Pinaki Poddar\n  */\n public abstract class ColumnVersionStrategy\n     extends AbstractVersionStrategy {\n@@ -54,7 +58,17 @@\n      * strategy uses. This method is only used during mapping installation.\n      */\n     protected abstract int getJavaType();\n-\n+    \n+    /**\n+     * Return the code from {@link JavaTypes} for the version value this given\n+     * column index uses. Only used if the version strategy employs more than\n+     * one column. \n+     */\n+    protected int getJavaType(int i) {\n+        throw new AbstractMethodError(_loc.get(\n+                \"multi-column-version-unsupported\",getAlias()).toString());\n+    }\n+    \n     /**\n      * Return the next version given the current one, which may be null.\n      */\n@@ -73,7 +87,12 @@ protected int compare(Object v1, Object v2) {\n             return -1;\n         if (v2 == null)\n             return 1;\n-\n+        \n+        if (v1.getClass().isArray()) {\n+        \tif (!v2.getClass().isArray())\n+        \t\tthrow new InternalException();\n+        \treturn compare((Object[])v1, (Object[])v2);\n+        }\n         if (v1.getClass() != v2.getClass()) {\n             if (v1 instanceof Number && !(v1 instanceof BigDecimal))\n                 v1 = new BigDecimal(((Number) v1).doubleValue());\n@@ -85,6 +104,32 @@ protected int compare(Object v1, Object v2) {\n         return ((Comparable) v1).compareTo(v2);\n     }\n \n+\n+\t/**\n+\t * Compare each element of the given arrays that must be of equal size. \n+     * The given array values represent version values and the result designate\n+\t * whether first version is earlier, same or later than the second one.\n+\t * \n+\t * @return If any element of a1 is later than corresponding element of\n+     * a2 then returns 1 i.e. the first version is later than the second\n+     * version. If each element of a1 is equal to corresponding element of a2\n+     * then return 0 i.e. the first version is same as the second version.\n+\t * else return a negative number i.e. the first version is earlier than \n+\t * the second version.\n+\t */\n+\tprotected int compare(Object[] a1, Object[] a2) {\n+\t\tif (a1.length != a2.length)\n+\t    \tthrow new InternalException();\n+\t\tint total = 0;\n+\t\tfor (int i = 0; i < a1.length; i++) {\n+\t\t\tint c =  compare(a1[i], a2[i]);\n+\t\t\tif (c > 0) \n+\t\t\t\treturn 1;\n+\t\t\ttotal += c;\n+\t\t}\n+\t\treturn total;\n+\t}\n+\t\n     public void map(boolean adapt) {\n         ClassMapping cls = vers.getClassMapping();\n         if (cls.getJoinablePCSuperclassMapping() != null\n@@ -95,31 +140,50 @@ public void map(boolean adapt) {\n         info.assertNoJoin(vers, true);\n         info.assertNoForeignKey(vers, !adapt);\n         info.assertNoUnique(vers, false);\n-\n-        Column tmplate = new Column();\n-        tmplate.setJavaType(getJavaType());\n-        tmplate.setName(\"versn\");\n-\n-        Column[] cols = info.getColumns(vers, new Column[]{ tmplate }, adapt);\n-        cols[0].setVersionStrategy(this);\n-        vers.setColumns(cols);\n-        vers.setColumnIO(info.getColumnIO());\n-\n-        Index idx = info.getIndex(vers, cols, adapt);\n-        vers.setIndex(idx);\n+        if (info.getColumns().size() > 1) {\n+        \tColumn[] templates = new Column[info.getColumns().size()];\n+        \tfor (int i = 0; i < info.getColumns().size(); i++) {\n+                templates[i] = new Column();\n+        \t\tColumn infoColumn = (Column)info.getColumns().get(i);\n+        \t\ttemplates[i].setTableName(infoColumn.getTableName());\n+        \t\ttemplates[i].setType(infoColumn.getType());\n+        \t\ttemplates[i].setSize(infoColumn.getSize());\n+                templates[i].setDecimalDigits(infoColumn.getDecimalDigits());\n+        \t\ttemplates[i].setJavaType(getJavaType(i));\n+        \t\ttemplates[i].setName(infoColumn.getName());\n+        \t}\n+        \tColumn[] cols = info.getColumns(vers, templates, adapt);\n+        \tfor (int i = 0; i < cols.length; i++)\n+        \t\tcols[i].setVersionStrategy(this);\n+        \tvers.setColumns(cols);\n+        \tvers.setColumnIO(info.getColumnIO());\n+        } else {\n+           Column tmplate = new Column();\n+           tmplate.setJavaType(getJavaType());\n+           tmplate.setName(\"versn\");\n+\n+           Column[] cols = info.getColumns(vers, new Column[]{ tmplate },\n+                   adapt);\n+           cols[0].setVersionStrategy(this);\n+           vers.setColumns(cols);\n+           vers.setColumnIO(info.getColumnIO());\n+\n+           Index idx = info.getIndex(vers, cols, adapt);\n+           vers.setIndex(idx);\n+        }\n     }\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Column[] cols = vers.getColumns();\n         ColumnIO io = vers.getColumnIO();\n         Object initial = nextVersion(null);\n-        Row row = rm.getRow(vers.getClassMapping().getTable(),\n-            Row.ACTION_INSERT, sm, true);\n-        for (int i = 0; i < cols.length; i++)\n+        for (int i = 0; i < cols.length; i++) {\n+            Row row = rm.getRow(cols[i].getTable(), Row.ACTION_INSERT, sm,\n+                    true);\n             if (io.isInsertable(i, initial == null))\n-                row.setObject(cols[i], initial);\n-\n+                row.setObject(cols[i], getColumnValue(initial, i));\n+        }\n         // set initial version into state manager\n         Object nextVersion;\n         nextVersion = initial;\n@@ -136,16 +200,23 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Object curVersion = sm.getVersion();\n         Object nextVersion = nextVersion(curVersion);\n \n-        Row row = rm.getRow(vers.getClassMapping().getTable(),\n-            Row.ACTION_UPDATE, sm, true);\n-        row.setFailedObject(sm.getManagedInstance());\n \n         // set where and update conditions on row\n         for (int i = 0; i < cols.length; i++) {\n-            if (curVersion != null && sm.isVersionCheckRequired())\n-                row.whereObject(cols[i], curVersion);\n+            Row row = rm.getRow(cols[i].getTable(), Row.ACTION_UPDATE, sm,\n+                    true);\n+            row.setFailedObject(sm.getManagedInstance());\n+            if (curVersion != null && sm.isVersionCheckRequired()) {\n+                row.whereObject(cols[i], getColumnValue(curVersion, i));\n+                if (isSecondaryColumn(cols[i], sm)) {\n+                \tForeignKey[] fks = cols[i].getTable().getForeignKeys();\n+                \tfor (ForeignKey fk : fks) {\n+                \t\trow.whereForeignKey(fk, sm);\n+                \t}\n+                }\n+            }\n             if (vers.getColumnIO().isUpdatable(i, nextVersion == null))\n-                row.setObject(cols[i], nextVersion);\n+                row.setObject(cols[i], getColumnValue(nextVersion, i));\n         }\n \n         if (nextVersion != null)\n@@ -154,22 +225,25 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = rm.getRow(vers.getClassMapping().getTable(),\n-            Row.ACTION_DELETE, sm, true);\n-        row.setFailedObject(sm.getManagedInstance());\n         Column[] cols = vers.getColumns();\n \n         Object curVersion = sm.getVersion();\n         Object cur;\n         for (int i = 0; i < cols.length; i++) {\n-            if (cols.length == 1 || curVersion == null)\n-                cur = curVersion;\n-            else\n-                cur = ((Object[]) curVersion)[i];\n-\n+            Row row = rm.getRow(cols[i].getTable(),\n+            \tRow.ACTION_DELETE, sm, true);\n+            row.setFailedObject(sm.getManagedInstance());\n+            cur = getColumnValue(curVersion, i);\n             // set where and update conditions on row\n-            if (cur != null)\n+            if (cur != null) {\n                 row.whereObject(cols[i], cur);\n+                if (isSecondaryColumn(cols[i], sm)) {\n+                \tForeignKey[] fks = cols[i].getTable().getForeignKeys();\n+                \tfor (ForeignKey fk : fks) {\n+                \t\trow.whereForeignKey(fk, sm);\n+                \t}\n+                }\n+            }\n         }\n     }\n \n@@ -186,19 +260,8 @@ public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         if (!res.contains(cols[0]))\n             return null;\n \n-        Object version = null;\n-        if (cols.length > 0)\n-            version = new Object[cols.length];\n-        Object cur;\n-        for (int i = 0; i < cols.length; i++) {\n-            if (i > 0 && !res.contains(cols[i]))\n-                return null;\n-            cur = res.getObject(cols[i], -1, null);\n-            if (cols.length == 1)\n-                version = cur;\n-            else\n-                ((Object[]) version)[i] = cur;\n-        }\n+        Object version = populateFromResult(res);\n+\n         // OPENJPA-662 Allow a null StateManager because this method may just be\n         // invoked to get the result of projection query\n         if (sm != null)\n@@ -220,31 +283,8 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n                 return false;\n \n             Object memVersion = sm.getVersion();\n-            Object dbVersion = null;\n-            if (cols.length > 1)\n-                dbVersion = new Object[cols.length];\n-\n-            boolean refresh = false;\n-            Object mem, db;\n-            for (int i = 0; i < cols.length; i++) {\n-                db = res.getObject(cols[i], -1, null);\n-                if (cols.length == 1)\n-                    dbVersion = db;\n-                else\n-                    ((Object[]) dbVersion)[i] = db;\n-\n-                // if we haven't already determined that we need a refresh,\n-                // check if the mem version is earlier than the db one\n-                if (!refresh) {\n-                    if (cols.length == 1 || memVersion == null)\n-                        mem = memVersion;\n-                    else\n-                        mem = ((Object[]) memVersion)[i];\n-\n-                    if (mem == null || (db != null && compare(mem, db) < 0))\n-                        refresh = true;\n-                }\n-            }\n+            Object dbVersion  = populateFromResult(res);\n+            boolean refresh   = compare(memVersion, dbVersion) < 0;\n \n             if (updateVersion)\n                 sm.setVersion(dbVersion);\n@@ -267,4 +307,41 @@ public int compareVersion(Object v1, Object v2) {\n             return StoreManager.VERSION_LATER;\n         return StoreManager.VERSION_SAME;\n     }\n+        \n+    /**\n+     * Populate values of a version object from the given result.\n+     * \n+     * @return a single Object or an array depending on whether using a single\n+     * or multiple columns being used for representation.\n+    */\n+    Object populateFromResult(Result res) throws SQLException {\n+        if (res == null)\n+ \t\treturn null;\n+    \t\n+        Column[] cols = vers.getColumns();\n+        Object[] values = new Object[cols.length];\n+        for (int i = 0; i < cols.length; i++) {\n+            values[i] = res.getObject(cols[i], -1, null);\n+        }\n+        return (cols.length == 1) ? values[0] : values;\n+    }\n+    \n+    Object getColumnValue(Object o, int idx) {\n+    \tif (o == null) \n+    \t\treturn null;\n+    \tif (o.getClass().isArray())\n+    \t\treturn Array.get(o, idx);\n+    \treturn o;\n+    }\n+    \n+    boolean isSecondaryColumn(Column col, OpenJPAStateManager sm) {\n+    \tClassMapping mapping = (ClassMapping)sm.getMetaData();\n+    \twhile (mapping != null) {\n+    \t\tif (mapping.getTable() == col.getTable())\n+    \t\t\treturn false;\n+    \t\telse\n+    \t\t\tmapping = mapping.getPCSuperclassMapping();\n+    \t}\n+    \treturn true;\n+    }\n }"},{"sha":"07bbee57d54bdeb9a11f300906b7a5808ec0751e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -91,6 +91,11 @@ public void appendSize(SQLBuffer sql, Select sel, Joins joins) {\n         appendJoinCount(sql, sel, joins, dict, field, fk);\n     }\n \n+    public void appendIndex(SQLBuffer sql, Select sel, Joins joins) {\n+        sql.append(sel.getColumnAlias(field.getOrderColumn(),\n+            field.getName()));\n+    }\n+\n     protected static void appendJoinCount(SQLBuffer sql, Select sel,\n         Joins joins, DBDictionary dict, FieldMapping field, ForeignKey fk) {\n         String fullTable = dict.getFullName(fk.getTable(), false);"},{"sha":"2250b87bf72b2415cbc94debc75ab95d0a56e364","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","status":"modified","additions":179,"deletions":183,"changes":362,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -1,183 +1,179 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.jdbc.meta.strats;\r\n-\r\n-import java.sql.*;\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.lib.util.*;\r\n-import org.apache.openjpa.kernel.*;\r\n-import org.apache.openjpa.util.*;\r\n-import org.apache.openjpa.jdbc.meta.*;\r\n-import org.apache.openjpa.jdbc.kernel.*;\r\n-import org.apache.openjpa.jdbc.schema.*;\r\n-\r\n-/**\r\n- * <p>Handler for embedded objects as elements of a collection or map.  For\r\n- * embedded objects as fields, use the more powerful\r\n- * {@link EmbedFieldStrategy}.</p>\r\n- *\r\n- * @author Abe White\r\n- * @since 0.4.0, 1.1.0\r\n- * @nojavadoc\r\n- */\r\n-public class ElementEmbedValueHandler\r\n-    extends EmbedValueHandler\r\n-    implements RelationId {\r\n-\r\n-    private static final Localizer _loc = Localizer.forPackage\r\n-        (ElementEmbedValueHandler.class);\r\n-\r\n-    private ValueMapping _vm = null;\r\n-    private Column[] _cols = null;\r\n-    private Object[] _args = null;\r\n-    private int _nullIdx = -1;\r\n-    private boolean _synthetic = false;\r\n-\r\n-    public Column[] map(ValueMapping vm, String name, ColumnIO io,\r\n-        boolean adapt) {\r\n-        LinkedList cols = new LinkedList();\r\n-        LinkedList args = new LinkedList();\r\n-        super.map(vm, name, io, adapt, cols, args);\r\n-\r\n-        ValueMappingInfo vinfo = vm.getValueInfo();\r\n-        Column nullInd = vinfo.getNullIndicatorColumn(vm, name,\r\n-            vm.getFieldMapping().getTable(), adapt);\r\n-        if (nullInd != null)\r\n-            vm.setColumns(new Column[]{ nullInd });\r\n-\r\n-        // record index of null indicator column and whether it is synthetic\r\n-        if (nullInd != null) {\r\n-            _nullIdx = cols.indexOf(nullInd);\r\n-            if (_nullIdx == -1) {\r\n-                cols.addFirst(nullInd);\r\n-                args.addFirst(null);\r\n-                _nullIdx = 0;\r\n-                _synthetic = true;\r\n-            }\r\n-        }\r\n-\r\n-        _vm = vm;\r\n-        _cols = (Column[]) cols.toArray(new Column[cols.size()]);\r\n-        _args = args.toArray();\r\n-        return _cols;\r\n-    }\r\n-\r\n-    public boolean objectValueRequiresLoad(ValueMapping vm) {\r\n-        return true;\r\n-    }\r\n-\r\n-    public Object getResultArgument(ValueMapping vm) {\r\n-        return _args;\r\n-    }\r\n-\r\n-    public Object toDataStoreValue(ValueMapping vm, Object val,\r\n-        JDBCStore store) {\r\n-        OpenJPAStateManager em = store.getContext().getStateManager(val);\r\n-        Object rval = null;\r\n-        if (_cols.length > 1)\r\n-            rval = new Object[_cols.length];\r\n-\r\n-        // set null indicator column\r\n-        int idx = 0;\r\n-        if (_synthetic) {\r\n-            Object cval = ((EmbeddedClassStrategy) vm.getEmbeddedMapping().\r\n-                getStrategy()).getNullIndicatorValue(em);\r\n-            if (_cols.length == 1)\r\n-                return cval;\r\n-            ((Object[]) rval)[idx++] = cval;\r\n-        }\r\n-\r\n-        return super.toDataStoreValue(em, vm, store, _cols, rval, idx);\r\n-    }\r\n-\r\n-    public Object toObjectValue(ValueMapping vm, Object val,\r\n-        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch)\r\n-        throws SQLException {\r\n-        if (sm == null)\r\n-            throw new InvalidStateException(_loc.get(\"cant-project-owned\",\r\n-                vm));\r\n-\r\n-        // check null indicator first\r\n-        if (_nullIdx != -1) {\r\n-            Object nval;\r\n-            if (_cols.length == 1)\r\n-                nval = val;\r\n-            else\r\n-                nval = ((Object[]) val)[_nullIdx];\r\n-            if (((EmbeddedClassStrategy) vm.getEmbeddedMapping().\r\n-                getStrategy()).indicatesNull(nval))\r\n-                return null;\r\n-        }\r\n-\r\n-        // create embedded instance\r\n-        OpenJPAStateManager em = store.getContext().embed(null, null, sm, vm);\r\n-        int idx = (_synthetic) ? 1 : 0;\r\n-        super.toObjectValue(em, vm, val, store, fetch, _cols, idx);\r\n-\r\n-        // after loading everything from result, load the rest of the\r\n-        // configured fields\r\n-        em.load(fetch);\r\n-        return em.getManagedInstance();\r\n-    }\r\n-\r\n-    /////////////////////////////\r\n-    // RelationId implementation\r\n-    /////////////////////////////\r\n-\r\n-    public Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col) {\r\n-        return toRelationDataStoreValue(sm, col, 0);\r\n-    }\r\n-\r\n-    /**\r\n-     * Recursive helper.\r\n-     */\r\n-    private Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col,\r\n-        int idx) {\r\n-        FieldMapping field = findField(col, idx);\r\n-        if (field == null)\r\n-            throw new InternalException();\r\n-\r\n-        if (field.getHandler() instanceof RelationId)\r\n-            return ((RelationId) field.getStrategy()).\r\n-                toRelationDataStoreValue(sm, col);\r\n-        if (field.getStrategy() instanceof RelationId)\r\n-            return ((RelationId) field.getStrategy()).\r\n-                toRelationDataStoreValue(sm, col);\r\n-        return toRelationDataStoreValue(sm, col, field.getIndex() + 1);\r\n-    }\r\n-\r\n-    /**\r\n-     * Find the first field mapping that uses the given column starting with\r\n-     * the given field index.\r\n-     */\r\n-    private FieldMapping findField(Column col, int idx) {\r\n-        FieldMapping[] fms = _vm.getEmbeddedMapping().getFieldMappings();\r\n-        Column[] cols;\r\n-        for (int i = idx; i < fms.length; i++) {\r\n-            if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\r\n-                continue;\r\n-            cols = ((Embeddable) fms[i]).getColumns();\r\n-            for (int j = 0; j < cols.length; j++)\r\n-                if (cols[j] == col)\r\n-                    return fms[i];\r\n-        }\r\n-        return null;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.meta.strats;\n+\n+import java.sql.*;\n+import java.util.*;\n+\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.kernel.*;\n+import org.apache.openjpa.util.*;\n+import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.kernel.*;\n+import org.apache.openjpa.jdbc.schema.*;\n+\n+/**\n+ * <p>Handler for embedded objects as elements of a collection or map.  For\n+ * embedded objects as fields, use the more powerful\n+ * {@link EmbedFieldStrategy}.</p>\n+ *\n+ * @author Abe White\n+ * @since 0.4.0, 1.1.0\n+ * @nojavadoc\n+ */\n+public class ElementEmbedValueHandler\n+    extends EmbedValueHandler\n+    implements RelationId {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (ElementEmbedValueHandler.class);\n+\n+    private ValueMapping _vm = null;\n+    private Column[] _cols = null;\n+    private Object[] _args = null;\n+    private int _nullIdx = -1;\n+    private boolean _synthetic = false;\n+\n+    public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        LinkedList cols = new LinkedList();\n+        LinkedList args = new LinkedList();\n+        super.map(vm, name, io, adapt, cols, args);\n+\n+        ValueMappingInfo vinfo = vm.getValueInfo();\n+        Column nullInd = vinfo.getNullIndicatorColumn(vm, name,\n+            vm.getFieldMapping().getTable(), adapt);\n+        if (nullInd != null)\n+            vm.setColumns(new Column[]{ nullInd });\n+\n+        // record index of null indicator column and whether it is synthetic\n+        if (nullInd != null) {\n+            _nullIdx = cols.indexOf(nullInd);\n+            if (_nullIdx == -1) {\n+                cols.addFirst(nullInd);\n+                args.addFirst(null);\n+                _nullIdx = 0;\n+                _synthetic = true;\n+            }\n+        }\n+\n+        _vm = vm;\n+        _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n+        _args = args.toArray();\n+        return _cols;\n+    }\n+\n+    public boolean objectValueRequiresLoad(ValueMapping vm) {\n+        return true;\n+    }\n+\n+    public Object getResultArgument(ValueMapping vm) {\n+        return _args;\n+    }\n+\n+    public Object toDataStoreValue(ValueMapping vm, Object val,\n+        JDBCStore store) {\n+        OpenJPAStateManager em = store.getContext().getStateManager(val);\n+        Object rval = null;\n+        if (_cols.length > 1)\n+            rval = new Object[_cols.length];\n+\n+        // set null indicator column\n+        int idx = 0;\n+        if (_synthetic) {\n+            Object cval = ((EmbeddedClassStrategy) vm.getEmbeddedMapping().\n+                getStrategy()).getNullIndicatorValue(em);\n+            if (_cols.length == 1)\n+                return cval;\n+            ((Object[]) rval)[idx++] = cval;\n+        }\n+\n+        return super.toDataStoreValue(em, vm, store, _cols, rval, idx);\n+    }\n+\n+    public Object toObjectValue(ValueMapping vm, Object val,\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch)\n+        throws SQLException {\n+        // check null indicator first\n+        if (_nullIdx != -1) {\n+            Object nval;\n+            if (_cols.length == 1)\n+                nval = val;\n+            else\n+                nval = ((Object[]) val)[_nullIdx];\n+            if (((EmbeddedClassStrategy) vm.getEmbeddedMapping().\n+                getStrategy()).indicatesNull(nval))\n+                return null;\n+        }\n+\n+        // create embedded instance\n+        OpenJPAStateManager em = store.getContext().embed(null, null, sm, vm);\n+        int idx = (_synthetic) ? 1 : 0;\n+        super.toObjectValue(em, vm, val, store, fetch, _cols, idx);\n+\n+        // after loading everything from result, load the rest of the\n+        // configured fields\n+        em.load(fetch);\n+        return em.getManagedInstance();\n+    }\n+\n+    /////////////////////////////\n+    // RelationId implementation\n+    /////////////////////////////\n+\n+    public Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col) {\n+        return toRelationDataStoreValue(sm, col, 0);\n+    }\n+\n+    /**\n+     * Recursive helper.\n+     */\n+    private Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col,\n+        int idx) {\n+        FieldMapping field = findField(col, idx);\n+        if (field == null)\n+            throw new InternalException();\n+\n+        if (field.getHandler() instanceof RelationId)\n+            return ((RelationId) field.getStrategy()).\n+                toRelationDataStoreValue(sm, col);\n+        if (field.getStrategy() instanceof RelationId)\n+            return ((RelationId) field.getStrategy()).\n+                toRelationDataStoreValue(sm, col);\n+        return toRelationDataStoreValue(sm, col, field.getIndex() + 1);\n+    }\n+\n+    /**\n+     * Find the first field mapping that uses the given column starting with\n+     * the given field index.\n+     */\n+    private FieldMapping findField(Column col, int idx) {\n+        FieldMapping[] fms = _vm.getEmbeddedMapping().getFieldMappings();\n+        Column[] cols;\n+        for (int i = idx; i < fms.length; i++) {\n+            if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\n+                continue;\n+            cols = ((Embeddable) fms[i]).getColumns();\n+            for (int j = 0; j < cols.length; j++)\n+                if (cols[j] == col)\n+                    return fms[i];\n+        }\n+        return null;\n+\t}\n+}"},{"sha":"393bbc2620bb91db8fa72ea6ba40f2d977f32df7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":78,"deletions":11,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.RelationId;\n@@ -57,14 +58,14 @@\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n-import org.apache.openjpa.util.UserException;\n \n /**\n  * Mapping for an embedded persistent object.\n@@ -73,7 +74,8 @@\n  * @since 0.4.0\n  */\n public class EmbedFieldStrategy\n-    extends AbstractFieldStrategy {\n+    extends AbstractFieldStrategy   \n+    implements Embeddable {\n \n     private static final int INSERT = 0;\n     private static final int UPDATE = 1;\n@@ -413,7 +415,20 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         StoreContext ctx = store.getContext();\n         OpenJPAStateManager em = ctx.embed(null, null, sm, field);\n         sm.storeObject(field.getIndex(), em.getManagedInstance());\n+        boolean needsLoad = loadFields(em, store, fetch, res);\n \n+        // After loading everything from result, load the rest of the\n+        // configured fields if anything is missing.\n+        if (needsLoad && \n+            fetch.requiresFetch(field.getFieldMetaData()) == \n+                JDBCFetchConfiguration.FETCH_LOAD) {\n+          em.load(fetch);\n+        }\n+    }\n+\n+    private boolean loadFields(OpenJPAStateManager em, JDBCStore store,\n+        JDBCFetchConfiguration fetch, Result res)\n+        throws SQLException {\n         FieldMapping[] fields = field.getEmbeddedMapping().getFieldMappings();\n         Object eres, processed;\n         boolean needsLoad = false;\n@@ -438,14 +453,7 @@ else if (eres != null) {\n                 res.endDataRequest();\n             }\n         }\n-\n-        // After loading everything from result, load the rest of the\n-        // configured fields if anything is missing.\n-        if (needsLoad && \n-            fetch.requiresFetch(field.getFieldMetaData()) == \n-                JDBCFetchConfiguration.FETCH_LOAD) {\n-          em.load(fetch);\n-        }\n+        return needsLoad;\n     }\n \n     /**\n@@ -524,11 +532,70 @@ public Joins join(Joins joins, boolean forceOuter) {\n         return field.join(joins, forceOuter, false);\n     }\n \n+    /**\n+     * Loading embed object without instantiating owner entity\n+     */\n     public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n-        throw new UserException(_loc.get(\"cant-project-owned\", field));\n+        Boolean isNull = indicatesNull(res);\n+        if (isNull == null)\n+            return null;\n+\n+        StoreContext ctx = store.getContext();\n+        // load primary key of owner entity\n+        Object owner = field.getDefiningMapping().getObjectId(store, res, \n+            null, true, joins);\n+        OpenJPAStateManager em = ctx.embed(null, null, null, field);\n+        // set owner id\n+        ((StateManagerImpl) em).setOwner(owner);\n+        boolean needsLoad = loadFields(em, store, fetch, res);\n+\n+        // After loading everything from result, load the rest of the\n+        // configured fields if anything is missing.\n+        if (needsLoad && \n+            fetch.requiresFetch(field.getFieldMetaData()) == \n+                JDBCFetchConfiguration.FETCH_LOAD) {\n+          em.load(fetch);\n+        }\n+        \n+        return em.getManagedInstance();\n+    }\n+    \n+    /////////////////////////////\n+    // Embeddable implementation\n+    /////////////////////////////\n+\n+    public Column[] getColumns() {\n+        return field.getColumns();\n+    }\n+\n+    public ColumnIO getColumnIO() {\n+        return field.getColumnIO();\n+    }\n+\n+    public Object[] getResultArguments() {\n+        return null;\n+    }\n+\n+    public Object toEmbeddedDataStoreValue(Object val, JDBCStore store) {\n+        return toDataStoreValue(val, store);\n+    }\n+\n+    public Object toEmbeddedObjectValue(Object val) {\n+        //return UNSUPPORTED;\n+        return null;\n+    }\n+\n+    public void loadEmbedded(OpenJPAStateManager sm, JDBCStore store,\n+        JDBCFetchConfiguration fetch, Object val)\n+        throws SQLException {\n+        if (val != null)\n+            sm.storeObject(field.getIndex(), val);\n+        else\n+            sm.storeObject(field.getIndex(), null);\n     }\n+    \n \n     /**\n      * State manager that represents a null embedded object."},{"sha":"154d55c907a13eab304aebc1f2f6a8305d65af17","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":142,"deletions":24,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -19,16 +19,23 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n+import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.ValueMappingImpl;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.MetaDataException;\n \n@@ -60,12 +67,18 @@ protected void map(ValueMapping vm, String name, ColumnIO io,\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\n                 continue;\n-            if (!(fms[i].getStrategy() instanceof Embeddable))\n+            FieldStrategy strat = fms[i].getStrategy();\n+            \n+            if (!(strat instanceof Embeddable))\n                 throw new MetaDataException(_loc.get(\"not-embeddable\",\n                     vm, fms[i]));\n-\n-            curCols = ((Embeddable) fms[i].getStrategy()).getColumns();\n-            curIO = ((Embeddable) fms[i].getStrategy()).getColumnIO();\n+            \n+            ValueMapping val = fms[i].getValueMapping();\n+            if (val.getEmbeddedMapping() != null)\n+                map(val, name, io, adapt, cols, args);\n+            \n+            curCols = ((Embeddable) strat).getColumns();\n+            curIO = ((Embeddable) strat).getColumnIO();\n             for (int j = 0; j < curCols.length; j++) {\n                 io.setInsertable(cols.size(), curIO.isInsertable(j, false));\n                 io.setNullInsertable(cols.size(),\n@@ -96,7 +109,27 @@ else if (curCols.length > 1)\n      * @param idx index in columns array to start\n      */\n     protected Object toDataStoreValue(OpenJPAStateManager em, ValueMapping vm,\n-        JDBCStore store, Column[] cols, Object rval, int idx) {\n+            JDBCStore store, Column[] cols, Object rval, int idx) {\n+        \n+        // This is a placeholder to hold the value generated in \n+        // toDataStoreValue1. When this method is called from \n+        // ElementEmbedValueHandler or ObjectIdValueHandler, \n+        // if the dimension of cols > 1, rval is an array of the \n+        // same dimension. If the dimension of cols is 1, rval is null.\n+        // If rval is not null, it is an array of objects and this array\n+        // will be populated in toDatastoreValue1. If rval is null,\n+        // a new value will be added to rvals in toDataStoreValue1\n+        // and return to the caller.\n+        List rvals = new ArrayList();\n+        if (rval != null)\n+            rvals.add(rval);\n+        \n+        toDataStoreValue1(em, vm, store, cols, rvals, idx);\n+        return rvals.get(0);\n+    }    \n+    \n+    protected int toDataStoreValue1(OpenJPAStateManager em, ValueMapping vm,\n+        JDBCStore store, Column[] cols, List rvals, int idx) {\n         // set rest of columns from fields\n         FieldMapping[] fms = vm.getEmbeddedMapping().getFieldMappings();\n         Object cval;\n@@ -105,23 +138,50 @@ protected Object toDataStoreValue(OpenJPAStateManager em, ValueMapping vm,\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\n                 continue;\n+            \n+            // This recursive code is mainly to deal with situations\n+            // where an entity contains a collection of embeddableA.\n+            // The embeddableA element in the collection contains an \n+            // embeddableB. The parameter vm to toDataStoreValue is \n+            // embeddableA. If some field in embeddableA is of type \n+            // embeddableB, recursive call is required to populate the \n+            // value for embeddableB.\n+            ValueMapping val = fms[i].getValueMapping();\n+            if (val.getEmbeddedMapping() != null) {\n+                cval = (em == null) ? null : em.fetch(i);\n+                if (cval instanceof PersistenceCapable) {\n+                    OpenJPAStateManager embedSm = (OpenJPAStateManager)\n+                        ((PersistenceCapable)cval).pcGetStateManager();\n+                    idx = toDataStoreValue1(embedSm, val, store, cols, rvals,\n+                            idx);\n+                } else if (cval instanceof ObjectIdStateManager) {\n+                    idx = toDataStoreValue1((ObjectIdStateManager)cval, val,\n+                            store, cols, rvals, idx);\n+                } else if (cval == null) {\n+                    idx = toDataStoreValue1(null, val, store, cols, rvals, idx);\n+                }\n+            }\n+            \n             embed = (Embeddable) fms[i].getStrategy();\n             ecols = embed.getColumns();\n             if (ecols.length == 0)\n                 continue;\n \n             cval = (em == null) ? null : em.fetch(i);\n             cval = embed.toEmbeddedDataStoreValue(cval, store);\n-            if (cols.length == 1)\n-                rval = cval;\n-            else if (ecols.length == 1)\n+            if (cols.length == 1) {\n+                // rvals is empty\n+                rvals.add(cval); // save the return value\n+            } else if (ecols.length == 1) {\n+                Object rval = rvals.get(0);\n                 ((Object[]) rval)[idx++] = cval;\n-            else {\n+            } else {\n+                Object rval = rvals.get(0);\n                 System.arraycopy(cval, 0, rval, idx, ecols.length);\n                 idx += ecols.length;\n             }\n         }\n-        return rval;\n+        return idx;\n     }\n \n     /**\n@@ -136,6 +196,13 @@ else if (ecols.length == 1)\n      * @param idx index in columns array to start\n      */\n     protected void toObjectValue(OpenJPAStateManager em, ValueMapping vm,\n+            Object val, JDBCStore store, JDBCFetchConfiguration fetch,\n+            Column[] cols, int idx)\n+            throws SQLException {\n+        toObjectValue1(em, vm, val, store, fetch, cols, idx);\n+    }    \n+    \n+    protected int toObjectValue1(OpenJPAStateManager em, ValueMapping vm,\n         Object val, JDBCStore store, JDBCFetchConfiguration fetch,\n         Column[] cols, int idx)\n         throws SQLException {\n@@ -147,26 +214,77 @@ protected void toObjectValue(OpenJPAStateManager em, ValueMapping vm,\n             if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\n                 continue;\n \n+            ValueMapping vm1 = fms[i].getValueMapping();\n+            OpenJPAStateManager em1 = null;\n+            \n             embed = (Embeddable) fms[i].getStrategy();\n-            ecols = embed.getColumns();\n-            if (ecols.length == 0)\n-                cval = null;\n-            else if (idx == 0 && ecols.length == cols.length)\n-                cval = val;\n-            else if (ecols.length == 1)\n-                cval = ((Object[]) val)[idx++];\n-            else {\n-                cval = new Object[ecols.length];\n-                System.arraycopy(val, idx, cval, 0, ecols.length);\n-                idx += ecols.length;\n+            if (vm1.getEmbeddedMapping() != null) {\n+                if (em instanceof StateManagerImpl) {\n+                em1 = store.getContext().embed(null, null, em, vm1);\n+                idx = toObjectValue1(em1, vm1, val, store, fetch, cols, idx);\n+                } else if (em instanceof ObjectIdStateManager) {\n+                    em1 = new ObjectIdStateManager(null, null, vm1);\n+                    idx = toObjectValue1(em1, vm1, val, store, null,\n+                            getColumns(fms[i]), idx);\n+                }\n+                cval = em1.getManagedInstance();\n+            } else {\n+                ecols = embed.getColumns();\n+                if (ecols.length == 0)\n+                    cval = null;\n+                else if (idx == 0 && ecols.length == cols.length)\n+                    cval = val;\n+                else if (ecols.length == 1)\n+                    cval = ((Object[]) val)[idx++];\n+                else {\n+                    cval = new Object[ecols.length];\n+                    System.arraycopy(val, idx, cval, 0, ecols.length);\n+                    idx += ecols.length;\n+                }\n             }\n \n-            if (store != null)\n+            if (store != null && em instanceof StateManagerImpl)\n                 embed.loadEmbedded(em, store, fetch, cval);\n             else {\n-                cval = embed.toEmbeddedObjectValue(cval);\n-                em.store(fms[i].getIndex(), cval);\n+                if (!(em instanceof ObjectIdStateManager))\n+                    cval = embed.toEmbeddedObjectValue(cval);\n+                if (fms[i].getHandler() != null)\n+                    cval = fms[i].getHandler().toObjectValue(fms[i], cval);\n+\n+                em.store(fms[i].getIndex(), cval); \n             }\n         }\n+        return idx;\n+    }\n+    private Column[] getColumns(FieldMapping fm) {\n+        List<Column> colList = new ArrayList<Column>();\n+        getEmbeddedIdCols(fm, colList);\n+        Column[] cols = new Column[colList.size()];\n+        int i = 0;\n+        for (Column col : colList) {\n+            cols[i++] = col;\n+        }\n+        return cols;\n+    }\n+    \n+    public static void getEmbeddedIdCols(FieldMapping fmd, List cols) {\n+        ClassMapping embed = fmd.getEmbeddedMapping();\n+        FieldMapping[] fmds = embed.getFieldMappings();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (fmds[i].getValue().getEmbeddedMetaData() == null) {\n+                getIdColumns(fmds[i], cols);\n+            } else {\n+                getEmbeddedIdCols(fmds[i], cols);\n+            }\n+        }\n+    }\n+    \n+    public static void getIdColumns(FieldMapping fmd, List cols) {\n+        Column[] pkCols =  ((ValueMappingImpl)fmd.getValue()).getColumns();\n+        for (int j = 0; j < pkCols.length; j++) {\n+            Column newCol = new Column();\n+            newCol.setName(pkCols[j].getName());\n+            cols.add(newCol);\n+        }\n     }\n }"},{"sha":"6b18ff85a517174ce5e0a413705803c482103231","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -47,7 +47,11 @@ public void map(boolean adapt) {\n         ClassMappingInfo info = cls.getMappingInfo();\n         info.assertNoSchemaComponents(cls, true);\n \n-        ClassMapping owner = vm.getFieldMapping().getDefiningMapping();\n+        ClassMapping owner = null;\n+        if (vm.getValueMappedByMapping() != null)\n+            owner = vm.getValueMappedByMapping().getDefiningMapping();\n+        else\n+            owner = vm.getFieldMapping().getDefiningMapping();\n         cls.setIdentityType(owner.getIdentityType());\n         cls.setObjectIdType(owner.getObjectIdType(),\n             owner.isObjectIdTypeShared());"},{"sha":"90c9fc8306716dd46ff9c07c2ef8981e0c5ca144","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","status":"modified","additions":281,"deletions":250,"changes":531,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -1,250 +1,281 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.jdbc.meta.strats;\r\n-\r\n-import java.sql.*;\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.lib.util.*;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-import org.apache.openjpa.util.*;\r\n-import org.apache.openjpa.meta.*;\r\n-import org.apache.openjpa.jdbc.meta.*;\r\n-import org.apache.openjpa.jdbc.kernel.*;\r\n-import org.apache.openjpa.jdbc.schema.*;\r\n-import org.apache.openjpa.jdbc.sql.*;\r\n-\r\n-/**\r\n- * <p>Mapping for a collection of values in a separate table controlled by a\r\n- * {@link ValueHandler}.</p>\r\n- *\r\n- * @author Abe White\r\n- * @since 0.4.0, 1.1.0\r\n- */\r\n-public class HandlerCollectionTableFieldStrategy\r\n-    extends StoreCollectionFieldStrategy\r\n-    implements LRSCollectionFieldStrategy {\r\n-\r\n-    private static final Localizer _loc = Localizer.forPackage\r\n-        (HandlerCollectionTableFieldStrategy.class);\r\n-\r\n-    private Column[] _cols = null;\r\n-    private ColumnIO _io = null;\r\n-    private boolean _load = false;\r\n-    private boolean _lob = false;\r\n-    private boolean _embed = false;\r\n-\r\n-    public FieldMapping getFieldMapping() {\r\n-        return field;\r\n-    }\r\n-\r\n-    public ClassMapping[] getIndependentElementMappings(boolean traverse) {\r\n-        return ClassMapping.EMPTY_MAPPINGS;\r\n-    }\r\n-\r\n-    public Column[] getElementColumns(ClassMapping elem) {\r\n-        return _cols;\r\n-    }\r\n-\r\n-    public ForeignKey getJoinForeignKey(ClassMapping elem) {\r\n-        return field.getJoinForeignKey();\r\n-    }\r\n-\r\n-    public void selectElement(Select sel, ClassMapping elem, JDBCStore store,\r\n-        JDBCFetchConfiguration fetch, int eagerMode, Joins joins) {\r\n-        sel.select(_cols, joins);\r\n-    }\r\n-\r\n-    public Object loadElement(OpenJPAStateManager sm, JDBCStore store,\r\n-        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n-        throws SQLException {\r\n-        return HandlerStrategies.loadObject(field.getElementMapping(),\r\n-            sm, store, fetch, res, joins, _cols, _load);\r\n-    }\r\n-\r\n-    protected Joins join(Joins joins, ClassMapping elem) {\r\n-        return join(joins, false);\r\n-    }\r\n-\r\n-    public Joins joinElementRelation(Joins joins, ClassMapping elem) {\r\n-        return joinRelation(joins, false, false);\r\n-    }\r\n-\r\n-    protected Proxy newLRSProxy() {\r\n-        return new LRSProxyCollection(this);\r\n-    }\r\n-\r\n-    public void map(boolean adapt) {\r\n-        if (field.getTypeCode() != JavaTypes.COLLECTION\r\n-            && field.getTypeCode() != JavaTypes.ARRAY)\r\n-            throw new MetaDataException(_loc.get(\"not-coll\", field));\r\n-\r\n-        assertNotMappedBy();\r\n-        field.getValueInfo().assertNoSchemaComponents(field, !adapt);\r\n-        field.getKeyMapping().getValueInfo().assertNoSchemaComponents\r\n-            (field.getKey(), !adapt);\r\n-\r\n-        ValueMapping elem = field.getElementMapping();\r\n-        if (elem.getHandler() == null)\r\n-            throw new MetaDataException(_loc.get(\"no-handler\", elem));\r\n-\r\n-        field.mapJoin(adapt, true);\r\n-        _io = new ColumnIO();\r\n-        _cols = HandlerStrategies.map(elem, \"element\", _io, adapt);\r\n-\r\n-        FieldMappingInfo finfo = field.getMappingInfo();\r\n-        Column orderCol = finfo.getOrderColumn(field, field.getTable(), adapt);\r\n-        field.setOrderColumn(orderCol);\r\n-        field.setOrderColumnIO(finfo.getColumnIO());\r\n-        field.mapPrimaryKey(adapt);\r\n-    }\r\n-\r\n-    public void initialize() {\r\n-        for (int i = 0; !_lob && i < _cols.length; i++)\r\n-            _lob = _cols[i].isLob();\r\n-\r\n-        ValueMapping elem = field.getElementMapping();\r\n-        _embed = elem.getEmbeddedMetaData() != null;\r\n-        _load = elem.getHandler().objectValueRequiresLoad(elem);\r\n-    }\r\n-\r\n-    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n-        throws SQLException {\r\n-        insert(sm, store, rm, sm.fetchObject(field.getIndex()));\r\n-    }\r\n-\r\n-    private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\r\n-        Object vals)\r\n-        throws SQLException {\r\n-        Collection coll;\r\n-        if (field.getTypeCode() == JavaTypes.ARRAY)\r\n-            coll = JavaTypes.toList(vals, field.getElement().getType(),\r\n-                false);\r\n-        else\r\n-            coll = (Collection) vals;\r\n-        if (coll == null || coll.isEmpty())\r\n-            return;\r\n-\r\n-        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\r\n-        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\r\n-            sm);\r\n-\r\n-        ValueMapping elem = field.getElementMapping();\r\n-        Column order = field.getOrderColumn();\r\n-        boolean setOrder = field.getOrderColumnIO().isInsertable(order, false);\r\n-        int idx = 0;\r\n-        for (Iterator itr = coll.iterator(); itr.hasNext(); idx++) {\r\n-            HandlerStrategies.set(elem, itr.next(), store, row, _cols,\r\n-                _io, true);\r\n-            if (setOrder)\r\n-                row.setInt(order, idx);\r\n-            rm.flushSecondaryRow(row);\r\n-        }\r\n-    }\r\n-\r\n-    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n-        throws SQLException {\r\n-        Object obj = sm.fetchObject(field.getIndex());\r\n-        ChangeTracker ct = null;\r\n-        if (obj instanceof Proxy) {\r\n-            Proxy proxy = (Proxy) obj;\r\n-            if (Proxies.isOwner(proxy, sm, field.getIndex()))\r\n-                ct = proxy.getChangeTracker();\r\n-        }\r\n-\r\n-        // if no fine-grained change tracking then just delete and reinsert\r\n-        if (ct == null || !ct.isTracking()) {\r\n-            delete(sm, store, rm);\r\n-            insert(sm, store, rm, obj);\r\n-            return;\r\n-        }\r\n-\r\n-        // delete the removes\r\n-        ValueMapping elem = field.getElementMapping();\r\n-        Collection rem = ct.getRemoved();\r\n-        if (!rem.isEmpty()) {\r\n-            Row delRow = rm.getSecondaryRow(field.getTable(),\r\n-                Row.ACTION_DELETE);\r\n-            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n-            for (Iterator itr = rem.iterator(); itr.hasNext();) {\r\n-                HandlerStrategies.where(elem, itr.next(), store, delRow,\r\n-                    _cols);\r\n-                rm.flushSecondaryRow(delRow);\r\n-            }\r\n-        }\r\n-\r\n-        // insert the adds\r\n-        Collection add = ct.getAdded();\r\n-        if (!add.isEmpty()) {\r\n-            Row addRow = rm.getSecondaryRow(field.getTable(),\r\n-                Row.ACTION_INSERT);\r\n-            addRow.setForeignKey(field.getJoinForeignKey(),\r\n-                field.getJoinColumnIO(), sm);\r\n-\r\n-            int seq = ct.getNextSequence();\r\n-            Column order = field.getOrderColumn();\r\n-            boolean setOrder = field.getOrderColumnIO().isInsertable(order,\r\n-                false);\r\n-            for (Iterator itr = add.iterator(); itr.hasNext(); seq++) {\r\n-                HandlerStrategies.set(elem, itr.next(), store, addRow, _cols,\r\n-                    _io, true);\r\n-                if (setOrder)\r\n-                    addRow.setInt(order, seq);\r\n-                rm.flushSecondaryRow(addRow);\r\n-            }\r\n-            if (order != null)\r\n-                ct.setNextSequence(seq);\r\n-        }\r\n-    }\r\n-\r\n-    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n-        throws SQLException {\r\n-        Row row = rm.getAllRows(field.getTable(), Row.ACTION_DELETE);\r\n-        row.whereForeignKey(field.getJoinForeignKey(), sm);\r\n-        rm.flushAllRows(row);\r\n-    }\r\n-\r\n-    public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\r\n-        JDBCStore store, JDBCFetchConfiguration fetch) {\r\n-        // can't do any combined select with lobs, since they don't allow\r\n-        // select distinct.  cant select eager parallel on embedded, because\r\n-        // during parallel result processing the owning sm won't be available\r\n-        // for each elem\r\n-        if (_lob || (_embed && type == Select.EAGER_PARALLEL))\r\n-            return 0;\r\n-        return super.supportsSelect(sel, type, sm, store, fetch);\r\n-    }\r\n-\r\n-    public Object toDataStoreValue(Object val, JDBCStore store) {\r\n-        return HandlerStrategies.toDataStoreValue(field.getElementMapping(),\r\n-            val, _cols, store);\r\n-    }\r\n-\r\n-    public Joins join(Joins joins, boolean forceOuter) {\r\n-        return field.join(joins, forceOuter, true);\r\n-    }\r\n-\r\n-    public Joins joinRelation(Joins joins, boolean forceOuter,\r\n-        boolean traverse) {\r\n-        if (traverse)\r\n-            HandlerStrategies.assertJoinable(field.getElementMapping());\r\n-        return joins;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.meta.strats;\n+\n+import java.sql.*;\n+import java.util.*;\n+\n+import org.apache.openjpa.lib.util.*;\n+\n+import org.apache.openjpa.kernel.*;\n+import org.apache.openjpa.util.*;\n+import org.apache.openjpa.meta.*;\n+import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.kernel.*;\n+import org.apache.openjpa.jdbc.schema.*;\n+import org.apache.openjpa.jdbc.sql.*;\n+\n+/**\n+ * <p>Mapping for a collection of values in a separate table controlled by a\n+ * {@link ValueHandler}.</p>\n+ *\n+ * @author Abe White\n+ * @since 0.4.0, 1.1.0\n+ */\n+public class HandlerCollectionTableFieldStrategy\n+    extends StoreCollectionFieldStrategy\n+    implements LRSCollectionFieldStrategy {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (HandlerCollectionTableFieldStrategy.class);\n+\n+    private Column[] _cols = null;\n+    private ColumnIO _io = null;\n+    private boolean _load = false;\n+    private boolean _lob = false;\n+    private boolean _embed = false;\n+\n+    public FieldMapping getFieldMapping() {\n+        return field;\n+    }\n+\n+    public ClassMapping[] getIndependentElementMappings(boolean traverse) {\n+        return ClassMapping.EMPTY_MAPPINGS;\n+    }\n+\n+    public Column[] getElementColumns(ClassMapping elem) {\n+        return _cols;\n+    }\n+\n+    public ForeignKey getJoinForeignKey(ClassMapping elem) {\n+        return field.getJoinForeignKey();\n+    }\n+\n+    public void selectElement(Select sel, ClassMapping elem, JDBCStore store,\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins joins) {\n+        sel.select(_cols, joins);\n+    }\n+\n+    public Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n+        throws SQLException {\n+        return HandlerStrategies.loadObject(field.getElementMapping(),\n+            sm, store, fetch, res, joins, _cols, _load);\n+    }\n+\n+    protected Joins join(Joins joins, ClassMapping elem) {\n+        return join(joins, false);\n+    }\n+\n+    public Joins joinElementRelation(Joins joins, ClassMapping elem) {\n+        return joinRelation(joins, false, false);\n+    }\n+\n+    protected Proxy newLRSProxy() {\n+        return new LRSProxyCollection(this);\n+    }\n+\n+    public void map(boolean adapt) {\n+        if (field.getTypeCode() != JavaTypes.COLLECTION\n+            && field.getTypeCode() != JavaTypes.ARRAY)\n+            throw new MetaDataException(_loc.get(\"not-coll\", field));\n+\n+        assertNotMappedBy();\n+        field.getValueInfo().assertNoSchemaComponents(field, !adapt);\n+        field.getKeyMapping().getValueInfo().assertNoSchemaComponents\n+            (field.getKey(), !adapt);\n+\n+        ValueMapping elem = field.getElementMapping();\n+        if (elem.getHandler() == null)\n+            throw new MetaDataException(_loc.get(\"no-handler\", elem));\n+\n+        field.mapJoin(adapt, true);\n+        _io = new ColumnIO();\n+        _cols = HandlerStrategies.map(elem, \"element\", _io, adapt);\n+\n+        FieldMappingInfo finfo = field.getMappingInfo();\n+        Column orderCol = finfo.getOrderColumn(field, field.getTable(), adapt);\n+        field.setOrderColumn(orderCol);\n+        field.setOrderColumnIO(finfo.getColumnIO());\n+        field.mapPrimaryKey(adapt);\n+    }\n+\n+    public void initialize() {\n+        for (int i = 0; !_lob && i < _cols.length; i++)\n+            _lob = _cols[i].isLob();\n+\n+        ValueMapping elem = field.getElementMapping();\n+        _embed = elem.getEmbeddedMetaData() != null;\n+        _load = elem.getHandler().objectValueRequiresLoad(elem);\n+    }\n+\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n+        throws SQLException {\n+        insert(sm, store, rm, sm.fetchObject(field.getIndex()));\n+    }\n+\n+    private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n+        Object vals)\n+        throws SQLException {\n+        Collection coll;\n+        if (field.getTypeCode() == JavaTypes.ARRAY)\n+            coll = JavaTypes.toList(vals, field.getElement().getType(),\n+                false);\n+        else\n+            coll = (Collection) vals;\n+        if (coll == null || coll.isEmpty())\n+            return;\n+\n+        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\n+        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\n+            sm);\n+\n+        StoreContext ctx = sm.getContext();\n+        ValueMapping elem = field.getElementMapping();\n+        Column order = field.getOrderColumn();\n+        boolean setOrder = field.getOrderColumnIO().isInsertable(order, false);\n+        int idx = 0;\n+        for (Iterator itr = coll.iterator(); itr.hasNext(); idx++) {\n+            Object val = itr.next();\n+            HandlerStrategies.set(elem, val, store, row, _cols,\n+                _io, true);\n+            StateManagerImpl esm = (StateManagerImpl)ctx.getStateManager(val);\n+            if (esm != null) {\n+                boolean isEmbedded = esm.isEmbedded();\n+                Collection rels = new ArrayList();\n+                if (isEmbedded) {\n+                    getRelations(esm, rels, ctx);\n+                    for (Object rel : rels) {\n+                        elem.setForeignKey(row, (StateManagerImpl)rel);\n+                    }\n+                }\n+            }\n+            if (setOrder)\n+                row.setInt(order, idx);\n+            rm.flushSecondaryRow(row);\n+        }\n+    }\n+    \n+    private void getRelations(StateManagerImpl sm, Collection rels, \n+        StoreContext ctx) {\n+        FieldMetaData[] fields = sm.getMetaData().getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            Object obj = sm.fetch(i);\n+            StateManagerImpl esm = (StateManagerImpl)ctx.getStateManager(obj);\n+            if (esm != null) {\n+                if (!esm.isEmbedded())\n+                    rels.add(esm);\n+                else\n+                    getRelations(esm, rels, ctx);\n+            }    \n+        }\n+    }    \n+\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n+        throws SQLException {\n+        Object obj = sm.fetchObject(field.getIndex());\n+        ChangeTracker ct = null;\n+        if (obj instanceof Proxy) {\n+            Proxy proxy = (Proxy) obj;\n+            if (Proxies.isOwner(proxy, sm, field.getIndex()))\n+                ct = proxy.getChangeTracker();\n+        }\n+\n+        Column order = field.getOrderColumn();\n+\n+        // if no fine-grained change tracking or if an item was removed\n+        // from an ordered collection, delete and reinsert\n+        if (ct == null || !ct.isTracking() ||\n+            (order != null && !ct.getRemoved().isEmpty())) {\n+            delete(sm, store, rm);\n+            insert(sm, store, rm, obj);\n+            return;\n+        }\n+\n+        // delete the removes\n+        ValueMapping elem = field.getElementMapping();\n+        Collection rem = ct.getRemoved();\n+        if (!rem.isEmpty()) {\n+            Row delRow = rm.getSecondaryRow(field.getTable(),\n+                Row.ACTION_DELETE);\n+            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\n+            for (Iterator itr = rem.iterator(); itr.hasNext();) {\n+                HandlerStrategies.where(elem, itr.next(), store, delRow,\n+                    _cols);\n+                rm.flushSecondaryRow(delRow);\n+            }\n+        }\n+\n+        // insert the adds\n+        Collection add = ct.getAdded();\n+        if (!add.isEmpty()) {\n+            Row addRow = rm.getSecondaryRow(field.getTable(),\n+                Row.ACTION_INSERT);\n+            addRow.setForeignKey(field.getJoinForeignKey(),\n+                field.getJoinColumnIO(), sm);\n+\n+            int seq = ct.getNextSequence();\n+            boolean setOrder = field.getOrderColumnIO().isInsertable(order,\n+                false);\n+            for (Iterator itr = add.iterator(); itr.hasNext(); seq++) {\n+                HandlerStrategies.set(elem, itr.next(), store, addRow, _cols,\n+                    _io, true);\n+                if (setOrder)\n+                    addRow.setInt(order, seq);\n+                rm.flushSecondaryRow(addRow);\n+            }\n+            if (order != null)\n+                ct.setNextSequence(seq);\n+        }\n+    }\n+\n+    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n+        throws SQLException {\n+        Row row = rm.getAllRows(field.getTable(), Row.ACTION_DELETE);\n+        row.whereForeignKey(field.getJoinForeignKey(), sm);\n+        rm.flushAllRows(row);\n+    }\n+\n+    public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n+        JDBCStore store, JDBCFetchConfiguration fetch) {\n+        // can't do any combined select with lobs, since they don't allow\n+        // select distinct.  cant select eager parallel on embedded, because\n+        // during parallel result processing the owning sm won't be available\n+        // for each elem\n+        if (_lob || (_embed && type == Select.EAGER_PARALLEL))\n+            return 0;\n+        return super.supportsSelect(sel, type, sm, store, fetch);\n+    }\n+\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\n+        return HandlerStrategies.toDataStoreValue(field.getElementMapping(),\n+            val, _cols, store);\n+    }\n+\n+    public Joins join(Joins joins, boolean forceOuter) {\n+        return field.join(joins, forceOuter, true);\n+    }\n+\n+    public Joins joinRelation(Joins joins, boolean forceOuter,\n+        boolean traverse) {\n+        if (traverse)\n+            HandlerStrategies.assertJoinable(field.getElementMapping());\n+        return joins;\n+    }\n+}"},{"sha":"ef1aceeba0814aa5fd9a0fe8de9d5d4764f6c1c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Mapping for a single-valued field that delegates to a {@link ValueHandler}.\n@@ -121,20 +122,32 @@ else if (_cols.length == 1)\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (field.getColumnIO().isInsertable(0, false)) {\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n+            if (row != null) {\n+                Object value = sm.fetch(field.getIndex());\n+                if (!HandlerStrategies.set(field, value, store, row, _cols,\n+                    _io, field.getNullValue() == FieldMapping.NULL_NONE))\n+                    if (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+                        throw new UserException(_loc.get(\"cant-set-value\", row\n+                            .getFailedObject(), field, value));\n+            }\n+        }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (field.getColumnIO().isUpdatable(0, false)) {\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n+            if (row != null) {\n+                Object value = sm.fetch(field.getIndex());\n+                if (!HandlerStrategies.set(field, value, store, row, _cols,\n+                    _io, field.getNullValue() == FieldMapping.NULL_NONE))\n+                    if (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+                        throw new UserException(_loc.get(\"cant-set-value\", row\n+                            .getFailedObject(), field, value));\n+            }\n+        }\n     }\n \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n@@ -145,7 +158,7 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n     public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n         JDBCStore store, JDBCFetchConfiguration fetch) {\n         if ((type == Select.TYPE_JOINLESS && sel.isSelected(field.getTable()))\n-            || (_load && type == sel.TYPE_TWO_PART))\n+            || (_load && type == Select.TYPE_TWO_PART))\n             return 1;\n         return 0;\n     }"},{"sha":"e7a714c067e5cbafca5068d2d91275857b185050","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"04244383e9867cd10a3b383654512b3dad0527ba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6c69604a31e8f27ad416456f6c92d2d86e8b1d92","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"0e0a12530e090a79a01c45d31baac2b893d73266","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"71c0ff208e728a2046a1defa17d25ffaeb99420c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"9894242f3e8d70ec8fc0f2844c386b8cd5867d92","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6b138fa3cbeb4db2e64f53ea5c083def0981f83f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"87254b46326171797c4357a58d53cd92d233ee1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"60008da84a70623c7723dd6fff52a8409793990b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"8618647d7fe46737cb08fd8ae22c1ea968e8e735","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"0a7f6c3d5352d9b6b27fc6cad792a7f4e76aef6f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"de51ad531fc306460de12f7a8f3d0513fb4aea57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"ab5fc749d69c234bc01e55b421069d775b2516ee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"f6ce8455f37e489c49fa8f18ae4f003adf96d7ed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"99ee96362d31258e04124d8ceff0a6afd4840d87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"04de366d9c7c4f5007ad67812b48d9ff12d4d878","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"35a3a1c619765a5acee6dd0a3de6f37190526a75","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b598acd1dfcabf65f6addc58dd375157df15a285","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b5374ef40252c0f71605f5fb527876d956b9bab9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"4573eda6852f1ae890eed03c6447542ab705e653","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3a7d421601959e2f0c4ace27ae0dc563fed32d06","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"9ed2a303aa121765b120f0da4cb9b72846d6ab04","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"55514b0ce4ada874f90419321d4a00c0632d47fd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"504ae6c1bbe7ec097d2243ae40d458cb25d374e5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"880dba660e44d7f97b02b119eedd7076283fe8c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"dbf3188a2d2c1e7677fc9581be1cc5ffdd4ba337","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"ef3e827994f86250d1399654ee902ca76e43cb4d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6de8402cad8aa6b7c97d1648bb535c9a10d5f53b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"464c7c6f168276ddd7fb1e0f5ed9b9d1ff955fc8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"672b92c5c23083415a79fbed61a7b772da182a19","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"7b002c8c139b1e440ff7b083135aac301d56a13f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3f23c97f02cd861bf30615fb7b140bb01f982741","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6612456cf06def77fa5194bc91658e9d2b5c95c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"1ea48c32b82ab9b61bf949ac9017535a94b72511","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"e9e417002adcb9c71ca4bba6688825addcb29a13","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"c3c364a806e92e1b9591fdee80704b56b9ad9200","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"cde443b99b0e04c8cbaafbb0f7040e93f3967d61","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3e79f317cb9b0a70529eb2e5778f8353d91db962","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"eb2012ef82e6669277e1a4817df8e0257d318920","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"0d444cf3b4ce7fc217c1230cab2c9fc39278226e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b6ecfa5d22379bfb9fc9dcc8eef3c29455917689","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6d5e6280658bdc4dd40c10f108d9579f9911f700","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"49be0cd9d9e183d663ee0b1edab28687d91833ef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"119f47e13e528fad1900fa1cefd0eb5ecea75980","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"547fd1f8609d3fa9941fd3edfc8c737cea9fafec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b48258dab8975ecf2fe7be9c18e9a87dc6b9a2e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3b2810fea4ee9e154559e10b6fde0630e77e96e0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6b5ed11e4747826963d86f807efbfee2f971bd44","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"34dcbc28922356ffe11b438a17373bbe07870e5d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"596b6bd185033c4ad2a1279199d472326da8a0c0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"d557aadd2156ad1a599f60c8191d6c4ebeb3409e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"9376be854caa72e45005f894491af3ce14304eef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"31b98e59bf1932443f937f6e05681e17ff9b572b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"2d92d9e1b7c023bb4a7159fd5df3554350bd1258","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"899a543c64225de63c077d58a596038b691e4863","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"e20cbf1447f068588781b5b4e1c27af24ea25f86","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"1ecf0feece32a574a3db694474fe5569b56ddff4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"f551f7186f886c337d2c37a840f146de862d727b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"4a9a63c96c04329727d47f0fe1bd42829b71332d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"9eb2a2b66a8025addc83b33eabc7a5c44585791c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"597d7dbb89afa4bd6fb97972f37848e8b4fb6d44","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Row.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Row.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Row.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Row.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"d54ab68f408270cb350ba9a40ed2ec0f1e279080","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"47a0b513661698ef82acaa6cf49d648b87a90650","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"df3d458703ee049ee5168d9c337c0409ab6bced4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"43746cc0a7feb71de7fc1c34f348d273b8e4c638","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"bb352193c8dea80a1030785dbbb6ce5d6f893c45","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3ad85fd9d2673833e6dc82cece6a8774a9a814d0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"d7c70fd703e8f5878cb130597cc2ad4700097bb4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"a0a200e2b56daa8cc95540039eaf9665c221ba9a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"bf250b3f9155737edfca2e8570beb6ea57596391","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"9b199ca458644dfbe304adab810fe43fc48c2a64","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"401cd51bb487eb55df3421efe5ddec8347194ad7","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"74f24f6f71869b1f0dba149b48d32662bdc6c5e3","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"162fb4ff529247eef0f8fadbba935ecc85743f23","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"841df94afa40c23894176f29fe298b7c6411cba7","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"60b569ff6f19ad609b204b6d43c70d9fab766ec0","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"fa7103078af576ed2e0ad9113b9cf25854afb1f8","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"1f44bcdef9491e9fd7b3fa3bf472900face0a188","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"8615feb9c63aecb475733c1d342208e7c4f5fef6","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"ab01c25871a2d05076c88c52242c0ba0439313cd","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"4103d99fcecad8cd8e07e213d8c0c9a728cd370a","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"4f8af9f2a43dca0144219f260390eacf2f21162d","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"5bf5fcbdecf1f57af22af6b75c67fd7f7aa96d0a","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"00f3a24c413129a56448fd397fc5c6743ee796a5","filename":"openjpa-kernel/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"8cfab8e58988dc476ebbe677d3945afe1e79d20e","filename":"openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"9e815c80c55f016f98863168cd28e45c607c701c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"57c5f390e1b14d37a4cd806f76d25ac65225f06b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"2a42ace45e19a7e2c97cb51b13b2fca380f71fa6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"40684bb0fb541b822fec70ab67d85ca4e22a14f0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6869e9fdf5e059ed0581d5480287b401c2a24225","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3be010f02c675af1cfa1edb2b0a436971f281d93","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"850d926bd128f1618f8b55441fae2005a073f8c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"854f1a64843d8521f52481bd35c43975ca4ce3db","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"c027a5271c0d1b73161c75f08a698830accbc227","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3413add2a563d0da4016caef5419766c0a5bd10f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"d5bdcbc643040c4b89cb232b9b9df7a10bbd48f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"90a95aaea6ee3cfd0d643b1818ed53251c8b8296","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"a8e5bb124bc013c11c3e4a2172f39148dd737a23","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"1975b7a752c79996b1dbfc3dd920bb784cff3ea2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"df3cd84bdb3baa1fd3f379059a7954cd65cc11aa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"c7546b4abe705c72f28028ba71ef505054f02860","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"6f748a9f3ed636e353e222cb930ee44eb46d6b63","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"f3a071d63565a831bd0a7472b0da2acb801267b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/SpecificationPlugin.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/SpecificationPlugin.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/SpecificationPlugin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/SpecificationPlugin.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"e91294c526dd7f84a2eb36d2885579b233790f93","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"da31889472586716836db013beaef498d5b7bc9e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"0404b0613c65ddc3a59d99cfa985c3102a87a6fb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"31dc56ab71108f75dc0b9070d627ea6f3a4f21e9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"14d197964f838dda1aeb24b960418d7e3d6575f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"cc69828bf06602a3b9cc8f697f95811462d07201","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"be032286a21c183abaa67b8c7c5194533f04a65d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"e1e961f5b895e86a60fa68fbbaad4bb74859964d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"e7ff2b93648bc12854bfb20b31e3ad36c5611440","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b17c02fdec1307587e5974b4e9e1783fe30bde02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"ed2711085301bfabb37535024db1bb244397ffe0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"145c0f1a89f049f3c53cd0478d8d0003ed2ea698","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"7af4cca3e5ea6421fa3643efc03106a8e82e0964","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"7ae3fe80db66a84f45e50d557fa0bb39bf504b3b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"ba45990a46ebe2f27c397e1d0f902cfe0806563b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"c80d4ffcb4279bce3b86fdb2e69c1294cd1bd125","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"3904232254b3c6af09c6ebad37e46f7795acdc6f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"4f1956fdc67553d40cea53b28e752e24784b65d1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"78614624c6c833d8ecaa23f13903ad1c11a50d5a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b8575d8293ca95d0010d8518cd827c426d665b33","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"37b9983f82663642acf548871005e8ebe8bec8f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"719d09e77cfab525cf33ec614f4c1193c0b39302","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"ebdd746c8638de5766fb5d0add78c927b6d4b0fc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b264860a689b728a64132d9d9dcae18a816012fd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"d761c7f54a1b195e76460ed600f0c4e72eaa1385","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"554164e262324961837e90c30e2b70742423adb4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"454e16efb8ad24e24cc0604eef9b9b250428add6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"eb726ed6db1803e66506682d7270b95155b5596a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"b49ad7e8630bddcb873e2a4747bfb1dcc6d51d94","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"127096daa581fc2204ea7484ce9cc7e3338897fb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"5c68c037905c8ca479f3b2f38dab27101590f652","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"1ecdef29537157dbb494d2eb5d235df60c3ef1f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"},{"sha":"4c2ba87e2c6a9ef03124fb598aae0218f6e25e95","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","raw_url":"https://github.com/apache/openjpa/raw/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java?ref=0f84cfbd4fb37d16b049b9a501d6d82a186202e2"}]}

