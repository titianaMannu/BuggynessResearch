{"url":"https://api.github.com/repos/apache/openjpa/compare/2.0.0-M3...2.0.0-beta","html_url":"https://github.com/apache/openjpa/compare/2.0.0-M3...2.0.0-beta","permalink_url":"https://github.com/apache/openjpa/compare/apache:0f84cfb...apache:2ca2ae0","diff_url":"https://github.com/apache/openjpa/compare/2.0.0-M3...2.0.0-beta.diff","patch_url":"https://github.com/apache/openjpa/compare/2.0.0-M3...2.0.0-beta.patch","base_commit":{"sha":"0f84cfbd4fb37d16b049b9a501d6d82a186202e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmODRjZmJkNGZiMzdkMTZiMDQ5YjlhNTAxZDZkODJhMTg2MjAyZTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-07T18:41:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-07T18:41:24Z"},"message":"OPENJPA-1229 Update release-notes, changes, readme, ... for M3 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-M3@822833 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83af820035ebd38f9f38a132498b2bc3bed6de53","url":"https://api.github.com/repos/apache/openjpa/git/trees/83af820035ebd38f9f38a132498b2bc3bed6de53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f84cfbd4fb37d16b049b9a501d6d82a186202e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f84cfbd4fb37d16b049b9a501d6d82a186202e2","html_url":"https://github.com/apache/openjpa/commit/0f84cfbd4fb37d16b049b9a501d6d82a186202e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f84cfbd4fb37d16b049b9a501d6d82a186202e2/comments","author":null,"committer":null,"parents":[{"sha":"ea1ebb47175f8d1e086951892705f83a513e35f9","url":"https://api.github.com/repos/apache/openjpa/commits/ea1ebb47175f8d1e086951892705f83a513e35f9","html_url":"https://github.com/apache/openjpa/commit/ea1ebb47175f8d1e086951892705f83a513e35f9"}]},"merge_base_commit":{"sha":"c6085cd2961fb178d64a2f739fc25cdc33c9195c","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2MDg1Y2QyOTYxZmIxNzhkNjRhMmY3MzlmYzI1Y2RjMzNjOTE5NWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:07:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-06T17:07:54Z"},"message":"OPENJPA-1229 Remove extra Geronimo repo as the artifacts are mirrored now.  Update the repoId for sonatype.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822350 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eda6005b545467cacd267338ac94f476fda2daa3","url":"https://api.github.com/repos/apache/openjpa/git/trees/eda6005b545467cacd267338ac94f476fda2daa3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c","html_url":"https://github.com/apache/openjpa/commit/c6085cd2961fb178d64a2f739fc25cdc33c9195c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c/comments","author":null,"committer":null,"parents":[{"sha":"39240eb1ecf22f6b47db987bfcdf918bfd0faa78","url":"https://api.github.com/repos/apache/openjpa/commits/39240eb1ecf22f6b47db987bfcdf918bfd0faa78","html_url":"https://github.com/apache/openjpa/commit/39240eb1ecf22f6b47db987bfcdf918bfd0faa78"}]},"status":"diverged","ahead_by":310,"behind_by":4,"total_commits":310,"commits":[{"sha":"b646b8810df12c31de8c23d49a278414cf1afef7","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2NDZiODgxMGRmMTJjMzFkZThjMjNkNDlhMjc4NDE0Y2YxYWZlZjc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-22T22:52:39Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-22T22:52:39Z"},"message":"OPENJPA-871: support JoinColumn in conjunction with MapsId annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58d122e8f1a15762d9b7ef9e75b2dc55b68ffac4","url":"https://api.github.com/repos/apache/openjpa/git/trees/58d122e8f1a15762d9b7ef9e75b2dc55b68ffac4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b646b8810df12c31de8c23d49a278414cf1afef7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b646b8810df12c31de8c23d49a278414cf1afef7","html_url":"https://github.com/apache/openjpa/commit/b646b8810df12c31de8c23d49a278414cf1afef7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b646b8810df12c31de8c23d49a278414cf1afef7/comments","author":null,"committer":null,"parents":[{"sha":"13c88d75cf0844d1dfb0bdfc0dc9a297c4d2745d","url":"https://api.github.com/repos/apache/openjpa/commits/13c88d75cf0844d1dfb0bdfc0dc9a297c4d2745d","html_url":"https://github.com/apache/openjpa/commit/13c88d75cf0844d1dfb0bdfc0dc9a297c4d2745d"}]},{"sha":"71f9f409c00855e26cb1de51536ff73475ecf4d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxZjlmNDA5YzAwODU1ZTI2Y2IxZGU1MTUzNmZmNzM0NzVlY2Y0ZDc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-23T15:55:40Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-23T15:55:40Z"},"message":"OPENJPA-871: change test case table name \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@829107 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7f152b29cd3f7bbbd0f6766b6be7a77d4b00f525","url":"https://api.github.com/repos/apache/openjpa/git/trees/7f152b29cd3f7bbbd0f6766b6be7a77d4b00f525"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71f9f409c00855e26cb1de51536ff73475ecf4d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71f9f409c00855e26cb1de51536ff73475ecf4d7","html_url":"https://github.com/apache/openjpa/commit/71f9f409c00855e26cb1de51536ff73475ecf4d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71f9f409c00855e26cb1de51536ff73475ecf4d7/comments","author":null,"committer":null,"parents":[{"sha":"b646b8810df12c31de8c23d49a278414cf1afef7","url":"https://api.github.com/repos/apache/openjpa/commits/b646b8810df12c31de8c23d49a278414cf1afef7","html_url":"https://github.com/apache/openjpa/commit/b646b8810df12c31de8c23d49a278414cf1afef7"}]},{"sha":"ad1029fde49253d5e97f880c57665b6ce8dcab44","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkMTAyOWZkZTQ5MjUzZDVlOTdmODgwYzU3NjY1YjZjZThkY2FiNDQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-27T21:02:34Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-27T21:02:34Z"},"message":"OPENJPA-1115 Wrap non-null sequence property values so they are processed as a single property value.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830338 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be053bf3d08c85412147b92f557cde9c772e834d","url":"https://api.github.com/repos/apache/openjpa/git/trees/be053bf3d08c85412147b92f557cde9c772e834d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad1029fde49253d5e97f880c57665b6ce8dcab44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad1029fde49253d5e97f880c57665b6ce8dcab44","html_url":"https://github.com/apache/openjpa/commit/ad1029fde49253d5e97f880c57665b6ce8dcab44","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad1029fde49253d5e97f880c57665b6ce8dcab44/comments","author":null,"committer":null,"parents":[{"sha":"71f9f409c00855e26cb1de51536ff73475ecf4d7","url":"https://api.github.com/repos/apache/openjpa/commits/71f9f409c00855e26cb1de51536ff73475ecf4d7","html_url":"https://github.com/apache/openjpa/commit/71f9f409c00855e26cb1de51536ff73475ecf4d7"}]},{"sha":"3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4","node_id":"MDY6Q29tbWl0MjA2MzY0OjNlYzBmYmY2NmZkNmZkNDMzZDI1ZTk4ODRlMmJkMzQ1M2U3OGYxZjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-28T03:00:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-28T03:00:17Z"},"message":"OPENJPA-1354: DBCP getConnection with user/password\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830426 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3cab60015d2b306e846a70474296f23782529be7","url":"https://api.github.com/repos/apache/openjpa/git/trees/3cab60015d2b306e846a70474296f23782529be7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4","html_url":"https://github.com/apache/openjpa/commit/3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4/comments","author":null,"committer":null,"parents":[{"sha":"ad1029fde49253d5e97f880c57665b6ce8dcab44","url":"https://api.github.com/repos/apache/openjpa/commits/ad1029fde49253d5e97f880c57665b6ce8dcab44","html_url":"https://github.com/apache/openjpa/commit/ad1029fde49253d5e97f880c57665b6ce8dcab44"}]},{"sha":"5016fc69f876b56f961f062b538440af8bdc7497","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwMTZmYzY5Zjg3NmI1NmY5NjFmMDYyYjUzODQ0MGFmOGJkYzc0OTc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-28T03:43:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-28T03:43:27Z"},"message":"OPENJPA-944: Indirect recursion in fetch. Solution provided by Yanko Zhikov. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830431 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e59fcad1e7cab87d57f0b759cd9271cf800bd257","url":"https://api.github.com/repos/apache/openjpa/git/trees/e59fcad1e7cab87d57f0b759cd9271cf800bd257"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5016fc69f876b56f961f062b538440af8bdc7497","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5016fc69f876b56f961f062b538440af8bdc7497","html_url":"https://github.com/apache/openjpa/commit/5016fc69f876b56f961f062b538440af8bdc7497","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5016fc69f876b56f961f062b538440af8bdc7497/comments","author":null,"committer":null,"parents":[{"sha":"3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4","url":"https://api.github.com/repos/apache/openjpa/commits/3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4","html_url":"https://github.com/apache/openjpa/commit/3ec0fbf66fd6fd433d25e9884e2bd3453e78f1f4"}]},{"sha":"cb31d309b2cb8a8dc77f261abc39195507b6d967","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiMzFkMzA5YjJjYjhhOGRjNzdmMjYxYWJjMzkxOTU1MDdiNmQ5Njc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-28T14:45:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-28T14:45:15Z"},"message":"OPENJPA-839 Create source jars for all artifacts by using maven-shade-plugin for the aggregate jars.  Also, removed OSGi metadata from openjpa.jar, as this will be handled by a new openjpa-osgi.jar instead.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830564 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb91fa9ff6ec5ced28474510a8ac9e89b6756227","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb91fa9ff6ec5ced28474510a8ac9e89b6756227"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb31d309b2cb8a8dc77f261abc39195507b6d967","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb31d309b2cb8a8dc77f261abc39195507b6d967","html_url":"https://github.com/apache/openjpa/commit/cb31d309b2cb8a8dc77f261abc39195507b6d967","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb31d309b2cb8a8dc77f261abc39195507b6d967/comments","author":null,"committer":null,"parents":[{"sha":"5016fc69f876b56f961f062b538440af8bdc7497","url":"https://api.github.com/repos/apache/openjpa/commits/5016fc69f876b56f961f062b538440af8bdc7497","html_url":"https://github.com/apache/openjpa/commit/5016fc69f876b56f961f062b538440af8bdc7497"}]},{"sha":"530a190ebb90ffd97adc3a961c6d85c896ea9f41","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzMGExOTBlYmI5MGZmZDk3YWRjM2E5NjFjNmQ4NWM4OTZlYTlmNDE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-28T17:34:45Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-28T17:34:45Z"},"message":"OPENJPA-1141: \nOptionally reorder MetaData resolution for entities which use derived IDs\nSubmitted By: Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830690 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71ee3c35bf2bd2b3fcab8c57ad97a2af3d1cc3b8","url":"https://api.github.com/repos/apache/openjpa/git/trees/71ee3c35bf2bd2b3fcab8c57ad97a2af3d1cc3b8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/530a190ebb90ffd97adc3a961c6d85c896ea9f41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/530a190ebb90ffd97adc3a961c6d85c896ea9f41","html_url":"https://github.com/apache/openjpa/commit/530a190ebb90ffd97adc3a961c6d85c896ea9f41","comments_url":"https://api.github.com/repos/apache/openjpa/commits/530a190ebb90ffd97adc3a961c6d85c896ea9f41/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb31d309b2cb8a8dc77f261abc39195507b6d967","url":"https://api.github.com/repos/apache/openjpa/commits/cb31d309b2cb8a8dc77f261abc39195507b6d967","html_url":"https://github.com/apache/openjpa/commit/cb31d309b2cb8a8dc77f261abc39195507b6d967"}]},{"sha":"62cc18cecbc2d87beba982db0c7f04b1b631f32f","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyY2MxOGNlY2JjMmQ4N2JlYmE5ODJkYjBjN2YwNGIxYjYzMWYzMmY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-28T18:20:12Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-28T18:20:12Z"},"message":"OPENJPA-944: Updated test to run on Oracle by setting the dictionary option to use triggers for IDENTITY gen type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830709 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"39d16a7ae331e69bcd0ee197046b1ea9e99545f2","url":"https://api.github.com/repos/apache/openjpa/git/trees/39d16a7ae331e69bcd0ee197046b1ea9e99545f2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62cc18cecbc2d87beba982db0c7f04b1b631f32f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62cc18cecbc2d87beba982db0c7f04b1b631f32f","html_url":"https://github.com/apache/openjpa/commit/62cc18cecbc2d87beba982db0c7f04b1b631f32f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62cc18cecbc2d87beba982db0c7f04b1b631f32f/comments","author":null,"committer":null,"parents":[{"sha":"530a190ebb90ffd97adc3a961c6d85c896ea9f41","url":"https://api.github.com/repos/apache/openjpa/commits/530a190ebb90ffd97adc3a961c6d85c896ea9f41","html_url":"https://github.com/apache/openjpa/commit/530a190ebb90ffd97adc3a961c6d85c896ea9f41"}]},{"sha":"a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyYWJjYmJmZTM4YzczYTRmYTZhNDczMDQzYzFmZjBjMDZjNWFmZDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-28T18:54:53Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-28T18:54:53Z"},"message":"OPENJPA-839 Fix jaxb depends for Java SE 5 users and keep it from getting pulled into the aggregate jars by the shade plugin.  Also, removed duplicate maven-source-plugin usage in the parent pom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830721 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d6c981804e4d016905a62a470c7003901dc00ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d6c981804e4d016905a62a470c7003901dc00ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6","html_url":"https://github.com/apache/openjpa/commit/a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6/comments","author":null,"committer":null,"parents":[{"sha":"62cc18cecbc2d87beba982db0c7f04b1b631f32f","url":"https://api.github.com/repos/apache/openjpa/commits/62cc18cecbc2d87beba982db0c7f04b1b631f32f","html_url":"https://github.com/apache/openjpa/commit/62cc18cecbc2d87beba982db0c7f04b1b631f32f"}]},{"sha":"28dafc7affc77ab41b0788f5795834bb5907b8f0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4ZGFmYzdhZmZjNzdhYjQxYjA3ODhmNTc5NTgzNGJiNTkwN2I4ZjA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-28T21:14:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-28T21:14:20Z"},"message":"OPENJPA-1363 Upgrade to latest commons-pool maintenance release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830763 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5187e820a27b827929fae1e78d65f2027b63075","url":"https://api.github.com/repos/apache/openjpa/git/trees/d5187e820a27b827929fae1e78d65f2027b63075"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28dafc7affc77ab41b0788f5795834bb5907b8f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28dafc7affc77ab41b0788f5795834bb5907b8f0","html_url":"https://github.com/apache/openjpa/commit/28dafc7affc77ab41b0788f5795834bb5907b8f0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28dafc7affc77ab41b0788f5795834bb5907b8f0/comments","author":null,"committer":null,"parents":[{"sha":"a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6","url":"https://api.github.com/repos/apache/openjpa/commits/a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6","html_url":"https://github.com/apache/openjpa/commit/a2abcbbfe38c73a4fa6a473043c1ff0c06c5afd6"}]},{"sha":"5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","node_id":"MDY6Q29tbWl0MjA2MzY0OjVlNzNjYTE0ZWRjNmQzN2EyZWJmZjU2Y2YwY2IzMGM3NjNmYTY3NzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T00:22:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T00:22:27Z"},"message":"Consolidate property key-value processings for javax.persistence.* keys. They have been accumulating in OpenJPAConf and now moving to where they belong i.e. PersistenceProductDerivation. The value processing from String/integer/enums for these properties  have also been spread across many places and now being localized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1472e35984d13fd7013fc607e18b8ca2d17db9ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/1472e35984d13fd7013fc607e18b8ca2d17db9ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","html_url":"https://github.com/apache/openjpa/commit/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/comments","author":null,"committer":null,"parents":[{"sha":"28dafc7affc77ab41b0788f5795834bb5907b8f0","url":"https://api.github.com/repos/apache/openjpa/commits/28dafc7affc77ab41b0788f5795834bb5907b8f0","html_url":"https://github.com/apache/openjpa/commit/28dafc7affc77ab41b0788f5795834bb5907b8f0"}]},{"sha":"dee384cb3cc143fd46f3a9db54832759a884d949","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlZTM4NGNiM2NjMTQzZmQ0NmYzYTlkYjU0ODMyNzU5YTg4NGQ5NDk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T00:27:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T00:27:25Z"},"message":"Consolidate javax.persistence.* property processing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830810 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28c368540b8c1425fbd495797310c9dd5c86dd60","url":"https://api.github.com/repos/apache/openjpa/git/trees/28c368540b8c1425fbd495797310c9dd5c86dd60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dee384cb3cc143fd46f3a9db54832759a884d949","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dee384cb3cc143fd46f3a9db54832759a884d949","html_url":"https://github.com/apache/openjpa/commit/dee384cb3cc143fd46f3a9db54832759a884d949","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dee384cb3cc143fd46f3a9db54832759a884d949/comments","author":null,"committer":null,"parents":[{"sha":"5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","url":"https://api.github.com/repos/apache/openjpa/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","html_url":"https://github.com/apache/openjpa/commit/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774"}]},{"sha":"41f750a8f12f41d950328802ecfaf406348484b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxZjc1MGE4ZjEyZjQxZDk1MDMyODgwMmVjZmFmNDA2MzQ4NDg0YjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:48:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:48:55Z"},"message":"OPENJPA-1337: Push/Pop fetch plan with find()/refresh() \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"042b87be6d540f5e4b9cad2d027d914e44537690","url":"https://api.github.com/repos/apache/openjpa/git/trees/042b87be6d540f5e4b9cad2d027d914e44537690"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/41f750a8f12f41d950328802ecfaf406348484b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/41f750a8f12f41d950328802ecfaf406348484b5","html_url":"https://github.com/apache/openjpa/commit/41f750a8f12f41d950328802ecfaf406348484b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/41f750a8f12f41d950328802ecfaf406348484b5/comments","author":null,"committer":null,"parents":[{"sha":"dee384cb3cc143fd46f3a9db54832759a884d949","url":"https://api.github.com/repos/apache/openjpa/commits/dee384cb3cc143fd46f3a9db54832759a884d949","html_url":"https://github.com/apache/openjpa/commit/dee384cb3cc143fd46f3a9db54832759a884d949"}]},{"sha":"c5cc2672190a2ff04d592fae108d6a6ceaec3e67","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1Y2MyNjcyMTkwYTJmZjA0ZDU5MmZhZTEwOGQ2YTZjZWFlYzNlNjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:51:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:51:14Z"},"message":"OPENJPA-1337: Push/Pop fetch plan with find()/refresh()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830826 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"432e6ee9a34b3979ae43edc59ad1663023888d7d","url":"https://api.github.com/repos/apache/openjpa/git/trees/432e6ee9a34b3979ae43edc59ad1663023888d7d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","html_url":"https://github.com/apache/openjpa/commit/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67/comments","author":null,"committer":null,"parents":[{"sha":"41f750a8f12f41d950328802ecfaf406348484b5","url":"https://api.github.com/repos/apache/openjpa/commits/41f750a8f12f41d950328802ecfaf406348484b5","html_url":"https://github.com/apache/openjpa/commit/41f750a8f12f41d950328802ecfaf406348484b5"}]},{"sha":"a24efc3c55573341ec0cd31e0637946370310e2e","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyNGVmYzNjNTU1NzMzNDFlYzBjZDMxZTA2Mzc5NDYzNzAzMTBlMmU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-29T13:15:23Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-29T13:15:23Z"},"message":"OPENJPA-839 Need to exclude new source and shade created jars from being used for the agent setting to the TCK\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830927 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7580d3f3a723572f68305555cc45f09935c925c","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7580d3f3a723572f68305555cc45f09935c925c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a24efc3c55573341ec0cd31e0637946370310e2e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a24efc3c55573341ec0cd31e0637946370310e2e","html_url":"https://github.com/apache/openjpa/commit/a24efc3c55573341ec0cd31e0637946370310e2e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a24efc3c55573341ec0cd31e0637946370310e2e/comments","author":null,"committer":null,"parents":[{"sha":"c5cc2672190a2ff04d592fae108d6a6ceaec3e67","url":"https://api.github.com/repos/apache/openjpa/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","html_url":"https://github.com/apache/openjpa/commit/c5cc2672190a2ff04d592fae108d6a6ceaec3e67"}]},{"sha":"d0cf5b404e7ee3c2990d58071fb7a4da152969c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwY2Y1YjQwNGU3ZWUzYzI5OTBkNTgwNzFmYjdhNGRhMTUyOTY5YzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T14:27:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T14:27:32Z"},"message":"Doc for metamodel generation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830961 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6166a1c475d236c1fe78661c46b6cff9d30f1017","url":"https://api.github.com/repos/apache/openjpa/git/trees/6166a1c475d236c1fe78661c46b6cff9d30f1017"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","html_url":"https://github.com/apache/openjpa/commit/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3/comments","author":null,"committer":null,"parents":[{"sha":"a24efc3c55573341ec0cd31e0637946370310e2e","url":"https://api.github.com/repos/apache/openjpa/commits/a24efc3c55573341ec0cd31e0637946370310e2e","html_url":"https://github.com/apache/openjpa/commit/a24efc3c55573341ec0cd31e0637946370310e2e"}]},{"sha":"8c8636fce98d7907c444bc9f7dc2c94321163d68","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjODYzNmZjZTk4ZDc5MDdjNDQ0YmM5ZjdkYzJjOTQzMjExNjNkNjg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-10-30T04:09:05Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-10-30T04:09:05Z"},"message":"OPENJPA-1306 - Add basic extended lock scope support, 3 junit testing basic, secondary table, join table, inheritance entity, element collections (lazy/eager), 1x1 (lazy/eager) and 1xm (lazy/eager).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831194 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0980c47c78c08a849ac10b666484400b705eb3d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/0980c47c78c08a849ac10b666484400b705eb3d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c8636fce98d7907c444bc9f7dc2c94321163d68","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c8636fce98d7907c444bc9f7dc2c94321163d68","html_url":"https://github.com/apache/openjpa/commit/8c8636fce98d7907c444bc9f7dc2c94321163d68","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c8636fce98d7907c444bc9f7dc2c94321163d68/comments","author":null,"committer":null,"parents":[{"sha":"d0cf5b404e7ee3c2990d58071fb7a4da152969c3","url":"https://api.github.com/repos/apache/openjpa/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","html_url":"https://github.com/apache/openjpa/commit/d0cf5b404e7ee3c2990d58071fb7a4da152969c3"}]},{"sha":"b8e690fb5c282a56960c61b9c6bc09c4939e0bee","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4ZTY5MGZiNWMyODJhNTY5NjBjNjFiOWM2YmMwOWM0OTM5ZTBiZWU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-30T04:49:21Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-30T04:49:21Z"},"message":"OPENJPA-1366 Modified persistence util to do a direct ref comparison instead of iterating through all pu's when determining if an entity is managed within a pu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d447ee57d62b089f40aef58d5a69a3d3fa97eac0","url":"https://api.github.com/repos/apache/openjpa/git/trees/d447ee57d62b089f40aef58d5a69a3d3fa97eac0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","html_url":"https://github.com/apache/openjpa/commit/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee/comments","author":null,"committer":null,"parents":[{"sha":"8c8636fce98d7907c444bc9f7dc2c94321163d68","url":"https://api.github.com/repos/apache/openjpa/commits/8c8636fce98d7907c444bc9f7dc2c94321163d68","html_url":"https://github.com/apache/openjpa/commit/8c8636fce98d7907c444bc9f7dc2c94321163d68"}]},{"sha":"1154f23a11eb68666a0f9b3e840c8527c3e9d523","node_id":"MDY6Q29tbWl0MjA2MzY0OjExNTRmMjNhMTFlYjY4NjY2YTBmOWIzZTg0MGM4NTI3YzNlOWQ1MjM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-30T15:33:39Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-30T15:33:39Z"},"message":"OPENJPA-1368 Upgrade to HSQLDB 1.8.0.10 and in-memory db for optional HSQLDB unit testing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831334 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e914666668beee2a9aeb46543db9c197b6ee43f","url":"https://api.github.com/repos/apache/openjpa/git/trees/5e914666668beee2a9aeb46543db9c197b6ee43f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1154f23a11eb68666a0f9b3e840c8527c3e9d523","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1154f23a11eb68666a0f9b3e840c8527c3e9d523","html_url":"https://github.com/apache/openjpa/commit/1154f23a11eb68666a0f9b3e840c8527c3e9d523","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1154f23a11eb68666a0f9b3e840c8527c3e9d523/comments","author":null,"committer":null,"parents":[{"sha":"b8e690fb5c282a56960c61b9c6bc09c4939e0bee","url":"https://api.github.com/repos/apache/openjpa/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","html_url":"https://github.com/apache/openjpa/commit/b8e690fb5c282a56960c61b9c6bc09c4939e0bee"}]},{"sha":"e1dcbce754528e8f080449e17de06f99e3787c1a","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxZGNiY2U3NTQ1MjhlOGYwODA0NDllMTdkZTA2Zjk5ZTM3ODdjMWE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-30T18:02:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-10-30T18:02:15Z"},"message":"OPENJPA-1366 Remove need for an EMF from OpenJPAPersistenceUtil and TraversableResolverImpl.  Also, updated EMFImpl.isLoaded() to use Util.isManagedBy() before Util.isLoaded(), since the entity should be managed by the queried EMF instance.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831406 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c57332f84966f538bdafd2af27d75a3fd181087e","url":"https://api.github.com/repos/apache/openjpa/git/trees/c57332f84966f538bdafd2af27d75a3fd181087e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e1dcbce754528e8f080449e17de06f99e3787c1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e1dcbce754528e8f080449e17de06f99e3787c1a","html_url":"https://github.com/apache/openjpa/commit/e1dcbce754528e8f080449e17de06f99e3787c1a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e1dcbce754528e8f080449e17de06f99e3787c1a/comments","author":null,"committer":null,"parents":[{"sha":"1154f23a11eb68666a0f9b3e840c8527c3e9d523","url":"https://api.github.com/repos/apache/openjpa/commits/1154f23a11eb68666a0f9b3e840c8527c3e9d523","html_url":"https://github.com/apache/openjpa/commit/1154f23a11eb68666a0f9b3e840c8527c3e9d523"}]},{"sha":"f25b573aa08af7d0d26d5bb2b40d8e3be15a6874","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyNWI1NzNhYTA4YWY3ZDBkMjZkNWJiMmI0MGQ4ZTNiZTE1YTY4NzQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-30T23:21:09Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-30T23:21:09Z"},"message":"OPENJPA-1370 JPA2 missing implementation for createNamedQuery(String name, Class<T> resultClass)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831488 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7230d7e4aa6e9f6e44d0ebdbcf08361999e33125","url":"https://api.github.com/repos/apache/openjpa/git/trees/7230d7e4aa6e9f6e44d0ebdbcf08361999e33125"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f25b573aa08af7d0d26d5bb2b40d8e3be15a6874","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f25b573aa08af7d0d26d5bb2b40d8e3be15a6874","html_url":"https://github.com/apache/openjpa/commit/f25b573aa08af7d0d26d5bb2b40d8e3be15a6874","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f25b573aa08af7d0d26d5bb2b40d8e3be15a6874/comments","author":null,"committer":null,"parents":[{"sha":"e1dcbce754528e8f080449e17de06f99e3787c1a","url":"https://api.github.com/repos/apache/openjpa/commits/e1dcbce754528e8f080449e17de06f99e3787c1a","html_url":"https://github.com/apache/openjpa/commit/e1dcbce754528e8f080449e17de06f99e3787c1a"}]},{"sha":"eabd0c9454bab3170ce7c10208afd687c96b84b1","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhYmQwYzk0NTRiYWIzMTcwY2U3YzEwMjA4YWZkNjg3Yzk2Yjg0YjE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-01T00:50:15Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-01T00:50:15Z"},"message":"OPENJPA-1371: fail to extract correct id from an entity during merge when this entity has compound primary key using IdClass, and some field in the IdClass is a derived identity from a not-yet-managed toOne relation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831626 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47b29b4defc26e1eba635e5c8f8d3dea33c93618","url":"https://api.github.com/repos/apache/openjpa/git/trees/47b29b4defc26e1eba635e5c8f8d3dea33c93618"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eabd0c9454bab3170ce7c10208afd687c96b84b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eabd0c9454bab3170ce7c10208afd687c96b84b1","html_url":"https://github.com/apache/openjpa/commit/eabd0c9454bab3170ce7c10208afd687c96b84b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eabd0c9454bab3170ce7c10208afd687c96b84b1/comments","author":null,"committer":null,"parents":[{"sha":"f25b573aa08af7d0d26d5bb2b40d8e3be15a6874","url":"https://api.github.com/repos/apache/openjpa/commits/f25b573aa08af7d0d26d5bb2b40d8e3be15a6874","html_url":"https://github.com/apache/openjpa/commit/f25b573aa08af7d0d26d5bb2b40d8e3be15a6874"}]},{"sha":"d1feecbc9e3750c2b887f0ae95b509569d28d22e","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxZmVlY2JjOWUzNzUwYzJiODg3ZjBhZTk1YjUwOTU2OWQyOGQyMmU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-01T00:52:48Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-01T00:52:48Z"},"message":"OPENJPA-1371: wrong commit. Revert it to the previous version\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831627 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f647b64d681be9ebb982fd450fa8e4faa0bc0772","url":"https://api.github.com/repos/apache/openjpa/git/trees/f647b64d681be9ebb982fd450fa8e4faa0bc0772"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1feecbc9e3750c2b887f0ae95b509569d28d22e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1feecbc9e3750c2b887f0ae95b509569d28d22e","html_url":"https://github.com/apache/openjpa/commit/d1feecbc9e3750c2b887f0ae95b509569d28d22e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1feecbc9e3750c2b887f0ae95b509569d28d22e/comments","author":null,"committer":null,"parents":[{"sha":"eabd0c9454bab3170ce7c10208afd687c96b84b1","url":"https://api.github.com/repos/apache/openjpa/commits/eabd0c9454bab3170ce7c10208afd687c96b84b1","html_url":"https://github.com/apache/openjpa/commit/eabd0c9454bab3170ce7c10208afd687c96b84b1"}]},{"sha":"74b0ac19562af2340db9b75a2b0716ca90783d4b","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0YjBhYzE5NTYyYWYyMzQwZGI5Yjc1YTJiMDcxNmNhOTA3ODNkNGI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-02T20:33:53Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-02T20:33:53Z"},"message":"OPENJPA-1369: Use CONCAT function for HSQL 1.8.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832092 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a72fb79c02ead3167a56852ecb7afaccd048de2e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a72fb79c02ead3167a56852ecb7afaccd048de2e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/74b0ac19562af2340db9b75a2b0716ca90783d4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/74b0ac19562af2340db9b75a2b0716ca90783d4b","html_url":"https://github.com/apache/openjpa/commit/74b0ac19562af2340db9b75a2b0716ca90783d4b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/74b0ac19562af2340db9b75a2b0716ca90783d4b/comments","author":null,"committer":null,"parents":[{"sha":"d1feecbc9e3750c2b887f0ae95b509569d28d22e","url":"https://api.github.com/repos/apache/openjpa/commits/d1feecbc9e3750c2b887f0ae95b509569d28d22e","html_url":"https://github.com/apache/openjpa/commit/d1feecbc9e3750c2b887f0ae95b509569d28d22e"}]},{"sha":"760cf901ed485e7b3d0df316dc248b02c2c4cf24","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc2MGNmOTAxZWQ0ODVlN2IzZDBkZjMxNmRjMjQ4YjAyYzJjNGNmMjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-02T20:40:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-02T20:40:31Z"},"message":"OPENJPA-1369: HSQLDB Error code for unique constraint violation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832095 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7663184d4b569187afc9a4558e5aa6e17b68bfa","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7663184d4b569187afc9a4558e5aa6e17b68bfa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/760cf901ed485e7b3d0df316dc248b02c2c4cf24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/760cf901ed485e7b3d0df316dc248b02c2c4cf24","html_url":"https://github.com/apache/openjpa/commit/760cf901ed485e7b3d0df316dc248b02c2c4cf24","comments_url":"https://api.github.com/repos/apache/openjpa/commits/760cf901ed485e7b3d0df316dc248b02c2c4cf24/comments","author":null,"committer":null,"parents":[{"sha":"74b0ac19562af2340db9b75a2b0716ca90783d4b","url":"https://api.github.com/repos/apache/openjpa/commits/74b0ac19562af2340db9b75a2b0716ca90783d4b","html_url":"https://github.com/apache/openjpa/commit/74b0ac19562af2340db9b75a2b0716ca90783d4b"}]},{"sha":"90392e37d6389f2002bdf5992e1a1242a442c79b","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMzkyZTM3ZDYzODlmMjAwMmJkZjU5OTJlMWExMjQyYTQ0MmM3OWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-02T21:43:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-02T21:43:17Z"},"message":"OPENJPA-1369: Change Order.count column name to save HSQLDB keyword name clash\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832117 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04fe0756c2d811f5f406eadd9c31faaf8d97ef40","url":"https://api.github.com/repos/apache/openjpa/git/trees/04fe0756c2d811f5f406eadd9c31faaf8d97ef40"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90392e37d6389f2002bdf5992e1a1242a442c79b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90392e37d6389f2002bdf5992e1a1242a442c79b","html_url":"https://github.com/apache/openjpa/commit/90392e37d6389f2002bdf5992e1a1242a442c79b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90392e37d6389f2002bdf5992e1a1242a442c79b/comments","author":null,"committer":null,"parents":[{"sha":"760cf901ed485e7b3d0df316dc248b02c2c4cf24","url":"https://api.github.com/repos/apache/openjpa/commits/760cf901ed485e7b3d0df316dc248b02c2c4cf24","html_url":"https://github.com/apache/openjpa/commit/760cf901ed485e7b3d0df316dc248b02c2c4cf24"}]},{"sha":"073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3M2FkMWQ3OTc2YTI2ZTJjNmZkZjFhNmVhZWFhYmFiMTUzYmJmYzY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T05:12:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T05:12:14Z"},"message":"Changed column name for Order.count to CNT to save HSQLDB\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832300 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd9e09aeababc2b2fd60f8227bc3dd6ff609b267","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd9e09aeababc2b2fd60f8227bc3dd6ff609b267"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6","html_url":"https://github.com/apache/openjpa/commit/073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6/comments","author":null,"committer":null,"parents":[{"sha":"90392e37d6389f2002bdf5992e1a1242a442c79b","url":"https://api.github.com/repos/apache/openjpa/commits/90392e37d6389f2002bdf5992e1a1242a442c79b","html_url":"https://github.com/apache/openjpa/commit/90392e37d6389f2002bdf5992e1a1242a442c79b"}]},{"sha":"f4c2b59df7732892d00acf34593e56e11f7c4b91","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0YzJiNTlkZjc3MzI4OTJkMDBhY2YzNDU5M2U1NmUxMWY3YzRiOTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T05:39:56Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T05:39:56Z"},"message":"Changed column name for Order.count to CNT to save HSQLDB\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832304 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b3878d41f65a89199e8d9a765d8e571d56b4d2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b3878d41f65a89199e8d9a765d8e571d56b4d2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f4c2b59df7732892d00acf34593e56e11f7c4b91","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f4c2b59df7732892d00acf34593e56e11f7c4b91","html_url":"https://github.com/apache/openjpa/commit/f4c2b59df7732892d00acf34593e56e11f7c4b91","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f4c2b59df7732892d00acf34593e56e11f7c4b91/comments","author":null,"committer":null,"parents":[{"sha":"073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6","url":"https://api.github.com/repos/apache/openjpa/commits/073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6","html_url":"https://github.com/apache/openjpa/commit/073ad1d7976a26e2c6fdf1a6eaeaabab153bbfc6"}]},{"sha":"e43c6f05a34bdeba6c95619b2494364940850ea3","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0M2M2ZjA1YTM0YmRlYmE2Yzk1NjE5YjI0OTQzNjQ5NDA4NTBlYTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T05:50:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T05:50:45Z"},"message":"OPENJPA-1369: Change Order.count to column CNT\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46adc854dc2e151a0ac790501fa79b1b2a0999cd","url":"https://api.github.com/repos/apache/openjpa/git/trees/46adc854dc2e151a0ac790501fa79b1b2a0999cd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e43c6f05a34bdeba6c95619b2494364940850ea3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e43c6f05a34bdeba6c95619b2494364940850ea3","html_url":"https://github.com/apache/openjpa/commit/e43c6f05a34bdeba6c95619b2494364940850ea3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e43c6f05a34bdeba6c95619b2494364940850ea3/comments","author":null,"committer":null,"parents":[{"sha":"f4c2b59df7732892d00acf34593e56e11f7c4b91","url":"https://api.github.com/repos/apache/openjpa/commits/f4c2b59df7732892d00acf34593e56e11f7c4b91","html_url":"https://github.com/apache/openjpa/commit/f4c2b59df7732892d00acf34593e56e11f7c4b91"}]},{"sha":"b1b1e0fc4092308a30d99dab61b4cda2a38496f9","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxYjFlMGZjNDA5MjMwOGEzMGQ5OWRhYjYxYjRjZGEyYTM4NDk2Zjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T06:01:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T06:01:45Z"},"message":"Changed column name for Order.count to CNT to save HSQLDB\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832308 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"36cf0249214aca99b320a1aa2dbe6e0a0755abc3","url":"https://api.github.com/repos/apache/openjpa/git/trees/36cf0249214aca99b320a1aa2dbe6e0a0755abc3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b1b1e0fc4092308a30d99dab61b4cda2a38496f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b1b1e0fc4092308a30d99dab61b4cda2a38496f9","html_url":"https://github.com/apache/openjpa/commit/b1b1e0fc4092308a30d99dab61b4cda2a38496f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b1b1e0fc4092308a30d99dab61b4cda2a38496f9/comments","author":null,"committer":null,"parents":[{"sha":"e43c6f05a34bdeba6c95619b2494364940850ea3","url":"https://api.github.com/repos/apache/openjpa/commits/e43c6f05a34bdeba6c95619b2494364940850ea3","html_url":"https://github.com/apache/openjpa/commit/e43c6f05a34bdeba6c95619b2494364940850ea3"}]},{"sha":"48a8b22b7b3b06fde0f385dd8817ba22c7257695","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4YThiMjJiN2IzYjA2ZmRlMGYzODVkZDg4MTdiYTIyYzcyNTc2OTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T07:13:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T07:13:58Z"},"message":"OPENJPA-1369: Change Order.count to column CNT\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832318 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdf13d3241c001f5f07f18053ae7cc27286a8e60","url":"https://api.github.com/repos/apache/openjpa/git/trees/fdf13d3241c001f5f07f18053ae7cc27286a8e60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695","html_url":"https://github.com/apache/openjpa/commit/48a8b22b7b3b06fde0f385dd8817ba22c7257695","comments_url":"https://api.github.com/repos/apache/openjpa/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695/comments","author":null,"committer":null,"parents":[{"sha":"b1b1e0fc4092308a30d99dab61b4cda2a38496f9","url":"https://api.github.com/repos/apache/openjpa/commits/b1b1e0fc4092308a30d99dab61b4cda2a38496f9","html_url":"https://github.com/apache/openjpa/commit/b1b1e0fc4092308a30d99dab61b4cda2a38496f9"}]},{"sha":"2ff77531c2190355adb1c71f53a87d0873fe1c6e","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmZjc3NTMxYzIxOTAzNTVhZGIxYzcxZjUzYTg3ZDA4NzNmZTFjNmU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T07:56:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T07:56:07Z"},"message":"Changed column name for Order.count to CNT to save HSQLDB\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832328 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c347d96c9d69977da13cfecf84cc0bf7b39561c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/c347d96c9d69977da13cfecf84cc0bf7b39561c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ff77531c2190355adb1c71f53a87d0873fe1c6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ff77531c2190355adb1c71f53a87d0873fe1c6e","html_url":"https://github.com/apache/openjpa/commit/2ff77531c2190355adb1c71f53a87d0873fe1c6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ff77531c2190355adb1c71f53a87d0873fe1c6e/comments","author":null,"committer":null,"parents":[{"sha":"48a8b22b7b3b06fde0f385dd8817ba22c7257695","url":"https://api.github.com/repos/apache/openjpa/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695","html_url":"https://github.com/apache/openjpa/commit/48a8b22b7b3b06fde0f385dd8817ba22c7257695"}]},{"sha":"d59954d4b460c3d95b52a46054d721ba1e596872","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1OTk1NGQ0YjQ2MGMzZDk1YjUyYTQ2MDU0ZDcyMWJhMWU1OTY4NzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T09:22:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T09:22:42Z"},"message":"Check for null clob\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832357 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c3d149220c15edb624b2ed8767ee90fe6f383cb9","url":"https://api.github.com/repos/apache/openjpa/git/trees/c3d149220c15edb624b2ed8767ee90fe6f383cb9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d59954d4b460c3d95b52a46054d721ba1e596872","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d59954d4b460c3d95b52a46054d721ba1e596872","html_url":"https://github.com/apache/openjpa/commit/d59954d4b460c3d95b52a46054d721ba1e596872","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d59954d4b460c3d95b52a46054d721ba1e596872/comments","author":null,"committer":null,"parents":[{"sha":"2ff77531c2190355adb1c71f53a87d0873fe1c6e","url":"https://api.github.com/repos/apache/openjpa/commits/2ff77531c2190355adb1c71f53a87d0873fe1c6e","html_url":"https://github.com/apache/openjpa/commit/2ff77531c2190355adb1c71f53a87d0873fe1c6e"}]},{"sha":"ea6499afc01087cfa83879506fdc2ca49ac39ad0","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhNjQ5OWFmYzAxMDg3Y2ZhODM4Nzk1MDZmZGMyY2E0OWFjMzlhZDA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-03T18:50:48Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-03T18:50:48Z"},"message":"OPENJPA-1306 - Correct secondary table locking problem and test cases to match. Also fixed multiple SQLs validation test case problem.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832506 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd4551f835cc89afd41f903d27df24b3cb57e23f","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd4551f835cc89afd41f903d27df24b3cb57e23f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea6499afc01087cfa83879506fdc2ca49ac39ad0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea6499afc01087cfa83879506fdc2ca49ac39ad0","html_url":"https://github.com/apache/openjpa/commit/ea6499afc01087cfa83879506fdc2ca49ac39ad0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea6499afc01087cfa83879506fdc2ca49ac39ad0/comments","author":null,"committer":null,"parents":[{"sha":"d59954d4b460c3d95b52a46054d721ba1e596872","url":"https://api.github.com/repos/apache/openjpa/commits/d59954d4b460c3d95b52a46054d721ba1e596872","html_url":"https://github.com/apache/openjpa/commit/d59954d4b460c3d95b52a46054d721ba1e596872"}]},{"sha":"ac531c58759a605d7865db218ff1625454c591b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjNTMxYzU4NzU5YTYwNWQ3ODY1ZGIyMThmZjE2MjU0NTRjNTkxYjI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-03T22:48:43Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-03T22:48:43Z"},"message":"OPENJPA-1083 Fixed a mapping tool failure caused by the inability to discover and drop multi-column foreign key constraints.  Multi-column FK's were not getting dropped, but got added after clearing out the tables. Trying to add an existing FK caused an exception when using Oracle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832587 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4da0b702b4ace35ee7f9b57890bfc5c78dabc1fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/4da0b702b4ace35ee7f9b57890bfc5c78dabc1fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac531c58759a605d7865db218ff1625454c591b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac531c58759a605d7865db218ff1625454c591b2","html_url":"https://github.com/apache/openjpa/commit/ac531c58759a605d7865db218ff1625454c591b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac531c58759a605d7865db218ff1625454c591b2/comments","author":null,"committer":null,"parents":[{"sha":"ea6499afc01087cfa83879506fdc2ca49ac39ad0","url":"https://api.github.com/repos/apache/openjpa/commits/ea6499afc01087cfa83879506fdc2ca49ac39ad0","html_url":"https://github.com/apache/openjpa/commit/ea6499afc01087cfa83879506fdc2ca49ac39ad0"}]},{"sha":"f0ad193611fdc1e401c897388ddcd9c14ca26227","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwYWQxOTM2MTFmZGMxZTQwMWM4OTczODhkZGNkOWMxNGNhMjYyMjc=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-04T17:48:29Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-04T17:48:29Z"},"message":"Fixed test case failure which occurs on DB platforms that use non-default max embedded LOB size.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832816 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a683969df8c08bb1fb487478f6b49a01ffa9d931","url":"https://api.github.com/repos/apache/openjpa/git/trees/a683969df8c08bb1fb487478f6b49a01ffa9d931"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f0ad193611fdc1e401c897388ddcd9c14ca26227","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f0ad193611fdc1e401c897388ddcd9c14ca26227","html_url":"https://github.com/apache/openjpa/commit/f0ad193611fdc1e401c897388ddcd9c14ca26227","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f0ad193611fdc1e401c897388ddcd9c14ca26227/comments","author":null,"committer":null,"parents":[{"sha":"ac531c58759a605d7865db218ff1625454c591b2","url":"https://api.github.com/repos/apache/openjpa/commits/ac531c58759a605d7865db218ff1625454c591b2","html_url":"https://github.com/apache/openjpa/commit/ac531c58759a605d7865db218ff1625454c591b2"}]},{"sha":"faf2966816c2f6252546b519eb39f4077c1713f2","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhZjI5NjY4MTZjMmY2MjUyNTQ2YjUxOWViMzlmNDA3N2MxNzEzZjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-04T21:18:38Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-04T21:18:38Z"},"message":"OPENJPA-1334: Refresh should ignore cache.retrieve.mode settings. Assorted changes in property processing for usability \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdd7e17936811ba3eb69da5b4dbc163904d1fbc1","url":"https://api.github.com/repos/apache/openjpa/git/trees/bdd7e17936811ba3eb69da5b4dbc163904d1fbc1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/faf2966816c2f6252546b519eb39f4077c1713f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/faf2966816c2f6252546b519eb39f4077c1713f2","html_url":"https://github.com/apache/openjpa/commit/faf2966816c2f6252546b519eb39f4077c1713f2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/faf2966816c2f6252546b519eb39f4077c1713f2/comments","author":null,"committer":null,"parents":[{"sha":"f0ad193611fdc1e401c897388ddcd9c14ca26227","url":"https://api.github.com/repos/apache/openjpa/commits/f0ad193611fdc1e401c897388ddcd9c14ca26227","html_url":"https://github.com/apache/openjpa/commit/f0ad193611fdc1e401c897388ddcd9c14ca26227"}]},{"sha":"00fcf4cfd3cf28c95c9ba413358a7b680a719302","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwZmNmNGNmZDNjZjI4Yzk1YzliYTQxMzM1OGE3YjY4MGE3MTkzMDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-11-04T21:35:07Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-11-04T21:35:07Z"},"message":"OPENJPA-839 fix pom data so unprovided depends will be pulled automatically by maven and mark JAXB depends as optional\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832878 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aff88557810ac12cb883018abd1f7dbba5536589","url":"https://api.github.com/repos/apache/openjpa/git/trees/aff88557810ac12cb883018abd1f7dbba5536589"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/00fcf4cfd3cf28c95c9ba413358a7b680a719302","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/00fcf4cfd3cf28c95c9ba413358a7b680a719302","html_url":"https://github.com/apache/openjpa/commit/00fcf4cfd3cf28c95c9ba413358a7b680a719302","comments_url":"https://api.github.com/repos/apache/openjpa/commits/00fcf4cfd3cf28c95c9ba413358a7b680a719302/comments","author":null,"committer":null,"parents":[{"sha":"faf2966816c2f6252546b519eb39f4077c1713f2","url":"https://api.github.com/repos/apache/openjpa/commits/faf2966816c2f6252546b519eb39f4077c1713f2","html_url":"https://github.com/apache/openjpa/commit/faf2966816c2f6252546b519eb39f4077c1713f2"}]},{"sha":"3e83d5d15b2095330d21739e1244db9b52a1a9b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjNlODNkNWQxNWIyMDk1MzMwZDIxNzM5ZTEyNDRkYjliNTJhMWE5YjM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-05T19:54:32Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-05T19:54:32Z"},"message":"OPENJPA-1375 - Clean _plans IdentityHashMap when clear or close is called.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@833150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9eac8af6932923d1e57899a8bf407f2f8a22c7e1","url":"https://api.github.com/repos/apache/openjpa/git/trees/9eac8af6932923d1e57899a8bf407f2f8a22c7e1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3e83d5d15b2095330d21739e1244db9b52a1a9b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3e83d5d15b2095330d21739e1244db9b52a1a9b3","html_url":"https://github.com/apache/openjpa/commit/3e83d5d15b2095330d21739e1244db9b52a1a9b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3e83d5d15b2095330d21739e1244db9b52a1a9b3/comments","author":null,"committer":null,"parents":[{"sha":"00fcf4cfd3cf28c95c9ba413358a7b680a719302","url":"https://api.github.com/repos/apache/openjpa/commits/00fcf4cfd3cf28c95c9ba413358a7b680a719302","html_url":"https://github.com/apache/openjpa/commit/00fcf4cfd3cf28c95c9ba413358a7b680a719302"}]},{"sha":"75f3a174a46540cdcf3509396f7c82febcfd6c2f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1ZjNhMTc0YTQ2NTQwY2RjZjM1MDkzOTZmN2M4MmZlYmNmZDZjMmY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-08T05:03:29Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-08T05:03:29Z"},"message":"OPENJPA-1377 - convert property value to upper-case before converting to its corresponding enum type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@833826 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"450b122e703d6be79692cedc8da9a6d1b1326fe4","url":"https://api.github.com/repos/apache/openjpa/git/trees/450b122e703d6be79692cedc8da9a6d1b1326fe4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f","html_url":"https://github.com/apache/openjpa/commit/75f3a174a46540cdcf3509396f7c82febcfd6c2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f/comments","author":null,"committer":null,"parents":[{"sha":"3e83d5d15b2095330d21739e1244db9b52a1a9b3","url":"https://api.github.com/repos/apache/openjpa/commits/3e83d5d15b2095330d21739e1244db9b52a1a9b3","html_url":"https://github.com/apache/openjpa/commit/3e83d5d15b2095330d21739e1244db9b52a1a9b3"}]},{"sha":"218f57a731b60405ed3d6fc88ca5d38b47652a22","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxOGY1N2E3MzFiNjA0MDVlZDNkNmZjODhjYTVkMzhiNDc2NTJhMjI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-09T19:29:15Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-09T19:29:15Z"},"message":"Fixed minor syntax bug in ORM file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@834181 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7e5032c4739891bc3f78180d71cc9744cd571dbd","url":"https://api.github.com/repos/apache/openjpa/git/trees/7e5032c4739891bc3f78180d71cc9744cd571dbd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/218f57a731b60405ed3d6fc88ca5d38b47652a22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/218f57a731b60405ed3d6fc88ca5d38b47652a22","html_url":"https://github.com/apache/openjpa/commit/218f57a731b60405ed3d6fc88ca5d38b47652a22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/218f57a731b60405ed3d6fc88ca5d38b47652a22/comments","author":null,"committer":null,"parents":[{"sha":"75f3a174a46540cdcf3509396f7c82febcfd6c2f","url":"https://api.github.com/repos/apache/openjpa/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f","html_url":"https://github.com/apache/openjpa/commit/75f3a174a46540cdcf3509396f7c82febcfd6c2f"}]},{"sha":"19eb9f2615a15ae74a13668b88e3fd6136911d3e","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5ZWI5ZjI2MTVhMTVhZTc0YTEzNjY4Yjg4ZTNmZDYxMzY5MTFkM2U=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-11-09T22:02:15Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-11-09T22:02:15Z"},"message":"OPENJPA-1379: Fixed locking problem in AbstractQueryCache when using timestamp eviction policy and added new test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@834252 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"067bd4c876c02c4d330c6c0cde2d2d7c90aef8b8","url":"https://api.github.com/repos/apache/openjpa/git/trees/067bd4c876c02c4d330c6c0cde2d2d7c90aef8b8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/19eb9f2615a15ae74a13668b88e3fd6136911d3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/19eb9f2615a15ae74a13668b88e3fd6136911d3e","html_url":"https://github.com/apache/openjpa/commit/19eb9f2615a15ae74a13668b88e3fd6136911d3e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/19eb9f2615a15ae74a13668b88e3fd6136911d3e/comments","author":null,"committer":null,"parents":[{"sha":"218f57a731b60405ed3d6fc88ca5d38b47652a22","url":"https://api.github.com/repos/apache/openjpa/commits/218f57a731b60405ed3d6fc88ca5d38b47652a22","html_url":"https://github.com/apache/openjpa/commit/218f57a731b60405ed3d6fc88ca5d38b47652a22"}]},{"sha":"8f2ed40ac949820ad33faa6520249b672f4be6c8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmMmVkNDBhYzk0OTgyMGFkMzNmYWE2NTIwMjQ5YjY3MmY0YmU2Yzg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-09T23:50:09Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-09T23:50:09Z"},"message":"Use List<SQLException> generic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@834281 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86de92a5d05e64fd5dba10d176e2d05b85fc80c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/86de92a5d05e64fd5dba10d176e2d05b85fc80c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f2ed40ac949820ad33faa6520249b672f4be6c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f2ed40ac949820ad33faa6520249b672f4be6c8","html_url":"https://github.com/apache/openjpa/commit/8f2ed40ac949820ad33faa6520249b672f4be6c8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f2ed40ac949820ad33faa6520249b672f4be6c8/comments","author":null,"committer":null,"parents":[{"sha":"19eb9f2615a15ae74a13668b88e3fd6136911d3e","url":"https://api.github.com/repos/apache/openjpa/commits/19eb9f2615a15ae74a13668b88e3fd6136911d3e","html_url":"https://github.com/apache/openjpa/commit/19eb9f2615a15ae74a13668b88e3fd6136911d3e"}]},{"sha":"ab18db113b1fcdef7db9e96d8dcd6728cda576d8","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiMThkYjExM2IxZmNkZWY3ZGI5ZTk2ZDhkY2Q2NzI4Y2RhNTc2ZDg=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-10T17:53:32Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-10T17:53:32Z"},"message":"OPENJPA-1248 Set null or empty_lob as appropriate when inserting a new streaming lob for update on Oracle.  Also configured test to retain connection over the life of the tx and updated manual to document this requirement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@834564 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"27ba677224bbfdf88b6eddfadc50388d3d12e11f","url":"https://api.github.com/repos/apache/openjpa/git/trees/27ba677224bbfdf88b6eddfadc50388d3d12e11f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ab18db113b1fcdef7db9e96d8dcd6728cda576d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ab18db113b1fcdef7db9e96d8dcd6728cda576d8","html_url":"https://github.com/apache/openjpa/commit/ab18db113b1fcdef7db9e96d8dcd6728cda576d8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ab18db113b1fcdef7db9e96d8dcd6728cda576d8/comments","author":null,"committer":null,"parents":[{"sha":"8f2ed40ac949820ad33faa6520249b672f4be6c8","url":"https://api.github.com/repos/apache/openjpa/commits/8f2ed40ac949820ad33faa6520249b672f4be6c8","html_url":"https://github.com/apache/openjpa/commit/8f2ed40ac949820ad33faa6520249b672f4be6c8"}]},{"sha":"983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk4M2IzNGI2OGU5YjVjZjJmYjViNzg3NDRmNmJiMmZjYjY1NDM4OWM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-11T20:40:18Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-11T20:40:18Z"},"message":"OPENJPA-1380: queryCache is not refreshed for cross-join jpql.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835054 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80454d515a31f217e8bd63830ab2f9673acf4b65","url":"https://api.github.com/repos/apache/openjpa/git/trees/80454d515a31f217e8bd63830ab2f9673acf4b65"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","html_url":"https://github.com/apache/openjpa/commit/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c/comments","author":null,"committer":null,"parents":[{"sha":"ab18db113b1fcdef7db9e96d8dcd6728cda576d8","url":"https://api.github.com/repos/apache/openjpa/commits/ab18db113b1fcdef7db9e96d8dcd6728cda576d8","html_url":"https://github.com/apache/openjpa/commit/ab18db113b1fcdef7db9e96d8dcd6728cda576d8"}]},{"sha":"4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5OTFlNmJkYzIyYmRkYTFhYzVkOGJlZTQ0ZjlmM2U3M2Q5NGEyZDA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-12T02:04:12Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-12T02:04:12Z"},"message":"OPENJPA-1142 - Propagate lock level into LockException so that the proper optimistic/pessimistic exception is translated.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ae78e233549e78a155afe9530a630e1f1c20fbe","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ae78e233549e78a155afe9530a630e1f1c20fbe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","html_url":"https://github.com/apache/openjpa/commit/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/comments","author":null,"committer":null,"parents":[{"sha":"983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","url":"https://api.github.com/repos/apache/openjpa/commits/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","html_url":"https://github.com/apache/openjpa/commit/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c"}]},{"sha":"6f11e4d9836fa362d530d00cdd01342594eef1ab","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmMTFlNGQ5ODM2ZmEzNjJkNTMwZDAwY2RkMDEzNDI1OTRlZWYxYWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T04:14:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T04:14:55Z"},"message":"OPENJPA-1381: Ignore cached target query when lock mode is set\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835220 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c810b47e3603ba589361b9970ae0bb19e72151f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/c810b47e3603ba589361b9970ae0bb19e72151f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab","html_url":"https://github.com/apache/openjpa/commit/6f11e4d9836fa362d530d00cdd01342594eef1ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab/comments","author":null,"committer":null,"parents":[{"sha":"4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","url":"https://api.github.com/repos/apache/openjpa/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","html_url":"https://github.com/apache/openjpa/commit/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0"}]},{"sha":"70fc46f93eab6364e8062cc857ae27dafbc3449f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwZmM0NmY5M2VhYjYzNjRlODA2MmNjODU3YWUyN2RhZmJjMzQ0OWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T06:35:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T06:35:31Z"},"message":"OPENJPA-459: Bulk update using a join instead of a subselect\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835257 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e0035dd40bae54b45f818c1fe8b30306b5c6fdfe","url":"https://api.github.com/repos/apache/openjpa/git/trees/e0035dd40bae54b45f818c1fe8b30306b5c6fdfe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f","html_url":"https://github.com/apache/openjpa/commit/70fc46f93eab6364e8062cc857ae27dafbc3449f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f/comments","author":null,"committer":null,"parents":[{"sha":"6f11e4d9836fa362d530d00cdd01342594eef1ab","url":"https://api.github.com/repos/apache/openjpa/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab","html_url":"https://github.com/apache/openjpa/commit/6f11e4d9836fa362d530d00cdd01342594eef1ab"}]},{"sha":"befbc83945f3220fbb8209670fa66bf7766dcf6d","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlZmJjODM5NDVmMzIyMGZiYjgyMDk2NzBmYTY2YmY3NzY2ZGNmNmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T07:35:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T07:35:26Z"},"message":"OPENJPA-117: provide registered TransactionListeners as unmodifiable collection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835280 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed0f56a4e265daee18312601438cde754b58f25a","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed0f56a4e265daee18312601438cde754b58f25a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/befbc83945f3220fbb8209670fa66bf7766dcf6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/befbc83945f3220fbb8209670fa66bf7766dcf6d","html_url":"https://github.com/apache/openjpa/commit/befbc83945f3220fbb8209670fa66bf7766dcf6d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/befbc83945f3220fbb8209670fa66bf7766dcf6d/comments","author":null,"committer":null,"parents":[{"sha":"70fc46f93eab6364e8062cc857ae27dafbc3449f","url":"https://api.github.com/repos/apache/openjpa/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f","html_url":"https://github.com/apache/openjpa/commit/70fc46f93eab6364e8062cc857ae27dafbc3449f"}]},{"sha":"965c997c24c50a52a95492ada112d11a4c50fab7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2NWM5OTdjMjRjNTBhNTJhOTU0OTJhZGExMTJkMTFhNGM1MGZhYjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T07:46:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T07:46:32Z"},"message":"Generate MappedSuperClass through reverse mapping tool.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835285 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a5d0fafd29b9858df9734a40f4dbd2cd018f01f","url":"https://api.github.com/repos/apache/openjpa/git/trees/4a5d0fafd29b9858df9734a40f4dbd2cd018f01f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/965c997c24c50a52a95492ada112d11a4c50fab7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/965c997c24c50a52a95492ada112d11a4c50fab7","html_url":"https://github.com/apache/openjpa/commit/965c997c24c50a52a95492ada112d11a4c50fab7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/965c997c24c50a52a95492ada112d11a4c50fab7/comments","author":null,"committer":null,"parents":[{"sha":"befbc83945f3220fbb8209670fa66bf7766dcf6d","url":"https://api.github.com/repos/apache/openjpa/commits/befbc83945f3220fbb8209670fa66bf7766dcf6d","html_url":"https://github.com/apache/openjpa/commit/befbc83945f3220fbb8209670fa66bf7766dcf6d"}]},{"sha":"8c952771dc1852c56b8e2a5e216edc0e5ab9b292","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjOTUyNzcxZGMxODUyYzU2YjhlMmE1ZTIxNmVkYzBlNWFiOWIyOTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T08:10:05Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T08:10:05Z"},"message":"OPENJPA-1047: Prohibit Table annotation or XML descriptor element for MappedSuperclass.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835292 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69beae4dd9517df743ad54d7ae352283c1b9d8b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/69beae4dd9517df743ad54d7ae352283c1b9d8b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c952771dc1852c56b8e2a5e216edc0e5ab9b292","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c952771dc1852c56b8e2a5e216edc0e5ab9b292","html_url":"https://github.com/apache/openjpa/commit/8c952771dc1852c56b8e2a5e216edc0e5ab9b292","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c952771dc1852c56b8e2a5e216edc0e5ab9b292/comments","author":null,"committer":null,"parents":[{"sha":"965c997c24c50a52a95492ada112d11a4c50fab7","url":"https://api.github.com/repos/apache/openjpa/commits/965c997c24c50a52a95492ada112d11a4c50fab7","html_url":"https://github.com/apache/openjpa/commit/965c997c24c50a52a95492ada112d11a4c50fab7"}]},{"sha":"091109041fe612b507c596a4d903389c33c2c466","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5MTEwOTA0MWZlNjEyYjUwN2M1OTZhNGQ5MDMzODljMzNjMmM0NjY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T08:12:40Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T08:12:40Z"},"message":"OPENJPA-1047: Prohibit Table annotation or XML descriptor element for MappedSuperclass. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835293 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08584c8435169929630a6122289155431439991d","url":"https://api.github.com/repos/apache/openjpa/git/trees/08584c8435169929630a6122289155431439991d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/091109041fe612b507c596a4d903389c33c2c466","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/091109041fe612b507c596a4d903389c33c2c466","html_url":"https://github.com/apache/openjpa/commit/091109041fe612b507c596a4d903389c33c2c466","comments_url":"https://api.github.com/repos/apache/openjpa/commits/091109041fe612b507c596a4d903389c33c2c466/comments","author":null,"committer":null,"parents":[{"sha":"8c952771dc1852c56b8e2a5e216edc0e5ab9b292","url":"https://api.github.com/repos/apache/openjpa/commits/8c952771dc1852c56b8e2a5e216edc0e5ab9b292","html_url":"https://github.com/apache/openjpa/commit/8c952771dc1852c56b8e2a5e216edc0e5ab9b292"}]},{"sha":"2271a54167f3fa394f0b15f1b660e1cc0bea1144","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyNzFhNTQxNjdmM2ZhMzk0ZjBiMTVmMWI2NjBlMWNjMGJlYTExNDQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-11-12T17:03:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-11-12T17:03:34Z"},"message":"OPENJPA-1383: \nSetting DateFormat.SHORT and LOCALE.US in testcases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ce44b4b0521fc6b708a5c77b58963e017c38b86","url":"https://api.github.com/repos/apache/openjpa/git/trees/6ce44b4b0521fc6b708a5c77b58963e017c38b86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2271a54167f3fa394f0b15f1b660e1cc0bea1144","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2271a54167f3fa394f0b15f1b660e1cc0bea1144","html_url":"https://github.com/apache/openjpa/commit/2271a54167f3fa394f0b15f1b660e1cc0bea1144","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2271a54167f3fa394f0b15f1b660e1cc0bea1144/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"091109041fe612b507c596a4d903389c33c2c466","url":"https://api.github.com/repos/apache/openjpa/commits/091109041fe612b507c596a4d903389c33c2c466","html_url":"https://github.com/apache/openjpa/commit/091109041fe612b507c596a4d903389c33c2c466"}]},{"sha":"865dad93aac88d8cf206825c60b1c7f340fe70eb","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2NWRhZDkzYWFjODhkOGNmMjA2ODI1YzYwYjFjN2YzNDBmZTcwZWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T23:10:46Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T23:10:46Z"},"message":"OPENJPA-1385: Visit having clause to collect query parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835628 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2a71e0ea381950858dbe4ed87f4e551c3c43e022","url":"https://api.github.com/repos/apache/openjpa/git/trees/2a71e0ea381950858dbe4ed87f4e551c3c43e022"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/865dad93aac88d8cf206825c60b1c7f340fe70eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/865dad93aac88d8cf206825c60b1c7f340fe70eb","html_url":"https://github.com/apache/openjpa/commit/865dad93aac88d8cf206825c60b1c7f340fe70eb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/865dad93aac88d8cf206825c60b1c7f340fe70eb/comments","author":null,"committer":null,"parents":[{"sha":"2271a54167f3fa394f0b15f1b660e1cc0bea1144","url":"https://api.github.com/repos/apache/openjpa/commits/2271a54167f3fa394f0b15f1b660e1cc0bea1144","html_url":"https://github.com/apache/openjpa/commit/2271a54167f3fa394f0b15f1b660e1cc0bea1144"}]},{"sha":"f6327de653ed080b79c7630c13210bf2389a7079","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2MzI3ZGU2NTNlZDA4MGI3OWM3NjMwYzEzMjEwYmYyMzg5YTcwNzk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-11-13T03:04:03Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-11-13T03:04:03Z"},"message":"OPENJPA-1173:\nUpdating PostgreSQL driver.\nSubmitted by: Tim McConnell\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835716 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"72cba1b0e5379ecea258afcb2bddcde56d485380","url":"https://api.github.com/repos/apache/openjpa/git/trees/72cba1b0e5379ecea258afcb2bddcde56d485380"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f6327de653ed080b79c7630c13210bf2389a7079","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f6327de653ed080b79c7630c13210bf2389a7079","html_url":"https://github.com/apache/openjpa/commit/f6327de653ed080b79c7630c13210bf2389a7079","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f6327de653ed080b79c7630c13210bf2389a7079/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"865dad93aac88d8cf206825c60b1c7f340fe70eb","url":"https://api.github.com/repos/apache/openjpa/commits/865dad93aac88d8cf206825c60b1c7f340fe70eb","html_url":"https://github.com/apache/openjpa/commit/865dad93aac88d8cf206825c60b1c7f340fe70eb"}]},{"sha":"6ae4adf687ac9194fa66b4f82ccf07413b0262e3","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhZTRhZGY2ODdhYzkxOTRmYTY2YjRmODJjY2YwNzQxM2IwMjYyZTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T06:27:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T06:27:03Z"},"message":"OPENJPA-1386: Detect type name hiding while generating metamodel source code \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835753 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24f2440f20b27bf8c388744740e91d08b355d7f0","url":"https://api.github.com/repos/apache/openjpa/git/trees/24f2440f20b27bf8c388744740e91d08b355d7f0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6ae4adf687ac9194fa66b4f82ccf07413b0262e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6ae4adf687ac9194fa66b4f82ccf07413b0262e3","html_url":"https://github.com/apache/openjpa/commit/6ae4adf687ac9194fa66b4f82ccf07413b0262e3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6ae4adf687ac9194fa66b4f82ccf07413b0262e3/comments","author":null,"committer":null,"parents":[{"sha":"f6327de653ed080b79c7630c13210bf2389a7079","url":"https://api.github.com/repos/apache/openjpa/commits/f6327de653ed080b79c7630c13210bf2389a7079","html_url":"https://github.com/apache/openjpa/commit/f6327de653ed080b79c7630c13210bf2389a7079"}]},{"sha":"6e630e827ea2a257b2277c5589532b3b3b2e7fea","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlNjMwZTgyN2VhMmEyNTdiMjI3N2M1NTg5NTMyYjNiM2IyZTdmZWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T06:32:43Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T06:32:43Z"},"message":"OPENJPA-1386: Support field types that can hide each other\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c45c6d865169fa8c9bca4c6ecd486700167c08f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c45c6d865169fa8c9bca4c6ecd486700167c08f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea","html_url":"https://github.com/apache/openjpa/commit/6e630e827ea2a257b2277c5589532b3b3b2e7fea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea/comments","author":null,"committer":null,"parents":[{"sha":"6ae4adf687ac9194fa66b4f82ccf07413b0262e3","url":"https://api.github.com/repos/apache/openjpa/commits/6ae4adf687ac9194fa66b4f82ccf07413b0262e3","html_url":"https://github.com/apache/openjpa/commit/6ae4adf687ac9194fa66b4f82ccf07413b0262e3"}]},{"sha":"6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlMzdjNWYzNGM3MmYxZjQ2ODUyODhiYjViZjE0ZGRmMTAyNDJlMmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T19:29:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T19:29:48Z"},"message":"Use decorator pattern for Criteria Query tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835961 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae8b4cdfd13d476ca408d7cd89981dafffbbd85e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae8b4cdfd13d476ca408d7cd89981dafffbbd85e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","html_url":"https://github.com/apache/openjpa/commit/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/comments","author":null,"committer":null,"parents":[{"sha":"6e630e827ea2a257b2277c5589532b3b3b2e7fea","url":"https://api.github.com/repos/apache/openjpa/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea","html_url":"https://github.com/apache/openjpa/commit/6e630e827ea2a257b2277c5589532b3b3b2e7fea"}]},{"sha":"0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkMGRhZWQyY2JiOTI2ODRlYzVmOGNlZjA5ZWMxZDBlNzVkNDI1MDI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T22:18:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T22:18:32Z"},"message":"Literal value for empty disjunction and conjunction \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@836023 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"977dfb238fa515e37c206983d94829b7129ef9c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/977dfb238fa515e37c206983d94829b7129ef9c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","html_url":"https://github.com/apache/openjpa/commit/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/comments","author":null,"committer":null,"parents":[{"sha":"6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","url":"https://api.github.com/repos/apache/openjpa/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","html_url":"https://github.com/apache/openjpa/commit/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b"}]},{"sha":"6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjZjFjYTFmNjM3YWRjMjc2MDBhOGIxNzIyZDBhOWI3ZjY1YjMxYTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T23:04:53Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T23:04:53Z"},"message":"Document MetaModel generator tool usage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@836052 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b891bf41bc2a5b1f574ff9e225eb92e58540828f","url":"https://api.github.com/repos/apache/openjpa/git/trees/b891bf41bc2a5b1f574ff9e225eb92e58540828f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0","html_url":"https://github.com/apache/openjpa/commit/6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0/comments","author":null,"committer":null,"parents":[{"sha":"0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","url":"https://api.github.com/repos/apache/openjpa/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","html_url":"https://github.com/apache/openjpa/commit/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502"}]},{"sha":"61f9b32a496f538e89074b5edd563bc1f01fb532","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxZjliMzJhNDk2ZjUzOGU4OTA3NGI1ZWRkNTYzYmMxZjAxZmI1MzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T09:19:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T09:19:24Z"},"message":"OPENJPA-1387: Remove non-nullable constraint from Unique column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880686 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b76141c64345d11a39e4e2b7b2d6eb59d8c0084","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b76141c64345d11a39e4e2b7b2d6eb59d8c0084"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61f9b32a496f538e89074b5edd563bc1f01fb532","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61f9b32a496f538e89074b5edd563bc1f01fb532","html_url":"https://github.com/apache/openjpa/commit/61f9b32a496f538e89074b5edd563bc1f01fb532","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61f9b32a496f538e89074b5edd563bc1f01fb532/comments","author":null,"committer":null,"parents":[{"sha":"6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0","url":"https://api.github.com/repos/apache/openjpa/commits/6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0","html_url":"https://github.com/apache/openjpa/commit/6cf1ca1f637adc27600a8b1722d0a9b7f65b31a0"}]},{"sha":"a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5MWU4NWU2ZGI3M2I0YzJjNmIyZTg5ZWI3NWIyNTE2ZDFiYjk5YzY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T09:33:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T09:33:29Z"},"message":"OPENJPA-1051: Simplify check for uniqueness of column names. Patch contributed by Ravi Palacherla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880689 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1829abb00b29edd7c835675c370728912c0b73d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/1829abb00b29edd7c835675c370728912c0b73d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","html_url":"https://github.com/apache/openjpa/commit/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6/comments","author":null,"committer":null,"parents":[{"sha":"61f9b32a496f538e89074b5edd563bc1f01fb532","url":"https://api.github.com/repos/apache/openjpa/commits/61f9b32a496f538e89074b5edd563bc1f01fb532","html_url":"https://github.com/apache/openjpa/commit/61f9b32a496f538e89074b5edd563bc1f01fb532"}]},{"sha":"93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzYWU3MmQxNWYyYjc2N2M0MWZmYzQ0NThkOTVkNGM2NGUzY2M3NGQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T15:58:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T15:58:24Z"},"message":"OPENJPA-1051: Simplify check for uniqueness of column names. Patch contributed by Ravi Palacherla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880821 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a95e047b5d512c2f6dd48ffee84dca3d7651cb55","url":"https://api.github.com/repos/apache/openjpa/git/trees/a95e047b5d512c2f6dd48ffee84dca3d7651cb55"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","html_url":"https://github.com/apache/openjpa/commit/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d/comments","author":null,"committer":null,"parents":[{"sha":"a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","url":"https://api.github.com/repos/apache/openjpa/commits/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","html_url":"https://github.com/apache/openjpa/commit/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6"}]},{"sha":"05c785704cc706a1ca3745a5b2a3625eafb96c21","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1Yzc4NTcwNGNjNzA2YTFjYTM3NDVhNWIyYTM2MjVlYWZiOTZjMjE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T16:29:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T16:29:18Z"},"message":"OPENJPA-1387: Remove non-nullable constraint from Unique column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"88021512c3f1d54894e368e66e76c3349baf0eb4","url":"https://api.github.com/repos/apache/openjpa/git/trees/88021512c3f1d54894e368e66e76c3349baf0eb4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/05c785704cc706a1ca3745a5b2a3625eafb96c21","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/05c785704cc706a1ca3745a5b2a3625eafb96c21","html_url":"https://github.com/apache/openjpa/commit/05c785704cc706a1ca3745a5b2a3625eafb96c21","comments_url":"https://api.github.com/repos/apache/openjpa/commits/05c785704cc706a1ca3745a5b2a3625eafb96c21/comments","author":null,"committer":null,"parents":[{"sha":"93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","url":"https://api.github.com/repos/apache/openjpa/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","html_url":"https://github.com/apache/openjpa/commit/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d"}]},{"sha":"69d2415b575d884968cb2e974173e6af570e093b","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5ZDI0MTViNTc1ZDg4NDk2OGNiMmU5NzQxNzNlNmFmNTcwZTA5M2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T17:32:21Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T17:32:21Z"},"message":"OPENJPA-1387: Remove non-nullable constraint from Unique column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880865 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d1693dbcc155e7eab57e8e1b97452b74428b1668","url":"https://api.github.com/repos/apache/openjpa/git/trees/d1693dbcc155e7eab57e8e1b97452b74428b1668"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69d2415b575d884968cb2e974173e6af570e093b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69d2415b575d884968cb2e974173e6af570e093b","html_url":"https://github.com/apache/openjpa/commit/69d2415b575d884968cb2e974173e6af570e093b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69d2415b575d884968cb2e974173e6af570e093b/comments","author":null,"committer":null,"parents":[{"sha":"05c785704cc706a1ca3745a5b2a3625eafb96c21","url":"https://api.github.com/repos/apache/openjpa/commits/05c785704cc706a1ca3745a5b2a3625eafb96c21","html_url":"https://github.com/apache/openjpa/commit/05c785704cc706a1ca3745a5b2a3625eafb96c21"}]},{"sha":"5143d0cafd3ccd45a973f5945561675d87a5e81c","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxNDNkMGNhZmQzY2NkNDVhOTczZjU5NDU1NjE2NzVkODdhNWU4MWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T17:38:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T17:38:16Z"},"message":"OPENJPA-1387: Remove non-nullable constraint from Unique column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880868 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b99cf0ce65bf093afdad7a1c444bed62c1f06ffc","url":"https://api.github.com/repos/apache/openjpa/git/trees/b99cf0ce65bf093afdad7a1c444bed62c1f06ffc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5143d0cafd3ccd45a973f5945561675d87a5e81c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5143d0cafd3ccd45a973f5945561675d87a5e81c","html_url":"https://github.com/apache/openjpa/commit/5143d0cafd3ccd45a973f5945561675d87a5e81c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5143d0cafd3ccd45a973f5945561675d87a5e81c/comments","author":null,"committer":null,"parents":[{"sha":"69d2415b575d884968cb2e974173e6af570e093b","url":"https://api.github.com/repos/apache/openjpa/commits/69d2415b575d884968cb2e974173e6af570e093b","html_url":"https://github.com/apache/openjpa/commit/69d2415b575d884968cb2e974173e6af570e093b"}]},{"sha":"cfea146c2953a8b46abed0f5de50cf42701ccf7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmZWExNDZjMjk1M2E4YjQ2YWJlZDBmNWRlNTBjZjQyNzAxY2NmN2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T18:27:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T18:27:20Z"},"message":"OPENJPA-1381: Ignore preapared query if lock mode changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e566e2256a207070cd2ec829af83e42b9697a44","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e566e2256a207070cd2ec829af83e42b9697a44"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cfea146c2953a8b46abed0f5de50cf42701ccf7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cfea146c2953a8b46abed0f5de50cf42701ccf7b","html_url":"https://github.com/apache/openjpa/commit/cfea146c2953a8b46abed0f5de50cf42701ccf7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cfea146c2953a8b46abed0f5de50cf42701ccf7b/comments","author":null,"committer":null,"parents":[{"sha":"5143d0cafd3ccd45a973f5945561675d87a5e81c","url":"https://api.github.com/repos/apache/openjpa/commits/5143d0cafd3ccd45a973f5945561675d87a5e81c","html_url":"https://github.com/apache/openjpa/commit/5143d0cafd3ccd45a973f5945561675d87a5e81c"}]},{"sha":"9c275904f3a7a6f7f5740cf641bf7fcccb710186","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMjc1OTA0ZjNhN2E2ZjdmNTc0MGNmNjQxYmY3ZmNjY2I3MTAxODY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T19:34:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T19:34:11Z"},"message":"OPENJPA-1387: Revert unique colum related changes to before 880685 plus other changes after that related to OPENJPA-1051 and OPENJPA-1381.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880922 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3c47d3b2f5940f980079cab64e394478bf75e0b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3c47d3b2f5940f980079cab64e394478bf75e0b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186","html_url":"https://github.com/apache/openjpa/commit/9c275904f3a7a6f7f5740cf641bf7fcccb710186","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186/comments","author":null,"committer":null,"parents":[{"sha":"cfea146c2953a8b46abed0f5de50cf42701ccf7b","url":"https://api.github.com/repos/apache/openjpa/commits/cfea146c2953a8b46abed0f5de50cf42701ccf7b","html_url":"https://github.com/apache/openjpa/commit/cfea146c2953a8b46abed0f5de50cf42701ccf7b"}]},{"sha":"cbde4958f3a5f752fad6a76291ac570da5006d75","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiZGU0OTU4ZjNhNWY3NTJmYWQ2YTc2MjkxYWM1NzBkYTUwMDZkNzU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T19:45:40Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T19:45:40Z"},"message":"TeamCity commits left two files behind\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880929 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b891bf41bc2a5b1f574ff9e225eb92e58540828f","url":"https://api.github.com/repos/apache/openjpa/git/trees/b891bf41bc2a5b1f574ff9e225eb92e58540828f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbde4958f3a5f752fad6a76291ac570da5006d75","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbde4958f3a5f752fad6a76291ac570da5006d75","html_url":"https://github.com/apache/openjpa/commit/cbde4958f3a5f752fad6a76291ac570da5006d75","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbde4958f3a5f752fad6a76291ac570da5006d75/comments","author":null,"committer":null,"parents":[{"sha":"9c275904f3a7a6f7f5740cf641bf7fcccb710186","url":"https://api.github.com/repos/apache/openjpa/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186","html_url":"https://github.com/apache/openjpa/commit/9c275904f3a7a6f7f5740cf641bf7fcccb710186"}]},{"sha":"9a7bab2a6a54849fe98de374be278f3c303e68ec","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhN2JhYjJhNmE1NDg0OWZlOThkZTM3NGJlMjc4ZjNjMzAzZTY4ZWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T21:41:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T21:41:55Z"},"message":"OPENJPA-1051: Simplify check for uniqueness of column names. Patch contributed by Ravi Palacherla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e496415e0614e2634af8d7b62c3a8b946469026d","url":"https://api.github.com/repos/apache/openjpa/git/trees/e496415e0614e2634af8d7b62c3a8b946469026d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a7bab2a6a54849fe98de374be278f3c303e68ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a7bab2a6a54849fe98de374be278f3c303e68ec","html_url":"https://github.com/apache/openjpa/commit/9a7bab2a6a54849fe98de374be278f3c303e68ec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a7bab2a6a54849fe98de374be278f3c303e68ec/comments","author":null,"committer":null,"parents":[{"sha":"cbde4958f3a5f752fad6a76291ac570da5006d75","url":"https://api.github.com/repos/apache/openjpa/commits/cbde4958f3a5f752fad6a76291ac570da5006d75","html_url":"https://github.com/apache/openjpa/commit/cbde4958f3a5f752fad6a76291ac570da5006d75"}]},{"sha":"d9d6898558b809c0c630c0db869d4fe8f4ec61b4","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5ZDY4OTg1NThiODA5YzBjNjMwYzBkYjg2OWQ0ZmU4ZjRlYzYxYjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T21:49:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T21:49:59Z"},"message":"OPENJPA-1051\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880980 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c607561d51aa27677975c74f4ba47ddbe532356","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c607561d51aa27677975c74f4ba47ddbe532356"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d9d6898558b809c0c630c0db869d4fe8f4ec61b4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d9d6898558b809c0c630c0db869d4fe8f4ec61b4","html_url":"https://github.com/apache/openjpa/commit/d9d6898558b809c0c630c0db869d4fe8f4ec61b4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d9d6898558b809c0c630c0db869d4fe8f4ec61b4/comments","author":null,"committer":null,"parents":[{"sha":"9a7bab2a6a54849fe98de374be278f3c303e68ec","url":"https://api.github.com/repos/apache/openjpa/commits/9a7bab2a6a54849fe98de374be278f3c303e68ec","html_url":"https://github.com/apache/openjpa/commit/9a7bab2a6a54849fe98de374be278f3c303e68ec"}]},{"sha":"fb82c6ad138638358017b9516f3340bf1a75e4fe","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiODJjNmFkMTM4NjM4MzU4MDE3Yjk1MTZmMzM0MGJmMWE3NWU0ZmU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T22:23:09Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T22:23:09Z"},"message":"OPENJPA-1381: Ignore preapared query if lock mode changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"333cfc87b7f77bddb60f6c1fe84006d25c650bfb","url":"https://api.github.com/repos/apache/openjpa/git/trees/333cfc87b7f77bddb60f6c1fe84006d25c650bfb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb82c6ad138638358017b9516f3340bf1a75e4fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb82c6ad138638358017b9516f3340bf1a75e4fe","html_url":"https://github.com/apache/openjpa/commit/fb82c6ad138638358017b9516f3340bf1a75e4fe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb82c6ad138638358017b9516f3340bf1a75e4fe/comments","author":null,"committer":null,"parents":[{"sha":"d9d6898558b809c0c630c0db869d4fe8f4ec61b4","url":"https://api.github.com/repos/apache/openjpa/commits/d9d6898558b809c0c630c0db869d4fe8f4ec61b4","html_url":"https://github.com/apache/openjpa/commit/d9d6898558b809c0c630c0db869d4fe8f4ec61b4"}]},{"sha":"c44c17bd77cc9ab79726783f5a5da1419f1b844b","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NGMxN2JkNzdjYzlhYjc5NzI2NzgzZjVhNWRhMTQxOWYxYjg0NGI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T17:13:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T17:13:48Z"},"message":"Add error messages for attribute not found exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881381 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c64d7c6266f4b23e848387f0cdf251f44b582eb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c64d7c6266f4b23e848387f0cdf251f44b582eb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b","html_url":"https://github.com/apache/openjpa/commit/c44c17bd77cc9ab79726783f5a5da1419f1b844b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b/comments","author":null,"committer":null,"parents":[{"sha":"fb82c6ad138638358017b9516f3340bf1a75e4fe","url":"https://api.github.com/repos/apache/openjpa/commits/fb82c6ad138638358017b9516f3340bf1a75e4fe","html_url":"https://github.com/apache/openjpa/commit/fb82c6ad138638358017b9516f3340bf1a75e4fe"}]},{"sha":"481bb3d6eb14697e425a673b643e6037424c173e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4MWJiM2Q2ZWIxNDY5N2U0MjVhNjczYjY0M2U2MDM3NDI0YzE3M2U=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T20:35:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T20:35:20Z"},"message":"OPENJPA-1390: From.join(String attr) checks any attribute not only singular attributes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881495 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"855398a19991b0a1337a6a1b19169280ff760737","url":"https://api.github.com/repos/apache/openjpa/git/trees/855398a19991b0a1337a6a1b19169280ff760737"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/481bb3d6eb14697e425a673b643e6037424c173e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/481bb3d6eb14697e425a673b643e6037424c173e","html_url":"https://github.com/apache/openjpa/commit/481bb3d6eb14697e425a673b643e6037424c173e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/481bb3d6eb14697e425a673b643e6037424c173e/comments","author":null,"committer":null,"parents":[{"sha":"c44c17bd77cc9ab79726783f5a5da1419f1b844b","url":"https://api.github.com/repos/apache/openjpa/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b","html_url":"https://github.com/apache/openjpa/commit/c44c17bd77cc9ab79726783f5a5da1419f1b844b"}]},{"sha":"be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlMmZmMTZmZTNhYzgzZTU0NzIzZGFhNDQ1MmRjNzFhNmMxZTJhMTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T21:16:23Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T21:16:23Z"},"message":"OPENJPA-1391: Handle untyped collection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881529 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f05df79f324bf981d42def858ffce2f893b2644c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f05df79f324bf981d42def858ffce2f893b2644c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","html_url":"https://github.com/apache/openjpa/commit/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/comments","author":null,"committer":null,"parents":[{"sha":"481bb3d6eb14697e425a673b643e6037424c173e","url":"https://api.github.com/repos/apache/openjpa/commits/481bb3d6eb14697e425a673b643e6037424c173e","html_url":"https://github.com/apache/openjpa/commit/481bb3d6eb14697e425a673b643e6037424c173e"}]},{"sha":"d797bc1eda8af75bb266d0523ca569b62ad1b774","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ3OTdiYzFlZGE4YWY3NWJiMjY2ZDA1MjNjYTU2OWI2MmFkMWI3NzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T22:10:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T22:10:18Z"},"message":"Support default projection for untyped result class, if possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881566 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"199e52ba6de6aebaa462c6ac3dcea9e73d5704c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/199e52ba6de6aebaa462c6ac3dcea9e73d5704c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774","html_url":"https://github.com/apache/openjpa/commit/d797bc1eda8af75bb266d0523ca569b62ad1b774","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774/comments","author":null,"committer":null,"parents":[{"sha":"be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","url":"https://api.github.com/repos/apache/openjpa/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","html_url":"https://github.com/apache/openjpa/commit/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14"}]},{"sha":"ee30b010dcbd58258c5d940d121e02f70b8160d9","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlMzBiMDEwZGNiZDU4MjU4YzVkOTQwZDEyMWUwMmY3MGI4MTYwZDk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-11-17T22:59:01Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-11-17T22:59:01Z"},"message":"OPENJPA-1388 JPQL named parameter using a reserved word (:vlaue) resulting in ArgumentException\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881598 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6499472d4a1b7b41b188ed1c403935151ef609ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/6499472d4a1b7b41b188ed1c403935151ef609ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9","html_url":"https://github.com/apache/openjpa/commit/ee30b010dcbd58258c5d940d121e02f70b8160d9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9/comments","author":null,"committer":null,"parents":[{"sha":"d797bc1eda8af75bb266d0523ca569b62ad1b774","url":"https://api.github.com/repos/apache/openjpa/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774","html_url":"https://github.com/apache/openjpa/commit/d797bc1eda8af75bb266d0523ca569b62ad1b774"}]},{"sha":"27996efb4882423eb1fce9425626d068e4eb501b","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3OTk2ZWZiNDg4MjQyM2ViMWZjZTk0MjU2MjZkMDY4ZTRlYjUwMWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-11-17T23:09:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-11-17T23:09:57Z"},"message":"OPENJPA-1384:\nTry current classloader when loading DBDictionary.\nSubmitted By: B.J. Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881613 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb10184215910814815e90e366426103d2a70c66","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb10184215910814815e90e366426103d2a70c66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/27996efb4882423eb1fce9425626d068e4eb501b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/27996efb4882423eb1fce9425626d068e4eb501b","html_url":"https://github.com/apache/openjpa/commit/27996efb4882423eb1fce9425626d068e4eb501b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/27996efb4882423eb1fce9425626d068e4eb501b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ee30b010dcbd58258c5d940d121e02f70b8160d9","url":"https://api.github.com/repos/apache/openjpa/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9","html_url":"https://github.com/apache/openjpa/commit/ee30b010dcbd58258c5d940d121e02f70b8160d9"}]},{"sha":"f1451e5fd868eacfabaf3500faeae13f05de3e79","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxNDUxZTVmZDg2OGVhY2ZhYmFmMzUwMGZhZWFlMTNmMDVkZTNlNzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T00:53:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T00:53:03Z"},"message":"OPENJPA-1392, OPENJPA-1393: countDistinct() and integer return type for size()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881638 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e13f69fc902419aa10163ea0b00d3eeb5cf44a1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e13f69fc902419aa10163ea0b00d3eeb5cf44a1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79","html_url":"https://github.com/apache/openjpa/commit/f1451e5fd868eacfabaf3500faeae13f05de3e79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79/comments","author":null,"committer":null,"parents":[{"sha":"27996efb4882423eb1fce9425626d068e4eb501b","url":"https://api.github.com/repos/apache/openjpa/commits/27996efb4882423eb1fce9425626d068e4eb501b","html_url":"https://github.com/apache/openjpa/commit/27996efb4882423eb1fce9425626d068e4eb501b"}]},{"sha":"96c723b3cb5e85f6f68059f62307d488eeedbc27","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2YzcyM2IzY2I1ZTg1ZjZmNjgwNTlmNjIzMDdkNDg4ZWVlZGJjMjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T13:33:04Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T13:33:04Z"},"message":"Works for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"03b3dd5e6a24bfcee96faa6b9083666696484694","url":"https://api.github.com/repos/apache/openjpa/git/trees/03b3dd5e6a24bfcee96faa6b9083666696484694"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/96c723b3cb5e85f6f68059f62307d488eeedbc27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/96c723b3cb5e85f6f68059f62307d488eeedbc27","html_url":"https://github.com/apache/openjpa/commit/96c723b3cb5e85f6f68059f62307d488eeedbc27","comments_url":"https://api.github.com/repos/apache/openjpa/commits/96c723b3cb5e85f6f68059f62307d488eeedbc27/comments","author":null,"committer":null,"parents":[{"sha":"f1451e5fd868eacfabaf3500faeae13f05de3e79","url":"https://api.github.com/repos/apache/openjpa/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79","html_url":"https://github.com/apache/openjpa/commit/f1451e5fd868eacfabaf3500faeae13f05de3e79"}]},{"sha":"9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmMGI3YWJiZWVkMjBkY2I0YTlmYWUwNzZlMGI5YWE1MGNiZjZlNjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T22:44:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T22:44:01Z"},"message":"Run CriteriaTest on MySQL as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7de17661730311d3e9ec0c1e366b7233ab72e3c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/7de17661730311d3e9ec0c1e366b7233ab72e3c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","html_url":"https://github.com/apache/openjpa/commit/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/comments","author":null,"committer":null,"parents":[{"sha":"96c723b3cb5e85f6f68059f62307d488eeedbc27","url":"https://api.github.com/repos/apache/openjpa/commits/96c723b3cb5e85f6f68059f62307d488eeedbc27","html_url":"https://github.com/apache/openjpa/commit/96c723b3cb5e85f6f68059f62307d488eeedbc27"}]},{"sha":"c3a856faa022f43d8fe9b30d954edd46e1401131","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzYTg1NmZhYTAyMmY0M2Q4ZmU5YjMwZDk1NGVkZDQ2ZTE0MDExMzE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-19T15:12:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-19T15:12:36Z"},"message":"OPENJPA-1396: fix metadata-complete problem so that it will override @Transient annotation in the entity class\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@882172 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc6e6fa0885305cec22c1d23fdc22fbabcc3d770","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc6e6fa0885305cec22c1d23fdc22fbabcc3d770"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c3a856faa022f43d8fe9b30d954edd46e1401131","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c3a856faa022f43d8fe9b30d954edd46e1401131","html_url":"https://github.com/apache/openjpa/commit/c3a856faa022f43d8fe9b30d954edd46e1401131","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c3a856faa022f43d8fe9b30d954edd46e1401131/comments","author":null,"committer":null,"parents":[{"sha":"9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","url":"https://api.github.com/repos/apache/openjpa/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","html_url":"https://github.com/apache/openjpa/commit/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64"}]},{"sha":"0291158f589290114dc031614f9595e81bc30b10","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyOTExNThmNTg5MjkwMTE0ZGMwMzE2MTRmOTU5NWU4MWJjMzBiMTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-19T20:37:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-19T20:37:45Z"},"message":"OPENJPA-1350: Test case (by Rick Curtis) to test early registration of type alias to avoid/minimze risk of multi-threaded repository initialization. Original change was revision 826944\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@882285 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae787655e7d7938329a02a185585dc69ec95dd30","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae787655e7d7938329a02a185585dc69ec95dd30"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0291158f589290114dc031614f9595e81bc30b10","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0291158f589290114dc031614f9595e81bc30b10","html_url":"https://github.com/apache/openjpa/commit/0291158f589290114dc031614f9595e81bc30b10","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0291158f589290114dc031614f9595e81bc30b10/comments","author":null,"committer":null,"parents":[{"sha":"c3a856faa022f43d8fe9b30d954edd46e1401131","url":"https://api.github.com/repos/apache/openjpa/commits/c3a856faa022f43d8fe9b30d954edd46e1401131","html_url":"https://github.com/apache/openjpa/commit/c3a856faa022f43d8fe9b30d954edd46e1401131"}]},{"sha":"f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2YTZlZTE1ZjIzZjdiZjdkOTlkMzNhM2M5MDQ5ODViMWVmOGU5OGE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-19T23:28:45Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-19T23:28:45Z"},"message":"OPENJPA-1394 - DB2 supports Order By clause with recording locking using \"WITH R*\" construct. By enabling this feature in the DB2 dictionary, row locking can be perform with the fetch and eliminate the time window other thread snike in to fetch the same row.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@882358 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6bfce7bc317011c8cddeade7a85eee4052eb421e","url":"https://api.github.com/repos/apache/openjpa/git/trees/6bfce7bc317011c8cddeade7a85eee4052eb421e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","html_url":"https://github.com/apache/openjpa/commit/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/comments","author":null,"committer":null,"parents":[{"sha":"0291158f589290114dc031614f9595e81bc30b10","url":"https://api.github.com/repos/apache/openjpa/commits/0291158f589290114dc031614f9595e81bc30b10","html_url":"https://github.com/apache/openjpa/commit/0291158f589290114dc031614f9595e81bc30b10"}]},{"sha":"0635172cbbb5049ae10808a1aea635b6275c675a","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2MzUxNzJjYmJiNTA0OWFlMTA4MDhhMWFlYTYzNWI2Mjc1YzY3NWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T18:37:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T18:37:52Z"},"message":"Set proper return type on evaluated expression.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@883808 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"312a8ef8ce306159231b7389b539df19de0ac069","url":"https://api.github.com/repos/apache/openjpa/git/trees/312a8ef8ce306159231b7389b539df19de0ac069"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0635172cbbb5049ae10808a1aea635b6275c675a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0635172cbbb5049ae10808a1aea635b6275c675a","html_url":"https://github.com/apache/openjpa/commit/0635172cbbb5049ae10808a1aea635b6275c675a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0635172cbbb5049ae10808a1aea635b6275c675a/comments","author":null,"committer":null,"parents":[{"sha":"f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","url":"https://api.github.com/repos/apache/openjpa/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","html_url":"https://github.com/apache/openjpa/commit/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a"}]},{"sha":"5d765ea05b1f786c2bc6d48e3231c5d3a5166269","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkNzY1ZWEwNWIxZjc4NmMyYmM2ZDQ4ZTMyMzFjNWQzYTUxNjYyNjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T20:12:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T20:12:00Z"},"message":"OPENJPA-1386: Improve handling of imports that can hide each other\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@883846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b3f116a159064d3c45b68fdb70fe5172c8523a71","url":"https://api.github.com/repos/apache/openjpa/git/trees/b3f116a159064d3c45b68fdb70fe5172c8523a71"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d765ea05b1f786c2bc6d48e3231c5d3a5166269","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d765ea05b1f786c2bc6d48e3231c5d3a5166269","html_url":"https://github.com/apache/openjpa/commit/5d765ea05b1f786c2bc6d48e3231c5d3a5166269","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d765ea05b1f786c2bc6d48e3231c5d3a5166269/comments","author":null,"committer":null,"parents":[{"sha":"0635172cbbb5049ae10808a1aea635b6275c675a","url":"https://api.github.com/repos/apache/openjpa/commits/0635172cbbb5049ae10808a1aea635b6275c675a","html_url":"https://github.com/apache/openjpa/commit/0635172cbbb5049ae10808a1aea635b6275c675a"}]},{"sha":"94389184655dd1bf89ee3650bce218d62970107a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0Mzg5MTg0NjU1ZGQxYmY4OWVlMzY1MGJjZTIxOGQ2Mjk3MDEwN2E=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T22:05:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T22:05:26Z"},"message":"Cut down processing cost for identical type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@883895 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"775db63d6d5c7bf4af3781b25130db0f33e86e29","url":"https://api.github.com/repos/apache/openjpa/git/trees/775db63d6d5c7bf4af3781b25130db0f33e86e29"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94389184655dd1bf89ee3650bce218d62970107a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94389184655dd1bf89ee3650bce218d62970107a","html_url":"https://github.com/apache/openjpa/commit/94389184655dd1bf89ee3650bce218d62970107a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94389184655dd1bf89ee3650bce218d62970107a/comments","author":null,"committer":null,"parents":[{"sha":"5d765ea05b1f786c2bc6d48e3231c5d3a5166269","url":"https://api.github.com/repos/apache/openjpa/commits/5d765ea05b1f786c2bc6d48e3231c5d3a5166269","html_url":"https://github.com/apache/openjpa/commit/5d765ea05b1f786c2bc6d48e3231c5d3a5166269"}]},{"sha":"d4010d13e18b66922b949e3a02e66c34657394da","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0MDEwZDEzZTE4YjY2OTIyYjk0OWUzYTAyZTY2YzM0NjU3Mzk0ZGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-25T05:41:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-25T05:41:07Z"},"message":"Reduce hint handling construction cost\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@883982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"497e8e9e16461069f823133d238cbd339623f5bf","url":"https://api.github.com/repos/apache/openjpa/git/trees/497e8e9e16461069f823133d238cbd339623f5bf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d4010d13e18b66922b949e3a02e66c34657394da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d4010d13e18b66922b949e3a02e66c34657394da","html_url":"https://github.com/apache/openjpa/commit/d4010d13e18b66922b949e3a02e66c34657394da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d4010d13e18b66922b949e3a02e66c34657394da/comments","author":null,"committer":null,"parents":[{"sha":"94389184655dd1bf89ee3650bce218d62970107a","url":"https://api.github.com/repos/apache/openjpa/commits/94389184655dd1bf89ee3650bce218d62970107a","html_url":"https://github.com/apache/openjpa/commit/94389184655dd1bf89ee3650bce218d62970107a"}]},{"sha":"3d07bcd372581c08ce74bd80c11db1d55178ec8c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkMDdiY2QzNzI1ODFjMDhjZTc0YmQ4MGMxMWRiMWQ1NTE3OGVjOGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-25T19:32:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-25T19:32:15Z"},"message":"Special comparison for two boolean constants\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@884233 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"84301183ff713f10880cc69168a5a8abd2e48fcb","url":"https://api.github.com/repos/apache/openjpa/git/trees/84301183ff713f10880cc69168a5a8abd2e48fcb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3d07bcd372581c08ce74bd80c11db1d55178ec8c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3d07bcd372581c08ce74bd80c11db1d55178ec8c","html_url":"https://github.com/apache/openjpa/commit/3d07bcd372581c08ce74bd80c11db1d55178ec8c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3d07bcd372581c08ce74bd80c11db1d55178ec8c/comments","author":null,"committer":null,"parents":[{"sha":"d4010d13e18b66922b949e3a02e66c34657394da","url":"https://api.github.com/repos/apache/openjpa/commits/d4010d13e18b66922b949e3a02e66c34657394da","html_url":"https://github.com/apache/openjpa/commit/d4010d13e18b66922b949e3a02e66c34657394da"}]},{"sha":"a1221ea36d7bb701ef0777478ea805856516b39a","node_id":"MDY6Q29tbWl0MjA2MzY0OmExMjIxZWEzNmQ3YmI3MDFlZjA3Nzc0NzhlYTgwNTg1NjUxNmIzOWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-25T20:52:36Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-25T20:52:36Z"},"message":"Special comparison for two boolean constants\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@884265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b785bb67216f2738ab818f86e2b311849192df73","url":"https://api.github.com/repos/apache/openjpa/git/trees/b785bb67216f2738ab818f86e2b311849192df73"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a1221ea36d7bb701ef0777478ea805856516b39a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a1221ea36d7bb701ef0777478ea805856516b39a","html_url":"https://github.com/apache/openjpa/commit/a1221ea36d7bb701ef0777478ea805856516b39a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a1221ea36d7bb701ef0777478ea805856516b39a/comments","author":null,"committer":null,"parents":[{"sha":"3d07bcd372581c08ce74bd80c11db1d55178ec8c","url":"https://api.github.com/repos/apache/openjpa/commits/3d07bcd372581c08ce74bd80c11db1d55178ec8c","html_url":"https://github.com/apache/openjpa/commit/3d07bcd372581c08ce74bd80c11db1d55178ec8c"}]},{"sha":"cbbe382ecda74174f567e2659a7fd2ccb5419abf","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiYmUzODJlY2RhNzQxNzRmNTY3ZTI2NTlhN2ZkMmNjYjU0MTlhYmY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-27T05:11:21Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-27T05:11:21Z"},"message":"OPENJPA-1402 - Improve concurrency by not locking relation field whenever appropriate for mixed lock manager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@884744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4a648bf3d084ea5a491884bae19f6bd22b6522d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4a648bf3d084ea5a491884bae19f6bd22b6522d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf","html_url":"https://github.com/apache/openjpa/commit/cbbe382ecda74174f567e2659a7fd2ccb5419abf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf/comments","author":null,"committer":null,"parents":[{"sha":"a1221ea36d7bb701ef0777478ea805856516b39a","url":"https://api.github.com/repos/apache/openjpa/commits/a1221ea36d7bb701ef0777478ea805856516b39a","html_url":"https://github.com/apache/openjpa/commit/a1221ea36d7bb701ef0777478ea805856516b39a"}]},{"sha":"36a6df375bcb4b4c9b925c4234d02f6d84c6a334","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2YTZkZjM3NWJjYjRiNGM5YjkyNWM0MjM0ZDAyZjZkODRjNmEzMzQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-30T18:10:01Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-30T18:10:01Z"},"message":"Avoid dependency on src folder from test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885524 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9457d81f278ce878fdfc8c6def05651048c8ee81","url":"https://api.github.com/repos/apache/openjpa/git/trees/9457d81f278ce878fdfc8c6def05651048c8ee81"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/36a6df375bcb4b4c9b925c4234d02f6d84c6a334","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/36a6df375bcb4b4c9b925c4234d02f6d84c6a334","html_url":"https://github.com/apache/openjpa/commit/36a6df375bcb4b4c9b925c4234d02f6d84c6a334","comments_url":"https://api.github.com/repos/apache/openjpa/commits/36a6df375bcb4b4c9b925c4234d02f6d84c6a334/comments","author":null,"committer":null,"parents":[{"sha":"cbbe382ecda74174f567e2659a7fd2ccb5419abf","url":"https://api.github.com/repos/apache/openjpa/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf","html_url":"https://github.com/apache/openjpa/commit/cbbe382ecda74174f567e2659a7fd2ccb5419abf"}]},{"sha":"69517ce840b72560e0a33e6e01b91d255f77e1d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5NTE3Y2U4NDBiNzI1NjBlMGEzM2U2ZTAxYjkxZDI1NWY3N2UxZDc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-30T18:22:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-30T18:22:06Z"},"message":"Save NPE on getting super type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885526 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f6d4435a543b4e2a4e6b8916eae75011680b75d","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f6d4435a543b4e2a4e6b8916eae75011680b75d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69517ce840b72560e0a33e6e01b91d255f77e1d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69517ce840b72560e0a33e6e01b91d255f77e1d7","html_url":"https://github.com/apache/openjpa/commit/69517ce840b72560e0a33e6e01b91d255f77e1d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69517ce840b72560e0a33e6e01b91d255f77e1d7/comments","author":null,"committer":null,"parents":[{"sha":"36a6df375bcb4b4c9b925c4234d02f6d84c6a334","url":"https://api.github.com/repos/apache/openjpa/commits/36a6df375bcb4b4c9b925c4234d02f6d84c6a334","html_url":"https://github.com/apache/openjpa/commit/36a6df375bcb4b4c9b925c4234d02f6d84c6a334"}]},{"sha":"05226837fdf923830e234fe06e830d34313d3c2b","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1MjI2ODM3ZmRmOTIzODMwZTIzNGZlMDZlODMwZDM0MzEzZDNjMmI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-11-30T20:08:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-11-30T20:08:15Z"},"message":"add missing or incorrect license headers found by rat plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885573 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6d3a962036d1b2d45d42579ffd76dca29b4f3b4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/6d3a962036d1b2d45d42579ffd76dca29b4f3b4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/05226837fdf923830e234fe06e830d34313d3c2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/05226837fdf923830e234fe06e830d34313d3c2b","html_url":"https://github.com/apache/openjpa/commit/05226837fdf923830e234fe06e830d34313d3c2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/05226837fdf923830e234fe06e830d34313d3c2b/comments","author":null,"committer":null,"parents":[{"sha":"69517ce840b72560e0a33e6e01b91d255f77e1d7","url":"https://api.github.com/repos/apache/openjpa/commits/69517ce840b72560e0a33e6e01b91d255f77e1d7","html_url":"https://github.com/apache/openjpa/commit/69517ce840b72560e0a33e6e01b91d255f77e1d7"}]},{"sha":"dce2cd8c6f87dfc7135fccfc732d8e2f98c30051","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjZTJjZDhjNmY4N2RmYzcxMzVmY2NmYzczMmQ4ZTJmOThjMzAwNTE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-11-30T22:33:25Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-11-30T22:33:25Z"},"message":"revert osgi changes that were included in r885573, so they can be committed against a JIRA for tracking\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885599 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e817ca7ff0faead30614a54d8ec3f8bed593922d","url":"https://api.github.com/repos/apache/openjpa/git/trees/e817ca7ff0faead30614a54d8ec3f8bed593922d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dce2cd8c6f87dfc7135fccfc732d8e2f98c30051","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dce2cd8c6f87dfc7135fccfc732d8e2f98c30051","html_url":"https://github.com/apache/openjpa/commit/dce2cd8c6f87dfc7135fccfc732d8e2f98c30051","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dce2cd8c6f87dfc7135fccfc732d8e2f98c30051/comments","author":null,"committer":null,"parents":[{"sha":"05226837fdf923830e234fe06e830d34313d3c2b","url":"https://api.github.com/repos/apache/openjpa/commits/05226837fdf923830e234fe06e830d34313d3c2b","html_url":"https://github.com/apache/openjpa/commit/05226837fdf923830e234fe06e830d34313d3c2b"}]},{"sha":"2c00f18f0c634ed5c16ebdbb90188e24033ef124","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjMDBmMThmMGM2MzRlZDVjMTZlYmRiYjkwMTg4ZTI0MDMzZWYxMjQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-01T19:13:01Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-01T19:13:01Z"},"message":"OPENJPA-1400: Fix PersistenceCapable.pcIsDetached() when using no statemanager and version is zero.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885872 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ca04f6b25bed2f7a02b6fe52ef9d4ba787436ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ca04f6b25bed2f7a02b6fe52ef9d4ba787436ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c00f18f0c634ed5c16ebdbb90188e24033ef124","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c00f18f0c634ed5c16ebdbb90188e24033ef124","html_url":"https://github.com/apache/openjpa/commit/2c00f18f0c634ed5c16ebdbb90188e24033ef124","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c00f18f0c634ed5c16ebdbb90188e24033ef124/comments","author":null,"committer":null,"parents":[{"sha":"dce2cd8c6f87dfc7135fccfc732d8e2f98c30051","url":"https://api.github.com/repos/apache/openjpa/commits/dce2cd8c6f87dfc7135fccfc732d8e2f98c30051","html_url":"https://github.com/apache/openjpa/commit/dce2cd8c6f87dfc7135fccfc732d8e2f98c30051"}]},{"sha":"110cb20e798f6c6eb2211b973ff23826604daf84","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMGNiMjBlNzk4ZjZjNmViMjIxMWI5NzNmZjIzODI2NjA0ZGFmODQ=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-01T21:13:30Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-01T21:13:30Z"},"message":"OPENJPA-1248: Improve LOB streaming with PostgreSQL when connections are being wrapped by data source; refactor and modify test case not to run Reader LOB tests while on PostgreSQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885935 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"90ce0428e4d9c1bd0bd81e5866d12f5b45961713","url":"https://api.github.com/repos/apache/openjpa/git/trees/90ce0428e4d9c1bd0bd81e5866d12f5b45961713"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/110cb20e798f6c6eb2211b973ff23826604daf84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/110cb20e798f6c6eb2211b973ff23826604daf84","html_url":"https://github.com/apache/openjpa/commit/110cb20e798f6c6eb2211b973ff23826604daf84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/110cb20e798f6c6eb2211b973ff23826604daf84/comments","author":null,"committer":null,"parents":[{"sha":"2c00f18f0c634ed5c16ebdbb90188e24033ef124","url":"https://api.github.com/repos/apache/openjpa/commits/2c00f18f0c634ed5c16ebdbb90188e24033ef124","html_url":"https://github.com/apache/openjpa/commit/2c00f18f0c634ed5c16ebdbb90188e24033ef124"}]},{"sha":"eea93c8346dde9ca5b5bbbddfe94b233c32ace47","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlYTkzYzgzNDZkZGU5Y2E1YjViYmJkZGZlOTRiMjMzYzMyYWNlNDc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-01T21:35:28Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-01T21:35:28Z"},"message":"OPENJPA-1408 - Add test binary and source jars to modules.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885942 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a7dec1f40826ef27de4b8ba6fedad61334e925b","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a7dec1f40826ef27de4b8ba6fedad61334e925b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eea93c8346dde9ca5b5bbbddfe94b233c32ace47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eea93c8346dde9ca5b5bbbddfe94b233c32ace47","html_url":"https://github.com/apache/openjpa/commit/eea93c8346dde9ca5b5bbbddfe94b233c32ace47","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eea93c8346dde9ca5b5bbbddfe94b233c32ace47/comments","author":null,"committer":null,"parents":[{"sha":"110cb20e798f6c6eb2211b973ff23826604daf84","url":"https://api.github.com/repos/apache/openjpa/commits/110cb20e798f6c6eb2211b973ff23826604daf84","html_url":"https://github.com/apache/openjpa/commit/110cb20e798f6c6eb2211b973ff23826604daf84"}]},{"sha":"bc7da9765803de2193c5dbb26184981952faf5d5","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjN2RhOTc2NTgwM2RlMjE5M2M1ZGJiMjYxODQ5ODE5NTJmYWY1ZDU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-01T21:46:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-01T21:46:29Z"},"message":"Print class loader when metadata processing fails.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885955 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b2551e7654eec1b1a09f928abf81473c8e5d814","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b2551e7654eec1b1a09f928abf81473c8e5d814"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bc7da9765803de2193c5dbb26184981952faf5d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bc7da9765803de2193c5dbb26184981952faf5d5","html_url":"https://github.com/apache/openjpa/commit/bc7da9765803de2193c5dbb26184981952faf5d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bc7da9765803de2193c5dbb26184981952faf5d5/comments","author":null,"committer":null,"parents":[{"sha":"eea93c8346dde9ca5b5bbbddfe94b233c32ace47","url":"https://api.github.com/repos/apache/openjpa/commits/eea93c8346dde9ca5b5bbbddfe94b233c32ace47","html_url":"https://github.com/apache/openjpa/commit/eea93c8346dde9ca5b5bbbddfe94b233c32ace47"}]},{"sha":"583a6366fc9ae66b077a65a72e388358c8142811","node_id":"MDY6Q29tbWl0MjA2MzY0OjU4M2E2MzY2ZmM5YWU2NmIwNzdhNjVhNzJlMzg4MzU4YzgxNDI4MTE=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-01T22:06:49Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-01T22:06:49Z"},"message":"Fix TestMultipleSchemaNames so that schemas are created on PostgreSQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885965 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aaa69c2d1a617724e836b7a75fa2750e7c710cfa","url":"https://api.github.com/repos/apache/openjpa/git/trees/aaa69c2d1a617724e836b7a75fa2750e7c710cfa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/583a6366fc9ae66b077a65a72e388358c8142811","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/583a6366fc9ae66b077a65a72e388358c8142811","html_url":"https://github.com/apache/openjpa/commit/583a6366fc9ae66b077a65a72e388358c8142811","comments_url":"https://api.github.com/repos/apache/openjpa/commits/583a6366fc9ae66b077a65a72e388358c8142811/comments","author":null,"committer":null,"parents":[{"sha":"bc7da9765803de2193c5dbb26184981952faf5d5","url":"https://api.github.com/repos/apache/openjpa/commits/bc7da9765803de2193c5dbb26184981952faf5d5","html_url":"https://github.com/apache/openjpa/commit/bc7da9765803de2193c5dbb26184981952faf5d5"}]},{"sha":"ab52f1fa03ec427efc9bcd477d87d6c9437b2882","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiNTJmMWZhMDNlYzQyN2VmYzliY2Q0NzdkODdkNmM5NDM3YjI4ODI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-01T22:36:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-01T22:36:16Z"},"message":"remove unused imports.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f33ae82e950a325b501614ad909039c6e697183c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f33ae82e950a325b501614ad909039c6e697183c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ab52f1fa03ec427efc9bcd477d87d6c9437b2882","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ab52f1fa03ec427efc9bcd477d87d6c9437b2882","html_url":"https://github.com/apache/openjpa/commit/ab52f1fa03ec427efc9bcd477d87d6c9437b2882","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ab52f1fa03ec427efc9bcd477d87d6c9437b2882/comments","author":null,"committer":null,"parents":[{"sha":"583a6366fc9ae66b077a65a72e388358c8142811","url":"https://api.github.com/repos/apache/openjpa/commits/583a6366fc9ae66b077a65a72e388358c8142811","html_url":"https://github.com/apache/openjpa/commit/583a6366fc9ae66b077a65a72e388358c8142811"}]},{"sha":"1aaa1aa08647c357a406ecee42e6b2439c60fb27","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhYWExYWEwODY0N2MzNTdhNDA2ZWNlZTQyZTZiMjQzOWM2MGZiMjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-01T22:51:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-01T22:51:01Z"},"message":"OPENJPA-1409: Preserve type for currentDate/Time expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885989 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82870ed889270cfce9362234cadca9aae2a97694","url":"https://api.github.com/repos/apache/openjpa/git/trees/82870ed889270cfce9362234cadca9aae2a97694"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1aaa1aa08647c357a406ecee42e6b2439c60fb27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1aaa1aa08647c357a406ecee42e6b2439c60fb27","html_url":"https://github.com/apache/openjpa/commit/1aaa1aa08647c357a406ecee42e6b2439c60fb27","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1aaa1aa08647c357a406ecee42e6b2439c60fb27/comments","author":null,"committer":null,"parents":[{"sha":"ab52f1fa03ec427efc9bcd477d87d6c9437b2882","url":"https://api.github.com/repos/apache/openjpa/commits/ab52f1fa03ec427efc9bcd477d87d6c9437b2882","html_url":"https://github.com/apache/openjpa/commit/ab52f1fa03ec427efc9bcd477d87d6c9437b2882"}]},{"sha":"2353db803d1f862a2b1a30052cc56346ac59cf06","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzNTNkYjgwM2QxZjg2MmEyYjFhMzAwNTJjYzU2MzQ2YWM1OWNmMDY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-02T03:55:09Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-02T03:55:09Z"},"message":"OPENJPA-1409: Missing from TeamCity commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886045 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"483da6365109547aaa96e55f98cf4c7d1c99707b","url":"https://api.github.com/repos/apache/openjpa/git/trees/483da6365109547aaa96e55f98cf4c7d1c99707b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2353db803d1f862a2b1a30052cc56346ac59cf06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2353db803d1f862a2b1a30052cc56346ac59cf06","html_url":"https://github.com/apache/openjpa/commit/2353db803d1f862a2b1a30052cc56346ac59cf06","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2353db803d1f862a2b1a30052cc56346ac59cf06/comments","author":null,"committer":null,"parents":[{"sha":"1aaa1aa08647c357a406ecee42e6b2439c60fb27","url":"https://api.github.com/repos/apache/openjpa/commits/1aaa1aa08647c357a406ecee42e6b2439c60fb27","html_url":"https://github.com/apache/openjpa/commit/1aaa1aa08647c357a406ecee42e6b2439c60fb27"}]},{"sha":"8a0f2da8fd57cd2bd129e56b66a672d724efe13e","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhMGYyZGE4ZmQ1N2NkMmJkMTI5ZTU2YjY2YTY3MmQ3MjRlZmUxM2U=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-02T05:45:56Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-02T05:45:56Z"},"message":"OPENJPA-931: derived identity support \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886055 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a157a463a5a50edf6c57e25c05041ff9081c2f66","url":"https://api.github.com/repos/apache/openjpa/git/trees/a157a463a5a50edf6c57e25c05041ff9081c2f66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","html_url":"https://github.com/apache/openjpa/commit/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e/comments","author":null,"committer":null,"parents":[{"sha":"2353db803d1f862a2b1a30052cc56346ac59cf06","url":"https://api.github.com/repos/apache/openjpa/commits/2353db803d1f862a2b1a30052cc56346ac59cf06","html_url":"https://github.com/apache/openjpa/commit/2353db803d1f862a2b1a30052cc56346ac59cf06"}]},{"sha":"7cebf2ed256414b5a6da52822fceb1768e61daea","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjZWJmMmVkMjU2NDE0YjVhNmRhNTI4MjJmY2ViMTc2OGU2MWRhZWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-02T19:44:08Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-02T19:44:08Z"},"message":"Use generic type for Result\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886290 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bf418ba6905d571758c266b149ee0f0dbdcab7ab","url":"https://api.github.com/repos/apache/openjpa/git/trees/bf418ba6905d571758c266b149ee0f0dbdcab7ab"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7cebf2ed256414b5a6da52822fceb1768e61daea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7cebf2ed256414b5a6da52822fceb1768e61daea","html_url":"https://github.com/apache/openjpa/commit/7cebf2ed256414b5a6da52822fceb1768e61daea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7cebf2ed256414b5a6da52822fceb1768e61daea/comments","author":null,"committer":null,"parents":[{"sha":"8a0f2da8fd57cd2bd129e56b66a672d724efe13e","url":"https://api.github.com/repos/apache/openjpa/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","html_url":"https://github.com/apache/openjpa/commit/8a0f2da8fd57cd2bd129e56b66a672d724efe13e"}]},{"sha":"d488b471f5a6f750a9365388cd29aa2130fdbc40","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0ODhiNDcxZjVhNmY3NTBhOTM2NTM4OGNkMjlhYTIxMzBmZGJjNDA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-02T23:13:30Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-02T23:13:30Z"},"message":"OPENJPA-1408 - Do not collect any persistence.xml/orm.xml in the persistence jdbc test base class jar file to avoid possibly entity enhancement problem down the road.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae647276b98d8ef2b381c3ee268ff7e51dd98143","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae647276b98d8ef2b381c3ee268ff7e51dd98143"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d488b471f5a6f750a9365388cd29aa2130fdbc40","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d488b471f5a6f750a9365388cd29aa2130fdbc40","html_url":"https://github.com/apache/openjpa/commit/d488b471f5a6f750a9365388cd29aa2130fdbc40","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d488b471f5a6f750a9365388cd29aa2130fdbc40/comments","author":null,"committer":null,"parents":[{"sha":"7cebf2ed256414b5a6da52822fceb1768e61daea","url":"https://api.github.com/repos/apache/openjpa/commits/7cebf2ed256414b5a6da52822fceb1768e61daea","html_url":"https://github.com/apache/openjpa/commit/7cebf2ed256414b5a6da52822fceb1768e61daea"}]},{"sha":"123e0b61202ec1cfd6632736954bd80d65d3f8b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyM2UwYjYxMjAyZWMxY2ZkNjYzMjczNjk1NGJkODBkNjVkM2Y4YjM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-03T06:36:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-03T06:36:36Z"},"message":"OPENJPA-459: fix bulkUpdate for DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13c954fa9c64b2091c62f925f4f44461ea371329","url":"https://api.github.com/repos/apache/openjpa/git/trees/13c954fa9c64b2091c62f925f4f44461ea371329"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/123e0b61202ec1cfd6632736954bd80d65d3f8b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/123e0b61202ec1cfd6632736954bd80d65d3f8b3","html_url":"https://github.com/apache/openjpa/commit/123e0b61202ec1cfd6632736954bd80d65d3f8b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/123e0b61202ec1cfd6632736954bd80d65d3f8b3/comments","author":null,"committer":null,"parents":[{"sha":"d488b471f5a6f750a9365388cd29aa2130fdbc40","url":"https://api.github.com/repos/apache/openjpa/commits/d488b471f5a6f750a9365388cd29aa2130fdbc40","html_url":"https://github.com/apache/openjpa/commit/d488b471f5a6f750a9365388cd29aa2130fdbc40"}]},{"sha":"f697798fd8dac5c9567ecdbd2bd768169cbcc2ef","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2OTc3OThmZDhkYWM1Yzk1NjdlY2RiZDJiZDc2ODE2OWNiY2MyZWY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-03T19:11:45Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-03T19:11:45Z"},"message":"OPENJPA-782: fix default element collection table name to comply with the Spec\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886883 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ae55ce0e35c62681f02b6b688023cb8f8abed0a","url":"https://api.github.com/repos/apache/openjpa/git/trees/9ae55ce0e35c62681f02b6b688023cb8f8abed0a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef","html_url":"https://github.com/apache/openjpa/commit/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef/comments","author":null,"committer":null,"parents":[{"sha":"123e0b61202ec1cfd6632736954bd80d65d3f8b3","url":"https://api.github.com/repos/apache/openjpa/commits/123e0b61202ec1cfd6632736954bd80d65d3f8b3","html_url":"https://github.com/apache/openjpa/commit/123e0b61202ec1cfd6632736954bd80d65d3f8b3"}]},{"sha":"3f3d586c7301b1f2f926fb40fac194b6229d970e","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmM2Q1ODZjNzMwMWIxZjJmOTI2ZmI0MGZhYzE5NGI2MjI5ZDk3MGU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-03T23:42:00Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-03T23:42:00Z"},"message":"OPENJPA-1413: fix NPE when update using CASE expression on Derby\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886991 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f1288302f1edd852153fc683b4d8271e88917cbc","url":"https://api.github.com/repos/apache/openjpa/git/trees/f1288302f1edd852153fc683b4d8271e88917cbc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f3d586c7301b1f2f926fb40fac194b6229d970e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f3d586c7301b1f2f926fb40fac194b6229d970e","html_url":"https://github.com/apache/openjpa/commit/3f3d586c7301b1f2f926fb40fac194b6229d970e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f3d586c7301b1f2f926fb40fac194b6229d970e/comments","author":null,"committer":null,"parents":[{"sha":"f697798fd8dac5c9567ecdbd2bd768169cbcc2ef","url":"https://api.github.com/repos/apache/openjpa/commits/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef","html_url":"https://github.com/apache/openjpa/commit/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef"}]},{"sha":"8607e0b3b4050a29c93c15bdd23fe676bf76490f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2MDdlMGIzYjQwNTBhMjljOTNjMTViZGQyM2ZlNjc2YmY3NjQ5MGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T14:51:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T14:51:44Z"},"message":"OPENJPA-1397: Allow some columns of compound key to be null. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888417 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ee1f7bb2b64aae0bff2d6bb64a551bee54637fe","url":"https://api.github.com/repos/apache/openjpa/git/trees/3ee1f7bb2b64aae0bff2d6bb64a551bee54637fe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8607e0b3b4050a29c93c15bdd23fe676bf76490f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8607e0b3b4050a29c93c15bdd23fe676bf76490f","html_url":"https://github.com/apache/openjpa/commit/8607e0b3b4050a29c93c15bdd23fe676bf76490f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8607e0b3b4050a29c93c15bdd23fe676bf76490f/comments","author":null,"committer":null,"parents":[{"sha":"3f3d586c7301b1f2f926fb40fac194b6229d970e","url":"https://api.github.com/repos/apache/openjpa/commits/3f3d586c7301b1f2f926fb40fac194b6229d970e","html_url":"https://github.com/apache/openjpa/commit/3f3d586c7301b1f2f926fb40fac194b6229d970e"}]},{"sha":"b8313194431891caa284c08b62364cd474a7884a","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4MzEzMTk0NDMxODkxY2FhMjg0YzA4YjYyMzY0Y2Q0NzRhNzg4NGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T14:52:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T14:52:17Z"},"message":"OPENJPA-1397: Allow some columns of compound key to be null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888418 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f1fd1b031daca82473ce02e9427fc3598cb2fb1f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f1fd1b031daca82473ce02e9427fc3598cb2fb1f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8313194431891caa284c08b62364cd474a7884a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8313194431891caa284c08b62364cd474a7884a","html_url":"https://github.com/apache/openjpa/commit/b8313194431891caa284c08b62364cd474a7884a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8313194431891caa284c08b62364cd474a7884a/comments","author":null,"committer":null,"parents":[{"sha":"8607e0b3b4050a29c93c15bdd23fe676bf76490f","url":"https://api.github.com/repos/apache/openjpa/commits/8607e0b3b4050a29c93c15bdd23fe676bf76490f","html_url":"https://github.com/apache/openjpa/commit/8607e0b3b4050a29c93c15bdd23fe676bf76490f"}]},{"sha":"d17c70965d359a3c56f1391392c6a7861abfb1fd","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxN2M3MDk2NWQzNTlhM2M1NmYxMzkxMzkyYzZhNzg2MWFiZmIxZmQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T16:03:56Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T16:03:56Z"},"message":"OPENJPA-1415: Suppress batched OLE messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888453 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a119c3a22ecfb5c873523287748aa35095c84f8b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a119c3a22ecfb5c873523287748aa35095c84f8b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d17c70965d359a3c56f1391392c6a7861abfb1fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d17c70965d359a3c56f1391392c6a7861abfb1fd","html_url":"https://github.com/apache/openjpa/commit/d17c70965d359a3c56f1391392c6a7861abfb1fd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d17c70965d359a3c56f1391392c6a7861abfb1fd/comments","author":null,"committer":null,"parents":[{"sha":"b8313194431891caa284c08b62364cd474a7884a","url":"https://api.github.com/repos/apache/openjpa/commits/b8313194431891caa284c08b62364cd474a7884a","html_url":"https://github.com/apache/openjpa/commit/b8313194431891caa284c08b62364cd474a7884a"}]},{"sha":"6896c31d601c6c0066b881af07e1d5a6045af274","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4OTZjMzFkNjAxYzZjMDA2NmI4ODFhZjA3ZTFkNWE2MDQ1YWYyNzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:36:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:36:19Z"},"message":"Use generic type argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888473 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f4dfce622a0cfbbc3c04e7ef4a940dff5b84e36","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f4dfce622a0cfbbc3c04e7ef4a940dff5b84e36"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6896c31d601c6c0066b881af07e1d5a6045af274","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6896c31d601c6c0066b881af07e1d5a6045af274","html_url":"https://github.com/apache/openjpa/commit/6896c31d601c6c0066b881af07e1d5a6045af274","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6896c31d601c6c0066b881af07e1d5a6045af274/comments","author":null,"committer":null,"parents":[{"sha":"d17c70965d359a3c56f1391392c6a7861abfb1fd","url":"https://api.github.com/repos/apache/openjpa/commits/d17c70965d359a3c56f1391392c6a7861abfb1fd","html_url":"https://github.com/apache/openjpa/commit/d17c70965d359a3c56f1391392c6a7861abfb1fd"}]},{"sha":"89fe979f492fbe2c2be57b6d899e2f53f736dafa","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5ZmU5NzlmNDkyZmJlMmMyYmU1N2I2ZDg5OWUyZjUzZjczNmRhZmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:37:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:37:19Z"},"message":"Relax metadata parsing flow\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888475 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c87d0aad57700779c9735aebe99d989030d1710e","url":"https://api.github.com/repos/apache/openjpa/git/trees/c87d0aad57700779c9735aebe99d989030d1710e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89fe979f492fbe2c2be57b6d899e2f53f736dafa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89fe979f492fbe2c2be57b6d899e2f53f736dafa","html_url":"https://github.com/apache/openjpa/commit/89fe979f492fbe2c2be57b6d899e2f53f736dafa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89fe979f492fbe2c2be57b6d899e2f53f736dafa/comments","author":null,"committer":null,"parents":[{"sha":"6896c31d601c6c0066b881af07e1d5a6045af274","url":"https://api.github.com/repos/apache/openjpa/commits/6896c31d601c6c0066b881af07e1d5a6045af274","html_url":"https://github.com/apache/openjpa/commit/6896c31d601c6c0066b881af07e1d5a6045af274"}]},{"sha":"70518a3685fd93cb67e8591f4f48e2545c005bbd","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwNTE4YTM2ODVmZDkzY2I2N2U4NTkxZjRmNDhlMjU0NWMwMDViYmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:38:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:38:20Z"},"message":"Print class loader when metadata processing fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e986f5d92b8a5ec3370c154b36d19644a0d7e75","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e986f5d92b8a5ec3370c154b36d19644a0d7e75"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd","html_url":"https://github.com/apache/openjpa/commit/70518a3685fd93cb67e8591f4f48e2545c005bbd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd/comments","author":null,"committer":null,"parents":[{"sha":"89fe979f492fbe2c2be57b6d899e2f53f736dafa","url":"https://api.github.com/repos/apache/openjpa/commits/89fe979f492fbe2c2be57b6d899e2f53f736dafa","html_url":"https://github.com/apache/openjpa/commit/89fe979f492fbe2c2be57b6d899e2f53f736dafa"}]},{"sha":"c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxZTBiNmJkMWM4YjNiMDk1ZjA0ZTczNzczMWNjZjc4MGRiMGFjM2M=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T16:53:56Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T16:53:56Z"},"message":"OPENJPA-1414: Performance improvements for detach processing. Patch contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888481 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13eb2e690202ebc4add52953678fb58ec60b131a","url":"https://api.github.com/repos/apache/openjpa/git/trees/13eb2e690202ebc4add52953678fb58ec60b131a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","html_url":"https://github.com/apache/openjpa/commit/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c/comments","author":null,"committer":null,"parents":[{"sha":"70518a3685fd93cb67e8591f4f48e2545c005bbd","url":"https://api.github.com/repos/apache/openjpa/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd","html_url":"https://github.com/apache/openjpa/commit/70518a3685fd93cb67e8591f4f48e2545c005bbd"}]},{"sha":"45bc22baa33b082c97cc35a1252822b8fdb0b6bf","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1YmMyMmJhYTMzYjA4MmM5N2NjMzVhMTI1MjgyMmI4ZmRiMGI2YmY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-08T17:54:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-08T17:54:12Z"},"message":"OPENJPA-1348 Embeddable data not persisted when using WriteBehind cache flush operation.  Patch from Fay Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888497 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc35862265172917d84bbfe4d2df213409e545fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc35862265172917d84bbfe4d2df213409e545fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","html_url":"https://github.com/apache/openjpa/commit/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf/comments","author":null,"committer":null,"parents":[{"sha":"c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","url":"https://api.github.com/repos/apache/openjpa/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","html_url":"https://github.com/apache/openjpa/commit/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c"}]},{"sha":"92af878a15349c3463810bec949ecb9725696485","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyYWY4NzhhMTUzNDljMzQ2MzgxMGJlYzk0OWVjYjk3MjU2OTY0ODU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T20:28:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T20:28:00Z"},"message":"Tests run only on Derby because uses database specific DDL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cce5917b2d316ca29bf8a18bd25b95056d86fd24","url":"https://api.github.com/repos/apache/openjpa/git/trees/cce5917b2d316ca29bf8a18bd25b95056d86fd24"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/92af878a15349c3463810bec949ecb9725696485","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/92af878a15349c3463810bec949ecb9725696485","html_url":"https://github.com/apache/openjpa/commit/92af878a15349c3463810bec949ecb9725696485","comments_url":"https://api.github.com/repos/apache/openjpa/commits/92af878a15349c3463810bec949ecb9725696485/comments","author":null,"committer":null,"parents":[{"sha":"45bc22baa33b082c97cc35a1252822b8fdb0b6bf","url":"https://api.github.com/repos/apache/openjpa/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","html_url":"https://github.com/apache/openjpa/commit/45bc22baa33b082c97cc35a1252822b8fdb0b6bf"}]},{"sha":"61dc996dc91fd6b80fc5bc2831ed0c73cc266301","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxZGM5OTZkYzkxZmQ2YjgwZmM1YmMyODMxZWQwYzczY2MyNjYzMDE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-08T21:03:08Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-08T21:03:08Z"},"message":"OPENJPA-1348: remove @AllowFailure from the test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888572 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdc14f8486229922d4ca37550fed8a6cdaf7b76d","url":"https://api.github.com/repos/apache/openjpa/git/trees/bdc14f8486229922d4ca37550fed8a6cdaf7b76d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61dc996dc91fd6b80fc5bc2831ed0c73cc266301","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61dc996dc91fd6b80fc5bc2831ed0c73cc266301","html_url":"https://github.com/apache/openjpa/commit/61dc996dc91fd6b80fc5bc2831ed0c73cc266301","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61dc996dc91fd6b80fc5bc2831ed0c73cc266301/comments","author":null,"committer":null,"parents":[{"sha":"92af878a15349c3463810bec949ecb9725696485","url":"https://api.github.com/repos/apache/openjpa/commits/92af878a15349c3463810bec949ecb9725696485","html_url":"https://github.com/apache/openjpa/commit/92af878a15349c3463810bec949ecb9725696485"}]},{"sha":"658f01ee388a893ff8e3e2dc1b280b2956f7ddb2","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1OGYwMWVlMzg4YTg5M2ZmOGUzZTJkYzFiMjgwYjI5NTZmN2RkYjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-10T00:00:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-10T00:00:07Z"},"message":"OPENJPA-1412,979: Adding Eclipse Plugin with complete Maven/Tycho build script and tests. It is also the first instance of a non-committer contribution\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da0d336bb175fe8205f5d3051f3dd3a0bb59d29c","url":"https://api.github.com/repos/apache/openjpa/git/trees/da0d336bb175fe8205f5d3051f3dd3a0bb59d29c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/658f01ee388a893ff8e3e2dc1b280b2956f7ddb2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/658f01ee388a893ff8e3e2dc1b280b2956f7ddb2","html_url":"https://github.com/apache/openjpa/commit/658f01ee388a893ff8e3e2dc1b280b2956f7ddb2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/658f01ee388a893ff8e3e2dc1b280b2956f7ddb2/comments","author":null,"committer":null,"parents":[{"sha":"61dc996dc91fd6b80fc5bc2831ed0c73cc266301","url":"https://api.github.com/repos/apache/openjpa/commits/61dc996dc91fd6b80fc5bc2831ed0c73cc266301","html_url":"https://github.com/apache/openjpa/commit/61dc996dc91fd6b80fc5bc2831ed0c73cc266301"}]},{"sha":"2578261469a3982a7082566b945c64ca7eab5e0a","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1NzgyNjE0NjlhMzk4MmE3MDgyNTY2Yjk0NWM2NGNhN2VhYjVlMGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-10T00:18:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-10T00:18:20Z"},"message":"Making code compatiable with OpenJPA coding standards\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889031 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70a6cfa812713cd03313708caca36491fa03574d","url":"https://api.github.com/repos/apache/openjpa/git/trees/70a6cfa812713cd03313708caca36491fa03574d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2578261469a3982a7082566b945c64ca7eab5e0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2578261469a3982a7082566b945c64ca7eab5e0a","html_url":"https://github.com/apache/openjpa/commit/2578261469a3982a7082566b945c64ca7eab5e0a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2578261469a3982a7082566b945c64ca7eab5e0a/comments","author":null,"committer":null,"parents":[{"sha":"658f01ee388a893ff8e3e2dc1b280b2956f7ddb2","url":"https://api.github.com/repos/apache/openjpa/commits/658f01ee388a893ff8e3e2dc1b280b2956f7ddb2","html_url":"https://github.com/apache/openjpa/commit/658f01ee388a893ff8e3e2dc1b280b2956f7ddb2"}]},{"sha":"2baa87b0407823c3ea266b78a97adc8cab068fc4","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiYWE4N2IwNDA3ODIzYzNlYTI2NmI3OGE5N2FkYzhjYWIwNjhmYzQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-10T18:45:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-10T18:45:16Z"},"message":"Doc update for connectionRetainMode always\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889360 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ad910d49a27f4696928777dfaa4b763eced492c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ad910d49a27f4696928777dfaa4b763eced492c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2baa87b0407823c3ea266b78a97adc8cab068fc4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2baa87b0407823c3ea266b78a97adc8cab068fc4","html_url":"https://github.com/apache/openjpa/commit/2baa87b0407823c3ea266b78a97adc8cab068fc4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2baa87b0407823c3ea266b78a97adc8cab068fc4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2578261469a3982a7082566b945c64ca7eab5e0a","url":"https://api.github.com/repos/apache/openjpa/commits/2578261469a3982a7082566b945c64ca7eab5e0a","html_url":"https://github.com/apache/openjpa/commit/2578261469a3982a7082566b945c64ca7eab5e0a"}]},{"sha":"77c324246587aa62be9213e91bc11697df8be491","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3YzMyNDI0NjU4N2FhNjJiZTkyMTNlOTFiYzExNjk3ZGY4YmU0OTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-10T22:43:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-10T22:43:45Z"},"message":"OPENJPA-1334: Assign default named cache to PCData \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889449 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f21431d9ed5acbd77675229a5163025dc670211","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f21431d9ed5acbd77675229a5163025dc670211"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/77c324246587aa62be9213e91bc11697df8be491","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/77c324246587aa62be9213e91bc11697df8be491","html_url":"https://github.com/apache/openjpa/commit/77c324246587aa62be9213e91bc11697df8be491","comments_url":"https://api.github.com/repos/apache/openjpa/commits/77c324246587aa62be9213e91bc11697df8be491/comments","author":null,"committer":null,"parents":[{"sha":"2baa87b0407823c3ea266b78a97adc8cab068fc4","url":"https://api.github.com/repos/apache/openjpa/commits/2baa87b0407823c3ea266b78a97adc8cab068fc4","html_url":"https://github.com/apache/openjpa/commit/2baa87b0407823c3ea266b78a97adc8cab068fc4"}]},{"sha":"b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxZWUwNjNhYTQzYTFlMWZiZmQ4MzdlZjgyYTI1YTNlN2VmOTM3YzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T02:26:13Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T02:26:13Z"},"message":"OPENJPA-1425:  Lieralize value if they appear in selection clause for databases that do not support parameters in selection terms.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889490 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ada5e12128b07796286a9edee6b627e6202eebc7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ada5e12128b07796286a9edee6b627e6202eebc7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","html_url":"https://github.com/apache/openjpa/commit/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/comments","author":null,"committer":null,"parents":[{"sha":"77c324246587aa62be9213e91bc11697df8be491","url":"https://api.github.com/repos/apache/openjpa/commits/77c324246587aa62be9213e91bc11697df8be491","html_url":"https://github.com/apache/openjpa/commit/77c324246587aa62be9213e91bc11697df8be491"}]},{"sha":"4515e2f5da657fedb0329c5bc5e48e657e861ebb","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1MTVlMmY1ZGE2NTdmZWRiMDMyOWM1YmM1ZTQ4ZTY1N2U4NjFlYmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T15:09:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T15:09:03Z"},"message":"OPENJPA-1425:  Lieralize value if they appear in selection clause for databases that do not support parameters in selection terms.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889646 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"261c68e8c3a412677d50677ab464f34b08165b3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/261c68e8c3a412677d50677ab464f34b08165b3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4515e2f5da657fedb0329c5bc5e48e657e861ebb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4515e2f5da657fedb0329c5bc5e48e657e861ebb","html_url":"https://github.com/apache/openjpa/commit/4515e2f5da657fedb0329c5bc5e48e657e861ebb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4515e2f5da657fedb0329c5bc5e48e657e861ebb/comments","author":null,"committer":null,"parents":[{"sha":"b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","url":"https://api.github.com/repos/apache/openjpa/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","html_url":"https://github.com/apache/openjpa/commit/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4"}]},{"sha":"82aece97114ff940964db9bca34b62c9bd5279c7","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyYWVjZTk3MTE0ZmY5NDA5NjRkYjliY2EzNGI2MmM5YmQ1Mjc5Yzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-11T19:08:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-11T19:08:01Z"},"message":"OPENJPA-1326:\nSet schema names for Sybase when creating new indexes and primary keys.\nSubmitted By : BJ Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f45bd8752bccfbcf59cbad2f41449fa7a95134c","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f45bd8752bccfbcf59cbad2f41449fa7a95134c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82aece97114ff940964db9bca34b62c9bd5279c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82aece97114ff940964db9bca34b62c9bd5279c7","html_url":"https://github.com/apache/openjpa/commit/82aece97114ff940964db9bca34b62c9bd5279c7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82aece97114ff940964db9bca34b62c9bd5279c7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4515e2f5da657fedb0329c5bc5e48e657e861ebb","url":"https://api.github.com/repos/apache/openjpa/commits/4515e2f5da657fedb0329c5bc5e48e657e861ebb","html_url":"https://github.com/apache/openjpa/commit/4515e2f5da657fedb0329c5bc5e48e657e861ebb"}]},{"sha":"e5ba74a9fcefaacdb963405c65910f9272c6829c","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1YmE3NGE5ZmNlZmFhY2RiOTYzNDA1YzY1OTEwZjkyNzJjNjgyOWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:27:05Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:27:05Z"},"message":"OPENJPA-1424: Fix. Do not lookup extraFieldData with another mapping's field\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889798 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"45bd3dfe91201b95546ef5aa817593ade51143c8","url":"https://api.github.com/repos/apache/openjpa/git/trees/45bd3dfe91201b95546ef5aa817593ade51143c8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5ba74a9fcefaacdb963405c65910f9272c6829c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5ba74a9fcefaacdb963405c65910f9272c6829c","html_url":"https://github.com/apache/openjpa/commit/e5ba74a9fcefaacdb963405c65910f9272c6829c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5ba74a9fcefaacdb963405c65910f9272c6829c/comments","author":null,"committer":null,"parents":[{"sha":"82aece97114ff940964db9bca34b62c9bd5279c7","url":"https://api.github.com/repos/apache/openjpa/commits/82aece97114ff940964db9bca34b62c9bd5279c7","html_url":"https://github.com/apache/openjpa/commit/82aece97114ff940964db9bca34b62c9bd5279c7"}]},{"sha":"43c55d05391c97160cb6e963742b19c62ba1a3b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzYzU1ZDA1MzkxYzk3MTYwY2I2ZTk2Mzc0MmIxOWM2MmJhMWEzYjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:28:57Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:28:57Z"},"message":"OPENJPA-1424: Fix. Do not lookup extraFieldData with another mapping's field\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889799 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5dda47bf29bb6282aac011de1b93a5104e4a898","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5dda47bf29bb6282aac011de1b93a5104e4a898"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/43c55d05391c97160cb6e963742b19c62ba1a3b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/43c55d05391c97160cb6e963742b19c62ba1a3b3","html_url":"https://github.com/apache/openjpa/commit/43c55d05391c97160cb6e963742b19c62ba1a3b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/43c55d05391c97160cb6e963742b19c62ba1a3b3/comments","author":null,"committer":null,"parents":[{"sha":"e5ba74a9fcefaacdb963405c65910f9272c6829c","url":"https://api.github.com/repos/apache/openjpa/commits/e5ba74a9fcefaacdb963405c65910f9272c6829c","html_url":"https://github.com/apache/openjpa/commit/e5ba74a9fcefaacdb963405c65910f9272c6829c"}]},{"sha":"4715cc737b411f1f5e8604251c74f8570f1c645a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3MTVjYzczN2I0MTFmMWY1ZTg2MDQyNTFjNzRmODU3MGYxYzY0NWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:32:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:32:16Z"},"message":"OPENJPA-1050: Use generic types whenever possible. Replace ordered map with native implementation wrapper.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889800 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52be2ed65a9ff12f11fe10b5c0ae9b750c18c450","url":"https://api.github.com/repos/apache/openjpa/git/trees/52be2ed65a9ff12f11fe10b5c0ae9b750c18c450"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4715cc737b411f1f5e8604251c74f8570f1c645a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4715cc737b411f1f5e8604251c74f8570f1c645a","html_url":"https://github.com/apache/openjpa/commit/4715cc737b411f1f5e8604251c74f8570f1c645a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4715cc737b411f1f5e8604251c74f8570f1c645a/comments","author":null,"committer":null,"parents":[{"sha":"43c55d05391c97160cb6e963742b19c62ba1a3b3","url":"https://api.github.com/repos/apache/openjpa/commits/43c55d05391c97160cb6e963742b19c62ba1a3b3","html_url":"https://github.com/apache/openjpa/commit/43c55d05391c97160cb6e963742b19c62ba1a3b3"}]},{"sha":"b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxMTllMmI5NTk0ZWFhNmU0Y2E5ZjdjZWFmODVjZDQzZjZlYWY2YTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:33:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:33:32Z"},"message":"OPENJPA-1050: Use generic types whenever possible. Replace ordered map with native implementation wrapper. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889801 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ad5203bedaa965d76b00201d4ee6453cb25cb63","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ad5203bedaa965d76b00201d4ee6453cb25cb63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0","html_url":"https://github.com/apache/openjpa/commit/b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0/comments","author":null,"committer":null,"parents":[{"sha":"4715cc737b411f1f5e8604251c74f8570f1c645a","url":"https://api.github.com/repos/apache/openjpa/commits/4715cc737b411f1f5e8604251c74f8570f1c645a","html_url":"https://github.com/apache/openjpa/commit/4715cc737b411f1f5e8604251c74f8570f1c645a"}]},{"sha":"60cae2ff515e80a0eca16e72997f2a86687e82a2","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwY2FlMmZmNTE1ZTgwYTBlY2ExNmU3Mjk5N2YyYTg2Njg3ZTgyYTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-11T21:19:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-11T21:19:55Z"},"message":"OPENJPA-1103 Upgrade to 1.0-SNAPSHOT versions of the jpa2 and bv spec apis and remove the early access disclaimer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889818 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31b5e570de95b382f7155264b231e7874436e7d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/31b5e570de95b382f7155264b231e7874436e7d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/60cae2ff515e80a0eca16e72997f2a86687e82a2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/60cae2ff515e80a0eca16e72997f2a86687e82a2","html_url":"https://github.com/apache/openjpa/commit/60cae2ff515e80a0eca16e72997f2a86687e82a2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/60cae2ff515e80a0eca16e72997f2a86687e82a2/comments","author":null,"committer":null,"parents":[{"sha":"b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0","url":"https://api.github.com/repos/apache/openjpa/commits/b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0","html_url":"https://github.com/apache/openjpa/commit/b119e2b9594eaa6e4ca9f7ceaf85cd43f6eaf6a0"}]},{"sha":"9dc10ef15e55486cf2977b283623de4ad799f7f3","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkYzEwZWYxNWU1NTQ4NmNmMjk3N2IyODM2MjNkZTRhZDc5OWY3ZjM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-11T21:35:06Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-11T21:35:06Z"},"message":"OPENJPA-1103 removed the early access disclaimer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889824 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6053c63bb4b577179b67a9143a647a83fb32c8e","url":"https://api.github.com/repos/apache/openjpa/git/trees/f6053c63bb4b577179b67a9143a647a83fb32c8e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9dc10ef15e55486cf2977b283623de4ad799f7f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9dc10ef15e55486cf2977b283623de4ad799f7f3","html_url":"https://github.com/apache/openjpa/commit/9dc10ef15e55486cf2977b283623de4ad799f7f3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9dc10ef15e55486cf2977b283623de4ad799f7f3/comments","author":null,"committer":null,"parents":[{"sha":"60cae2ff515e80a0eca16e72997f2a86687e82a2","url":"https://api.github.com/repos/apache/openjpa/commits/60cae2ff515e80a0eca16e72997f2a86687e82a2","html_url":"https://github.com/apache/openjpa/commit/60cae2ff515e80a0eca16e72997f2a86687e82a2"}]},{"sha":"6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjZWUwOWM4YzlmZjE3Y2UzYjk5N2Y4MTE2ZTE4NmE5Y2E2NGQ0ZmI=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-12T16:32:02Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-12T16:32:02Z"},"message":"OPENJPA-1248: User manual improvements related to LOB streaming.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889946 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2caf860eedf5960def762a542a3bd9ff3ab7ed31","url":"https://api.github.com/repos/apache/openjpa/git/trees/2caf860eedf5960def762a542a3bd9ff3ab7ed31"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","html_url":"https://github.com/apache/openjpa/commit/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb/comments","author":null,"committer":null,"parents":[{"sha":"9dc10ef15e55486cf2977b283623de4ad799f7f3","url":"https://api.github.com/repos/apache/openjpa/commits/9dc10ef15e55486cf2977b283623de4ad799f7f3","html_url":"https://github.com/apache/openjpa/commit/9dc10ef15e55486cf2977b283623de4ad799f7f3"}]},{"sha":"3067245dac166500fd0cc15c445f222334afba27","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwNjcyNDVkYWMxNjY1MDBmZDBjYzE1YzQ0NWYyMjIzMzRhZmJhMjc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-14T21:31:31Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-14T21:31:31Z"},"message":"OPENJPA-1224: Updating DBDictionaries to support setting precision on a BigDecimal column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@890486 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f9bca93ef7fb21c5008f6967c15eb969ad3aaf8e","url":"https://api.github.com/repos/apache/openjpa/git/trees/f9bca93ef7fb21c5008f6967c15eb969ad3aaf8e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3067245dac166500fd0cc15c445f222334afba27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3067245dac166500fd0cc15c445f222334afba27","html_url":"https://github.com/apache/openjpa/commit/3067245dac166500fd0cc15c445f222334afba27","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3067245dac166500fd0cc15c445f222334afba27/comments","author":null,"committer":null,"parents":[{"sha":"6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","url":"https://api.github.com/repos/apache/openjpa/commits/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","html_url":"https://github.com/apache/openjpa/commit/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb"}]},{"sha":"de8d125575ea342d71e11671701e7e25d7353353","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlOGQxMjU1NzVlYTM0MmQ3MWUxMTY3MTcwMWU3ZTI1ZDczNTMzNTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-14T23:13:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-14T23:13:35Z"},"message":"OPENJPA-1412: OpenJPA Eclipse Enhancer plugin. Add ui support, begin non-captive lib support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@890545 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f48d678c1cd298588cc967dd5ff5ef6556239d74","url":"https://api.github.com/repos/apache/openjpa/git/trees/f48d678c1cd298588cc967dd5ff5ef6556239d74"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de8d125575ea342d71e11671701e7e25d7353353","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de8d125575ea342d71e11671701e7e25d7353353","html_url":"https://github.com/apache/openjpa/commit/de8d125575ea342d71e11671701e7e25d7353353","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de8d125575ea342d71e11671701e7e25d7353353/comments","author":null,"committer":null,"parents":[{"sha":"3067245dac166500fd0cc15c445f222334afba27","url":"https://api.github.com/repos/apache/openjpa/commits/3067245dac166500fd0cc15c445f222334afba27","html_url":"https://github.com/apache/openjpa/commit/3067245dac166500fd0cc15c445f222334afba27"}]},{"sha":"fd5c79aabca0045a65cf93735df8b3fa0a094423","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkNWM3OWFhYmNhMDA0NWE2NWNmOTM3MzVkZjhiM2ZhMGEwOTQ0MjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-15T16:15:21Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-15T16:15:21Z"},"message":"OPENJPA-1050: Restore existing method signature but deprecate them.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@890857 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e3ed273eef1e278dfceccc15ce8ce511e718eb03","url":"https://api.github.com/repos/apache/openjpa/git/trees/e3ed273eef1e278dfceccc15ce8ce511e718eb03"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423","html_url":"https://github.com/apache/openjpa/commit/fd5c79aabca0045a65cf93735df8b3fa0a094423","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423/comments","author":null,"committer":null,"parents":[{"sha":"de8d125575ea342d71e11671701e7e25d7353353","url":"https://api.github.com/repos/apache/openjpa/commits/de8d125575ea342d71e11671701e7e25d7353353","html_url":"https://github.com/apache/openjpa/commit/de8d125575ea342d71e11671701e7e25d7353353"}]},{"sha":"f5c216eb19d280cc2c886e606ea0b337d5cfaff7","node_id":"MDY6Q29tbWl0MjA2MzY0OmY1YzIxNmViMTlkMjgwY2MyYzg4NmU2MDZlYTBiMzM3ZDVjZmFmZjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-15T16:16:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-15T16:16:48Z"},"message":"OPENJPA-1050: Restore existing method signature but deprecate them.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@890859 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e59cfdfec18df1af27b3f5418464277b2ef89fda","url":"https://api.github.com/repos/apache/openjpa/git/trees/e59cfdfec18df1af27b3f5418464277b2ef89fda"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f5c216eb19d280cc2c886e606ea0b337d5cfaff7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f5c216eb19d280cc2c886e606ea0b337d5cfaff7","html_url":"https://github.com/apache/openjpa/commit/f5c216eb19d280cc2c886e606ea0b337d5cfaff7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f5c216eb19d280cc2c886e606ea0b337d5cfaff7/comments","author":null,"committer":null,"parents":[{"sha":"fd5c79aabca0045a65cf93735df8b3fa0a094423","url":"https://api.github.com/repos/apache/openjpa/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423","html_url":"https://github.com/apache/openjpa/commit/fd5c79aabca0045a65cf93735df8b3fa0a094423"}]},{"sha":"8dff01769495aa4fd94c83b58f144dfdebdfc581","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkZmYwMTc2OTQ5NWFhNGZkOTRjODNiNThmMTQ0ZGZkZWJkZmM1ODE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-15T22:26:11Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-15T22:26:11Z"},"message":"OPENJPA-1431: fix @Temporal annotation when used in conjunction with @Column and @ElementCollection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891035 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ddcee9b762ec5d53aa9dd2433a5c916a8a3d77b9","url":"https://api.github.com/repos/apache/openjpa/git/trees/ddcee9b762ec5d53aa9dd2433a5c916a8a3d77b9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8dff01769495aa4fd94c83b58f144dfdebdfc581","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8dff01769495aa4fd94c83b58f144dfdebdfc581","html_url":"https://github.com/apache/openjpa/commit/8dff01769495aa4fd94c83b58f144dfdebdfc581","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8dff01769495aa4fd94c83b58f144dfdebdfc581/comments","author":null,"committer":null,"parents":[{"sha":"f5c216eb19d280cc2c886e606ea0b337d5cfaff7","url":"https://api.github.com/repos/apache/openjpa/commits/f5c216eb19d280cc2c886e606ea0b337d5cfaff7","html_url":"https://github.com/apache/openjpa/commit/f5c216eb19d280cc2c886e606ea0b337d5cfaff7"}]},{"sha":"40f017a2e99211101f25fe3d6faafdef38d780a8","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwZjAxN2EyZTk5MjExMTAxZjI1ZmUzZDZmYWFmZGVmMzhkNzgwYTg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-16T04:17:43Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-16T04:17:43Z"},"message":"OPENJPA-714:\nCheck l1 cache when looking for managed instances when cascading.\nSubmitted By: Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891120 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3542e09f1a71ac04fb5d139b8da68df19531ae33","url":"https://api.github.com/repos/apache/openjpa/git/trees/3542e09f1a71ac04fb5d139b8da68df19531ae33"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/40f017a2e99211101f25fe3d6faafdef38d780a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/40f017a2e99211101f25fe3d6faafdef38d780a8","html_url":"https://github.com/apache/openjpa/commit/40f017a2e99211101f25fe3d6faafdef38d780a8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/40f017a2e99211101f25fe3d6faafdef38d780a8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8dff01769495aa4fd94c83b58f144dfdebdfc581","url":"https://api.github.com/repos/apache/openjpa/commits/8dff01769495aa4fd94c83b58f144dfdebdfc581","html_url":"https://github.com/apache/openjpa/commit/8dff01769495aa4fd94c83b58f144dfdebdfc581"}]},{"sha":"8410bc88c6fca3587170b61ad9890c1717e81b1e","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0MTBiYzg4YzZmY2EzNTg3MTcwYjYxYWQ5ODkwYzE3MTdlODFiMWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-16T20:33:31Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-16T20:33:31Z"},"message":"OPENJPA-1435: remove null element from the coll\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891417 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb364225f766bfb0eec660140d12fc64c11bb407","url":"https://api.github.com/repos/apache/openjpa/git/trees/cb364225f766bfb0eec660140d12fc64c11bb407"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8410bc88c6fca3587170b61ad9890c1717e81b1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8410bc88c6fca3587170b61ad9890c1717e81b1e","html_url":"https://github.com/apache/openjpa/commit/8410bc88c6fca3587170b61ad9890c1717e81b1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8410bc88c6fca3587170b61ad9890c1717e81b1e/comments","author":null,"committer":null,"parents":[{"sha":"40f017a2e99211101f25fe3d6faafdef38d780a8","url":"https://api.github.com/repos/apache/openjpa/commits/40f017a2e99211101f25fe3d6faafdef38d780a8","html_url":"https://github.com/apache/openjpa/commit/40f017a2e99211101f25fe3d6faafdef38d780a8"}]},{"sha":"a05e0073947dd98b7f62c623bb86c6c05ac10308","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwNWUwMDczOTQ3ZGQ5OGI3ZjYyYzYyM2JiODZjNmMwNWFjMTAzMDg=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-12-16T23:02:25Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-12-16T23:02:25Z"},"message":"OpenJPA-1258: Applied Amy Yang's patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891465 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5b7f4e89b0cd574c68a9b1b99acd9d1b0c521a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5b7f4e89b0cd574c68a9b1b99acd9d1b0c521a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a05e0073947dd98b7f62c623bb86c6c05ac10308","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a05e0073947dd98b7f62c623bb86c6c05ac10308","html_url":"https://github.com/apache/openjpa/commit/a05e0073947dd98b7f62c623bb86c6c05ac10308","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a05e0073947dd98b7f62c623bb86c6c05ac10308/comments","author":null,"committer":null,"parents":[{"sha":"8410bc88c6fca3587170b61ad9890c1717e81b1e","url":"https://api.github.com/repos/apache/openjpa/commits/8410bc88c6fca3587170b61ad9890c1717e81b1e","html_url":"https://github.com/apache/openjpa/commit/8410bc88c6fca3587170b61ad9890c1717e81b1e"}]},{"sha":"9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","node_id":"MDY6Q29tbWl0MjA2MzY0OjllOGIwZGVkMGI1YzIwNGYzZGUzZGYzYWJiOGY3OWI0NGQ5Zjc0MjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-16T23:31:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-16T23:31:44Z"},"message":"OPENJPA-1401 Inheritance using Join Strategy may fail in cross join JPQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c68fd3d55a8702cb0a9b866145efa5cdfd382bab","url":"https://api.github.com/repos/apache/openjpa/git/trees/c68fd3d55a8702cb0a9b866145efa5cdfd382bab"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","html_url":"https://github.com/apache/openjpa/commit/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/comments","author":null,"committer":null,"parents":[{"sha":"a05e0073947dd98b7f62c623bb86c6c05ac10308","url":"https://api.github.com/repos/apache/openjpa/commits/a05e0073947dd98b7f62c623bb86c6c05ac10308","html_url":"https://github.com/apache/openjpa/commit/a05e0073947dd98b7f62c623bb86c6c05ac10308"}]},{"sha":"5d9f08e72877b208dad9135afec8b630ce41f81d","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkOWYwOGU3Mjg3N2IyMDhkYWQ5MTM1YWZlYzhiNjMwY2U0MWY4MWQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-18T23:24:23Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-18T23:24:23Z"},"message":"OPENJPA-1432: preserve Compatibility flags set in compliance with the Specification.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892397 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bc985b4a6f9d6117af506e62c0d6676ab27ed6ac","url":"https://api.github.com/repos/apache/openjpa/git/trees/bc985b4a6f9d6117af506e62c0d6676ab27ed6ac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d9f08e72877b208dad9135afec8b630ce41f81d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d9f08e72877b208dad9135afec8b630ce41f81d","html_url":"https://github.com/apache/openjpa/commit/5d9f08e72877b208dad9135afec8b630ce41f81d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d9f08e72877b208dad9135afec8b630ce41f81d/comments","author":null,"committer":null,"parents":[{"sha":"9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","url":"https://api.github.com/repos/apache/openjpa/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","html_url":"https://github.com/apache/openjpa/commit/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421"}]},{"sha":"d189eac9dd6dd756643c3edce6932c56c87fb9a4","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxODllYWM5ZGQ2ZGQ3NTY2NDNjM2VkY2U2OTMyYzU2Yzg3ZmI5YTQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-19T04:50:24Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-19T04:50:24Z"},"message":"OPENJPA-1438: fix wherePrimaryKey for entity using derived identity\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892430 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"48286eb1c08d3989bff82ee029970878e79d05d6","url":"https://api.github.com/repos/apache/openjpa/git/trees/48286eb1c08d3989bff82ee029970878e79d05d6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4","html_url":"https://github.com/apache/openjpa/commit/d189eac9dd6dd756643c3edce6932c56c87fb9a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4/comments","author":null,"committer":null,"parents":[{"sha":"5d9f08e72877b208dad9135afec8b630ce41f81d","url":"https://api.github.com/repos/apache/openjpa/commits/5d9f08e72877b208dad9135afec8b630ce41f81d","html_url":"https://github.com/apache/openjpa/commit/5d9f08e72877b208dad9135afec8b630ce41f81d"}]},{"sha":"d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4ZWY1YzE3OTIxYTVlNDEwY2ZiMWZlN2JmZDE2NzBkMWYzYjUyMjk=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-21T16:44:27Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-21T16:44:27Z"},"message":"OPENJPA-993: PersistenceProductDerivation.getAnchorsInxxx(..) should only return PUs that belong to OpenJPA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892877 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b15e47cc13bce417c3d6cfc6ba3b66deb78c6c96","url":"https://api.github.com/repos/apache/openjpa/git/trees/b15e47cc13bce417c3d6cfc6ba3b66deb78c6c96"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229","html_url":"https://github.com/apache/openjpa/commit/d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229/comments","author":null,"committer":null,"parents":[{"sha":"d189eac9dd6dd756643c3edce6932c56c87fb9a4","url":"https://api.github.com/repos/apache/openjpa/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4","html_url":"https://github.com/apache/openjpa/commit/d189eac9dd6dd756643c3edce6932c56c87fb9a4"}]},{"sha":"d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0OTFhOWNiZWQ5YmVhZjdmODM4ZTY3ZTVlY2Q3YWE4ZDEwZDU4ZTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-21T17:13:23Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-21T17:13:23Z"},"message":"OPENJPA-1439: Cover for InputStream/Reader type fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892884 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"567416aedc098755bb17d879853646f9637009c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/567416aedc098755bb17d879853646f9637009c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5","html_url":"https://github.com/apache/openjpa/commit/d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5/comments","author":null,"committer":null,"parents":[{"sha":"d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229","url":"https://api.github.com/repos/apache/openjpa/commits/d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229","html_url":"https://github.com/apache/openjpa/commit/d8ef5c17921a5e410cfb1fe7bfd1670d1f3b5229"}]},{"sha":"14a02417927de84ff33c127459d3c5375eedf093","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0YTAyNDE3OTI3ZGU4NGZmMzNjMTI3NDU5ZDNjNTM3NWVlZGYwOTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-21T19:55:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-21T19:55:58Z"},"message":"OPENJPA-1440: Allow COUNT(*) syntax when DBDictionary.useWildCardForCount=true\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892947 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dc1bc5e7c9255e6641becbf486f01b1f1b0c5053","url":"https://api.github.com/repos/apache/openjpa/git/trees/dc1bc5e7c9255e6641becbf486f01b1f1b0c5053"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/14a02417927de84ff33c127459d3c5375eedf093","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/14a02417927de84ff33c127459d3c5375eedf093","html_url":"https://github.com/apache/openjpa/commit/14a02417927de84ff33c127459d3c5375eedf093","comments_url":"https://api.github.com/repos/apache/openjpa/commits/14a02417927de84ff33c127459d3c5375eedf093/comments","author":null,"committer":null,"parents":[{"sha":"d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5","url":"https://api.github.com/repos/apache/openjpa/commits/d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5","html_url":"https://github.com/apache/openjpa/commit/d491a9cbed9beaf7f838e67e5ecd7aa8d10d58e5"}]},{"sha":"ac6dab1d076a47319c82aac23a2ef5413fd1ecbe","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjNmRhYjFkMDc2YTQ3MzE5YzgyYWFjMjNhMmVmNTQxM2ZkMWVjYmU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-21T19:57:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-21T19:57:11Z"},"message":"OPENJPA-1440: Allow COUNT(*) syntax when DBDictionary.useWildCardForCount=true\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892949 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"adc75935f4519befb2da53d64703ce3128ad5d7e","url":"https://api.github.com/repos/apache/openjpa/git/trees/adc75935f4519befb2da53d64703ce3128ad5d7e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac6dab1d076a47319c82aac23a2ef5413fd1ecbe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac6dab1d076a47319c82aac23a2ef5413fd1ecbe","html_url":"https://github.com/apache/openjpa/commit/ac6dab1d076a47319c82aac23a2ef5413fd1ecbe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac6dab1d076a47319c82aac23a2ef5413fd1ecbe/comments","author":null,"committer":null,"parents":[{"sha":"14a02417927de84ff33c127459d3c5375eedf093","url":"https://api.github.com/repos/apache/openjpa/commits/14a02417927de84ff33c127459d3c5375eedf093","html_url":"https://github.com/apache/openjpa/commit/14a02417927de84ff33c127459d3c5375eedf093"}]},{"sha":"35377aace92dfd5554b0e795e8178f93f1878d3a","node_id":"MDY6Q29tbWl0MjA2MzY0OjM1Mzc3YWFjZTkyZGZkNTU1NGIwZTc5NWU4MTc4ZjkzZjE4NzhkM2E=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-22T14:27:19Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-22T14:27:19Z"},"message":"OPENJPA-1441: Set pcVersionInit FieldMetaData to transient in PCEnhancer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893181 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"253e83c90c484667d042eac450c120bec405c31b","url":"https://api.github.com/repos/apache/openjpa/git/trees/253e83c90c484667d042eac450c120bec405c31b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/35377aace92dfd5554b0e795e8178f93f1878d3a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/35377aace92dfd5554b0e795e8178f93f1878d3a","html_url":"https://github.com/apache/openjpa/commit/35377aace92dfd5554b0e795e8178f93f1878d3a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/35377aace92dfd5554b0e795e8178f93f1878d3a/comments","author":null,"committer":null,"parents":[{"sha":"ac6dab1d076a47319c82aac23a2ef5413fd1ecbe","url":"https://api.github.com/repos/apache/openjpa/commits/ac6dab1d076a47319c82aac23a2ef5413fd1ecbe","html_url":"https://github.com/apache/openjpa/commit/ac6dab1d076a47319c82aac23a2ef5413fd1ecbe"}]},{"sha":"781654af6044d7c3854d2e9d4ace73999081ba9d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4MTY1NGFmNjA0NGQ3YzM4NTRkMmU5ZDRhY2U3Mzk5OTA4MWJhOWQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-22T16:28:09Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-22T16:28:09Z"},"message":"OPENJPA-1224: Backing out DB2 and Derby related changes to investigate in a seperate JIRA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893220 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bebe6f9e340204d01247150a87b0330b43c86cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bebe6f9e340204d01247150a87b0330b43c86cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/781654af6044d7c3854d2e9d4ace73999081ba9d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/781654af6044d7c3854d2e9d4ace73999081ba9d","html_url":"https://github.com/apache/openjpa/commit/781654af6044d7c3854d2e9d4ace73999081ba9d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/781654af6044d7c3854d2e9d4ace73999081ba9d/comments","author":null,"committer":null,"parents":[{"sha":"35377aace92dfd5554b0e795e8178f93f1878d3a","url":"https://api.github.com/repos/apache/openjpa/commits/35377aace92dfd5554b0e795e8178f93f1878d3a","html_url":"https://github.com/apache/openjpa/commit/35377aace92dfd5554b0e795e8178f93f1878d3a"}]},{"sha":"91d46a845324e03aeeea27b819dda5386846e013","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxZDQ2YTg0NTMyNGUwM2FlZWVhMjdiODE5ZGRhNTM4Njg0NmUwMTM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2009-12-23T04:10:05Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2009-12-23T04:10:05Z"},"message":"OPENJPA-1443.  First couple of testcases that should get out of the \"exclude\" list (with a few minor updates).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893400 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"607c39df09ef85b7777adc2395b9d78428580c42","url":"https://api.github.com/repos/apache/openjpa/git/trees/607c39df09ef85b7777adc2395b9d78428580c42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/91d46a845324e03aeeea27b819dda5386846e013","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/91d46a845324e03aeeea27b819dda5386846e013","html_url":"https://github.com/apache/openjpa/commit/91d46a845324e03aeeea27b819dda5386846e013","comments_url":"https://api.github.com/repos/apache/openjpa/commits/91d46a845324e03aeeea27b819dda5386846e013/comments","author":null,"committer":null,"parents":[{"sha":"781654af6044d7c3854d2e9d4ace73999081ba9d","url":"https://api.github.com/repos/apache/openjpa/commits/781654af6044d7c3854d2e9d4ace73999081ba9d","html_url":"https://github.com/apache/openjpa/commit/781654af6044d7c3854d2e9d4ace73999081ba9d"}]},{"sha":"3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkZWU0MThkMzZjN2FhMWMyMTdjMzc3OWVjNzgxM2VlOWY5ZTg3YWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T07:57:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T07:57:31Z"},"message":"OPENJPA-1444: Use special result list for distinct query. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893420 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb4e3c04841594ea49a755be1437c2b803442cf3","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb4e3c04841594ea49a755be1437c2b803442cf3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","html_url":"https://github.com/apache/openjpa/commit/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/comments","author":null,"committer":null,"parents":[{"sha":"91d46a845324e03aeeea27b819dda5386846e013","url":"https://api.github.com/repos/apache/openjpa/commits/91d46a845324e03aeeea27b819dda5386846e013","html_url":"https://github.com/apache/openjpa/commit/91d46a845324e03aeeea27b819dda5386846e013"}]},{"sha":"29e919f2ccea6667a47212f1f333fe78a8b43fc0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI5ZTkxOWYyY2NlYTY2NjdhNDcyMTJmMWYzMzNmZTc4YThiNDNmYzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T09:33:28Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T09:33:28Z"},"message":"OPENJPA-1444:  distinct query \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893447 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea0d77be4231e6cdeed6934fe16de2a08c34c49f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ea0d77be4231e6cdeed6934fe16de2a08c34c49f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0","html_url":"https://github.com/apache/openjpa/commit/29e919f2ccea6667a47212f1f333fe78a8b43fc0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0/comments","author":null,"committer":null,"parents":[{"sha":"3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","url":"https://api.github.com/repos/apache/openjpa/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","html_url":"https://github.com/apache/openjpa/commit/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae"}]},{"sha":"df5a403700ac8f070408bf86fdebeedbf209fea8","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmNWE0MDM3MDBhYzhmMDcwNDA4YmY4NmZkZWJlZWRiZjIwOWZlYTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T09:35:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T09:35:07Z"},"message":"OPENJPA-1444: distinct query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893448 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b226c3b93182d155b58fa5a016009dcd11c9747d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b226c3b93182d155b58fa5a016009dcd11c9747d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df5a403700ac8f070408bf86fdebeedbf209fea8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df5a403700ac8f070408bf86fdebeedbf209fea8","html_url":"https://github.com/apache/openjpa/commit/df5a403700ac8f070408bf86fdebeedbf209fea8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df5a403700ac8f070408bf86fdebeedbf209fea8/comments","author":null,"committer":null,"parents":[{"sha":"29e919f2ccea6667a47212f1f333fe78a8b43fc0","url":"https://api.github.com/repos/apache/openjpa/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0","html_url":"https://github.com/apache/openjpa/commit/29e919f2ccea6667a47212f1f333fe78a8b43fc0"}]},{"sha":"fded22b2e04b8c2482fe257226c15a94bd8f23be","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkZWQyMmIyZTA0YjhjMjQ4MmZlMjU3MjI2YzE1YTk0YmQ4ZjIzYmU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T13:06:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T13:06:03Z"},"message":"OPENJPA-1445: Support enums as External values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b75c246aa705fc1c2d1ec06c9cc3737bd5c14516","url":"https://api.github.com/repos/apache/openjpa/git/trees/b75c246aa705fc1c2d1ec06c9cc3737bd5c14516"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be","html_url":"https://github.com/apache/openjpa/commit/fded22b2e04b8c2482fe257226c15a94bd8f23be","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be/comments","author":null,"committer":null,"parents":[{"sha":"df5a403700ac8f070408bf86fdebeedbf209fea8","url":"https://api.github.com/repos/apache/openjpa/commits/df5a403700ac8f070408bf86fdebeedbf209fea8","html_url":"https://github.com/apache/openjpa/commit/df5a403700ac8f070408bf86fdebeedbf209fea8"}]},{"sha":"775c627b8038f03a86bb1a0bd1cd03e3caf07070","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3NWM2MjdiODAzOGYwM2E4NmJiMWEwYmQxY2QwM2UzY2FmMDcwNzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T13:07:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T13:07:33Z"},"message":"OPENJPA-1445: Support enums as External values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893504 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09718bcd7c57ae0bb394c1ab02f0b0395c577bed","url":"https://api.github.com/repos/apache/openjpa/git/trees/09718bcd7c57ae0bb394c1ab02f0b0395c577bed"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/775c627b8038f03a86bb1a0bd1cd03e3caf07070","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/775c627b8038f03a86bb1a0bd1cd03e3caf07070","html_url":"https://github.com/apache/openjpa/commit/775c627b8038f03a86bb1a0bd1cd03e3caf07070","comments_url":"https://api.github.com/repos/apache/openjpa/commits/775c627b8038f03a86bb1a0bd1cd03e3caf07070/comments","author":null,"committer":null,"parents":[{"sha":"fded22b2e04b8c2482fe257226c15a94bd8f23be","url":"https://api.github.com/repos/apache/openjpa/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be","html_url":"https://github.com/apache/openjpa/commit/fded22b2e04b8c2482fe257226c15a94bd8f23be"}]},{"sha":"a0e001e40ad600372f16d5708f580fc101fec3c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZTAwMWU0MGFkNjAwMzcyZjE2ZDU3MDhmNTgwZmMxMDFmZWMzYzM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-23T22:33:57Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-23T22:33:57Z"},"message":"OPENJPA-1442 JPA2 java.sql.Date, java.math.BigDecimal, or java.math.BigInteger types as derived primary keys are not Enhanced correctly \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893642 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01598895d0a7086da2b11a27b958e6b694a62f02","url":"https://api.github.com/repos/apache/openjpa/git/trees/01598895d0a7086da2b11a27b958e6b694a62f02"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0e001e40ad600372f16d5708f580fc101fec3c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0e001e40ad600372f16d5708f580fc101fec3c3","html_url":"https://github.com/apache/openjpa/commit/a0e001e40ad600372f16d5708f580fc101fec3c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0e001e40ad600372f16d5708f580fc101fec3c3/comments","author":null,"committer":null,"parents":[{"sha":"775c627b8038f03a86bb1a0bd1cd03e3caf07070","url":"https://api.github.com/repos/apache/openjpa/commits/775c627b8038f03a86bb1a0bd1cd03e3caf07070","html_url":"https://github.com/apache/openjpa/commit/775c627b8038f03a86bb1a0bd1cd03e3caf07070"}]},{"sha":"5607a959abde3e078e095c47524487f7e3c69891","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2MDdhOTU5YWJkZTNlMDc4ZTA5NWM0NzUyNDQ4N2Y3ZTNjNjk4OTE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-24T18:04:17Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-24T18:04:17Z"},"message":"OPENJPA-1442 JPA2 java.sql.Date, java.math.BigDecimal, or java.math.BigInteger types as derived primary keys are not Enhanced correctly\nFix testcase to avoid inserting duplicate keys.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893794 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a948c50b238f509e2e51251a3a673028435055f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a948c50b238f509e2e51251a3a673028435055f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5607a959abde3e078e095c47524487f7e3c69891","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5607a959abde3e078e095c47524487f7e3c69891","html_url":"https://github.com/apache/openjpa/commit/5607a959abde3e078e095c47524487f7e3c69891","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5607a959abde3e078e095c47524487f7e3c69891/comments","author":null,"committer":null,"parents":[{"sha":"a0e001e40ad600372f16d5708f580fc101fec3c3","url":"https://api.github.com/repos/apache/openjpa/commits/a0e001e40ad600372f16d5708f580fc101fec3c3","html_url":"https://github.com/apache/openjpa/commit/a0e001e40ad600372f16d5708f580fc101fec3c3"}]},{"sha":"2274f9c21f0619a9ae9d8abbc62f274c002f37bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyNzRmOWMyMWYwNjE5YTlhZTlkOGFiYmM2MmYyNzRjMDAyZjM3YmM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-25T19:12:35Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-25T19:12:35Z"},"message":"Fix test cases adapting to Geronimo Persistence class single/multiple providers behaviors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893878 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed8fd63bbbd45a7ffe3692e456340b40d45b1449","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed8fd63bbbd45a7ffe3692e456340b40d45b1449"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","html_url":"https://github.com/apache/openjpa/commit/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc/comments","author":null,"committer":null,"parents":[{"sha":"5607a959abde3e078e095c47524487f7e3c69891","url":"https://api.github.com/repos/apache/openjpa/commits/5607a959abde3e078e095c47524487f7e3c69891","html_url":"https://github.com/apache/openjpa/commit/5607a959abde3e078e095c47524487f7e3c69891"}]},{"sha":"d33884a90a43d7261e8bbc761295394ce9059df2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzMzg4NGE5MGE0M2Q3MjYxZThiYmM3NjEyOTUzOTRjZTkwNTlkZjI=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-27T10:28:34Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-27T10:28:34Z"},"message":"OPENJPA-1248: Add note on MySQL limitations related to LOB streaming, improve wording.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@894052 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2da1495f48ce002acedad7cb75897e41dfcd6dd6","url":"https://api.github.com/repos/apache/openjpa/git/trees/2da1495f48ce002acedad7cb75897e41dfcd6dd6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d33884a90a43d7261e8bbc761295394ce9059df2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d33884a90a43d7261e8bbc761295394ce9059df2","html_url":"https://github.com/apache/openjpa/commit/d33884a90a43d7261e8bbc761295394ce9059df2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d33884a90a43d7261e8bbc761295394ce9059df2/comments","author":null,"committer":null,"parents":[{"sha":"2274f9c21f0619a9ae9d8abbc62f274c002f37bc","url":"https://api.github.com/repos/apache/openjpa/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","html_url":"https://github.com/apache/openjpa/commit/2274f9c21f0619a9ae9d8abbc62f274c002f37bc"}]},{"sha":"5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjViN2MyMGVhY2I5OWQ5NzRhNDhmY2I2YmM1ODVlZjZmZDlmNjcxZDU=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-01T17:39:28Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-01T17:39:28Z"},"message":"OPENJPA-1248: Test case refactored for easier control of LOB data creation, increased amount of LOB data to a more realistic value (but still under MySQL default BLOB limit - 64 kB).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895040 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54525bef83a71da39ebbd4bbb41dbded74b87db4","url":"https://api.github.com/repos/apache/openjpa/git/trees/54525bef83a71da39ebbd4bbb41dbded74b87db4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","html_url":"https://github.com/apache/openjpa/commit/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5/comments","author":null,"committer":null,"parents":[{"sha":"d33884a90a43d7261e8bbc761295394ce9059df2","url":"https://api.github.com/repos/apache/openjpa/commits/d33884a90a43d7261e8bbc761295394ce9059df2","html_url":"https://github.com/apache/openjpa/commit/d33884a90a43d7261e8bbc761295394ce9059df2"}]},{"sha":"e5d2bd435f0c0fe502ed21a7df97672406d225c9","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1ZDJiZDQzNWYwYzBmZTUwMmVkMjFhN2RmOTc2NzI0MDZkMjI1Yzk=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-03T15:10:42Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-03T15:10:42Z"},"message":"OPENJPA-1248: PostgreSQL needs truncating LOB content on update when new content is shorter than the existing content.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43d1f1043c9343c81c9735f1da8038eb199a3c89","url":"https://api.github.com/repos/apache/openjpa/git/trees/43d1f1043c9343c81c9735f1da8038eb199a3c89"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5d2bd435f0c0fe502ed21a7df97672406d225c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5d2bd435f0c0fe502ed21a7df97672406d225c9","html_url":"https://github.com/apache/openjpa/commit/e5d2bd435f0c0fe502ed21a7df97672406d225c9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5d2bd435f0c0fe502ed21a7df97672406d225c9/comments","author":null,"committer":null,"parents":[{"sha":"5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","url":"https://api.github.com/repos/apache/openjpa/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","html_url":"https://github.com/apache/openjpa/commit/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5"}]},{"sha":"c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2NDU5MzkxYzhhODY2OGNmYzBlY2Q3YmE3ZGU5NWY3YjBmOTU2YmQ=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-03T17:55:35Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-03T17:55:35Z"},"message":"OPENJPA-1248: Add limited support of LOB streaming on SQL Server; wording corrections.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895453 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"730e94f2e68f84d097db08149f66874cd8a2c660","url":"https://api.github.com/repos/apache/openjpa/git/trees/730e94f2e68f84d097db08149f66874cd8a2c660"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd","html_url":"https://github.com/apache/openjpa/commit/c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd/comments","author":null,"committer":null,"parents":[{"sha":"e5d2bd435f0c0fe502ed21a7df97672406d225c9","url":"https://api.github.com/repos/apache/openjpa/commits/e5d2bd435f0c0fe502ed21a7df97672406d225c9","html_url":"https://github.com/apache/openjpa/commit/e5d2bd435f0c0fe502ed21a7df97672406d225c9"}]},{"sha":"02b5554036db444d4f7cb7463c3fe469edb29e87","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyYjU1NTQwMzZkYjQ0NGQ0ZjdjYjc0NjNjM2ZlNDY5ZWRiMjllODc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-04T17:47:19Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-04T17:47:19Z"},"message":"OPENJPA-1453 Add support for testing with JPA 2.0 TCK\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895723 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8eb3ef7f1875c2b4efbf65c2c5cca0b178954a51","url":"https://api.github.com/repos/apache/openjpa/git/trees/8eb3ef7f1875c2b4efbf65c2c5cca0b178954a51"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/02b5554036db444d4f7cb7463c3fe469edb29e87","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/02b5554036db444d4f7cb7463c3fe469edb29e87","html_url":"https://github.com/apache/openjpa/commit/02b5554036db444d4f7cb7463c3fe469edb29e87","comments_url":"https://api.github.com/repos/apache/openjpa/commits/02b5554036db444d4f7cb7463c3fe469edb29e87/comments","author":null,"committer":null,"parents":[{"sha":"c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd","url":"https://api.github.com/repos/apache/openjpa/commits/c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd","html_url":"https://github.com/apache/openjpa/commit/c6459391c8a8668cfc0ecd7ba7de95f7b0f956bd"}]},{"sha":"f78ddef9c2032a92c9af40e383480033fb8e2a51","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3OGRkZWY5YzIwMzJhOTJjOWFmNDBlMzgzNDgwMDMzZmI4ZTJhNTE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-04T21:10:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-04T21:10:09Z"},"message":"OPENJPA-1453 Updates to add javaagent and pass/fail counts for JPA2 runs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895783 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01e78069ca55c157902955d4d942a7c5ceabe174","url":"https://api.github.com/repos/apache/openjpa/git/trees/01e78069ca55c157902955d4d942a7c5ceabe174"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f78ddef9c2032a92c9af40e383480033fb8e2a51","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f78ddef9c2032a92c9af40e383480033fb8e2a51","html_url":"https://github.com/apache/openjpa/commit/f78ddef9c2032a92c9af40e383480033fb8e2a51","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f78ddef9c2032a92c9af40e383480033fb8e2a51/comments","author":null,"committer":null,"parents":[{"sha":"02b5554036db444d4f7cb7463c3fe469edb29e87","url":"https://api.github.com/repos/apache/openjpa/commits/02b5554036db444d4f7cb7463c3fe469edb29e87","html_url":"https://github.com/apache/openjpa/commit/02b5554036db444d4f7cb7463c3fe469edb29e87"}]},{"sha":"3320287392e035415d7867ac7312d9109d02306a","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzMjAyODczOTJlMDM1NDE1ZDc4NjdhYzczMTJkOTEwOWQwMjMwNmE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-04T21:17:35Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-04T21:17:35Z"},"message":"OPENJPA-1020: fix class cast exception when retrieving eager persistent collection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"610c0e2f01df4216eb2130ab3bed52d6c61f0e3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/610c0e2f01df4216eb2130ab3bed52d6c61f0e3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3320287392e035415d7867ac7312d9109d02306a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3320287392e035415d7867ac7312d9109d02306a","html_url":"https://github.com/apache/openjpa/commit/3320287392e035415d7867ac7312d9109d02306a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3320287392e035415d7867ac7312d9109d02306a/comments","author":null,"committer":null,"parents":[{"sha":"f78ddef9c2032a92c9af40e383480033fb8e2a51","url":"https://api.github.com/repos/apache/openjpa/commits/f78ddef9c2032a92c9af40e383480033fb8e2a51","html_url":"https://github.com/apache/openjpa/commit/f78ddef9c2032a92c9af40e383480033fb8e2a51"}]},{"sha":"c4fe0957ee76da70633082fc6210c425c7bfcbe1","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0ZmUwOTU3ZWU3NmRhNzA2MzMwODJmYzYyMTBjNDI1YzdiZmNiZTE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-04T22:55:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-04T22:55:49Z"},"message":"OPENJPA-1453 Merge some of the tck2-profile updates into tck-profile and chnage the tsant macro in tck2-profile to not fail the build when errors occur\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895819 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3974bf2ca9e27be2221f27b1391c6751cb94564e","url":"https://api.github.com/repos/apache/openjpa/git/trees/3974bf2ca9e27be2221f27b1391c6751cb94564e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c4fe0957ee76da70633082fc6210c425c7bfcbe1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c4fe0957ee76da70633082fc6210c425c7bfcbe1","html_url":"https://github.com/apache/openjpa/commit/c4fe0957ee76da70633082fc6210c425c7bfcbe1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c4fe0957ee76da70633082fc6210c425c7bfcbe1/comments","author":null,"committer":null,"parents":[{"sha":"3320287392e035415d7867ac7312d9109d02306a","url":"https://api.github.com/repos/apache/openjpa/commits/3320287392e035415d7867ac7312d9109d02306a","html_url":"https://github.com/apache/openjpa/commit/3320287392e035415d7867ac7312d9109d02306a"}]},{"sha":"8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjZjAzYmRhYjc4NzNmNmI5M2NiYTgzZTJhZDg0Y2U5ZGViMmU1ZTg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T02:21:40Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T02:21:40Z"},"message":"OPENJPA-1453 Fix setting javaagent\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895863 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09eb687089ac1609c615363d214e46dc608e84bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/09eb687089ac1609c615363d214e46dc608e84bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8","html_url":"https://github.com/apache/openjpa/commit/8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8/comments","author":null,"committer":null,"parents":[{"sha":"c4fe0957ee76da70633082fc6210c425c7bfcbe1","url":"https://api.github.com/repos/apache/openjpa/commits/c4fe0957ee76da70633082fc6210c425c7bfcbe1","html_url":"https://github.com/apache/openjpa/commit/c4fe0957ee76da70633082fc6210c425c7bfcbe1"}]},{"sha":"254e9362cd5a730cd5bcc2912c24c971affc0a1c","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1NGU5MzYyY2Q1YTczMGNkNWJjYzI5MTJjMjRjOTcxYWZmYzBhMWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T13:26:00Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T13:26:00Z"},"message":"OPENJPA-1453 Old 1.0b TCK does not create a reports dir\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@896033 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c6c1c4e3d983d1e89103ab1eea0f24850e24245a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c6c1c4e3d983d1e89103ab1eea0f24850e24245a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/254e9362cd5a730cd5bcc2912c24c971affc0a1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/254e9362cd5a730cd5bcc2912c24c971affc0a1c","html_url":"https://github.com/apache/openjpa/commit/254e9362cd5a730cd5bcc2912c24c971affc0a1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/254e9362cd5a730cd5bcc2912c24c971affc0a1c/comments","author":null,"committer":null,"parents":[{"sha":"8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8","url":"https://api.github.com/repos/apache/openjpa/commits/8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8","html_url":"https://github.com/apache/openjpa/commit/8cf03bdab7873f6b93cba83e2ad84ce9deb2e5e8"}]},{"sha":"5938ca72f084605af63a2540ea6f1d9b0d240924","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5MzhjYTcyZjA4NDYwNWFmNjNhMjU0MGVhNmYxZDliMGQyNDA5MjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T14:05:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T14:05:08Z"},"message":"OPENJPA-1453 Old 1.0b TCK does not create a reports dir\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@896046 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"681ba02db85ba500aff2678e5fb6cf17ae8e5be1","url":"https://api.github.com/repos/apache/openjpa/git/trees/681ba02db85ba500aff2678e5fb6cf17ae8e5be1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5938ca72f084605af63a2540ea6f1d9b0d240924","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5938ca72f084605af63a2540ea6f1d9b0d240924","html_url":"https://github.com/apache/openjpa/commit/5938ca72f084605af63a2540ea6f1d9b0d240924","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5938ca72f084605af63a2540ea6f1d9b0d240924/comments","author":null,"committer":null,"parents":[{"sha":"254e9362cd5a730cd5bcc2912c24c971affc0a1c","url":"https://api.github.com/repos/apache/openjpa/commits/254e9362cd5a730cd5bcc2912c24c971affc0a1c","html_url":"https://github.com/apache/openjpa/commit/254e9362cd5a730cd5bcc2912c24c971affc0a1c"}]},{"sha":"bfd07edf3fe65f7ee7b4bc756d694f1bd1759479","node_id":"MDY6Q29tbWl0MjA2MzY0OmJmZDA3ZWRmM2ZlNjVmN2VlN2I0YmM3NTZkNjk0ZjFiZDE3NTk0Nzk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T15:12:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-05T15:12:29Z"},"message":"update POMs to include ASF license header, remove tabs and update displayed descriptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@896085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d95a4f9c3dde6b3e4b992542d457f11fd920a48","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d95a4f9c3dde6b3e4b992542d457f11fd920a48"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bfd07edf3fe65f7ee7b4bc756d694f1bd1759479","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bfd07edf3fe65f7ee7b4bc756d694f1bd1759479","html_url":"https://github.com/apache/openjpa/commit/bfd07edf3fe65f7ee7b4bc756d694f1bd1759479","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bfd07edf3fe65f7ee7b4bc756d694f1bd1759479/comments","author":null,"committer":null,"parents":[{"sha":"5938ca72f084605af63a2540ea6f1d9b0d240924","url":"https://api.github.com/repos/apache/openjpa/commits/5938ca72f084605af63a2540ea6f1d9b0d240924","html_url":"https://github.com/apache/openjpa/commit/5938ca72f084605af63a2540ea6f1d9b0d240924"}]},{"sha":"b90c4f01911d3ca0ba34c856117353429588ebd9","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5MGM0ZjAxOTExZDNjYTBiYTM0Yzg1NjExNzM1MzQyOTU4OGViZDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-06T12:02:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-06T12:02:29Z"},"message":"OPENJPA-1453 cleanup classpaths for jpa.classes and tsant\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@896412 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"88dbebb17f174b277060f13960afb3a886108011","url":"https://api.github.com/repos/apache/openjpa/git/trees/88dbebb17f174b277060f13960afb3a886108011"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b90c4f01911d3ca0ba34c856117353429588ebd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b90c4f01911d3ca0ba34c856117353429588ebd9","html_url":"https://github.com/apache/openjpa/commit/b90c4f01911d3ca0ba34c856117353429588ebd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b90c4f01911d3ca0ba34c856117353429588ebd9/comments","author":null,"committer":null,"parents":[{"sha":"bfd07edf3fe65f7ee7b4bc756d694f1bd1759479","url":"https://api.github.com/repos/apache/openjpa/commits/bfd07edf3fe65f7ee7b4bc756d694f1bd1759479","html_url":"https://github.com/apache/openjpa/commit/bfd07edf3fe65f7ee7b4bc756d694f1bd1759479"}]},{"sha":"e303892e2a16cc50785f37b951d047e394bf08ac","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzMDM4OTJlMmExNmNjNTA3ODVmMzdiOTUxZDA0N2UzOTRiZjA4YWM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-07T23:42:31Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-07T23:42:31Z"},"message":"OPENJPA-1455: fix add column problem involving tables with same name in multiple schemas for DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@897056 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1bd7854cd07d69903d34c9b70237775da41964f7","url":"https://api.github.com/repos/apache/openjpa/git/trees/1bd7854cd07d69903d34c9b70237775da41964f7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e303892e2a16cc50785f37b951d047e394bf08ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e303892e2a16cc50785f37b951d047e394bf08ac","html_url":"https://github.com/apache/openjpa/commit/e303892e2a16cc50785f37b951d047e394bf08ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e303892e2a16cc50785f37b951d047e394bf08ac/comments","author":null,"committer":null,"parents":[{"sha":"b90c4f01911d3ca0ba34c856117353429588ebd9","url":"https://api.github.com/repos/apache/openjpa/commits/b90c4f01911d3ca0ba34c856117353429588ebd9","html_url":"https://github.com/apache/openjpa/commit/b90c4f01911d3ca0ba34c856117353429588ebd9"}]},{"sha":"6710465b7c66b61222d7c034022a143c93586225","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3MTA0NjViN2M2NmI2MTIyMmQ3YzAzNDAyMmExNDNjOTM1ODYyMjU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-08T17:23:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-08T17:23:24Z"},"message":"OPENJPA-1452 Configurations attempts to modiy an umodifiable map.  Patch contributed by JIRA uid baboune.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@897269 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d8b2cafbea68a5e65717a2cd9a9fab242e49d22","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d8b2cafbea68a5e65717a2cd9a9fab242e49d22"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6710465b7c66b61222d7c034022a143c93586225","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6710465b7c66b61222d7c034022a143c93586225","html_url":"https://github.com/apache/openjpa/commit/6710465b7c66b61222d7c034022a143c93586225","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6710465b7c66b61222d7c034022a143c93586225/comments","author":null,"committer":null,"parents":[{"sha":"e303892e2a16cc50785f37b951d047e394bf08ac","url":"https://api.github.com/repos/apache/openjpa/commits/e303892e2a16cc50785f37b951d047e394bf08ac","html_url":"https://github.com/apache/openjpa/commit/e303892e2a16cc50785f37b951d047e394bf08ac"}]},{"sha":"3065f2febb333b4680ccd5649ece87dc2592afa9","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwNjVmMmZlYmIzMzNiNDY4MGNjZDU2NDllY2U4N2RjMjU5MmFmYTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-08T18:23:07Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-08T18:23:07Z"},"message":"OPENJPA-1452 Configurations attempts to modiy an umodifiable map.  Add null checks back in to match 1.2/1.3 branches.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@897284 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4f22b22affa0610a16428dbcec3b9f1204e65199","url":"https://api.github.com/repos/apache/openjpa/git/trees/4f22b22affa0610a16428dbcec3b9f1204e65199"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3065f2febb333b4680ccd5649ece87dc2592afa9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3065f2febb333b4680ccd5649ece87dc2592afa9","html_url":"https://github.com/apache/openjpa/commit/3065f2febb333b4680ccd5649ece87dc2592afa9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3065f2febb333b4680ccd5649ece87dc2592afa9/comments","author":null,"committer":null,"parents":[{"sha":"6710465b7c66b61222d7c034022a143c93586225","url":"https://api.github.com/repos/apache/openjpa/commits/6710465b7c66b61222d7c034022a143c93586225","html_url":"https://github.com/apache/openjpa/commit/6710465b7c66b61222d7c034022a143c93586225"}]},{"sha":"5cef9cff179bc021c3a0a075dbb167db0aed3039","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjZWY5Y2ZmMTc5YmMwMjFjM2EwYTA3NWRiYjE2N2RiMGFlZDMwMzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-08T19:40:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-08T19:40:10Z"},"message":"reduce performance cost of isCacheable().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@897308 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4816def37f941c2dfb9559964e905652913149b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/4816def37f941c2dfb9559964e905652913149b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039","html_url":"https://github.com/apache/openjpa/commit/5cef9cff179bc021c3a0a075dbb167db0aed3039","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039/comments","author":null,"committer":null,"parents":[{"sha":"3065f2febb333b4680ccd5649ece87dc2592afa9","url":"https://api.github.com/repos/apache/openjpa/commits/3065f2febb333b4680ccd5649ece87dc2592afa9","html_url":"https://github.com/apache/openjpa/commit/3065f2febb333b4680ccd5649ece87dc2592afa9"}]},{"sha":"0efea474f226749a971077a592090cd7a4b86648","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlZmVhNDc0ZjIyNjc0OWE5NzEwNzdhNTkyMDkwY2Q3YTRiODY2NDg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-11T19:34:23Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-11T19:34:23Z"},"message":"OPENJPA-250: Committing to trunk. Submitted by Patrick Linskey, Simon Droscher, and Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b8e7dec68ac554b0275bbf2a24237fe5d8626f05","url":"https://api.github.com/repos/apache/openjpa/git/trees/b8e7dec68ac554b0275bbf2a24237fe5d8626f05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0efea474f226749a971077a592090cd7a4b86648","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0efea474f226749a971077a592090cd7a4b86648","html_url":"https://github.com/apache/openjpa/commit/0efea474f226749a971077a592090cd7a4b86648","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0efea474f226749a971077a592090cd7a4b86648/comments","author":null,"committer":null,"parents":[{"sha":"5cef9cff179bc021c3a0a075dbb167db0aed3039","url":"https://api.github.com/repos/apache/openjpa/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039","html_url":"https://github.com/apache/openjpa/commit/5cef9cff179bc021c3a0a075dbb167db0aed3039"}]},{"sha":"e53378bd2697a023a2be5d4c9191fa80c3411800","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1MzM3OGJkMjY5N2EwMjNhMmJlNWQ0YzkxOTFmYTgwYzM0MTE4MDA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-11T23:43:38Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-11T23:43:38Z"},"message":"OPENJPA-1455: fix the way to get current schema per Milosz's suggestion.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898118 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"18d7745efcb6a0806916fd8e6dd27c8d2dac5f20","url":"https://api.github.com/repos/apache/openjpa/git/trees/18d7745efcb6a0806916fd8e6dd27c8d2dac5f20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e53378bd2697a023a2be5d4c9191fa80c3411800","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e53378bd2697a023a2be5d4c9191fa80c3411800","html_url":"https://github.com/apache/openjpa/commit/e53378bd2697a023a2be5d4c9191fa80c3411800","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e53378bd2697a023a2be5d4c9191fa80c3411800/comments","author":null,"committer":null,"parents":[{"sha":"0efea474f226749a971077a592090cd7a4b86648","url":"https://api.github.com/repos/apache/openjpa/commits/0efea474f226749a971077a592090cd7a4b86648","html_url":"https://github.com/apache/openjpa/commit/0efea474f226749a971077a592090cd7a4b86648"}]},{"sha":"55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1YmY4NmE0YzhkNGU3YmVmOWFhN2I2MTFhOTEzMDAxMWZhMjdjMzQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T03:31:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T03:31:11Z"},"message":"OPENJPA-1456 Replace StringBuffer usage with StringBuilder for minor performance/scalability improvement\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898168 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8c344194e952a68e3ddd0119b84c3a6c62402ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8c344194e952a68e3ddd0119b84c3a6c62402ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","html_url":"https://github.com/apache/openjpa/commit/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/comments","author":null,"committer":null,"parents":[{"sha":"e53378bd2697a023a2be5d4c9191fa80c3411800","url":"https://api.github.com/repos/apache/openjpa/commits/e53378bd2697a023a2be5d4c9191fa80c3411800","html_url":"https://github.com/apache/openjpa/commit/e53378bd2697a023a2be5d4c9191fa80c3411800"}]},{"sha":"1e95ee43a8fb375a4a3050bb157486081e0b6438","node_id":"MDY6Q29tbWl0MjA2MzY0OjFlOTVlZTQzYThmYjM3NWE0YTMwNTBiYjE1NzQ4NjA4MWUwYjY0Mzg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T16:26:25Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T16:26:25Z"},"message":"updates to unzip JPA2 TCK required patches file\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"874536412bfdd8c9c97ccf6cdc98211d16739712","url":"https://api.github.com/repos/apache/openjpa/git/trees/874536412bfdd8c9c97ccf6cdc98211d16739712"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1e95ee43a8fb375a4a3050bb157486081e0b6438","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1e95ee43a8fb375a4a3050bb157486081e0b6438","html_url":"https://github.com/apache/openjpa/commit/1e95ee43a8fb375a4a3050bb157486081e0b6438","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1e95ee43a8fb375a4a3050bb157486081e0b6438/comments","author":null,"committer":null,"parents":[{"sha":"55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","url":"https://api.github.com/repos/apache/openjpa/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","html_url":"https://github.com/apache/openjpa/commit/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34"}]},{"sha":"0a8386695305ab65bb153080381a8d178a039dac","node_id":"MDY6Q29tbWl0MjA2MzY0OjBhODM4NjY5NTMwNWFiNjViYjE1MzA4MDM4MWE4ZDE3OGEwMzlkYWM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-12T21:04:47Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-12T21:04:47Z"},"message":"OPENJPA-1414: Committing test case. Patch contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898515 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d81cce68eb4633e0a4c52fbfa016717ba6aae016","url":"https://api.github.com/repos/apache/openjpa/git/trees/d81cce68eb4633e0a4c52fbfa016717ba6aae016"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0a8386695305ab65bb153080381a8d178a039dac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0a8386695305ab65bb153080381a8d178a039dac","html_url":"https://github.com/apache/openjpa/commit/0a8386695305ab65bb153080381a8d178a039dac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0a8386695305ab65bb153080381a8d178a039dac/comments","author":null,"committer":null,"parents":[{"sha":"1e95ee43a8fb375a4a3050bb157486081e0b6438","url":"https://api.github.com/repos/apache/openjpa/commits/1e95ee43a8fb375a4a3050bb157486081e0b6438","html_url":"https://github.com/apache/openjpa/commit/1e95ee43a8fb375a4a3050bb157486081e0b6438"}]},{"sha":"6a779fd44ee687aaa092774efa97a56cb2b5cd78","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhNzc5ZmQ0NGVlNjg3YWFhMDkyNzc0ZWZhOTdhNTZjYjJiNWNkNzg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T21:38:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T21:38:14Z"},"message":"remove hack for DDL file, as we have a patched copy for Derby now\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b06dfb0a3577aefc446fa7b95ef8edb81718a67","url":"https://api.github.com/repos/apache/openjpa/git/trees/1b06dfb0a3577aefc446fa7b95ef8edb81718a67"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6a779fd44ee687aaa092774efa97a56cb2b5cd78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6a779fd44ee687aaa092774efa97a56cb2b5cd78","html_url":"https://github.com/apache/openjpa/commit/6a779fd44ee687aaa092774efa97a56cb2b5cd78","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6a779fd44ee687aaa092774efa97a56cb2b5cd78/comments","author":null,"committer":null,"parents":[{"sha":"0a8386695305ab65bb153080381a8d178a039dac","url":"https://api.github.com/repos/apache/openjpa/commits/0a8386695305ab65bb153080381a8d178a039dac","html_url":"https://github.com/apache/openjpa/commit/0a8386695305ab65bb153080381a8d178a039dac"}]},{"sha":"634d82014b2667101448498f9abed7bfd6bcd7f9","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzNGQ4MjAxNGIyNjY3MTAxNDQ4NDk4ZjlhYmVkN2JmZDZiY2Q3Zjk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-12T21:59:37Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-12T21:59:37Z"},"message":"OPENJPA-1245: \nRemove eclipse .project file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898541 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c676ff123af4c4f29f8ee02ca67a5aba1d312599","url":"https://api.github.com/repos/apache/openjpa/git/trees/c676ff123af4c4f29f8ee02ca67a5aba1d312599"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/634d82014b2667101448498f9abed7bfd6bcd7f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/634d82014b2667101448498f9abed7bfd6bcd7f9","html_url":"https://github.com/apache/openjpa/commit/634d82014b2667101448498f9abed7bfd6bcd7f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/634d82014b2667101448498f9abed7bfd6bcd7f9/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a779fd44ee687aaa092774efa97a56cb2b5cd78","url":"https://api.github.com/repos/apache/openjpa/commits/6a779fd44ee687aaa092774efa97a56cb2b5cd78","html_url":"https://github.com/apache/openjpa/commit/6a779fd44ee687aaa092774efa97a56cb2b5cd78"}]},{"sha":"c21fdc55126e0718c5a9716e8516c55ba7418d1f","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyMWZkYzU1MTI2ZTA3MThjNWE5NzE2ZTg1MTZjNTViYTc0MThkMWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-12T22:07:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-12T22:07:23Z"},"message":"OPENJPA-1245: \nAdding svn:ignore property based on openjpa-persistence-jdbc\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898549 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c676ff123af4c4f29f8ee02ca67a5aba1d312599","url":"https://api.github.com/repos/apache/openjpa/git/trees/c676ff123af4c4f29f8ee02ca67a5aba1d312599"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c21fdc55126e0718c5a9716e8516c55ba7418d1f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c21fdc55126e0718c5a9716e8516c55ba7418d1f","html_url":"https://github.com/apache/openjpa/commit/c21fdc55126e0718c5a9716e8516c55ba7418d1f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c21fdc55126e0718c5a9716e8516c55ba7418d1f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"634d82014b2667101448498f9abed7bfd6bcd7f9","url":"https://api.github.com/repos/apache/openjpa/commits/634d82014b2667101448498f9abed7bfd6bcd7f9","html_url":"https://github.com/apache/openjpa/commit/634d82014b2667101448498f9abed7bfd6bcd7f9"}]},{"sha":"2331d205229f72e7526d03896b5fbdca16ffca2b","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzMzFkMjA1MjI5ZjcyZTc1MjZkMDM4OTZiNWZiZGNhMTZmZmNhMmI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-13T20:49:01Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-13T20:49:01Z"},"message":"OPENJPA-1458: fix named parameter problem\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898936 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"577b8bb35f2e89364894997eb9f8f11b933b28cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/577b8bb35f2e89364894997eb9f8f11b933b28cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2331d205229f72e7526d03896b5fbdca16ffca2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2331d205229f72e7526d03896b5fbdca16ffca2b","html_url":"https://github.com/apache/openjpa/commit/2331d205229f72e7526d03896b5fbdca16ffca2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2331d205229f72e7526d03896b5fbdca16ffca2b/comments","author":null,"committer":null,"parents":[{"sha":"c21fdc55126e0718c5a9716e8516c55ba7418d1f","url":"https://api.github.com/repos/apache/openjpa/commits/c21fdc55126e0718c5a9716e8516c55ba7418d1f","html_url":"https://github.com/apache/openjpa/commit/c21fdc55126e0718c5a9716e8516c55ba7418d1f"}]},{"sha":"b8b37205e3900824a762d4f29fcf16f78b41de7d","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4YjM3MjA1ZTM5MDA4MjRhNzYyZDRmMjlmY2YxNmY3OGI0MWRlN2Q=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-13T22:25:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-13T22:25:55Z"},"message":"updates to run TCK twice, since pluggability tests require a different setup\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be38da70ae081a447005a9fe2d7e48cadb154b01","url":"https://api.github.com/repos/apache/openjpa/git/trees/be38da70ae081a447005a9fe2d7e48cadb154b01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d","html_url":"https://github.com/apache/openjpa/commit/b8b37205e3900824a762d4f29fcf16f78b41de7d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d/comments","author":null,"committer":null,"parents":[{"sha":"2331d205229f72e7526d03896b5fbdca16ffca2b","url":"https://api.github.com/repos/apache/openjpa/commits/2331d205229f72e7526d03896b5fbdca16ffca2b","html_url":"https://github.com/apache/openjpa/commit/2331d205229f72e7526d03896b5fbdca16ffca2b"}]},{"sha":"4f6e43a7585d53decc9ae0703b33fee8a09be25c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmNmU0M2E3NTg1ZDUzZGVjYzlhZTA3MDNiMzNmZWU4YTA5YmUyNWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-14T02:38:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-14T02:38:55Z"},"message":"add some extra results info\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899034 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a7a1e80e7c8d52dafab192ed53277227712590c","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a7a1e80e7c8d52dafab192ed53277227712590c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4f6e43a7585d53decc9ae0703b33fee8a09be25c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4f6e43a7585d53decc9ae0703b33fee8a09be25c","html_url":"https://github.com/apache/openjpa/commit/4f6e43a7585d53decc9ae0703b33fee8a09be25c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4f6e43a7585d53decc9ae0703b33fee8a09be25c/comments","author":null,"committer":null,"parents":[{"sha":"b8b37205e3900824a762d4f29fcf16f78b41de7d","url":"https://api.github.com/repos/apache/openjpa/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d","html_url":"https://github.com/apache/openjpa/commit/b8b37205e3900824a762d4f29fcf16f78b41de7d"}]},{"sha":"61cacd5df6a77aa7426dfa03546d9f89fa24a0fb","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxY2FjZDVkZjZhNzdhYTc0MjZkZmEwMzU0NmQ5Zjg5ZmEyNGEwZmI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-14T19:47:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-14T19:47:44Z"},"message":"use exclude list to skip pluggability tests during second pass\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899377 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2196c29c4ac19884de9607dccdf3b9cb1b3567f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/2196c29c4ac19884de9607dccdf3b9cb1b3567f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61cacd5df6a77aa7426dfa03546d9f89fa24a0fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61cacd5df6a77aa7426dfa03546d9f89fa24a0fb","html_url":"https://github.com/apache/openjpa/commit/61cacd5df6a77aa7426dfa03546d9f89fa24a0fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61cacd5df6a77aa7426dfa03546d9f89fa24a0fb/comments","author":null,"committer":null,"parents":[{"sha":"4f6e43a7585d53decc9ae0703b33fee8a09be25c","url":"https://api.github.com/repos/apache/openjpa/commits/4f6e43a7585d53decc9ae0703b33fee8a09be25c","html_url":"https://github.com/apache/openjpa/commit/4f6e43a7585d53decc9ae0703b33fee8a09be25c"}]},{"sha":"dad4ad195225eaa68e6e3bed942822f0ea86d434","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhZDRhZDE5NTIyNWVhYTY4ZTZlM2JlZDk0MjgyMmYwZWE4NmQ0MzQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-01-15T05:12:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-01-15T05:12:44Z"},"message":"OPENJPA-1461: Incorrect Oracle CREATE TABLE DDL for XML column\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899528 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"39860a14f697bb19e8cb2fed5ed3a300c1e2f0a8","url":"https://api.github.com/repos/apache/openjpa/git/trees/39860a14f697bb19e8cb2fed5ed3a300c1e2f0a8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dad4ad195225eaa68e6e3bed942822f0ea86d434","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dad4ad195225eaa68e6e3bed942822f0ea86d434","html_url":"https://github.com/apache/openjpa/commit/dad4ad195225eaa68e6e3bed942822f0ea86d434","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dad4ad195225eaa68e6e3bed942822f0ea86d434/comments","author":null,"committer":null,"parents":[{"sha":"61cacd5df6a77aa7426dfa03546d9f89fa24a0fb","url":"https://api.github.com/repos/apache/openjpa/commits/61cacd5df6a77aa7426dfa03546d9f89fa24a0fb","html_url":"https://github.com/apache/openjpa/commit/61cacd5df6a77aa7426dfa03546d9f89fa24a0fb"}]},{"sha":"b5a412fd426ca91d06d2a8a10c45b60070dd2674","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1YTQxMmZkNDI2Y2E5MWQwNmQyYThhMTBjNDViNjAwNzBkZDI2NzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:23:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:23:15Z"},"message":"OPENJPA-900: Reduce reflection in hint processing. Redesign with explicit hint keys.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899529 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"928bd48b408f26e258151d5b912a71e8500ade83","url":"https://api.github.com/repos/apache/openjpa/git/trees/928bd48b408f26e258151d5b912a71e8500ade83"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b5a412fd426ca91d06d2a8a10c45b60070dd2674","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b5a412fd426ca91d06d2a8a10c45b60070dd2674","html_url":"https://github.com/apache/openjpa/commit/b5a412fd426ca91d06d2a8a10c45b60070dd2674","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b5a412fd426ca91d06d2a8a10c45b60070dd2674/comments","author":null,"committer":null,"parents":[{"sha":"dad4ad195225eaa68e6e3bed942822f0ea86d434","url":"https://api.github.com/repos/apache/openjpa/commits/dad4ad195225eaa68e6e3bed942822f0ea86d434","html_url":"https://github.com/apache/openjpa/commit/dad4ad195225eaa68e6e3bed942822f0ea86d434"}]},{"sha":"db20d8a011cf6efc33b0e3b9c9d04da4ee67674a","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiMjBkOGEwMTFjZjZlZmMzM2IwZTNiOWM5ZDA0ZGE0ZWU2NzY3NGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:25:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:25:25Z"},"message":"OPENJPA-900: Reduce reflection cost. Enumerate hint keys. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7601cababb69940b613c3e8a7e781afc460b9326","url":"https://api.github.com/repos/apache/openjpa/git/trees/7601cababb69940b613c3e8a7e781afc460b9326"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/db20d8a011cf6efc33b0e3b9c9d04da4ee67674a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/db20d8a011cf6efc33b0e3b9c9d04da4ee67674a","html_url":"https://github.com/apache/openjpa/commit/db20d8a011cf6efc33b0e3b9c9d04da4ee67674a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/db20d8a011cf6efc33b0e3b9c9d04da4ee67674a/comments","author":null,"committer":null,"parents":[{"sha":"b5a412fd426ca91d06d2a8a10c45b60070dd2674","url":"https://api.github.com/repos/apache/openjpa/commits/b5a412fd426ca91d06d2a8a10c45b60070dd2674","html_url":"https://github.com/apache/openjpa/commit/b5a412fd426ca91d06d2a8a10c45b60070dd2674"}]},{"sha":"342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c","node_id":"MDY6Q29tbWl0MjA2MzY0OjM0MmMyN2RmZDU4ZTZjNmQ5NTRiOTMzNWJjYTRlNmY4ZWUxNmNiMGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:26:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:26:11Z"},"message":"Add Glassfish JNDI location\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899531 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fefa19d19309e1f6fda428d2f704e2a1b4736e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fefa19d19309e1f6fda428d2f704e2a1b4736e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c","html_url":"https://github.com/apache/openjpa/commit/342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c/comments","author":null,"committer":null,"parents":[{"sha":"db20d8a011cf6efc33b0e3b9c9d04da4ee67674a","url":"https://api.github.com/repos/apache/openjpa/commits/db20d8a011cf6efc33b0e3b9c9d04da4ee67674a","html_url":"https://github.com/apache/openjpa/commit/db20d8a011cf6efc33b0e3b9c9d04da4ee67674a"}]},{"sha":"ab032d8f737fab385234abf1240e501d6d147733","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiMDMyZDhmNzM3ZmFiMzg1MjM0YWJmMTI0MGU1MDFkNmQxNDc3MzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:26:43Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T05:26:43Z"},"message":"Add constructor for more flexible signature\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899532 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"48fb3643acfe861d55ebec644e75d4d9b844ac05","url":"https://api.github.com/repos/apache/openjpa/git/trees/48fb3643acfe861d55ebec644e75d4d9b844ac05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ab032d8f737fab385234abf1240e501d6d147733","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ab032d8f737fab385234abf1240e501d6d147733","html_url":"https://github.com/apache/openjpa/commit/ab032d8f737fab385234abf1240e501d6d147733","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ab032d8f737fab385234abf1240e501d6d147733/comments","author":null,"committer":null,"parents":[{"sha":"342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c","url":"https://api.github.com/repos/apache/openjpa/commits/342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c","html_url":"https://github.com/apache/openjpa/commit/342c27dfd58e6c6d954b9335bca4e6f8ee16cb0c"}]},{"sha":"5a8c5de491f363c96532b7ac6522d849c04014e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhOGM1ZGU0OTFmMzYzYzk2NTMyYjdhYzY1MjJkODQ5YzA0MDE0ZTg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-15T17:49:46Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-15T17:49:46Z"},"message":"OPENJPA-250: Missed a line in the previous merge and remove a test from being excluded in pom.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8ae2c5b93e9546d2b35a5daf450f645744febd0","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8ae2c5b93e9546d2b35a5daf450f645744febd0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a8c5de491f363c96532b7ac6522d849c04014e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a8c5de491f363c96532b7ac6522d849c04014e8","html_url":"https://github.com/apache/openjpa/commit/5a8c5de491f363c96532b7ac6522d849c04014e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a8c5de491f363c96532b7ac6522d849c04014e8/comments","author":null,"committer":null,"parents":[{"sha":"ab032d8f737fab385234abf1240e501d6d147733","url":"https://api.github.com/repos/apache/openjpa/commits/ab032d8f737fab385234abf1240e501d6d147733","html_url":"https://github.com/apache/openjpa/commit/ab032d8f737fab385234abf1240e501d6d147733"}]},{"sha":"8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlMGU5Y2ZiZDJiZDg2MTZkNmEzMGQzMTAwY2Y2MDkxNDVkMjM0MmY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-15T18:05:14Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-15T18:05:14Z"},"message":"OPENJPA-1115 Base identifier support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899738 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2908dcf6177ae9b03fdff47c409ab7ac9b17999c","url":"https://api.github.com/repos/apache/openjpa/git/trees/2908dcf6177ae9b03fdff47c409ab7ac9b17999c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","html_url":"https://github.com/apache/openjpa/commit/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f/comments","author":null,"committer":null,"parents":[{"sha":"5a8c5de491f363c96532b7ac6522d849c04014e8","url":"https://api.github.com/repos/apache/openjpa/commits/5a8c5de491f363c96532b7ac6522d849c04014e8","html_url":"https://github.com/apache/openjpa/commit/5a8c5de491f363c96532b7ac6522d849c04014e8"}]},{"sha":"7b53696e6e5162debf7d48d0f02940f5df15239e","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiNTM2OTZlNmU1MTYyZGViZjdkNDhkMGYwMjk0MGY1ZGYxNTIzOWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T19:35:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T19:35:16Z"},"message":"OPENJPA-1464: Reparameterize with enum-valued parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899780 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3b185f17fe869db9bb8689810d17df6a987c587","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3b185f17fe869db9bb8689810d17df6a987c587"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b53696e6e5162debf7d48d0f02940f5df15239e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b53696e6e5162debf7d48d0f02940f5df15239e","html_url":"https://github.com/apache/openjpa/commit/7b53696e6e5162debf7d48d0f02940f5df15239e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b53696e6e5162debf7d48d0f02940f5df15239e/comments","author":null,"committer":null,"parents":[{"sha":"8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","url":"https://api.github.com/repos/apache/openjpa/commits/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","html_url":"https://github.com/apache/openjpa/commit/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f"}]},{"sha":"fadd48fe5b68577a3a75d86fb7e51746d6662c3b","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhZGQ0OGZlNWI2ODU3N2EzYTc1ZDg2ZmI3ZTUxNzQ2ZDY2NjJjM2I=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-15T19:38:18Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-15T19:38:18Z"},"message":"OPENJPA-1115  Remaining delimited identifiers support, including pluggable identifier utility.  Includes code and test contributions from Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899784 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"62fc417657eef38537e36fffe47dbe2953efd8c8","url":"https://api.github.com/repos/apache/openjpa/git/trees/62fc417657eef38537e36fffe47dbe2953efd8c8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fadd48fe5b68577a3a75d86fb7e51746d6662c3b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fadd48fe5b68577a3a75d86fb7e51746d6662c3b","html_url":"https://github.com/apache/openjpa/commit/fadd48fe5b68577a3a75d86fb7e51746d6662c3b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fadd48fe5b68577a3a75d86fb7e51746d6662c3b/comments","author":null,"committer":null,"parents":[{"sha":"7b53696e6e5162debf7d48d0f02940f5df15239e","url":"https://api.github.com/repos/apache/openjpa/commits/7b53696e6e5162debf7d48d0f02940f5df15239e","html_url":"https://github.com/apache/openjpa/commit/7b53696e6e5162debf7d48d0f02940f5df15239e"}]},{"sha":"e75d1c9c95348d07f20579f268664e0fd2f737c5","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3NWQxYzljOTUzNDhkMDdmMjA1NzlmMjY4NjY0ZTBmZDJmNzM3YzU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-15T21:36:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-15T21:36:44Z"},"message":"OPENJPA-1091 Fix SQL handling in reversemapping example.  Still doesn't create all the Java classes from the DB...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899821 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9301b250d2d11c13521b73c1528d1a59f89c5fd1","url":"https://api.github.com/repos/apache/openjpa/git/trees/9301b250d2d11c13521b73c1528d1a59f89c5fd1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e75d1c9c95348d07f20579f268664e0fd2f737c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e75d1c9c95348d07f20579f268664e0fd2f737c5","html_url":"https://github.com/apache/openjpa/commit/e75d1c9c95348d07f20579f268664e0fd2f737c5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e75d1c9c95348d07f20579f268664e0fd2f737c5/comments","author":null,"committer":null,"parents":[{"sha":"fadd48fe5b68577a3a75d86fb7e51746d6662c3b","url":"https://api.github.com/repos/apache/openjpa/commits/fadd48fe5b68577a3a75d86fb7e51746d6662c3b","html_url":"https://github.com/apache/openjpa/commit/fadd48fe5b68577a3a75d86fb7e51746d6662c3b"}]},{"sha":"919be02042d1d458b16c5610276e6eb0a6a0a0ee","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxOWJlMDIwNDJkMWQ0NThiMTZjNTYxMDI3NmU2ZWIwYTZhMGEwZWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-01-16T00:26:51Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-01-16T00:26:51Z"},"message":"OPENJPA-1461: Incorrect Oracle CREATE TABLE DDL for XML column\nChanged mapping table name from \"TORDER\" to \"TORDERXML\" in test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899851 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"38dec79c69a85a0855eb42fe6876768be19b17f9","url":"https://api.github.com/repos/apache/openjpa/git/trees/38dec79c69a85a0855eb42fe6876768be19b17f9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/919be02042d1d458b16c5610276e6eb0a6a0a0ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/919be02042d1d458b16c5610276e6eb0a6a0a0ee","html_url":"https://github.com/apache/openjpa/commit/919be02042d1d458b16c5610276e6eb0a6a0a0ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/919be02042d1d458b16c5610276e6eb0a6a0a0ee/comments","author":null,"committer":null,"parents":[{"sha":"e75d1c9c95348d07f20579f268664e0fd2f737c5","url":"https://api.github.com/repos/apache/openjpa/commits/e75d1c9c95348d07f20579f268664e0fd2f737c5","html_url":"https://github.com/apache/openjpa/commit/e75d1c9c95348d07f20579f268664e0fd2f737c5"}]},{"sha":"bbc296ba29c2c6dd5620934446fd71c8561db6e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiYzI5NmJhMjljMmM2ZGQ1NjIwOTM0NDQ2ZmQ3MWM4NTYxZGI2ZTQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-16T00:37:32Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-16T00:37:32Z"},"message":"OPENJPA250: Fix testcase.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899853 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c3f4761ce17afd216d57fc3a3008f52f2434dc33","url":"https://api.github.com/repos/apache/openjpa/git/trees/c3f4761ce17afd216d57fc3a3008f52f2434dc33"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bbc296ba29c2c6dd5620934446fd71c8561db6e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bbc296ba29c2c6dd5620934446fd71c8561db6e4","html_url":"https://github.com/apache/openjpa/commit/bbc296ba29c2c6dd5620934446fd71c8561db6e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bbc296ba29c2c6dd5620934446fd71c8561db6e4/comments","author":null,"committer":null,"parents":[{"sha":"919be02042d1d458b16c5610276e6eb0a6a0a0ee","url":"https://api.github.com/repos/apache/openjpa/commits/919be02042d1d458b16c5610276e6eb0a6a0a0ee","html_url":"https://github.com/apache/openjpa/commit/919be02042d1d458b16c5610276e6eb0a6a0a0ee"}]},{"sha":"dff9c690bc677bb42ed4317cf9dce92de742110b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmZjljNjkwYmM2NzdiYjQyZWQ0MzE3Y2Y5ZGNlOTJkZTc0MjExMGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-16T03:22:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-16T03:22:44Z"},"message":"OPENJPA-1412 Move Eclipse plugin to its own subproject\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899881 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a49a8fc33fec28d120fff4607b95a6803e833b35","url":"https://api.github.com/repos/apache/openjpa/git/trees/a49a8fc33fec28d120fff4607b95a6803e833b35"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dff9c690bc677bb42ed4317cf9dce92de742110b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dff9c690bc677bb42ed4317cf9dce92de742110b","html_url":"https://github.com/apache/openjpa/commit/dff9c690bc677bb42ed4317cf9dce92de742110b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dff9c690bc677bb42ed4317cf9dce92de742110b/comments","author":null,"committer":null,"parents":[{"sha":"bbc296ba29c2c6dd5620934446fd71c8561db6e4","url":"https://api.github.com/repos/apache/openjpa/commits/bbc296ba29c2c6dd5620934446fd71c8561db6e4","html_url":"https://github.com/apache/openjpa/commit/bbc296ba29c2c6dd5620934446fd71c8561db6e4"}]},{"sha":"d31639d7b96d0d2c7a83172d996eb52757406b97","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzMTYzOWQ3Yjk2ZDBkMmM3YTgzMTcyZDk5NmViNTI3NTc0MDZiOTc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T22:39:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T22:39:32Z"},"message":"OPENJPA-931: support nesting EmbeddedId in IdClass\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900231 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"96c52acf0b9817441dec567692bf9629323ee1f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/96c52acf0b9817441dec567692bf9629323ee1f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d31639d7b96d0d2c7a83172d996eb52757406b97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d31639d7b96d0d2c7a83172d996eb52757406b97","html_url":"https://github.com/apache/openjpa/commit/d31639d7b96d0d2c7a83172d996eb52757406b97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d31639d7b96d0d2c7a83172d996eb52757406b97/comments","author":null,"committer":null,"parents":[{"sha":"dff9c690bc677bb42ed4317cf9dce92de742110b","url":"https://api.github.com/repos/apache/openjpa/commits/dff9c690bc677bb42ed4317cf9dce92de742110b","html_url":"https://github.com/apache/openjpa/commit/dff9c690bc677bb42ed4317cf9dce92de742110b"}]},{"sha":"7f66117b5aa372d6ec7179b2a1edd47ed46efbe3","node_id":"MDY6Q29tbWl0MjA2MzY0OjdmNjYxMTdiNWFhMzcyZDZlYzcxNzliMmExZWRkNDdlZDQ2ZWZiZTM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T22:47:47Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T22:47:47Z"},"message":"OPENJPA-782: element collection field in orm.xml should not be serialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900236 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5f570c0a8e6728f958d0c541126ac6aa8c1ecc4","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5f570c0a8e6728f958d0c541126ac6aa8c1ecc4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7f66117b5aa372d6ec7179b2a1edd47ed46efbe3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7f66117b5aa372d6ec7179b2a1edd47ed46efbe3","html_url":"https://github.com/apache/openjpa/commit/7f66117b5aa372d6ec7179b2a1edd47ed46efbe3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7f66117b5aa372d6ec7179b2a1edd47ed46efbe3/comments","author":null,"committer":null,"parents":[{"sha":"d31639d7b96d0d2c7a83172d996eb52757406b97","url":"https://api.github.com/repos/apache/openjpa/commits/d31639d7b96d0d2c7a83172d996eb52757406b97","html_url":"https://github.com/apache/openjpa/commit/d31639d7b96d0d2c7a83172d996eb52757406b97"}]},{"sha":"36e31ae445e15bc38fdc93bf1d887fb670eac1c5","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2ZTMxYWU0NDVlMTViYzM4ZmRjOTNiZjFkODg3ZmI2NzBlYWMxYzU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T23:41:45Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T23:41:45Z"},"message":"OPENJPA-1460: resolve visibility scope of orm.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900245 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"462521818ca070cf849a97aef9d2e3b8f01df130","url":"https://api.github.com/repos/apache/openjpa/git/trees/462521818ca070cf849a97aef9d2e3b8f01df130"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/36e31ae445e15bc38fdc93bf1d887fb670eac1c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/36e31ae445e15bc38fdc93bf1d887fb670eac1c5","html_url":"https://github.com/apache/openjpa/commit/36e31ae445e15bc38fdc93bf1d887fb670eac1c5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/36e31ae445e15bc38fdc93bf1d887fb670eac1c5/comments","author":null,"committer":null,"parents":[{"sha":"7f66117b5aa372d6ec7179b2a1edd47ed46efbe3","url":"https://api.github.com/repos/apache/openjpa/commits/7f66117b5aa372d6ec7179b2a1edd47ed46efbe3","html_url":"https://github.com/apache/openjpa/commit/7f66117b5aa372d6ec7179b2a1edd47ed46efbe3"}]},{"sha":"61d8fdaf543401390c008b53d8e9af3102666f62","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxZDhmZGFmNTQzNDAxMzkwYzAwOGI1M2Q4ZTlhZjMxMDI2NjZmNjI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-18T15:59:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-18T15:59:55Z"},"message":"OPENJPA-1453 upgrade to final geronimo-jpa_2.0_spec API artifact\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900438 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25f73315666d1c6e8e53b8b5c262ee8e6177f1ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/25f73315666d1c6e8e53b8b5c262ee8e6177f1ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61d8fdaf543401390c008b53d8e9af3102666f62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61d8fdaf543401390c008b53d8e9af3102666f62","html_url":"https://github.com/apache/openjpa/commit/61d8fdaf543401390c008b53d8e9af3102666f62","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61d8fdaf543401390c008b53d8e9af3102666f62/comments","author":null,"committer":null,"parents":[{"sha":"36e31ae445e15bc38fdc93bf1d887fb670eac1c5","url":"https://api.github.com/repos/apache/openjpa/commits/36e31ae445e15bc38fdc93bf1d887fb670eac1c5","html_url":"https://github.com/apache/openjpa/commit/36e31ae445e15bc38fdc93bf1d887fb670eac1c5"}]},{"sha":"7caef96636033372ccb3f989f267ee3493452350","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjYWVmOTY2MzYwMzMzNzJjY2IzZjk4OWYyNjdlZTM0OTM0NTIzNTA=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-18T16:17:58Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-18T16:17:58Z"},"message":"OPENJPA-1115 Committing documentation contributions for delimited identifiers and dictionary properties submitted by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900446 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fbe4170fef2385dddda3d0040566f84b8c4d4890","url":"https://api.github.com/repos/apache/openjpa/git/trees/fbe4170fef2385dddda3d0040566f84b8c4d4890"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7caef96636033372ccb3f989f267ee3493452350","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7caef96636033372ccb3f989f267ee3493452350","html_url":"https://github.com/apache/openjpa/commit/7caef96636033372ccb3f989f267ee3493452350","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7caef96636033372ccb3f989f267ee3493452350/comments","author":null,"committer":null,"parents":[{"sha":"61d8fdaf543401390c008b53d8e9af3102666f62","url":"https://api.github.com/repos/apache/openjpa/commits/61d8fdaf543401390c008b53d8e9af3102666f62","html_url":"https://github.com/apache/openjpa/commit/61d8fdaf543401390c008b53d8e9af3102666f62"}]},{"sha":"d62991acc3acf44954744d6a2508884b2d6f02ff","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ2Mjk5MWFjYzNhY2Y0NDk1NDc0NGQ2YTI1MDg4ODRiMmQ2ZjAyZmY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-01-18T17:18:38Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-01-18T17:18:38Z"},"message":"OPENJPA-1334.  Updated the name of the testcase from TestPartionedDataCache to TestPartitionedDataCache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900468 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6949715ec313187312ba12a9eb701e336734f8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/a6949715ec313187312ba12a9eb701e336734f8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d62991acc3acf44954744d6a2508884b2d6f02ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d62991acc3acf44954744d6a2508884b2d6f02ff","html_url":"https://github.com/apache/openjpa/commit/d62991acc3acf44954744d6a2508884b2d6f02ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d62991acc3acf44954744d6a2508884b2d6f02ff/comments","author":null,"committer":null,"parents":[{"sha":"7caef96636033372ccb3f989f267ee3493452350","url":"https://api.github.com/repos/apache/openjpa/commits/7caef96636033372ccb3f989f267ee3493452350","html_url":"https://github.com/apache/openjpa/commit/7caef96636033372ccb3f989f267ee3493452350"}]},{"sha":"a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5MWY2ZDU1M2U1OWQyYzhhMGYyYzBiN2NhNGU0Y2VkZWMzM2U5ZjY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-18T19:29:33Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-18T19:29:33Z"},"message":"OPENJPA-1467: Revert ConcurrentDataCache.removeAllInternal(...) to prior revision (5529850).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900521 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da59424e728f25b3c814d82009d4620b1ebe13d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/da59424e728f25b3c814d82009d4620b1ebe13d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6","html_url":"https://github.com/apache/openjpa/commit/a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6/comments","author":null,"committer":null,"parents":[{"sha":"d62991acc3acf44954744d6a2508884b2d6f02ff","url":"https://api.github.com/repos/apache/openjpa/commits/d62991acc3acf44954744d6a2508884b2d6f02ff","html_url":"https://github.com/apache/openjpa/commit/d62991acc3acf44954744d6a2508884b2d6f02ff"}]},{"sha":"f877a44a6391005960ab3a1517e6d2f8ab781ac7","node_id":"MDY6Q29tbWl0MjA2MzY0OmY4NzdhNDRhNjM5MTAwNTk2MGFiM2ExNTE3ZTZkMmY4YWI3ODFhYzc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-18T22:24:44Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-18T22:24:44Z"},"message":"OPENJPA-1470: Change INFO messages in PCEnhancer to TRACE messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900589 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c86382a5d1252d9431107ef115eabfa72eab967b","url":"https://api.github.com/repos/apache/openjpa/git/trees/c86382a5d1252d9431107ef115eabfa72eab967b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f877a44a6391005960ab3a1517e6d2f8ab781ac7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f877a44a6391005960ab3a1517e6d2f8ab781ac7","html_url":"https://github.com/apache/openjpa/commit/f877a44a6391005960ab3a1517e6d2f8ab781ac7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f877a44a6391005960ab3a1517e6d2f8ab781ac7/comments","author":null,"committer":null,"parents":[{"sha":"a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6","url":"https://api.github.com/repos/apache/openjpa/commits/a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6","html_url":"https://github.com/apache/openjpa/commit/a91f6d553e59d2c8a0f2c0b7ca4e4cedec33e9f6"}]},{"sha":"28a6546b14185ea62137b9b0453ce754c5d62bc3","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4YTY1NDZiMTQxODVlYTYyMTM3YjliMDQ1M2NlNzU0YzVkNjJiYzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-19T14:37:35Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-19T14:37:35Z"},"message":"need openjpa.loglevel prop here so you can override if not doing a full build\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900801 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db41e944c743d2a23c18f92a392c8c1bc2bd0f99","url":"https://api.github.com/repos/apache/openjpa/git/trees/db41e944c743d2a23c18f92a392c8c1bc2bd0f99"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28a6546b14185ea62137b9b0453ce754c5d62bc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28a6546b14185ea62137b9b0453ce754c5d62bc3","html_url":"https://github.com/apache/openjpa/commit/28a6546b14185ea62137b9b0453ce754c5d62bc3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28a6546b14185ea62137b9b0453ce754c5d62bc3/comments","author":null,"committer":null,"parents":[{"sha":"f877a44a6391005960ab3a1517e6d2f8ab781ac7","url":"https://api.github.com/repos/apache/openjpa/commits/f877a44a6391005960ab3a1517e6d2f8ab781ac7","html_url":"https://github.com/apache/openjpa/commit/f877a44a6391005960ab3a1517e6d2f8ab781ac7"}]},{"sha":"68eaab6dcca45ab7472dd93b6ff5933b18acb236","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4ZWFhYjZkY2NhNDVhYjc0NzJkZDkzYjZmZjU5MzNiMThhY2IyMzY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-19T14:59:28Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-19T14:59:28Z"},"message":"add comments on tests.openjpa.allowfailure options and behavior\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900807 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0752fc910e36d85fb8342e7025fd2d58baac233b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0752fc910e36d85fb8342e7025fd2d58baac233b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68eaab6dcca45ab7472dd93b6ff5933b18acb236","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68eaab6dcca45ab7472dd93b6ff5933b18acb236","html_url":"https://github.com/apache/openjpa/commit/68eaab6dcca45ab7472dd93b6ff5933b18acb236","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68eaab6dcca45ab7472dd93b6ff5933b18acb236/comments","author":null,"committer":null,"parents":[{"sha":"28a6546b14185ea62137b9b0453ce754c5d62bc3","url":"https://api.github.com/repos/apache/openjpa/commits/28a6546b14185ea62137b9b0453ce754c5d62bc3","html_url":"https://github.com/apache/openjpa/commit/28a6546b14185ea62137b9b0453ce754c5d62bc3"}]},{"sha":"424da6212a4e3e39acbfcaf44ace4577c4392d6e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyNGRhNjIxMmE0ZTNlMzlhY2JmY2FmNDRhY2U0NTc3YzQzOTJkNmU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-19T15:43:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-19T15:43:01Z"},"message":"correct property name\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900821 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"62f1eb92f4341db28cbefe4e07e8dd3ebfea759e","url":"https://api.github.com/repos/apache/openjpa/git/trees/62f1eb92f4341db28cbefe4e07e8dd3ebfea759e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/424da6212a4e3e39acbfcaf44ace4577c4392d6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/424da6212a4e3e39acbfcaf44ace4577c4392d6e","html_url":"https://github.com/apache/openjpa/commit/424da6212a4e3e39acbfcaf44ace4577c4392d6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/424da6212a4e3e39acbfcaf44ace4577c4392d6e/comments","author":null,"committer":null,"parents":[{"sha":"68eaab6dcca45ab7472dd93b6ff5933b18acb236","url":"https://api.github.com/repos/apache/openjpa/commits/68eaab6dcca45ab7472dd93b6ff5933b18acb236","html_url":"https://github.com/apache/openjpa/commit/68eaab6dcca45ab7472dd93b6ff5933b18acb236"}]},{"sha":"1049796100da5f1b082f026c73ae3bb19139dde1","node_id":"MDY6Q29tbWl0MjA2MzY0OjEwNDk3OTYxMDBkYTVmMWIwODJmMDI2YzczYWUzYmIxOTEzOWRkZTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-19T18:10:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-19T18:10:30Z"},"message":"OPENJPA-1460: Rename the setter method\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3371fdb2be6e933ce0e6e593b6586a7e3dc5e885","url":"https://api.github.com/repos/apache/openjpa/git/trees/3371fdb2be6e933ce0e6e593b6586a7e3dc5e885"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1049796100da5f1b082f026c73ae3bb19139dde1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1049796100da5f1b082f026c73ae3bb19139dde1","html_url":"https://github.com/apache/openjpa/commit/1049796100da5f1b082f026c73ae3bb19139dde1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1049796100da5f1b082f026c73ae3bb19139dde1/comments","author":null,"committer":null,"parents":[{"sha":"424da6212a4e3e39acbfcaf44ace4577c4392d6e","url":"https://api.github.com/repos/apache/openjpa/commits/424da6212a4e3e39acbfcaf44ace4577c4392d6e","html_url":"https://github.com/apache/openjpa/commit/424da6212a4e3e39acbfcaf44ace4577c4392d6e"}]},{"sha":"3bff9645033db9d990e80187a76b6de08e840aa8","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiZmY5NjQ1MDMzZGI5ZDk5MGU4MDE4N2E3NmI2ZGUwOGU4NDBhYTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-19T18:32:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-19T18:32:45Z"},"message":"OPENJPA-1460: Rename the setter method\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900890 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a57f18f9a962c748c301f9f6835666ff0585f3e3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a57f18f9a962c748c301f9f6835666ff0585f3e3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3bff9645033db9d990e80187a76b6de08e840aa8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3bff9645033db9d990e80187a76b6de08e840aa8","html_url":"https://github.com/apache/openjpa/commit/3bff9645033db9d990e80187a76b6de08e840aa8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3bff9645033db9d990e80187a76b6de08e840aa8/comments","author":null,"committer":null,"parents":[{"sha":"1049796100da5f1b082f026c73ae3bb19139dde1","url":"https://api.github.com/repos/apache/openjpa/commits/1049796100da5f1b082f026c73ae3bb19139dde1","html_url":"https://github.com/apache/openjpa/commit/1049796100da5f1b082f026c73ae3bb19139dde1"}]},{"sha":"968634a738b10ff695d59c1ff05fef2ba425681f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2ODYzNGE3MzhiMTBmZjY5NWQ1OWMxZmYwNWZlZjJiYTQyNTY4MWY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-01-19T18:53:16Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-01-19T18:53:16Z"},"message":"OPENJPA-1470 Java 2 Security permission violation on getClassLoader caused JEE container unable to enhance entities on the fly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f7796052a5fd4c6c63a9cde82c552f219b3c0168","url":"https://api.github.com/repos/apache/openjpa/git/trees/f7796052a5fd4c6c63a9cde82c552f219b3c0168"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/968634a738b10ff695d59c1ff05fef2ba425681f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/968634a738b10ff695d59c1ff05fef2ba425681f","html_url":"https://github.com/apache/openjpa/commit/968634a738b10ff695d59c1ff05fef2ba425681f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/968634a738b10ff695d59c1ff05fef2ba425681f/comments","author":null,"committer":null,"parents":[{"sha":"3bff9645033db9d990e80187a76b6de08e840aa8","url":"https://api.github.com/repos/apache/openjpa/commits/3bff9645033db9d990e80187a76b6de08e840aa8","html_url":"https://github.com/apache/openjpa/commit/3bff9645033db9d990e80187a76b6de08e840aa8"}]},{"sha":"00c44aba43590c4e3f6dab5d71cbae433a13fdb9","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwYzQ0YWJhNDM1OTBjNGUzZjZkYWI1ZDcxY2JhZTQzM2ExM2ZkYjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-19T19:48:39Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-19T19:48:39Z"},"message":"OPENJPA-1460 Undo import of a spec api added in r900873, as openjpa-kernel does not have access to the spec api and should not by design.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900931 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58d802088f579574020c3a67a023b711b1ee3366","url":"https://api.github.com/repos/apache/openjpa/git/trees/58d802088f579574020c3a67a023b711b1ee3366"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/00c44aba43590c4e3f6dab5d71cbae433a13fdb9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/00c44aba43590c4e3f6dab5d71cbae433a13fdb9","html_url":"https://github.com/apache/openjpa/commit/00c44aba43590c4e3f6dab5d71cbae433a13fdb9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/00c44aba43590c4e3f6dab5d71cbae433a13fdb9/comments","author":null,"committer":null,"parents":[{"sha":"968634a738b10ff695d59c1ff05fef2ba425681f","url":"https://api.github.com/repos/apache/openjpa/commits/968634a738b10ff695d59c1ff05fef2ba425681f","html_url":"https://github.com/apache/openjpa/commit/968634a738b10ff695d59c1ff05fef2ba425681f"}]},{"sha":"245bb82d34f2ca92f96aa77c0784008745d13852","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0NWJiODJkMzRmMmNhOTJmOTZhYTc3YzA3ODQwMDg3NDVkMTM4NTI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-19T21:00:25Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-19T21:00:25Z"},"message":"OPENJPA-1115 Fixed many naming collisions in delimited id tests.  Corrected bug in schema group that broke fully qualified sequence names.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900955 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c6e7eb295c552a78bb5639dc4ffed724de5353d6","url":"https://api.github.com/repos/apache/openjpa/git/trees/c6e7eb295c552a78bb5639dc4ffed724de5353d6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/245bb82d34f2ca92f96aa77c0784008745d13852","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/245bb82d34f2ca92f96aa77c0784008745d13852","html_url":"https://github.com/apache/openjpa/commit/245bb82d34f2ca92f96aa77c0784008745d13852","comments_url":"https://api.github.com/repos/apache/openjpa/commits/245bb82d34f2ca92f96aa77c0784008745d13852/comments","author":null,"committer":null,"parents":[{"sha":"00c44aba43590c4e3f6dab5d71cbae433a13fdb9","url":"https://api.github.com/repos/apache/openjpa/commits/00c44aba43590c4e3f6dab5d71cbae433a13fdb9","html_url":"https://github.com/apache/openjpa/commit/00c44aba43590c4e3f6dab5d71cbae433a13fdb9"}]},{"sha":"9e736884121e01a153c1931cab19389d746c8779","node_id":"MDY6Q29tbWl0MjA2MzY0OjllNzM2ODg0MTIxZTAxYTE1M2MxOTMxY2FiMTkzODlkNzQ2Yzg3Nzk=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-19T22:33:11Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-19T22:33:11Z"},"message":"OPENJPA-1115 Eliminate alias conversion on configurations that do not require conversion.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eba90f8787e3b0cbe9abc4508c7bc6b58f9ad597","url":"https://api.github.com/repos/apache/openjpa/git/trees/eba90f8787e3b0cbe9abc4508c7bc6b58f9ad597"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e736884121e01a153c1931cab19389d746c8779","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e736884121e01a153c1931cab19389d746c8779","html_url":"https://github.com/apache/openjpa/commit/9e736884121e01a153c1931cab19389d746c8779","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e736884121e01a153c1931cab19389d746c8779/comments","author":null,"committer":null,"parents":[{"sha":"245bb82d34f2ca92f96aa77c0784008745d13852","url":"https://api.github.com/repos/apache/openjpa/commits/245bb82d34f2ca92f96aa77c0784008745d13852","html_url":"https://github.com/apache/openjpa/commit/245bb82d34f2ca92f96aa77c0784008745d13852"}]},{"sha":"4adf1c68a79be63b68975a9b737688653cc059dd","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhZGYxYzY4YTc5YmU2M2I2ODk3NWE5YjczNzY4ODY1M2NjMDU5ZGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-01-20T17:33:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-01-20T17:33:59Z"},"message":"OPENJPA-1466 Fix Junit test failures on Oracle\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901295 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9429acd2b2745509b5fc8047aec146b7665ab33f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9429acd2b2745509b5fc8047aec146b7665ab33f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4adf1c68a79be63b68975a9b737688653cc059dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4adf1c68a79be63b68975a9b737688653cc059dd","html_url":"https://github.com/apache/openjpa/commit/4adf1c68a79be63b68975a9b737688653cc059dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4adf1c68a79be63b68975a9b737688653cc059dd/comments","author":null,"committer":null,"parents":[{"sha":"9e736884121e01a153c1931cab19389d746c8779","url":"https://api.github.com/repos/apache/openjpa/commits/9e736884121e01a153c1931cab19389d746c8779","html_url":"https://github.com/apache/openjpa/commit/9e736884121e01a153c1931cab19389d746c8779"}]},{"sha":"f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0ZDA5NjZkZTVjZWI4ZTJiNDcwYzk3ZGM0NDcwNjZkYzBlYTVkZTI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-20T20:14:19Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-20T20:14:19Z"},"message":"OPENJPA-1115 Enabled delimited id test on MySQL and fix identifier conversion related bugs. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901362 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cee2bcdb78b92d92d900ddc7a90cb018d480b2f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/cee2bcdb78b92d92d900ddc7a90cb018d480b2f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","html_url":"https://github.com/apache/openjpa/commit/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/comments","author":null,"committer":null,"parents":[{"sha":"4adf1c68a79be63b68975a9b737688653cc059dd","url":"https://api.github.com/repos/apache/openjpa/commits/4adf1c68a79be63b68975a9b737688653cc059dd","html_url":"https://github.com/apache/openjpa/commit/4adf1c68a79be63b68975a9b737688653cc059dd"}]},{"sha":"531df90e41e5c80cce3129ef45455e2efe3ef272","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzMWRmOTBlNDFlNWM4MGNjZTMxMjllZjQ1NDU1ZTJlZmUzZWYyNzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T20:48:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T20:48:42Z"},"message":"OPENJPA-1293 JUnit test failure when using Derby 10.5.3.0.  Disabling testVariableHaving() for Derby.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901373 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44ec6e7219a3727c07e94ebc48cf06ad5bc04702","url":"https://api.github.com/repos/apache/openjpa/git/trees/44ec6e7219a3727c07e94ebc48cf06ad5bc04702"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/531df90e41e5c80cce3129ef45455e2efe3ef272","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/531df90e41e5c80cce3129ef45455e2efe3ef272","html_url":"https://github.com/apache/openjpa/commit/531df90e41e5c80cce3129ef45455e2efe3ef272","comments_url":"https://api.github.com/repos/apache/openjpa/commits/531df90e41e5c80cce3129ef45455e2efe3ef272/comments","author":null,"committer":null,"parents":[{"sha":"f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","url":"https://api.github.com/repos/apache/openjpa/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","html_url":"https://github.com/apache/openjpa/commit/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2"}]},{"sha":"2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiMmVkZTFlMzhkODZlMDg5Y2IwYjFjODI2MmI2Yzg4N2U2OGY5NWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T20:53:57Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T20:53:57Z"},"message":"OPENJPA-1374 Enable junits to be executed against an in-memory Derby 10.5.3.0 db.  Moved common Derby profiles to the parent POM.  Added new Derby props in o-p-j which knocked 2 mins off build time.  Added a test-derbymem profile to use Derby 10.5.3.0 as in-memory DB, which reduced build time by 5 mins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901374 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d46a85a8c51ca3649eaca695a882558b17acbc8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d46a85a8c51ca3649eaca695a882558b17acbc8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","html_url":"https://github.com/apache/openjpa/commit/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/comments","author":null,"committer":null,"parents":[{"sha":"531df90e41e5c80cce3129ef45455e2efe3ef272","url":"https://api.github.com/repos/apache/openjpa/commits/531df90e41e5c80cce3129ef45455e2efe3ef272","html_url":"https://github.com/apache/openjpa/commit/531df90e41e5c80cce3129ef45455e2efe3ef272"}]},{"sha":"9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYTNmZTA4OTU2YWRjZjM1MWNlYWE2Y2E4ZmQ4ZjdkZmQ0OTg5ZTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:22:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:22:10Z"},"message":"OPENJPA-1374 undo changes to PersistenceProviderImpl.java, which are for OPENJPA-1410 instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901384 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac946375c5a0acb039b8894002cecbd6338956ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac946375c5a0acb039b8894002cecbd6338956ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","html_url":"https://github.com/apache/openjpa/commit/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6/comments","author":null,"committer":null,"parents":[{"sha":"2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","url":"https://api.github.com/repos/apache/openjpa/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","html_url":"https://github.com/apache/openjpa/commit/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f"}]},{"sha":"acafc94a5e539c4b0bd2a3913006cb32da303f67","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjYWZjOTRhNWU1MzljNGIwYmQyYTM5MTMwMDZjYjMyZGEzMDNmNjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:24:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:24:14Z"},"message":"OPENJPA-1410 Class linkage exception when creating an EMF with OpenJPA M3 caused by ValidationUtils.setupValidation().  First round of cleanup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d46a85a8c51ca3649eaca695a882558b17acbc8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d46a85a8c51ca3649eaca695a882558b17acbc8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67","html_url":"https://github.com/apache/openjpa/commit/acafc94a5e539c4b0bd2a3913006cb32da303f67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67/comments","author":null,"committer":null,"parents":[{"sha":"9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","url":"https://api.github.com/repos/apache/openjpa/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","html_url":"https://github.com/apache/openjpa/commit/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6"}]},{"sha":"5a0b97302ba89edbc08b90954805ad26ce6b1f3a","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMGI5NzMwMmJhODllZGJjMDhiOTA5NTQ4MDVhZDI2Y2U2YjFmM2E=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T22:53:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T22:53:02Z"},"message":"OPENJPA-1374 The @DatabasePlatform no longer works, as Derby will always be on the classpath.  Switching 3 junits over to use setSupportedDatabases() in their setUp() routines instead....\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901419 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3408bb66865adca3416b07e4e2310b006fa1af59","url":"https://api.github.com/repos/apache/openjpa/git/trees/3408bb66865adca3416b07e4e2310b006fa1af59"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a0b97302ba89edbc08b90954805ad26ce6b1f3a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a0b97302ba89edbc08b90954805ad26ce6b1f3a","html_url":"https://github.com/apache/openjpa/commit/5a0b97302ba89edbc08b90954805ad26ce6b1f3a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a0b97302ba89edbc08b90954805ad26ce6b1f3a/comments","author":null,"committer":null,"parents":[{"sha":"acafc94a5e539c4b0bd2a3913006cb32da303f67","url":"https://api.github.com/repos/apache/openjpa/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67","html_url":"https://github.com/apache/openjpa/commit/acafc94a5e539c4b0bd2a3913006cb32da303f67"}]},{"sha":"b94d23268f72e09ee305323962b662cbdb3dbac7","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5NGQyMzI2OGY3MmUwOWVlMzA1MzIzOTYyYjY2MmNiZGIzZGJhYzc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T00:16:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T00:16:03Z"},"message":"OPENJPA-1473: Replace null object with non-null default for aggregate expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901454 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66220672299378628ddcacfe6495b57fb9c06a76","url":"https://api.github.com/repos/apache/openjpa/git/trees/66220672299378628ddcacfe6495b57fb9c06a76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b94d23268f72e09ee305323962b662cbdb3dbac7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b94d23268f72e09ee305323962b662cbdb3dbac7","html_url":"https://github.com/apache/openjpa/commit/b94d23268f72e09ee305323962b662cbdb3dbac7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b94d23268f72e09ee305323962b662cbdb3dbac7/comments","author":null,"committer":null,"parents":[{"sha":"5a0b97302ba89edbc08b90954805ad26ce6b1f3a","url":"https://api.github.com/repos/apache/openjpa/commits/5a0b97302ba89edbc08b90954805ad26ce6b1f3a","html_url":"https://github.com/apache/openjpa/commit/5a0b97302ba89edbc08b90954805ad26ce6b1f3a"}]},{"sha":"d23199bf20cdc471a4f589ac23d1f12e3b69ecd6","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyMzE5OWJmMjBjZGM0NzFhNGY1ODlhYzIzZDFmMTJlM2I2OWVjZDY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T00:31:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T00:31:06Z"},"message":"OPENJPA-1474: Setting intermediate field should take into account the loaded state\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e61cbb308df61c8f83445de53957731968c5e7c","url":"https://api.github.com/repos/apache/openjpa/git/trees/2e61cbb308df61c8f83445de53957731968c5e7c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d23199bf20cdc471a4f589ac23d1f12e3b69ecd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d23199bf20cdc471a4f589ac23d1f12e3b69ecd6","html_url":"https://github.com/apache/openjpa/commit/d23199bf20cdc471a4f589ac23d1f12e3b69ecd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d23199bf20cdc471a4f589ac23d1f12e3b69ecd6/comments","author":null,"committer":null,"parents":[{"sha":"b94d23268f72e09ee305323962b662cbdb3dbac7","url":"https://api.github.com/repos/apache/openjpa/commits/b94d23268f72e09ee305323962b662cbdb3dbac7","html_url":"https://github.com/apache/openjpa/commit/b94d23268f72e09ee305323962b662cbdb3dbac7"}]},{"sha":"3042900de18bd5f37011455050f5ab9078bb4b76","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwNDI5MDBkZTE4YmQ1ZjM3MDExNDU1MDUwZjVhYjkwNzhiYjRiNzY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-21T01:33:18Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-21T01:33:18Z"},"message":"OPENJPA-1374 allow setUp() code to run, as it is required by tearDown()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5e25be7ecaac32a4a51011db078efadd3c338b7","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5e25be7ecaac32a4a51011db078efadd3c338b7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3042900de18bd5f37011455050f5ab9078bb4b76","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3042900de18bd5f37011455050f5ab9078bb4b76","html_url":"https://github.com/apache/openjpa/commit/3042900de18bd5f37011455050f5ab9078bb4b76","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3042900de18bd5f37011455050f5ab9078bb4b76/comments","author":null,"committer":null,"parents":[{"sha":"d23199bf20cdc471a4f589ac23d1f12e3b69ecd6","url":"https://api.github.com/repos/apache/openjpa/commits/d23199bf20cdc471a4f589ac23d1f12e3b69ecd6","html_url":"https://github.com/apache/openjpa/commit/d23199bf20cdc471a4f589ac23d1f12e3b69ecd6"}]},{"sha":"bad0838e0041910c0396b12e81b85635f5c334d1","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhZDA4MzhlMDA0MTkxMGMwMzk2YjEyZTgxYjg1NjM1ZjVjMzM0ZDE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-21T04:30:33Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-21T04:30:33Z"},"message":"OPENJPA-1115 Fix problem with sequence schema matching due to extraneous spaces and fix some testcase failures on non-Derby DB platforms that are caused by naming collisions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901525 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2452364e602291bdc0feedf84096a48b35dfa34e","url":"https://api.github.com/repos/apache/openjpa/git/trees/2452364e602291bdc0feedf84096a48b35dfa34e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bad0838e0041910c0396b12e81b85635f5c334d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bad0838e0041910c0396b12e81b85635f5c334d1","html_url":"https://github.com/apache/openjpa/commit/bad0838e0041910c0396b12e81b85635f5c334d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bad0838e0041910c0396b12e81b85635f5c334d1/comments","author":null,"committer":null,"parents":[{"sha":"3042900de18bd5f37011455050f5ab9078bb4b76","url":"https://api.github.com/repos/apache/openjpa/commits/3042900de18bd5f37011455050f5ab9078bb4b76","html_url":"https://github.com/apache/openjpa/commit/3042900de18bd5f37011455050f5ab9078bb4b76"}]},{"sha":"b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwOGEwZDE3OWJiM2ZkNjkwZGExOGEyNTU2ZTljY2MwOWRmYjJjMGE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-21T17:03:33Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-21T17:03:33Z"},"message":"OPENJPA-1455: VALUES CURRENT SCHEMA fails in DB2 on zOS. Change the SQL to SELECT CURRENT SCHEMA FROM SYSIBM.SYSDUMMY1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4676778b12a26897d5128f063b5ee2ef30a59a14","url":"https://api.github.com/repos/apache/openjpa/git/trees/4676778b12a26897d5128f063b5ee2ef30a59a14"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a","html_url":"https://github.com/apache/openjpa/commit/b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a/comments","author":null,"committer":null,"parents":[{"sha":"bad0838e0041910c0396b12e81b85635f5c334d1","url":"https://api.github.com/repos/apache/openjpa/commits/bad0838e0041910c0396b12e81b85635f5c334d1","html_url":"https://github.com/apache/openjpa/commit/bad0838e0041910c0396b12e81b85635f5c334d1"}]},{"sha":"6d253cfe105d6423759860e2ec33ad07409626e4","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkMjUzY2ZlMTA1ZDY0MjM3NTk4NjBlMmVjMzNhZDA3NDA5NjI2ZTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-21T18:15:36Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-21T18:15:36Z"},"message":"add missing license headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901810 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9500eca3049d366e7b1ff6cb5bdbbe8063ea0627","url":"https://api.github.com/repos/apache/openjpa/git/trees/9500eca3049d366e7b1ff6cb5bdbbe8063ea0627"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d253cfe105d6423759860e2ec33ad07409626e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d253cfe105d6423759860e2ec33ad07409626e4","html_url":"https://github.com/apache/openjpa/commit/6d253cfe105d6423759860e2ec33ad07409626e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d253cfe105d6423759860e2ec33ad07409626e4/comments","author":null,"committer":null,"parents":[{"sha":"b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a","url":"https://api.github.com/repos/apache/openjpa/commits/b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a","html_url":"https://github.com/apache/openjpa/commit/b08a0d179bb3fd690da18a2556e9ccc09dfb2c0a"}]},{"sha":"184cb41619ef57deb4a2808ee2d1605ae18a084a","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4NGNiNDE2MTllZjU3ZGViNGEyODA4ZWUyZDE2MDVhZTE4YTA4NGE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-01-21T18:48:31Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-01-21T18:48:31Z"},"message":"OPENJPA-1476.  Turning off the QueryCache by default.  The new default value for this property will be \"false\".  Also, disabling the Write Behind testcases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e94d69fa4f206078b437306346fa6335571a3f25","url":"https://api.github.com/repos/apache/openjpa/git/trees/e94d69fa4f206078b437306346fa6335571a3f25"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/184cb41619ef57deb4a2808ee2d1605ae18a084a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/184cb41619ef57deb4a2808ee2d1605ae18a084a","html_url":"https://github.com/apache/openjpa/commit/184cb41619ef57deb4a2808ee2d1605ae18a084a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/184cb41619ef57deb4a2808ee2d1605ae18a084a/comments","author":null,"committer":null,"parents":[{"sha":"6d253cfe105d6423759860e2ec33ad07409626e4","url":"https://api.github.com/repos/apache/openjpa/commits/6d253cfe105d6423759860e2ec33ad07409626e4","html_url":"https://github.com/apache/openjpa/commit/6d253cfe105d6423759860e2ec33ad07409626e4"}]},{"sha":"08cf0152075279240da0c1e17a8a83fcc0444056","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4Y2YwMTUyMDc1Mjc5MjQwZGEwYzFlMTdhOGE4M2ZjYzA0NDQwNTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-21T19:17:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-21T19:17:14Z"},"message":"allow running full builds w/o running o-p-locking tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901830 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f4cede0bc30ee6310cdb11133c8eabe45a7267e","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f4cede0bc30ee6310cdb11133c8eabe45a7267e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/08cf0152075279240da0c1e17a8a83fcc0444056","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/08cf0152075279240da0c1e17a8a83fcc0444056","html_url":"https://github.com/apache/openjpa/commit/08cf0152075279240da0c1e17a8a83fcc0444056","comments_url":"https://api.github.com/repos/apache/openjpa/commits/08cf0152075279240da0c1e17a8a83fcc0444056/comments","author":null,"committer":null,"parents":[{"sha":"184cb41619ef57deb4a2808ee2d1605ae18a084a","url":"https://api.github.com/repos/apache/openjpa/commits/184cb41619ef57deb4a2808ee2d1605ae18a084a","html_url":"https://github.com/apache/openjpa/commit/184cb41619ef57deb4a2808ee2d1605ae18a084a"}]},{"sha":"ec8dba1465635ad5fdc8d993c73fa71616face71","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjOGRiYTE0NjU2MzVhZDVmZGM4ZDk5M2M3M2ZhNzE2MTZmYWNlNzE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T20:17:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T20:17:50Z"},"message":"OPENJPA-1477: Do not use cached PreparedQuery unless it is initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"581c74426b58b1eaf4a04f7ba0ed81fc52b8c670","url":"https://api.github.com/repos/apache/openjpa/git/trees/581c74426b58b1eaf4a04f7ba0ed81fc52b8c670"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec8dba1465635ad5fdc8d993c73fa71616face71","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec8dba1465635ad5fdc8d993c73fa71616face71","html_url":"https://github.com/apache/openjpa/commit/ec8dba1465635ad5fdc8d993c73fa71616face71","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec8dba1465635ad5fdc8d993c73fa71616face71/comments","author":null,"committer":null,"parents":[{"sha":"08cf0152075279240da0c1e17a8a83fcc0444056","url":"https://api.github.com/repos/apache/openjpa/commits/08cf0152075279240da0c1e17a8a83fcc0444056","html_url":"https://github.com/apache/openjpa/commit/08cf0152075279240da0c1e17a8a83fcc0444056"}]},{"sha":"55d7af6e23c915f7dc418dc196cc132641c26c68","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1ZDdhZjZlMjNjOTE1ZjdkYzQxOGRjMTk2Y2MxMzI2NDFjMjZjNjg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-21T22:39:19Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-01-21T22:39:19Z"},"message":"OPENJPA-1475: Exclude calling syncVersion() if an Entity doesn't have a version field. Patch submitted by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efd1f28635735f331ea4cb05fda93832e86d5aee","url":"https://api.github.com/repos/apache/openjpa/git/trees/efd1f28635735f331ea4cb05fda93832e86d5aee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55d7af6e23c915f7dc418dc196cc132641c26c68","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55d7af6e23c915f7dc418dc196cc132641c26c68","html_url":"https://github.com/apache/openjpa/commit/55d7af6e23c915f7dc418dc196cc132641c26c68","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55d7af6e23c915f7dc418dc196cc132641c26c68/comments","author":null,"committer":null,"parents":[{"sha":"ec8dba1465635ad5fdc8d993c73fa71616face71","url":"https://api.github.com/repos/apache/openjpa/commits/ec8dba1465635ad5fdc8d993c73fa71616face71","html_url":"https://github.com/apache/openjpa/commit/ec8dba1465635ad5fdc8d993c73fa71616face71"}]},{"sha":"d299ac431108416d606549ec771ca5b5a26d78a6","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyOTlhYzQzMTEwODQxNmQ2MDY1NDllYzc3MWNhNWI1YTI2ZDc4YTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-22T03:34:57Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-22T03:34:57Z"},"message":"OPENJPA-1410 Undo removal of code that was added by OPENJPA-1460\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901968 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"36417dd633efaf16ff9bb13830e248b0057ee8ef","url":"https://api.github.com/repos/apache/openjpa/git/trees/36417dd633efaf16ff9bb13830e248b0057ee8ef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d299ac431108416d606549ec771ca5b5a26d78a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d299ac431108416d606549ec771ca5b5a26d78a6","html_url":"https://github.com/apache/openjpa/commit/d299ac431108416d606549ec771ca5b5a26d78a6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d299ac431108416d606549ec771ca5b5a26d78a6/comments","author":null,"committer":null,"parents":[{"sha":"55d7af6e23c915f7dc418dc196cc132641c26c68","url":"https://api.github.com/repos/apache/openjpa/commits/55d7af6e23c915f7dc418dc196cc132641c26c68","html_url":"https://github.com/apache/openjpa/commit/55d7af6e23c915f7dc418dc196cc132641c26c68"}]},{"sha":"c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyNDZhN2E0YjE3ZTZlOGM4M2ViYjE2NjBiZjNmM2I3MjY2NzVjMWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-22T15:20:03Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-22T15:20:03Z"},"message":"OPENJPA-1150:  \nRemoving incomplete WriteBehind implementation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902113 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8d40f194eaf18be6192a3bb60c6b6f6ae0c4ad8","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8d40f194eaf18be6192a3bb60c6b6f6ae0c4ad8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","html_url":"https://github.com/apache/openjpa/commit/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d299ac431108416d606549ec771ca5b5a26d78a6","url":"https://api.github.com/repos/apache/openjpa/commits/d299ac431108416d606549ec771ca5b5a26d78a6","html_url":"https://github.com/apache/openjpa/commit/d299ac431108416d606549ec771ca5b5a26d78a6"}]},{"sha":"79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5YjE0ZGQwNWZhZGZlOWQwN2MwMmU0Y2Y5YWU1ZmJiNGNlODE2ZWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-22T16:12:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-22T16:12:12Z"},"message":"OPENJPA-1150:\nUn-exclude writebehind testcases since they're no longer in svn\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902141 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58143951175502e6e350244c90665ed4e00894b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/58143951175502e6e350244c90665ed4e00894b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee","html_url":"https://github.com/apache/openjpa/commit/79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","url":"https://api.github.com/repos/apache/openjpa/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","html_url":"https://github.com/apache/openjpa/commit/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d"}]},{"sha":"31757064ca69e04e6169f19f4ea5e6bb22c60bcb","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNzU3MDY0Y2E2OWUwNGU2MTY5ZjE5ZjRlYTVlNmJiMjJjNjBiY2I=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-22T16:49:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-22T16:49:12Z"},"message":"OPENJPA-1478 add OSGi metadata back into openjpa.jar artifact for Apache Aries team.  Also updated to latest maven-bundle-plugin version.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902169 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2fa2f11daa31d239ac9b862d096df2a8e8be44e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/2fa2f11daa31d239ac9b862d096df2a8e8be44e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31757064ca69e04e6169f19f4ea5e6bb22c60bcb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31757064ca69e04e6169f19f4ea5e6bb22c60bcb","html_url":"https://github.com/apache/openjpa/commit/31757064ca69e04e6169f19f4ea5e6bb22c60bcb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31757064ca69e04e6169f19f4ea5e6bb22c60bcb/comments","author":null,"committer":null,"parents":[{"sha":"79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee","url":"https://api.github.com/repos/apache/openjpa/commits/79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee","html_url":"https://github.com/apache/openjpa/commit/79b14dd05fadfe9d07c02e4cf9ae5fbb4ce816ee"}]},{"sha":"671417a73a8d3c3548792da6886f207bca99b72d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3MTQxN2E3M2E4ZDNjMzU0ODc5MmRhNjg4NmYyMDdiY2E5OWI3MmQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-22T17:02:13Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-22T17:02:13Z"},"message":"OPENJPA-1115 Fix auto gen id related jUnit regressions on PostgreSQL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902177 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db071b10fadf5e7689c52512e88acb9b0858e4b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/db071b10fadf5e7689c52512e88acb9b0858e4b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/671417a73a8d3c3548792da6886f207bca99b72d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/671417a73a8d3c3548792da6886f207bca99b72d","html_url":"https://github.com/apache/openjpa/commit/671417a73a8d3c3548792da6886f207bca99b72d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/671417a73a8d3c3548792da6886f207bca99b72d/comments","author":null,"committer":null,"parents":[{"sha":"31757064ca69e04e6169f19f4ea5e6bb22c60bcb","url":"https://api.github.com/repos/apache/openjpa/commits/31757064ca69e04e6169f19f4ea5e6bb22c60bcb","html_url":"https://github.com/apache/openjpa/commit/31757064ca69e04e6169f19f4ea5e6bb22c60bcb"}]},{"sha":"e344012c13590e08df91b5dabc63ece8744f79e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzNDQwMTJjMTM1OTBlMDhkZjkxYjVkYWJjNjNlY2U4NzQ0Zjc5ZTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-22T21:21:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-22T21:21:44Z"},"message":"creating branch for beta release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902273 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db071b10fadf5e7689c52512e88acb9b0858e4b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/db071b10fadf5e7689c52512e88acb9b0858e4b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e344012c13590e08df91b5dabc63ece8744f79e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e344012c13590e08df91b5dabc63ece8744f79e4","html_url":"https://github.com/apache/openjpa/commit/e344012c13590e08df91b5dabc63ece8744f79e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e344012c13590e08df91b5dabc63ece8744f79e4/comments","author":null,"committer":null,"parents":[{"sha":"671417a73a8d3c3548792da6886f207bca99b72d","url":"https://api.github.com/repos/apache/openjpa/commits/671417a73a8d3c3548792da6886f207bca99b72d","html_url":"https://github.com/apache/openjpa/commit/671417a73a8d3c3548792da6886f207bca99b72d"}]},{"sha":"2f748ef793af535c245403d94877fef9235cfdc3","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmNzQ4ZWY3OTNhZjUzNWMyNDU0MDNkOTQ4NzdmZWY5MjM1Y2ZkYzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T02:51:01Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T02:51:01Z"},"message":"build updates for beta release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902687 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c08faad8aaf810510bd7f1816e02657cd2eb44a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/c08faad8aaf810510bd7f1816e02657cd2eb44a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2f748ef793af535c245403d94877fef9235cfdc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2f748ef793af535c245403d94877fef9235cfdc3","html_url":"https://github.com/apache/openjpa/commit/2f748ef793af535c245403d94877fef9235cfdc3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2f748ef793af535c245403d94877fef9235cfdc3/comments","author":null,"committer":null,"parents":[{"sha":"e344012c13590e08df91b5dabc63ece8744f79e4","url":"https://api.github.com/repos/apache/openjpa/commits/e344012c13590e08df91b5dabc63ece8744f79e4","html_url":"https://github.com/apache/openjpa/commit/e344012c13590e08df91b5dabc63ece8744f79e4"}]},{"sha":"ef8e165d5e1931ef091cc45fcd02342ef36bc008","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmOGUxNjVkNWUxOTMxZWYwOTFjYzQ1ZmNkMDIzNDJlZjM2YmMwMDg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:29:41Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:29:41Z"},"message":"OPENJPA-1460 merged in r902291\n from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902819 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70174bb8c7acd14647fc0c1488b7bdfbadca8d80","url":"https://api.github.com/repos/apache/openjpa/git/trees/70174bb8c7acd14647fc0c1488b7bdfbadca8d80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef8e165d5e1931ef091cc45fcd02342ef36bc008","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef8e165d5e1931ef091cc45fcd02342ef36bc008","html_url":"https://github.com/apache/openjpa/commit/ef8e165d5e1931ef091cc45fcd02342ef36bc008","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef8e165d5e1931ef091cc45fcd02342ef36bc008/comments","author":null,"committer":null,"parents":[{"sha":"2f748ef793af535c245403d94877fef9235cfdc3","url":"https://api.github.com/repos/apache/openjpa/commits/2f748ef793af535c245403d94877fef9235cfdc3","html_url":"https://github.com/apache/openjpa/commit/2f748ef793af535c245403d94877fef9235cfdc3"}]},{"sha":"fe5161361adde89edd63be37c64648d101ffa9ab","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlNTE2MTM2MWFkZGU4OWVkZDYzYmUzN2M2NDY0OGQxMDFmZmE5YWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:34:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:34:11Z"},"message":"update one more copyright year to 2010\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902821 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1ecd0bae2727817eb7a023fbefa715ce669a6560","url":"https://api.github.com/repos/apache/openjpa/git/trees/1ecd0bae2727817eb7a023fbefa715ce669a6560"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe5161361adde89edd63be37c64648d101ffa9ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe5161361adde89edd63be37c64648d101ffa9ab","html_url":"https://github.com/apache/openjpa/commit/fe5161361adde89edd63be37c64648d101ffa9ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe5161361adde89edd63be37c64648d101ffa9ab/comments","author":null,"committer":null,"parents":[{"sha":"ef8e165d5e1931ef091cc45fcd02342ef36bc008","url":"https://api.github.com/repos/apache/openjpa/commits/ef8e165d5e1931ef091cc45fcd02342ef36bc008","html_url":"https://github.com/apache/openjpa/commit/ef8e165d5e1931ef091cc45fcd02342ef36bc008"}]},{"sha":"5b9cba4fd961257a5c6c97e4b357194657768ff4","node_id":"MDY6Q29tbWl0MjA2MzY0OjViOWNiYTRmZDk2MTI1N2E1YzZjOTdlNGIzNTcxOTQ2NTc3NjhmZjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:47:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:47:54Z"},"message":"update copyright year in docs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902831 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc8632a48881fea53b53007827a1984218942a62","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc8632a48881fea53b53007827a1984218942a62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b9cba4fd961257a5c6c97e4b357194657768ff4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b9cba4fd961257a5c6c97e4b357194657768ff4","html_url":"https://github.com/apache/openjpa/commit/5b9cba4fd961257a5c6c97e4b357194657768ff4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b9cba4fd961257a5c6c97e4b357194657768ff4/comments","author":null,"committer":null,"parents":[{"sha":"fe5161361adde89edd63be37c64648d101ffa9ab","url":"https://api.github.com/repos/apache/openjpa/commits/fe5161361adde89edd63be37c64648d101ffa9ab","html_url":"https://github.com/apache/openjpa/commit/fe5161361adde89edd63be37c64648d101ffa9ab"}]},{"sha":"ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkN2M4N2NiZGJmMmVkOTBhMzVhYjJiYTRkOTg3MWIzODFjZjlkZTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T17:38:04Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T17:38:04Z"},"message":"OPENJPA-1468 Upgrade to final Bean Validation spec API from Geronimo\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cb96fe36badf679faccf0ce8689372edb7a2991","url":"https://api.github.com/repos/apache/openjpa/git/trees/5cb96fe36badf679faccf0ce8689372edb7a2991"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0","html_url":"https://github.com/apache/openjpa/commit/ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0/comments","author":null,"committer":null,"parents":[{"sha":"5b9cba4fd961257a5c6c97e4b357194657768ff4","url":"https://api.github.com/repos/apache/openjpa/commits/5b9cba4fd961257a5c6c97e4b357194657768ff4","html_url":"https://github.com/apache/openjpa/commit/5b9cba4fd961257a5c6c97e4b357194657768ff4"}]},{"sha":"c46d7789c4b04a610f4fd4f6c7517d3dcf635113","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NmQ3Nzg5YzRiMDRhNjEwZjRmZDRmNmM3NTE3ZDNkY2Y2MzUxMTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T18:15:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T18:15:46Z"},"message":"update release notes (txt and html) for beta release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902903 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ad1169956144d0b108790e3d7f2c6252605d6493","url":"https://api.github.com/repos/apache/openjpa/git/trees/ad1169956144d0b108790e3d7f2c6252605d6493"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c46d7789c4b04a610f4fd4f6c7517d3dcf635113","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c46d7789c4b04a610f4fd4f6c7517d3dcf635113","html_url":"https://github.com/apache/openjpa/commit/c46d7789c4b04a610f4fd4f6c7517d3dcf635113","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c46d7789c4b04a610f4fd4f6c7517d3dcf635113/comments","author":null,"committer":null,"parents":[{"sha":"ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0","url":"https://api.github.com/repos/apache/openjpa/commits/ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0","html_url":"https://github.com/apache/openjpa/commit/ad7c87cbdbf2ed90a35ab2ba4d9871b381cf9de0"}]},{"sha":"4627f6bd06ddbd85f12411d776c7a35f1b45c055","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2MjdmNmJkMDZkZGJkODVmMTI0MTFkNzc2YzdhMzVmMWI0NWMwNTU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T18:28:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T18:28:22Z"},"message":"add trademark line and another 2010 copyright year update\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902910 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc4a01771731da29edf4cf855753bce6790fb7dc","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc4a01771731da29edf4cf855753bce6790fb7dc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4627f6bd06ddbd85f12411d776c7a35f1b45c055","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4627f6bd06ddbd85f12411d776c7a35f1b45c055","html_url":"https://github.com/apache/openjpa/commit/4627f6bd06ddbd85f12411d776c7a35f1b45c055","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4627f6bd06ddbd85f12411d776c7a35f1b45c055/comments","author":null,"committer":null,"parents":[{"sha":"c46d7789c4b04a610f4fd4f6c7517d3dcf635113","url":"https://api.github.com/repos/apache/openjpa/commits/c46d7789c4b04a610f4fd4f6c7517d3dcf635113","html_url":"https://github.com/apache/openjpa/commit/c46d7789c4b04a610f4fd4f6c7517d3dcf635113"}]},{"sha":"116797b77cef213e14a57ca1c49c5a53e6d71f9e","node_id":"MDY6Q29tbWl0MjA2MzY0OjExNjc5N2I3N2NlZjIxM2UxNGE1N2NhMWM0OWM1YTUzZTZkNzFmOWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T20:48:59Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T20:48:59Z"},"message":"move creation of *-tests.jar to modules that actually have tests, otherwise jars with no test and no legal files will get generated and cause the release process to fail\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@902968 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c45a6c808dcba105e5b804ef534a0416f95dc4d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c45a6c808dcba105e5b804ef534a0416f95dc4d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/116797b77cef213e14a57ca1c49c5a53e6d71f9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/116797b77cef213e14a57ca1c49c5a53e6d71f9e","html_url":"https://github.com/apache/openjpa/commit/116797b77cef213e14a57ca1c49c5a53e6d71f9e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/116797b77cef213e14a57ca1c49c5a53e6d71f9e/comments","author":null,"committer":null,"parents":[{"sha":"4627f6bd06ddbd85f12411d776c7a35f1b45c055","url":"https://api.github.com/repos/apache/openjpa/commits/4627f6bd06ddbd85f12411d776c7a35f1b45c055","html_url":"https://github.com/apache/openjpa/commit/4627f6bd06ddbd85f12411d776c7a35f1b45c055"}]},{"sha":"2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjYTJhZTA0NWEyZWViZWJjOWYyNmM0YTgwZDBlYjY5ZjcyM2Q1MWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T03:06:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T03:06:15Z"},"message":"fix openjpa-all, which had some jaxb code included by the shade plugin due to transitive depends\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@903062 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c06ccf320a31b7b87b967af4eeaf9ad05c5d3b1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/c06ccf320a31b7b87b967af4eeaf9ad05c5d3b1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","html_url":"https://github.com/apache/openjpa/commit/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/comments","author":null,"committer":null,"parents":[{"sha":"116797b77cef213e14a57ca1c49c5a53e6d71f9e","url":"https://api.github.com/repos/apache/openjpa/commits/116797b77cef213e14a57ca1c49c5a53e6d71f9e","html_url":"https://github.com/apache/openjpa/commit/116797b77cef213e14a57ca1c49c5a53e6d71f9e"}]}],"files":[{"sha":"74c0539aeb2141a4e9d4fdf2ea7eff4e96dc4a9c","filename":"NOTICE.txt","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/NOTICE.txt?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -1,14 +1,11 @@\n-================================================================================\r\n-==  NOTICE file corresponding to the section 4 d of                           ==\r\n-==  the Apache License, Version 2.0,                                          ==\r\n-==  in this case for the Apache OpenJPA distribution.                         ==\r\n-================================================================================\r\n+\r\n+Apache OpenJPA\r\n+Copyright 2006,2010 The Apache Software Foundation\r\n \r\n This product includes software developed by\r\n The Apache Software Foundation (http://www.apache.org/).\r\n \r\n-This is an implementation of an early-draft specification developed under the Java Community Process (JCP). The code is untested and presumed not to be a compatible implementation of the JSR-317 Java Persistence API, Version 2.0 specification.  We encourage you to migrate to an implementation of the JSR-317 Java Persistence API, Version 2.0 specification that has been tested and verified to be compatible as soon as such an implementation is available, and we encourage you to retain this notice in any implementation of JSR-317 Java Persistence API, Version 2.0 specification that you distribute.\r\n-\r\n+Apache, the Apache feather logo and OpenJPA are trademarks of The Apache Software Foundation.\r\n \r\n COPYRIGHT NOTICES\r\n \r"},{"sha":"b8a5c66db95ebf352ef0cc54060817258bbd953c","filename":"README.txt","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/README.txt","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/README.txt?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,13 @@\n+Apache OpenJPA README\n+=====================\n+\n+Thank you for downloading this release of Apache OpenJPA.\n+\n+The following files can be found in the openjpa-project subdirectory:\n+    BUILDING.txt\n+    CHANGES.txt\n+    RELEASE-NOTES.html\n+\n+For documentation and project information, please visit our project site:\n+    http://openjpa.apache.org/\n+"},{"sha":"4cbbb7e90bac6fd87c41468ae59051e6b7d9e264","filename":"openjpa-all/pom.xml","status":"modified","additions":34,"deletions":42,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -29,11 +29,26 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n \n     <build>\n         <plugins>\n+            <!--\n+                 Need to disable source plugin here, as it overwrites the shade\n+                 plugin created sources jar.\n+            -->\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-source-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-sources</id>\n+                        <phase>none</phase>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <!-- Create our aggregate all JAR -->\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-shade-plugin</artifactId>\n@@ -45,14 +60,29 @@\n                         </goals>\n                         <configuration>\n                             <createDependencyReducedPom>true</createDependencyReducedPom>\n+                            <createSourcesJar>true</createSourcesJar>\n                             <keepDependenciesWithProvidedScope>true</keepDependenciesWithProvidedScope>\n+                            <promoteTransitiveDependencies>true</promoteTransitiveDependencies>\n+                            <!-- \n+                                 Have to do this again here, as these settings\n+                                 from shaded openjpa.jar get lost in the shading\n+                            -->\n                             <transformers>\n+                                <!-- Need to concatinate the services resources:\n+                                 org.apache.openjpa.lib.conf.ProductDerivation\n+                                 javax.persistence.spi.PersistenceProvider\n+                                 org.apache.openjpa.kernel.exps.ExpressionParser\n+                                -->\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                                <!-- Need to add some MANIFEST.MF metadata -->\n                                 <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                     <manifestEntries>\n                                         <Main-Class>org.apache.openjpa.conf.OpenJPAVersion</Main-Class>\n                                         <Premain-Class>org.apache.openjpa.enhance.PCEnhancerAgent</Premain-Class>\n                                         <Agent-Class>org.apache.openjpa.enhance.InstrumentationFactory</Agent-Class>\n                                         <Can-Redefine-Classes>true</Can-Redefine-Classes>\n+                                        <Can-Retransform-Classes>true</Can-Retransform-Classes>\n+                                        <Implementation-Title>Apache OpenJPA Aggregate JAR with dependencies</Implementation-Title>\n                                         <Specification-Title>JSR-317 Java Persistence</Specification-Title>\n                                         <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>\n                                         <Specification-Version>2.0</Specification-Version>\n@@ -65,54 +95,16 @@\n             </plugin>\n         </plugins>\n     </build>\n+\n     <dependencies>\n         <!--\n-            Only include openjpa.jar and its required dependencies here, which\n-            will be used by maven-shade-plugin to determine the inclusions.\n+            Only include openjpa.jar here, as the maven-shade-plugin will\n+            determine the transitive dependencies to include from it.\n         -->\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa</artifactId>\n             <version>${pom.version}</version>\n         </dependency>\n-        <dependency>\n-            <groupId>net.sourceforge.serp</groupId>\n-            <artifactId>serp</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-logging</groupId>\n-            <artifactId>commons-logging</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-lang</groupId>\n-            <artifactId>commons-lang</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-collections</groupId>\n-            <artifactId>commons-collections</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-pool</groupId>\n-            <artifactId>commons-pool</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n-        </dependency>\n-        <!-- optional runtime dependencies -->\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n-        </dependency>\n-        <!-- excluded optional runtime dependencies\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-validation_1.0_spec</artifactId>\n-        </dependency>\n-        -->\n     </dependencies>\n </project>"},{"sha":"0bb19eb52930fff2cd92637b033896fe3fe3dada","filename":"openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -1,5 +1,5 @@\n \n-This is an implementation of an early-draft specification developed under the Java Community Process (JCP). The code is untested and presumed not to be a compatible implementation of the JSR-317 Java Persistence API, Version 2.0 specification.  We encourage you to migrate to an implementation of the JSR-317 Java Persistence API, Version 2.0 specification that has been tested and verified to be compatible as soon as such an implementation is available, and we encourage you to retain this notice in any implementation of JSR-317 Java Persistence API, Version 2.0 specification that you distribute.\n+Apache, the Apache feather logo and OpenJPA are trademarks of Apache Software Foundation.\n \n openjpa-all includes software developed by the:\n     Apache Commons Collections project"},{"sha":"e8e9a65905ccec652258a30bfaea62c0f1b0281d","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -32,7 +32,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"2802e00511c97676373ada7b3b0a33f4c540644d","filename":"openjpa-examples/src/main/java/README.txt","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/README.txt","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/README.txt?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -1,5 +1,5 @@\n Apache OpenJPA Examples\n-Copyright © 2005-2009, The Apache Software Foundation.\n+Copyright © 2006,2010 The Apache Software Foundation.\n Licensed under ASL 2.0 - http://www.apache.org/licenses/LICENSE-2.0\n --------------------------------------------------------------------------------\n "},{"sha":"5caf82ac25061e65cbc75f7c11f7194f2061c322","filename":"openjpa-examples/src/main/java/build.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/build.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/build.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -52,6 +52,7 @@ Please traverse to a sub-directory, like hellojpa, and run \"ant\" from there.\n \n     <target name=\"all\" depends=\"init\">\n         <exec dir=\"${basedir}/hellojpa\" executable=\"ant${platform.script.ext}\"/>\n+        <exec dir=\"${basedir}/embeddables\" executable=\"ant${platform.script.ext}\"/>\n         <exec dir=\"${basedir}/relations\" executable=\"ant${platform.script.ext}\"/>\n         <exec dir=\"${basedir}/reversemapping\" executable=\"ant${platform.script.ext}\"/>\n     </target>"},{"sha":"680bba9e9a1d32dfa7ad2d036826e1f0c5364c1a","filename":"openjpa-examples/src/main/java/reversemapping/build.xml","status":"modified","additions":5,"deletions":20,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/reversemapping/build.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/reversemapping/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/build.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -43,27 +43,12 @@\n         description=\"Pre-compilation phase\">\n     </target>\n \n-    <target name=\"initialize-db\" unless=\"initialize-db-skip\"\n+    <target name=\"initialize-db\" depends=\"init,clean\" unless=\"initialize-db-skip\"\n         description=\"Drop then re-create the database\">\n-        <!-- first make sure the database is empty -->\n-        <sql src=\"schema/dropdb.sql\"\n-            driver=\"${dbdriver}\" url=\"${dburl}\"\n-            userid=\"${dbuser}\" password=\"${dbpass}\"\n-            onerror=\"continue\" classpathref=\"classpath\"/>\n-\n-        <!-- build the database -->\n-        <sql\n-            driver=\"${dbdriver}\" url=\"${dburl}\"\n-            userid=\"${dbuser}\" password=\"${dbpass}\" classpathref=\"classpath\">\n-            <transaction src=\"schema/ToursDB_schema.sql\"/>\n-            <transaction src=\"schema/loadCOUNTRIES.sql\"/>\n-            <transaction src=\"schema/loadCITIES.sql\"/>\n-            <transaction src=\"schema/loadAIRLINES.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTS1.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTS2.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTAVAILABILITY1.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTAVAILABILITY2.sql\"/>\n-        </sql>\n+        <exec executable=\"ant${platform.script.ext}\">\n+            <arg line=\"-f db.xml\"/>\n+        </exec>\n+        <sleep seconds=\"5\"/>\n     </target>\n \n     <target name=\"reverse-map-schema\" depends=\"initialize-db\""},{"sha":"cbbb501414cd5e8db648418f7a74f482df657ab3","filename":"openjpa-examples/src/main/java/reversemapping/db.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/reversemapping/db.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-examples/src/main/java/reversemapping/db.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/db.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<project name=\"hellojpa-db\" default=\"initialize-db\">\n+    <property name=\"example\" value=\"reversemapping\"/>\n+    <import file=\"../build.xml\"/>\n+\n+\n+    <target name=\"initialize-db\" unless=\"initialize-db-skip\"\n+        description=\"Drop then re-create the database\">\n+        <!-- first make sure the database is empty -->\n+        <sql src=\"schema/dropdb.sql\"\n+            driver=\"${dbdriver}\" url=\"${dburl}\"\n+            userid=\"${dbuser}\" password=\"${dbpass}\"\n+            onerror=\"continue\" classpathref=\"classpath\"/>\n+\n+        <!-- build the database -->\n+        <sql\n+            driver=\"${dbdriver}\" url=\"${dburl}\"\n+            userid=\"${dbuser}\" password=\"${dbpass}\" classpathref=\"classpath\">\n+            <transaction src=\"schema/ToursDB_schema.sql\"/>\n+            <transaction src=\"schema/loadCOUNTRIES.sql\"/>\n+            <transaction src=\"schema/loadCITIES.sql\"/>\n+            <transaction src=\"schema/loadAIRLINES.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTS1.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTS2.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTAVAILABILITY1.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTAVAILABILITY2.sql\"/>\n+        </sql>\n+    </target>\n+\n+</project>"},{"sha":"c89dce3a77f6090e29acaad7cb82b63ade96512a","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -39,7 +39,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n \n     <profiles>"},{"sha":"cc10ae6ec19a892031d0469fd625a1adfe9800ec","filename":"openjpa-integration/osgi-itests/pom.xml","status":"modified","additions":100,"deletions":11,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -24,12 +24,13 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n \n     <modelVersion>4.0.0</modelVersion>\n     <artifactId>openjpa-integration-osgi-itests</artifactId>\n-    <version>2.0.0-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+\n     <name>OpenJPA Integration Tests - OSGi</name>\n     <description>OpenJPA Integration Tests - OSGi</description>\n \n@@ -40,30 +41,33 @@\n         <!-- OpenJPA runtime and depends -->\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa</artifactId>\n+            <artifactId>openjpa-osgi</artifactId>\n             <version>${version}</version>\n-            <scope>test</scope>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n-            <scope>test</scope>\n+            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+            <scope>provided</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\n+            <artifactId>geronimo-jms_1.1_spec</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n-            <scope>test</scope>\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\n+            <scope>provided</scope>\n         </dependency>\n+        <!-- Not needed yet...\n         <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n             <artifactId>geronimo-validation_1.0_spec</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        -->\n         <!-- Note: Overriding parent versions as these have bundle metadata -->\n         <dependency>\n             <groupId>commons-collections</groupId>\n@@ -75,21 +79,22 @@\n             <groupId>commons-lang</groupId>\n             <artifactId>commons-lang</artifactId>\n             <version>2.4</version>\n-            <scope>test</scope>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>commons-pool</groupId>\n             <artifactId>commons-pool</artifactId>\n-            <version>1.4</version>\n             <scope>test</scope>\n         </dependency>\n         <!-- Testcase depends -->\n+        <!--\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-examples</artifactId>\n             <version>${version}</version>\n             <scope>test</scope>\n         </dependency>\n+        -->\n         <dependency>\n             <groupId>org.apache.derby</groupId>\n             <artifactId>derby</artifactId>\n@@ -155,6 +160,7 @@\n             <groupId>org.apache.felix</groupId>\n             <artifactId>org.osgi.core</artifactId>\n             <version>1.2.0</version>\n+            <scope>provided</scope>\n         </dependency>\n         <!-- Apache Felix framework -->\n         <dependency>\n@@ -194,6 +200,11 @@\n \n     <build>\n         <resources>\n+            <!-- for source jar -->\n+            <resource>\n+                <directory>src/main/resources</directory>\n+            </resource>\n+            <!-- for test jar -->\n             <resource>\n                 <directory>src/test/resources</directory>\n             </resource>\n@@ -210,6 +221,49 @@\n         </resources>\n \n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.5</source>\n+                    <target>1.5</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>process-classes</phase>\n+                        <configuration>\n+                            <tasks>\n+                                <ant antfile=\"src/main/ant/enhancer.xml\" target=\"enhance\" inheritRefs=\"true\">\n+                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\n+                                    <property name=\"test\" value=\"${test}\" />\n+                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n+                                    <property name=\"project.build.outputDirectory\" value=\"${project.build.outputDirectory}\" />\n+                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n+                                    <property name=\"build.enhance\" value=\"${build.enhance}\" />\n+                                </ant>\n+                            </tasks>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+\n             <plugin>\n                 <groupId>org.apache.servicemix.tooling</groupId>\n                 <artifactId>depends-maven-plugin</artifactId>\n@@ -223,11 +277,46 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-Name>${artifactId}</Bundle-Name>\n+                        <Bundle-SymbolicName>${groupId}.${artifactId};singleton=true</Bundle-SymbolicName>\n+                        <Bundle-DocURL>http://openjpa.apache.org/documentation.html</Bundle-DocURL>\n+                        <Bundle-Activator>hellojpa.Main</Bundle-Activator>\n+                        <!-- <Private-Package>hellojpa*,META-INF*</Private-Package> -->\n+                        <Import-Package>org.apache.openjpa.*,*</Import-Package>\n+                        <!-- <Export-Package></Export-Package> -->\n+                        <Require-Bundle>org.apache.geronimo.specs.geronimo-jpa_2.0_spec;bundle-version=\"[1.0.0,2.0.0)\",org.apache.openjpa.openjpa-osgi;bundle-version=\"[2.0.0,3.0.0)\"</Require-Bundle>\n+                        <!-- Eclipse metadata -->\n+                        <Eclipse-Autostart>false</Eclipse-Autostart>\n+                    </instructions>\n+                    <unpackBundle>true</unpackBundle>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>bundle-manifest</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>manifest</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n                 <configuration>\n                     <forkMode>pertest</forkMode>\n+                    <argLine>${surefire.jvm.args}</argLine>\n+                    <excludes>\n+                        <!-- exclude everything for now.... -->\n+                        <exclude>org/apache/openjpa/**/Test*.java</exclude>\n+                    </excludes>\n                 </configuration>\n             </plugin>\n         </plugins>"},{"sha":"c9daaaded78e592c70d620d8d727954b21416114","filename":"openjpa-integration/osgi-itests/readme.txt","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/readme.txt","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/readme.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/readme.txt?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,129 @@\n+Setting up Apache Felix Karaf for OpenJPA 2.0.x\n+\n+Installing and running Apache Felix Karaf\n+---------------------------------------------------\n+1) Download and extract Apache Felix Karaf 1.0.0 from:\n+\n+   http://www.apache.org/dist/felix/apache-felix-karaf-1.0.0.zip\n+   http://www.apache.org/dist/felix/apache-felix-karaf-1.0.0.tar.gz\n+\n+2) Start Karaf under Java SE 5 or 6:\n+ \n+  cd apache-felix-karaf-1.0.0/bin\n+  karaf\n+\n+\n+Installing and running the Felix Web Console and Jetty:\n+-------------------------------------------------------\n+1) Install the following bundles:\n+\n+   a) osgi:install http://www.apache.org/dist/felix/org.osgi.compendium-1.4.0.jar\n+   b) osgi:install http://www.apache.org/dist/felix/org.apache.felix.scr-1.0.8.jar\n+   c) osgi:install http://www.apache.org/dist/felix/org.apache.felix.http.jetty-2.0.2.jar\n+   d) osgi:install http://www.apache.org/dist/felix/org.apache.felix.webconsole-2.0.0.jar\n+\n+2) Start the web console:\n+\n+   a) osgi:start <bundle id for org.apache.felix.http.jetty>\n+   b) osgi:start <bundle id for org.apache.felix.webconsole>\n+\n+   Note:  You will have to start the Config, Event and Scr bundles for those\n+     tabs to function in the web console.\n+\n+3) Access the web console in a browser:\n+\n+   http://localhost:8080/system/console\n+   uid = admin\n+   pwd = admin\n+\n+\n+Installing OpenJPA 2.0.x\n+--------------------------------------------\n+1) Install the following released prereq bundles:\n+\n+   a) osgi:install http://repo1.maven.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar\n+   b) osgi:install http://repo1.maven.org/maven2/commons-lang/commons-lang/2.4/commons-lang-2.4.jar\n+   c) osgi:install http://repo1.maven.org/maven2/commons-pool/commons-pool/1.5/commons-pool-1.5.jar\n+   d) osgi:install http://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar\n+   e) osgi:install http://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar\n+\n+2) Install the following SNAPSHOT prereq bundles:\n+\n+   a) osgi:install http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/geronimo/specs/geronimo-jpa_2.0_spec/1.0-EA9-SNAPSHOT/geronimo-jpa_2.0_spec-1.0-EA9-SNAPSHOT.jar\n+   b) osgi:install http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/geronimo/specs/geronimo-validation_1.0_spec/1.0-EA6-SNAPSHOT/geronimo-validation_1.0_spec-1.0-EA6-SNAPSHOT.jar\n+\n+3) Install the latest OpenJPA 2.0.0-SNAPSHOT build:\n+\n+  For latest published nightly build of OpenJPA 2.0.0-SNAPSHOT:\n+  a) osgi:install http://people.apache.org/repo/m2-snapshot-repository/org/apache/openjpa/openjpa-osgi/2.0.0-SNAPSHOT/openjpa-osgi-2.0.0-SNAPSHOT.jar\n+\n+  For a locally built OpenJPA trunk (2.0.0-SNAPSHOT):\n+  a) osgi:install file:///<m2_repo>/org/apache/openjpa/openjpa-osgi/2.0.0-SNAPSHOT/openjpa-osgi-2.0.0-SNAPSHOT.jar\n+\n+4) Check the Karaf logfile for any problems:\n+\n+   apache-felix-karaf-1.0.0/data/log/karaf.log \n+\n+\n+Installing an OSGi and/or Blueprint based sample app:\n+-----------------------------------------------------\n+This step is still a work-in-progress and TBD...\n+\n+1) Build the openjpa-integration/osgi-itests module in trunk (2.0.0-SNAPSHOT)\n+from source.\n+\n+2) Install the bundlized HelloJPA example:\n+\n+   a) osgi:install file:///<m2_repo>/org/apache/openjpa/openjpa-integration-osgi-itests/2.0.0-SNAPSHOT/openjpa-integration-osgi-itests-2.0.0-SNAPSHOT.jar\n+   b) osgi:start <bundle id for geronimo-jpa_2.0_spec>\n+   c) osgi:start <bundle id for openjpa-osgi>\n+   d) osgi:start <bundle id for openjpa-integration-osgi-itests>\n+\n+\n+Note:  At this point the start should fail with one of the following messages:\n+\n+   a) If you are not using a level of OpenJPA and the Geronimo Spec that \n+      supports resolving providers in an OSGi environment -\n+\n+    Bundle start\n+    org.osgi.framework.BundleException: Activator start error in bundle\n+    org.apache.openjpa.openjpa-integration-osgi-itests [45].\n+    . . .\n+    Caused by: javax.persistence.PersistenceException: No persistence providers\n+    available for \"hellojpa\" after trying the following discovered\n+    implementations: NONE\n+\tat javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:189)\n+\tat hellojpa.Main.main(Main.java:38)\n+\tat hellojpa.Main.start(Main.java:81)\n+\tat org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:667)\n+\tat org.apache.felix.framework.Felix.activateBundle(Felix.java:1699)\n+\t... 15 more\n+\n+\n+   b) The latest code, which still has some issues loading in OSGi -\n+\n+    Bundle start\n+    org.osgi.framework.BundleException: Activator start error in bundle\n+    org.apache.openjpa.openjpa-integration-osgi-itests [45].\n+    . . .\n+    Caused by: java.lang.NoSuchMethodError: javax.persistence.spi.PersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode;\n+\tat org.apache.openjpa.persistence.PersistenceUnitInfoImpl.toOpenJPAProperties(PersistenceUnitInfoImpl.java:487)\n+    . . .\n+\tat hellojpa.Main.main(Main.java:38)\n+\tat hellojpa.Main.start(Main.java:81)\n+\tat org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:667)\n+\tat org.apache.felix.framework.Felix.activateBundle(Felix.java:1699)\n+\t... 15 more\n+ \n+\n+2) To reinstall the sample app, you'll need to uninstall it first, even if the initial install failed:\n+\n+   a) osgi:uninstall <bundle id for openjpa-integration-osgi-itests>\n+\n+\n+Shutting down Karaf:\n+---------------------\n+1) From the Karaf cmdline:\n+\n+   osgi:shutdown\n+"},{"sha":"9baedf82f97c8ffdf6104f54f578a744aa5ae575","filename":"openjpa-integration/osgi-itests/src/main/ant/enhancer.xml","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/ant/enhancer.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+    http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.   \n+-->\n+<project name=\"enhance\" basedir=\".\">\n+    <!--\n+        This build file executes the PCEnhancer on the test entities. It's in a\n+        separate file instead of nested in pom.xml to make some conditional \n+        processing easier.\n+        \n+        Test classes will not be compiled if maven is invoked with \n+        -Dmaven.test.skip=true. \n+    -->\n+\n+    <condition property=\"maven.test.skip.istrue\">\n+        <istrue value=\"${maven.test.skip}\" />\n+    </condition>\n+\n+\t<condition property=\"skip.enhance\">\n+\t\t<or>\n+        <equals arg1=\"${test}\" arg2=\"false\" />\n+\t\t\t<equals arg1=\"${build.enhance}\" arg2=\"false\" />\n+\t\t\t<istrue value=\"${maven.test.skip}\" />\n+\t\t\t<istrue value=\"${skipTests}\" />\n+        </or>\n+    </condition>\n+\n+    <!-- ================================= \n+          target: enhance              \n+         ================================= -->\n+    <target name=\"enhance\"\n+            description=\"--> run the enhancer unless test=false\"\n+            unless=\"skip.enhance\">\n+        <antcall target=\"enhance.all.entities\"\n+                 inheritall=\"true\"\n+                 inheritrefs=\"true\" />\n+    </target>\n+\n+    <!-- ================================= \n+          target: enhance.all.entities              \n+         ================================= -->\n+    <target name=\"enhance.all.entities\"\n+            description=\"--> enhance the test entities\"\n+            unless=\"skip.enhance\">\n+        <echo> running enhancer</echo>\n+        <!-- \n+            Inherited references won't be present until the task is called. \n+            Therefore the path definition needs to stay inside the task.\n+          -->\n+        <path id=\"cp\">\n+            <path refid=\"maven.test.classpath\" />\n+        </path>\n+\n+        <taskdef name=\"openjpac\"\n+                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\n+            <classpath refid=\"cp\" />\n+        </taskdef>\n+\n+        <fileset id=\"enhance.path.ref\"\n+                 dir=\"${project.build.outputDirectory}\">\n+            <include name=\"**/*.class\" />\n+            <exclude name=\"**/Test*.class\" />\n+        </fileset>\n+        <openjpac>\n+            <classpath refid=\"cp\" />\n+            <fileset refid=\"enhance.path.ref\" />\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+        </openjpac>\n+    </target>\n+</project>"},{"sha":"55dc44947a98143d5935cfee2aa584537548b240","filename":"openjpa-integration/osgi-itests/src/main/java/build.xml","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/build.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/java/build.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,156 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<project default=\"usagewarning\">\n+\n+    <property name=\"parent\" value=\"${basedir}/..\"/>\n+    <property name=\"root\" value=\"${parent}/..\"/>\n+\n+    <!-- database connection properties -->\n+    <property name=\"dbdriver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+    <property name=\"dburl\"\n+        value=\"jdbc:derby:${basedir}/${example}-database;create=true\"/>\n+    <property name=\"dbuser\" value=\"\"/>\n+    <property name=\"dbpass\" value=\"\"/>\n+\n+\n+    <target name=\"usagewarning\">\n+        <fail>\n+Please traverse to a sub-directory, like hellojpa, and run \"ant\" from there.\n+        </fail>\n+    </target>\n+\n+    <target name=\"init\" depends=\"init:discover, init:windows, init:unix\">\n+    </target>\n+    <target name=\"init:discover\">\n+        <condition property=\"isWindows\">\n+            <os family=\"windows\"/>\n+        </condition>\n+    </target>\n+    <target name=\"init:windows\" if=\"isWindows\">\n+        <property name=\"platform.script.ext\" value=\".bat\"/>\n+    </target>\n+    <target name=\"init:unix\" unless=\"isWindows\">\n+        <property name=\"platform.script.ext\" value=\"\"/>\n+    </target>\n+\n+    <target name=\"all\" depends=\"init\">\n+        <exec dir=\"${basedir}/hellojpa\" executable=\"ant${platform.script.ext}\"/>\n+        <exec dir=\"${basedir}/relations\" executable=\"ant${platform.script.ext}\"/>\n+        <exec dir=\"${basedir}/reversemapping\" executable=\"ant${platform.script.ext}\"/>\n+    </target>\n+\n+    <path id=\"classpath\"\n+        description=\"The classpath to use for compiling and running\">\n+        <pathelement path=\"${parent}\"/>\n+        <!-- we could include the individual jars as below, but lets use the\n+             openjpa-all.jar with Derby instead\n+        <fileset dir=\"${root}\">\n+            <include name=\"**/*.jar\"/>\n+            <exclude name=\"openjpa-all-*.jar\"/>\n+        </fileset>\n+        -->\n+        <fileset dir=\"${root}\">\n+            <include name=\"openjpa-all-*.jar\"/>\n+            <include name=\"lib/derby*.jar\"/>\n+        </fileset>\n+    </path>\n+\n+    <path id=\"javaagent\">\n+        <fileset dir=\"${root}\">\n+            <include name=\"openjpa-*.jar\"/>\n+            <exclude name=\"openjpa-all-*.jar\"/>\n+        </fileset>\n+    </path>\n+    <pathconvert property=\"javaagent\" refid=\"javaagent\"/>\n+\n+    <target name=\"clean\" depends=\"pre-clean\"\n+        description=\"Clean up compiled files and generated database files\">\n+        <delete includeemptydirs=\"yes\">\n+            <fileset dir=\"${basedir}\">\n+                <include name=\"*.class\"/>\n+                <include name=\"*.log\"/>\n+                <include name=\"${example}-database/**/*\"/>\n+                <include name=\"${example}-database\"/>\n+            </fileset>\n+        </delete>\n+    </target>\n+\n+    <!-- this target can be overridden by the sub-build -->\n+    <target name=\"pre-clean\" description=\"Pre-clean phase\">\n+    </target>\n+\n+    <target name=\"compile\" depends=\"pre-compile\"\n+        description=\"Compile the example java files\">\n+        <javac srcdir=\"${parent}\" classpathref=\"classpath\"\n+            debug=\"yes\" includes=\"${example}/**.java\"/>\n+    </target>\n+\n+    <!-- this target can be overridden by the sub-build -->\n+    <target name=\"pre-compile\" description=\"Pre-compilation phase\">\n+    </target>\n+\n+    <target name=\"run\" depends=\"compile\"\n+        description=\"Run the example Main program\">\n+\n+        <java classname=\"${example}.Main\" classpathref=\"classpath\" fork=\"yes\"\n+            failonerror=\"yes\">\n+            <!--\n+                Specifying the openjpa jar as the javaagent argument is\n+                necessary in order for automatic class-enhancement to work.\n+            -->\n+            <jvmarg value=\"-javaagent:${javaagent}\"/>\n+\n+            <!--\n+                Specify the system properties to use when configuring\n+                OpenJPA. Note that these will only be used becuase in the\n+                examples, the call to \"Persistence.createEntityManagerFactory\"\n+                is passed \"System.getProperties()\".\n+            -->\n+\n+            <!--\n+                By default, use the stand-alone Derby database (provided).\n+                This can easily be changes to use your own database's driver,\n+                provided you ensure it is accessible in the classpath.\n+            -->\n+            <sysproperty key=\"openjpa.ConnectionDriverName\"\n+                value=\"${dbdriver}\"/>\n+            <sysproperty key=\"openjpa.ConnectionURL\" value=\"${dburl}\"/>\n+            <sysproperty key=\"openjpa.ConnectionUserName\" value=\"${dbuser}\"/>\n+            <sysproperty key=\"openjpa.ConnectionPassword\" value=\"${dbpass}\"/>\n+\n+            <!--\n+                Tell OpenJPA to automatically create tables in the database\n+                for entities. Note that this should be disabled when\n+                running against a production database, since you probably\n+                don't want to be altering the schema at runtime.\n+            -->\n+            <sysproperty key=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema\"/>\n+\n+            <!--\n+                Output all the SQL for educational purposes, but set the\n+                general logging level to only show warnings.\n+            -->\n+            <sysproperty key=\"openjpa.Log\"\n+                value=\"DefaultLevel=WARN,SQL=TRACE\"/>\n+        </java>\n+    </target>\n+</project>\n+"},{"sha":"c27cdcf84bfaf66e51c8452fd7b2e5d3b53d60c7","filename":"openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package hellojpa;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.osgi.framework.BundleActivator;\n+import org.osgi.framework.BundleContext;\n+\n+\n+/** \n+ * A very simple, stand-alone program that stores a new entity in the\n+ * database and then performs a query to retrieve it.\n+ */\n+public class Main implements BundleActivator {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void main(String[] args) {\n+        // Create a new EntityManagerFactory using the System properties.\n+        // The \"hellojpa\" name will be used to configure based on the\n+        // corresponding name in the META-INF/persistence.xml file\n+        EntityManagerFactory factory = Persistence.\n+            createEntityManagerFactory(\"hellojpa\", System.getProperties());\n+\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        EntityManager em = factory.createEntityManager();\n+\n+        // Begin a new local transaction so that we can persist a new entity\n+        em.getTransaction().begin();\n+\n+        // Create and persist a new Message entity\n+        em.persist(new Message(\"Hello Persistence!\"));\n+\n+        // Commit the transaction, which will cause the entity to\n+        // be stored in the database\n+        em.getTransaction().commit();\n+\n+        // It is always good practice to close the EntityManager so that\n+        // resources are conserved.\n+        em.close();\n+\n+        // Create a fresh, new EntityManager\n+        EntityManager em2 = factory.createEntityManager();\n+\n+        // Perform a simple query for all the Message entities\n+        Query q = em2.createQuery(\"select m from Message m\");\n+\n+        // Go through each of the entities and print out each of their\n+        // messages, as well as the date on which it was created \n+        for (Message m : (List<Message>) q.getResultList()) {\n+            System.out.println(m.getMessage()\n+                + \" (created on: \" + m.getCreated() + \")\"); \n+        }\n+\n+        // Again, it is always good to clean up after ourselves\n+        em2.close();\n+        factory.close();\n+    }\n+\n+    public void start(BundleContext context) {\n+        System.out.println(\"Bundle start\");\n+        main(null);\n+    }\n+\n+    public void stop(BundleContext context) {\n+        System.out.println(\"Bundle stop\");\n+    }\n+\n+}\n+"},{"sha":"38a084d04683615c31e1e302bbadbbac6325f1ab","filename":"openjpa-integration/osgi-itests/src/main/java/hellojpa/Message.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/hellojpa/Message.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/hellojpa/Message.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/java/hellojpa/Message.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package hellojpa;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+\n+\n+/** \n+ * A very simple persistent entity that holds a \"message\", has a\n+ * \"created\" field that is initialized to the time at which the\n+ * object was created, and an id field that is initialized to the\n+ * current time.\n+ */\n+@Entity\n+public class Message {\n+    @Id\n+    private long id = System.currentTimeMillis();\n+\n+    @Basic\n+    private String message;\n+\n+    @Basic\n+    private Date created = new Date();\n+\n+    public Message() {\n+    }\n+\n+    public Message(String msg) {\n+        message = msg;\n+    }\n+\n+    public void setId(long val) {\n+        id = val;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setMessage(String msg) {\n+        message = msg;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setCreated(Date date) {\n+        created = date;\n+    }\n+\n+    public Date getCreated() {\n+        return created;\n+    }\n+}"},{"sha":"007f64d777c6dc6f66721399cbcb6a7d8caa47ac","filename":"openjpa-integration/osgi-itests/src/main/java/hellojpa/build.xml","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/hellojpa/build.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/java/hellojpa/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/java/hellojpa/build.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<project name=\"hellojpa\" default=\"run\">\n+    <property name=\"example\" value=\"hellojpa\"/>\n+    <import file=\"../build.xml\"/>\n+</project>"},{"sha":"bdb1c067f470e61647f5574e3709a1ff2e260f14","filename":"openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+\n+    <persistence-unit name=\"hellojpa\">\n+        <description>PU for hellojpa</description>\n+        <class>hellojpa</class>\n+        <properties>\n+            <property name=\"openjpa.DynamicEnhancementAgent\" \n+                value=\"false\"/> \n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>\n+"},{"sha":"642afa6fb52939f64084c9a6b5cda1387c566265","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"39a734fff0ca3ad6d22a6039e37938d48635b2cd","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":190,"deletions":45,"changes":235,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,12 +22,20 @@\n     This build file is used to run the JPA TCK. It assumes that you have\n     the TCK zip file located at:\n \n-        ${user.home}/.m2/privaterepos/jpa-1_0b-tck.zip\n+        For JPA 1.0 -\n+            ${user.home}/.m2/privaterepos/jpa-1_0b-tck.zip\n+        For JPA 2.0 -\n+            ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009.zip\n \n     If you have that file in a different location, it can be specified with\n     the \"tck.zip\" system property.\n \n-    The TCK will only be run if you have the \"tck-profile\" enabled.\n+    The TCK will only be run if you have one of the following profiles enabled:\n+\n+        For JPA 1.0 -\n+            -Ptck-profile\n+        For JPA 2.0 -\n+            -Ptck2-profile\n \n     To run a specific package of tests, use the \"jpatck.pkg.dir\" system\n     property to specify the parent directory of the tests you want to run.\n@@ -62,24 +70,155 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n \n     <profiles>\n-    <profile>\n-    <id>tck-profile</id>\n-    <build>\n-        <plugins>\n+      <profile>\n+        <!-- JPA 2.0 TCK Profile -->\n+        <id>tck2-profile</id>\n+        <build>\n+          <plugins>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-antrun-plugin</artifactId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n                 <executions>\n                     <execution>\n-                        <id>run-tck</id>\n-                        <phase>integration-test</phase>\n+                        <phase>validate</phase>\n+                        <goals>\n+                            <goal>enforce</goal>\n+                        </goals>\n                         <configuration>\n-                        <tasks>\n-                        <echo>Running Sun JPA TCK</echo>\n+                            <rules>\n+                                <requireJavaVersion>\n+                                    <version>[1.6,)</version>\n+                                </requireJavaVersion>\n+                            </rules>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+              <groupId>org.apache.maven.plugins</groupId>\n+              <artifactId>maven-antrun-plugin</artifactId>\n+              <executions>\n+                <execution>\n+                  <id>tckinit</id>\n+                  <phase>pre-integration-test</phase>\n+                  <configuration>\n+                    <tasks>\n+                        <echo>Running Sun JPA 2.0 TCK Init</echo>\n+                        <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n+                        <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n+                        <property name=\"LOCAL_M2_REPO\" value=\"${settings.localRepository}\"/>\n+                        <ant antfile=\"${basedir}/tck2.xml\">\n+                            <target name=\"init\" />\n+                        </ant>\n+                    </tasks>\n+                  </configuration>\n+                  <goals>\n+                    <goal>run</goal>\n+                  </goals>\n+                </execution>\n+                <execution>\n+                  <id>run-tck</id>\n+                  <phase>integration-test</phase>\n+                  <configuration>\n+                    <tasks>\n+                        <echo>Running Sun JPA 2.0 TCK</echo>\n+\n+                        <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n+                        <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n+                        <property name=\"tck.reports\" value=\"${tck.dir}/reports\" />\n+                        <property name=\"tck.work\" value=\"${tck.dir}/work\" />\n+\n+                        <!--\n+                            Setup jpa.classes to only use the Maven artifacts\n+                            that we specified as dependencies\n+                        -->\n+                        <path id=\"cp.openjpa\">\n+                            <path refid=\"maven.compile.classpath\" />\n+                        </path>\n+                        <pathconvert property=\"OPENJPA_CLASSPATH\" refid=\"cp.openjpa\" />\n+\n+                        <!--\n+                            Setup jpa.classes to use the Maven artifacts AND\n+                            the toplink provider required for pluggability tests\n+                        -->\n+                        <path id=\"cp.toplink\">\n+                            <path refid=\"maven.compile.classpath\" />\n+                            <!-- need to include the toplink jars for pluggability tests -->\n+                            <fileset dir=\"${tck.dir}/lib\">\n+                                <include name=\"**/*toplink*.jar\" />\n+                            </fileset>\n+                        </path>\n+                        <pathconvert property=\"TOPLINK_CLASSPATH\" refid=\"cp.toplink\" />\n+\n+                        <path id=\"cp\">\n+                            <path refid=\"maven.compile.classpath\" />\n+                        </path>\n+\n+                        <ant antfile=\"${basedir}/tck2.xml\" inheritRefs=\"true\">\n+                            <target name=\"run-pluggability\" />\n+                        </ant>\n+\n+                        <ant antfile=\"${basedir}/tck2.xml\" inheritRefs=\"true\">\n+                            <target name=\"run-tck\" />\n+                        </ant>\n+                    </tasks>\n+                  </configuration>\n+                  <goals>\n+                    <goal>run</goal>\n+                  </goals>\n+                </execution>\n+              </executions>\n+            </plugin>\n+          </plugins>\n+        </build>\n+        <!-- Just pull in openjpa-all, which will include all required deps -->\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-all</artifactId>\n+            <version>${pom.version}</version>\n+          </dependency>\n+        </dependencies>\n+      </profile>\n+\n+      <profile>\n+        <!-- JPA 1.0b TCK Profile -->\n+        <id>tck-profile</id>\n+        <build>\n+          <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>validate</phase>\n+                        <goals>\n+                            <goal>enforce</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <requireJavaVersion>\n+                                    <version>[1.5,)</version>\n+                                </requireJavaVersion>\n+                            </rules>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+              <groupId>org.apache.maven.plugins</groupId>\n+              <artifactId>maven-antrun-plugin</artifactId>\n+              <executions>\n+                <execution>\n+                  <id>run-tck</id>\n+                  <phase>integration-test</phase>\n+                  <configuration>\n+                    <tasks>\n+                        <echo>Running Sun JPA 1.0b TCK</echo>\n \n                         <property name=\"tck.zip\" value=\"${settings.localRepository}/../privaterepos/jpa-1_0b-tck.zip\" />\n                          <available property=\"tck.available\" file=\"${tck.zip}\" />\n@@ -119,6 +258,7 @@\n                         <property name=\"jpatck.pkg.dir\" value=\"com\" />\n                         <property name=\"jpatck.test\" value=\"\" />\n \n+                        <property name=\"jpatck.reports.dir\" value=\"${tck.dir}/../reports\" />\n                         <property name=\"jpatck.work.dir\" value=\"${tck.dir}/../work\" />\n                         <property name=\"tck.log\" value=\"${tck.base}/openjpa-tck.log\" />\n \n@@ -151,7 +291,7 @@ openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n \n jpa.home=${tck.dir}\n work.dir=${jpatck.work.dir}\n-report.dir=${tck.dir}/../reports\n+report.dir=${jpatck.reports.dir}\n jpa.classes=${cp.property}\n database.classes=${jpa.classes}\n # Need to specify java.* classes, both in Windows/UNIX locations as well as Mac.\n@@ -170,6 +310,7 @@ databaseName=${db.name}\n                         <!-- convert backslashes and known paths with spaces\n                             to get around a problem with the TCK testrunner \n                             on windows -->\n+                        <echo>Update directory paths if running on Windows</echo>\n                         <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" replacefilterfile=\"windows-replacefilter.properties\" />\n                         <concat append=\"true\" destfile=\"${jpatck.config}\">\n                             <fileset file=\"${jpatck.config}.tmp\" />\n@@ -178,6 +319,10 @@ databaseName=${db.name}\n                         <path id=\"agent.path\">\n                             <fileset dir=\"../../openjpa/target\">\n                                 <include name=\"*.jar\" />\n+                                <exclude name=\"*-sources.jar\" />\n+                                <exclude name=\"original-*.jar\" />\n+                                <exclude name=\"*-tests.jar\" />\n+                                <exclude name=\"*-javadoc.jar\" />\n                             </fileset>\n                         </path>\n                         <pathconvert dirsep=\"/\" property=\"agent\" refid=\"agent.path\" />\n@@ -200,7 +345,7 @@ databaseName=${db.name}\n                             <attribute name=\"buildfile\" />\n                             <attribute name=\"target\" />\n                             <sequential>\n-                                <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"true\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\">\n+                                <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"true\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\" resultproperty=\"tsant.result\">\n                                     <arg value=\"-emacs\" />\n                                     <arg value=\"-buildfile\" />\n                                     <arg value=\"@{buildfile}\" />\n@@ -234,10 +379,21 @@ databaseName=${db.name}\n                         <echo>Logging JPA TCK output to ${tck.log}</echo>\n \n                         <!-- first initialize the database -->\n+                        <echo>Calling TCK initdb.xml</echo>\n                         <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n+                        <echo>TCK initdb.xml returned result=${tsant.result}</echo>\n \n                         <!-- now run the TCK -->\n+                        <echo>Calling TCK build.xml</echo>\n                         <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n+                        <echo>TCK build.xml returned result=${tsant.result}</echo>\n+\n+                        <!-- archive the results -->\n+                        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-tck-results.zip\" />\n+                        <zip destfile=\"${tck.results.archive}\">\n+                            <fileset dir=\"${jpatck.work.dir}\" />\n+                        </zip>\n+                        <echo>Results archive at: ${tck.results.archive}</echo>\n \n                         <!--\n                             The TCK's Java process doesn't actually fail when\n@@ -249,47 +405,36 @@ databaseName=${db.name}\n                             <contains string=\"${jpatck.results}\" substring=\"Completed test run: not ok\" />\n                         </condition>\n                         <fail if=\"jpatck.failed\">Some tests failed</fail>\n-\n+                        <!-- else -->\n                         <echo>JPA TCK Passed 100%!</echo>\n \n-                        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-tck-results.zip\" />\n-                        <zip destfile=\"${tck.results.archive}\" basedir=\"${jpatck.work.dir}\" />\n-                        <echo>Results archive at: ${tck.results.archive}</echo>\n-\n-                        </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n+                    </tasks>\n+                  </configuration>\n+                  <goals>\n+                    <goal>run</goal>\n+                  </goals>\n+                </execution>\n+              </executions>\n             </plugin>\n-        </plugins>\n-    </build>\n-    </profile>\n-    </profiles>\n-\n-    <repositories>\n-        <repository>\n-            <id>java.net</id>\n-            <name>Java.net Maven Repository</name>\n-            <url>https://maven-repository.dev.java.net/nonav/repository</url>\n-            <layout>legacy</layout>\n-        </repository>\n-    </repositories>\n+          </plugins>\n+        </build>\n \n-    <dependencies>\n-        <!--  Use early access version of JPA spec from Geronimo -->\n-        <dependency>\n+        <dependencies>\n+          <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>\n             <artifactId>geronimo-jpa_2.0_spec</artifactId>\n             <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n+          </dependency>\n+          <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-kernel</artifactId>\n             <version>${pom.version}</version>\n-        </dependency>\n+          </dependency>\n+        </dependencies>\n+      </profile>\n+    </profiles>\n+\n+    <dependencies>\n         <dependency>\n             <groupId>org.apache.derby</groupId>\n             <artifactId>derby</artifactId>"},{"sha":"5e4cb13f63755ac7fe04c9f05b89183794ed4414","filename":"openjpa-integration/tck/tck2.xml","status":"added","additions":403,"deletions":0,"changes":403,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/tck/tck2.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/tck/tck2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/tck2.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,403 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+\n+<!--\n+    This ANT build file is used to run the JPA 2.0 TCK. It assumes that you have\n+    the TCK and patches zip files located at:\n+\n+        ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009.zip\n+        ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009_patches.zip\n+\n+    If you have that file in a different location, it can be specified with\n+    the \"tck.zip\" and \"tck_patches.zip\" system property.\n+\n+    The TCK running process will do the following:\n+        1. Fine the TCK zip file and extract it\n+        2. Create an openjpa-provider.properties file with the OpenJPA config\n+        3. Modify the TCK's main configuration file (ts.jte) to use OpenJPA\n+        4. Run the database initialization script\n+        5. Run the TCK script\n+        6. Parse the TCK result log to determine to fail the build or not\n+\n+    Other options are documented in the Maven pom.xml which calls this script.\n+-->\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project name=\"JPA2TCK\" default=\"run-tck\">\n+\n+\n+    <!--\n+        Target:  init\n+        Description:  This initializes required properties and validates that\n+                      required TCK zip files are present on the system and\n+                      then extracts them.\n+     -->\n+    <target name=\"init\">\n+        <property name=\"tck.level\" value=\"jpatck-2.0_09-Dec-2009\" />\n+        <property name=\"tck.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}.zip\" />\n+        <available property=\"tck.available\" file=\"${tck.zip}\" />\n+        <fail unless=\"tck.available\">The TCK file specified in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n+\n+        <property name=\"tck_patches.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}_patches.zip\" />\n+        <available property=\"tck_patches.available\" file=\"${tck_patches.zip}\" />\n+        <fail unless=\"tck_patches.available\">The TCK patches file specified in the \"tck_patches.zip\" system property (${tck_patches.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n+\n+        <delete dir=\"${tck.dir}\" />\n+        <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n+        <unzip overwrite=\"true\" src=\"${tck_patches.zip}\" dest=\"${tck.base}\" />\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.dir}/bin/ts.jte.orig\" />\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jtx\" tofile=\"${tck.dir}/bin/ts.jtx.orig\" />\n+        <!-- Pluggability tests using Toplink needs this dir created -->\n+        <mkdir dir=\"${tck.dir}/domains/domain1/logs\" />\n+    </target>\n+\n+\n+    <!--\n+        Target:  setup\n+        Description:  This updates the TCK configuration for OpenJPA.\n+     -->\n+    <target name=\"setup\">\n+        <property name=\"db.name\" value=\"derby\" />\n+        <property name=\"db.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" />\n+        <property name=\"db.url\" value=\"jdbc:derby:derby-database;create=true\" />\n+        <property name=\"db.username\" value=\"nousername\" />\n+        <property name=\"db.password\" value=\"nopassword\" />\n+\n+        <property name=\"openjpa.log.level\" value=\"WARN\" />\n+\n+        <property name=\"jpatck.test\" value=\"\" />\n+\n+        <property name=\"tck.reports\" value=\"${tck.base}/reports\" />\n+        <property name=\"tck.work\" value=\"${tck.base}/work\" />\n+\n+        <property name=\"openjpa.properties\" value=\"${tck.dir}/openjpa-provider.properties\" />\n+        <property name=\"toplink.properties\" value=\"${tck.dir}/bin/toplink-provider.properties\" />\n+        <!-- create the OpenJPA properties for the TCK run -->\n+        <echo append=\"false\" file=\"${openjpa.properties}\">\n+javax.persistence.provider: org.apache.openjpa.persistence.PersistenceProviderImpl\n+openjpa.ConnectionDriverName: ${db.driver}\n+openjpa.ConnectionURL: ${db.url}\n+openjpa.ConnectionUserName: ${db.username}\n+openjpa.ConnectionPassword: ${db.password}\n+openjpa.FetchBatchSize: -1\n+openjpa.Compatibility: StrictIdentityValues=true\n+openjpa.Sequence: time\n+openjpa.Log: DefaultLevel=${openjpa.log.level}\n+openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=true\n+openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n+openjpa.jdbc.SynchronizeMappings: buildSchema(ForeignKeys=true)\n+        </echo>\n+\n+        <!-- Append OpenJPA-specific configuration -->\n+        <property name=\"jpatck.config\" value=\"${tck.dir}/bin/ts.jte\" />\n+\n+        <echo append=\"false\" file=\"${jpatck.config}.tmp\">\n+\n+\n+#########################################################################\n+## OpenJPA specific properties follow\n+#########################################################################\n+\n+jpa.home=${tck.dir}\n+work.dir=${tck.work}\n+report.dir=${tck.reports}\n+jpa.classes=${cp.property}\n+# jpa.classes includes Derby, so only set database.classes for other DBs\n+database.classes=\n+# different properties needed for pluggability bucket\n+openjpa.properties=${openjpa.properties}\n+toplink.properties=${toplink.properties}\n+# Need to specify java.* classes, both in Windows/UNIX locations as well as Mac.\n+# This includes a few different possible locations; only one of them needs to \n+# actually work for a given environment.\n+sigTestClasspath=${JAVA_HOME}/lib/rt.jar${path.separator}${JAVA_HOME}/jre/lib/rt.jar${path.separator}${JAVA_HOME}/../Classes/classes.jar${path.separator}$${jpa.classes}\n+persistence.unit.properties.file.full.path=${provider.properties}\n+database.user=${db.username}\n+database.passwd=${db.password}\n+database.url=${db.url}\n+database.driver=${db.driver}\n+databaseName=${db.name}\n+\n+        </echo>\n+\n+        <!-- convert backslashes and known paths with spaces\n+            to get around a problem with the TCK testrunner \n+            on windows -->\n+        <echo>Update directory paths if running on Windows</echo>\n+        <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" replacefilterfile=\"windows-replacefilter.properties\" />\n+\n+        <!-- append our updated config properties to a clean ts.jte -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte.orig\" tofile=\"${tck.dir}/bin/ts.jte\" />\n+        <concat append=\"true\" destfile=\"${jpatck.config}\">\n+            <fileset file=\"${jpatck.config}.tmp\" />\n+        </concat>\n+\n+        <path id=\"agent.path\">\n+            <fileset dir=\"../../openjpa/target\">\n+                <include name=\"*.jar\" />\n+                <exclude name=\"*-sources.jar\" />\n+                <exclude name=\"original-*.jar\" />\n+                <exclude name=\"*-tests.jar\" />\n+                <exclude name=\"*-javadoc.jar\" />\n+            </fileset>\n+        </path>\n+        <pathconvert dirsep=\"/\" property=\"agent\" refid=\"agent.path\" />\n+        <property name=\"agent.properties\" value=\"\" />\n+        <echo>AGENT: ${agent}${agent.properties}</echo>\n+\n+        <!--\n+            Add in a javaagent argument (optional in JPA2 TCK.)\n+            Also, we need to specify the default MetaDataFactory\n+            inorder to allow tests that don't have any\n+            persistent classes to work (like the SignatureTest)\n+        -->\n+        <replace file=\"${jpatck.config}\">\n+            <replacefilter token=\"-Ddeliverable.class=${deliverable.class}\" value=\"-Ddeliverable.class=${deliverable.class} -javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\"/>\n+        </replace>\n+\n+        <!-- Fix path for java.security.policy -->\n+        <replace file=\"${jpatck.config}\">\n+            <replacefilter token=\"-Djava.security.policy=${bin.dir}/harness.policy\" value=\"-Djava.security.policy=${ts.home}/bin/harness.policy\"/>\n+        </replace>\n+\n+        <!-- cleanup reports/work dirs from any prior runs -->\n+        <delete dir=\"${tck.reports}\" />\n+        <delete dir=\"${tck.work}\" />\n+        <echo>Logging JPA 2.0 TCK output to ${tck.log}</echo>\n+    </target>\n+\n+\n+    <!--\n+        Macro for the TCK harness launcher\n+    -->\n+    <macrodef name=\"tsant\">\n+        <attribute name=\"buildfile\" />\n+        <attribute name=\"target\" />\n+        <sequential>\n+            <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"false\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\" resultproperty=\"tsant.result\">\n+                <arg value=\"-emacs\" />\n+                <arg value=\"-buildfile\" />\n+                <arg value=\"@{buildfile}\" />\n+                <arg value=\"-listener\" />\n+                <arg value=\"com.sun.ant.TSBuildListener\" />\n+                <arg value=\"-logger\" />\n+                <arg value=\"com.sun.ant.TSLogger\" />\n+                <arg value=\"@{target}\" />\n+\n+                <env key=\"TS_HOME\" value=\"${tck.dir}\" />\n+                <sysproperty key=\"ts.home\" value=\"${tck.dir}\" />\n+\n+                <env key=\"ANT_HOME\" value=\"${tck.dir}/tools/ant\" />\n+                <sysproperty key=\"ant.home\" value=\"${tck.dir}/tools/ant\" />\n+\n+                <sysproperty key=\"pkg.dir\" value=\"${jpatck.pkg.dir}\" />\n+                <!--\n+                <sysproperty key=\"test\" value=\"${jpatck.test}\" />\n+                -->\n+\n+                <classpath>\n+                    <path refid=\"cp\" />\n+                    <fileset dir=\"${tck.dir}/tools/ant/lib\">\n+                        <include name=\"**/*.jar\" />\n+                    </fileset>\n+                    <fileset dir=\"${tck.dir}/lib\">\n+                        <include name=\"**/*.jar\" />\n+                    </fileset>\n+                </classpath>\n+            </java>\n+        </sequential>\n+    </macrodef>\n+\n+\n+    <!--\n+        Macro to determine how many tests passed/failed\n+    -->\n+    <macrodef name=\"results.count\">\n+        <!-- Figure out the Passed/Failed counts -->\n+        <sequential>\n+        <resourcecount property=\"count.passed\">\n+            <tokens>\n+                <concat>\n+                    <filterchain>\n+                        <tokenfilter>\n+                            <containsstring contains=\"Passed.\"/>\n+                        </tokenfilter>\n+                    </filterchain>\n+                    <fileset dir=\"${tck.reports}\" includes=\"summary.txt\" />\n+                </concat>\n+            </tokens>\n+        </resourcecount>\n+        <resourcecount property=\"count.failed\">\n+            <tokens>\n+                <concat>\n+                    <filterchain>\n+                        <tokenfilter>\n+                            <containsstring contains=\"Failed.\"/>\n+                        </tokenfilter>\n+                    </filterchain>\n+                    <fileset dir=\"${tck.reports}\" includes=\"summary.txt\" />\n+                </concat>\n+            </tokens>\n+        </resourcecount>\n+        <echo>TCK Results - Passed: ${count.passed}, Failed: ${count.failed}</echo>\n+        </sequential>\n+    </macrodef>\n+\n+\n+    <!--\n+        Target:  run-tck\n+        Description:  This is the main routine that runs the TCK, after\n+                      all other setup steps have been performed.\n+     -->\n+    <target name=\"run-tck\">\n+        <echo>Running Sun JPA 2.0 TCK - w/o Pluggability tests</echo>\n+        <echo>Init must have been called before running this target!</echo>\n+        <property name=\"jpatck.pkg.dir\" value=\"com\" />\n+        <property name=\"tck.log\" value=\"${tck.base}/openjpa-tck.log\" />\n+        <property name=\"provider.properties\" value=\"${openjpa.properties}\" />\n+\n+        <!-- call TCK setup with above run specific properties set -->\n+        <fail unless=\"OPENJPA_CLASSPATH\">The OPENJPA_CLASSPATH was not provided and needs to point to the required OpenJPA and Derby runtime jars.</fail>\n+        <antcall target=\"setup\">\n+            <param name=\"cp.property\" value=\"${OPENJPA_CLASSPATH}\" />\n+        </antcall>\n+\n+        <!-- Need to exclude Pluggability tests from a normal run,\n+            due to the need for Toplink.\n+        -->\n+        <echo append=\"false\" file=\"${tck.dir}/bin/ts.jtx\">\n+\n+## exclude pluggability tests for normal OpenJPA runs\n+com/sun/ts/tests/pluggability/contracts/Client.java#createContainerEntityManagerFactory_from_standalone\n+com/sun/ts/tests/pluggability/contracts/Client.java#getManagedClassNames_from_standalone\n+com/sun/ts/tests/pluggability/contracts/Client.java#getPersistenceProviderClassName_from_standalone\n+com/sun/ts/tests/pluggability/contracts/Client.java#getPersistenceUnitName_from_standalone\n+com/sun/ts/tests/pluggability/contracts/Client.java#getTransactionType_from_standalone\n+\n+        </echo>\n+\n+        <!-- backup our updated ts.jte for later debugging -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.base}/ts.jte.tck\" />\n+\n+        <!-- first initialize the database -->\n+        <echo>Calling TCK initdb.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n+        <echo>TCK initdb.xml returned result=${tsant.result}</echo>\n+\n+        <!-- now run the TCK -->\n+        <echo>Calling TCK build.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n+        <echo>TCK build.xml returned result=${tsant.result}</echo>\n+\n+        <!-- archive the results and check for test failures -->\n+        <antcall target=\"zip-artifacts\">\n+            <param name=\"results.name\" value=\"tck\" />\n+        </antcall> \n+    </target>\n+\n+\n+    <!--\n+        Target:  run-pluggability\n+        Description:  This runs just the pluggability bucket, which requires\n+                      us to add the toplink provider on the classpath\n+     -->\n+    <target name=\"run-pluggability\">\n+        <echo>Running Sun JPA 2.0 TCK - only Pluggability tests</echo>\n+        <echo>Init must have been called before running this target!</echo>\n+        <property name=\"jpatck.pkg.dir\" value=\"com/sun/ts/tests/pluggability\" />\n+        <property name=\"tck.log\" value=\"${tck.base}/openjpa-pluggability.log\" />\n+        <property name=\"provider.properties\" value=\"${toplink.properties}\" />\n+\n+        <!-- call TCK setup with above run specific properties set -->\n+        <fail unless=\"TOPLINK_CLASSPATH\">The TOPLINK_CLASSPATH was not provided and needs to point to the required Toplink, OpenJPA and Derby runtime jars.</fail>\n+        <antcall target=\"setup\">\n+            <param name=\"cp.property\" value=\"${TOPLINK_CLASSPATH}\" />\n+        </antcall>\n+\n+        <!-- backup our updated ts.jte for later debugging -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.base}/ts.jte.pluggability\" />\n+\n+        <!-- Restore any exclude file that was provided in the zip file -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jtx.orig\" tofile=\"${tck.dir}/bin/ts.jtx\" />\n+\n+        <!-- first initialize the database -->\n+        <echo>Calling TCK initdb.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n+        <echo>TCK initdb.xml returned result=${tsant.result}</echo>\n+\n+        <!-- now run the TCK -->\n+        <echo>Calling TCK build.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n+        <echo>TCK build.xml returned result=${tsant.result}</echo>\n+\n+        <!-- archive the results and check for test failures -->\n+        <antcall target=\"zip-artifacts\">\n+            <param name=\"results.name\" value=\"pluggability\" />\n+        </antcall> \n+    </target>\n+\n+\n+    <!--\n+        Target:  zip-artifacts\n+        Description:  Collects generic TCK test artifacts for debugging\n+     -->\n+    <target name=\"zip-artifacts\">\n+        <echo>Gathering test artifacts for Sun JPA 2.0 TCK</echo>\n+        <copy overwrite=\"true\"\n+            file=\"${tck.reports}/summary.txt\"\n+            tofile=\"${tck.base}/summary-${results.name}.txt\" />\n+        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-${results.name}-results.zip\" />\n+        <!-- archive the results -->\n+        <zip destfile=\"${tck.results.archive}\">\n+            <fileset dir=\"${tck.work}\" />\n+            <fileset dir=\"${tck.reports}\" />\n+            <fileset dir=\"${tck.base}\">\n+                <include name=\"*${results.name}.log\" />\n+                <include name=\"*${results.name}.txt\" />\n+                <include name=\"ts.jte.${results.name}\" />\n+            </fileset>\n+        </zip>\n+        <echo>Results archive at: ${tck.results.archive}</echo>\n+\n+        <!--\n+            The TCK's Java process doesn't actually fail when\n+            tests fail, so we need to parse the results file\n+            for a string indicating whether or not it passed.\n+        -->\n+        <results.count />\n+        <loadfile property=\"jpatck.results\" srcfile=\"${tck.work}/jtData/log.txt\" />\n+        <condition property=\"jpatck.failed\">\n+            <contains string=\"${jpatck.results}\" substring=\"Completed test run: not ok\" />\n+        </condition>\n+        <fail if=\"jpatck.failed\">Test Results (${results.name}):  FAILED ${count.failed} tests!</fail>\n+        <!-- else -->\n+        <echo>Test Results (${results.name}):  PASSED!</echo>\n+    </target>\n+\n+</project>\n+"},{"sha":"6f6ebe9cd66beec259c50a5c75b59c99d49d25c7","filename":"openjpa-integration/validation/pom.xml","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/validation/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/validation/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -26,7 +26,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n \n     <artifactId>openjpa-integration-validation</artifactId>\n@@ -61,7 +61,7 @@\n                 <dependency>\n                     <groupId>javax.validation</groupId>\n                     <artifactId>validation-api</artifactId>\n-                    <version>1.0.CR5</version>\n+                    <version>1.0.0.GA</version>\n                     <scope>test</scope>\n                 </dependency>\n                 -->\n@@ -139,14 +139,14 @@\n                 <dependency>\n                     <groupId>javax.validation</groupId>\n                     <artifactId>validation-api</artifactId>\n-                    <version>1.0.CR5</version>\n+                    <version>1.0.0.GA</version>\n                     <scope>test</scope>\n                 </dependency>\n-                <!-- Hibernate that implements 1.0.CR5 -->\n+                <!-- Hibernate that implements 1.0.0.GA -->\n                 <dependency>\n                     <groupId>org.hibernate</groupId>\n                     <artifactId>hibernate-validator</artifactId>\n-                    <version>4.0.0.CR1</version>\n+                    <version>4.0.0.GA</version>\n                     <scope>test</scope>\n                     <exclusions>\n                         <!-- force usage of the geronimo-jpa_2.0_spec -->\n@@ -187,18 +187,6 @@\n                         <enabled>true</enabled>\n                     </releases>\n                 </repository>\n-                <repository>\n-                    <id>snapshots.jboss.org</id>\n-                    <name>JBoss Repository</name>\n-                    <url>http://snapshots.jboss.org/maven2</url>\n-                    <layout>default</layout>\n-                    <snapshots>\n-                        <enabled>true</enabled>\n-                    </snapshots>\n-                    <releases>\n-                        <enabled>false</enabled>\n-                    </releases>\n-                </repository>\n             </repositories>\n         </profile>\n     </profiles>\n@@ -242,6 +230,19 @@\n \n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>"},{"sha":"a75df73bde3719371cd4d04f72077a159eb00a05","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,11 +22,12 @@\n import java.util.Map;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.spi.ValidationMode;\n+import javax.persistence.ValidationMode;\n import javax.validation.Validation;\n import javax.validation.ValidatorFactory;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.integration.validation.SimpleEntity;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;"},{"sha":"f08444ecba9d8e0905897c5fdd6d37a67cbda18b","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":24,"deletions":3,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -42,11 +42,14 @@\n         <dependency>\n             <groupId>javax.xml.bind</groupId>\n             <artifactId>jaxb-api</artifactId>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n         </dependency>\n         <dependency>\n             <groupId>com.sun.xml.bind</groupId>\n             <artifactId>jaxb-impl</artifactId>\n-            <scope>runtime</scope>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n         </dependency>\n         <dependency>\n             <groupId>hsqldb</groupId>\n@@ -56,7 +59,7 @@\n         <dependency>\n             <groupId>postgresql</groupId>\n             <artifactId>postgresql</artifactId>\n-            <version>8.3-603.jdbc3</version>\n+            <version>8.4-701.jdbc3</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>\n@@ -75,4 +78,22 @@\n             <scope>test</scope>\n         </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n </project>"},{"sha":"bbbacde0f14a62caeb96a2cffbee3e24f5f6fa86","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,6 +21,7 @@\n import javax.sql.DataSource;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierUtil;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.LRSSizes;\n import org.apache.openjpa.jdbc.kernel.UpdateManager;\n@@ -31,6 +32,7 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n import org.apache.openjpa.lib.jdbc.JDBCEvent;\n import org.apache.openjpa.lib.jdbc.JDBCListener;\n@@ -592,7 +594,7 @@\n      * Return the non-enlisted data source to use. If there is a valid\n      * non-xa connection factory configured, then it will be returned. Its\n      * default user name and password on calls to\n-     * {@link DataSource#getConnection} will be the specificed connection 2\n+     * {@link DataSource#getConnection} will be the specified connection 2\n      * user name and password. If those are null and the given context is\n      * non-null, its user name password will be used instead. If the context\n      * is null too, then the user name and password used to retrieve the first\n@@ -602,4 +604,23 @@\n      * @see #getDataSource\n      */\n     public DataSource getDataSource2(StoreContext ctx);\n+    \n+    /**\n+     * Gets the String constant that matches the {@link IdentifierUtil}\n+     * @return String-based name of the {@link IdentifierUtil}\n+     */\n+    public String getIdentifierUtil();\n+\n+    /**\n+     * Gets the {@link DBIdentifierUtil}\n+     * @return DBIdentifierUtil\n+     */\n+    public DBIdentifierUtil getIdentifierUtilInstance();\n+    \n+    /**\n+     * Sets the {@link DBIdentifierUtil}\n+     * @param util instance of the identifier utility\n+     */\n+    public void setIdentifierUtil(DBIdentifierUtil util);\n+\n }"},{"sha":"cbf41ae6fd273ebdbe2d7282d2064cf181e3f8ef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":43,"deletions":4,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -24,6 +24,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierUtil;\n import org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager;\n import org.apache.openjpa.jdbc.kernel.BatchingOperationOrderUpdateManager;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n@@ -40,15 +41,14 @@\n import org.apache.openjpa.jdbc.sql.DBDictionaryFactory;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.kernel.BrokerImpl;\n-import org.apache.openjpa.kernel.FinderCache;\n-import org.apache.openjpa.kernel.PreparedQueryCache;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.conf.IntValue;\n import org.apache.openjpa.lib.conf.ObjectValue;\n import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.StringListValue;\n import org.apache.openjpa.lib.conf.StringValue;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n import org.apache.openjpa.lib.jdbc.DecoratingDataSource;\n import org.apache.openjpa.lib.jdbc.JDBCListener;\n@@ -84,6 +84,7 @@\n     public ObjectValue mappingDefaultsPlugin;\n     public PluginValue driverDataSourcePlugin;\n     public MappingFactoryValue mappingFactoryPlugin;\n+    public ObjectValue identifierUtilPlugin;\n \n     // used internally\n     private String firstUser = null;\n@@ -333,6 +334,15 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         finderCachePlugin.setDynamic(true);\n         finderCachePlugin.setInstantiatingGetter(\"getFinderCacheInstance\");\n \n+        identifierUtilPlugin = addPlugin(\"jdbc.IdentifierUtil\", true);\n+        aliases = new String[] { \n+            \"default\", \"org.apache.openjpa.jdbc.identifier.DBIdentifierUtilImpl\" };\n+        identifierUtilPlugin.setAliases(aliases);\n+        identifierUtilPlugin.setDefault(aliases[0]);\n+        identifierUtilPlugin.setString(aliases[0]);\n+        identifierUtilPlugin.setInstantiatingGetter(\"getIdentifierUtilInstance\");\n+\n+        \n         // this static initializer is to get past a weird\n         // ClassCircularityError that happens only under IBM's\n         // JDK 1.3.1 on Linux from within the JRun ClassLoader;\n@@ -760,8 +770,22 @@ else if (factory2 && connectionFactory2.get() != ds)\n     public Object getConnectionFactory2() {\n         // override to configure data source\n         if (dataSource2 == null) {\n-            // superclass will lookup from JNDI. \n-            DataSource ds = (DataSource) super.getConnectionFactory2();\n+            // superclass will lookup from JNDI.\n+            Object obj = super.getConnectionFactory2();\n+            DataSource ds = null;\n+            if (obj != null) {\n+                if (obj instanceof DataSource) \n+                    ds = (DataSource) obj;\n+                else {\n+                    Log log = getLog(LOG_JDBC);\n+                    if (log.isTraceEnabled()) {\n+                        Localizer loc = Localizer.forPackage(JDBCConfigurationImpl.class);\n+                        log.trace(loc.get(\"unknown-datasource\", getConnectionFactory2Name(), \n+                            obj.getClass().getName()));\n+                    }\n+                }\n+            }\n+                \n             if (ds == null) {\n                 // the driver name is always required, so if not specified,\n                 // then no connection factory 2\n@@ -887,4 +911,19 @@ protected boolean isInvalidProperty(String propName) {\n                 return true; \n         return false;\n     }\n+    \n+    public String getIdentifierUtil() {\n+        return identifierUtilPlugin.getString();\n+    }\n+\n+    public DBIdentifierUtil getIdentifierUtilInstance() {\n+        if (identifierUtilPlugin.get() == null)\n+            identifierUtilPlugin.instantiate(DBIdentifierUtil.class, this);\n+        return (DBIdentifierUtil) identifierUtilPlugin.get();\n+    }\n+\n+    public void setIdentifierUtil(DBIdentifierUtil util) {\n+        identifierUtilPlugin.set(util);\n+    }\n+\n }"},{"sha":"b854e6b0d717ba355a57152982fcc7bbd96c16f6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":27,"deletions":9,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.openjpa.jdbc.conf;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.openjpa.conf.BrokerFactoryValue;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n@@ -37,14 +41,8 @@\n public class JDBCProductDerivation extends AbstractProductDerivation\n     implements OpenJPAProductDerivation {\n \n-    private static Set<String> supportedQueryHints = new HashSet<String>(2);\n-\n-    static {\n-        supportedQueryHints.add(MySQLDictionary.SELECT_HINT);\n-        supportedQueryHints.add(OracleDictionary.SELECT_HINT);\n-        supportedQueryHints = Collections.unmodifiableSet(supportedQueryHints);\n-    }\n-\n+    public static final String PREFIX = \"openjpa.jdbc\"; \n+    \n     public void putBrokerFactoryAliases(Map m) {\n         m.put(\"jdbc\", JDBCBrokerFactory.class.getName());\n     }\n@@ -62,8 +60,28 @@ public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         return false;\n     }\n     \n+    /**\n+     * Hint keys correspond to some (not all) bean-style mutable property name in JDBCFetchConfiguration.\n+     * The fully qualified key is prefixed with <code>openjpa.jdbc</code>.\n+     */\n+    private static Set<String> _hints = new HashSet<String>();\n+    static {\n+        _hints.add(PREFIX + \".EagerFetchMode\");\n+        _hints.add(PREFIX + \".FetchDirection\");\n+        _hints.add(PREFIX + \".TransactionIsolation\");\n+        _hints.add(PREFIX + \".JoinSyntax\");\n+        _hints.add(PREFIX + \".LRSSize\");\n+        _hints.add(PREFIX + \".ResultSetType\");\n+        _hints.add(PREFIX + \".SubclassFetchMode\");\n+        \n+        _hints.add(MySQLDictionary.SELECT_HINT);\n+        _hints.add(OracleDictionary.SELECT_HINT);\n+        \n+        _hints = Collections.unmodifiableSet(_hints);\n+    }\n+\n     @Override\n     public Set<String> getSupportedQueryHints() {\n-        return supportedQueryHints;\n+        return _hints;\n     }\n }"},{"sha":"1a7201dcada7b85e931ff7d41a9662801a0ccf7d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java","status":"renamed","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -16,25 +16,24 @@\n  * specific language governing permissions and limitations\n  * under the License.    \n  */\n-package org.apache.openjpa.writebehind;\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n \n /**\n- * Key used for entities in the WriteBehind Cache.\n+ * Default rule for column definition.  This rule disables delimiting of\n+ * column definitions.  Column definitions can be extremely tricky to \n+ * delimit correctly.  Blindly delimiting them causes failures on most\n+ * databases.  Where user defined types are concerned, generally they don't\n+ * need to be delimited and if so, they are more appropriately delimited\n+ * when they are specified.\n  */\n-public interface WriteBehindCacheKey {\n-    /**\n-     * Answers an integer hash for this key.\n-     * \n-     * @return integer hashcode\n-     */\n-    public int hashCode();\n+public class ColumnDefIdentifierRule extends DBIdentifierRule {\n \n-    /**\n-     * Return true if the supplied object is equal to this instance.\n-     * \n-     * @param obj\n-     *            object to compare\n-     * @return True if they are equal, otherwise false.\n-     */\n-    public boolean equals(Object obj);\n+    public ColumnDefIdentifierRule() {\n+        super();\n+        setName(DBIdentifierType.COLUMN_DEFINITION.toString());\n+        // Disable auto delimiting of column definition.\n+        setCanDelimit(false);\n+    }\n }","previous_filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheKey.java"},{"sha":"d629d165f0b98e0624beff2a4f39b4ffc9aef923","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","status":"added","additions":911,"deletions":0,"changes":911,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,911 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.identifier.Identifier;\n+import org.apache.openjpa.lib.identifier.IdentifierImpl;\n+\n+/**\n+ * Encapsulates a database identifier.  With a few exceptions, this class is \n+ * intended to treated as immutable.  \n+ */\n+public class DBIdentifier extends IdentifierImpl implements Cloneable, Identifier, Serializable {\n+\n+    /**\n+     * Database identifier types.\n+     */\n+    public enum DBIdentifierType {\n+        DEFAULT,\n+        TABLE,\n+        SCHEMA,\n+        CATALOG,\n+        DATABASE,\n+        COLUMN,\n+        COLUMN_DEFINITION,\n+        SEQUENCE,\n+        CONSTRAINT,\n+        INDEX,\n+        FOREIGN_KEY,\n+        CONSTANT,\n+        NULL\n+    }\n+    \n+    // Array for quick compound identifier determination.  Compound identifiers\n+    // can have multi-part names, such as {schema, table} and should be stored\n+    // as a QualifiedDBIdentifier.\n+    private static boolean _compoundIdentifier[] = new boolean[DBIdentifierType.values().length];\n+    \n+    static {\n+        _compoundIdentifier[DBIdentifierType.TABLE.ordinal()] = true;\n+        _compoundIdentifier[DBIdentifierType.COLUMN.ordinal()] = true;\n+        _compoundIdentifier[DBIdentifierType.SEQUENCE.ordinal()] = true;\n+        _compoundIdentifier[DBIdentifierType.CONSTRAINT.ordinal()] = true;\n+        _compoundIdentifier[DBIdentifierType.INDEX.ordinal()] = true;\n+    }\n+    \n+    private DBIdentifierType _type = DBIdentifierType.DEFAULT;\n+    \n+    /**\n+     * Special NULL indicator for db identifiers.\n+     */\n+    public static final DBIdentifier NULL = new DBIdentifier(DBIdentifierType.NULL);\n+    \n+    // All constructors are protected or private.  Static factory operations\n+    // should be used to construct new identifiers.\n+    protected DBIdentifier() {\n+    }\n+\n+    private DBIdentifier(DBIdentifierType type) {\n+        setType(type);\n+    }\n+\n+    protected DBIdentifier(String name, DBIdentifierType type) {\n+        setType(type);\n+        setName(name);\n+    }\n+\n+    protected DBIdentifier(String name, DBIdentifierType type, boolean delimit) {\n+        setType(type);\n+        setName(name, delimit);\n+    }\n+    \n+    protected DBIdentifier(String name, boolean delimit) {\n+        setName(name, delimit);\n+    }\n+\n+\n+    /**\n+     * Set the name of the identifier.\n+     */\n+    public void setName(String name) {\n+        setName(name, false);\n+    }\n+\n+    /**\n+     * Set the name of this identifier based upon a given identifier.\n+     */\n+    public void setName(DBIdentifier name) {\n+        assertNotNull();\n+        if (DBIdentifier.isNull(name)) {\n+            setNameInternal(null);\n+            setType(name.getType());\n+            return;\n+        }\n+        setNameInternal(name.getNameInternal());\n+        setType(name.getType());\n+    }\n+\n+    /**\n+     * Set the name of the identifier and optionally force delimiting of the identifier. \n+     */\n+    public void setName(String name, boolean delimit) {\n+        assertNotNull();\n+        \n+        // Normalize the name, if necessary.  Do not normalize constants or column definitions.\n+        if (DBIdentifierType.CONSTANT != getType() && DBIdentifierType.COLUMN_DEFINITION != getType()) {\n+            if (delimit) {\n+                name = Normalizer.delimit(name, true);\n+             } else {\n+                 name = Normalizer.normalizeString(name);\n+             }\n+        }\n+        super.setName(name);\n+    }\n+    \n+    /**\n+     * Set the type of the identifier\n+     * @param type\n+     */\n+    protected void setType(DBIdentifierType type) {\n+        _type = type;\n+    }\n+\n+    /**\n+     * Get the identifier type\n+     * @return the identifier type\n+     */\n+    public DBIdentifierType getType() {\n+        return _type;\n+    }\n+    \n+\n+    /**\n+     * Splits a string delimited by the specified delimiter of a given name type\n+     * into an array of DBIdentifier objects.\n+     * Example:  COL1|\"COL 2\"|COL3  delim=| --> DBIdentifier[]{ COL1, \"COL 2\", COL3 }\n+     * @param name\n+     * @param id\n+     * @param delim\n+     * @return\n+     */\n+    public static DBIdentifier[] split(String name, DBIdentifierType id, String delim) {\n+        \n+        if (!Normalizer.canSplit(name, delim)) {\n+            return new DBIdentifier[] { new DBIdentifier(name, id) };\n+        }\n+        \n+        String[] names = Normalizer.splitName(name, delim);\n+        if (names.length == 0) {\n+            return new DBIdentifier[] { };\n+        }\n+        DBIdentifier[] sNames = new DBIdentifier[names.length];\n+        for (int i = 0; i < names.length ; i++) {\n+            sNames[i] = new DBIdentifier(names[i], id);\n+        }\n+        return sNames;\n+    }\n+    \n+    /**\n+     * Joins the list of identifiers using the appropriate delimiters and\n+     * returns a string based identifier.\n+     * @param resultId\n+     * @param names\n+     * @return\n+     */\n+    public static String join(DBIdentifier...names) {\n+        if (names == null || names.length == 0) {\n+            return null;\n+        }\n+        String[] strNames = new String[names.length];\n+        for (int i = 0; i < names.length; i++) {\n+            strNames[i] = names[i].getNameInternal();\n+        }\n+        return Normalizer.joinNames(strNames);\n+    }\n+    /**\n+     * Splits a given DBIdentifier into multiple DBIdentifiers.  Uses the base name \n+     * type and heuristics to determine the types and placement of the resulting\n+     * components.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier[] split(DBIdentifierType resultType, String name) {\n+        \n+        String[] names = Normalizer.splitName(name);\n+        switch (names.length) {\n+            case 2:\n+                return getTwoPartIdentifier(names, resultType);\n+            case 3:\n+                return getThreePartIdentifier(names, resultType);\n+            case 4:\n+                return getFourPartIdentifier(names, resultType);\n+            default:\n+                return new DBIdentifier[] { new DBIdentifier(name, resultType) };\n+        }\n+    }\n+\n+    /*\n+     * Returns a two-part identifier based upon the base identifier type.\n+     */\n+    private static DBIdentifier[] getTwoPartIdentifier(String[] names, DBIdentifierType baseId) {\n+        DBIdentifier[] sNames = new DBIdentifier[2];\n+        DBIdentifierType id0 = DBIdentifierType.DEFAULT;\n+        DBIdentifierType id1 = baseId;\n+        if (baseId != DBIdentifierType.COLUMN &&\n+                baseId != DBIdentifierType.SCHEMA) {\n+            id0 = DBIdentifierType.SCHEMA;\n+        }\n+        else if (baseId == DBIdentifierType.COLUMN) {\n+            // Length 2, base name column\n+            id0 = DBIdentifierType.TABLE;\n+        }\n+        else if (baseId == DBIdentifierType.SCHEMA) {\n+            id0 = DBIdentifierType.DATABASE;\n+        }\n+        sNames[0] = new DBIdentifier(names[0], id0);\n+        sNames[1] = new DBIdentifier(names[1], id1);\n+        return sNames;\n+    }\n+\n+    /*\n+     * Returns a three-part identifier based upon the base identifier type.\n+     */\n+    private static DBIdentifier[] getThreePartIdentifier(String[] names, DBIdentifierType baseId) {\n+        DBIdentifier[] sNames = new DBIdentifier[3];\n+        DBIdentifierType id0 = DBIdentifierType.DEFAULT;\n+        DBIdentifierType id1 = DBIdentifierType.DEFAULT;\n+        DBIdentifierType id2 = baseId;\n+        if (baseId != DBIdentifierType.SCHEMA &&\n+            baseId != DBIdentifierType.COLUMN) {\n+            id0 = DBIdentifierType.DATABASE;\n+            id1 = DBIdentifierType.SCHEMA;\n+        }\n+        else if (baseId == DBIdentifierType.COLUMN) {\n+            // Length 2, base name column\n+            id0 = DBIdentifierType.SCHEMA;\n+            id1 = DBIdentifierType.TABLE;\n+        }\n+        sNames[0] = new DBIdentifier(names[0], id0);\n+        sNames[1] = new DBIdentifier(names[1], id1);\n+        sNames[2] = new DBIdentifier(names[2], id2);\n+        return sNames;\n+    }\n+\n+    /*\n+     * Returns a four-part identifier based upon the base identifier type.\n+     */\n+    private static DBIdentifier[] getFourPartIdentifier(String[] names, DBIdentifierType baseId) {\n+        DBIdentifier[] sNames = new DBIdentifier[4];\n+        DBIdentifierType id0 = DBIdentifierType.DEFAULT;\n+        DBIdentifierType id1 = DBIdentifierType.DEFAULT;\n+        DBIdentifierType id2 = DBIdentifierType.DEFAULT;\n+        DBIdentifierType id3 = baseId;\n+        if (baseId == DBIdentifierType.COLUMN) {\n+            id0 = DBIdentifierType.DATABASE;\n+            id1 = DBIdentifierType.SCHEMA;\n+            id2 = DBIdentifierType.TABLE;\n+        }\n+        sNames[0] = new DBIdentifier(names[0], id0);\n+        sNames[1] = new DBIdentifier(names[1], id1);\n+        sNames[2] = new DBIdentifier(names[2], id2);\n+        sNames[3] = new DBIdentifier(names[3], id3);\n+        return sNames;\n+    }\n+\n+    /**\n+     * Returns true if the identifier is null or the name is null or empty.\n+     * @param name\n+     * @return\n+     */\n+    public static boolean isEmpty(DBIdentifier name) {\n+        if (isNull(name)) {\n+            return true;\n+        }\n+        return StringUtils.isEmpty(name.getName());\n+    }\n+\n+    \n+    /**\n+     * Returns true if the identifier is null.\n+     * @param name\n+     * @return\n+     */\n+    public static boolean isNull(DBIdentifier name) {\n+        return (name == null || name.getType() == DBIdentifierType.NULL);\n+    }\n+\n+    /**\n+     * Clones an identifier using deep copy.\n+     */\n+    public DBIdentifier clone() {\n+        DBIdentifier sName = new DBIdentifier();\n+        sName.setNameInternal(getNameInternal());\n+        sName.setType(getType());\n+        return sName;\n+    }\n+    \n+    /*\n+     * Internal method to set the base name and avoid normalizing an already \n+     * normalized name.\n+     * @param name\n+     */\n+    private void setNameInternal(String name) {\n+        super.setName(name);\n+    }\n+\n+    /*\n+     * Internal method to get the base name. \n+     * normalized name.\n+     * @param name\n+     */\n+    private String getNameInternal() {\n+        return super.getName();\n+    }\n+\n+    /**\n+     * Returns a copy of an identifier with name trimmed to null.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier trimToNull(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        DBIdentifier sName = name.clone();\n+        sName.setNameInternal(StringUtils.trimToNull(sName.getNameInternal()));\n+        return sName;\n+    }\n+\n+    /**\n+     * Equality operation for identifiers.  Supports comparison with strings\n+     * and objects of this type.\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof DBIdentifier) {\n+            DBIdentifier sName = (DBIdentifier)obj;\n+            return this.equals(sName, false);\n+        } else if (obj instanceof String) {\n+            return obj.equals(this.getNameInternal());\n+        }\n+        throw new IllegalArgumentException(\"Unsupported type comparison: \" + obj.getClass().getName());\n+    }\n+\n+    /**\n+     * Returns true if this object is NULL or has a null name component.\n+     * @return\n+     */\n+    public boolean isNull() {\n+        return (_type == DBIdentifierType.NULL || getName() == null);\n+    }\n+\n+    /**\n+     * Comparison operator for identifiers.\n+     */\n+    public int compareTo(Identifier o) {\n+        if (o instanceof DBIdentifier) {\n+            if (this == DBIdentifier.NULL && (o == null || o == DBIdentifier.NULL)) {\n+                return 0;\n+            }\n+            if (this == DBIdentifier.NULL)\n+                return 1;\n+            if (o == null || o == DBIdentifier.NULL)\n+                return -1;\n+        }\n+        return super.compareTo(o);\n+    }\n+    \n+\n+    /**\n+     * Converts the provided set of names to an array of identifiers of the \n+     * provided type\n+     * @param columnNames\n+     * @param id\n+     * @return\n+     */\n+    public static DBIdentifier[] toArray(String[] columnNames, DBIdentifierType id) {\n+        return toArray(columnNames, id, false);\n+    }\n+\n+    /**\n+     * Converts the provided set of names to an array of identifiers of the \n+     * provided type, optionally delimiting the names.\n+     * @param columnNames\n+     * @param id\n+     * @return\n+     */\n+    public static DBIdentifier[] toArray(String[] names, DBIdentifierType id, boolean delimit) {\n+        if (names == null) {\n+            return null;\n+        }\n+        DBIdentifier[] sNames = new DBIdentifier[names.length];\n+        for (int i = 0; i < names.length; i++) {\n+            sNames[i] = new DBIdentifier(names[i], id, delimit);\n+        }\n+        return sNames;\n+    }\n+    \n+    /**\n+     * Returns a string array of names based upon the provided set of identifiers.\n+     * @param sNames\n+     * @return\n+     */\n+    public static String[] toStringArray(DBIdentifier[] sNames) {\n+        if (sNames == null) {\n+            return null;\n+        }\n+        String[] names = new String[sNames.length];\n+        for (int i = 0; i < sNames.length; i++) {\n+            names[i] = sNames[i].getName();\n+        }\n+        return names;\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Catalog.\n+     */\n+    public static DBIdentifier newCatalog(String name) {\n+        return newIdentifier(name, DBIdentifierType.CATALOG);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Catalog ,optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newCatalog(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.CATALOG, false, delimit);\n+    }\n+    \n+    /**\n+     * Constructs a new identifier of type Table.\n+     */\n+    public static DBIdentifier newTable(String name) {\n+        return newIdentifier(name, DBIdentifierType.TABLE);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Table, optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newTable(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.TABLE, false, delimit);\n+    }\n+    \n+    /**\n+     * Constructs a new identifier of type Column.\n+     */\n+    public static DBIdentifier newColumn(String name) {\n+        return newIdentifier(name, DBIdentifierType.COLUMN);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Column,optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newColumn(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.COLUMN, false, delimit);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Schema.\n+     */\n+    public static DBIdentifier newSchema(String name) {\n+        return newIdentifier(name, DBIdentifierType.SCHEMA);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Schema, optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newSchema(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.SCHEMA, false, delimit);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Index.\n+     */\n+    public static DBIdentifier newIndex(String name) {\n+        return newIdentifier(name, DBIdentifierType.INDEX);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Index, optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newIndex(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.INDEX, false, delimit);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Sequence.\n+     */\n+    public static DBIdentifier newSequence(String name) {\n+        return newIdentifier(name, DBIdentifierType.SEQUENCE);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Sequence, optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newSequence(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.SEQUENCE, false, delimit);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type ForeignKey.\n+     */\n+    public static DBIdentifier newForeignKey(String name) {\n+        return newIdentifier(name, DBIdentifierType.FOREIGN_KEY);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type ForeignKey, optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newForeignKey(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.FOREIGN_KEY, false, delimit);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Constraint.\n+     */\n+    public static DBIdentifier newConstraint(String name) {\n+        return newIdentifier(name, DBIdentifierType.CONSTRAINT);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Constraint, optionally delimiting\n+     * the name.\n+     */\n+    public static DBIdentifier newConstraint(String name, boolean delimit) {\n+        return newIdentifier(name, DBIdentifierType.CONSTRAINT, false, delimit);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Constant.\n+     */\n+    public static DBIdentifier newConstant(String name) {\n+        return newIdentifier(name, DBIdentifierType.CONSTANT);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Column Definition.\n+     */\n+    public static DBIdentifier newColumnDefinition(String name) {\n+        return newIdentifier(name, DBIdentifierType.COLUMN_DEFINITION);\n+    }\n+\n+    /**\n+     * Constructs a new identifier of type Default.\n+     */\n+    public static DBIdentifier newDefault(String name) {\n+        return newIdentifier(name, DBIdentifierType.DEFAULT);\n+    }\n+\n+    /**\n+     * Constructs a new identifier with the provided name and type\n+     */\n+    protected static DBIdentifier newIdentifier(String name, DBIdentifierType id) {\n+        return newIdentifier(name, id, false, false);\n+    }\n+\n+    /**\n+     * Constructs a new identifier with the provided name an type. Optionally,\n+     * converting the name to upper case.\n+     */\n+    public static DBIdentifier newIdentifier(String name, DBIdentifierType id, boolean toUpper) {\n+        return newIdentifier(name, id, toUpper, false );\n+    }\n+\n+    /**\n+     * Constructs a new identifier (potentially a compound QualifiedDBIdentifier) with the provided \n+     * name an type. Optionally, converting the name to upper case and delimiting it.\n+     */\n+    protected static DBIdentifier newIdentifier(String name, DBIdentifierType id, boolean toUpper, boolean delimit) {\n+        if (name == null) {\n+            return DBIdentifier.NULL;\n+        }\n+        \n+        DBIdentifier dbId = DBIdentifier.NULL;\n+        // Create a DBIDentifier for single component names.  Otherwise, create a QualifiedDBIdentifier.\n+        if (!_compoundIdentifier[id.ordinal()] || delimit) {\n+            dbId = new DBIdentifier(name, id, delimit);\n+            if (toUpper) {\n+                return toUpper(dbId);\n+            }\n+        } else {\n+            // Name can be split. Break it up into components and return a path\n+            DBIdentifier[] sNames = DBIdentifier.split(id, name);\n+            dbId = new QualifiedDBIdentifier(sNames);\n+        }\n+        return dbId;\n+    }\n+\n+    /**\n+     * Static equality method for comparing two identifiers.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static boolean equal(DBIdentifier name1, DBIdentifier name2) {\n+        boolean name1Null = DBIdentifier.isNull(name1);\n+        if (name1Null && DBIdentifier.isNull(name2)) {\n+            return true;\n+        }\n+        if (name1Null) {\n+            return false;\n+        }\n+        return ((DBIdentifier)name1).equals(name2, false);\n+    }\n+\n+    \n+    private void assertNotNull() {\n+        if (this == DBIdentifier.NULL || getType() == DBIdentifierType.NULL) {\n+            throw new IllegalStateException(\"Cannot modify NULL instance\");\n+        }\n+    }\n+    \n+    /**\n+     * Returns a new DBIdentifier truncated to length\n+     * @param name\n+     * @param length\n+     * @return\n+     */\n+    public static DBIdentifier truncate(DBIdentifier name, int length) {\n+        DBIdentifier sName = name.clone();\n+        String strName = sName.getNameInternal();\n+        if (StringUtils.isEmpty(strName)) {\n+            return sName;\n+        }\n+        strName = Normalizer.truncate(strName, length);\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new DBIdentifier with the given string appended.\n+     * @param name\n+     * @param length\n+     * @return\n+     */\n+    public static DBIdentifier append(DBIdentifier name, String str) {\n+        DBIdentifier sName = name.clone();\n+        String strName = sName.getNameInternal();\n+        strName = Normalizer.append(strName, str);\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new DBIdentifier with the given string combined using \n+     * delimiting rules and appropriate separators.\n+     * @param name\n+     * @param length\n+     * @return\n+     */\n+    public static DBIdentifier combine(DBIdentifier name, String str) {\n+        DBIdentifier sName = name.clone();\n+        String strName = sName.getNameInternal();\n+        strName = Normalizer.combine(strName, str);\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new DBIdentifier converted to lower case - if not delimited.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier toLower(DBIdentifier name) {\n+        return toLower(name, false);\n+    }\n+    \n+    /**\n+     * Returns a new DBIdentifier converted to lower case.  If delimited,\n+     * force to lower case using force option.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier toLower(DBIdentifier name, boolean force) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        DBIdentifier sName = name.clone();\n+        if (sName.getNameInternal() == null) {\n+            return sName;\n+        }\n+        // Do not convert delimited names to lower case.  They may have\n+        // been delimited to preserve case.\n+        if (force || !Normalizer.isDelimited(sName.getNameInternal())) {\n+            sName.setNameInternal(sName.getNameInternal().toLowerCase());\n+        }\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new DBIdentifier converted to upper case - if not delimited.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier toUpper(DBIdentifier name) {\n+        return toUpper(name, false);\n+    }\n+\n+    /**\n+     * Returns a new DBIdentifier converted to upper case.  If delimited,\n+     * force to upper case using force option.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier toUpper(DBIdentifier name, boolean force) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        DBIdentifier sName = name.clone();\n+        if (sName.getNameInternal() == null) {\n+            return sName;\n+        }\n+        // Do not convert delimited names to upper case.  They may have\n+        // been delimited to preserve case.\n+        if (force || !Normalizer.isDelimited(sName.getNameInternal())) {\n+            sName.setNameInternal(sName.getNameInternal().toUpperCase());\n+        }\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new DBIdentifier with the specified leading string removed.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier removeLeading(DBIdentifier name, String leadingStr) {\n+        DBIdentifier sName = name.clone();\n+        if (isEmpty(sName)) {\n+            return sName;\n+        }\n+        String strName = sName.getNameInternal();\n+        int leadingLen = leadingStr.length();\n+        while (strName.startsWith(leadingStr)) {\n+            strName = strName.substring(leadingLen);\n+        }\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+    \n+    /**\n+     * Returns a new DBIdentifier with Hungarian notation removed.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier removeHungarianNotation(DBIdentifier name) {\n+        DBIdentifier hName = name.clone();\n+        if (isEmpty(hName)) {\n+            return hName;\n+        }\n+        String strName = hName.getNameInternal();\n+        strName = Normalizer.removeHungarianNotation(strName);\n+        hName.setNameInternal(strName);\n+        return hName;\n+    }\n+\n+    /**\n+     * Equality operator which ignores case.\n+     * @param name\n+     * @return\n+     */\n+   public boolean equalsIgnoreCase(DBIdentifier name) {\n+       return equals(name, true);\n+   }\n+\n+   /**\n+    * Static equality operator which ignores case.\n+    * @param name\n+    * @return\n+    */\n+    public static boolean equalsIgnoreCase(DBIdentifier name1, DBIdentifier name2) {\n+        boolean name1Null = DBIdentifier.isNull(name1);\n+        if (name1Null && DBIdentifier.isNull(name2)) {\n+            return true;\n+        }\n+        if (name1Null) {\n+            return false;\n+        }\n+        return name1.equals(name2, true);\n+    }\n+\n+    private boolean equals(DBIdentifier sName, boolean ignoreCase) {\n+        if (sName.getNameInternal() == null && getNameInternal() == null) {\n+            return true;\n+        }\n+        if (getNameInternal() == null) {\n+            return false;\n+        }\n+        if (ignoreCase || !Normalizer.isDelimited(getNameInternal())) {\n+            return getNameInternal().equalsIgnoreCase(sName.getNameInternal());\n+        }\n+        return getNameInternal().equals(sName.getNameInternal());\n+    }\n+\n+    /**\n+     * Returns a new identifier with a combined prefix and name using the standard name\n+     * concatenation character ('_').\n+     * @param prefix\n+     */\n+    public static DBIdentifier preCombine(DBIdentifier name, String prefix) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        DBIdentifier sName = name.clone();\n+        String strName = sName.getNameInternal();\n+        strName = Normalizer.combine(prefix, strName);\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new identifier with delimiters removed.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier removeDelimiters(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        DBIdentifier sName = name.clone();\n+        if (isEmpty(sName)) {\n+            return sName;\n+        }\n+        String strName = sName.getNameInternal();\n+        strName = Normalizer.removeDelimiters(strName);\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+\n+    /**\n+     * Returns a new delimiter with leading and trailing spaces removed.\n+     * @param name\n+     * @return\n+     */\n+    public static DBIdentifier trim(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        DBIdentifier sName = name.clone();\n+        if (isEmpty(sName)) {\n+            return sName;\n+        }\n+        String strName = sName.getNameInternal();\n+        strName = strName.trim();\n+        sName.setNameInternal(strName);\n+        return sName;\n+    }\n+\n+    /**\n+     * The length of the name, including delimiting characters.\n+     */\n+    public int length() {\n+        if (DBIdentifier.isNull(this)) {\n+            return 0;\n+        }\n+        return super.length();\n+    }\n+\n+    /**\n+     * Returns true if the identifier is delimited.\n+     */\n+    public boolean isDelimited() {\n+        if (DBIdentifier.isEmpty(this)) {\n+            return false;\n+        }\n+        return Normalizer.isDelimited(getNameInternal());\n+    }\n+\n+    /**\n+     * Combines an array of names names using standard combining rules and\n+     * returns an identifier of the specified type.\n+     */\n+    public static DBIdentifier combine(DBIdentifierType id, String...names) {\n+        return newIdentifier(Normalizer.combine(names), id);\n+    }\n+\n+    /**\n+     * Returns the unqualified name of this identifier.\n+     */\n+    public DBIdentifier getUnqualifiedName() {\n+        return this;\n+    }\n+}"},{"sha":"1a49fcb23560ec54cce6f1333d8065fdc0d6ae9c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierRule.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierRule.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierRule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierRule.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import java.util.Set;\n+\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n+import org.apache.openjpa.lib.identifier.IdentifierRule;\n+\n+/**\n+ * The default DBIdentifier rule.  Closely matches SQL92 naming rules.\n+ */\n+public class DBIdentifierRule extends IdentifierRule {\n+    \n+    public static final String DEFAULT_SQL_92 = \"DefaultSQL92\";\n+    \n+    public static final String SPECIAL_CHARS = \" #$&%!?,.:;\\\"\\'\";\n+    \n+    public DBIdentifierRule() {\n+        setName(DEFAULT_SQL_92);\n+        // SQL92 Identifier rule 1) Can be up to 128 characters long\n+//        setMaxLength(128);\n+        // OpenJPA allows names with a length of 255 by default\n+        setMaxLength(255);\n+        // SQL92 Identifier rule 2) Must begin with a letter\n+        setMustBeginWithLetter(true);\n+        // SQL92 Identifier rule 3) Can contain letters, digits, and underscores\n+        setOnlyLettersDigitsUnderscores(true);\n+        // SQL Identifier rule 4) Can't contain spaces or special characters such \n+        // as #, $, &, %, or punctuation.\n+        setSpecialCharacters(SPECIAL_CHARS);\n+    }\n+\n+    public DBIdentifierRule(DBIdentifierType id, Set<String> reservedWords) {\n+        this();\n+        setName(id.toString());\n+        // SQL Identifier rule 5) Can't be reserved words\n+        setReservedWords(reservedWords);\n+    }\n+}"},{"sha":"755ddf07bebc6a7296398db3b18ddc029cbf911c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtil.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtil.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtil.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.NameSet;\n+import org.apache.openjpa.jdbc.schema.Schema;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n+\n+import static org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n+\n+/**\n+ * An interface for DB identifier utility-style operations.  This interface\n+ * extends the basic operations provided by IdentifierUtil with additional\n+ * operations those specific to DBIdentifiers and identifier conversion.\n+ */\n+public interface DBIdentifierUtil extends IdentifierUtil {\n+\n+    // Legacy values for naming operations\n+    public static final int ANY = 0;\n+    public static final int TABLE = 1;\n+    public static final int SEQUENCE = 2;\n+    public static final int COLUMN = 3;\n+\n+    /**\n+     * Shortens the given name to the given maximum length, then checks that\n+     * it is not a reserved word. If it is reserved, appends a \"0\". If\n+     * the name conflicts with an existing schema component and uniqueness\n+     * checking is enabled, the last character is replace with '0', then \n+     * '1', etc. \n+     * Note that the given max len may be 0 if the database metadata is \n+     * incomplete.\n+     * \n+     * Note: If the name is delimited, make sure the ending delimiter is\n+     * not stripped off.\n+     */\n+    public DBIdentifier makeIdentifierValid(DBIdentifier sname, NameSet set, int maxLen,\n+        boolean checkForUniqueness);\n+\n+    /**\n+     * Shortens the given name to the given maximum length, then checks that\n+     * it is not a reserved word. If it is reserved, appends a \"0\". If\n+     * the name conflicts with an existing schema component and uniqueness\n+     * checking is enabled, the last character is replace with '0', then \n+     * '1', etc. \n+     * Note that the given max len may be 0 if the database metadata is \n+     * incomplete.\n+     * \n+     * Note: If the name is delimited, make sure the ending delimiter is\n+     * not stripped off.\n+     */\n+    public DBIdentifier makeNameValid(String name, NameSet set, int maxLen,\n+        int nameType, boolean checkForUniqueness);\n+\n+    /**\n+     * Returns a valid column name/identifier, based upon the configuration and\n+     * provided parameters.\n+     * @param name\n+     * @param table\n+     * @param maxLen\n+     * @param checkForUniqueness\n+     * @return\n+     */\n+    public DBIdentifier getValidColumnIdentifier(DBIdentifier name, Table table, int maxLen, \n+        boolean checkForUniqueness);\n+    \n+    /**\n+     * Returns a valid index identifier, based upon the configuration and\n+     * provided parameters.\n+     * @param name\n+     * @param table\n+     * @param maxLen\n+     * @param checkForUniqueness\n+     * @return\n+     */\n+    public DBIdentifier getValidIndexIdentifier(DBIdentifier name, Table table, int maxLen);\n+\n+    /**\n+     * Returns a valid index identifier, based upon the configuration and\n+     * provided parameters.\n+     * @param name\n+     * @param table\n+     * @param maxLen\n+     * @param checkForUniqueness\n+     * @return\n+     */\n+    public DBIdentifier getValidSequenceIdentifier(DBIdentifier name, Schema schema, int maxLen);\n+    \n+    /**\n+     * Returns a valid table identifier, based upon the configuration and provided\n+     * parameters.\n+     * @param name\n+     * @param schema\n+     * @param maxLen\n+     * @return\n+     */\n+    public DBIdentifier getValidTableIdentifier(DBIdentifier name, Schema schema, int maxLen);\n+\n+    /**\n+     * Returns a valid unique constraint identifier, based upon the configuration and\n+     * provided parameters.\n+     * @param name\n+     * @param table\n+     * @param maxLen\n+     * @return\n+     */\n+    public DBIdentifier getValidUniqueIdentifier(DBIdentifier name, Table table, int maxLen);\n+\n+    /**\n+     * Returns a valid foreign key identifier, based upon the configuration and\n+     * provided parameters.\n+     * @param name\n+     * @param table\n+     * @param toTable\n+     * @param maxLen\n+     * @return\n+     */\n+    public DBIdentifier getValidForeignKeyIdentifier(DBIdentifier name, Table table, Table toTable, int maxLen);\n+\n+    /**\n+     * Converts the specified identifier to a format required by the database.\n+     * @param name\n+     * @return\n+     */\n+    public String toDBName(DBIdentifier name);\n+\n+    /**\n+     * Converts the specified identifier to a format required by the database, \n+     * optionally delimiting the name.\n+     * @param name\n+     * @param delimit\n+     * @return\n+     */\n+    public String toDBName(DBIdentifier name, boolean delimit);\n+\n+    /**\n+     * Converts the specified string to a format required by the database.\n+     * @param name\n+     * @return\n+     */\n+    public String toDBName(String name);\n+\n+    /**\n+     * Converts the specified string to a format required by the database,\n+     * optionally delimiting the name.\n+     * @param name\n+     * @return\n+     */\n+    public String toDBName(String name, boolean delimit);\n+\n+    /**\n+     * Converts the name returned by the database to an identifier of the\n+     * specified type.\n+     * @param name\n+     * @return\n+     */\n+    public DBIdentifier fromDBName(String name, DBIdentifierType id);\n+\n+    /**\n+     * Appends multiple columns names together into comma delimited string.\n+     * @param columns\n+     * @return\n+     */\n+    public String appendColumns(Column[] columns);\n+\n+    /**\n+     * Converts the name of the specified delimiter to the appropriate\n+     * case as defined by the configuration.\n+     * @param columns\n+     * @return\n+     */\n+    public DBIdentifier convertSchemaCase(DBIdentifier schema);\n+\n+    /**\n+     * Appends multiple names together using the appropriate name delimiter.\n+     * @param resultId\n+     * @param names\n+     * @return\n+     */\n+    public DBIdentifier append(DBIdentifierType resultId, DBIdentifier...names);\n+\n+    /**\n+     * Returns a generated key sequence identifier for the column.\n+     * @param col\n+     * @param maxLen\n+     * @return\n+     */\n+    public DBIdentifier getGeneratedKeySequenceName(Column col, int maxLen);\n+\n+    /**\n+     * Converts a provided alias to a format specified in the configuration.\n+     * @param alias\n+     * @return\n+     */\n+    public String convertAlias(String alias);\n+}"},{"sha":"ba292dca488bddd414e5b5b24e54688e252044b6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java","status":"added","additions":484,"deletions":0,"changes":484,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.NameSet;\n+import org.apache.openjpa.jdbc.schema.Schema;\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.conf.Configurable;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.identifier.IdentifierConfiguration;\n+import org.apache.openjpa.lib.identifier.IdentifierRule;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n+import org.apache.openjpa.lib.identifier.IdentifierUtilImpl;\n+\n+public class DBIdentifierUtilImpl extends IdentifierUtilImpl implements DBIdentifierUtil,\n+    Configurable {\n+    \n+    private JDBCConfiguration _conf = null;\n+\n+    public DBIdentifierUtilImpl() {\n+    }\n+    \n+    public DBIdentifierUtilImpl(IdentifierConfiguration config) {\n+        super(config);\n+    }\n+    \n+    public DBIdentifier getValidColumnIdentifier(DBIdentifier name, Table table,\n+        int maxLen, boolean checkForUniqueness) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        String rule = name.getType().name();\n+        maxLen = getMaxLen(rule, name, maxLen);\n+\n+        DBIdentifier sName = DBIdentifier.removeLeading(name, IdentifierUtil.UNDERSCORE);\n+        return makeIdentifierValid(sName, table, maxLen, checkForUniqueness);\n+    }\n+    \n+    public DBIdentifier getValidForeignKeyIdentifier(DBIdentifier name, Table table, Table toTable, int maxLen) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        String rule = name.getType().name();\n+        maxLen = getMaxLen(rule, name, maxLen);\n+\n+        DBIdentifier sName = makeName(rule, name, table, \"F\");\n+        return makeIdentifierValid(sName, table.getSchema().getSchemaGroup(),\n+            maxLen, true);\n+    }\n+\n+    \n+    public DBIdentifier getValidUniqueIdentifier(DBIdentifier name, Table table, int maxLen) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        String rule = name.getType().name();\n+        maxLen = getMaxLen(rule, name, maxLen);\n+\n+        DBIdentifier sName = makeName(rule, name, table, \"U\");\n+        return makeIdentifierValid(sName, table.getSchema().getSchemaGroup(),\n+            maxLen, true);\n+    }\n+\n+    public DBIdentifier getValidIndexIdentifier(DBIdentifier name, Table table, int maxLen) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        String rule = name.getType().name();\n+        maxLen = getMaxLen(rule, name, maxLen);\n+\n+        DBIdentifier sName = makeName(rule, name, table, \"I\");\n+        return makeIdentifierValid(sName, table.getSchema().getSchemaGroup(),\n+            maxLen, true);\n+    }\n+\n+    public DBIdentifier getValidSequenceIdentifier(DBIdentifier name, Schema schema, int maxLen) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        String rule = name.getType().name();\n+        maxLen = getMaxLen(rule, name, maxLen);\n+\n+        DBIdentifier sName = makeName(rule, name, \"S\");\n+        return makeIdentifierValid(sName, schema.getSchemaGroup(), maxLen, true);\n+    }\n+\n+    public DBIdentifier getValidTableIdentifier(DBIdentifier name, Schema schema, int maxLen) {\n+        if (DBIdentifier.isNull(name)) {\n+            return name;\n+        }\n+        String rule = name.getType().name();\n+        maxLen = getMaxLen(rule, name, maxLen);\n+\n+        DBIdentifier sName = makeName(rule, name, null);\n+        \n+        return makeIdentifierValid(sName, schema.getSchemaGroup(),\n+            maxLen, true);\n+    }\n+\n+    public DBIdentifier makeNameValid(String name, NameSet set, int maxLen,\n+        int nameType, boolean checkForUniqueness) {\n+        DBIdentifierType id = DBIdentifierType.DEFAULT;\n+        switch (nameType) {\n+            case DBIdentifierUtil.TABLE:\n+                id = DBIdentifierType.TABLE;\n+                break;\n+            case DBIdentifierUtil.SEQUENCE:\n+                id = DBIdentifierType.SEQUENCE;\n+                break;\n+            case DBIdentifierUtil.COLUMN:\n+                id = DBIdentifierType.COLUMN;\n+                break;\n+        }\n+        return makeIdentifierValid(DBIdentifier.newIdentifier(name, id), set, maxLen, checkForUniqueness);\n+    }\n+\n+    public DBIdentifier makeIdentifierValid(DBIdentifier sname, NameSet set, int maxLen,\n+        boolean checkForUniqueness) {\n+        DBIdentifier validName = sname;\n+        String rule = sname.getType().name();\n+        \n+        maxLen = getMaxLen(rule, validName, maxLen);\n+\n+        int nameLen = validName.getName().length();\n+        if (nameLen > maxLen) {\n+            validName = DBIdentifier.truncate(validName, nameLen - maxLen);\n+            nameLen = validName.getName().length();\n+        }\n+        if (isReservedWord(rule, validName.getName())) {\n+            if (nameLen == maxLen)\n+                validName = DBIdentifier.truncate(validName, 1);\n+            validName = DBIdentifier.append(validName, \"0\");\n+            nameLen = validName.getName().length();\n+        }\n+\n+        // now make sure the name is unique\n+        if (set != null && checkForUniqueness) {\n+            for (int version = 1, chars = 1; true; version++) {\n+                // for table names, we check for the table itself in case the\n+                // name set is lazy about schema reflection\n+                if (validName.getType() == DBIdentifierType.TABLE) {\n+                    if (!((SchemaGroup) set).isKnownTable(QualifiedDBIdentifier.getPath(validName)))\n+                        break;\n+                } else if (validName.getType() == DBIdentifierType.SEQUENCE) {\n+                    if (!((SchemaGroup) set).isKnownSequence(QualifiedDBIdentifier.getPath(validName)))\n+                        break;\n+                } else {\n+                    if (!set.isNameTaken(validName))\n+                        break;\n+                }\n+\n+                // a single char for the version is probably enough, but might\n+                // as well be general about it...\n+                if (version > 1) {\n+                    validName = DBIdentifier.truncate(validName, chars);\n+                }\n+                if (version >= Math.pow(10, chars))\n+                    chars++;\n+                if (nameLen + chars > maxLen) {\n+                    validName = DBIdentifier.truncate(validName, nameLen + chars - maxLen);\n+                }\n+                validName = DBIdentifier.append(validName, Integer.toString(version)); \n+                nameLen = validName.getName().length();\n+            }\n+        }\n+        \n+        if (validName.isDelimited()) {\n+            String delimCase = getIdentifierConfiguration().getDelimitedCase();\n+            if (delimCase.equals(CASE_LOWER)) {\n+                return DBIdentifier.toLower(validName,true);\n+            }\n+            else if (delimCase.equals(CASE_UPPER)) {\n+                return DBIdentifier.toUpper(validName,true);\n+            }\n+            else {\n+                return validName;\n+            }\n+        }\n+        return DBIdentifier.toUpper(validName);\n+    }\n+\n+    /**\n+     *  Converts the name to a name which can be used within a SQL statement.  Uses\n+     *  the appropriate delimiters and separators. \n+     *  @parm name a DBIdentifier\n+     */\n+    public String toDBName(DBIdentifier name) {\n+        return toDBName(name, true);\n+    }\n+    \n+    /**\n+     *  Converts the name to a name which can be used within a SQL statement.  Uses\n+     *  the appropriate delimiters and separators. \n+     *  @parm name a DBIdentifier\n+     *  @param delimit If true, allows the name to be delimited, if necessary.  \n+     *  Otherwise, the identifier is not delimited.\n+     */\n+    public String toDBName(DBIdentifier name, boolean delimit) {\n+        if (DBIdentifier.isNull(name)) {\n+            return null;\n+        }\n+        if (getIdentifierConfiguration().getSupportsDelimitedIdentifiers() && delimit \n+            && getIdentifierConfiguration().delimitAll() && !name.isDelimited()) {\n+            return delimit(name, true);\n+        }\n+        String rule = name.getType().name();\n+        if (name instanceof QualifiedDBIdentifier) {\n+            QualifiedDBIdentifier path = (QualifiedDBIdentifier)name;\n+            return convertFull(Normalizer.getNamingConfiguration(), rule, path.getName());\n+        }\n+        return convert(Normalizer.getNamingConfiguration(), rule, name.getName());\n+    }\n+\n+    /**\n+     * Converts the identifier to a format appropriate for the configuration.\n+     * Delimits if necessary\n+     */\n+    public String toDBName(String name) {\n+        return toDBName(name, true);\n+    }\n+\n+    /**\n+     * Converts the identifier to a format appropriate for the configuration using\n+     * the default naming rule.\n+     * @param delimit If false, do not delimit.  Otherwise, delimit if necessary.\n+     */\n+    public String toDBName(String name, boolean delimit) {\n+        return toDBName(getIdentifierConfiguration().getDefaultIdentifierRule().getName(), name, delimit);\n+    }\n+\n+    /**\n+     * Converts the identifier to a format appropriate for the configuration using\n+     * the specified naming rule.\n+     * @param delimit If false, do not delimit.  Otherwise, delimit if necessary.\n+     */\n+    private String toDBName(String rule, String name, boolean delimit) {\n+        if (name == null) {\n+            return null;\n+        }\n+        if (getIdentifierConfiguration().getSupportsDelimitedIdentifiers() && delimit && \n+            getIdentifierConfiguration().delimitAll() && !Normalizer.isDelimited(name)) {\n+            return delimit(rule, name, true);\n+        }\n+        return convert(Normalizer.getNamingConfiguration(), rule, name);\n+    }\n+\n+    /**\n+     * Creates a new identifier of a given type based upon the name returned\n+     * from the database.  \n+     */\n+    public DBIdentifier fromDBName(String name, DBIdentifierType id) {\n+        if (name == null) {\n+            return DBIdentifier.NULL;\n+        }\n+        if (!getIdentifierConfiguration().getSupportsDelimitedIdentifiers()) {\n+            return DBIdentifier.newIdentifier(name, id);\n+        }\n+        String delimCase = getIdentifierConfiguration().getDelimitedCase();\n+        String nonDelimCase = getIdentifierConfiguration().getSchemaCase();\n+        String caseName = name;\n+        \n+        // If delimited and non-delimited case are the same, don't change \n+        // case or try to determine whether delimiting is required.  Let the\n+        // normalizer figure it out using standard rules.\n+        if (delimCase.equals(nonDelimCase)) {\n+            return DBIdentifier.newIdentifier(name, id, false, false);\n+        }\n+        \n+        // Otherwise, try to determine whether to delimit based on an expected vs.\n+        // actual name comparison.\n+        if (delimCase.equals(CASE_PRESERVE)) {\n+            if (nonDelimCase.equals(CASE_LOWER)) {\n+                caseName = name.toLowerCase();\n+            } else {\n+                caseName = name.toUpperCase();\n+            }\n+        } else if (delimCase.equals(CASE_LOWER)) {\n+            if (nonDelimCase.equals(CASE_UPPER)) {\n+                caseName = name.toUpperCase();\n+            }\n+        } else if (delimCase.equals(CASE_UPPER)) {\n+            if (nonDelimCase.equals(CASE_LOWER)) {\n+                caseName = name.toLowerCase();\n+            }\n+        }\n+        \n+        boolean delimit = !caseName.equals(name) || getIdentifierConfiguration().delimitAll();\n+        return DBIdentifier.newIdentifier((delimit ? name : caseName), id, false, delimit);\n+    }\n+\n+    public DBIdentifier append(DBIdentifierType resultId, DBIdentifier...names) {\n+        if (names == null || names.length == 0) {\n+            return DBIdentifier.NULL;\n+        }\n+        DBIdentifier sName = DBIdentifier.newIdentifier(\"\", resultId);\n+        for (DBIdentifier name : names) {\n+            DBIdentifier.append(sName, name.getName());\n+        }\n+        return sName;\n+    }\n+    \n+    public String appendColumns(Column[] columns) {\n+        if (columns == null || columns.length == 0) {\n+            return \"\";\n+        }\n+        if (columns.length == 1) {\n+            return toDBName(columns[0].getIdentifier());\n+        }\n+        StringBuilder colsb = new StringBuilder(\"\");\n+        for (int i = 0; i < columns.length; i++) {\n+            colsb.append(toDBName(columns[i].getIdentifier()));\n+            if (i < (columns.length - 1)) {\n+                colsb.append(\", \");\n+            }\n+        }\n+        return colsb.toString();\n+    }\n+    \n+    public String delimit(DBIdentifier name, boolean force) {\n+        String rule = name.getType().name();\n+        // If this is a compound path, each item must be delimited\n+        // separately\n+        if (name instanceof QualifiedDBIdentifier) {\n+            QualifiedDBIdentifier path = (QualifiedDBIdentifier)name;\n+            // Make sure this is a qualified path before delimiting\n+            // separately\n+            if (!((path.getType() == DBIdentifierType.COLUMN &&\n+                  path.isUnqualifiedColumn()) ||\n+                  (path.getType() != DBIdentifierType.COLUMN &&\n+                   path.isUnqualifiedObject()))) {\n+                DBIdentifier[] names = QualifiedDBIdentifier.splitPath(name);\n+                for (int i = 0; i < names.length; i++) {\n+                    DBIdentifier sName = names[i].getUnqualifiedName();\n+                    if (!sName.isDelimited()) {\n+                        String pRule = sName.getType().name();\n+                        names[i].setName(delimit(pRule, sName.getName(), force));\n+                    }\n+                }\n+                return QualifiedDBIdentifier.newPath(names).getName();\n+            }\n+        }\n+        return delimit(rule, name.getName(), force);\n+    }\n+    \n+    public String shorten(String name, int targetLength) {\n+        return DBDictionary.shorten(name, targetLength);\n+    }\n+    \n+    public DBIdentifier getGeneratedKeySequenceName(Column col, int maxLen) {\n+        DBIdentifier tname = col.getTableIdentifier();\n+        DBIdentifier cname = col.getIdentifier();\n+        int max = maxLen;\n+        int extraChars = -max + tname.getName().length() + 1 // <tname> + '_'\n+            + cname.getName().length() + 4; // <cname> + '_SEQ'\n+        String tsname = tname.getName();\n+        if (extraChars > 0) {\n+            // this assumes that tname is longer than extraChars\n+            tsname = tsname.substring(0, tsname.length() - extraChars);\n+        }\n+        return DBIdentifier.combine(DBIdentifierType.SEQUENCE, tsname, cname.getName(), \"SEQ\");\n+    }\n+    \n+    /**\n+     * Convert the specified schema name to a name that the database will\n+     * be able to understand in metadata operations.\n+     */\n+    public DBIdentifier convertSchemaCase(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name))\n+            return DBIdentifier.NULL;\n+\n+        DBIdentifier sName = name.clone();\n+        // Handle delimited string differently. Return unquoted name.\n+        String delimCase = getIdentifierConfiguration().getDelimitedCase();\n+        if (/* getNamingConfiguration().delimitAll() || */ name.isDelimited()) {\n+            if (CASE_UPPER.equals(delimCase)) {\n+                sName = DBIdentifier.toUpper(sName,true);\n+            }\n+            else if (CASE_LOWER.equals(delimCase)) {\n+                sName = DBIdentifier.toLower(sName,true);\n+            }\n+            \n+            return DBIdentifier.removeDelimiters(sName);\n+        }\n+        if (!getIdentifierConfiguration().delimitAll()) {\n+            // Not delimited, use the base schema case expected by the DB\n+            String schemaCase = getIdentifierConfiguration().getSchemaCase();\n+            if (CASE_LOWER.equals(schemaCase))\n+                return DBIdentifier.toLower(sName);\n+            if (CASE_PRESERVE.equals(schemaCase))\n+                return sName;\n+            return DBIdentifier.toUpper(sName);\n+        }\n+        return sName;\n+    }\n+    \n+    /**\n+     * Converts a column alias to use the appropriate delimiters\n+     */\n+    public String convertAlias(String alias) {\n+        if (!needsConversion(getIdentifierConfiguration())) {\n+            return alias;\n+        }\n+\n+        String[] names = Normalizer.splitName(alias);\n+        if (names.length <= 1) {\n+            // Nothing to split\n+            return alias;\n+        }\n+        // Skip the the first name.  It is the alias (T0, T1, etc.)\n+        for (int i = 1; i < names.length; i++) {\n+            names[i] = toDBName(getIdentifierConfiguration().getDefaultIdentifierRule().toString(), names[i], true);\n+        }\n+        return joinNames(getIdentifierConfiguration().getDefaultIdentifierRule(), names);\n+    }\n+\n+    private DBIdentifier makeName(String rule, DBIdentifier name, Table tbl, String prefix) {\n+        DBIdentifier sName = DBIdentifier.removeLeading(name, IdentifierUtil.UNDERSCORE);\n+        String tableName = tbl.getIdentifier().getName();\n+        int len = Math.min(tableName.length(), 7);\n+        \n+        // Combine the names using the normalized configuration.  \n+        String str = combineNames(Normalizer.getNamingConfiguration(), rule, \n+            new String[] { prefix == null ? \"\" : prefix, \n+            shorten(tableName, len), sName.getName() });\n+        sName.setName(str);\n+        return sName;\n+    }\n+\n+    private DBIdentifier makeName(String rule, DBIdentifier name, String prefix) {\n+        DBIdentifier sName = DBIdentifier.removeLeading(name, IdentifierUtil.UNDERSCORE);\n+        if (!StringUtils.isEmpty(prefix)) {\n+            sName = DBIdentifier.preCombine(sName, prefix);\n+        }\n+        return sName;\n+    }\n+\n+    private int getMaxLen(String rule, DBIdentifier name, int maxLen) {\n+        IdentifierConfiguration config = getIdentifierConfiguration();\n+        if (maxLen < 1) {\n+            IdentifierRule nrule = config.getIdentifierRule(rule);\n+            maxLen = nrule.getMaxLength();\n+        }\n+        // Subtract delimiter length if name is delimited or will be delimited\n+        if (config.delimitAll() || name.isDelimited()) {\n+            maxLen = maxLen - (config.getLeadingDelimiter().length() + config.getTrailingDelimiter().length());\n+        }\n+        \n+        return maxLen;\n+    }\n+    \n+    /**\n+     * System configuration.\n+     */\n+    public JDBCConfiguration getConfiguration() {\n+        return _conf;\n+    }\n+\n+    @Override\n+    public void setConfiguration(Configuration conf) {\n+        _conf = (JDBCConfiguration)conf;\n+    }\n+}"},{"sha":"3c6a7688003b10c6f2aab0dcf22c7e068d480198","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DefaultIdentifierConfiguration.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DefaultIdentifierConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DefaultIdentifierConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DefaultIdentifierConfiguration.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.identifier.IdentifierConfiguration;\n+import org.apache.openjpa.lib.identifier.IdentifierRule;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n+\n+public class DefaultIdentifierConfiguration implements IdentifierConfiguration {\n+\n+    private DBIdentifierRule normalizingRule = new DBIdentifierRule();\n+    private Map<String, IdentifierRule> normalizingRules = new HashMap<String, IdentifierRule>();\n+    private final String conversionKey = getLeadingDelimiter() + getIdentifierDelimiter() + getTrailingDelimiter();\n+\n+    public DefaultIdentifierConfiguration() {\n+        normalizingRules.put(IdentifierRule.DEFAULT_RULE, normalizingRule);\n+    }\n+    \n+    public boolean delimitAll() {\n+        return false;\n+    }\n+\n+    public IdentifierRule getDefaultIdentifierRule() {\n+        return normalizingRule;\n+    }\n+\n+    public String getDelimitedCase() {\n+        return IdentifierUtil.CASE_PRESERVE;\n+    }\n+\n+    public String getSchemaCase() {\n+        return IdentifierUtil.CASE_PRESERVE;\n+    }\n+\n+    public String getLeadingDelimiter() {\n+        return IdentifierUtil.DOUBLE_QUOTE;\n+    }\n+\n+    public String getIdentifierDelimiter() {\n+        return IdentifierUtil.DOT;\n+    }\n+\n+    public String getIdentifierConcatenator() {\n+        return IdentifierUtil.UNDERSCORE;\n+    }\n+\n+    public <T> IdentifierRule getIdentifierRule(T t) {\n+        return normalizingRule;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Map<String, IdentifierRule> getIdentifierRules() {\n+        return normalizingRules;\n+    }\n+\n+    public String getTrailingDelimiter() {\n+        return IdentifierUtil.DOUBLE_QUOTE;\n+    }\n+\n+    public boolean getSupportsDelimitedIdentifiers() {\n+        return true;\n+    }\n+    \n+    public String getConversionKey() {\n+        return conversionKey;\n+    }\n+}"},{"sha":"5c8a2824f0eb5e7d8843beb04b136c813f6db695","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java","status":"added","additions":311,"deletions":0,"changes":311,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,311 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.identifier.IdentifierConfiguration;\n+import org.apache.openjpa.lib.identifier.IdentifierRule;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n+\n+/**\n+ * Static utility class used for operating on string based identifiers. \n+ */\n+public class Normalizer {\n+\n+    private static IdentifierUtil normalizer = \n+        new DBIdentifierUtilImpl(new DefaultIdentifierConfiguration());\n+    \n+    private static IdentifierRule defaultRule;\n+    \n+    static {\n+        defaultRule = normalizer.getIdentifierConfiguration().getDefaultIdentifierRule();\n+    }\n+\n+    public static IdentifierConfiguration getNamingConfiguration() {\n+        return normalizer.getIdentifierConfiguration();\n+    }\n+    \n+    /**\n+     * Normalizes a multi-part name\n+     * @param name\n+     * @return\n+     */\n+    public static String normalizeMulti(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            return name;\n+        }\n+        String[] names = normalizer.splitName(defaultRule, name);\n+        return normalizer.joinNames(defaultRule, names);\n+    }\n+\n+    /**\n+     * Normalizes a single part name\n+     * @param name\n+     * @return\n+     */\n+    public static String normalizeString(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            return name;\n+        }\n+        if (!normalizer.isDelimited(defaultRule, name)) {\n+            // If not delimited, delimit the string if necessary\n+            return normalizer.delimit(defaultRule, name);\n+        }\n+        return name;\n+    }\n+    \n+    /**\n+     * Returns true if the name is delimited with default delimiters\n+     * @param name\n+     * @return\n+     */\n+    public static boolean isDelimited(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            return false;\n+        }\n+        return normalizer.isDelimited(defaultRule, name);\n+    }\n+    \n+    /**\n+     * Splits names into individual components and compares individually\n+     * for equality\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static boolean fullNamesEqual(String name1, String name2) {\n+        if (StringUtils.isEmpty(name1) && StringUtils.isEmpty(name2)) {\n+            return true;\n+        }\n+        // Split multi-part names into individual components and compare\n+        // each component.  If delimited, do case compare.\n+        String[] names1 = normalizer.splitName(defaultRule, name1);\n+        String[] names2 = normalizer.splitName(defaultRule, name2);\n+        if (names1.length != names2.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < names1.length; i++) {\n+            if (normalizer.isDelimited(defaultRule, names1[i])) {\n+                if (!StringUtils.equals(names1[i],names2[i])) {\n+                    return false;\n+                }\n+            } else {\n+                if (!StringUtils.equalsIgnoreCase(names1[i],names2[i])) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Compares two string names for equality.  If delimited, does a\n+     * case comparison.  If not delimited, does a case insensitive \n+     * comparison.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static boolean namesEqual(String name1, String name2) {\n+        if (StringUtils.isEmpty(name1) && StringUtils.isEmpty(name2)) {\n+            return true;\n+        }\n+        if (normalizer.isDelimited(defaultRule, name1)) {\n+            if (!StringUtils.equals(name1, name2)) {\n+                return false;\n+            }\n+        } else {\n+            if (!StringUtils.equalsIgnoreCase(name1, name2)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Normalizes a name, if not delimited, converts to uppercase.\n+     * @param name\n+     * @return\n+     */\n+    public static String normalizeUpper(String name) {\n+        String nName = normalizeString(name);\n+        // Do not convert delimited names to upper case.  They may have\n+        // been delimited to preserve case.\n+        if (!isDelimited(nName)) {\n+            nName = name.toUpperCase();\n+        }\n+        return nName;\n+    }\n+    \n+    /**\n+     * Splits a name into normalized components\n+     * @param name\n+     * @return\n+     */\n+    public static String[] splitName(String name) {\n+        return normalizer.splitName(defaultRule, name);\n+    }\n+    \n+    \n+    /**\n+     * Splits a name into normalized components using the specified\n+     * name delimiter (ex. schema:table, delim = : --> { schema, table }\n+     * @param name\n+     * @return\n+     */\n+    public static String[] splitName(String name, String delim) {\n+        return normalizer.splitName(defaultRule, name, delim);\n+    }\n+\n+    /**\n+     * Joins multiple names using default identifier rules.\n+     * @param names\n+     * @return\n+     */\n+    public static String joinNames(String[] names) {\n+        return normalizer.joinNames(defaultRule, names);\n+    }\n+\n+    /**\n+     * Joins multiple names using the specified delimiter.\n+     * @param names\n+     * @return\n+     */\n+    public static String joinNames(String[] names, String delimiter) {\n+        return normalizer.joinNames(defaultRule, names, delimiter);\n+    }\n+    \n+    /**\n+     * Joins two names using the default identifier rules.\n+     * @param names\n+     * @return\n+     */\n+    public static String joinNames(String name1, String name2) {\n+        return joinNames(new String[] { name1, name2});\n+    }\n+    \n+\n+    /**\n+     * Truncates a name to the specified length while maintaining\n+     * delimiters.\n+     * @param name\n+     * @param length\n+     * @return\n+     */\n+    public static String truncate(String name, int length) {\n+        return normalizer.truncateName(defaultRule, name, length);\n+    }\n+\n+    /**\n+     * Convert a normalized name to a name using the specified configuration and\n+     * naming rule.\n+     * Note: Currently only delimiters are converted.\n+     * @param config\n+     * @param rule\n+     * @param name\n+     * @return\n+     */\n+    public static String convert(IdentifierConfiguration config, String rule, String name) {\n+        return normalizer.convert(config, rule, name);\n+    }\n+\n+    /**\n+     * Combines two names using default identifier rules.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static String combine(String name1, String name2) {\n+        return normalizer.combineNames(defaultRule, name1, name2);\n+    }\n+\n+    /**\n+     * Combines multiple names using default identifier rules.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static String combine(String...names) {\n+        return normalizer.combineNames(defaultRule, names);\n+    }\n+\n+    \n+    /**\n+     * Appends one string to another using default identifier rules.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static String append(String name1, String name2) {\n+        return normalizer.appendNames(defaultRule, name1, name2);\n+    }\n+    \n+    /**\n+     * Removes Hungarian notation from a string.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static String removeHungarianNotation(String name) {\n+        return normalizer.removeHungarianNotation(defaultRule, name);\n+    }\n+\n+    /**\n+     * Removes default delimiters from a string.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static String removeDelimiters(String name) {\n+        return normalizer.removeDelimiters(defaultRule, name);\n+    }\n+\n+    /**\n+     * Delimits a string if necessary, optionally forcing it to be\n+     * delimited.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static String delimit(String name, boolean force) {\n+        return normalizer.delimit(defaultRule, name, force);\n+    }\n+\n+    /**\n+     * Determines whether a name can be split into multiple components.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static boolean canSplit(String name) {\n+        return normalizer.canSplit(defaultRule, name);\n+    }\n+\n+    /**\n+     * Determines whether a name can be split into multiple components, taking\n+     * into account the specified delimiter.\n+     * @param name1\n+     * @param name2\n+     * @return\n+     */\n+    public static boolean canSplit(String name, String delim) {\n+        return normalizer.canSplit(defaultRule, name, delim);\n+    }\n+}"},{"sha":"1750e932272360b46ff7d53d83eed7b63949385d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/QualifiedDBIdentifier.java","status":"added","additions":359,"deletions":0,"changes":359,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/QualifiedDBIdentifier.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/QualifiedDBIdentifier.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/QualifiedDBIdentifier.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -0,0 +1,359 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.identifier;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.openjpa.lib.identifier.Identifier;\n+\n+/**\n+ * This class extends DBIdentifier to provide support for qualified identifiers\n+ * such as schema qualified tables and table qualified columns.  It provides methods\n+ * to create qualified identifiers from individual identifiers.\n+ *\n+ */\n+public class QualifiedDBIdentifier extends DBIdentifier implements Identifier, Cloneable, Serializable {\n+    \n+    private DBIdentifier _schemaName = DBIdentifier.NULL;  // The schema name\n+    // The table name if the object (column, constraint) is qualified by a table name\n+    private DBIdentifier _objectTableName = DBIdentifier.NULL; \n+    \n+    \n+    protected QualifiedDBIdentifier(DBIdentifier... sNames) {\n+        setPath(sNames);\n+    }\n+    \n+    /**\n+     * Creates a qualified identifier based upon an array of DBIdentifiers.  Identifiers\n+     * must be specified in order.\n+     * @param names\n+     * @return\n+     */\n+    public static QualifiedDBIdentifier newPath(DBIdentifier...names) {\n+        return new QualifiedDBIdentifier(names);\n+    }\n+    \n+    /**\n+     * Set the identifiers that make up the path.  Identifiers must be specified\n+     * in path order.  (ex. [ table, column ] )\n+     * @param sNames\n+     */\n+    public void setPath(DBIdentifier...sNames) {\n+        resetNames();\n+        if (sNames == null || sNames.length == 0) {\n+            return;\n+        }\n+        \n+        if (sNames.length == 1) {\n+            DBIdentifier sName = sNames[0];\n+            if (sName.getType() == DBIdentifierType.SCHEMA) {\n+                setSchemaName(sName.clone());\n+            }\n+            setName(sName.clone());\n+            setType(sName.getType());\n+            return;\n+        }\n+\n+        for (int i = (sNames.length - 1); i >= 0; i--) {\n+            DBIdentifier sName = sNames[i];\n+            if (DBIdentifier.isNull(sName)) {\n+                continue;\n+            }\n+            if (i == (sNames.length - 1) && sNames.length != 1) {\n+                setName(sName.clone());\n+            } else {\n+                if (sName.getType() == DBIdentifierType.SCHEMA) {\n+                    setSchemaName(sName.clone());\n+                }\n+                else if (sName.getType() == DBIdentifierType.TABLE) {\n+                    setObjectTableName(sName.clone());\n+                }\n+            }\n+        }   \n+    }\n+    \n+    // Reset the path names\n+    private void resetNames() {\n+        _schemaName = DBIdentifier.NULL;\n+        _objectTableName = DBIdentifier.NULL;\n+    }\n+\n+    /**\n+     * Splits a qualified path into separate identifiers.\n+     * @param sName\n+     * @return\n+     */\n+    public static DBIdentifier[] splitPath(DBIdentifier sName) {\n+        if (sName instanceof QualifiedDBIdentifier && sName.getType() != DBIdentifierType.SCHEMA) {\n+            QualifiedDBIdentifier path = (QualifiedDBIdentifier)sName;\n+            List<DBIdentifier> names = new ArrayList<DBIdentifier>();\n+            \n+            if (!DBIdentifier.isNull(path.getSchemaName())) {\n+                names.add(path.getSchemaName().clone());\n+            }\n+            if (!DBIdentifier.isNull(path.getObjectTableName())) {\n+                names.add(path.getObjectTableName().clone());\n+            }\n+            if (!DBIdentifier.isNull(path.getIdentifier())) {\n+                names.add(((DBIdentifier)path).clone());\n+            }\n+            return names.toArray(new DBIdentifier[names.size()]);\n+        }\n+        if (sName instanceof DBIdentifier) {\n+            return new DBIdentifier[] { sName.clone() };\n+        }\n+        return new DBIdentifier[] {};\n+    }\n+\n+    /**\n+     * Creates a qualified path from an identifier.\n+     * @param sName\n+     * @return\n+     */\n+    public static QualifiedDBIdentifier getPath(DBIdentifier sName) {\n+        if (sName instanceof QualifiedDBIdentifier) {\n+            return (QualifiedDBIdentifier)sName.clone();\n+        }\n+        return QualifiedDBIdentifier.newPath(sName);\n+    }\n+\n+    /**\n+     *Sets the schema component of the path.\n+     */\n+    public void setSchemaName(DBIdentifier schemaName) {\n+        _schemaName = schemaName;\n+    }\n+\n+    /**\n+     * Gets the schema component of the path.\n+     * @return\n+     */\n+    public DBIdentifier getSchemaName() {\n+        return _schemaName;\n+    }\n+\n+    /**\n+     * Sets the object table name component of the path, if the path\n+     * is a table qualified identifier such as a constraint or column.\n+     */\n+    public void setObjectTableName(DBIdentifier objectName) {\n+        _objectTableName = objectName;\n+    }\n+\n+    \n+    /**\n+     * Gets the object table name component of the path, if the path\n+     * is a table qualified identifier such as a constraint or column.\n+     */\n+    public DBIdentifier getObjectTableName() {\n+        return _objectTableName;\n+    }\n+\n+    /**\n+     * Returns true if this object is not qualified by a schema component.\n+     * @return\n+     */\n+    public boolean isUnqualifiedObject() {\n+        return DBIdentifier.isNull(getSchemaName());\n+    }\n+\n+    /**\n+     * Returns true if this object is not qualified by a table or schema \n+     * component.\n+     * @return\n+     */\n+    public boolean isUnqualifiedColumn() {\n+        return DBIdentifier.isNull(getObjectTableName()) && DBIdentifier.isNull(getSchemaName());\n+    }\n+\n+    /**\n+     * Equality operator.\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj instanceof QualifiedDBIdentifier) {\n+            QualifiedDBIdentifier sPath = (QualifiedDBIdentifier)obj;\n+            return DBIdentifier.equal(sPath.getSchemaName(), getSchemaName()) &&\n+                DBIdentifier.equal(sPath.getObjectTableName(), getObjectTableName()) &&\n+                DBIdentifier.equal(sPath, this);\n+            \n+        }\n+        else if (obj instanceof DBIdentifier) {\n+            DBIdentifier sName = (DBIdentifier)obj;\n+            return DBIdentifier.equal(sName, this);\n+        } else if (obj instanceof String) {\n+            return obj.equals(this.getName());\n+        }\n+        throw new IllegalArgumentException(\"Cannot compare to type: \" + obj.getClass().getName());\n+    }\n+    \n+    /**\n+     * Compares two qualified identifiers for equality.\n+     * @param path1\n+     * @param path2\n+     * @return\n+     */\n+    public static boolean pathEqual(QualifiedDBIdentifier path1, QualifiedDBIdentifier path2) {\n+        if (path1 == null && path2 == null) {\n+            return true;\n+        }\n+        if (path1 == null) {\n+            return false;\n+        }\n+        DBIdentifier[] names1 = QualifiedDBIdentifier.splitPath(path1);\n+        DBIdentifier[] names2 = QualifiedDBIdentifier.splitPath(path2);\n+        if (names1.length != names2.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < names1.length; i++) {\n+            if (!DBIdentifier.equal(names1[i], names2[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Returns a fully qualified name as a string.\n+     */\n+    public String toString() {\n+        return getName();\n+    }\n+\n+    /**\n+     * Returns the fully qualified name as a string\n+     */\n+    public String getName() {\n+        // If no schema or object or table qualifier, return the base name\n+        if (DBIdentifier.isEmpty(_schemaName) && DBIdentifier.isEmpty(_objectTableName)) {\n+            return getBaseName();\n+        }\n+        DBIdentifier[] names = QualifiedDBIdentifier.splitPath(this);\n+        return DBIdentifier.join(names);\n+    }\n+    \n+    /**\n+     * Returns the base name of this qualified name.  For example, if the \n+     * qualified name is a schema qualified table, the table name is returned.\n+     * @return\n+     */\n+    public String getBaseName() {\n+        return super.getName();\n+    }\n+\n+    /**\n+     * Returns this object as a DBIdentifier.\n+     * @return\n+     */\n+    public DBIdentifier getIdentifier() {\n+        return this;\n+    }\n+    \n+    /**\n+     * Set the name of this qualified identifier.  Splits the string into\n+     * multiple components.  This method assumes the type does not change.\n+     */\n+    public void setName(String name) {\n+        // Split apart name into components\n+        DBIdentifier[] sNames = DBIdentifier.split(getType(), name);\n+        setPath(sNames);\n+    }\n+\n+    /**\n+     * Set the base name component of this compound identifier\n+     * @param name\n+     */\n+    protected void setBaseName(String name) {\n+        super.setName(name);\n+    }\n+\n+    /**\n+     * Returns the length of the qualified identifier, including delimiters\n+     * and name separators.\n+     */\n+    public int length() {\n+        String name = getName();\n+        if (name == null) {\n+            return 0;\n+        }\n+        return name.length();\n+    }\n+\n+    /**\n+     * Compares this identifier with another identifier.\n+     */\n+    public int compareTo(Identifier o) {\n+        if (o instanceof DBIdentifier) {\n+            if (o == null || o == DBIdentifier.NULL)\n+                return -1;\n+            return super.compareTo(o);\n+        }\n+        return getName().compareTo(o.getName());\n+    }\n+    \n+    /**\n+     * Returns true if all identifiers within this compound identifier are\n+     * delimited. Otherwise, false.\n+     */\n+    @Override\n+    public boolean isDelimited() {\n+        if (DBIdentifier.isEmpty(this)) {\n+            return false;\n+        }\n+        if (!DBIdentifier.isNull(getObjectTableName())) {\n+            if (!Normalizer.isDelimited(getObjectTableName().getName())) {\n+                return false;\n+            }\n+        }\n+        if (!DBIdentifier.isNull(getSchemaName())) {\n+            if (!Normalizer.isDelimited(getSchemaName().getName())) {\n+                return false;\n+            }\n+        }\n+        return super.isDelimited();\n+    }\n+    \n+    /**\n+     * Returns a new unqualified name based on this instance.\n+     */\n+    @Override\n+    public DBIdentifier getUnqualifiedName() {\n+        QualifiedDBIdentifier newName = (QualifiedDBIdentifier)clone();\n+        newName.setObjectTableName(DBIdentifier.NULL);\n+        newName.setSchemaName(DBIdentifier.NULL);\n+        return newName;\n+    }\n+    \n+    /**\n+     * Creates a clone of this identifier.\n+     */\n+    public QualifiedDBIdentifier clone() {\n+        QualifiedDBIdentifier sPath = new QualifiedDBIdentifier();\n+        sPath.setObjectTableName(getObjectTableName().clone());\n+        sPath.setSchemaName(getSchemaName().clone());\n+        sPath.setBaseName(super.getName());\n+        sPath.setType(getType());\n+        return sPath;\n+    }\n+\n+}"},{"sha":"8ad2787893ef250bef1fbc56802d05c5608a8b14","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -50,7 +50,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (ClassTableJDBCSeq.class);\n \n-    private final Map _stats = new HashMap();\n+    private final Map<String, Status> _stats = new HashMap<String, Status>();\n     private boolean _ignore = false;\n     private boolean _aliases = false;\n \n@@ -113,7 +113,7 @@ protected synchronized Status getStatus(ClassMapping mapping) {\n     protected Column addPrimaryKeyColumn(Table table) {\n         DBDictionary dict = getConfiguration().getDBDictionaryInstance();\n         Column pkColumn = table.addColumn(dict.getValidColumnName(\n-            getPrimaryKeyColumn(), table));\n+            getPrimaryKeyColumnIdentifier(), table));\n         pkColumn.setType(dict.getPreferredType(Types.VARCHAR));\n         pkColumn.setJavaType(JavaTypes.STRING);\n         pkColumn.setSize(dict.characterColumnSize);\n@@ -223,7 +223,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             ClassArgParser cap = conf.getMetaDataRepositoryInstance()\n                 .getMetaDataFactory().newClassArgParser();\n             cap.setClassLoader(loader);\n-            Class cls = cap.parseTypes(args[0])[0];\n+            Class<?> cls = cap.parseTypes(args[0])[0];\n \n             if (repos == null)\n                 repos = conf.getMappingRepositoryInstance();"},{"sha":"46294b9e8c22f31c24c7f6a7341e4d7e9658d1d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -49,7 +49,7 @@\n      * @param fetch the fetch configuration, or null for default\n      * @param res the result containing the data\n      */\n-    public GenericResultObjectProvider(Class pcClass,\n+    public GenericResultObjectProvider(Class<?> pcClass,\n         JDBCStore store, JDBCFetchConfiguration fetch, Result res) {\n         this(store.getConfiguration().getMappingRepositoryInstance().getMapping\n             (pcClass, store.getContext().getClassLoader(), true),\n@@ -122,8 +122,7 @@ public void close() {\n \n     public void handleCheckedException(Exception e) {\n         if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n+            throw SQLExceptions.getStore((SQLException) e, _store.getDBDictionary(), _fetch.getReadLockLevel());\n         throw new StoreException(e);\n     }\n }"},{"sha":"9156db645b809c15ebbfdace494eda4d682f34a1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -119,7 +119,7 @@\n      *\n      * @since 0.4.0.0\n      */\n-    public Set getJoins();\n+    public Set<String> getJoins();\n \n     /**\n      * Return true if the given fully-qualified join has been added.\n@@ -144,7 +144,7 @@\n      *\n      * @since 0.4.0.0\n      */\n-    public JDBCFetchConfiguration addJoins(Collection fields);\n+    public JDBCFetchConfiguration addJoins(Collection<String> fields);\n \n     /**\n      * Removes <code>field</code> to the set of fully-qualified field names to\n@@ -160,7 +160,7 @@\n      *\n      * @since 0.4.0.0\n      */\n-    public JDBCFetchConfiguration removeJoins(Collection fields);\n+    public JDBCFetchConfiguration removeJoins(Collection<String> fields);\n \n     /**\n      * Clears the set of field names to join when loading data.\n@@ -215,7 +215,7 @@\n      *\n      * @since 1.0.3\n      */\n-    public Set getFetchInnerJoins();\n+    public Set<String> getFetchInnerJoins();\n \n     /**\n      * Return true if the given fully-qualified inner fetch join has been added.\n@@ -240,5 +240,5 @@\n      *\n      * @since 1.0.3\n      */\n-    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields);\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection<String> fields);\n }"},{"sha":"4df87296921216260cf021c1fce3125b27495a53","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":42,"deletions":19,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -52,12 +52,32 @@\n  * @author Abe White\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class JDBCFetchConfigurationImpl\n     extends FetchConfigurationImpl\n     implements JDBCFetchConfiguration {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (JDBCFetchConfigurationImpl.class);\n+    private static final Localizer _loc = Localizer.forPackage(JDBCFetchConfigurationImpl.class);\n+    \n+    /**\n+     * Hint keys that correspond to a mutable bean-style setter in this receiver.\n+     * These keys are registered with both <code>openjpa.FetchPlan</code> and <code>openjpa.jdbc</code> as prefix.\n+     * <br>\n+     * A hint without a setter method is also recognized by this receiver.\n+     */\n+    static {\n+        String[] prefixes = {\"openjpa.FetchPlan\", \"openjpa.jdbc\"};\n+        Class<?> target = JDBCFetchConfiguration.class;\n+        populateHintSetter(target, \"EagerFetchMode\", int.class, prefixes);\n+        populateHintSetter(target, \"FetchDirection\", int.class, prefixes);\n+        populateHintSetter(target, \"Isolation\", int.class, prefixes);\n+        populateHintSetter(target, \"setIsolation\", \"TransactionIsolation\", int.class, \"openjpa.jdbc\");\n+        populateHintSetter(target, \"JoinSyntax\", int.class, prefixes);\n+        populateHintSetter(target, \"SubclassFetchMode\", int.class, prefixes);\n+        populateHintSetter(target, \"LRSSize\", int.class, prefixes);\n+        populateHintSetter(target, \"setLRSSize\", \"LRSSizeAlgorithm\", int.class, prefixes);\n+        populateHintSetter(target, \"ResultSetType\", int.class, prefixes);\n+    }\n \n     /**\n      * Configurable JDBC state shared throughout a traversal chain.\n@@ -69,8 +89,8 @@\n         public int direction = 0;\n         public int size = 0;\n         public int syntax = 0;\n-        public Set joins = null;\n-        public Set fetchInnerJoins = null;\n+        public Set<String> joins = null;\n+        public Set<String> fetchInnerJoins = null;\n         public int isolationLevel = -1;\n     }\n \n@@ -138,7 +158,7 @@ public JDBCFetchConfiguration setEagerFetchMode(int mode) {\n             _state.eagerMode = mode;\n         return this;\n     }\n-\n+    \n     public int getSubclassFetchMode() {\n         return _state.subclassMode;\n     }\n@@ -254,7 +274,7 @@ public JDBCFetchConfiguration setJoinSyntax(int syntax) {\n         return this;\n     }\n \n-    public ResultList newResultList(ResultObjectProvider rop) {\n+    public ResultList<?> newResultList(ResultObjectProvider rop) {\n         // if built around a list, just use a simple wrapper\n         if (rop instanceof ListResultObjectProvider)\n             return new SimpleResultList(rop);\n@@ -286,8 +306,10 @@ public ResultList newResultList(ResultObjectProvider rop) {\n         return new SimpleResultList(rop);\n     }\n \n-    public Set getJoins() {\n-        return (_state.joins == null) ? Collections.EMPTY_SET : _state.joins;\n+    public Set<String> getJoins() {\n+        if (_state.joins == null) \n+            return Collections.emptySet();\n+        return _state.joins;\n     }\n \n     public boolean hasJoin(String field) {\n@@ -301,19 +323,19 @@ public JDBCFetchConfiguration addJoin(String join) {\n         lock();\n         try {\n             if (_state.joins == null)\n-                _state.joins = new HashSet();\n+                _state.joins = new HashSet<String>();\n             _state.joins.add(join);\n         } finally {\n             unlock();\n         }\n         return this;\n     }\n \n-    public JDBCFetchConfiguration addJoins(Collection joins) {\n+    public JDBCFetchConfiguration addJoins(Collection<String> joins) {\n         if (joins == null || joins.isEmpty())\n             return this;\n-        for (Iterator itr = joins.iterator(); itr.hasNext();)\n-            addJoin((String) itr.next());\n+        for (Iterator<String> itr = joins.iterator(); itr.hasNext();)\n+            addJoin(itr.next());\n         return this;\n     }\n \n@@ -328,7 +350,7 @@ public JDBCFetchConfiguration removeJoin(String field) {\n         return this;\n     }\n \n-    public JDBCFetchConfiguration removeJoins(Collection joins) {\n+    public JDBCFetchConfiguration removeJoins(Collection<String> joins) {\n         lock();\n         try {\n             if (_state.joins != null)\n@@ -390,9 +412,10 @@ private JDBCConfiguration getJDBCConfiguration() {\n         return (JDBCConfiguration) conf;\n     }\n \n-    public Set getFetchInnerJoins() {\n-        return (_state.fetchInnerJoins == null) ? Collections.EMPTY_SET\n-            : _state.fetchInnerJoins;\n+    public Set<String> getFetchInnerJoins() {\n+        if (_state.fetchInnerJoins == null) \n+            return Collections.emptySet();\n+        return _state.fetchInnerJoins;\n     }\n \n     public boolean hasFetchInnerJoin(String field) {\n@@ -407,18 +430,18 @@ public JDBCFetchConfiguration addFetchInnerJoin(String join) {\n         lock();\n         try {\n             if (_state.fetchInnerJoins == null)\n-                _state.fetchInnerJoins = new HashSet();\n+                _state.fetchInnerJoins = new HashSet<String>();\n             _state.fetchInnerJoins.add(join);\n         } finally {\n             unlock();\n         }\n         return this;\n     }\n \n-    public JDBCFetchConfiguration addFetchInnerJoins(Collection joins) {\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection<String> joins) {\n         if (joins == null || joins.isEmpty())\n             return this;\n-        for (Iterator itr = joins.iterator(); itr.hasNext();)\n+        for (Iterator<String> itr = joins.iterator(); itr.hasNext();)\n             addFetchInnerJoin((String) itr.next());\n         return this;\n     }"},{"sha":"f168688ac8791b42c2e261501539a303ade5d9ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -46,4 +46,9 @@\n      * produced by a FOR UPDATE select.\n      */\n     public void loadedForUpdate(OpenJPAStateManager sm);\n+\n+    /**\n+     * Return true if locking is not desired for relation fields.\n+     */\n+    public boolean skipRelationFieldLock();\n }"},{"sha":"451edbf53ac4d6c444203d3b10e68eb57abb21a7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":23,"deletions":20,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -106,7 +106,7 @@\n     private boolean _active = false;\n \n     // track the pending statements so we can cancel them\n-    private Set _stmnts = Collections.synchronizedSet(new HashSet());\n+    private Set<Statement> _stmnts = Collections.synchronizedSet(new HashSet<Statement>());\n \n     private static final Constructor<ClientConnection> clientConnectionImpl;\n     private static final Constructor<RefCountConnection> refCountConnectionImpl;\n@@ -293,8 +293,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStoreSQLException(sm, se, _dict,\n-                fetch.getReadLockLevel());\n+            throw SQLExceptions.getStore(se, _dict, fetch.getReadLockLevel());\n         }\n     }\n \n@@ -346,7 +345,7 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n \n             // figure out what type of object this is; the state manager\n             // only guarantees to provide a base class\n-            Class type;\n+            Class<?> type;\n             if ((type = getType(res, mapping)) == null) {\n                 if (res.getBaseMapping() != null)\n                     mapping = res.getBaseMapping();\n@@ -370,8 +369,7 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                 Object mappedByObject = info.result.getMappedByValue();\n                 if (mappedByFieldMapping != null && mappedByObject != null)\n                     if (mappedByObject instanceof OpenJPAId &&\n-                        mapping.getExtraFieldDataIndex(mappedByFieldMapping.\n-                        getIndex()) != -1)\n+                        mapping.getExtraFieldDataIndex(mappedByFieldMapping.getIndex()) != -1) {\n                         // The inverse relation can not be set since\n                         // we are eagerly loading this sm for\n                         // a sm owner that is still in the process of \n@@ -380,10 +378,15 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                         // The inverse relation is set later by\n                         // setInverseRelation() when the sm owner is fully\n                         // initialized.\n-                        sm.setIntermediate(mappedByFieldMapping.getIndex(),\n-                            mappedByObject);\n-                    else\n+                        int index = mappedByFieldMapping.getIndex();\n+                        if (sm.getLoaded().get(index)) {\n+                            sm.setImplData(index, mappedByObject);\n+                        } else {\n+                            sm.setIntermediate(index, mappedByObject);\n+                        }\n+                    } else {\n                         setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+                    }\n             }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n@@ -408,20 +411,20 @@ private void setInverseRelation(OpenJPAStateManager owner,\n         // Check if the owner has eagerly loaded ToMany relations.\n         for (int i = 0; i < fms.length; i++) {\n             if (res.getEager(fms[i]) != null) {\n-                if (fms[i].isElementCollection() && !fms[i].getElement().isTypePC())\n+                if (!fms[i].getElement().isTypePC())\n                     continue;\n                 Object coll =  owner.fetchObject(fms[i].getIndex());\n                 if (coll instanceof Map)\n                     coll = ((Map)coll).values();\n-                if (coll instanceof Collection && \n-                    ((Collection) coll).size() > 0) {\n+                if (coll instanceof Collection<?> && \n+                    ((Collection<?>) coll).size() > 0) {\n                     // Found eagerly loaded collection.\n                     // Publisher (1) <==>  (M) Magazine\n                     //    publisher has a EAGER OneToMany relation\n                     //    magazine has a EAGER or LAZY ManyToOne publisher\n                     // For each member (Magazine) in the collection, \n                     // set its inverse relation (Publisher).\n-                    for (Iterator itr = ((Collection) coll).iterator();\n+                    for (Iterator<?> itr = ((Collection<?>) coll).iterator();\n                         itr.hasNext();) {\n                         PersistenceCapable pc = (PersistenceCapable) itr.next();\n \n@@ -485,7 +488,7 @@ protected boolean isEmptyResult(Result res) throws SQLException {\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of getting type from the result set.\n      */\n-    protected Class getType(Result res, ClassMapping mapping){\n+    protected Class<?> getType(Result res, ClassMapping mapping){\n         if (res == null)\n             return mapping.getDescribedType();\n         return null;\n@@ -646,7 +649,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n         } catch (ClassNotFoundException cnfe) {\n             throw new StoreException(cnfe);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n+            throw SQLExceptions.getStore(se, _dict, lockLevel);\n         }\n     }\n \n@@ -682,15 +685,15 @@ public boolean cancelAll() {\n         // we want to allow a different thread to be able to cancel the\n         // outstanding statement on a different context\n \n-        Collection stmnts;\n+        Collection<Statement> stmnts;\n         synchronized (_stmnts) {\n             if (_stmnts.isEmpty())\n                 return false;\n-            stmnts = new ArrayList(_stmnts);\n+            stmnts = new ArrayList<Statement>(_stmnts);\n         }\n \n         try {\n-            for (Iterator itr = stmnts.iterator(); itr.hasNext();)\n+            for (Iterator<Statement> itr = stmnts.iterator(); itr.hasNext();)\n                 ((Statement) itr.next()).cancel();\n             return true;\n         } catch (SQLException se) {\n@@ -724,13 +727,13 @@ public boolean assignField(OpenJPAStateManager sm, int field,\n         return true;\n     }\n \n-    public Class getManagedType(Object oid) {\n+    public Class<?> getManagedType(Object oid) {\n         if (oid instanceof Id)\n             return ((Id) oid).getType();\n         return null;\n     }\n \n-    public Class getDataStoreIdType(ClassMetaData meta) {\n+    public Class<?> getDataStoreIdType(ClassMetaData meta) {\n         return Id.class;\n     }\n "},{"sha":"716961df71f471aa5176e1c95ef56ae34e4470b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -782,7 +782,7 @@ private Object handleConcatVal(Object value, Object ob, Object[] params,\n \n         Val value2 = concatVal.getVal2();\n         Object val2 = getValue(value2, ob, params, sm);\n-        return new StringBuffer(100).append(val1).append(val2).toString();\n+        return new StringBuilder(100).append(val1).append(val2).toString();\n     }\n \n     private Object handleSubstringVal(Object value, Object ob, Object[] params,"},{"sha":"429419b01165d6a4c85aebfbc6c6221b42a571a2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -19,9 +19,17 @@\n package org.apache.openjpa.jdbc.kernel;\n \n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -74,6 +82,32 @@ protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n         }\n     }\n \n+    protected List<SQLBuffer> getLockRows(DBDictionary dict, Object id, ClassMapping mapping,\n+            JDBCFetchConfiguration fetch, SQLFactory factory) {\n+        List<SQLBuffer> sqls = super.getLockRows(dict, id, mapping, fetch, factory);\n+        // \n+        if(!dict.supportsLockingWithMultipleTables) {\n+            // look for columns mapped to secondary tables which need to be locked\n+            Map<DBIdentifier,FieldMapping> colsMappedToSecTable = new HashMap<DBIdentifier,FieldMapping>();\n+            FieldMapping fms[] = mapping.getFieldMappings();\n+            for( FieldMapping fm : fms) {\n+                DBIdentifier secTableName = fm.getMappingInfo().getTableIdentifier();\n+                if(!DBIdentifier.isNull(secTableName)) {\n+                    colsMappedToSecTable.put(secTableName, fm);\n+                }\n+            }\n+            for( DBIdentifier secTableName : colsMappedToSecTable.keySet()) {\n+                FieldMapping fm = colsMappedToSecTable.get(secTableName);\n+                // select only the PK columns, since we just want to lock\n+                Select select = factory.newSelect();\n+                select.select(fm.getColumns());\n+                select.whereForeignKey(fm.getJoinForeignKey(), id, mapping, _store);\n+                sqls.add(select.toSelect(true, fetch));\n+            }\n+        }\n+        return sqls;\n+    }\n+\n     protected void optimisticLockInternal(OpenJPAStateManager sm, int level,\n         int timeout, Object sdata, boolean postLockVersionCheck) {\n         super.optimisticLockInternal(sm, level, timeout, sdata,\n@@ -95,4 +129,8 @@ protected void optimisticLockInternal(OpenJPAStateManager sm, int level,\n             }\n         }\n     }\n+\n+    public boolean skipRelationFieldLock() {\n+        return true;\n+    }\n }"},{"sha":"f4dae06d2aad9f56c7fd0b308fa7fa23c32c352b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":38,"deletions":22,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -27,6 +27,8 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Schema;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n@@ -69,7 +71,7 @@\n     private static Localizer _loc = Localizer.forPackage(NativeJDBCSeq.class);\n \n     private JDBCConfiguration _conf = null;\n-    private String _seqName = \"OPENJPA_SEQUENCE\";\n+    private DBIdentifier _seqName = DBIdentifier.newSequence(\"OPENJPA_SEQUENCE\");\n     private int _increment = 1;\n     private int _initial = 1;\n     private int _allocate = 0;\n@@ -78,23 +80,24 @@\n \n     // for deprecated auto-configuration support\n     private String _format = null;\n-    private String _tableName = \"DUAL\";\n+    private DBIdentifier _tableName = DBIdentifier.newTable(\"DUAL\");\n     private boolean _subTable = false;\n \n-    private String _schema = null;\n+    private DBIdentifier _schema = DBIdentifier.NULL;\n         \n     /**\n      * The sequence name. Defaults to <code>OPENJPA_SEQUENCE</code>.\n      */\n+    // @GETTER\n     public String getSequence() {\n-        return _seqName;\n+        return _seqName.getName();\n     }\n \n     /**\n      * The sequence name. Defaults to <code>OPENJPA_SEQUENCE</code>.\n      */\n     public void setSequence(String seqName) {\n-        _seqName = seqName;\n+        _seqName = DBIdentifier.newSequence(seqName);\n     }\n \n     /**\n@@ -153,7 +156,7 @@ public void setIncrement(int increment) {\n      */\n     @Deprecated\n     public void setTableName(String table) {\n-        _tableName = table;\n+        _tableName = DBIdentifier.newTable(table);\n     }\n \n     /**\n@@ -168,14 +171,15 @@ public void setFormat(String format) {\n     @Override\n     public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         // sequence already exists?\n-        if (group.isKnownSequence(_seqName))\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(_seqName);\n+        if (group.isKnownSequence(path))\n             return;\n \n-        String schemaName = getSchema();\n-        if (schemaName == null || schemaName.length() == 0) {\n-            schemaName = Strings.getPackageName(_seqName);\n-            if (schemaName.length() == 0)\n-                schemaName = Schemas.getNewTableSchema(_conf);\n+        DBIdentifier schemaName = getSchemaIdentifier();\n+        if (DBIdentifier.isEmpty(schemaName)) {\n+            schemaName = path.getSchemaName();\n+            if (DBIdentifier.isEmpty(schemaName))\n+                schemaName = Schemas.getNewTableSchemaIdentifier(_conf);\n         }\n \n         // create table in this group\n@@ -206,8 +210,8 @@ public void endConfiguration() {\n             if (_format == null)\n                 throw new MetaDataException(_loc.get(\"no-seq-sql\", _seqName));\n         }\n-        if (_tableName == null)\n-            _tableName = \"DUAL\";\n+        if (DBIdentifier.isNull(_tableName))\n+            _tableName = DBIdentifier.newTable(\"DUAL\");\n \n         String name = dict.getFullName(_seq);\n         Object[] subs = (_subTable) ? new Object[]{ name, _tableName }\n@@ -232,17 +236,18 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n      * Creates the sequence object.\n      */\n     private void buildSequence() {\n-        String seqName = Strings.getClassName(_seqName);\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(_seqName);\n+        DBIdentifier seqName = path.getIdentifier();\n         // JPA 2 added schema as a configurable attribute on  \n         // sequence generator.  OpenJPA <= 1.x allowed this via\n         // schema.sequence on the sequence name.  Specifying a schema\n         // name on the annotation or in the orm will override the old \n         // behavior.\n-        String schemaName = _schema;\n-        if (schemaName == null || schemaName.length() == 0) {\n-            schemaName = Strings.getPackageName(_seqName);\n-            if (schemaName.length() == 0)\n-                schemaName = Schemas.getNewTableSchema(_conf);\n+        DBIdentifier schemaName = _schema;\n+        if (DBIdentifier.isEmpty(schemaName)) {\n+            schemaName = path.getSchemaName();\n+            if (DBIdentifier.isEmpty(schemaName))\n+                schemaName = Schemas.getNewTableSchemaIdentifier(_conf);\n         }\n \n         // build the sequence in one of the designated schemas\n@@ -398,11 +403,22 @@ else if (ACTION_GET.equals(action)) {\n         return true;\n     }\n \n-    public void setSchema(String _schema) {\n-        this._schema = _schema;\n+    /**\n+     * @deprecated\n+     */\n+    public void setSchema(String schema) {\n+        _schema = DBIdentifier.newSchema(schema);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public String getSchema() {\n+        return _schema.getName();\n+    }\n+\n+    public DBIdentifier getSchemaIdentifier() {\n         return _schema;\n     }\n+\n }"},{"sha":"1bcac2b2163aa6a86b3c09400fddb8d65732d435","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":25,"deletions":14,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,11 +22,14 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -48,7 +51,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (PessimisticLockManager.class);\n \n-    private JDBCStore _store;\n+    protected JDBCStore _store;\n \n     public PessimisticLockManager() {\n         setVersionCheckOnReadLock(false);\n@@ -119,27 +122,22 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n \n         Object id = sm.getObjectId();\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        while (mapping.getJoinablePCSuperclassMapping() != null)\n-            mapping = mapping.getJoinablePCSuperclassMapping();\n \n-        // select only the PK columns, since we just want to lock\n-        Select select = _store.getSQLFactory().newSelect();\n-        select.select(mapping.getPrimaryKeyColumns());\n-        select.wherePrimaryKey(id, mapping, _store);\n-        SQLBuffer sql = select.toSelect(true, fetch);\n+        List<SQLBuffer> sqls = getLockRows(dict, id, mapping, fetch, _store.getSQLFactory()); \n \n         ensureStoreManagerTransaction();\n         Connection conn = _store.getConnection();\n         PreparedStatement stmnt = null;\n         ResultSet rs = null;\n         try {\n-            stmnt = prepareStatement(conn, sql);\n-            dict.setTimeouts(stmnt, fetch, true);\n-            rs = executeQuery(conn, stmnt, sql);\n-            checkLock(rs, sm, timeout);\n+            for (SQLBuffer sql : sqls) {\n+                stmnt = prepareStatement(conn, sql);\n+                dict.setTimeouts(stmnt, fetch, true);\n+                rs = executeQuery(conn, stmnt, sql);\n+                checkLock(rs, sm, timeout);\n+            }\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStoreSQLException(sm, se, dict,\n-                level);\n+            throw SQLExceptions.getStore(se, dict, level);\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}\n@@ -149,6 +147,19 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         }\n     }\n \n+    protected List<SQLBuffer> getLockRows(DBDictionary dict, Object id, ClassMapping mapping,\n+            JDBCFetchConfiguration fetch, SQLFactory factory) {\n+        while (mapping.getJoinablePCSuperclassMapping() != null)\n+            mapping = mapping.getJoinablePCSuperclassMapping();\n+        // select only the PK columns, since we just want to lock\n+        Select select = factory.newSelect();\n+        select.select(mapping.getPrimaryKeyColumns());\n+        select.wherePrimaryKey(id, mapping, _store);\n+        List<SQLBuffer> sqls = new ArrayList<SQLBuffer>();\n+        sqls.add(select.toSelect(true, fetch));\n+        return sqls;\n+    }\n+\n     /**\n      * Enforce that we have an actual transaction in progress so that we can\n      * start locking. The transaction should already be begun when using a"},{"sha":"8e569600150feef2a07710f7dba1430b7f311e12","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -271,8 +271,16 @@ private SelectImpl extractImplementation(SelectExecutor selector) {\n                 setCollectionValuedParameter(result, (Collection)val, indices, \n                     key);\n             } else {\n-                for (int j : indices)\n+                for (int j : indices) {\n+                    if (val instanceof Enum) {\n+                        if (_template.get(j) instanceof Integer) {\n+                            val = ((Enum)val).ordinal();\n+                        } else {\n+                            val = ((Enum)val).name();\n+                        }\n+                    } \n                     result.put(j, val);\n+                }\n             }\n         }\n         return result;"},{"sha":"29b51e48d25864128bfbd0f6437e374174475db4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -29,6 +29,8 @@\n import java.util.List;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -167,10 +169,10 @@ private boolean hasGeneratedKey(ClassMapping meta) {\n      * from the result set associated with the stmnt. If not, a separate \n      * sql to select the key will be issued from DBDictionary. \n      */\n-    protected List populateAutoAssignCols(PreparedStatement stmnt, \n-        Column[] autoAssign, String[] autoAssignColNames, RowImpl row) \n+    protected List<Object> populateAutoAssignCols(PreparedStatement stmnt, \n+        Column[] autoAssign, DBIdentifier[] autoAssignColNames, RowImpl row) \n         throws SQLException {\n-        List vals = null;\n+        List<Object> vals = null;\n         if (_dict.supportsGetGeneratedKeys) {\n             // set auto assign values to id col\n             vals = getGeneratedKeys(stmnt, autoAssignColNames);\n@@ -179,9 +181,22 @@ protected List populateAutoAssignCols(PreparedStatement stmnt,\n         return vals;\n     }\n \n+    protected List<Object> populateAutoAssignCols(PreparedStatement stmnt, \n+        Column[] autoAssign, String[] autoAssignColNames, RowImpl row) \n+        throws SQLException {\n+        return populateAutoAssignCols(stmnt, autoAssign, \n+            DBIdentifier.toArray(autoAssignColNames, DBIdentifierType.COLUMN), row);\n+    }\n+    \n     protected void setObjectId(List vals, Column[] autoAssign,\n         String[] autoAssignColNames, RowImpl row) \n         throws SQLException{\n+        setObjectId(vals, autoAssign, DBIdentifier.toArray(autoAssignColNames, DBIdentifierType.COLUMN), row);\n+    }\n+    \n+    protected void setObjectId(List vals, Column[] autoAssign,\n+        DBIdentifier[] autoAssignColNames, RowImpl row) \n+        throws SQLException{\n         OpenJPAStateManager sm = row.getPrimaryKey();\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n         Object val = null;\n@@ -202,9 +217,15 @@ protected void setObjectId(List vals, Column[] autoAssign,\n      * This method will only be called when the database supports\n      * getGeneratedKeys.\n      */\n-    protected List getGeneratedKeys(PreparedStatement stmnt, \n+    protected List<Object> getGeneratedKeys(PreparedStatement stmnt, \n         String[] autoAssignColNames) \n         throws SQLException {\n+        return getGeneratedKeys(stmnt, DBIdentifier.toArray(autoAssignColNames, DBIdentifierType.COLUMN));\n+    }\n+\n+    protected List<Object> getGeneratedKeys(PreparedStatement stmnt, \n+        DBIdentifier[] autoAssignColNames) \n+        throws SQLException {\n         ResultSet rs = stmnt.getGeneratedKeys();\n         List<Object> vals = new ArrayList<Object>();\n         while (rs.next()) {\n@@ -229,7 +250,7 @@ protected List getGeneratedKeys(PreparedStatement stmnt,\n             autoAssignColNames = new String[autoAssign.length];\n             for (int i = 0; i < autoAssign.length; i++)\n                 autoAssignColNames[i] =\n-                    _dict.convertSchemaCase(autoAssign[i].getName());\n+                    _dict.convertSchemaCase(autoAssign[i].getIdentifier());\n         }\n         return autoAssignColNames;\n     }"},{"sha":"896944d5642966937bff7262a15a2b40de774c3f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -373,7 +373,7 @@ public static String substituteParams(String sql, List<Integer> paramOrder)\n             tok.wordChars('0', '9');\n             tok.wordChars('?', '?');\n \n-            StringBuffer buf = new StringBuffer(sql.length());\n+            StringBuilder buf = new StringBuilder(sql.length());\n             for (int ttype; (ttype = tok.nextToken()) !=\n                     StreamTokenizer.TT_EOF;) {\n                 switch (ttype) {"},{"sha":"7dc01a36a6983bb47c6be731136b5cdf34bfd990","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -152,8 +152,7 @@ public void close() {\n \n     public void handleCheckedException(Exception e) {\n         if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n+            throw SQLExceptions.getStore((SQLException) e, _store.getDBDictionary(), _fetch.getReadLockLevel());\n         throw new StoreException(e);\n     }\n }"},{"sha":"84471026a80d84d05d8545b9fd7f8a3c94c9ed8e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":87,"deletions":51,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -31,6 +31,10 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n@@ -46,6 +50,7 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -54,7 +59,6 @@\n import org.apache.openjpa.util.UserException;\n \n import serp.util.Numbers;\n-import serp.util.Strings;\n \n ////////////////////////////////////////////////////////////\n // NOTE: Do not change property names; see SequenceMetaData\n@@ -88,11 +92,11 @@\n     private final HashMap<ClassMapping, Status> _stat =\n         new HashMap<ClassMapping, Status>();\n \n-    private String _table = DEFAULT_TABLE;\n-    private String _seqColumnName = \"SEQUENCE_VALUE\";\n-    private String _pkColumnName = \"ID\";\n-    private String[] _uniqueColumnNames;\n-    private String _uniqueConstraintName;\n+    private DBIdentifier _table = DBIdentifier.newTable(DEFAULT_TABLE);\n+    private DBIdentifier _seqColumnName = DBIdentifier.newColumn(\"SEQUENCE_VALUE\");\n+    private DBIdentifier _pkColumnName = DBIdentifier.newColumn(\"ID\");\n+    private DBIdentifier[] _uniqueColumnNames;\n+    private DBIdentifier _uniqueConstraintName = DBIdentifier.NULL;\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n@@ -106,7 +110,7 @@\n      * will be used.\n      */\n     public String getTable() {\n-        return _table;\n+        return _table.getName();\n     }\n \n     /**\n@@ -118,7 +122,10 @@ public String getTable() {\n      * will be used.\n      */\n     public void setTable(String name) {\n-        _table = name;\n+        // Split the name into its individual parts\n+        String[] names = Normalizer.splitName(name);\n+        // Join the name back together.  This will delimit as appropriate.\n+        _table = DBIdentifier.newTable(Normalizer.joinNames(names));\n     }\n \n     /**\n@@ -134,22 +141,26 @@ public void setTableName(String name) {\n      * to <code>SEQUENCE_VALUE</code>.\n      */\n     public String getSequenceColumn() {\n-        return _seqColumnName;\n+        return _seqColumnName.getName();\n     }\n \n     /**\n      * The name of the column that holds the sequence value. Defaults\n      * to <code>SEQUENCE_VALUE</code>.\n      */\n     public void setSequenceColumn(String sequenceColumn) {\n-        _seqColumnName = sequenceColumn;\n+        _seqColumnName = DBIdentifier.newColumn(sequenceColumn);\n     }\n \n     /**\n      * The name of the table's primary key column. Defaults to\n      * <code>ID</code>.\n      */\n     public String getPrimaryKeyColumn() {\n+        return _pkColumnName.getName();\n+    }\n+\n+    public DBIdentifier getPrimaryKeyColumnIdentifier() {\n         return _pkColumnName;\n     }\n \n@@ -158,7 +169,7 @@ public String getPrimaryKeyColumn() {\n      * <code>ID</code>.\n      */\n     public void setPrimaryKeyColumn(String primaryKeyColumn) {\n-        _pkColumnName = primaryKeyColumn;\n+        _pkColumnName = DBIdentifier.newColumn(primaryKeyColumn);\n     }\n \n     /**\n@@ -186,7 +197,7 @@ public void setAllocate(int alloc) {\n      * GeneratedValue.TABLE strategy to start with. \n      * @return an initial number\n      */\n-    public int getInitialValue() {        \n+    public int getInitialValue() {\n         return _intValue;\n     }\n \n@@ -206,11 +217,11 @@ public void setInitialValue(int intValue) {\n      */\n     public void setUniqueColumns(String columnNames) {\n     \t_uniqueColumnNames = (StringUtils.isEmpty(columnNames)) \n-    \t\t? null : StringUtils.split(columnNames, '|');\n+    \t\t? null : DBIdentifier.split(columnNames, DBIdentifierType.COLUMN, IdentifierUtil.BAR);\n     }\n     \n     public String getUniqueColumns() {\n-    \treturn StringUtils.join(_uniqueColumnNames, '|');\n+    \treturn Normalizer.joinNames(DBIdentifier.toStringArray(_uniqueColumnNames), IdentifierUtil.BAR);\n     }\n \n     /**\n@@ -245,16 +256,20 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         \n         Schema[] schemas = group.getSchemas();\n         for (int i = 0; i < schemas.length; i++) {\n-            String schemaName = Strings.getPackageName(_table);\n-            if (schemaName.length() == 0)\n-                schemaName = Schemas.getNewTableSchema(_conf);\n-            if (schemaName == null)\n-                schemaName = schemas[i].getName();\n+            QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(_table);\n+            DBIdentifier schemaName = path.getSchemaName();\n+            if (DBIdentifier.isEmpty(schemaName)) {\n+                schemaName = Schemas.getNewTableSchemaIdentifier(_conf);\n+            }\n+            if (DBIdentifier.isNull(schemaName)) {\n+                schemaName = schemas[i].getIdentifier();\n+            }\n \n             // create table in this group\n             Schema schema = group.getSchema(schemaName);\n-            if (schema == null)\n+            if (schema == null) {\n                 schema = group.addSchema(schemaName);\n+            }\n             \n             Table copy = schema.importTable(_pkColumn.getTable());\n             // importTable() does not import unique constraints\n@@ -265,8 +280,7 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n             // we need to reset the table name in the column with the\n             // fully qualified name for matching the table name from the\n             // Column.\n-            _pkColumn.resetTableName(schemaName + \".\"\n-                    + _pkColumn.getTableName());\n+            _pkColumn.resetTableIdentifier(QualifiedDBIdentifier.newPath(schemaName, _pkColumn.getTableIdentifier()));\n             // some databases require to create an index for the sequence table\n             _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n                     _table, _pkColumn);\n@@ -351,7 +365,7 @@ protected Status getStatus(ClassMapping mapping) {\n     protected Column addPrimaryKeyColumn(Table table) {\n         DBDictionary dict = _conf.getDBDictionaryInstance();\n         Column pkColumn = table.addColumn(dict.getValidColumnName\n-            (getPrimaryKeyColumn(), table));\n+            (getPrimaryKeyColumnIdentifier(), table));\n         pkColumn.setType(dict.getPreferredType(Types.TINYINT));\n         pkColumn.setJavaType(JavaTypes.INT);\n         return pkColumn;\n@@ -368,20 +382,20 @@ protected Object getPrimaryKey(ClassMapping mapping) {\n      * Creates the object-level representation of the sequence table.\n      */\n     private void buildTable() {\n-        String tableName = null;\n-        String schemaName = \"\";\n-        if (StringUtils.contains(_table,'.')) {\n-            String[] tableParts = StringUtils.split(_table, '.');\n-            // TODO: do we need to check for length? Could we have xxx. or .xxx?\n-            schemaName = tableParts[0];\n-            tableName = tableParts[1];\n+        DBIdentifier tableName = DBIdentifier.NULL;\n+        DBIdentifier schemaName = DBIdentifier.NULL;\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(_table);\n+        if (!DBIdentifier.isEmpty(path.getSchemaName())) {\n+            schemaName = path.getSchemaName();\n+            tableName = path.getUnqualifiedName();\n         }\n         else {\n             tableName = _table;\n         }\n         \n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n+        if (DBIdentifier.isEmpty(schemaName)) {\n+            schemaName = Schemas.getNewTableSchemaIdentifier(_conf);\n+        }\n \n         SchemaGroup group = new SchemaGroup();\n         Schema schema = group.addSchema(schemaName);\n@@ -398,17 +412,17 @@ private void buildTable() {\n         _seqColumn.setJavaType(JavaTypes.LONG);\n         \n         if (_uniqueColumnNames != null) {\n-            String uniqueName = _uniqueConstraintName;\n-            if (StringUtils.isEmpty(uniqueName)) {\n-                uniqueName = dict.getValidUniqueName(\"UNQ\", table);\n+            DBIdentifier uniqueName = _uniqueConstraintName;\n+            if (DBIdentifier.isEmpty(uniqueName)) {\n+                uniqueName = dict.getValidUniqueName(DBIdentifier.newConstraint(\"UNQ\"), table);\n             }\n     \t\tUnique u = table.addUnique(uniqueName);\n-    \t\tfor (String columnName : _uniqueColumnNames) {\n+    \t\tfor (DBIdentifier columnName : _uniqueColumnNames) {\n     \t\t\tif (!table.containsColumn(columnName, _conf.getDBDictionaryInstance()))\n                     throw new UserException(_loc.get(\"unique-missing-column\",\n-                            columnName, table.getName(),\n+                            columnName, table.getIdentifier(),\n                             table.getColumnNames()));\n-    \t\t\tColumn col = table.getColumn(columnName, _conf.getDBDictionaryInstance());\n+    \t\t\tColumn col = table.getColumn(columnName);\n     \t\t\tu.addColumn(col);\n     \t\t}\n         }\n@@ -469,7 +483,7 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n                 getClass(), mapping));\n \n         DBDictionary dict = _conf.getDBDictionaryInstance();\n-        String tableName = resolveTableName(mapping, _pkColumn.getTable());\n+        DBIdentifier tableName = resolveTableIdentifier(mapping, _pkColumn.getTable());\n         SQLBuffer insert = new SQLBuffer(dict).append(\"INSERT INTO \").\n             append(tableName).append(\" (\").\n             append(_pkColumn).append(\", \").append(_seqColumn).\n@@ -519,7 +533,7 @@ protected long getSequence(ClassMapping mapping, Connection conn)\n         SQLBuffer sel = new SQLBuffer(dict).append(_seqColumn);\n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n-        String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+        DBIdentifier tableName = resolveTableIdentifier(mapping, _seqColumn.getTable());\n         SQLBuffer tables = new SQLBuffer(dict).append(tableName);\n \n         SQLBuffer select = dict.toSelect(sel, null, tables, where, null, null,\n@@ -577,7 +591,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n \n                 // update the value\n                 upd = new SQLBuffer(dict);\n-                String tableName = resolveTableName(mapping,\n+                DBIdentifier tableName = resolveTableIdentifier(mapping,\n                         _seqColumn.getTable());\n                 upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n@@ -612,19 +626,32 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n      * \n      * @param class\n      *            mapping to get the schema name\n+     * @deprecated\n      */\n     public String resolveTableName(ClassMapping mapping, Table table) {\n-        String sName = mapping.getTable().getSchemaName();\n-        String tableName;\n-        if (sName == null)\n-            tableName = table.getFullName();\n-        else if (table.getSchemaName() != null)\n-            tableName = table.getFullName();\n-        else\n-            tableName = sName + \".\" + table.getName();\n+        return resolveTableIdentifier(mapping, table).getName();\n+    }\n+\n+    /**\n+     * Resolve a fully qualified table name\n+     * \n+     * @param class\n+     *            mapping to get the schema name\n+     */\n+    public DBIdentifier resolveTableIdentifier(ClassMapping mapping, Table table) {\n+        DBIdentifier sName = mapping.getTable().getSchemaIdentifier();\n+        DBIdentifier tableName = DBIdentifier.NULL;\n+        if (DBIdentifier.isNull(sName)) {\n+            tableName = table.getFullIdentifier();\n+        } else if (!DBIdentifier.isNull(table.getSchemaIdentifier())) {\n+            tableName = table.getFullIdentifier();\n+        } else {\n+            tableName = QualifiedDBIdentifier.newPath(sName, table.getIdentifier());\n+        }\n         return tableName;\n     }\n \n+    \n     /**\n      * Creates the sequence table in the DB.\n      */\n@@ -763,6 +790,7 @@ else if (ACTION_GET.equals(action) || ACTION_SET.equals(action)) {\n     /**\n      * Helper struct to hold status information.\n      */\n+    @SuppressWarnings(\"serial\")\n     protected static class Status\n         implements Serializable {\n \n@@ -809,11 +837,19 @@ protected long getSequence(ResultSet rs, DBDictionary dict)\n         return dict.getLong(rs, 1);\n     }\n \n-    public void setUniqueConstraintName(String _uniqueConstraintName) {\n-        this._uniqueConstraintName = _uniqueConstraintName;\n+    public void setUniqueConstraintName(String uniqueConstraintName) {\n+        _uniqueConstraintName = DBIdentifier.newConstraint(uniqueConstraintName);\n+    }\n+\n+    public void setUniqueConstraintName(DBIdentifier uniqueConstraintName) {\n+        _uniqueConstraintName = uniqueConstraintName;\n     }\n \n     public String getUniqueConstraintName() {\n+        return _uniqueConstraintName.getName();\n+    }\n+\n+    public DBIdentifier getUniqueConstraintIdentifier() {\n         return _uniqueConstraintName;\n     }\n "},{"sha":"c98c8349eaf05ee395ee687bc3edb4dbe692b127","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -78,7 +78,7 @@ public void setPrimaryKeyValue(String value) {\n     protected Column addPrimaryKeyColumn(Table table) {\n         DBDictionary dict = getConfiguration().getDBDictionaryInstance();\n         Column pkColumn = table.addColumn(dict.getValidColumnName\n-            (getPrimaryKeyColumn(), table));\n+            (getPrimaryKeyColumnIdentifier(), table));\n         pkColumn.setType(dict.getPreferredType(Types.VARCHAR));\n         pkColumn.setJavaType(JavaTypes.STRING);\n         pkColumn.setSize(dict.characterColumnSize);"},{"sha":"efe1ba3fd7908a6bcf97f2e42496ac1b8806edbf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -106,7 +106,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         boolean val2Null = _val2 instanceof Const\n             && ((Const) _val2).isSQLValueNull(sel, ctx, bstate.state2);\n         appendTo(sel, ctx, bstate, buf, val1Null, val2Null);\n-        sel.append(buf, state.joins);\n+        if (sel != null)\n+            sel.append(buf, state.joins);\n     }\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, "},{"sha":"e58ffbbf0a4b97461c59228962e012f5632766c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n /**\n@@ -51,5 +52,21 @@ protected String getOperator() {\n     public boolean isAggregate() {\n         return true;\n     }\n+    \n+    /**\n+     * Overrides SQL formation by replacing COUNT(column) by COUNT(*) when specific conditions are met and\n+     * DBDictionary configuration <code>useWildCardForCount</code> is set.\n+     */\n+    @Override\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index) {\n+        super.appendTo(sel, ctx, state, sql, index);\n+        if (ctx.store.getDBDictionary().useWildCardForCount && state.joins.isEmpty()) {\n+            String s = sql.getSQL();\n+            if (s.startsWith(\"COUNT(\") && s.endsWith(\")\")) {\n+                sql.replaceSqlString(\"COUNT(\".length(), s.length()-1, \"*\");\n+            }\n+        }\n+    }\n+\n }\n "},{"sha":"5d8da25d5d6f8a9b9310800ee47cdb4761817bd7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","status":"modified","additions":35,"deletions":20,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,9 +18,13 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.sql.SQLException;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n import java.util.Date;\n \n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.util.InternalException;\n@@ -33,38 +37,49 @@\n class CurrentDate\n     extends Const {\n \n-    private final int _type;\n+    private final Class<? extends Date> _type;\n \n-    public CurrentDate(int type) {\n+    public CurrentDate(Class<? extends Date> type) {\n         _type = type;\n     }\n \n-    public Class getType() {\n-        return Date.class;\n+    public Class<? extends Date> getType() {\n+        return _type;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n+    public Object load(ExpContext ctx, ExpState state, Result res) throws SQLException {\n+        if (Timestamp.class.isAssignableFrom(_type)) {\n+            return res.getTimestamp(this, null);\n+        } else if (Time.class.isAssignableFrom(_type)) {\n+            return res.getTime(this, null);\n+        } else if (Date.class.isAssignableFrom(_type)) {\n+            return res.getDate(this, null);\n+        } else {\n+            throw new InternalException();\n+        }\n+    }\n+    \n     public Object getValue(Object[] params) {\n-        return new Date();\n+        try {\n+            _type.getConstructor(long.class).newInstance(System.currentTimeMillis());\n+        } catch (Exception e) {\n+            return new Date();\n+        }\n+        return null;\n     }\n \n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        switch (_type) {\n-            case JavaSQLTypes.DATE:\n-                sql.append(ctx.store.getDBDictionary().currentDateFunction);\n-                break;\n-            case JavaSQLTypes.TIME:\n-                sql.append(ctx.store.getDBDictionary().currentTimeFunction);\n-                break;\n-            case JavaSQLTypes.TIMESTAMP:\n-                sql.append(ctx.store.getDBDictionary().\n-                    currentTimestampFunction);\n-                break;\n-            default:\n-                throw new InternalException();\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index) {\n+        if (Timestamp.class.isAssignableFrom(_type)) {\n+            sql.append(ctx.store.getDBDictionary().currentTimestampFunction);\n+        } else if (Time.class.isAssignableFrom(_type)) {\n+            sql.append(ctx.store.getDBDictionary().currentTimeFunction);\n+        } else if (Date.class.isAssignableFrom(_type)) {\n+            sql.append(ctx.store.getDBDictionary().currentDateFunction);\n+        } else {\n+            throw new InternalException();\n         }\n     }\n }"},{"sha":"adb7a3019b30c7a238861e654a57a76538041760","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.kernel.exps;\n \n import java.io.Serializable;\n+import java.util.Date;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -49,13 +50,8 @@\n     implements ExpressionFactory, Serializable {\n \n     private static final Val NULL = new Null();\n-    private static final Val CURRENT_DATE = new CurrentDate(JavaSQLTypes.DATE);\n-    private static final Val CURRENT_TIME = new CurrentDate(JavaSQLTypes.TIME);\n-    private static final Val CURRENT_TIMESTAMP =\n-        new CurrentDate(JavaSQLTypes.TIMESTAMP);\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (JDBCExpressionFactory.class);\n+    private static final Localizer _loc = Localizer.forPackage(JDBCExpressionFactory.class);\n \n     private final ClassMapping _type;\n     private final SelectConstructor _cons = new SelectConstructor();\n@@ -263,16 +259,16 @@ public Value getNull() {\n         return NULL;\n     }\n \n-    public Value getCurrentDate() {\n-        return CURRENT_DATE;\n+    public <T extends Date> Value getCurrentDate(Class<T> dateType) {\n+        return new CurrentDate(dateType);\n     }\n \n-    public Value getCurrentTime() {\n-        return CURRENT_TIME;\n+    public <T extends Date> Value getCurrentTime(Class<T> dateType) {\n+        return  new CurrentDate(dateType);\n     }\n \n-    public Value getCurrentTimestamp() {\n-        return CURRENT_TIMESTAMP;\n+    public <T extends Date> Value getCurrentTimestamp(Class<T> dateType) {\n+        return  new CurrentDate(dateType);\n     }\n \n     public Parameter newParameter(Object name, Class type) {\n@@ -450,7 +446,7 @@ public Value getMapValue(Value map, Value arg) {\n     private Value getLiteralRawString(Value val) {\n         if (val instanceof Lit) {\n             Lit lit = (Lit) val;\n-            StringBuffer value = new StringBuffer();\n+            StringBuilder value = new StringBuilder();\n             int pType = lit.getParseType(); \n             if (pType == Literal.TYPE_SQ_STRING ||\n                 pType == Literal.TYPE_STRING)"},{"sha":"d2184668c0666ef6c9e07f5bc2265f2959330af1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -128,7 +128,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n     private static String replaceEscape(String str, String from, String to,\n         String escape) {\n         String[] parts = Strings.split(str, from, Integer.MAX_VALUE);\n-        StringBuffer repbuf = new StringBuffer();\n+        StringBuilder repbuf = new StringBuilder();\n         for (int i = 0; i < parts.length; i++) {\n             if (i > 0) {\n                 // if the previous part ended with an escape character, then"},{"sha":"e22509dd94b9e6e8713bcbf70f2b7c61cabfe9c8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":28,"deletions":7,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -73,6 +73,7 @@\n     private static final int UNBOUND_VAR = 2;\n     private static final int UNACCESSED_VAR = 3;\n     private static final int XPATH = 4;\n+    private static final int OBJECT_PATH = 5;\n \n     private static final Localizer _loc = Localizer.forPackage(PCPath.class);\n \n@@ -215,7 +216,7 @@ public boolean isXPath() {\n     }\n     \n     public String getXPath() {\n-        StringBuffer xpath = new StringBuffer();\n+        StringBuilder xpath = new StringBuilder();\n         Action action;\n         Iterator itr = _actions.iterator();\n         \n@@ -247,7 +248,7 @@ public String getPCPathString() {\n         if (_actions == null)\n             return (_varName == null) ? \"\" : _varName + \".\";\n \n-        StringBuffer path = new StringBuffer();\n+        StringBuilder path = new StringBuilder();\n         Action action;\n         for (Iterator itr = _actions.iterator(); itr.hasNext();) {\n             action = (Action) itr.next();\n@@ -412,6 +413,22 @@ public synchronized void getKey() {\n         _type = PATH;\n     }\n \n+    private void checkObjectPathInheritanceTypeJoined(PathExpState pstate) {\n+        // if this mapping is in InheritanceType.JOINED,\n+        // then add joins\n+         ClassMapping base = _class;\n+         while (base.getJoinablePCSuperclassMapping() != null)\n+             base = base.getJoinablePCSuperclassMapping();\n+         if (base != _class) {\n+             ClassMapping from = _class;\n+             ClassMapping to = base;\n+             _type = OBJECT_PATH;\n+             for (; from != null && from != to; from = from.getJoinablePCSuperclassMapping()) {\n+                 pstate.joins = from.joinSuperclass(pstate.joins, false);\n+             }\n+         }\n+    }\n+\n     public FieldMetaData last() {\n         Action act = lastFieldAction();\n         return (act == null) ? null : isXPath() ?\n@@ -445,7 +462,7 @@ public Class getType() {\n         Action act = lastFieldAction();\n         if (act != null && act.op == Action.GET_XPATH)\n             return ((XMLMetaData) act.data).getType();\n-        \n+\n         FieldMetaData fld = (act == null) ? null : (FieldMetaData) act.data;\n         boolean key = act != null && act.op == Action.GET_KEY;\n         if (fld != null) {\n@@ -529,6 +546,9 @@ else if (action.op == Action.UNBOUND_VAR) {\n \n                 pstate.joins = pstate.joins.crossJoin(_candidate.getTable(),\n                     rel.getTable());\n+                if (!itr.hasNext() && isVariable()) {\n+                    checkObjectPathInheritanceTypeJoined(pstate);\n+                }\n             } else {\n                 // move past the previous field, if any\n                 field = (FieldMapping) ((action.op == Action.GET_XPATH) ?\n@@ -626,6 +646,7 @@ else if (action.op == Action.UNBOUND_VAR) {\n             String subqAlias = findSubqAlias(sel);\n             pstate.joins = pstate.joins.setSubselect(subqAlias);\n             pstate.joins.setCorrelatedVariable(_schemaAlias);\n+            checkObjectPathInheritanceTypeJoined(pstate);\n         }\n         \n         return pstate;\n@@ -652,7 +673,7 @@ private boolean navigateFromParentRootInSubselect(Select sel) {\n         if (sel.getParent() == null)\n             return false;\n         Iterator itr = (_actions == null) ? null : _actions.iterator();\n-        boolean navigateFromRoot = false;\n+\n         boolean hasVar = false;\n         boolean startsWithSubquery = false;\n         while (itr != null && itr.hasNext()) {\n@@ -830,8 +851,8 @@ public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n         sel.setSchemaAlias(_schemaAlias);\n         ClassMapping mapping = getClassMapping(state);\n         PathExpState pstate = (PathExpState) state;\n-        if (mapping == null || !pstate.joinedRel ||\n-            pstate.isEmbedElementColl)            \n+        if (_type != OBJECT_PATH && (mapping == null || !pstate.joinedRel ||\n+            pstate.isEmbedElementColl))\n             sel.select(getColumns(state), pstate.joins);\n         else if (_key && pstate.field.getKey().isEmbedded())\n             selectEmbeddedMapKey(sel, ctx, state);\n@@ -958,7 +979,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         // if select is null, it means we are not aliasing columns\n         // (e.g., during a bulk update)\n         if (sel == null)\n-            sql.append(col.getName());\n+            sql.append(col.getIdentifier());\n         else if (_type == XPATH)\n             // if this is an xpath, append xpath string\n             sql.append(getXPath());"},{"sha":"179e2dfa534128e1dc00a027316e20f7598cca34","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -228,6 +228,9 @@ private void initialize(Select sel, ExpContext ctx, QueryExpressions exps,\n             Val resultVal;\n             for (int i = 0; i < exps.projections.length; i++) {\n                 resultVal = (Val) exps.projections[i];\n+                if (!ctx.store.getDBDictionary().supportsParameterInSelect && resultVal instanceof Lit) {\n+                    ((Lit)resultVal).setRaw(true);\n+                }\n                 // have to join through to related type for pc object \n                 // projections; this ensures that we have all our joins cached\n                 state.projections[i] = resultVal.initialize(sel, ctx, "},{"sha":"82fce7277ab19dcefb8e3ff3a70072b26fbe653b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toLowerCaseFunction;\n         dict.assertSupport(func != null, \"ToLowerCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"3914ff1e40457795c42c171da2855d92575c3091","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toUpperCaseFunction;\n         dict.assertSupport(func != null, \"ToUpperCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"4e47ed3db28df437467e2645c0ca5757d43f17ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -114,7 +114,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n     }\n \n     private String getDiscriminator(LitExpState lstate) {\n-        StringBuffer disc = new StringBuffer(lstate.discValue.toString());\n+        StringBuilder disc = new StringBuilder(lstate.discValue.toString());\n         switch(lstate.disc.getJavaType()) {\n         case JavaTypes.INT:\n             return disc.toString();"},{"sha":"b7246ba20d5c9c7008d20e2ac58bdfafb4c9935c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -113,8 +113,12 @@ private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n \n     public Object load(ExpContext ctx, ExpState state, Result res)\n         throws SQLException {\n-        return Filters.convert(res.getObject(this,\n-            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+        Object value = res.getObject(this, JavaSQLTypes.JDBC_DEFAULT, null);\n+        Class<?> type = getType();\n+        if (value == null && (type.isPrimitive() || Number.class.isAssignableFrom(type))) {\n+            value = Filters.getDefaultForNull(Filters.wrap(type));\n+        }\n+        return Filters.convert(value, type);\n     }\n \n     public void calculateValue(Select sel, ExpContext ctx, ExpState state, "},{"sha":"fe12a3492b0cd6be33b2178346b7046c8c288366","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -172,6 +172,7 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         Joinable join;\n         int pkIdx;\n         boolean canReadDiscriminator = true;\n+        boolean isNullPK = true;\n         for (int i = 0; i < pks.length; i++) {\n             // we know that all pk column join mappings use primary key fields,\n             // cause this mapping uses the oid as its primary key (we recursed\n@@ -186,10 +187,12 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n                 vals[pkIdx] = join.getPrimaryKeyValue(res, join.getColumns(),\n                     fk, store, joins);\n                 res.endDataRequest();\n-                if (vals[pkIdx] == null)\n-                    return null;\n+                isNullPK = isNullPK && vals[pkIdx] == null;\n             }\n         }\n+        if (isNullPK) {\n+            return null;\n+        }\n \n         // the oid data is loaded by the base type, but if discriminator data\n         // is present, make sure to use it to construct the actual oid instance\n@@ -278,7 +281,7 @@ public Joinable assertJoinable(Column col) {\n         Joinable join = getJoinable(col);\n         if (join == null)\n             throw new MetaDataException(_loc.get(\"no-joinable\",\n-                col.getFullName()));\n+                col.getQualifiedPath().toString()));\n         return join;\n     }\n "},{"sha":"5f14db307f9979c4e2d633dd265d4a1ddc8bda6c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":135,"deletions":49,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -29,7 +29,8 @@\n import java.util.Map;\n import java.util.Map.Entry;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -51,6 +52,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class ClassMappingInfo\n     extends MappingInfo\n     implements SourceTracker, Commentable {\n@@ -59,10 +61,10 @@\n         (ClassMappingInfo.class);\n \n     private String _className = Object.class.getName();\n-    private String _tableName = null;\n-    private String _schemaName = null;\n+    private DBIdentifier _tableName = DBIdentifier.NULL;\n+    private DBIdentifier _schemaName = DBIdentifier.NULL;\n     private boolean _joined = false;\n-    private Map _seconds = null;\n+    private Map<DBIdentifier, List<Column>> _seconds = null;\n     private String _subStrat = null;\n     private File _file = null;\n     private int _srcType = SRC_OTHER;\n@@ -71,7 +73,7 @@\n     private int _colNum = 0;  \n     \n     // Unique constraints indexed by primary or secondary table name\n-    private Map<String,List<Unique>> _uniques;\n+    private Map<DBIdentifier,List<Unique>> _uniques;\n \n     /**\n      * The described class name.\n@@ -103,29 +105,49 @@ public void setHierarchyStrategy(String strategy) {\n \n     /**\n      * The given table name.\n+     * @deprecated\n      */\n     public String getTableName() {\n-        return _tableName;\n+        return getTableIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTableIdentifier() {\n+        return _tableName == null ? DBIdentifier.NULL : _tableName;\n     }\n \n     /**\n      * The given table name.\n+     * @deprecated\n      */\n     public void setTableName(String table) {\n+        setTableIdentifier(DBIdentifier.newTable(table));\n+    }\n+\n+    public void setTableIdentifier(DBIdentifier table) {\n         _tableName = table;\n     }\n \n     /**\n      * The default schema name for unqualified tables.\n+     * @deprecated\n      */\n     public String getSchemaName() {\n-        return _schemaName;\n+        return getSchemaIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getSchemaIdentifier() {\n+        return _schemaName == null ? DBIdentifier.NULL : _schemaName;\n     }\n \n     /**\n      * The default schema name for unqualified tables.\n+     * @deprecated\n      */\n     public void setSchemaName(String schema) {\n+        setSchemaIdentifier(DBIdentifier.newSchema(schema));\n+    }\n+\n+    public void setSchemaIdentifier(DBIdentifier schema) {\n         _schemaName = schema;\n     }\n \n@@ -145,45 +167,57 @@ public void setJoinedSubclass(boolean joined) {\n \n     /**\n      * Return the class-level joined tables.\n+     * @deprecated\n      */\n     public String[] getSecondaryTableNames() {\n         if (_seconds == null)\n             return new String[0];\n-        return (String[]) _seconds.keySet().toArray(new String[]{ });\n+        return DBIdentifier.toStringArray(_seconds.keySet().toArray(new DBIdentifier[]{ }));\n+    }\n+\n+    public DBIdentifier[] getSecondaryTableIdentifiers() {\n+        if (_seconds == null)\n+            return new DBIdentifier[0];\n+        return (DBIdentifier[]) _seconds.keySet().toArray(new DBIdentifier[]{ });\n     }\n \n     /**\n      * We allow fields to reference class-level joins using just the table\n      * name, whereas the class join might have schema, etc information.\n      * This method returns the name of the given table as listed in a\n      * class-level join, or the given name if no join exists.\n+     * @deprecated\n      */\n     public String getSecondaryTableName(String tableName) {\n+        return getSecondaryTableIdentifier(DBIdentifier.newTable(tableName)).getName();\n+    }\n+\n+    public DBIdentifier getSecondaryTableIdentifier(DBIdentifier tableName) {\n         // if no secondary table joins, bad table name, exact match,\n         // or an already-qualified table name, nothing to do\n-        if (_seconds == null || tableName == null\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(tableName);\n+        if (_seconds == null || DBIdentifier.isNull(tableName)\n             || _seconds.containsKey(tableName)\n-            || tableName.indexOf('.') != -1)\n+            || !DBIdentifier.isNull(path.getSchemaName()))\n             return tableName;\n \n         // decide which class-level join table is best match\n-        String best = tableName;\n+        DBIdentifier best = tableName;\n         int pts = 0;\n-        String fullJoin;\n-        String join;\n-        int idx;\n-        for (Iterator itr = _seconds.keySet().iterator(); itr.hasNext();) {\n+        DBIdentifier fullJoin = DBIdentifier.NULL;\n+        DBIdentifier join = DBIdentifier.NULL;\n+        for (Iterator<DBIdentifier> itr = _seconds.keySet().iterator(); itr.hasNext();) {\n             // award a caseless match without schema 2 points\n-            fullJoin = (String) itr.next();\n-            idx = fullJoin.lastIndexOf('.');\n-            if (idx == -1 && pts < 2 && fullJoin.equalsIgnoreCase(tableName)) {\n+            fullJoin = (DBIdentifier) itr.next();\n+            QualifiedDBIdentifier joinPath = QualifiedDBIdentifier.getPath(fullJoin);\n+            if (joinPath.isUnqualifiedObject() && pts < 2 && fullJoin.equalsIgnoreCase(tableName)) {\n                 best = fullJoin;\n                 pts = 2;\n-            } else if (idx == -1)\n+            } else if (joinPath.isUnqualifiedObject())\n                 continue;\n \n             // immediately return an exact match with schema\n-            join = fullJoin.substring(idx + 1);\n+            join = joinPath.getIdentifier();\n             if (join.equals(tableName))\n                 return fullJoin;\n \n@@ -199,48 +233,78 @@ public String getSecondaryTableName(String tableName) {\n     /**\n      * Return any columns defined for the given class level join, or empty\n      * list if none.\n+     * @deprecated\n      */\n-    public List getSecondaryTableJoinColumns(String tableName) {\n-        if (_seconds == null || tableName == null)\n-            return Collections.EMPTY_LIST;\n+    public List<Column> getSecondaryTableJoinColumns(String tableName) {\n+        return getSecondaryTableJoinColumns(DBIdentifier.newTable(tableName));\n+    }\n+\n+    public List<Column> getSecondaryTableJoinColumns(DBIdentifier tableName) {\n+        if (_seconds == null || DBIdentifier.isNull(tableName)) {\n+            return Collections.emptyList();\n+        }\n \n         // get the columns for the join with the best match for table name\n-        List cols = (List) _seconds.get(getSecondaryTableName(tableName));\n+        List<Column> cols = _seconds.get(getSecondaryTableIdentifier(tableName));\n         if (cols == null) {\n             // possible that given table has extra info the join table\n             // doesn't have; strip it\n-            int idx = tableName.lastIndexOf('.');\n-            if (idx != -1) {\n-                tableName = tableName.substring(idx + 1);\n-                cols = (List) _seconds.get(getSecondaryTableName(tableName));\n+            QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(tableName);\n+            if (!DBIdentifier.isNull(path.getSchemaName())) {\n+                tableName = path.getIdentifier();\n+                cols = _seconds.get(getSecondaryTableIdentifier(tableName));\n             }\n         }\n-        return (cols == null) ? Collections.EMPTY_LIST : cols;\n+        if (cols == null) {\n+            return Collections.emptyList();\n+        }\n+        return cols;\n     }\n     \n     /**\n      * Adds a Secondary table of given name to this mapping. A secondary table \n      * must be known before unique constraints are added to a Secondary table.\n+     * @deprecated\n      */\n     public void addSecondaryTable(String second) {\n-    \tsetSecondaryTableJoinColumns(second, null);\n+    \tsetSecondaryTableJoinColumns(DBIdentifier.newTable(second), null);\n+    }\n+\n+    public void addSecondaryTable(DBIdentifier second) {\n+        setSecondaryTableJoinColumns(second, null);\n     }\n \n     /**\n      * Declare the given class-level join to the named (secondary) table.\n+     * @deprecated\n      */\n-    public void setSecondaryTableJoinColumns(String tableName, List cols) {\n+    public void setSecondaryTableJoinColumns(String tableName, List<Column> cols) {\n+        if (cols == null)\n+            cols = Collections.emptyList();\n+        setSecondaryTableJoinColumns(DBIdentifier.newTable(tableName), cols);\n+    }\n+\n+    public void setSecondaryTableJoinColumns(DBIdentifier tableName, List<Column> cols) {\n         if (cols == null)\n-            cols = Collections.EMPTY_LIST;\n+            cols = Collections.emptyList();\n         if (_seconds == null)\n-            _seconds = new LinkedHashMap();\n+            _seconds = new LinkedHashMap<DBIdentifier, List<Column>>();\n         _seconds.put(tableName, cols);\n     }\n     \n     /**\n      * Return the named table for the given class.\n+     * @deprecated\n      */\n     public Table getTable(final ClassMapping cls, String tableName, \n+        boolean adapt) {\n+        return getTable(cls, DBIdentifier.newTable(tableName), adapt);\n+    }\n+\n+    /**\n+     * Return the named table for the given class.\n+     */\n+    public Table getTable(final ClassMapping cls, DBIdentifier tableName, \n     \t\tboolean adapt) {\n         Table t = createTable(cls, new TableDefaults() {\n             public String get(Schema schema) {\n@@ -249,6 +313,10 @@ public String get(Schema schema) {\n                 return cls.getMappingRepository().getMappingDefaults().\n                     getTableName(cls, schema);\n             }\n+            public DBIdentifier getIdentifier(Schema schema) {\n+                return cls.getMappingRepository().getMappingDefaults().\n+                    getTableIdentifier(cls, schema);\n+            }\n         }, _schemaName, tableName, adapt);\n         t.setComment(cls.getTypeAlias() == null\n             ? cls.getDescribedType().getName()\n@@ -312,7 +380,7 @@ public void syncWith(ClassMapping cls) {\n         if (cls.getTable() != null && (sup == null\n             || sup.getTable() != cls.getTable()))\n             _tableName = cls.getMappingRepository().getDBDictionary().\n-                getFullName(cls.getTable(), true);\n+                getFullIdentifier(cls.getTable(), true);\n \n         // set io before syncing cols\n         setColumnIO(cls.getColumnIO());\n@@ -334,12 +402,12 @@ else if (cls.getIdentityType() == ClassMapping.ID_DATASTORE)\n     }\n \n     public boolean hasSchemaComponents() {\n-        return super.hasSchemaComponents() || _tableName != null;\n+        return super.hasSchemaComponents() || !DBIdentifier.isNull(_tableName);\n     }\n \n     protected void clear(boolean canFlags) {\n         super.clear(canFlags);\n-        _tableName = null;\n+        _tableName = DBIdentifier.NULL;\n     }\n \n     public void copy(MappingInfo info) {\n@@ -348,15 +416,15 @@ public void copy(MappingInfo info) {\n             return;\n \n         ClassMappingInfo cinfo = (ClassMappingInfo) info;\n-        if (_tableName == null)\n-            _tableName = cinfo.getTableName();\n+        if (DBIdentifier.isNull(_tableName))\n+            _tableName = cinfo.getTableIdentifier();\n         if (_subStrat == null)\n             _subStrat = cinfo.getHierarchyStrategy();\n         if (cinfo._seconds != null) {\n             if (_seconds == null)\n-                _seconds = new HashMap();\n-            Object key;\n-            for (Iterator itr = cinfo._seconds.keySet().iterator();\n+                _seconds = new HashMap<DBIdentifier, List<Column>>();\n+            DBIdentifier key;\n+            for (Iterator<DBIdentifier> itr = cinfo._seconds.keySet().iterator();\n                 itr.hasNext();) {\n                 key = itr.next();\n                 if (!_seconds.containsKey(key))\n@@ -365,8 +433,8 @@ public void copy(MappingInfo info) {\n         }\n         if (cinfo._uniques != null) {\n         \tif (_uniques == null)\n-        \t\t_uniques = new HashMap<String, List<Unique>>();\n-        for (Entry<String, List<Unique>> entry : cinfo._uniques.entrySet())\n+        \t\t_uniques = new HashMap<DBIdentifier, List<Unique>>();\n+        for (Entry<DBIdentifier, List<Unique>> entry : cinfo._uniques.entrySet())\n         \t\tif (!_uniques.containsKey(entry.getKey()))\n         \t\t\t_uniques.put(entry.getKey(), entry.getValue());\n         }\n@@ -378,9 +446,20 @@ public void copy(MappingInfo info) {\n      * @param table must be primary table or secondary table name added a \n      * priori to this receiver.\n      * @param unique the unique constraint. null means no-op.\n+     * @deprecated\n      */\n     public void addUnique(String table, Unique unique) {\n-    \tif (!StringUtils.equals(_tableName, table) &&\n+        addUnique(DBIdentifier.newTable(table), unique);\n+    }\n+\n+    /**\n+     * Add a unique constraint for the given table.\n+     * @param table must be primary table or secondary table name added a \n+     * priori to this receiver.\n+     * @param unique the unique constraint. null means no-op.\n+     */\n+    public void addUnique(DBIdentifier table, Unique unique) {\n+    \tif (!DBIdentifier.equal(_tableName, table) &&\n     \t   (_seconds == null || !_seconds.containsKey(table))) {\n             throw new UserException(_loc.get(\"unique-no-table\", \n                     new Object[]{table, _className, _tableName, \n@@ -389,8 +468,8 @@ public void addUnique(String table, Unique unique) {\n     \tif (unique == null)\n     \t\treturn;\n         if (_uniques == null)\n-            _uniques = new HashMap<String,List<Unique>>();\n-        unique.setTableName(table);\n+            _uniques = new HashMap<DBIdentifier,List<Unique>>();\n+        unique.setTableIdentifier(table);\n         List<Unique> uniques = _uniques.get(table);\n         if (uniques == null) {\n         \tuniques = new ArrayList<Unique>();\n@@ -403,8 +482,16 @@ public void addUnique(String table, Unique unique) {\n     \n     /**\n      * Get the unique constraints of the given primary or secondary table.\n+     * @deprecated\n      */\n     public Unique[] getUniques(String table) {\n+        return getUniques(DBIdentifier.newTable(table));\n+    }\n+\n+    /**\n+     * Get the unique constraints of the given primary or secondary table.\n+     */\n+    public Unique[] getUniques(DBIdentifier table) {\n         if (_uniques == null || _uniques.isEmpty() \n         || _uniques.containsKey(table))\n             return new Unique[0];\n@@ -421,14 +508,14 @@ public void addUnique(String table, Unique unique) {\n         if (_uniques == null || _uniques.isEmpty())\n             return new Unique[0];\n         List<Unique> result = new ArrayList<Unique>();\n-        for (String tableName : _uniques.keySet()) {\n+        for (DBIdentifier tableName : _uniques.keySet()) {\n         \tList<Unique> uniqueConstraints = _uniques.get(tableName);\n         \tfor (Unique template : uniqueConstraints) {\n         \t\tColumn[] templateColumns = template.getColumns();\n                 Column[] uniqueColumns = new Column[templateColumns.length];\n                 Table table = getTable((ClassMapping)cm, tableName, adapt);\n         \t\tfor (int i=0; i<uniqueColumns.length; i++) {\n-                    String columnName = templateColumns[i].getName();\n+                    DBIdentifier columnName = templateColumns[i].getIdentifier();\n         \t\t\tif (!table.containsColumn(columnName)) {\n                         throw new UserException(_loc.get(\n                                 \"unique-missing-column\", \n@@ -491,5 +578,4 @@ public int getColNumber() {\n     public void setColNumber(int colNum) {\n         _colNum = colNum;\n     }\n-    \n }"},{"sha":"e36c5df187e4befdda474987a2760f3371308e55","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -107,7 +107,7 @@ public boolean customLoad(OpenJPAStateManager sm, JDBCStore store,\n     /**\n      * Implement this method to customize loading from a {@link Result}\n      * into an instance. Return true if this mapping handles the\n-     * load; false if normal loading should procede after calling this method.\n+     * load; false if normal loading should proceed after calling this method.\n      */\n     public boolean customLoad(OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, Result result)"},{"sha":"03f86aedb46e446745d68157cb4d47ef377b0405","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -41,6 +41,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class DelegatingJoinable\n     implements Joinable {\n \n@@ -68,7 +69,7 @@ public DelegatingJoinable(Joinable join, ForeignKey fk) {\n             _cols[i] = fk.getColumn(pks[i]);\n             if (_cols[i] == null)\n                 throw new MetaDataException(_loc.get(\"incomplete-join\",\n-                    pks[i].getFullName()));\n+                    pks[i].getFullDBIdentifier()));\n         }\n     }\n \n@@ -84,7 +85,7 @@ public DelegatingJoinable(Joinable join, Column[] cols) {\n         _cols = cols;\n         if (cols.length != join.getColumns().length)\n             throw new MetaDataException(_loc.get(\"bad-remap\",\n-                join.getColumns()[0].getFullName()));\n+                join.getColumns()[0].getFullDBIdentifier()));\n     }\n \n     public int getFieldIndex() {"},{"sha":"e2776658c7d9aead29fe91e5c5f0b59104390fa0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -33,7 +33,6 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -44,6 +43,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class Discriminator\n     implements DiscriminatorStrategy, MetaDataContext, MetaDataModes {\n \n@@ -393,7 +393,7 @@ public void loadSubclasses(JDBCStore store)\n         assertStrategy().loadSubclasses(store);\n     }\n \n-    public Class getClass(JDBCStore store, ClassMapping base, Result result)\n+    public Class<?> getClass(JDBCStore store, ClassMapping base, Result result)\n         throws SQLException, ClassNotFoundException {\n         return assertStrategy().getClass(store, base, result);\n     }"},{"sha":"7466c3cdeadc5f830031f159e334f4a0ef63d137","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -28,9 +28,7 @@\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.util.MetaDataException;\n \n /**\n  * Information about the mapping from a discriminator to the schema, in\n@@ -40,12 +38,10 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class DiscriminatorMappingInfo\n     extends MappingInfo {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (DiscriminatorMappingInfo.class);\n-\n     private String _value = null;\n     \n     /**"},{"sha":"24245d89b44499d94996f5657167ed7f9320c47b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -58,7 +58,7 @@ public void loadSubclasses(JDBCStore store)\n     /**\n      * Return the class for the current result row.\n      */\n-    public Class getClass(JDBCStore store, ClassMapping base, Result result)\n+    public Class<?> getClass(JDBCStore store, ClassMapping base, Result result)\n         throws SQLException, ClassNotFoundException;\n \n     /**"},{"sha":"af44cdf988544ccb771729c6ccb156e760faed90","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n@@ -58,6 +59,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class FieldMapping\n     extends FieldMetaData\n     implements ValueMapping, FieldStrategy {\n@@ -92,11 +94,13 @@\n     private FieldMapping _bi_MTo1_JT_Field = null;\n     private ForeignKey _bi_1ToM_Join_FK = null;\n     private ForeignKey _bi_1ToM_Elem_FK = null;\n+    \n+    private boolean _hasMapsIdCols = false;\n         \n     /**\n      * Constructor.\n      */\n-    public FieldMapping(String name, Class type, ClassMapping owner) {\n+    public FieldMapping(String name, Class<?> type, ClassMapping owner) {\n         super(name, type, owner);\n         _info = owner.getMappingRepository().newMappingInfo(this);\n         _val = (ValueMapping) getValue();\n@@ -621,7 +625,7 @@ public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n \n     private void setPKValueFromMappedByIdField(OpenJPAStateManager sm) {\n         if (sm instanceof StateManagerImpl) {\n-            List mappedByIdFields = ((StateManagerImpl)sm).\n+            List<FieldMetaData> mappedByIdFields = ((StateManagerImpl)sm).\n                 getMappedByIdFields();\n             if (mappedByIdFields == null)\n                 return;\n@@ -1159,10 +1163,17 @@ public void setPolymorphic(int poly) {\n         _val.setPolymorphic(poly);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public void mapConstraints(String name, boolean adapt) {\n         _val.mapConstraints(name, adapt);\n     }\n \n+    public void mapConstraints(DBIdentifier name, boolean adapt) {\n+        _val.mapConstraints(name, adapt);\n+    }\n+\n     public void copyMappingInfo(ValueMapping vm) {\n         _val.copyMappingInfo(vm);\n     }\n@@ -1324,7 +1335,7 @@ public void setBi1MJoinTableInfo() {\n             if (mapped != null) {\n                 FieldMappingInfo info = getMappingInfo();\n                 FieldMappingInfo mappedInfo = mapped.getMappingInfo();\n-                info.setTableName(mappedInfo.getTableName());\n+                info.setTableIdentifier(mappedInfo.getTableIdentifier());\n                 info.setColumns(mapped.getElementMapping().getValueInfo().getColumns());\n                 getElementMapping().getValueInfo().setColumns(\n                     mappedInfo.getColumns());\n@@ -1335,4 +1346,12 @@ public void setBi1MJoinTableInfo() {\n     public boolean isNonDefaultMappingUsingJoinTableStrategy() {\n         return isBi1To1JT() || isUni1To1JT() || isUniMTo1JT() || isBiMTo1JT();\n     }\n+    \n+    public void setMapsIdCols(boolean hasMapsIdCols) {\n+        _hasMapsIdCols = hasMapsIdCols;\n+    }\n+    \n+    public boolean hasMapsIdCols() {\n+        return _hasMapsIdCols;\n+    }\n }"},{"sha":"ced9c7c0a91c540f60cd15071eec43ba0a716d23","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"modified","additions":40,"deletions":22,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,8 +22,7 @@\n import java.util.Collection;\n import java.util.List;\n \n-import org.apache.openjpa.conf.Compatibility;\n-import org.apache.openjpa.jdbc.meta.strats.MapTableFieldStrategy;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -47,14 +46,15 @@\n  * @author Abe White\n  * @author Pinaki Poddar\n  */\n+@SuppressWarnings(\"serial\")\n public class FieldMappingInfo\n     extends MappingInfo\n     implements Commentable {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (FieldMappingInfo.class);\n \n-    private String _tableName = null;\n+    private DBIdentifier _tableName = DBIdentifier.NULL;\n     private boolean _outer = false;\n     private Column _orderCol = null;\n     private boolean _canOrderCol = true;\n@@ -63,15 +63,25 @@\n \n     /**\n      * The user-supplied name of the table for this field.\n+     * @deprecated\n      */\n     public String getTableName() {\n-        return _tableName;\n+        return getTableIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTableIdentifier() {\n+        return _tableName == null ? DBIdentifier.NULL : _tableName;\n     }\n \n     /**\n      * The user-supplied name of the table for this field.\n+     * @deprecated\n      */\n     public void setTableName(String tableName) {\n+        setTableIdentifier(DBIdentifier.newTable(tableName));\n+    }\n+\n+    public void setTableIdentifier(DBIdentifier tableName) {\n         _tableName = tableName;\n     }\n \n@@ -124,19 +134,19 @@ public void setCanOrderColumn(boolean canOrder) {\n      */\n     public Table getTable(final FieldMapping field, boolean create,\n         boolean adapt) {\n-        if (_tableName == null && !create)\n+        if (DBIdentifier.isNull(_tableName) && !create)\n             return null;\n \n         Table table = field.getDefiningMapping().getTable();\n-        String schemaName = (table == null) ? null \n-            : table.getSchema().getName();\n+        DBIdentifier schemaName = (table == null) ? DBIdentifier.NULL \n+            : table.getSchema().getIdentifier();\n \n         // if we have no join columns defined, there may be class-level join\n         // information with a more fully-qualified name for our table\n-        String tableName = _tableName;\n-        if (tableName != null && getColumns().isEmpty())\n+        DBIdentifier tableName = _tableName;\n+        if (!DBIdentifier.isNull(tableName) && getColumns().isEmpty())\n             tableName = field.getDefiningMapping().getMappingInfo().\n-                getSecondaryTableName(tableName);\n+                getSecondaryTableIdentifier(tableName);\n \n         return createTable(field, new TableDefaults() {\n             public String get(Schema schema) {\n@@ -145,13 +155,18 @@ public String get(Schema schema) {\n                 return field.getMappingRepository().getMappingDefaults().\n                     getTableName(field, schema);\n             }\n+            public DBIdentifier getIdentifier(Schema schema) {\n+                // TODO Auto-generated method stub\n+                return field.getMappingRepository().getMappingDefaults().\n+                    getTableIdentifier(field, schema);\n+            }\n         }, schemaName, tableName, adapt);\n     }\n \n     public ForeignKey getJoinForeignKey (final FieldMapping field, Table table,\n         boolean adapt) {\n         if (field.isUni1ToMFK()) {\n-            List cols = field.getElementMapping().getValueInfo().getColumns();\n+            List<Column> cols = field.getElementMapping().getValueInfo().getColumns();\n             return getJoin(field, table, adapt, cols);\n         }\n         return null;\n@@ -168,7 +183,7 @@ public ForeignKey getJoin(final FieldMapping field, Table table,\n     }\n     \n     public ForeignKey getJoin(final FieldMapping field, Table table,\n-            boolean adapt, List cols) {\n+            boolean adapt, List<Column> cols) {\n         if (cols.isEmpty()) {\n         \tClassMapping mapping;\n         \tif (field.isEmbedded() && \n@@ -251,7 +266,7 @@ public void addJoinTableUnique(Unique u) {\n             Column[] uniqueColumns = new Column[templateColumns.length];\n             Table table = getTable(field, true, adapt);\n             for (int i=0; i<uniqueColumns.length; i++) {\n-                String columnName = templateColumns[i].getName();\n+                DBIdentifier columnName = templateColumns[i].getIdentifier();\n                 Column uniqueColumn = table.getColumn(columnName);\n                 uniqueColumns[i] = uniqueColumn;\n             }\n@@ -302,12 +317,15 @@ public Column getOrderColumn(FieldMapping field, Table table,\n         Column tmplate = new Column();\n         // Compatibility option determines what should be used for\n         // the default order column name\n+        boolean delimit = field.getMappingRepository().getDBDictionary().delimitAll();\n         if (field.getMappingRepository().getConfiguration()\n             .getCompatibilityInstance().getUseJPA2DefaultOrderColumnName()) {\n             // Use the same strategy as column to build the field name\n-            tmplate.setName(field.getName() + \"_ORDER\");            \n-        } else {        \n-            tmplate.setName(\"ordr\");\n+            DBIdentifier sName = DBIdentifier.newColumn(field.getName(), delimit);\n+            sName = DBIdentifier.append(sName,\"_ORDER\");\n+            tmplate.setIdentifier(sName);\n+        } else {\n+            tmplate.setIdentifier(DBIdentifier.newColumn(\"ordr\", delimit));\n         }\n         \n         tmplate.setJavaType(JavaTypes.INT);\n@@ -337,7 +355,7 @@ public void syncWith(FieldMapping field) {\n \n         if (field.getJoinForeignKey() != null)\n             _tableName = field.getMappingRepository().getDBDictionary().\n-                getFullName(field.getTable(), true);\n+                getFullIdentifier(field.getTable(), true);\n \n         ClassMapping def = field.getDefiningMapping();\n         setColumnIO(field.getJoinColumnIO());\n@@ -391,21 +409,21 @@ protected void syncJoinTableUniques(MetaDataContext context, Unique[] unqs)\n         _joinTableUniques = new ArrayList<Unique>();\n         for (Unique unique:unqs) {\n         \tUnique copy = new Unique();\n-        \tcopy.setName(unique.getName());\n+        \tcopy.setIdentifier(unique.getIdentifier());\n         \tcopy.setDeferred(unique.isDeferred());\n         \t_joinTableUniques.add(unique);\n         }\n     }\n \n \n     public boolean hasSchemaComponents() {\n-        return super.hasSchemaComponents() || _tableName != null\n+        return super.hasSchemaComponents() || !DBIdentifier.isNull(_tableName)\n             || _orderCol != null;\n     }\n \n     protected void clear(boolean canFlags) {\n         super.clear(canFlags);\n-        _tableName = null;\n+        _tableName = DBIdentifier.NULL;\n         _orderCol = null;\n         if (canFlags)\n             _canOrderCol = true;\n@@ -417,8 +435,8 @@ public void copy(MappingInfo info) {\n             return;\n \n         FieldMappingInfo finfo = (FieldMappingInfo) info;\n-        if (_tableName == null)\n-            _tableName = finfo.getTableName();\n+        if (DBIdentifier.isNull(_tableName))\n+            _tableName = finfo.getTableIdentifier();\n         if (!_outer)\n             _outer = finfo.isJoinOuter();\n         if (_canOrderCol && _orderCol == null)"},{"sha":"7db657476c2d9343e47a33d505ea7afa1f90f14e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Comparator;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -30,6 +31,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class JDBCColumnOrder\n     implements JDBCOrder {\n \n@@ -64,15 +66,22 @@ public void setColumnIO(ColumnIO io) {\n         _io = io;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public String getName() {\n         return (_col == null) ? \"\" : _col.getName();\n     }\n \n+    public DBIdentifier getIdentifier() {\n+        return (_col == null) ? DBIdentifier.newColumn(\"\") : _col.getIdentifier();\n+    }\n+\n     public boolean isAscending() {\n         return true;\n     }\n \n-    public Comparator getComparator() {\n+    public Comparator<?> getComparator() {\n         return null;\n     }\n "},{"sha":"e9a14373e30541b4d56abd157815a7d4291cbee9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.meta.Order;\n@@ -43,4 +44,7 @@\n      * we're selecting\n      */\n     public void order(Select sel, ClassMapping elem, Joins joins);\n+    \n+    public DBIdentifier getIdentifier();\n+\n }"},{"sha":"730e861fec46f0c27705a3ba1c24394adc557c8c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Comparator;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -30,6 +31,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class JDBCRelatedFieldOrder\n     implements JDBCOrder {\n \n@@ -49,15 +51,22 @@ public JDBCRelatedFieldOrder(FieldMapping owner, FieldMapping rel,\n         _asc = asc;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public String getName() {\n         return _fm.getName();\n     }\n \n+    public DBIdentifier getIdentifier() {\n+        return DBIdentifier.newColumn(_fm.getName());\n+    }\n+\n     public boolean isAscending() {\n         return _asc;\n     }\n \n-    public Comparator getComparator() {\n+    public Comparator<?> getComparator() {\n         return null;\n     }\n "},{"sha":"6719a83a82fb59c1823bd59ec72d3699c853a338","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Comparator;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.meta.Order;\n@@ -30,11 +31,13 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class JDBCValueOrder\n     implements JDBCOrder {\n \n     private final FieldMapping _fm;\n     private final boolean _asc;\n+    private static final DBIdentifier SQL_ELEMENT = DBIdentifier.newColumn(Order.ELEMENT);\n \n     public JDBCValueOrder(FieldMapping fm, boolean asc) {\n         _fm = fm;\n@@ -45,11 +48,15 @@ public String getName() {\n         return Order.ELEMENT;\n     }\n \n+    public DBIdentifier getIdentifier() {\n+        return SQL_ELEMENT;\n+    }\n+\n     public boolean isAscending() {\n         return _asc;\n     }\n \n-    public Comparator getComparator() {\n+    public Comparator<?> getComparator() {\n         return null;\n     }\n "},{"sha":"b4e74d9bef9686b229ad0763f9d504c07d30aa6a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -68,7 +68,7 @@\n     /**\n      * Return the proper date typecode.\n      */\n-    public static int getDateTypeCode(Class dtype) {\n+    public static int getDateTypeCode(Class<?> dtype) {\n         if (dtype == java.util.Date.class)\n             return DATE;\n         if (dtype == java.sql.Date.class)"},{"sha":"70b68f00db398439cf69e8b4a91578d35ee4d722","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java","status":"modified","additions":104,"deletions":1,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n@@ -87,7 +88,7 @@\n      * @param adapt whether we can adapt the mapping or schema\n      * @return the handler/strategy alias or instance, or null\n      */\n-    public Object getStrategy(ValueMapping vm, Class type, boolean adapt);\n+    public Object getStrategy(ValueMapping vm, Class<?> type, boolean adapt);\n \n     /**\n      * Return the default discriminator value for the given instance.\n@@ -97,16 +98,31 @@\n     /**\n      * Return the default table name for the given class. This method is\n      * only called for classes mapped to their own table.\n+     * @deprecated\n      */\n     public String getTableName(ClassMapping cls, Schema defaultSchema);\n \n+    /**\n+     * Return the default table name for the given class. This method is\n+     * only called for classes mapped to their own table.\n+     */\n+    public DBIdentifier getTableIdentifier(ClassMapping cls, Schema defaultSchema);\n+\n     /**\n      * Return the default secondary table name for the given field. This\n      * method is only called for fields whose strategy requires a secondary\n      * table.\n+     * @deprecated\n      */\n     public String getTableName(FieldMapping fm, Schema defaultSchema);\n \n+    /**\n+     * Return the default secondary table name for the given field. This\n+     * method is only called for fields whose strategy requires a secondary\n+     * table.\n+     */\n+    public DBIdentifier getTableIdentifier(FieldMapping fm, Schema defaultSchema);\n+\n     /**\n      * Fill in default information for the given datastore identity columns.\n      * The columns' name and Java type will already be populated with generic\n@@ -170,21 +186,50 @@ public void populateJoinColumn(FieldMapping fm, Table local, Table foreign,\n      * @param inverse whether this is an inverse foreign key\n      * @param pos the index of this column in the logical foreign key\n      * @param cols the number of columns in the logical foreign key\n+     * @deprecated\n      */\n     public void populateForeignKeyColumn(ValueMapping vm, String name,\n         Table local, Table foreign, Column col, Object target, boolean inverse,\n         int pos, int cols);\n \n+    /**\n+     * Fill in default information for the given column used to join a value\n+     * to its related type. The column will be a clone of the target\n+     * column, or have its name and Java type set in the case of a constant\n+     * target.\n+     *\n+     * @param name base name for value, as decided by mapping\n+     * @param target the target of this column in the join; may be\n+     * another column or a constant value\n+     * @param inverse whether this is an inverse foreign key\n+     * @param pos the index of this column in the logical foreign key\n+     * @param cols the number of columns in the logical foreign key\n+     */\n+    public void populateForeignKeyColumn(ValueMapping vm, DBIdentifier name,\n+        Table local, Table foreign, Column col, Object target, boolean inverse,\n+        int pos, int cols);\n+\n     /**\n      * Fill in default information for the given value columns.\n      * The columns' name and Java type will already be populated with generic\n      * defaults that may be replaced.\n      *\n      * @param name base name for value, as decided by mapping\n+     * @deprecated\n      */\n     public void populateColumns(ValueMapping vm, String name, Table table,\n         Column[] cols);\n \n+    /**\n+     * Fill in default information for the given value columns.\n+     * The columns' name and Java type will already be populated with generic\n+     * defaults that may be replaced.\n+     *\n+     * @param name base name for value, as decided by mapping\n+     */\n+    public void populateColumns(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols);\n+\n     /**\n      * Fill in default information for the given order columns.\n      * The columns' name and Java type will already be populated with generic\n@@ -206,10 +251,24 @@ public boolean populateOrderColumns(FieldMapping fm, Table table,\n      * @return false if the given value should not have null indicator\n      * columns by default; fill in default information even\n      * when returning false in case the user forces an indicator\n+     * @deprecated\n      */\n     public boolean populateNullIndicatorColumns(ValueMapping vm, String name,\n         Table table, Column[] cols);\n \n+    /**\n+     * Fill in default information for the given null indicator columns.\n+     * The columns' name and Java type will already be populated with generic\n+     * defaults that may be replaced.\n+     *\n+     * @param name base name for value, as decided by mapping\n+     * @return false if the given value should not have null indicator\n+     * columns by default; fill in default information even\n+     * when returning false in case the user forces an indicator\n+     */\n+    public boolean populateNullIndicatorColumns(ValueMapping vm, DBIdentifier name,\n+        Table table, Column[] cols);\n+\n     /**\n      * Return a default foreign key for the join from this class' table to its\n      * superclass' table, or null for a logical foreign key only. Do not\n@@ -236,10 +295,23 @@ public ForeignKey getJoinForeignKey(FieldMapping fm, Table local,\n      *\n      * @param name base name for value, as decided by mapping\n      * @param inverse whether this is an inverse key\n+     * @deprecated\n      */\n     public ForeignKey getForeignKey(ValueMapping vm, String name, Table local,\n         Table foreign, boolean inverse);\n \n+    /**\n+     * Return a default foreign key for the join from this value to its\n+     * related type, or null for a logical foreign key only. Do not\n+     * add columns to the key or add the key to the table; only fill in\n+     * its information such as name, delete action, etc.\n+     *\n+     * @param name base name for value, as decided by mapping\n+     * @param inverse whether this is an inverse key\n+     */\n+    public ForeignKey getForeignKey(ValueMapping vm, DBIdentifier name, Table local,\n+        Table foreign, boolean inverse);\n+\n     /**\n      * Return a default index for the join, or null if the\n      * join columns should not be indexed by default. Do not\n@@ -255,10 +327,22 @@ public ForeignKey getForeignKey(ValueMapping vm, String name, Table local,\n      * uniqueness, etc.\n      *\n      * @param name base name for value, as decided by mapping\n+     * @deprecated\n      */\n     public Index getIndex(ValueMapping vm, String name, Table table,\n         Column[] cols);\n \n+    /**\n+     * Return a default index for the value, or null if the value columns\n+     * should not be indexed by default. Do not add columns to the index or\n+     * add the index to the table; only fill in its information such as name,\n+     * uniqueness, etc.\n+     *\n+     * @param name base name for value, as decided by mapping\n+     */\n+    public Index getIndex(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols);\n+\n     /**\n      * Return a default index for the version, or null if the\n      * version columns should not be indexed by default. Do not\n@@ -290,16 +374,35 @@ public Index getIndex(ValueMapping vm, String name, Table table,\n      * information such as name, deferrability, etc.\n      *\n      * @param name base name for value, as decided by mapping\n+     * @deprecated\n      */\n     public Unique getUnique(ValueMapping vm, String name, Table table,\n         Column[] cols);\n \n+    /**\n+     * Return a default constraint for the value, or null if the value columns\n+     * should not be constrained by default. Do not add columns to the\n+     * constraint or add the constraint to the table; only fill in its\n+     * information such as name, deferrability, etc.\n+     *\n+     * @param name base name for value, as decided by mapping\n+     */\n+    public Unique getUnique(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols);\n+\n     /**\n      * Return the name of the primary key for the table of the given class,\n      * or null for database default.\n+     * @deprecated\n      */\n     public String getPrimaryKeyName(ClassMapping cm, Table table);\n \n+    /**\n+     * Return the name of the primary key for the table of the given class,\n+     * or null for database default.\n+     */\n+    public DBIdentifier getPrimaryKeyIdentifier(ClassMapping cm, Table table);\n+\n     /**\n      * If desired, install a primary key on the given secondary table.\n      */"},{"sha":"56f70e4ff2c14d194eee80700153bbced78bd699","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":183,"deletions":85,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -24,6 +24,8 @@\n import java.util.Properties;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.strats.UntypedPCValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.EnumValueHandler;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -36,7 +38,8 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.util.JavaVersions;\n+import org.apache.openjpa.lib.identifier.Identifier;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.meta.JavaTypes;\n import serp.util.Strings;\n \n@@ -66,11 +69,11 @@\n     private boolean _addNullInd = false;\n     private boolean _ordinalEnum = false;\n     private boolean _stringifyUnmapped = false;\n-    private String _dsIdName = null;\n-    private String _versName = null;\n-    private String _discName = null;\n-    private String _orderName = null;\n-    private String _nullIndName = null;\n+    private DBIdentifier _dsIdName = DBIdentifier.NULL;\n+    private DBIdentifier _versName = DBIdentifier.NULL;\n+    private DBIdentifier _discName = DBIdentifier.NULL;\n+    private DBIdentifier _orderName = DBIdentifier.NULL;\n+    private DBIdentifier _nullIndName = DBIdentifier.NULL;\n     private boolean _removeHungarianNotation = false;\n \n     public boolean isRemoveHungarianNotation() {\n@@ -333,83 +336,133 @@ public void setDeferConstraints(boolean defer) {\n     /**\n      * Default base name for datastore identity columns, or null to the\n      * mapping's built-in name.\n+     * @deprecated\n      */\n     public String getDataStoreIdColumnName() {\n-        return _dsIdName;\n+        return getDataStoreIdColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getDataStoreIdColumnIdentifier() {\n+        return _dsIdName == null ? DBIdentifier.NULL : _dsIdName;\n     }\n \n     /**\n      * Default base name for datastore identity columns, or null to the\n      * mapping's built-in name.\n+     * @deprecated\n      */\n     public void setDataStoreIdColumnName(String dsIdName) {\n+        setDataStoreIdColumnIdentifier(DBIdentifier.newColumn(dsIdName));\n+    }\n+\n+    public void setDataStoreIdColumnIdentifier(DBIdentifier dsIdName) {\n         _dsIdName = dsIdName;\n     }\n \n     /**\n      * Default base name for version identity columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public String getVersionColumnName() {\n-        return _versName;\n+        return getVersionColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getVersionColumnIdentifier() {\n+        return _versName == null ? DBIdentifier.NULL : _versName;\n     }\n \n     /**\n      * Default base name for version identity columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public void setVersionColumnName(String versName) {\n+        setVersionColumnIdentifier(DBIdentifier.newColumn(versName));\n+    }\n+\n+    public void setVersionColumnIdentifier(DBIdentifier versName) {\n         _versName = versName;\n     }\n \n     /**\n      * Default base name for discriminator columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public String getDiscriminatorColumnName() {\n-        return _discName;\n+        return getDiscriminatorColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getDiscriminatorColumnIdentifier() {\n+        return _discName == null ? DBIdentifier.NULL : _discName;\n     }\n \n     /**\n      * Default base name for discriminator columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public void setDiscriminatorColumnName(String discName) {\n+        setDiscriminatorColumnIdentifier(DBIdentifier.newColumn(discName));\n+    }\n+\n+    public void setDiscriminatorColumnIdentifier(DBIdentifier discName) {\n         _discName = discName;\n     }\n \n     /**\n      * Default base name for order columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public String getOrderColumnName() {\n-        return _orderName;\n+        return getOrderColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getOrderColumnIdentifier() {\n+        return _orderName == null ? DBIdentifier.NULL : _orderName;\n     }\n \n     /**\n      * Default base name for order columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public void setOrderColumnName(String orderName) {\n+        setOrderColumnIdentifier(DBIdentifier.newColumn(orderName));\n+    }\n+\n+    public void setOrderColumnIdentifier(DBIdentifier orderName) {\n         _orderName = orderName;\n     }\n \n     /**\n      * Default base name for null indicator columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public String getNullIndicatorColumnName() {\n-        return _nullIndName;\n+        return getNullIndicatorColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getNullIndicatorColumnIdentifier() {\n+        return _nullIndName == null ? DBIdentifier.NULL : _nullIndName;\n     }\n \n     /**\n      * Default base name for null indicator columns, or null to the mapping's\n      * built-in name.\n+     * @deprecated\n      */\n     public void setNullIndicatorColumnName(String nullIndName) {\n+        setNullIndicatorColumnIdentifier(DBIdentifier.newColumn(nullIndName));\n+    }\n+    \n+    public void setNullIndicatorColumnIdentifier(DBIdentifier nullIndName) {\n         _nullIndName = nullIndName;\n     }\n-\n+    \n     public boolean defaultMissingInfo() {\n         return _defMissing;\n     }\n@@ -451,7 +504,7 @@ public Object getStrategy(Discriminator disc, boolean adapt) {\n         return null;\n     }\n \n-    public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n+    public Object getStrategy(ValueMapping vm, Class<?> type, boolean adapt) {\n         Object ret = _fieldMap.get(type.getName());\n         if (ret != null)\n             return ret;\n@@ -511,37 +564,41 @@ public Object getDiscriminatorValue(Discriminator disc, boolean adapt) {\n \n     public String getTableName(ClassMapping cls, Schema schema) {\n         String name = Strings.getClassName(cls.getDescribedType()).\n-            replace('$', '_');\n+            replace(IdentifierUtil.DOLLAR_CHAR, IdentifierUtil.UNDERSCORE_CHAR);\n         if (!_defMissing)\n             name = dict.getValidTableName(name, schema);\n         return name;\n     }\n \n+    public DBIdentifier getTableIdentifier(ClassMapping cls, Schema schema) {\n+        return DBIdentifier.newTable(getTableName(cls, schema));\n+    }\n+\n     public String getTableName(FieldMapping fm, Schema schema) {\n-        String name = fm.getName();\n+        return getTableIdentifier(fm, schema).getName();\n+    }\n+\n+    public DBIdentifier getTableIdentifier(FieldMapping fm, Schema schema) {\n+        DBIdentifier sName = DBIdentifier.newTable(fm.getName());\n         Table table = fm.getDefiningMapping().getTable();\n         if (table != null) {\n-            String tableName = table.getName();\n-            if (tableName.length() > 5)\n-                tableName = tableName.substring(0, 5);\n-            name = tableName + \"_\" + name;\n+            DBIdentifier tableName = DBIdentifier.truncate(table.getIdentifier(),5);\n+            sName = DBIdentifier.append(tableName, fm.getName());\n         }\n         if (!_defMissing)\n-            name = dict.getValidTableName(name, schema);\n-        return name;\n+            sName = dict.getValidTableName(sName, schema);\n+        return sName;\n     }\n \n     public void populateDataStoreIdColumns(ClassMapping cls, Table table,\n         Column[] cols) {\n         for (int i = 0; i < cols.length; i++) {\n-            if (_dsIdName != null && cols.length == 1)\n-                cols[i].setName(_dsIdName);\n-            else if (_dsIdName != null)\n-                cols[i].setName(_dsIdName + i);\n+            if (!DBIdentifier.isNull(_dsIdName) && cols.length == 1)\n+                cols[i].setIdentifier(_dsIdName);\n+            else if (!DBIdentifier.isNull(_dsIdName))\n+                cols[i].setIdentifier(DBIdentifier.append(_dsIdName, Integer.toString(i)));\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n     }\n \n     /**\n@@ -550,56 +607,44 @@ else if (_dsIdName != null)\n     protected void correctName(Table table, Column col) {\n         if (!_defMissing || _removeHungarianNotation)\n         {\n-            String name = col.getName();\n+            DBIdentifier name = col.getIdentifier();\n             if (_removeHungarianNotation)\n-                name = removeHungarianNotation(name);\n-            col.setName(dict.getValidColumnName(name, table));\n+                name = DBIdentifier.removeHungarianNotation(name);\n+            DBIdentifier correctedName = dict.getValidColumnName(name, table);\n+            col.setIdentifier(correctedName);\n+            table.addCorrectedColumnName(correctedName, true);\n         }\n     }\n \n     protected String removeHungarianNotation(String columnName) {\n-        char[] name = columnName.toCharArray();\n-        int newStart = 0;\n-\n-        for (int i = 0; i < name.length; i++) {\n-            if (Character.isUpperCase(name[i]))\n-            {\n-                newStart = i;\n-                break;\n-            }\n-        }\n-\n-        return columnName.substring(newStart);\n+        return Normalizer.removeHungarianNotation(columnName);\n     }\n \n     public void populateColumns(Version vers, Table table, Column[] cols) {\n         for (int i = 0; i < cols.length; i++) {\n-            if (_versName != null && cols.length == 1)\n-                cols[i].setName(_versName);\n-            else if (_versName != null) {\n-                if (i == 0)\n-                    cols[i].setName(_versName);\n-                else\n-                    cols[i].setName(_versName + \"_\" + i);\n-            } else if (_versName != null)\n-                cols[i].setName(_versName + i);\n+            if (!DBIdentifier.isNull(_versName) && cols.length == 1)\n+                cols[i].setIdentifier(_versName);\n+            else if (!DBIdentifier.isNull(_versName)) {\n+                if (i == 0) {\n+                    cols[i].setIdentifier(_versName);\n+                } else {\n+                    cols[i].setIdentifier(DBIdentifier.append(_versName, Integer.toString(i)));\n+                }\n+            } else if (!DBIdentifier.isNull(_versName))\n+                cols[i].setIdentifier(DBIdentifier.append(_versName, Integer.toString(i)));\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n     }\n \n     public void populateColumns(Discriminator disc, Table table,\n         Column[] cols) {\n         for (int i = 0; i < cols.length; i++) {\n-            if (_discName != null && cols.length == 1)\n-                cols[i].setName(_discName);\n-            else if (_discName != null)\n-                cols[i].setName(_discName + i);\n+            if (!DBIdentifier.isNull(_discName) && cols.length == 1)\n+                cols[i].setIdentifier(_discName);\n+            else if (!DBIdentifier.isNull(_discName))\n+                cols[i].setIdentifier(DBIdentifier.append(_discName, Integer.toString(i)));\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n     }\n \n     public void populateJoinColumn(ClassMapping cm, Table local, Table foreign,\n@@ -612,51 +657,67 @@ public void populateJoinColumn(FieldMapping fm, Table local, Table foreign,\n         correctName(local, col);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public void populateForeignKeyColumn(ValueMapping vm, String name,\n+        Table local, Table foreign, Column col, Object target, boolean inverse,\n+        int pos, int cols) {\n+        populateForeignKeyColumn(vm, DBIdentifier.newColumn(name), local, foreign, col,\n+            target, inverse, pos, cols);\n+    }\n+\n+    public void populateForeignKeyColumn(ValueMapping vm, DBIdentifier name,\n         Table local, Table foreign, Column col, Object target, boolean inverse,\n         int pos, int cols) {\n         if (cols == 1)\n-            col.setName(name);\n+            col.setIdentifier(name);\n         else if (target instanceof Column)\n-            col.setName(name + \"_\" + ((Column) target).getName());\n+            col.setIdentifier(DBIdentifier.combine(name,((Column) target).getIdentifier().getName()));\n         correctName(local, col);\n     }\n \n     public void populateColumns(ValueMapping vm, String name, Table table,\n         Column[] cols) {\n-        for (int i = 0; i < cols.length; i++) {\n+        populateColumns(vm, DBIdentifier.newColumn(name), table, cols);\n+    }\n+\n+    public void populateColumns(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols) {\n+        for (int i = 0; i < cols.length; i++)\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n-        }\n-        table.resetSubColumns();\n     }\n \n     public boolean populateOrderColumns(FieldMapping fm, Table table,\n         Column[] cols) {\n         for (int i = 0; i < cols.length; i++) {\n-            if (_orderName != null && cols.length == 1)\n-                cols[i].setName(_orderName);\n-            else if (_orderName != null)\n-                cols[i].setName(_orderName + i);\n+            if (!DBIdentifier.isNull(_orderName) && cols.length == 1)\n+                cols[i].setIdentifier(_orderName);\n+            else if (!DBIdentifier.isNull(_orderName))\n+                cols[i].setIdentifier(DBIdentifier.append(_orderName, Integer.toString(i)));\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n         return _orderLists && (JavaTypes.ARRAY == fm.getTypeCode()\n             || List.class.isAssignableFrom(fm.getType()));\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public boolean populateNullIndicatorColumns(ValueMapping vm, String name,\n+        Table table, Column[] cols) {\n+        return populateNullIndicatorColumns(vm, DBIdentifier.newColumn(name), table, cols);\n+    }\n+\n+    public boolean populateNullIndicatorColumns(ValueMapping vm, DBIdentifier name,\n         Table table, Column[] cols) {\n         for (int i = 0; i < cols.length; i++) {\n-            if (_nullIndName != null && cols.length == 1)\n-                cols[i].setName(_nullIndName);\n-            else if (_nullIndName != null)\n-                cols[i].setName(_nullIndName + i);\n+            if (!DBIdentifier.isNull(_nullIndName) && cols.length == 1)\n+                cols[i].setIdentifier(_nullIndName);\n+            else if (!DBIdentifier.isNull(_nullIndName))\n+                cols[i].setIdentifier(DBIdentifier.append(_nullIndName, Integer.toString(i)));\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n         return _addNullInd;\n     }\n \n@@ -680,7 +741,15 @@ public ForeignKey getJoinForeignKey(FieldMapping fm, Table local,\n         return fk;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public ForeignKey getForeignKey(ValueMapping vm, String name, Table local,\n+        Table foreign, boolean inverse) {\n+        return getForeignKey(vm, DBIdentifier.newForeignKey(name), local, foreign, inverse);\n+    }\n+        \n+    public ForeignKey getForeignKey(ValueMapping vm, DBIdentifier name, Table local,\n         Table foreign, boolean inverse) {\n         if (_fkAction == ForeignKey.ACTION_NONE)\n             return null;\n@@ -698,7 +767,7 @@ public Index getJoinIndex(FieldMapping fm, Table table, Column[] cols) {\n             return null;\n \n         Index idx = new Index();\n-        idx.setName(getIndexName(null, table, cols));\n+        idx.setIdentifier(getIndexName(DBIdentifier.NULL, table, cols));\n         return idx;\n     }\n \n@@ -714,20 +783,34 @@ protected boolean areAllPrimaryKeyColumns(Column[] cols) {\n \n     /**\n      * Generate an index name.\n+     * @deprecated\n      */\n     protected String getIndexName(String name, Table table, Column[] cols) {\n+        return getIndexName(DBIdentifier.newIndex(name), table, cols).getName();\n+    }\n+\n+    protected DBIdentifier getIndexName(DBIdentifier name, Table table, Column[] cols) {\n         // always use dict for index names because no spec mandates them\n         // based on defaults\n-        if (name == null)\n-            name = cols[0].getName();\n+        DBIdentifier sName = name;\n+        if (DBIdentifier.isNull(sName))\n+            sName = cols[0].getIdentifier();\n \n         if (_removeHungarianNotation)\n-            name = removeHungarianNotation(name);\n+            sName = DBIdentifier.removeHungarianNotation(sName);\n \n-        return dict.getValidIndexName(name, table);\n+        return dict.getValidIndexName(sName, table);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Index getIndex(ValueMapping vm, String name, Table table,\n+        Column[] cols) {\n+        return getIndex(vm, DBIdentifier.newIndex(name), table, cols);\n+    }\n+\n+    public Index getIndex(ValueMapping vm, DBIdentifier name, Table table,\n         Column[] cols) {\n         if (!_indexFK || vm.getForeignKey() == null\n             || !vm.getForeignKey().isLogical())\n@@ -736,39 +819,54 @@ public Index getIndex(ValueMapping vm, String name, Table table,\n             return null;\n \n         Index idx = new Index();\n-        idx.setName(getIndexName(name, table, cols));\n+        idx.setIdentifier(getIndexName(name, table, cols));\n         return idx;\n     }\n \n     public Index getIndex(Version vers, Table table, Column[] cols) {\n         if (!_indexVers)\n             return null;\n         Index idx = new Index();\n-        idx.setName(getIndexName(_versName, table, cols));\n+        idx.setIdentifier(getIndexName(_versName, table, cols));\n         return idx;\n     }\n \n     public Index getIndex(Discriminator disc, Table table, Column[] cols) {\n         if (!_indexDisc)\n             return null;\n         Index idx = new Index();\n-        idx.setName(getIndexName(_discName, table, cols));\n+        idx.setIdentifier(getIndexName(_discName, table, cols));\n         return idx;\n     }\n \n     public Unique getJoinUnique(FieldMapping fm, Table table, Column[] cols) {\n         return null;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Unique getUnique(ValueMapping vm, String name, Table table,\n         Column[] cols) {\n         return null;\n     }\n \n+    public Unique getUnique(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols) {\n+        return null;\n+    }\n+\n+    /**\n+     * @deprecated\n+     */\n     public String getPrimaryKeyName(ClassMapping cm, Table table) {\n         return null;\n     }\n \n+    public DBIdentifier getPrimaryKeyIdentifier(ClassMapping cm, Table table) {\n+        return DBIdentifier.NULL;\n+    }\n+\n     public void installPrimaryKey(FieldMapping fm, Table table) {\n     }\n "},{"sha":"6cd0963881ee4e927c960d75420ec9d50b94f0c6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":162,"deletions":137,"changes":299,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -26,6 +26,9 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -51,6 +54,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class MappingInfo\n     implements Serializable {\n \n@@ -64,7 +68,7 @@\n         (MappingInfo.class);\n \n     private String _strategy = null;\n-    private List _cols = null;\n+    private List<Column> _cols = null;\n     private Index _idx = null;\n     private Unique _unq = null;\n     private ForeignKey _fk = null;\n@@ -92,19 +96,30 @@ public void setStrategy(String strategy) {\n     /**\n      * Raw column data.\n      */\n-    public List getColumns() {\n-        return (_cols == null) ? Collections.EMPTY_LIST : _cols;\n+    public List<Column> getColumns() {\n+        if (_cols == null) {\n+            return Collections.emptyList();\n+        }\n+        return _cols;\n     }\n     \n     /**\n      * Gets the columns whose table name matches the given table name. \n+     * @deprecated\n      */\n-    public List getColumns(String tableName) {\n+    public List<Column> getColumns(String tableName) {\n+        return getColumns(DBIdentifier.newTable(tableName));\n+    }\n+\n+    /**\n+     * Gets the columns whose table name matches the given table name. \n+     */\n+    public List<Column> getColumns(DBIdentifier tableName) {\n         if (_cols == null) \n-        \treturn Collections.EMPTY_LIST;\n-        List result = new ArrayList();\n-        for (Object col : _cols) {\n-        \tif (StringUtils.equals(((Column)col).getTableName(), \n+        \treturn Collections.emptyList();\n+        List<Column> result = new ArrayList<Column>();\n+        for (Column col : _cols) {\n+        \tif (DBIdentifier.equal(col.getTableIdentifier(), \n         \t\t\ttableName)) \n         \t\tresult.add(col);\n         }\n@@ -114,7 +129,7 @@ public List getColumns(String tableName) {\n     /**\n      * Raw column data.\n      */\n-    public void setColumns(List cols) {\n+    public void setColumns(List<Column> cols) {\n         _cols = cols;\n     }\n \n@@ -321,12 +336,12 @@ public void copy(MappingInfo info) {\n                 _canFK = info.canForeignKey();\n         }\n         _implicitRelation = info.isImplicitRelation();\n-        List cols = getColumns();\n-        List icols = info.getColumns();\n+        List<Column> cols = getColumns();\n+        List<Column> icols = info.getColumns();\n         if (!icols.isEmpty() && (cols.isEmpty()\n             || cols.size() == icols.size())) {\n             if (cols.isEmpty())\n-                cols = new ArrayList(icols.size());\n+                cols = new ArrayList<Column>(icols.size());\n             for (int i = 0; i < icols.size(); i++) {\n                 if (cols.size() == i)\n                     cols.add(new Column());\n@@ -448,7 +463,7 @@ public void assertNoJoin(MetaDataContext context, boolean die) {\n             Column col;\n             for (int i = 0; !join && i < _cols.size(); i++) {\n                 col = (Column) _cols.get(i);\n-                if (col.getTarget() != null)\n+                if (!DBIdentifier.isNull(col.getTargetIdentifier()))\n                     join = true;\n             }\n         }\n@@ -469,43 +484,48 @@ public void assertNoJoin(MetaDataContext context, boolean die) {\n      * @param schemaName default schema if known, or null\n      * @param given given table name\n      * @param adapt whether we can alter the schema or mappings\n+     * @deprecated\n      */\n     public Table createTable(MetaDataContext context, TableDefaults def,\n         String schemaName, String given, boolean adapt) {\n+        return createTable(context, def, DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newTable(given), adapt);\n+    }\n+\n+    public Table createTable(MetaDataContext context, TableDefaults def,\n+        DBIdentifier schemaName, DBIdentifier given, boolean adapt) {\n         MappingRepository repos = (MappingRepository) context.getRepository();\n-        if (given == null && (def == null || (!adapt\n+        if (DBIdentifier.isNull(given) && (def == null || (!adapt\n             && !repos.getMappingDefaults().defaultMissingInfo())))\n             throw new MetaDataException(_loc.get(\"no-table\", context));\n \n-        if (schemaName == null)\n-            schemaName = Schemas.getNewTableSchema((JDBCConfiguration)\n+        if (DBIdentifier.isNull(schemaName))\n+            schemaName = Schemas.getNewTableSchemaIdentifier((JDBCConfiguration)\n                 repos.getConfiguration());\n \n         // if no given and adapting or defaulting missing info, use template\n         SchemaGroup group = repos.getSchemaGroup();\n         Schema schema = null;\n-        if (given == null) {\n+        if (DBIdentifier.isNull(given)) {\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 schema = group.addSchema(schemaName);\n-            given = def.get(schema);\n+            given = def.getIdentifier(schema);\n         }\n \n-        String fullName;\n-        String sep = repos.getDBDictionary().catalogSeparator;\n-        int dotIdx = given.lastIndexOf(sep);\n-        if (dotIdx == -1)\n-            fullName = (schemaName == null) ? given : schemaName + sep + given;\n-        else {\n-            fullName = given;\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(given);\n+        if (DBIdentifier.isNull(path.getSchemaName())) {\n+            if (!DBIdentifier.isNull(schemaName)) {\n+                path.setSchemaName(schemaName);\n+            }\n+        } else {\n+            schemaName = path.getSchemaName();\n             schema = null;\n-            schemaName = given.substring(0, dotIdx);\n-            given = given.substring(dotIdx + 1);\n         }\n \n         // look for named table using full name and findTable, which allows\n         // the dynamic schema factory to create the table if needed\n-        Table table = group.findTable(fullName);\n+        Table table = group.findTable(path);\n         if (table != null)\n             return table;\n         if (!adapt)\n@@ -543,13 +563,17 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         // mapping, or none at all if we're adapting.  can't just given one of\n         // n columns because we don't know which of the n columns the info\n         // applies to\n-        List given = getColumns();\n+        List<Column> given = getColumns();\n+        \n+        if (context instanceof FieldMapping && ((FieldMapping)context).hasMapsIdCols())\n+            given = ((FieldMapping)context).getValueInfo().getMapsIdColumns();\n+        \n         boolean fill = ((MappingRepository) context.getRepository()).\n             getMappingDefaults().defaultMissingInfo();\n         if ((!given.isEmpty() || (!adapt && !fill))\n             && given.size() != tmplates.length) {\n         \t// also consider when this info has columns from multiple tables\n-        \tgiven = getColumns(table.getName());\n+        \tgiven = getColumns(table.getIdentifier());\n         \tif ((!adapt && !fill) && given.size() != tmplates.length) {\n         \t\t// try default table\n         \t\tgiven = getColumns(\"\");\n@@ -573,7 +597,7 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         return cols;\n     }\n     \n-    boolean canMerge(List given, Column[] templates, boolean adapt,\n+    boolean canMerge(List<Column> given, Column[] templates, boolean adapt,\n             boolean fill) {\n     \treturn !((!given.isEmpty() || (!adapt && !fill)) \n     \t\t\t&& given.size() != templates.length);\n@@ -623,8 +647,8 @@ protected static Column mergeColumn(MetaDataContext context, String prefix,\n         assertTable(context, table);\n \n         // if not adapting must provide column name at a minimum\n-        String colName = (given == null) ? null : given.getName();\n-        if (colName == null && !adapt && !fill)\n+        DBIdentifier colName = (given == null) ? DBIdentifier.NULL : given.getIdentifier();\n+        if (DBIdentifier.isNull(colName) && !adapt && !fill)\n             throw new MetaDataException(_loc.get(prefix + \"-no-col-name\",\n                 context));\n \n@@ -634,15 +658,15 @@ protected static Column mergeColumn(MetaDataContext context, String prefix,\n         // determine the column name based on given info, or template if none;\n         // also make sure that if the user gave a column name, he didn't try\n         // to put the column in an unexpected table\n-        if (colName == null)\n-            colName = tmplate.getName();\n-        int dotIdx = colName.lastIndexOf(dict.catalogSeparator);\n-        if (dotIdx == 0)\n-            colName = colName.substring(1);\n-        else if (dotIdx != -1) {\n-            findTable(context, colName.substring(0, dotIdx), table,\n+        if (DBIdentifier.isNull(colName))\n+            colName = tmplate.getIdentifier();\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(colName);\n+        if (path.isUnqualifiedColumn()) {\n+            colName = path.getIdentifier();\n+        } else if (!DBIdentifier.isNull(path.getObjectTableName())) {\n+            findTable(context, path.getObjectTableName(), table,\n                 null, null);\n-            colName = colName.substring(dotIdx + 1);\n+            colName = path.getUnqualifiedName();\n         }\n \n         // find existing column\n@@ -654,8 +678,8 @@ else if (dotIdx != -1) {\n             // should seldom if ever occur as long as the database dictionaries\n             // are kept up-to-date. \n             // \n-            if ((colName.length() > dict.maxColumnNameLength) || \n-               dict.getInvalidColumnWordSet().contains(colName.toUpperCase()) &&\n+            if ((colName.getName().length() > dict.maxColumnNameLength) || \n+               dict.getInvalidColumnWordSet().contains(DBIdentifier.toUpper(colName).getName()) &&\n               !(table.getClass().getName().contains(\"DynamicTable\"))) {\n                 colName=dict.getValidColumnName(colName, new Table());\n                 col = table.getColumn(colName);\n@@ -810,7 +834,7 @@ else if (col.getJavaType() == JavaTypes.OBJECT) {\n      * @param rel if we're finding the target table of a join, the\n      * joined-to type; allows us to also look in its superclass tables\n      */\n-    private static Table findTable(MetaDataContext context, String name,\n+    private static Table findTable(MetaDataContext context, DBIdentifier name,\n         Table expected, Table inverse, ClassMapping rel) {\n         // is this the expected table?\n         if (expected == null && rel != null)\n@@ -833,15 +857,15 @@ private static Table findTable(MetaDataContext context, String name,\n \n         // none of the possible tables\n         throw new MetaDataException(_loc.get(\"col-wrong-table\", context,\n-            expected, name));\n+            expected, name.getName()));\n     }\n \n     /**\n      * Return whether the given name matches the given table.\n      */\n-    private static boolean isTableName(String name, Table table) {\n-        return name.equalsIgnoreCase(table.getName())\n-            || name.equalsIgnoreCase(table.getFullName());\n+    private static boolean isTableName(DBIdentifier name, Table table) {\n+        return DBIdentifier.equal(name, table.getIdentifier())\n+            || DBIdentifier.equal(name, table.getFullIdentifier());\n     }\n \n     /**\n@@ -906,10 +930,10 @@ protected Index createIndex(MetaDataContext context, String prefix,\n         if (_idx == null && (tmplate == null || (!adapt && !fill)))\n             return null;\n \n-        String name = null;\n+        DBIdentifier name = DBIdentifier.NULL;\n         boolean unq;\n         if (_idx != null) {\n-            name = _idx.getName();\n+            name = _idx.getIdentifier();\n             unq = _idx.isUnique();\n             // preserve multiple columns if they are specified in the index\n             if (_idx.getColumns() != null && _idx.getColumns().length > 1)\n@@ -918,11 +942,11 @@ protected Index createIndex(MetaDataContext context, String prefix,\n             unq = tmplate.isUnique();\n \n         // if no name provided by user info, make one\n-        if (name == null) {\n+        if (DBIdentifier.isNull(name)) {\n             if (tmplate != null)\n-                name = tmplate.getName();\n+                name = tmplate.getIdentifier();\n             else {\n-                name = cols[0].getName();\n+                name = cols[0].getIdentifier();\n                 name = repos.getDBDictionary().getValidIndexName(name, table);\n             }\n         }\n@@ -1005,13 +1029,13 @@ protected Unique createUnique(MetaDataContext context, String prefix,\n         if (!adapt && !fill && _unq == null)\n             return null;\n \n-        String name;\n+        DBIdentifier name = DBIdentifier.NULL;\n         boolean deferred;\n         if (_unq != null) {\n-            name = _unq.getName();\n+            name = _unq.getIdentifier();\n             deferred = _unq.isDeferred();\n         } else {\n-            name = tmplate.getName();\n+            name = tmplate.getIdentifier();\n             deferred = tmplate.isDeferred();\n         }\n \n@@ -1023,8 +1047,8 @@ protected Unique createUnique(MetaDataContext context, String prefix,\n             deferred = false;\n         }\n         \n-        if (StringUtils.isEmpty(name)) {\n-        \tname = cols[0].getName();\n+        if (DBIdentifier.isEmpty(name)) {\n+        \tname = cols[0].getIdentifier();\n         \tname = repos.getDBDictionary().getValidUniqueName(name, table);\n         }\n         \n@@ -1050,7 +1074,7 @@ protected Unique createUnique(MetaDataContext context, String prefix,\n      * @param adapt whether we can modify the existing mapping or schema\n      */\n     protected ForeignKey createForeignKey(MetaDataContext context,\n-        String prefix, List given, ForeignKeyDefaults def, Table table,\n+        String prefix, List<Column> given, ForeignKeyDefaults def, Table table,\n         ClassMapping cls, ClassMapping rel, boolean inversable, boolean adapt) {\n         assertTable(context, table);\n         if (prefix == null)\n@@ -1112,10 +1136,10 @@ protected ForeignKey createForeignKey(MetaDataContext context,\n         if (exist != null) {\n             // make existing key logical?\n             if (!_canFK) {\n-                if (exist.getDeleteAction() != exist.ACTION_NONE && !adapt)\n+                if (exist.getDeleteAction() != ForeignKey.ACTION_NONE && !adapt)\n                     throw new MetaDataException(_loc.get(prefix\n                         + \"-fk-exists\", context));\n-                exist.setDeleteAction(exist.ACTION_NONE);\n+                exist.setDeleteAction(ForeignKey.ACTION_NONE);\n             }\n \n             if (_fk != null && _fk.isDeferred() && !exist.isDeferred()) {\n@@ -1136,7 +1160,7 @@ protected ForeignKey createForeignKey(MetaDataContext context,\n             return exist;\n         }\n \n-        String name = null;\n+        DBIdentifier name = DBIdentifier.NULL;\n         int delAction = ForeignKey.ACTION_NONE;\n         int upAction = ForeignKey.ACTION_NONE;\n         boolean deferred = false;\n@@ -1145,22 +1169,22 @@ protected ForeignKey createForeignKey(MetaDataContext context,\n             : def.get(local, foreign, _join == JOIN_INVERSE);\n         if (_fk != null && (tmplate == null || (!adapt && !fill))) {\n             // if not adapting or no template info use given data\n-            name = _fk.getName();\n+            name = _fk.getIdentifier();\n             delAction = _fk.getDeleteAction();\n             upAction = _fk.getUpdateAction();\n             deferred = _fk.isDeferred();\n         } else if (_canFK && (adapt || fill)) {\n             if (_fk == null && tmplate != null) {\n                 // no user given info; use template data\n-                name = tmplate.getName();\n+                name = tmplate.getIdentifier();\n                 delAction = tmplate.getDeleteAction();\n                 upAction = tmplate.getUpdateAction();\n                 deferred = tmplate.isDeferred();\n             } else if (_fk != null && tmplate != null) {\n                 // merge user and template data, always letting user info win\n-                name = _fk.getName();\n-                if (name == null && tmplate.getName() != null)\n-                    name = tmplate.getName();\n+                name = _fk.getIdentifier();\n+                if (DBIdentifier.isNull(name) && !DBIdentifier.isNull(tmplate.getIdentifier()))\n+                    name = tmplate.getIdentifier();\n                 delAction = _fk.getDeleteAction();\n                 if (delAction == ForeignKey.ACTION_NONE)\n                     delAction = tmplate.getDeleteAction();\n@@ -1212,7 +1236,7 @@ else if ((joins[i][2] == Boolean.TRUE) != (_join == JOIN_INVERSE))\n      * Use the join information to populate our internal column I/O data.\n      */\n     private void setIOFromJoins(ForeignKey fk, Object[][] joins) {\n-        List cols = getColumns();\n+        List<Column> cols = getColumns();\n         _io = null;\n         if (cols.isEmpty())\n             return;\n@@ -1251,7 +1275,7 @@ else if ((joins[i][2] == Boolean.TRUE) == (_join == JOIN_INVERSE))\n      */\n     private Object[][] createJoins(MetaDataContext context,\n         String prefix, Table table, ClassMapping cls, ClassMapping rel,\n-        List given, ForeignKeyDefaults def, boolean inversable, boolean adapt) {\n+        List<Column> given, ForeignKeyDefaults def, boolean inversable, boolean adapt) {\n         MappingRepository repos = (MappingRepository) context.getRepository();\n         boolean fill = repos.getMappingDefaults().defaultMissingInfo();\n         Object[][] joins;\n@@ -1267,7 +1291,7 @@ else if ((joins[i][2] == Boolean.TRUE) == (_join == JOIN_INVERSE))\n             Column tmplate;\n             for (int i = 0; i < targets.length; i++) {\n                 tmplate = new Column();\n-                tmplate.setName(targets[i].getName());\n+                tmplate.setIdentifier(targets[i].getIdentifier());\n                 tmplate.setJavaType(targets[i].getJavaType());\n                 tmplate.setType(targets[i].getType());\n                 tmplate.setTypeName(targets[i].getTypeName());\n@@ -1324,16 +1348,16 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n         ClassMapping rel, ForeignKeyDefaults def, boolean inversable,\n         boolean adapt, boolean fill) {\n         // default to the primary key column name if this is a pk join\n-        String name = given.getName();\n-        if (name == null && given != null\n+        DBIdentifier name = given.getIdentifier();\n+        if (DBIdentifier.isNull(name) && given != null\n             && given.getFlag(Column.FLAG_PK_JOIN) && cls != null) {\n             Column[] pks = cls.getPrimaryKeyColumns();\n             if (pks.length == 1)\n-                name = pks[0].getName();\n+                name = pks[0].getIdentifier();\n         }\n \n         // if we can't adapt, then the user must at least give a column name\n-        if (name == null && !adapt && !fill)\n+        if (DBIdentifier.isNull(name) && !adapt && !fill)\n             throw new MetaDataException(_loc.get(prefix + \"-no-fkcol-name\",\n                 context));\n \n@@ -1343,18 +1367,16 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n         Table foreign = rel.getTable();\n         boolean fullName = false;\n         boolean inverse = false;\n-        if (name != null) {\n-            int dotIdx = name.lastIndexOf('.');\n-            if (dotIdx != -1) {\n-                // allow use of '.' without prefix to mean \"use expected\n-                // foreign table\"\n-                if (dotIdx == 0)\n+        if (!DBIdentifier.isNull(name)) {\n+            QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(name);\n+            if (!DBIdentifier.isNull(path.getObjectTableName())) {\n+                if (DBIdentifier.isEmpty(path.getObjectTableName()))\n                     local = foreign;\n                 else\n-                    local = findTable(context, name.substring(0, dotIdx),\n+                    local = findTable(context, path.getObjectTableName(),\n                         local, foreign, null);\n                 fullName = true;\n-                name = name.substring(dotIdx + 1);\n+                name = path.getIdentifier().getUnqualifiedName();\n \n                 // if inverse join, then swap local and foreign tables\n                 if (local != table) {\n@@ -1371,28 +1393,27 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n         }\n \n         // determine target\n-        String targetName = given.getTarget();\n+        DBIdentifier targetName = given.getTargetIdentifier();\n         Object target = null;\n         Table ttable = null;\n         boolean constant = false;\n         boolean fullTarget = false;\n-        if (targetName == null && given.getTargetField() != null) {\n+        if (DBIdentifier.isNull(targetName) && given.getTargetField() != null) {\n             ClassMapping tcls = (inverse) ? cls : rel;\n             String fieldName = given.getTargetField();\n-            int dotIdx = fieldName.lastIndexOf('.');\n-            fullTarget = dotIdx != -1;\n+            String[] names = Normalizer.splitName(fieldName);\n+            fullTarget = names.length > 1;\n \n-            if (dotIdx == 0) {\n+            if (names.length > 1 && StringUtils.isEmpty(names[0])) {\n                 // allow use of '.' without prefix to mean \"use expected local\n                 // cls\"; but if we already inversed no need to switch again\n                 if (!inverse)\n                     tcls = cls;\n-                fieldName = fieldName.substring(1);\n-            } else if (dotIdx > 0) {\n+                fieldName = names[1];\n+            } else if (names.length > 1) {\n                 // must be class + field name\n-                tcls = findClassMapping(context, fieldName.substring\n-                    (0, dotIdx), cls, rel);\n-                fieldName = fieldName.substring(dotIdx + 1);\n+                tcls = findClassMapping(context, names[0], cls, rel);\n+                fieldName = names[1];\n             }\n             if (tcls == null)\n                 throw new MetaDataException(_loc.get(prefix\n@@ -1408,39 +1429,40 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n                     + \"-fktargetfield-cols\", context, fieldName, name));\n             ttable = (field.getJoinForeignKey() != null) ? field.getTable()\n                 : field.getDefiningMapping().getTable();\n-            targetName = field.getColumns()[0].getName();\n-        } else if (targetName != null) {\n-            if (targetName.charAt(0) == '\\'') {\n+            targetName = field.getColumns()[0].getIdentifier();\n+        } else if (!DBIdentifier.isNull(targetName)) {\n+            String targetNameStr = targetName.getName();\n+            if (targetNameStr.charAt(0) == '\\'') {\n                 constant = true;\n-                target = targetName.substring(1, targetName.length() - 1);\n-            } else if (targetName.charAt(0) == '-'\n-                || targetName.charAt(0) == '.'\n-                || Character.isDigit(targetName.charAt(0))) {\n+                target = targetNameStr.substring(1, targetNameStr.length() - 1);\n+            } else if (targetNameStr.charAt(0) == '-'\n+                || targetNameStr.charAt(0) == '.'\n+                || Character.isDigit(targetNameStr.charAt(0))) {\n                 constant = true;\n                 try {\n-                    if (targetName.indexOf('.') == -1)\n-                        target = new Integer(targetName);\n+                    if (targetNameStr.indexOf('.') == -1)\n+                        target = new Integer(targetNameStr);\n                     else\n-                        target = new Double(targetName);\n+                        target = new Double(targetNameStr);\n                 } catch (RuntimeException re) {\n                     throw new MetaDataException(_loc.get(prefix\n                         + \"-bad-fkconst\", context, targetName, name));\n                 }\n-            } else if (\"null\".equalsIgnoreCase(targetName))\n+            } else if (\"null\".equalsIgnoreCase(targetNameStr))\n                 constant = true;\n             else {\n-                int dotIdx = targetName.lastIndexOf('.');\n-                fullTarget = dotIdx != -1;\n-                if (dotIdx == 0) {\n+                QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(targetName); \n+                fullTarget = (!DBIdentifier.isNull(path.getObjectTableName()));\n+                if (!DBIdentifier.isNull(path.getObjectTableName()) && \n+                    DBIdentifier.isEmpty(path.getObjectTableName())) {\n                     // allow use of '.' without prefix to mean \"use expected\n                     // local table\", but ignore if we're already inversed\n                     if (!inverse)\n                         ttable = local;\n-                    targetName = targetName.substring(1);\n-                } else if (dotIdx != -1) {\n-                    ttable = findTable(context, targetName.substring(0,\n-                        dotIdx), foreign, local, (inverse) ? cls : rel);\n-                    targetName = targetName.substring(dotIdx + 1);\n+                    targetName = path.getIdentifier().getUnqualifiedName();\n+                } else if (!DBIdentifier.isNull(path.getObjectTableName())) {\n+                    ttable = findTable(context, path.getObjectTableName(), foreign, local, (inverse) ? cls : rel);\n+                    targetName = path.getIdentifier().getUnqualifiedName();\n                 }\n             }\n         }\n@@ -1464,19 +1486,19 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n         // in the column name, but not in the column target, or if the user\n         // gives no column name but a full target name\n         inverse = inverse || local != table || (local == foreign\n-            && ((fullName && !fullTarget) || (name == null && fullTarget)));\n+            && ((fullName && !fullTarget) || (DBIdentifier.isNull(name) && fullTarget)));\n         if (!inversable && !constant && inverse) {\n             if (local == foreign)\n                 throw new MetaDataException(_loc.get(prefix\n                     + \"-bad-fk-self-inverse\", context, local));\n             throw new MetaDataException(_loc.get(prefix + \"-bad-fk-inverse\",\n                 context, local, table));\n         }\n-        if (name == null && constant)\n+        if (DBIdentifier.isNull(name) && constant)\n             throw new MetaDataException(_loc.get(prefix\n                 + \"-no-fkcol-name-adapt\", context));\n \n-        if (name == null && targetName == null) {\n+        if (DBIdentifier.isNull(name) && DBIdentifier.isNull(targetName)) {\n             // if no name or target is provided and there's more than one likely\n             // join possibility, too ambiguous\n             PrimaryKey pk = foreign.getPrimaryKey();\n@@ -1485,13 +1507,13 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n                     + \"-no-fkcol-name-adapt\", context));\n \n             // assume target is pk column\n-            targetName = pk.getColumns()[0].getName();\n-        } else if (name != null && targetName == null) {\n+            targetName = pk.getColumns()[0].getIdentifier();\n+        } else if (!DBIdentifier.isNull(name) && DBIdentifier.isNull(targetName)) {\n             // if one primary key column use it for target; if multiple joins\n             // look for a foreign column with same name as local column\n             PrimaryKey pk = foreign.getPrimaryKey();\n             if (joins.length == 1 && pk != null && pk.getColumns().length == 1) {\n-                targetName = pk.getColumns()[0].getName();\n+                targetName = pk.getColumns()[0].getIdentifier();\n             }\n             else if (foreign.getColumn(name) != null) {\n                 targetName = name;\n@@ -1505,15 +1527,15 @@ else if (foreign.getColumn(name) != null) {\n         // find the target column, and create template for local column based\n         // on it\n         Column tmplate = new Column();\n-        tmplate.setName(name);\n+        tmplate.setIdentifier(name);\n         if (!constant) {\n             Column tcol = foreign.getColumn(targetName);\n             if (tcol == null)\n                 throw new MetaDataException(_loc.get(prefix + \"-bad-fktarget\",\n                     new Object[]{ context, targetName, name, foreign }));\n \n-            if (name == null)\n-                tmplate.setName(tcol.getName());\n+            if (DBIdentifier.isNull(name))\n+                tmplate.setIdentifier(tcol.getIdentifier());\n             tmplate.setJavaType(tcol.getJavaType());\n             tmplate.setType(tcol.getType());\n             tmplate.setTypeName(tcol.getTypeName());\n@@ -1531,8 +1553,8 @@ else if (target instanceof Double)\n         if (def != null)\n             def.populate(local, foreign, tmplate, target, inverse, idx,\n                 joins.length);\n-        if (name != null)\n-            tmplate.setName(name);\n+        if (!DBIdentifier.isNull(name))\n+            tmplate.setIdentifier(name);\n \n         // create or merge local column\n         Column col = mergeColumn(context, prefix, tmplate, true, given, local,\n@@ -1585,7 +1607,7 @@ protected void syncColumns(MetaDataContext context, Column[] cols,\n         if (cols == null || cols.length == 0)\n             _cols = null;\n         else {\n-            _cols = new ArrayList(cols.length);\n+            _cols = new ArrayList<Column>(cols.length);\n             Column col;\n             for (int i = 0; i < cols.length; i++) {\n                 col = syncColumn(context, cols[i], cols.length,\n@@ -1617,7 +1639,7 @@ protected void syncIndex(MetaDataContext context, Index idx) {\n \n         _canIdx = true;\n         _idx = new Index();\n-        _idx.setName(idx.getName());\n+        _idx.setIdentifier(idx.getIdentifier());\n         _idx.setUnique(idx.isUnique());\n         if (idx.getColumns() != null && idx.getColumns().length > 1)\n             _idx.setColumns(idx.getColumns());\n@@ -1634,7 +1656,7 @@ protected void syncUnique(MetaDataContext context, Unique unq) {\n \n         _canUnq = true;\n         _unq = new Unique();\n-        _unq.setName(unq.getName());\n+        _unq.setIdentifier(unq.getIdentifier());\n         _unq.setDeferred(unq.isDeferred());\n     }\n     \n@@ -1661,7 +1683,7 @@ protected void syncForeignKey(MetaDataContext context, ForeignKey fk,\n         else {\n             _canFK = true;\n             _fk = new ForeignKey();\n-            _fk.setName(fk.getName());\n+            _fk.setIdentifier(fk.getIdentifier());\n             _fk.setDeleteAction(fk.getDeleteAction());\n             _fk.setUpdateAction(fk.getUpdateAction());\n             _fk.setDeferred(fk.isDeferred());\n@@ -1675,7 +1697,7 @@ protected void syncForeignKey(MetaDataContext context, ForeignKey fk,\n         Object[] cpks = fk.getPrimaryKeyConstants();\n \n         int size = cols.length + ccols.length + cpkCols.length;\n-        _cols = new ArrayList(size);\n+        _cols = new ArrayList<Column>(size);\n         Column col;\n         for (int i = 0; i < cols.length; i++) {\n             col = syncColumn(context, cols[i], size, false, local,\n@@ -1721,27 +1743,28 @@ protected static Column syncColumn(MetaDataContext context, Column col,\n             getDBDictionary();\n         Column copy = new Column();\n         if (col.getTable() != colTable || inverse)\n-            copy.setName(dict.getFullName(col.getTable(), true)\n-                + dict.catalogSeparator + col.getName());\n+            copy.setIdentifier(QualifiedDBIdentifier.newPath(dict.getFullIdentifier(col.getTable(), true),\n+                col.getIdentifier()));\n         else\n-            copy.setName(col.getName());\n+            copy.setIdentifier(col.getIdentifier());\n \n         // set target if not default\n         if (target != null) {\n             if (target == NULL)\n-                copy.setTarget(\"null\");\n+                copy.setTargetIdentifier(DBIdentifier.newColumn(\"null\"));\n             else if (target instanceof Column) {\n                 Column tcol = (Column) target;\n                 if ((!inverse && tcol.getTable() != targetTable)\n                     || (inverse && tcol.getTable() != colTable))\n-                    copy.setTarget(dict.getFullName(tcol.getTable(), true)\n-                        + dict.catalogSeparator + tcol.getName());\n+                    copy.setTargetIdentifier(\n+                        QualifiedDBIdentifier.newPath(dict.getFullIdentifier(tcol.getTable(), true),\n+                        tcol.getIdentifier()));\n                 else if (!defaultTarget(col, tcol, num))\n-                    copy.setTarget(tcol.getName());\n+                    copy.setTargetIdentifier(tcol.getIdentifier());\n             } else if (target instanceof Number)\n-                copy.setTarget(target.toString());\n+                copy.setTargetIdentifier(DBIdentifier.newConstant(target.toString()));\n             else\n-                copy.setTarget(\"'\" + target + \"'\");\n+                copy.setTargetIdentifier(DBIdentifier.newConstant(\"'\" + target + \"'\"));\n         } else if (num > 1)\n             copy.setTargetField(col.getTargetField());\n \n@@ -1835,7 +1858,7 @@ private static boolean isPrimitive(int type) {\n      */\n     private static boolean defaultTarget(Column col, Column targetCol,\n         int num) {\n-        if (col.getName().equals(targetCol.getName()))\n+        if (col.getIdentifier().equals(targetCol.getIdentifier()))\n             return true;\n         if (num > 1)\n             return false;\n@@ -1853,8 +1876,10 @@ private static boolean defaultTarget(Column col, Column targetCol,\n \n         /**\n          * Return the default table name.\n+         * @deprecated\n          */\n         public String get(Schema schema);\n+        public DBIdentifier getIdentifier(Schema schema);\n     }\n \n     /**"},{"sha":"61d348143b346f68380600fc9d40b2f185abd32d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":124,"deletions":85,"changes":209,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -30,6 +30,7 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.ByteArrayValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.CharArrayStreamValueHandler;\n@@ -104,16 +105,16 @@\n  *\n  * @author Abe White\n  */\n-public class MappingRepository\n-    extends MetaDataRepository {\n+public class MappingRepository extends MetaDataRepository {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (MappingRepository.class);\n \n     private transient DBDictionary _dict = null;\n     private transient MappingDefaults _defaults = null;\n     \n-    private Map _results = new HashMap(); // object->queryresultmapping\n+    // object->queryresultmapping\n+    private Map<Object, QueryResultMapping> _results = new HashMap<Object, QueryResultMapping>(); \n     private SchemaGroup _schema = null;\n     private StrategyInstaller _installer = null;\n \n@@ -150,56 +151,83 @@ public void setMappingDefaults(MappingDefaults defaults) {\n      * Representation of the database schema.\n      */\n     public SchemaGroup getSchemaGroup() {\n-        if (_schema == null)\n-            _schema = ((JDBCConfiguration) getConfiguration()).\n-                getSchemaFactoryInstance().readSchema();\n-        return _schema;\n+        if (_locking) {\n+            synchronized (this) {\n+                if (_schema == null)\n+                    _schema = ((JDBCConfiguration) getConfiguration()).getSchemaFactoryInstance().readSchema();\n+                return _schema;\n+            }\n+        } else {\n+            if (_schema == null)\n+                _schema = ((JDBCConfiguration) getConfiguration()).getSchemaFactoryInstance().readSchema();\n+            return _schema;\n+        }\n     }\n \n     /**\n      * Representation of the database schema.\n      */\n     public void setSchemaGroup(SchemaGroup schema) {\n-        _schema = schema;\n+        if (_locking) {\n+            synchronized (this) {\n+                _schema = schema;\n+            }\n+        } else {\n+            _schema = schema;\n+        }\n     }\n \n     /**\n      * Installs mapping strategies on components.\n      */\n     public StrategyInstaller getStrategyInstaller() {\n-        if (_installer == null)\n-            _installer = new RuntimeStrategyInstaller(this);\n-        return _installer;\n+        if (_locking) {\n+            synchronized (this) {\n+                if (_installer == null)\n+                    _installer = new RuntimeStrategyInstaller(this);\n+                return _installer;\n+            }\n+        } else {\n+            if (_installer == null)\n+                _installer = new RuntimeStrategyInstaller(this);\n+            return _installer;\n+        }\n     }\n \n     /**\n      * Installs mapping strategies on components.\n      */\n     public void setStrategyInstaller(StrategyInstaller installer) {\n-        _installer = installer;\n+        if (_locking) {\n+            synchronized (this) {\n+                _installer = installer;\n+            }\n+        } else {\n+            _installer = installer;\n+        }\n     }\n \n     /**\n      * Return the query result mapping for the given name.\n      */\n-    public QueryResultMapping getQueryResultMapping(Class cls,\n-        String name, ClassLoader envLoader, boolean mustExist) {\n-        lock();\n-        try {\n-            QueryResultMapping res = getQueryResultMappingInternal(cls, name, envLoader);\n-            if (res == null && mustExist)\n-                throw new MetaDataException(_loc.get(\"no-query-res\", cls, name));\n-            return res;\n-        } finally {\n-            unlock();\n+    public QueryResultMapping getQueryResultMapping(Class<?> cls, String name, ClassLoader loader, boolean mustExist) {\n+        QueryResultMapping res = null;\n+        if (_locking) {\n+            synchronized (this) {\n+                res = getQueryResultMappingInternal(cls, name, loader);\n+            }\n+        } else {\n+            res = getQueryResultMappingInternal(cls, name, loader);\n         }\n+        if (res == null && mustExist)\n+            throw new MetaDataException(_loc.get(\"no-query-res\", cls, name));\n+        return res;\n     }\n \n     /**\n      * Returned the query result mapping with the given name.\n      */\n-    private QueryResultMapping getQueryResultMappingInternal(Class cls,\n-        String name, ClassLoader envLoader) {\n+    private QueryResultMapping getQueryResultMappingInternal(Class<?> cls, String name, ClassLoader envLoader) {\n         if (name == null)\n             return null;\n \n@@ -229,71 +257,79 @@ private QueryResultMapping getQueryResultMappingInternal(Class cls,\n     /**\n      * Return all cached query result mappings.\n      */\n-    public synchronized QueryResultMapping[] getQueryResultMappings() {\n-        lock();\n-        try {\n+    public QueryResultMapping[] getQueryResultMappings() {\n+        if (_locking) {\n+            synchronized (this) {\n+                Collection values = _results.values();\n+                return (QueryResultMapping[]) values.toArray(new QueryResultMapping[values.size()]);\n+            }\n+        } else {\n             Collection values = _results.values();\n             return (QueryResultMapping[]) values.toArray(new QueryResultMapping[values.size()]);\n-        } finally {\n-            unlock();\n         }\n     }\n \n     /**\n      * Return the cached query result mapping with the given name, or null if\n      * none.\n      */\n-    public QueryResultMapping getCachedQueryResultMapping\n-        (Class cls, String name) {\n-        lock();\n-        try {\n+    public QueryResultMapping getCachedQueryResultMapping(Class cls, String name) {\n+        if (_locking) {\n+            synchronized (this) {\n+                return (QueryResultMapping) _results.get(getQueryResultKey(cls, name));\n+            }\n+        } else {\n             return (QueryResultMapping) _results.get(getQueryResultKey(cls, name));\n-        } finally {\n-            unlock();\n         }\n     }\n \n     /**\n      * Add a query result mapping.\n      */\n-    public QueryResultMapping addQueryResultMapping(Class cls,\n-        String name) {\n-        lock();\n-        try {\n-            QueryResultMapping res = new QueryResultMapping(name, this);\n-            res.setDefiningType(cls);\n-            _results.put(getQueryResultKey(res), res);\n-            return res;\n-        } finally {\n-            unlock();\n+    public QueryResultMapping addQueryResultMapping(Class cls, String name) {\n+        if (_locking) {\n+            synchronized (this) {\n+                return addQueryResultMappingInternal(cls, name);\n+            }\n+        } else {\n+            return addQueryResultMappingInternal(cls, name);\n         }\n     }\n \n+    private QueryResultMapping addQueryResultMappingInternal(Class cls, String name) {\n+        QueryResultMapping res = new QueryResultMapping(name, this);\n+        res.setDefiningType(cls);\n+        _results.put(getQueryResultKey(res), res);\n+        return res;\n+    }\n+\n     /**\n      * Remove a query result mapping.\n      */\n-    public boolean removeQueryResultMapping\n-        (QueryResultMapping res) {\n-        lock();\n-        try {\n+    public boolean removeQueryResultMapping(QueryResultMapping res) {\n+        if (_locking) {\n+            synchronized (this) {\n+                return _results.remove(getQueryResultKey(res)) != null;\n+            }\n+        } else {\n             return _results.remove(getQueryResultKey(res)) != null;\n-        } finally {\n-            unlock();\n         }\n     }\n \n     /**\n      * Remove a query result mapping.\n      */\n-    public boolean removeQueryResultMapping(Class cls,\n-        String name) {\n-        lock();\n-        try {\n+    public boolean removeQueryResultMapping(Class cls, String name) {\n+        if (_locking) {\n+            synchronized (this) {\n+                if (name == null)\n+                    return false;\n+                return _results.remove(getQueryResultKey(cls, name)) != null;\n+            }\n+        } else {\n             if (name == null)\n                 return false;\n             return _results.remove(getQueryResultKey(cls, name)) != null;\n-        } finally {\n-            unlock();\n         }\n     }\n \n@@ -310,11 +346,11 @@ private static Object getQueryResultKey(QueryResultMapping res) {\n      * Return a unique key for the given class / name. The class argument\n      * can be null.\n      */\n-    private static Object getQueryResultKey(Class cls, String name) {\n+    private static Object getQueryResultKey(Class<?> cls, String name) {\n         return getQueryKey(cls, name);\n     }\n \n-    public ClassMapping getMapping(Class cls, ClassLoader envLoader,\n+    public ClassMapping getMapping(Class<?> cls, ClassLoader envLoader,\n         boolean mustExist) {\n         return (ClassMapping) super.getMetaData(cls, envLoader, mustExist);\n     }\n@@ -328,20 +364,23 @@ public ClassMapping getMapping(Object oid, ClassLoader envLoader,\n         return (ClassMapping) super.getMetaData(oid, envLoader, mustExist);\n     }\n \n-    public ClassMapping[] getImplementorMappings(Class cls,\n+    public ClassMapping[] getImplementorMappings(Class<?> cls,\n         ClassLoader envLoader, boolean mustExist) {\n         return (ClassMapping[]) super.getImplementorMetaDatas(cls, envLoader,\n             mustExist);\n     }\n \n-    public synchronized void clear() {\n-        lock();\n-        try {\n+    public void clear() {\n+        if (_locking) {\n+            synchronized (this) {\n+                super.clear();\n+                _schema = null;\n+                _results.clear();\n+            }\n+        } else {\n             super.clear();\n             _schema = null;\n             _results.clear();\n-        } finally {\n-            unlock();\n         }\n     }\n \n@@ -378,15 +417,15 @@ protected void prepareMapping(ClassMetaData meta) {\n         mapping.resolveNonRelationMappings();\n     }\n \n-    protected ClassMetaData newClassMetaData(Class type) {\n+    protected ClassMetaData newClassMetaData(Class<?> type) {\n         return new ClassMapping(type, this);\n     }\n \n     protected ClassMetaData[] newClassMetaDataArray(int length) {\n         return new ClassMapping[length];\n     }\n \n-    protected FieldMetaData newFieldMetaData(String name, Class type,\n+    protected FieldMetaData newFieldMetaData(String name, Class<?> type,\n         ClassMetaData owner) {\n         return new FieldMapping(name, type, (ClassMapping) owner);\n     }\n@@ -493,7 +532,7 @@ protected ClassStrategy instantiateClassStrategy(String name,\n \n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n-        Class strat = null;\n+        Class<?> strat = null;\n \n         // base and vertical strategies use same alias; differentiate on join\n         if (FullClassStrategy.ALIAS.equals(name))\n@@ -538,7 +577,7 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n         try {\n-            Class c = JavaTypes.classForName(name, field,\n+            Class<?> c = JavaTypes.classForName(name, field,\n                 AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             if (FieldStrategy.class.isAssignableFrom(c)) {\n@@ -599,7 +638,7 @@ protected DiscriminatorStrategy namedStrategy(Discriminator discrim) {\n \n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n-        Class strat = null;\n+        Class<?> strat = null;\n \n         if (ClassNameDiscriminatorStrategy.ALIAS.equals(name))\n             strat = ClassNameDiscriminatorStrategy.class;\n@@ -661,7 +700,7 @@ protected VersionStrategy instantiateVersionStrategy(String name,\n \n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n-        Class strat = null;\n+        Class<?> strat = null;\n \n         if (NumberVersionStrategy.ALIAS.equals(name))\n             strat = NumberVersionStrategy.class;\n@@ -692,7 +731,7 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n     /**\n      * Instantiate the given version strategy.\n      */\n-    protected VersionStrategy instantiateVersionStrategy(Class strat,\n+    protected VersionStrategy instantiateVersionStrategy(Class<?> strat,\n         Version version, String props) {\n         try {\n             VersionStrategy strategy = (VersionStrategy)\n@@ -787,7 +826,7 @@ protected FieldStrategy defaultStrategy(FieldMapping field,\n     protected FieldStrategy defaultStrategy(FieldMapping field,\n         boolean installHandlers, boolean adapting) {\n         // not persistent?\n-        if (field.getManagement() != field.MANAGE_PERSISTENT\n+        if (field.getManagement() != FieldMetaData.MANAGE_PERSISTENT\n             || field.isVersion())\n             return NoneFieldStrategy.getInstance();\n         if (field.getDefiningMapping().getStrategy() ==\n@@ -1001,7 +1040,7 @@ private boolean useInverseKeyMapping(FieldMapping field) {\n         // an association table\n         FieldMappingInfo info = field.getMappingInfo();\n         ValueMapping elem = field.getElementMapping();\n-        boolean useInverseKeyMapping = info.getTableName() == null && info.getColumns().isEmpty()\n+        boolean useInverseKeyMapping = DBIdentifier.isNull(info.getTableIdentifier()) && info.getColumns().isEmpty()\n             && !elem.getValueInfo().getColumns().isEmpty();\n         \n         // JPA 2.0: non-default mapping: uni-/1-M/JoinColumn ==> foreign key strategy\n@@ -1120,7 +1159,7 @@ public boolean hasJoinColumn(FieldMapping field) {\n     }\n     \n     public boolean hasJoinTable(FieldMapping field) {\n-        boolean hasJoinTable = field.getMappingInfo().getTableName() != null ? true : false;\n+        boolean hasJoinTable = !DBIdentifier.isNull(field.getMappingInfo().getTableIdentifier()) ? true : false;\n         return hasJoinTable;\n     }\n \n@@ -1142,7 +1181,7 @@ public boolean isBidirectional(FieldMapping field) {\n     /**\n      * Check the given value against mapped strategies.\n      */\n-    private Object mappedStrategy(ValueMapping val, Class type,\n+    private Object mappedStrategy(ValueMapping val, Class<?> type,\n         boolean adapting) {\n         if (type == null || type == Object.class)\n             return null;\n@@ -1163,7 +1202,7 @@ private Object mappedStrategy(ValueMapping val, Class type,\n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n         try {\n-            Class c = JavaTypes.classForName(name, val,\n+            Class<?> c = JavaTypes.classForName(name, val,\n                 AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             Object o = AccessController.doPrivileged(\n@@ -1190,7 +1229,7 @@ protected ValueHandler namedHandler(ValueMapping val) {\n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n         try {\n-            Class c = JavaTypes.classForName(name, val,\n+            Class<?> c = JavaTypes.classForName(name, val,\n                 AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(ValueHandler.class)));\n             if (ValueHandler.class.isAssignableFrom(c)) {\n@@ -1208,7 +1247,7 @@ protected ValueHandler namedHandler(ValueMapping val) {\n                 val, name), e);\n         }\n     }\n-\n+    \n     /**\n      * Determine the default handler to use for the given value. Does\n      * not take into account the named handler, if any.\n@@ -1307,7 +1346,7 @@ private boolean useUntypedPCHandler(ValueMapping val) {\n      * Checks for hints as to whether the given column is a CLOB.\n      */\n     private boolean isClob(ValueMapping val, boolean warn) {\n-        List cols = val.getValueInfo().getColumns();\n+        List<Column> cols = val.getValueInfo().getColumns();\n         if (cols.size() != 1)\n             return false;\n \n@@ -1474,12 +1513,12 @@ protected ClassMapping findBaseClassMapping(ClassMapping mapping) {\n                 // persistent subclasses may not have been resolved yet.  \n                 // run through the persistent types to see if any of them \n                 // or their superclass is a subclass of this class.\n-                Collection classes = loadPersistentTypes(false, \n+                Collection<Class<?>> classes = loadPersistentTypes(false, \n                         mapping.getEnvClassLoader());\n-                Class cls;\n-                for (Iterator itr = classes.iterator(); itr.hasNext();) {\n-                    cls = (Class) itr.next();\n-                    Class supcl = cls.getSuperclass();\n+                Class<?> cls;\n+                for (Iterator<Class<?>> itr = classes.iterator(); itr.hasNext();) {\n+                    cls = itr.next();\n+                    Class<?> supcl = cls.getSuperclass();\n                     while (supcl != null && \n                            !supcl.getClass().equals(java.lang.Object.class)) {\n                         if (!supcl.isInterface() &&"},{"sha":"2b58f7a829d31a5e7570b5a35a6879d061cf4fc4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import org.apache.openjpa.meta.MetaDataModes;\n+\n /**\n  * Installer used during mapping that attempts to use the given mapping\n  * information (if any), and fails if it does not work.\n@@ -26,6 +28,7 @@\n  * @nojavadoc\n  * @since 0.4.0\n  */\n+@SuppressWarnings(\"serial\")\n public class MappingStrategyInstaller\n     extends StrategyInstaller {\n \n@@ -45,7 +48,7 @@ public void installStrategy(ClassMapping cls) {\n         if (strat == null)\n             strat = repos.defaultStrategy(cls, true);\n         cls.setStrategy(strat, Boolean.TRUE);\n-        cls.setSourceMode(cls.MODE_MAPPING, true);\n+        cls.setSourceMode(MetaDataModes.MODE_MAPPING, true);\n     }\n \n     public void installStrategy(FieldMapping field) {"},{"sha":"9c741d7163bbe61f133a2f512c631a4c189a7737","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":33,"deletions":30,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -52,6 +52,8 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n+import org.apache.openjpa.lib.meta.MetaDataSerializer;\n+import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -62,6 +64,7 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataFactory;\n import org.apache.openjpa.meta.MetaDataModes;\n+import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.QueryMetaData;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueStrategies;\n@@ -123,8 +126,8 @@\n     private Writer _schemaWriter = null;\n \n     // buffer metadatas to be dropped\n-    private Set _dropCls = null;\n-    private Set _dropMap = null;\n+    private Set<Class<?>> _dropCls = null;\n+    private Set<ClassMapping> _dropMap = null;\n     private boolean _flush = false;\n     private boolean _flushSchema = false;\n \n@@ -377,7 +380,7 @@ public MappingRepository getRepository() {\n         if (_repos == null) {\n             _repos = _conf.newMappingRepositoryInstance();\n             _repos.setSchemaGroup(getSchemaGroup());\n-            _repos.setValidate(_repos.VALIDATE_UNENHANCED, false);\n+            _repos.setValidate(MetaDataRepository.VALIDATE_UNENHANCED, false);\n         }\n         return _repos;\n     }\n@@ -467,7 +470,7 @@ else if (_dropMap != null)\n \n         try {\n             if (_dropCls != null && !_dropCls.isEmpty()) {\n-                Class[] cls = (Class[]) _dropCls.toArray\n+                Class<?>[] cls = (Class[]) _dropCls.toArray\n                     (new Class[_dropCls.size()]);\n                 if (!io.drop(cls, _mode, null))\n                     _log.warn(_loc.get(\"bad-drop\", _dropCls));\n@@ -508,7 +511,7 @@ else if (_dropMap != null)\n                     // serialize the planned schema to the stream\n                     SchemaSerializer ser = new XMLSchemaSerializer(_conf);\n                     ser.addAll(getSchemaGroup());\n-                    ser.serialize(_schemaWriter, ser.PRETTY);\n+                    ser.serialize(_schemaWriter, MetaDataSerializer.PRETTY);\n                     _schemaWriter.flush();\n                 }\n             }\n@@ -517,21 +520,21 @@ else if (_dropMap != null)\n \n             QueryMetaData[] queries = repos.getQueryMetaDatas();\n             SequenceMetaData[] seqs = repos.getSequenceMetaDatas();\n-            Map output = null;\n+            Map<File, String> output = null;\n \n             // if we're outputting to stream, set all metas to same file so\n             // they get placed in single string\n             if (_mappingWriter != null) {\n-                output = new HashMap();\n+                output = new HashMap<File, String>();\n                 File tmp = new File(\"openjpatmp\");\n                 for (int i = 0; i < mappings.length; i++)\n-                    mappings[i].setSource(tmp, mappings[i].SRC_OTHER);\n+                    mappings[i].setSource(tmp, SourceTracker.SRC_OTHER);\n                 for (int i = 0; i < queries.length; i++)\n                     queries[i].setSource(tmp, queries[i].getSourceScope(),\n-                        queries[i].SRC_OTHER);\n+                        SourceTracker.SRC_OTHER);\n                 for (int i = 0; i < seqs.length; i++)\n                     seqs[i].setSource(tmp, seqs[i].getSourceScope(),\n-                        seqs[i].SRC_OTHER);\n+                        SourceTracker.SRC_OTHER);\n             }\n \n             // store\n@@ -541,9 +544,9 @@ else if (_dropMap != null)\n             // write to stream\n             if (_mappingWriter != null) {\n                 PrintWriter out = new PrintWriter(_mappingWriter);\n-                for (Iterator itr = output.values().iterator();\n+                for (Iterator<String> itr = output.values().iterator();\n                     itr.hasNext();)\n-                    out.println((String) itr.next());\n+                    out.println(itr.next());\n                 out.flush();\n             }\n         }\n@@ -634,7 +637,7 @@ else if (mapping.getIdentityStrategy() == ValueStrategies.NATIVE\n     /**\n      * Run the configured action on the given instance.\n      */\n-    public void run(Class cls) {\n+    public void run(Class<?> cls) {\n         if (ACTION_ADD.equals(_action)) {\n             if (_meta)\n                 addMeta(cls);\n@@ -653,7 +656,7 @@ else if (ACTION_VALIDATE.equals(_action))\n     /**\n      * Add the mapping for the given instance.\n      */\n-    private void add(Class cls) {\n+    private void add(Class<?> cls) {\n         if (cls == null)\n             return;\n \n@@ -669,7 +672,7 @@ private void add(Class cls) {\n      * Return the mapping for the given type, or null if the type is\n      * persistence-aware.\n      */\n-    private static ClassMapping getMapping(MappingRepository repos, Class cls,\n+    private static ClassMapping getMapping(MappingRepository repos, Class<?> cls,\n         boolean validate) {\n         // this will parse all possible metadata rsrcs looking for cls, so\n         // will detect if p-aware\n@@ -679,13 +682,13 @@ private static ClassMapping getMapping(MappingRepository repos, Class cls,\n         if (!validate || cls.isInterface() \n             || repos.getPersistenceAware(cls) != null)\n             return null;\n-        throw new MetaDataException(_loc.get(\"no-meta\", cls));\n+        throw new MetaDataException(_loc.get(\"no-meta\", cls, cls.getClassLoader()));\n     }\n \n     /**\n      * Create a metadata for the given instance.\n      */\n-    private void addMeta(Class cls) {\n+    private void addMeta(Class<?> cls) {\n         if (cls == null)\n             return;\n \n@@ -710,7 +713,7 @@ private void addMeta(Class cls) {\n     /**\n      * Refresh or add the mapping for the given instance.\n      */\n-    private void refresh(Class cls) {\n+    private void refresh(Class<?> cls) {\n         if (cls == null)\n             return;\n \n@@ -725,7 +728,7 @@ private void refresh(Class cls) {\n     /**\n      * Validate the mappings for the given class and its fields.\n      */\n-    private void validate(Class cls) {\n+    private void validate(Class<?> cls) {\n         if (cls == null)\n             return;\n \n@@ -739,7 +742,7 @@ private void validate(Class cls) {\n     /**\n      * Create the schema using the mapping for the given instance.\n      */\n-    private void buildSchema(Class cls) {\n+    private void buildSchema(Class<?> cls) {\n         if (cls == null)\n             return;\n \n@@ -770,12 +773,12 @@ private void buildSchema(Class cls) {\n     /**\n      * Drop mapping for given class.\n      */\n-    private void drop(Class cls) {\n+    private void drop(Class<?> cls) {\n         if (cls == null)\n             return;\n \n         if (_dropCls == null)\n-            _dropCls = new HashSet();\n+            _dropCls = new HashSet<Class<?>>();\n         _dropCls.add(cls);\n         if (!contains(_schemaActions,SchemaTool.ACTION_DROP))\n             return;\n@@ -791,7 +794,7 @@ private void drop(Class cls) {\n         if (mapping != null) {\n             _flushSchema = true;\n             if (_dropMap == null)\n-                _dropMap = new HashSet();\n+                _dropMap = new HashSet<ClassMapping>();\n             _dropMap.add(mapping);\n         } else\n             _log.warn(_loc.get(\"no-drop-meta\", cls));\n@@ -1003,26 +1006,26 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n \n         // collect the classes to act on\n         Log log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\n-        Collection classes = null;\n+        Collection<Class<?>> classes = null;\n         if (args.length == 0) {\n             if (ACTION_IMPORT.equals(flags.action))\n                 return false;\n             log.info(_loc.get(\"running-all-classes\"));\n             classes = conf.getMappingRepositoryInstance().\n                 loadPersistentTypes(true, loader);\n         } else {\n-            classes = new HashSet();\n+            classes = new HashSet<Class<?>>();\n             ClassArgParser classParser = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n             classParser.setClassLoader(loader);\n-            Class[] parsed;\n+            Class<?>[] parsed;\n             for (int i = 0; args != null && i < args.length; i++) {\n                 parsed = classParser.parseTypes(args[i]);\n                 classes.addAll(Arrays.asList(parsed));\n             }\n         }\n \n-        Class[] act = (Class[]) classes.toArray(new Class[classes.size()]);\n+        Class<?>[] act = (Class[]) classes.toArray(new Class[classes.size()]);\n         if (ACTION_EXPORT.equals(flags.action)) {\n             // run exports until the first export succeeds\n             ImportExport[] instances = newImportExports();\n@@ -1081,7 +1084,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n      */\n     private static ImportExport[] newImportExports() {\n         try {\n-            Class[] types = Services.getImplementorClasses(ImportExport.class);\n+            Class<?>[] types = Services.getImplementorClasses(ImportExport.class);\n             ImportExport[] instances = new ImportExport[types.length];\n             for (int i = 0; i < types.length; i++)\n                 instances[i] = (ImportExport) AccessController.doPrivileged(\n@@ -1129,14 +1132,14 @@ private static boolean contains(String list, String key) {\n         /**\n          * Import mappings for the given classes based on the given arguments.\n          */\n-        public boolean importMappings(JDBCConfiguration conf, Class[] act,\n+        public boolean importMappings(JDBCConfiguration conf, Class<?>[] act,\n             String[] args, boolean meta, Log log, ClassLoader loader)\n             throws IOException;\n \n         /**\n          * Export mappings for the given classes based on the given arguments.\n          */\n-        public boolean exportMappings(JDBCConfiguration conf, Class[] act,\n+        public boolean exportMappings(JDBCConfiguration conf, Class<?>[] act,\n             boolean meta, Log log, Writer writer)\n             throws IOException;\n     }"},{"sha":"4500a0522c56146f9992fd9be4c1183693e16562","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java","status":"modified","additions":55,"deletions":1,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n@@ -63,7 +64,7 @@ public Object getStrategy(Discriminator disc, boolean adapt) {\n         return null;\n     }\n \n-    public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n+    public Object getStrategy(ValueMapping vm, Class<?> type, boolean adapt) {\n         return null;\n     }\n \n@@ -98,11 +99,17 @@ public void populateJoinColumn(FieldMapping fm, Table local, Table foreign,\n         Column col, Object target, int pos, int cols) {\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public void populateForeignKeyColumn(ValueMapping vm, String name,\n         Table local, Table foreign, Column col, Object target, boolean inverse,\n         int pos, int cols) {\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public void populateColumns(ValueMapping vm, String name, Table table,\n         Column[] cols) {\n     }\n@@ -112,6 +119,9 @@ public boolean populateOrderColumns(FieldMapping fm, Table table,\n         return false;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public boolean populateNullIndicatorColumns(ValueMapping vm, String name,\n         Table table, Column[] cols) {\n         return false;\n@@ -127,6 +137,9 @@ public ForeignKey getJoinForeignKey(FieldMapping fm, Table local,\n         return null;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public ForeignKey getForeignKey(ValueMapping vm, String name, Table local,\n         Table foreign, boolean inverse) {\n         return null;\n@@ -164,4 +177,45 @@ public String getPrimaryKeyName(ClassMapping cm, Table table) {\n \n     public void installPrimaryKey(FieldMapping fm, Table table) {\n     }\n+\n+    public ForeignKey getForeignKey(ValueMapping vm, DBIdentifier name, Table local,\n+        Table foreign, boolean inverse) {\n+        return null;\n+    }\n+\n+    public Index getIndex(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols) {\n+        return null;\n+    }\n+\n+    public Unique getUnique(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols) {\n+        return null;\n+    }\n+\n+    public void populateColumns(ValueMapping vm, DBIdentifier name, Table table,\n+        Column[] cols) {\n+    }\n+\n+    public void populateForeignKeyColumn(ValueMapping vm, DBIdentifier name,\n+        Table local, Table foreign, Column col, Object target, boolean inverse,\n+        int pos, int cols) {\n+    }\n+\n+    public boolean populateNullIndicatorColumns(ValueMapping vm, DBIdentifier name,\n+        Table table, Column[] cols) {\n+        return false;\n+    }\n+\n+    public DBIdentifier getTableIdentifier(ClassMapping cls, Schema defaultSchema) {\n+        return DBIdentifier.newTable(getTableName(cls, defaultSchema));\n+    }\n+\n+    public DBIdentifier getTableIdentifier(FieldMapping fm, Schema defaultSchema) {\n+        return DBIdentifier.newTable(getTableName(fm, defaultSchema));\n+    }\n+\n+    public DBIdentifier getPrimaryKeyIdentifier(ClassMapping cm, Table table) {\n+        return DBIdentifier.NULL;\n+    }\n }"},{"sha":"9b9fd93f6f9bdc99eb59fc131eb8a533da61f2e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -100,7 +100,7 @@\n import serp.util.Strings;\n \n /**\n- * Reverse-maps a schema into class mappings and the assiciated java\n+ * Reverse-maps a schema into class mappings and the associated java\n  * code. Generates a Java code files for persistent classes and associated\n  * identity classes and metadata.\n  *\n@@ -1474,7 +1474,7 @@ public FieldMapping newFieldMapping(String name, Class type, Column col,\n      * name, using the default package.\n      */\n     private String getClassName(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         if (getPackageName() != null)\n             buf.append(getPackageName()).append(\".\");\n \n@@ -1514,7 +1514,7 @@ public String getFieldName(String name, ClassMapping dec) {\n         else\n             name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         String[] subs = Strings.split(name, \"_\", 0);\n         for (int i = 0; i < subs.length; i++) {\n             if (i > 0)\n@@ -1571,7 +1571,7 @@ static String replaceInvalidCharacters(String str) {\n         if (StringUtils.isEmpty(str))\n             return str;\n \n-        StringBuffer buf = new StringBuffer(str);\n+        StringBuilder buf = new StringBuilder(str);\n         char c;\n         for (int i = 0; i < buf.length(); i++) {\n             c = buf.charAt(i);"},{"sha":"ae59eb23071fe4429b6f90e9ac717c596a341eb0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","status":"modified","additions":101,"deletions":26,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -19,25 +19,24 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.io.File;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCSeqValue;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.ValueTableJDBCSeq;\n-import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.meta.SequenceMetaData;\n \n /**\n  * Specialization of sequence metadata for ORM.\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class SequenceMapping\n     extends SequenceMetaData {\n \n@@ -65,17 +64,32 @@\n     private static final String PROP_UNIQUE_CONSTRAINT = \"UniqueConstraintName\";\n \n     private File _mapFile = null;\n-    private String _table = null;\n-    private String _sequenceColumn = null;\n-    private String _primaryKeyColumn = null;\n+    private DBIdentifier _table = DBIdentifier.NULL;\n+    private DBIdentifier _sequenceColumn = DBIdentifier.NULL;\n+    private DBIdentifier _primaryKeyColumn = DBIdentifier.NULL;\n     private String _primaryKeyValue = null;\n-    private String[] _uniqueColumns   = null;\n-    private String _uniqueConstraintName = null;\n+    private DBIdentifier[] _uniqueColumns   = null;\n+    private DBIdentifier _uniqueConstraintName = DBIdentifier.NULL;\n     \n+    /**\n+     * @deprecated\n+     * @param name\n+     * @param repos\n+     */\n     public SequenceMapping(String name, MappingRepository repos) {\n         super(name, repos);\n     }\n \n+    /**\n+     * Sequence names are a kernel object so DBIdentifiers must be converted to\n+     * strings \n+     * @param name\n+     * @param repos\n+     */\n+    public SequenceMapping(DBIdentifier name, MappingRepository repos) {\n+        super(DBIdentifier.isNull(name) ? null : name.getName(), repos);\n+    }\n+\n     /**\n      * Allow sequence to have a mapping file separate from its metadata\n      * source file.\n@@ -94,43 +108,73 @@ public void setMappingFile(File file) {\n \n     /**\n      * Name of sequence table, if any.\n+     * @deprecated\n      */\n     public String getTable() {\n-        return _table;\n+        return getTableIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTableIdentifier() {\n+        return _table == null ? DBIdentifier.NULL : _table ;\n     }\n \n     /**\n      * Name of sequence table, if any.\n+     * @deprecated\n      */\n     public void setTable(String table) {\n+        setTableIdentifier(DBIdentifier.newTable(table));\n+    }\n+\n+    public void setTableIdentifier(DBIdentifier table) {\n         _table = table;\n     }\n \n     /**\n      * Name of sequence column, if any.\n+     * @deprecated\n      */\n     public String getSequenceColumn() {\n-        return _sequenceColumn;\n+        return getSequenceColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getSequenceColumnIdentifier() {\n+        return _sequenceColumn == null ? DBIdentifier.NULL : _sequenceColumn;\n     }\n \n     /**\n      * Name of sequence column, if any.\n+     * @deprecated\n      */\n     public void setSequenceColumn(String sequenceColumn) {\n+        setSequenceColumnIdentifier(DBIdentifier.newColumn(sequenceColumn));\n+    }\n+\n+    public void setSequenceColumnIdentifier(DBIdentifier sequenceColumn) {\n         _sequenceColumn = sequenceColumn;\n     }\n \n     /**\n      * Name of primary key column, if any.\n+     * @deprecated\n      */\n     public String getPrimaryKeyColumn() {\n-        return _primaryKeyColumn;\n+        return getPrimaryKeyColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getPrimaryKeyColumnIdentifier() {\n+        return _primaryKeyColumn == null ? DBIdentifier.NULL : _primaryKeyColumn;\n     }\n \n     /**\n      * Name of primary key column, if any.\n+     * @deprecated\n      */\n     public void setPrimaryKeyColumn(String primaryKeyColumn) {\n+        setPrimaryKeyColumnIdentifier(DBIdentifier.newColumn(primaryKeyColumn));\n+    }\n+\n+    public void setPrimaryKeyColumnIdentifier(DBIdentifier primaryKeyColumn) {\n         _primaryKeyColumn = primaryKeyColumn;\n     }\n \n@@ -148,20 +192,36 @@ public void setPrimaryKeyValue(String primaryKeyValue) {\n         _primaryKeyValue = primaryKeyValue;\n     }\n \n+    /**\n+     * @deprecated\n+     * @param cols\n+     */\n     public void setUniqueColumns(String[] cols) {\n-    \t_uniqueColumns = cols;\n+        setUniqueColumnsIdentifier(DBIdentifier.toArray(cols, DBIdentifierType.COLUMN));\n     }\n-    \n+\n+    public void setUniqueColumnsIdentifier(DBIdentifier[] cols) {\n+        _uniqueColumns = cols;\n+    }\n+\n+    /**\n+     * @deprecated\n+     */\n     public String[] getUniqueColumns() {\n+        return DBIdentifier.toStringArray(getUniqueColumnsIdentifier());\n+    }\n+\n+    public DBIdentifier[] getUniqueColumnsIdentifier() {\n     \treturn _uniqueColumns;\n     }\n+\n     \n     protected PluginValue newPluginValue(String property) {\n         return new JDBCSeqValue(property);\n     }\n \n     @Override\n-    protected void addStandardProperties(StringBuffer props) {\n+    protected void addStandardProperties(StringBuilder props) {\n         super.addStandardProperties(props);\n         // Quotes are conditionally added to the following because the props\n         // are eventually passed to the Configurations.parseProperties()\n@@ -170,17 +230,17 @@ protected void addStandardProperties(StringBuffer props) {\n         // set preserves the intended ones. While this is an ugly solution,\n         // it's less ugly than other ones.\n         \n-        appendProperty(props, PROP_TABLE, addQuotes(_table));\n-        appendProperty(props, PROP_SEQUENCE_COL, addQuotes(_sequenceColumn));\n-        appendProperty(props, PROP_PK_COL, addQuotes(_primaryKeyColumn));\n+        appendProperty(props, PROP_TABLE, addQuotes(_table.getName()));\n+        appendProperty(props, PROP_SEQUENCE_COL, addQuotes(_sequenceColumn.getName()));\n+        appendProperty(props, PROP_PK_COL, addQuotes(_primaryKeyColumn.getName()));\n         appendProperty(props, PROP_PK_VALUE, addQuotes(_primaryKeyValue));\n         // Array of unique column names are passed to configuration\n         // as a single string \"x|y|z\". The configurable (TableJDBCSeq) must\n         // parse it back.\n-        if (_uniqueConstraintName != null && \n-                _uniqueConstraintName.length() > 0) {\n+        if (!DBIdentifier.isNull(_uniqueConstraintName) && \n+                _uniqueConstraintName.getName().length() > 0) {\n             appendProperty(props, PROP_UNIQUE_CONSTRAINT, \n-                addQuotes(_uniqueConstraintName));\n+                addQuotes(_uniqueConstraintName.getName()));\n         }\n             \n         if (_uniqueColumns != null && _uniqueColumns.length > 0)\n@@ -189,19 +249,34 @@ protected void addStandardProperties(StringBuffer props) {\n     }\n     \n     private String addQuotes(String name) {\n-        if (name != null && name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\")) {\n-            return \"\\\"\" + name + \"\\\"\";\n+        if (name != null && name.contains(IdentifierUtil.DOUBLE_QUOTE)) {\n+            return IdentifierUtil.DOUBLE_QUOTE + name + IdentifierUtil.DOUBLE_QUOTE;\n         }\n         return name;\n     }\n \n+    /**\n+     * @deprecated\n+     * @param name\n+     */\n     public void setUniqueConstraintName(String name) {\n+        _uniqueConstraintName = DBIdentifier.newConstraint(name);\n+    }\n+\n+    public void setUniqueConstraintIdentifier(DBIdentifier name) {\n         _uniqueConstraintName = name;\n-        \n     }\n \n+    /**\n+     * @deprecated\n+     * @return\n+     */\n     public String getUniqueConstraintName() {\n-        return _uniqueConstraintName;\n+        return getUniqueConstraintIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getUniqueConstraintIdentifier() {\n+        return _uniqueConstraintName == null ? DBIdentifier.NULL : _uniqueConstraintName;\n         \n     }\n }"},{"sha":"25eb973787e60f14121555b7e5a36c9dd0c0387e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -249,9 +250,17 @@ public void whereForeignKey(Row row, OpenJPAStateManager rel)\n      * Map indexes and constraints for this value, using the current\n      * {@link ValueMappingInfo}. The foreign key or columns of this value\n      * must be set before calling this method.\n+     * @deprecated\n      */\n     public void mapConstraints(String name, boolean adapt);\n \n+    /**\n+     * Map indexes and constraints for this value, using the current\n+     * {@link ValueMappingInfo}. The foreign key or columns of this value\n+     * must be set before calling this method.\n+     */\n+    public void mapConstraints(DBIdentifier name, boolean adapt);\n+\n     /**\n      * Clear mapping information, including strategy.\n      */"},{"sha":"13fe736184b2f9a7eb76bdf9e11ee3c931da88a2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","status":"modified","additions":24,"deletions":9,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,6 +22,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -34,6 +35,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.meta.ValueMetaDataImpl;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -44,6 +46,7 @@\n  * @author Abe White\n  * @since 0.4.0\n  */\n+@SuppressWarnings(\"serial\")\n public class ValueMappingImpl\n     extends ValueMetaDataImpl\n     implements ValueMapping {\n@@ -58,7 +61,7 @@\n     private Column[] _cols = Schemas.EMPTY_COLUMNS;\n     private ColumnIO _io = null;\n     private ForeignKey _fk = null;\n-    private Map _targetFKs = null;\n+    private Map<ClassMapping,ForeignKey> _targetFKs = null;\n     private Index _idx = null;\n     private Unique _unq = null;\n     private int _join = JOIN_FORWARD;\n@@ -187,7 +190,7 @@ public ForeignKey getForeignKey(ClassMapping target) {\n                 if (cachedFK != null)\n                     return (ForeignKey) cachedFK;\n             } else\n-                _targetFKs = new HashMap();\n+                _targetFKs = new HashMap<ClassMapping, ForeignKey>();\n \n             ForeignKey newfk = (_join == JOIN_FORWARD)\n                 ? newForwardForeignKey(target) : newInverseForeignKey(target);\n@@ -219,12 +222,12 @@ private ForeignKey newForwardForeignKey(ClassMapping target) {\n                     cols[i].getTargetField());\n             else if (_fk != null)\n                 tcols[i] = getEquivalentColumn(_fk.getPrimaryKeyColumn\n-                    (cols[i]).getName(), target, true);\n-            else if (cols[i].getTarget() != null)\n-                tcols[i] = getEquivalentColumn(cols[i].getTarget(), target,\n+                    (cols[i]).getIdentifier(), target, true);\n+            else if (!DBIdentifier.isNull(cols[i].getTargetIdentifier()))\n+                tcols[i] = getEquivalentColumn(cols[i].getTargetIdentifier(), target,\n                     true);\n             else\n-                tcols[i] = getEquivalentColumn(cols[i].getName(), target,\n+                tcols[i] = getEquivalentColumn(cols[i].getIdentifier(), target,\n                     false);\n         }\n \n@@ -238,7 +241,7 @@ else if (cols[i].getTarget() != null)\n             cols = _fk.getConstantPrimaryKeyColumns();\n             for (int i = 0; i < cols.length; i++)\n                 newfk.joinConstant(_fk.getPrimaryKeyConstant(cols[i]),\n-                    getEquivalentColumn(cols[i].getName(), target, true));\n+                    getEquivalentColumn(cols[i].getIdentifier(), target, true));\n         }\n         return newfk;\n     }\n@@ -266,7 +269,7 @@ private Column getEquivalentColumn(Column col, ClassMapping target,\n     /**\n      * Return the given mapping's equivalent of the given column.\n      */\n-    private Column getEquivalentColumn(String colName, ClassMapping target,\n+    private Column getEquivalentColumn(DBIdentifier colName, ClassMapping target,\n         boolean explicit) {\n         // if there was no explicit target, use single pk column\n         if (!explicit) {\n@@ -432,11 +435,18 @@ public void refSchemaComponents() {\n             embed.refSchemaComponents();\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public void mapConstraints(String name, boolean adapt) {\n+        mapConstraints(DBIdentifier.newConstraint(name), adapt);\n+    }\n+\n+    public void mapConstraints(DBIdentifier name, boolean adapt) {\n         _unq = _info.getUnique(this, name, adapt);\n         _idx = _info.getIndex(this, name, adapt);\n     }\n-\n+    \n     public void clearMapping() {\n         _handler = null;\n         _cols = Schemas.EMPTY_COLUMNS;\n@@ -458,6 +468,11 @@ public void syncMappingInfo() {\n                 embed.syncMappingInfo();\n         }\n     }\n+    \n+    public void copy(ValueMetaData vmd) {\n+        super.copy(vmd);\n+        copyMappingInfo((ValueMapping)vmd);\n+    }\n \n     public void copyMappingInfo(ValueMapping vm) {\n         setValueMappedBy(vm.getValueMappedBy());"},{"sha":"c9881674f6e4eb558b0f446d7d8a93530367909a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","status":"modified","additions":65,"deletions":9,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.util.Collections;\n import java.util.List;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -39,6 +41,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class ValueMappingInfo\n     extends MappingInfo {\n \n@@ -47,6 +50,7 @@\n \n     private boolean _criteria = false;\n     private boolean _canNull = true;\n+    private List<Column> _mapsIdCols = null;\n \n     /**\n      * Whether to use class criteria when joining to related type.\n@@ -81,8 +85,14 @@ public void setCanIndicateNull(boolean ind) {\n      *\n      * @param name base name for value mapping\n      * @param inversable whether an inverse join is allowed\n+     * @deprecated\n      */\n     public ForeignKey getTypeJoin(final ValueMapping val, final String name,\n+        boolean inversable, boolean adapt) {\n+        return getTypeJoin(val, DBIdentifier.newForeignKey(name), inversable, adapt);\n+    }\n+\n+    public ForeignKey getTypeJoin(final ValueMapping val, final DBIdentifier name,\n         boolean inversable, boolean adapt) {\n         ClassMapping rel = val.getTypeMapping();\n         if (rel == null)\n@@ -121,9 +131,15 @@ public Table getTable(ValueMapping val) {\n     \n     /**\n      * Return the join from the related type to this value.\n+     * @deprecated\n      */\n     public ForeignKey getInverseTypeJoin(final ValueMapping val,\n         final String name, boolean adapt) {\n+        return getInverseTypeJoin(val, DBIdentifier.newForeignKey(name), adapt);\n+    }\n+\n+    public ForeignKey getInverseTypeJoin(final ValueMapping val,\n+        final DBIdentifier name, boolean adapt) {\n         ClassMapping rel = val.getTypeMapping();\n         if (rel == null || rel.getTable() == null)\n             return null;\n@@ -147,8 +163,14 @@ public void populate(Table local, Table foreign, Column col,\n \n     /**\n      * Return the columns for this value, based on the given templates.\n+     * @deprecated\n      */\n     public Column[] getColumns(ValueMapping val, String name,\n+        Column[] tmplates, Table table, boolean adapt) {\n+        return getColumns(val, DBIdentifier.newColumn(name), tmplates, table, adapt);\n+    }\n+\n+    public Column[] getColumns(ValueMapping val, DBIdentifier name,\n         Column[] tmplates, Table table, boolean adapt) {\n         orderColumnsByTargetField(val, tmplates, adapt);\n         val.getMappingRepository().getMappingDefaults().populateColumns\n@@ -164,7 +186,7 @@ private void orderColumnsByTargetField(ValueMapping val, Column[] tmplates,\n         boolean adapt) {\n         if (tmplates.length < 2 || tmplates[0].getTargetField() == null)\n             return;\n-        List cols = getColumns();\n+        List<Column> cols = getColumns();\n         if (cols.isEmpty() || cols.size() != tmplates.length)\n             return;\n \n@@ -198,8 +220,13 @@ public int findTargetField(Column[] tmplates, String target) {\n \n     /**\n      * Return a unique constraint for the given columns, or null if none.\n+     * @deprecated\n      */\n     public Unique getUnique(ValueMapping val, String name, boolean adapt) {\n+        return getUnique(val, DBIdentifier.newConstraint(name), adapt);\n+    }\n+\n+    public Unique getUnique(ValueMapping val, DBIdentifier name, boolean adapt) {\n         Column[] cols = val.getColumns();\n         if (cols.length == 0)\n             return null;\n@@ -211,8 +238,13 @@ public Unique getUnique(ValueMapping val, String name, boolean adapt) {\n \n     /**\n      * Return an index for the given columns, or null if none.\n+     * @deprecated\n      */\n     public Index getIndex(ValueMapping val, String name, boolean adapt) {\n+        return getIndex(val, DBIdentifier.newIndex(name), adapt);\n+    }\n+\n+    public Index getIndex(ValueMapping val, DBIdentifier name, boolean adapt) {\n         Column[] cols = val.getColumns();\n         if (cols.length == 0)\n             return null;\n@@ -224,8 +256,14 @@ public Index getIndex(ValueMapping val, String name, boolean adapt) {\n \n     /**\n      * Return the null indicator column for this value, or null if none.\n+     * @deprecated\n      */\n     public Column getNullIndicatorColumn(ValueMapping val, String name,\n+        Table table, boolean adapt) {\n+        return getNullIndicatorColumn(val, DBIdentifier.newColumn(name), table, adapt);\n+    }\n+\n+    public Column getNullIndicatorColumn(ValueMapping val, DBIdentifier name,\n         Table table, boolean adapt) {\n         // reset IO\n         setColumnIO(null);\n@@ -235,14 +273,15 @@ public Column getNullIndicatorColumn(ValueMapping val, String name,\n             return null;\n \n         // extract given null-ind column\n-        List cols = getColumns();\n+        List<Column> cols = getColumns();\n         Column given = (cols.isEmpty()) ? null : (Column) cols.get(0);\n         MappingDefaults def = val.getMappingRepository().getMappingDefaults();\n         if (given == null && (!adapt && !def.defaultMissingInfo()))\n             return null;\n \n         Column tmplate = new Column();\n-        tmplate.setName(name + \"_null\");\n+        DBIdentifier sName = DBIdentifier.append(name, \"_null\");\n+        tmplate.setIdentifier(sName);\n         tmplate.setJavaType(JavaTypes.INT);\n         if (!def.populateNullIndicatorColumns(val, name, table, new Column[]\n             { tmplate }) && given == null)\n@@ -256,17 +295,17 @@ public Column getNullIndicatorColumn(ValueMapping val, String name,\n             setColumnIO(io);\n         }\n \n-        if (given != null && given.getName() != null) {\n+        if (given != null && !DBIdentifier.isNull(given.getIdentifier())) {\n             // test if given column name is actually a field name, in which\n             // case we use its column as the null indicator column\n             ClassMapping embed = val.getEmbeddedMapping();\n             FieldMapping efm = (embed == null) ? null\n-                : embed.getFieldMapping(given.getName());\n+                : embed.getFieldMapping(given.getIdentifier().getName());\n             if (efm != null && efm.getColumns().length > 0)\n-                given.setName(efm.getColumns()[0].getName());\n+                given.setIdentifier(efm.getColumns()[0].getIdentifier());\n         }\n-        boolean compat = given == null || given.getName() == null\n-            || table == null || !table.isNameTaken(given.getName());\n+        boolean compat = given == null || DBIdentifier.isNull(given.getIdentifier())\n+            || table == null || !table.isNameTaken(given.getIdentifier());\n \n         return mergeColumn(val, \"null-ind\", tmplate, compat, given,\n             table, adapt, def.defaultMissingInfo());\n@@ -293,7 +332,7 @@ public void syncWith(ValueMapping val) {\n                 setJoinDirection(JOIN_FORWARD);\n             } else {\n                 foreign = val.getTypeMapping().getTable();\n-                setJoinDirection((val.getJoinDirection() == val.JOIN_FORWARD)\n+                setJoinDirection((val.getJoinDirection() == ValueMapping.JOIN_FORWARD)\n                     ? JOIN_FORWARD : JOIN_INVERSE);\n             }\n             syncForeignKey(val, val.getForeignKey(), local, foreign);\n@@ -331,4 +370,21 @@ public void copy(MappingInfo info) {\n         if (_canNull)\n             _canNull = vinfo.canIndicateNull();\n     }\n+    \n+    /**\n+     * Raw column data.\n+     */\n+    public List<Column> getMapsIdColumns() {\n+        if (_mapsIdCols == null) {\n+            return Collections.emptyList();\n+        }\n+        return  _mapsIdCols;\n+    }\n+    \n+    /**\n+     * Raw column data.\n+     */\n+    public void setMapsIdColumns(List<Column> cols) {\n+        _mapsIdCols = cols;\n+    }\n }"},{"sha":"60f9e840a04eaf341aeb4bf69f81e0c7c7ab0d6b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -26,7 +26,7 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassVersionStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -69,21 +69,21 @@\n     public Column[] getMultiTableColumns(Version vers, Column[] templates,\n             boolean adapt) {\n     \tTable primaryTable = vers.getClassMapping().getTable();\n-    \tList<String> secondaryTableNames = Arrays.asList(vers\n-                .getClassMapping().getMappingInfo().getSecondaryTableNames());\n+    \tList<DBIdentifier> secondaryTableNames = Arrays.asList(vers\n+                .getClassMapping().getMappingInfo().getSecondaryTableIdentifiers());\n         Map<Table, List<Column>> assign = new LinkedHashMap<Table,\n                 List<Column>>();\n     \tfor (Column col : templates) {\n-    \t    String tableName = col.getTableName();\n+    \t    DBIdentifier tableName = col.getTableIdentifier();\n     \t    Table table;\n-    \t\tif (StringUtils.isEmpty(tableName) \n-    \t\t  || tableName.equals(primaryTable.getName())) {\n+    \t\tif (DBIdentifier.isEmpty(tableName) \n+    \t\t  || tableName.equals(primaryTable.getIdentifier())) {\n     \t\t\ttable = primaryTable;\n     \t\t} else if (secondaryTableNames.contains(tableName)) {\n     \t\t\ttable = primaryTable.getSchema().getTable(tableName);\n     \t\t} else {\n                 throw new UserException(_loc.get(\"bad-version-column-table\",\n-    \t\t\t\t\tcol.getName(), tableName));\n+    \t\t\t\t\tcol.getIdentifier().toString(), tableName));\n     \t\t}\n     \t\tif (!assign.containsKey(table))\n     \t\t\tassign.put(table, new ArrayList<Column>());\n@@ -147,9 +147,9 @@ public void syncWith(Version version) {\n     boolean spansMultipleTables(Column[] cols) {\n     \tif (cols == null || cols.length <= 1) \n     \t\treturn false;\n-    \tSet<String> tables = new HashSet<String>();\n+    \tSet<DBIdentifier> tables = new HashSet<DBIdentifier>();\n     \tfor (Column col : cols)\n-    \t\tif (tables.add(col.getTableName()) && tables.size() > 1)\n+    \t\tif (tables.add(col.getTableIdentifier()) && tables.size() > 1)\n     \t\t\treturn true;\n     \treturn false;\n     }\n@@ -159,10 +159,10 @@ boolean spansMultipleTables(Column[] cols) {\n      */\n     private Table getSingleTable(Version version, Column[] cols) {\n     \tif (cols == null || cols.length == 0 \n-    \t || StringUtils.isEmpty(cols[0].getTableName()))\n+    \t || DBIdentifier.isEmpty(cols[0].getTableIdentifier()))\n     \t\treturn version.getClassMapping().getTable();\n     \treturn version.getClassMapping().getTable().getSchema()\n-    \t\t.getTable(cols[0].getTableName());\n+    \t\t.getTable(cols[0].getTableIdentifier());\n     }\n \n "},{"sha":"f166edaf8159b4dfb3a8308c428153aab209ab16","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -24,7 +24,6 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n "},{"sha":"f578486fdb31a4b726b39d4fef219a1d863efd77","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n@@ -40,10 +42,20 @@ public static BlobValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaTypes.OBJECT);\n         col.setSize(-1);\n         return new Column[]{ col };"},{"sha":"ca068ba11c12e1b6a264401c25c2ec4f41d13395","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n \n /**\n  * Handler for byte array values.\n@@ -42,10 +44,20 @@ public static ByteArrayValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaSQLTypes.BYTES);\n         col.setSize(-1);\n         return new Column[]{ col };"},{"sha":"a2e6f0313000014c37527776d7d4252264ddd18a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,11 +23,13 @@\n import java.io.IOException;\n import java.io.Reader;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Sized;\n import org.apache.openjpa.util.StoreException;\n \n@@ -49,10 +51,20 @@ public static CharArrayStreamValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaSQLTypes.CHAR_STREAM);\n         col.setSize(-1);\n         return new Column[]{ col };"},{"sha":"1f161816dde7a741cd661f69828c8d77326d0f91","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n@@ -42,10 +44,20 @@ public static CharArrayValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaTypes.STRING);\n         return new Column[]{ col };\n     }"},{"sha":"fda65af5712a19b92edb623c36fe893c414a20dd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n@@ -40,10 +42,20 @@ public static ClobValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+    \n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaTypes.STRING);\n         col.setSize(-1);\n         return new Column[]{ col };"},{"sha":"9da5944132622f56ce45b0427d2686eb61e1485a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,17 +23,21 @@\n import java.sql.SQLException;\n import java.util.Comparator;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.VersionMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -145,12 +149,12 @@ public void map(boolean adapt) {\n         \tfor (int i = 0; i < info.getColumns().size(); i++) {\n                 templates[i] = new Column();\n         \t\tColumn infoColumn = (Column)info.getColumns().get(i);\n-        \t\ttemplates[i].setTableName(infoColumn.getTableName());\n+        \t\ttemplates[i].setTableIdentifier(infoColumn.getTableIdentifier());\n         \t\ttemplates[i].setType(infoColumn.getType());\n         \t\ttemplates[i].setSize(infoColumn.getSize());\n                 templates[i].setDecimalDigits(infoColumn.getDecimalDigits());\n         \t\ttemplates[i].setJavaType(getJavaType(i));\n-        \t\ttemplates[i].setName(infoColumn.getName());\n+        \t\ttemplates[i].setIdentifier(infoColumn.getIdentifier());\n         \t}\n         \tColumn[] cols = info.getColumns(vers, templates, adapt);\n         \tfor (int i = 0; i < cols.length; i++)\n@@ -160,7 +164,9 @@ public void map(boolean adapt) {\n         } else {\n            Column tmplate = new Column();\n            tmplate.setJavaType(getJavaType());\n-           tmplate.setName(\"versn\");\n+           DBDictionary dict = vers.getMappingRepository().getDBDictionary();\n+           DBIdentifier versName = DBIdentifier.newColumn(\"versn\", dict != null ? dict.delimitAll() : false);\n+           tmplate.setIdentifier(versName);\n \n            Column[] cols = info.getColumns(vers, new Column[]{ tmplate },\n                    adapt);\n@@ -277,7 +283,13 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n         sel.select(cols);\n         sel.wherePrimaryKey(sm.getObjectId(), vers.getClassMapping(), store);\n \n-        Result res = sel.execute(store, null);\n+        // No need to lock version field (i.e. optimistic), except when version update is required (e.g. refresh) \n+        JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n+        if (!updateVersion && fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n+            fetch = (JDBCFetchConfiguration) fetch.clone();\n+            fetch.setReadLockLevel(MixedLockLevels.LOCK_NONE);\n+        }\n+        Result res = sel.execute(store, fetch);\n         try {\n             if (!res.next())\n                 return false;"},{"sha":"1db2491daf02d31ec7abd7ba7d8915b57d9981bc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -25,8 +25,10 @@\n import org.apache.openjpa.kernel.*;\n import org.apache.openjpa.util.*;\n import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.*;\n import org.apache.openjpa.jdbc.schema.*;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n \n /**\n  * <p>Handler for embedded objects as elements of a collection or map.  For\n@@ -50,7 +52,17 @@\n     private int _nullIdx = -1;\n     private boolean _synthetic = false;\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+    \n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         LinkedList cols = new LinkedList();\n         LinkedList args = new LinkedList();"},{"sha":"df0b091760be327849c8b25cc1afcef4274db6cf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -33,6 +34,7 @@\n import org.apache.openjpa.jdbc.meta.ValueMappingImpl;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StateManagerImpl;\n@@ -53,8 +55,19 @@\n \n     /**\n      * Maps embedded value and gathers columns and arguments into given lists.\n+     * @deprecated\n      */\n     protected void map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt, List cols, List args) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        map(vm, colName, io, adapt, cols, args);\n+    }\n+\n+    /**\n+     * Maps embedded value and gathers columns and arguments into given lists.\n+     */    \n+    protected void map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt, List cols, List args) {\n         // have to resolve embedded value to collect its columns\n         vm.getEmbeddedMapping().resolve(vm.MODE_META | vm.MODE_MAPPING);\n@@ -283,7 +296,7 @@ public static void getIdColumns(FieldMapping fmd, List cols) {\n         Column[] pkCols =  ((ValueMappingImpl)fmd.getValue()).getColumns();\n         for (int j = 0; j < pkCols.length; j++) {\n             Column newCol = new Column();\n-            newCol.setName(pkCols[j].getName());\n+            newCol.copy(pkCols[j]);\n             cols.add(newCol);\n         }\n     }"},{"sha":"3a0654926648111e56a3655c24ff68d334c00bed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,10 +20,12 @@\n \n import java.lang.reflect.Method;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.MetaDataException;\n \n@@ -52,7 +54,17 @@ public void setStoreOrdinal(boolean ordinal) {\n         _ordinal = ordinal;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+    \n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         // all enum classes have a static method called 'values()'\n         // that returns an array of all the enum values\n@@ -64,7 +76,7 @@ public void setStoreOrdinal(boolean ordinal) {\n         }\n \n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         if (_ordinal)\n             col.setJavaType(JavaTypes.SHORT);\n         else {"},{"sha":"c9da32ca029a988cf552b152f80720af176fcf74","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -49,9 +50,9 @@ public void map(boolean adapt) {\n         ClassMappingInfo info = cls.getMappingInfo();\n         info.assertNoSchemaComponents(cls, true);\n \n-        if (info.getTableName() != null) {\n-            Table table = info.createTable(cls, null, info.getSchemaName(),\n-                info.getTableName(), false);\n+        if (!DBIdentifier.isNull(info.getTableIdentifier())) {\n+            Table table = info.createTable(cls, null, info.getSchemaIdentifier(),\n+                info.getTableIdentifier(), false);\n             if (table != sup.getTable())\n                 throw new MetaDataException(_loc.get(\"flat-table\", cls,\n                     table.getFullName(), sup.getTable().getFullName()));"},{"sha":"e7f75822e67b3068659916033f53be4a6a01f643","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,13 +20,15 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -74,7 +76,9 @@ public void map(boolean adapt) {\n         Column[] pkCols = null;\n         if (cls.getIdentityType() == cls.ID_DATASTORE) {\n             Column id = new Column();\n-            id.setName(\"id\");\n+            DBDictionary dict = cls.getMappingRepository().getDBDictionary();\n+            DBIdentifier idName = DBIdentifier.newColumn(\"id\", dict != null ? dict.delimitAll() : false);\n+            id.setIdentifier(idName);\n             id.setJavaType(JavaTypes.LONG);\n             id.setComment(\"datastore id\");\n             if (cls.getIdentityStrategy() == ValueStrategies.AUTOASSIGN)\n@@ -90,10 +94,10 @@ public void map(boolean adapt) {\n         // add a primary key if we don't have one already\n         PrimaryKey pk = table.getPrimaryKey();\n         if (pk == null) {\n-            String pkname = null;\n+            DBIdentifier pkname = DBIdentifier.NULL;\n             if (adapt)\n                 pkname = cls.getMappingRepository().getMappingDefaults().\n-                    getPrimaryKeyName(cls, table);\n+                    getPrimaryKeyIdentifier(cls, table);\n             pk = table.addPrimaryKey(pkname);\n             pk.setLogical(!adapt);\n             if (pkCols != null)"},{"sha":"9dd20858362d65148431489f5975f1bed20753d8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,6 +21,7 @@\n import java.sql.*;\n import java.util.*;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.*;\n import org.apache.openjpa.jdbc.meta.*;\n import org.apache.openjpa.jdbc.schema.*;\n@@ -110,8 +111,8 @@ public void map(boolean adapt) {\n         _kio = new ColumnIO();\n         List columns = key.getValueInfo().getColumns(); \n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n-        String colName = dict.getValidColumnName(\"key\", field.getTable());\n-        _kcols = HandlerStrategies.map(key, colName, _kio, adapt);\n+        DBIdentifier colName = dict.getValidColumnName(DBIdentifier.newColumn(\"key\"), field.getTable());\n+        _kcols = HandlerStrategies.map(key, colName.getName(), _kio, adapt);\n \n         _vio = new ColumnIO();\n         _vcols = HandlerStrategies.map(val, \"value\", _vio, adapt);"},{"sha":"65b77cce55eb3935f401e09da2d1a90fce4e5e37","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.util.*;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.*;\n import org.apache.openjpa.jdbc.schema.*;\n import org.apache.openjpa.jdbc.sql.*;\n@@ -164,7 +165,7 @@ public void map(boolean adapt) {\n         _kio = new ColumnIO();\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n         _kcols = HandlerStrategies.map(key, \n-            dict.getValidColumnName(\"key\", field.getTable()), _kio, adapt);\n+            dict.getValidColumnName(DBIdentifier.newColumn(\"key\"), field.getTable()).getName(), _kio, adapt);\n \n         field.mapPrimaryKey(adapt);\n     }"},{"sha":"10c86032fa757df15ae0acc5ce2f9bf325f43669","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,23 +20,23 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n-import org.apache.openjpa.util.UserException;\n \n /**\n  * Utility methods for strategies using value handlers.\n@@ -58,9 +58,11 @@\n         vinfo.assertNoJoin(vm, true);\n         vinfo.assertNoForeignKey(vm, !adapt);\n \n-        Column[] cols = vm.getHandler().map(vm, name, io, adapt);\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        Column[] cols = vm.getHandler().map(vm, colName.getName(), io, adapt);\n         if (cols.length > 0 && cols[0].getTable() == null) {\n-            cols = vinfo.getColumns(vm, name, cols,\n+            cols = vinfo.getColumns(vm, colName, cols,\n                 vm.getFieldMapping().getTable(), adapt);\n             if (vinfo.isImplicitRelation())\n             \tfor (int i = 0; i < cols.length; i++)\n@@ -77,7 +79,7 @@\n                 }\n             }\n         }\n-        vm.mapConstraints(name, adapt);\n+        vm.mapConstraints(colName, adapt);\n         return cols;\n     }\n "},{"sha":"6792553381cee20e70574c422bbad95b93c86bfe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n@@ -44,10 +46,20 @@ public static ImmutableValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         if (vm.getTypeCode() == JavaTypes.DATE)\n             col.setJavaType(JavaSQLTypes.getDateTypeCode(vm.getType()));\n         else"},{"sha":"3dbf4a88aa8716eed51542285eaf261eb681a889","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,11 +20,13 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.DiscriminatorMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n@@ -79,7 +81,9 @@ public void map(boolean adapt) {\n \n         Column tmplate = new Column();\n         tmplate.setJavaType(getJavaType());\n-        tmplate.setName(\"typ\");\n+        DBDictionary dict = cls.getMappingRepository().getDBDictionary();\n+        DBIdentifier typName = DBIdentifier.newColumn(\"typ\", dict != null ? dict.delimitAll() : false);\n+        tmplate.setIdentifier(typName);\n \n         Column[] cols = info.getColumns(disc, new Column[]{ tmplate }, adapt);\n         disc.setColumns(cols);"},{"sha":"6ccf33351c72df6a38f3cacb8eb48bf29713a0b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,11 +23,13 @@\n import java.sql.SQLException;\n import java.sql.Types;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n@@ -58,19 +60,22 @@ public void map(boolean adapt) {\n         ValueMappingInfo vinfo = field.getValueInfo();\n         vinfo.assertNoJoin(field, true);\n         vinfo.assertNoForeignKey(field, !adapt);\n+        DBDictionary dict = field.getMappingRepository().getDBDictionary();\n+        DBIdentifier fieldName = DBIdentifier.newColumn(field.getName(), dict != null ? dict.delimitAll() : false);\n+\n         Column tmpCol = new Column();\n-        tmpCol.setName(field.getName());\n+        tmpCol.setIdentifier(fieldName);\n         tmpCol.setType(fieldType);\n         tmpCol.setJavaType(field.getTypeCode());\n         \n         tmpCol.setSize(-1);\n \n-        Column[] cols = vinfo.getColumns(field, field.getName(),\n+        Column[] cols = vinfo.getColumns(field, fieldName,\n             new Column[]{ tmpCol }, field.getTable(), adapt);\n \n         field.setColumns(cols);\n         field.setColumnIO(vinfo.getColumnIO());\n-        field.mapConstraints(field.getName(), adapt);\n+        field.mapConstraints(fieldName, adapt);\n         field.mapPrimaryKey(adapt);\n     }\n "},{"sha":"df8edcc9c765b60396c944c357f0a08869dea767","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -24,6 +24,7 @@\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -241,7 +242,7 @@ protected void handleMappedByForeignKey(boolean adapt){\n             val.getValueInfo().setColumns(field.getValueInfo().getColumns());\n             if (val.getTypeMapping().isMapped()) {\n                 ValueMappingInfo vinfo = val.getValueInfo();\n-                ForeignKey fk = vinfo.getTypeJoin(val, null, false, adapt);\n+                ForeignKey fk = vinfo.getTypeJoin(val, DBIdentifier.NULL, false, adapt);\n                 val.setForeignKey(fk);\n                 val.setColumnIO(vinfo.getColumnIO());\n             } else"},{"sha":"cc9d8c7c5e64a7476667c71c0c8af9635aec0f6f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,7 +23,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -87,17 +87,20 @@ public void map(boolean adapt) {\n         vinfo.assertNoJoin(field, true);\n         vinfo.assertNoForeignKey(field, !adapt);\n \n+        DBDictionary dict = field.getMappingRepository().getDBDictionary();\n+        DBIdentifier fieldName = DBIdentifier.newColumn(field.getName(), dict != null ? dict.delimitAll() : false);\n+\n         // get value columns\n         Column tmpCol = new Column();\n-        tmpCol.setName(field.getName());\n+        tmpCol.setIdentifier(fieldName);\n         tmpCol.setJavaType(getExpectedJavaType());\n         tmpCol.setSize(-1);\n-        Column[] cols = vinfo.getColumns(field, field.getName(),\n+        Column[] cols = vinfo.getColumns(field, fieldName,\n             new Column[]{ tmpCol }, field.getTable(), adapt);\n \n         field.setColumns(cols);\n         field.setColumnIO(vinfo.getColumnIO());\n-        field.mapConstraints(field.getName(), adapt);\n+        field.mapConstraints(fieldName, adapt);\n         field.mapPrimaryKey(adapt);\n     }\n "},{"sha":"7fe9ce8451b86e77fd30db5fcb5c1ed8618f1f51","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","status":"modified","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,10 +22,14 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.util.InternalException;\n@@ -42,16 +46,106 @@\n \n     private Object[] _args = null;\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         List cols = new ArrayList();\n         List args = new ArrayList();\n+        setMapsIdCol(vm);\n         super.map(vm, name, io, adapt, cols, args);\n \n         vm.setColumns((Column[]) cols.toArray(new Column[cols.size()]));\n         _args = args.toArray();\n         return vm.getColumns();\n     }\n+    \n+    private void setMapsIdCol(ValueMapping vm) {\n+        if (!(vm instanceof FieldMapping)) \n+            return;\n+        if (!((FieldMapping)vm).hasMapsIdCols())\n+            return;\n+        ClassMapping embeddedMeta = (ClassMapping)((FieldMapping)vm).getValue().getEmbeddedMetaData();\n+        if (embeddedMeta == null)\n+            return;\n+        List mapsIdColList = ((FieldMapping)vm).getValueInfo().getMapsIdColumns();\n+        if (mapsIdColList.size() > 0 ) {\n+            setMapsIdCols(mapsIdColList, embeddedMeta);\n+            return;\n+        } \n+\n+        FieldMapping[] fmds = embeddedMeta.getFieldMappings();\n+        for (int i = 0; i < fmds.length; i++) {\n+            mapsIdColList = fmds[i].getValueInfo().getMapsIdColumns();\n+            if (mapsIdColList.size() == 0)\n+                continue;\n+            ClassMapping embeddedMeta1 = (ClassMapping)fmds[i].getEmbeddedMetaData();\n+            if (embeddedMeta1 != null) \n+                setMapsIdCols(mapsIdColList, embeddedMeta1);\n+            else \n+                setMapsIdCols(mapsIdColList, fmds[i]);\n+        }\n+    }\n+    \n+    private void setMapsIdCols(List cols, ClassMapping cm) {\n+        for (int i = 0; i < cols.size(); i++) {\n+            DBIdentifier refColName = ((Column)cols.get(i)).getTargetIdentifier();\n+            FieldMapping fm = getReferenceField(cm, refColName);\n+            if (fm != null) {\n+                List colList1 = new ArrayList();\n+                colList1.add(cols.get(i));\n+                fm.setMapsIdCols(true);\n+                fm.getValueInfo().setMapsIdColumns(colList1);\n+            }\n+        }\n+    }\n+\n+    private void setMapsIdCols(List cols, FieldMapping fm) {\n+        if (cols.size() == 1) {\n+            fm.setMapsIdCols(true);\n+            fm.getValueInfo().setMapsIdColumns(cols);\n+            return;\n+        }\n+            \n+        for (int i = 0; i < cols.size(); i++) {\n+            DBIdentifier refColName = ((Column)cols.get(i)).getTargetIdentifier();\n+            if (isReferenceField(fm, refColName)) {\n+                List colList1 = new ArrayList();\n+                colList1.add(cols.get(i));\n+                fm.setMapsIdCols(true);\n+                fm.getValueInfo().setMapsIdColumns(colList1);\n+            }\n+        }\n+    }\n+    \n+    private FieldMapping getReferenceField(ClassMapping cm, DBIdentifier refColName) {\n+        FieldMapping[] fmds = cm.getFieldMappings();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (isReferenceField(fmds[i], refColName))\n+                return fmds[i];\n+        }\n+        return null;\n+    }\n+    \n+    private boolean isReferenceField(FieldMapping fm, DBIdentifier refColName) {\n+        List cols = fm.getValueInfo().getColumns();\n+        if (cols.size() == 0) {\n+            if (fm.getName().equals(refColName))\n+                return true;                \n+        } else {\n+            if (((Column)cols.get(0)).getIdentifier().equals(refColName))\n+                return true;\n+        } \n+        return false;\n+    }\n \n     public Object getResultArgument(ValueMapping vm) {\n         return _args;"},{"sha":"009518bfe4007c49389d91eaf900a7391ff5957e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n@@ -29,6 +30,7 @@\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n@@ -75,12 +77,15 @@ public void map(boolean adapt) {\n         vinfo.assertNoJoin(field, true);\n         vinfo.assertNoForeignKey(field, !adapt);\n \n+        // Determine whether to delimit the base field name\n+        DBDictionary dict = field.getMappingRepository().getDBDictionary();\n+        DBIdentifier fieldName = DBIdentifier.newColumn(field.getName(), dict != null ? dict.delimitAll() : false);\n         // get value columns\n         Column tmpCol = new Column();\n-        tmpCol.setName(field.getName());\n+        tmpCol.setIdentifier(fieldName);\n         tmpCol.setJavaType(field.getTypeCode());\n \n-        Column[] cols = vinfo.getColumns(field, field.getName(),\n+        Column[] cols = vinfo.getColumns(field, fieldName,\n             new Column[]{ tmpCol }, field.getTable(), adapt);\n         if (field.getValueStrategy() == ValueStrategies.AUTOASSIGN)\n             cols[0].setAutoAssigned(true);\n@@ -89,7 +94,7 @@ public void map(boolean adapt) {\n         \t\tcols[i].setImplicitRelation(true);\n         field.setColumns(cols);\n         field.setColumnIO(vinfo.getColumnIO());\n-        field.mapConstraints(field.getName(), adapt);\n+        field.mapConstraints(fieldName, adapt);\n \n         // add primary key columns to table pk if logical\n         field.mapPrimaryKey(adapt);"},{"sha":"1d6f1f4ada4336bbdb632af0c7a0b49df51509d3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":28,"deletions":10,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -36,6 +37,7 @@\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n+import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.ValueMappingImpl;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n@@ -53,6 +55,7 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.Union;\n+import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -63,8 +66,10 @@\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.UnsupportedException;\n+\n import serp.util.Numbers;\n \n /**\n@@ -141,15 +146,15 @@ public void map(boolean adapt) {\n         // around an inverse key: check to see if we're mapped as a secondary\n         // table join but we're in the table of the related type, and if so\n         // switch our join mapping info to our value mapping info\n-        String tableName = field.getMappingInfo().getTableName();\n+        DBIdentifier tableName = field.getMappingInfo().getTableIdentifier();\n         Table table = field.getTypeMapping().getTable();\n         ValueMappingInfo vinfo = field.getValueInfo();\n-        if (tableName != null && table != null\n-            && (tableName.equalsIgnoreCase(table.getName())\n-            || tableName.equalsIgnoreCase(table.getFullName()))) {\n+        if (!DBIdentifier.isNull(tableName) && table != null\n+            && (tableName.equals(table.getIdentifier())\n+            || tableName.equals(table.getFullIdentifier()))) {\n             vinfo.setJoinDirection(MappingInfo.JOIN_INVERSE);\n             vinfo.setColumns(field.getMappingInfo().getColumns());\n-            field.getMappingInfo().setTableName(null);\n+            field.getMappingInfo().setTableIdentifier(DBIdentifier.NULL);\n             field.getMappingInfo().setColumns(null);\n         }\n         \n@@ -200,7 +205,8 @@ private void setMappedByIdColumns() {\n             FieldMapping fm = (FieldMapping) pks[i];\n             ValueMappingImpl val = (ValueMappingImpl) field.getValue();\n             ValueMappingInfo info = val.getValueInfo();\n-            info.setColumns(getMappedByIdColumns(fm));\n+            if (info.getColumns().size() == 0) \n+                info.setColumns(getMappedByIdColumns(fm));\n         }\n     }\n \n@@ -698,8 +704,15 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         \t}\n         }\n \n-        sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n-            eagerJoin(res.newJoins(), cls, false)));\n+        boolean isLocked = res.isLocking();\n+        try {\n+            if (store.getLockManager() != null)\n+                res.setLocking(store.getLockManager().skipRelationFieldLock());\n+            sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n+                    eagerJoin(res.newJoins(), cls, false)));\n+        } finally {\n+            res.setLocking(isLocked);\n+        }\n \n         // reset mapped by is needed for OneToOne bidirectional relations\n         // having a mapped-by parent to correctly set the parent-child\n@@ -970,7 +983,7 @@ private ForeignKey createTranslatingForeignKey(ClassMapping relmapping,\n             if (gfk != null)\n                 tcol = gfk.getColumn(tcol);\n             if (tfk == null)\n-                tfk = new ForeignKey(null, tcol.getTable());\n+                tfk = new ForeignKey(DBIdentifier.NULL, tcol.getTable());\n             tfk.join(tcol, fk.getPrimaryKeyColumn(cols[i]));\n         }\n         return tfk;\n@@ -983,10 +996,12 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n         col = field.getForeignKey().getPrimaryKeyColumn(col);\n         if (col == null)\n             throw new InternalException();\n+        \n+        Object savedFieldVal = fieldVal;\n \n         ClassMapping relmapping = field.getTypeMapping();\n         Joinable j = field.getTypeMapping().assertJoinable(col);\n-        if (ImplHelper.isManageable(fieldVal))\n+        if (ImplHelper.isManageable(fieldVal) && !field.getDefiningMetaData().useIdClassFromParent())\n             fieldVal = store.getContext().getObjectId(fieldVal);\n         if (fieldVal instanceof OpenJPAId)\n             fieldVal = ((OpenJPAId) fieldVal).getIdObject();\n@@ -995,6 +1010,9 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n             Object[] pks = ApplicationIds.toPKValues(fieldVal, relmapping);\n             fieldVal = pks[relmapping.getField(j.getFieldIndex()).\n                 getPrimaryKeyIndex()];\n+        } else if (relmapping.getObjectIdType() == ObjectId.class && \n+            relmapping.getPrimaryKeyFieldMappings()[0].getValueMapping().isEmbedded()) {\n+            return j.getJoinValue(savedFieldVal, col, store);\n         }\n         return j.getJoinValue(fieldVal, col, store);\n     }"},{"sha":"90d352ec610597c18dbc8a0e2593cac6c88e484a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.util.*;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.*;\n import org.apache.openjpa.jdbc.schema.*;\n import org.apache.openjpa.jdbc.sql.*;\n@@ -201,14 +202,14 @@ public void map(boolean adapt) {\n             throw new MetaDataException(_loc.get(\"not-relation\", val));\n         FieldMapping mapped = field.getMappedByMapping();\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n-        String keyName = null;\n+        DBIdentifier keyName = null;\n         if (field.isUni1ToMFK() || (!field.isBiMTo1JT() && mapped != null)) { \n             handleMappedByForeignKey(adapt);\n-            keyName = dict.getValidColumnName(\"vkey\", field.getTable());\n+            keyName = dict.getValidColumnName(DBIdentifier.newColumn(\"vkey\"), field.getTable());\n         } else if (field.isBiMTo1JT() || mapped == null) { \n             field.mapJoin(adapt, true);\n-            mapTypeJoin(val, \"value\", adapt);\n-            keyName = dict.getValidColumnName(\"key\", field.getTable());\n+            mapTypeJoin(val, DBIdentifier.newColumn(\"value\"), adapt);\n+            keyName = dict.getValidColumnName(DBIdentifier.newColumn(\"key\"), field.getTable());\n         }\n         mapTypeJoin(key, keyName, adapt);\n \n@@ -218,7 +219,7 @@ public void map(boolean adapt) {\n     /**\n      * Map the given value's join to its persistent type.\n      */\n-    private void mapTypeJoin(ValueMapping vm, String name, boolean adapt) {\n+    private void mapTypeJoin(ValueMapping vm, DBIdentifier name, boolean adapt) {\n         if (vm.getTypeMapping().isMapped()) {\n             ValueMappingInfo vinfo = vm.getValueInfo();\n             ForeignKey fk = vinfo.getTypeJoin(vm, name, false, adapt);"},{"sha":"3e7c39ff360a0f01157fa9294cb622a6104470d5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","status":"modified","additions":18,"deletions":8,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -104,6 +105,11 @@ public static Object toDataStoreValue(ValueMapping vm, Object val,\n      */\n     public static void mapRelationToUnmappedPC(ValueMapping vm,\n         String name, boolean adapt) {\n+        mapRelationToUnmappedPC(vm, DBIdentifier.newColumn(name), adapt);\n+    }\n+\n+    public static void mapRelationToUnmappedPC(ValueMapping vm,\n+        DBIdentifier name, boolean adapt) {\n         if (vm.getTypeMapping().getIdentityType() == ClassMapping.ID_UNKNOWN)\n             throw new MetaDataException(_loc.get(\"rel-to-unknownid\", vm));\n \n@@ -119,11 +125,11 @@ public static void mapRelationToUnmappedPC(ValueMapping vm,\n      * class relation.\n      */\n     private static Column[] newUnmappedPCTemplateColumns(ValueMapping vm,\n-        String name) {\n+        DBIdentifier name) {\n         ClassMapping rel = vm.getTypeMapping();\n         if (rel.getIdentityType() == ClassMapping.ID_DATASTORE) {\n             Column col = new Column();\n-            col.setName(name);\n+            col.setIdentifier(name);\n             col.setJavaType(JavaTypes.LONG);\n             col.setRelationId(true);\n             return new Column[]{ col };\n@@ -134,11 +140,15 @@ public static void mapRelationToUnmappedPC(ValueMapping vm,\n         for (int i = 0; i < pks.length; i++) {\n             cols[i] = mapPrimaryKey(vm, pks[i]);\n             if (cols.length == 1)\n-                cols[i].setName(name);\n-            else if (cols[i].getName() == null)\n-                cols[i].setName(name + \"_\" + pks[i].getName());\n-            else\n-                cols[i].setName(name + \"_\" + cols[i].getName());\n+                cols[i].setIdentifier(name);\n+            else if (DBIdentifier.isNull(cols[i].getIdentifier())) {\n+                DBIdentifier sName = DBIdentifier.combine(cols[i].getIdentifier(), pks[i].getName());\n+                cols[i].setIdentifier(sName);\n+            }\n+            else {\n+                DBIdentifier sName = DBIdentifier.combine(cols[i].getIdentifier(), cols[i].getName());\n+                cols[i].setIdentifier(sName);\n+            }\n             cols[i].setTargetField(pks[i].getName());\n             cols[i].setRelationId(true);\n         }\n@@ -193,7 +203,7 @@ private static Column mapPrimaryKey(ValueMapping vm, FieldMapping pk) {\n         }\n \n         if (tmplate != null) {\n-            col.setName(tmplate.getName());\n+            col.setIdentifier(tmplate.getIdentifier());\n             col.setType(tmplate.getType());\n             col.setTypeName(tmplate.getTypeName());\n             col.setSize(tmplate.getSize());"},{"sha":"8f1551951ccb42aed58fbb28b27e79ed0007934f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,16 +22,19 @@\n import java.util.BitSet;\n import java.util.Collection;\n \n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.lib.identifier.IdentifierConfiguration;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.ArrayStateImage;\n import org.apache.openjpa.util.InternalException;\n@@ -238,9 +241,9 @@ private CustomUpdate(Column[] cols) {\n          * WHERE clause of an UPDATE to test whether the current database\n          * record matches our stored version.\n          */\n-        public String getSQL() {\n+        public String getSQL(DBDictionary dict) {\n             Column[] cols = getTable().getColumns();\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n             boolean hasWhere = false;\n             Object val;\n             for (int i = 0; i < cols.length; i++) {\n@@ -251,9 +254,9 @@ public String getSQL() {\n                 if (hasWhere)\n                     buf.append(\" AND \");\n                 if (val == NULL)\n-                    buf.append(cols[i]).append(\" IS NULL\");\n+                    buf.append(dict.getColumnDBName(cols[i]) + \" IS NULL\");\n                 else\n-                    buf.append(cols[i]).append(\" = ?\");\n+                    buf.append(dict.getColumnDBName(cols[i]) + \" = ?\");\n                 hasWhere = true;\n             }\n             return buf.toString();"},{"sha":"bde5b898d12c437f194c5faaea37c2327f620c29","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -437,7 +437,9 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), refJoins) + 1;\n             res.setBaseMapping(null);\n-            add(store, coll, loadElement(sm, store, fetch, res, dataJoins));\n+            Object obj = loadElement(sm, store, fetch, res, dataJoins);\n+            if (obj != null)\n+                add(store, coll, obj);\n             if (!res.next() || res.indexOf() != typeIdx) {\n                 res.pushBack();\n                 break;\n@@ -497,7 +499,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n                 // we know we don't need a union\n                 Select sel = store.getSQLFactory().newSelect();\n                 sel.setAggregate(true);\n-                StringBuffer sql = new StringBuffer();\n+                StringBuilder sql = new StringBuilder();\n                 sql.append(\"MAX(\").\n                     append(sel.getColumnAlias(field.getOrderColumn())).\n                     append(\")\");"},{"sha":"5de9f78c42ccce05a4416350302e42d2b9be923c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n@@ -30,6 +31,7 @@\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n@@ -71,19 +73,22 @@ public void map(boolean adapt) {\n         vinfo.assertNoJoin(field, true);\n         vinfo.assertNoForeignKey(field, !adapt);\n \n+        DBDictionary dict = field.getMappingRepository().getDBDictionary();\n+        DBIdentifier fieldName = DBIdentifier.newColumn(field.getName(), dict != null ? dict.delimitAll() : false);\n+\n         // get value columns\n         Column tmpCol = new Column();\n-        tmpCol.setName(field.getName());\n+        tmpCol.setIdentifier(fieldName);\n         tmpCol.setJavaType(field.getTypeCode());\n \n-        Column[] cols = vinfo.getColumns(field, field.getName(),\n+        Column[] cols = vinfo.getColumns(field, fieldName,\n             new Column[]{ tmpCol }, field.getTable(), adapt);\n         if (field.getValueStrategy() == ValueStrategies.AUTOASSIGN)\n             cols[0].setAutoAssigned(true);\n \n         field.setColumns(cols);\n         field.setColumnIO(vinfo.getColumnIO());\n-        field.mapConstraints(field.getName(), adapt);\n+        field.mapConstraints(fieldName, adapt);\n \n         // add primary key columns to table pk if logical\n         field.mapPrimaryKey(adapt);"},{"sha":"0cd1a3f96439b4b3b65575713a14f53443733837","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,12 +21,14 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -56,10 +58,20 @@ public static UntypedPCValueHandler getInstance() {\n         return _instance;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaTypes.STRING);\n         col.setRelationId(true);\n         return new Column[]{ col };"},{"sha":"f6506db1e684d441579cec675dcc70c3ad6ecdb8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,6 +20,7 @@\n \n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -79,10 +80,10 @@ public void map(boolean adapt) {\n         // add a primary key if we don't have one already\n         PrimaryKey pk = table.getPrimaryKey();\n         if (pk == null) {\n-            String pkname = null;\n+            DBIdentifier pkname = DBIdentifier.NULL;\n             if (adapt)\n                 pkname = cls.getMappingRepository().getMappingDefaults().\n-                    getPrimaryKeyName(cls, table);\n+                    getPrimaryKeyIdentifier(cls, table);\n             pk = table.addPrimaryKey(pkname);\n             pk.setLogical(!adapt);\n             pk.setColumns(pkCols);"},{"sha":"663495fd6421fa8275d71e3ddc7a760b58e68c87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -28,10 +28,12 @@\n import javax.xml.bind.Unmarshaller;\n import javax.xml.transform.stream.StreamSource;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n \n@@ -45,14 +47,24 @@\n     extends AbstractValueHandler {\n     private static final String PROXY_SUFFIX = \"$proxy\";\n \n+    /**\n+     * @deprecated\n+     */\n     public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n+        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        return map(vm, colName, io, adapt);\n+    }\n+\n+    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io,\n         boolean adapt) {\n         Column col = new Column();\n-        col.setName(name);\n+        col.setIdentifier(name);\n         col.setJavaType(JavaTypes.STRING);\n         col.setSize(-1);\n-        col.setTypeName(vm.getMappingRepository().getDBDictionary()\n-            .xmlTypeName);\n+        col.setTypeIdentifier(DBIdentifier.newColumnDefinition(vm.getMappingRepository().getDBDictionary()\n+            .xmlTypeName));\n         col.setXML(true);\n         return new Column[]{ col };\n     }"},{"sha":"cd05e158f1a285c55aa0d2fd21b8d1dde1a8add2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":112,"deletions":45,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -27,6 +27,8 @@\n import java.sql.Types;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.VersionStrategy;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -39,6 +41,7 @@\n  * @author Abe White\n  * @author Stephen Kim\n  */\n+@SuppressWarnings(\"serial\")\n public class Column\n     extends ReferenceCounter {\n \n@@ -50,13 +53,12 @@\n     public static final int FLAG_FK_UPDATE = 2 << 5;\n     public static final int FLAG_PK_JOIN = 2 << 6;\n \n-    private String _name = null;\n-    private String _fullName = null;\n+    private DBIdentifier _name = DBIdentifier.NULL;\n     private Table _table = null;\n-    private String _tableName = null;\n-    private String _schemaName = null;\n+    private DBIdentifier _tableName = DBIdentifier.NULL;\n+    private DBIdentifier _schemaName = DBIdentifier.NULL;\n     private int _type = Types.OTHER;\n-    private String _typeName = null;\n+    private DBIdentifier _typeName = DBIdentifier.NULL;\n     private int _javaType = JavaTypes.OBJECT;\n     private int _size = 0;\n     private int _decimals = 0;\n@@ -66,9 +68,10 @@\n     private boolean _autoAssign = false;\n     private boolean _rel = false;\n     private boolean _implicitRelation = false;\n-    private String _target = null;\n+    private DBIdentifier _target = DBIdentifier.NULL;\n     private String _targetField = null;\n     private int _flags = 0;\n+    private QualifiedDBIdentifier _fullPath = null;\n \n     private int _index = 0;\n     private boolean _pk = false;\n@@ -88,12 +91,17 @@ public Column() {\n      *\n      * @param name the name of the column\n      * @param table the column's table\n+     * @deprecated\n      */\n     public Column(String name, Table table) {\n-        setName(name);\n+        this(DBIdentifier.newColumn(name), table);\n+    }\n+\n+    public Column(DBIdentifier name, Table table) {\n+        setIdentifier(name);\n         if (table != null) {\n-            setTableName(table.getName());\n-            setSchemaName(table.getSchemaName());\n+            setTableIdentifier(table.getIdentifier());\n+            setSchemaIdentifier(table.getSchemaIdentifier());\n         }\n         _table = table;\n     }\n@@ -169,79 +177,118 @@ public Table getTable() {\n \n     /**\n      * The column's table name.\n+     * @deprecated\n      */\n     public String getTableName() {\n-        return _tableName;\n+        return getTableIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTableIdentifier() {\n+        return _tableName == null ? DBIdentifier.NULL : _tableName;\n     }\n \n     /**\n      * The column's table name. You can only call this method on columns\n      * whose table object is not set.\n+     * @deprecated\n      */\n     public void setTableName(String name) {\n-        if (getTable() != null)\n-            throw new IllegalStateException();\n-        _tableName = name;\n-        _fullName = null;\n+        setTableIdentifier(DBIdentifier.newTable(name));\n     }\n-    \n+\n+    public void setTableIdentifier(DBIdentifier name) {\n+      if (getTable() != null)\n+          throw new IllegalStateException();\n+      _tableName = name == null ? DBIdentifier.NULL : name;\n+      _fullPath = null;\n+    }\n+\n     /**\n      * Reset the table name with the fully qualified table name which\n      * includes the schema name\n+     * @deprecated\n      */\n     public void resetTableName(String name) {\n-        _tableName = name;\n+        _tableName = DBIdentifier.newTable(name);\n+    }\n+    \n+    public void resetTableIdentifier(DBIdentifier table) {\n+        _tableName = table == null ? DBIdentifier.NULL : table;\n     }\n \n     /**\n      * The column's schema name.\n+     * @deprecated\n      */\n     public String getSchemaName() {\n-        return _schemaName;\n+        return getSchemaIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getSchemaIdentifier() {\n+        return _schemaName == null ? DBIdentifier.NULL : _schemaName;\n     }\n \n     /**\n      * The column's schema name. You can only call this method on columns\n      * whose table object is not set.\n+     * @deprecated use setSchemaIdentifier(DBIdentifier name)\n      */\n     public void setSchemaName(String name) {\n+        setSchemaIdentifier(DBIdentifier.newSchema(name));\n+    }\n+\n+    public void setSchemaIdentifier(DBIdentifier name) {\n         if (getTable() != null)\n             throw new IllegalStateException();\n-        _schemaName = name;\n+        _schemaName = name == null ? DBIdentifier.NULL : name;\n     }\n \n     /**\n      * Return the column's name.\n+     * @deprecated use getIdentifier()\n      */\n     public String getName() {\n-        return _name;\n+        return getIdentifier().getName();\n     }\n \n+    public DBIdentifier getIdentifier() {\n+        return _name == null ? DBIdentifier.NULL : _name;\n+    }\n+\n+    \n     /**\n      * Set the column's name. You can only call this method on columns\n      * whose table object is not set.\n+     * @deprecated use setIdentifier(DBIdentifier name)\n      */\n     public void setName(String name) {\n+        setIdentifier(DBIdentifier.newColumn(name));\n+    }\n+\n+    public void setIdentifier(DBIdentifier name) {\n         if (getTable() != null)\n             throw new IllegalStateException();\n-        _name = name;\n-        _fullName = null;\n+        _name = name == null ? DBIdentifier.NULL : name;\n+        _fullPath = null;\n     }\n \n     /**\n      * Return the column's full name, in the form &lt;table&gt;.&lt;name&gt;.\n+     * @deprecated use getFullDBIdentifier()\n      */\n     public String getFullName() {\n-        if (_fullName == null) {\n-            String name = getName();\n-            if (name == null)\n-                return null;\n-            String tname = getTableName();\n-            if (tname == null)\n-                return name;\n-            _fullName = tname + \".\" + name;\n+        return getFullDBIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getFullDBIdentifier() {\n+        return getQualifiedPath().getIdentifier();\n+    }\n+    \n+    public QualifiedDBIdentifier getQualifiedPath() {\n+        if (_fullPath  == null) {\n+            _fullPath = QualifiedDBIdentifier.newPath(getTableIdentifier(), getIdentifier() );\n         }\n-        return _fullName;\n+        return _fullPath;\n     }\n \n     /**\n@@ -262,16 +309,26 @@ public void setType(int sqlType) {\n \n     /**\n      * The database-specific SQL type of this column.\n+     * @deprecated\n      */\n     public String getTypeName() {\n-        return _typeName;\n+        return getTypeIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTypeIdentifier() {\n+        return _typeName == null ? DBIdentifier.NULL : _typeName ;\n     }\n \n     /**\n      * The database-specific SQL type of this column.\n+     * @deprecated\n      */\n     public void setTypeName(String typeName) {\n-        _typeName = typeName;\n+        setTypeIdentifier(DBIdentifier.newColumnDefinition(typeName));\n+    }\n+\n+    public void setTypeIdentifier(DBIdentifier typeName) {\n+        _typeName = typeName == null ? DBIdentifier.NULL : typeName;\n     }\n \n     /**\n@@ -470,16 +527,26 @@ public void setRelationId(boolean rel) {\n \n     /**\n      * The name of the column this column joins to, if any. Used for mapping.\n+     * @deprecated use getTargetIdentifier()\n      */\n     public String getTarget() {\n-        return _target;\n+        return getTargetIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTargetIdentifier() {\n+        return _target == null ? DBIdentifier.NULL : _target;\n     }\n \n     /**\n      * The name of the column this column joins to, if any. Used for mapping.\n+     * @deprecated use setTargetIdentifier(DBIdentifier target)\n      */\n     public void setTarget(String target) {\n-        _target = StringUtils.trimToNull(target);\n+        setTargetIdentifier(DBIdentifier.newColumn(StringUtils.trimToNull(target)));\n+    }\n+\n+    public void setTargetIdentifier(DBIdentifier target) {\n+        _target = target == null ? DBIdentifier.NULL : DBIdentifier.trimToNull(target);\n     }\n \n     /**\n@@ -661,14 +728,14 @@ public boolean isCompatible(int type, String typeName, int size,\n      * Returns the column name.\n      */\n     public String toString() {\n-        return getName();\n+        return getIdentifier().getName();\n     }\n \n     /**\n      * Useful for debugging.\n      */\n     public String getDescription() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"Full Name: \").append(getFullName()).append(\"\\n\");\n         buf.append(\"Type: \").append(Schemas.getJDBCName(getType())).\n             append(\"\\n\");\n@@ -687,9 +754,9 @@ public boolean equalsColumn(Column col) {\n         if (col == null)\n             return false;\n \n-        if (!getFullName().equalsIgnoreCase(col.getFullName()))\n+        if (!getQualifiedPath().equals(col.getQualifiedPath()))\n             return false;\n-        if (!isCompatible(col.getType(), col.getTypeName(), col.getSize(),\n+        if (!isCompatible(col.getType(), col.getTypeIdentifier().getName(), col.getSize(),\n             col.getDecimalDigits()))\n             return false;\n         if (getType() == Types.VARCHAR && getSize() > 0 && col.getSize() > 0\n@@ -704,12 +771,12 @@ public boolean equalsColumn(Column col) {\n     public void copy(Column from) {\n         if (from == null)\n             return;\n-        if (getName() == null)\n-            setName(from.getName());\n+        if (DBIdentifier.isNull(getIdentifier()))\n+            setIdentifier(from.getIdentifier());\n         if (getType() == Types.OTHER)\n             setType(from.getType());\n-        if (getTypeName() == null)\n-            setTypeName(from.getTypeName());\n+        if (DBIdentifier.isNull(getTypeIdentifier()))\n+            setTypeIdentifier(from.getTypeIdentifier());\n         if (getJavaType() == JavaTypes.OBJECT)\n             setJavaType(from.getJavaType());\n         if (getSize() == 0)\n@@ -726,8 +793,8 @@ public void copy(Column from) {\n             setRelationId(from.isRelationId());\n         if (!isImplicitRelation())\n         \tsetImplicitRelation(from.isRelationId());\n-        if (getTarget() == null)\n-            setTarget(from.getTarget());\n+        if (DBIdentifier.isNull(getTargetIdentifier()))\n+            setTargetIdentifier(from.getTargetIdentifier());\n         if (getTargetField() == null)\n             setTargetField(from.getTargetField());\n         if (_flags == 0)\n@@ -761,7 +828,7 @@ public void setVersionStrategy(VersionStrategy strategy) {\n     }\n \n     public boolean hasComment() {\n-        return _comment != null && !_comment.equalsIgnoreCase(_name);\n+        return _comment != null && !_comment.equalsIgnoreCase(_name.toString());\n     }\n \n     public String getComment() {"},{"sha":"7e7475c4c33c5267c8b70ce13234a605cec580b5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -27,6 +27,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class ColumnIO\n     implements Serializable {\n "},{"sha":"db2f19287021362704bcdcce139f8a12da4d5035","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","status":"modified","additions":84,"deletions":29,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,21 +18,25 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n+\n /**\n  * A table constraint. This class is closely aligned with the constraint\n  * information available from {@link java.sql.DatabaseMetaData}.\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class Constraint\n     extends ReferenceCounter {\n \n-    private String _name = null;\n-    private String _fullName = null;\n+    private DBIdentifier _name = DBIdentifier.NULL;\n+    private QualifiedDBIdentifier _fullPath = null;\n     private Table _table = null;\n-    private String _tableName = null;\n-    private String _schemaName = null;\n-    private String _columnName = null;\n+    private DBIdentifier _tableName = DBIdentifier.NULL;\n+    private DBIdentifier _schemaName = DBIdentifier.NULL;\n+    private DBIdentifier _columnName = DBIdentifier.NULL;\n     private boolean _deferred = false;\n \n     /**\n@@ -46,12 +50,17 @@\n      *\n      * @param name the name of the constraint, or null if none\n      * @param table the local table of the constraint\n+     * @deprecated\n      */\n     Constraint(String name, Table table) {\n-        setName(name);\n+        this(DBIdentifier.newConstant(name), table);\n+    }\n+\n+    Constraint(DBIdentifier name, Table table) {\n+        setIdentifier(name);\n         if (table != null) {\n-            setTableName(table.getName());\n-            setSchemaName(table.getSchemaName());\n+            setTableIdentifier(table.getIdentifier());\n+            setSchemaIdentifier(table.getSchemaIdentifier());\n         }\n         _table = table;\n     }\n@@ -73,90 +82,136 @@ public Table getTable() {\n \n     /**\n      * Return the column's table name.\n+     * @deprecated\n      */\n     public String getTableName() {\n-        return _tableName;\n+        return getTableIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getTableIdentifier() {\n+        return _tableName == null ? DBIdentifier.NULL : _tableName;\n     }\n \n     /**\n      * Set the column's table name. You can only call this method on\n      * columns whose table object is not set.\n+     * @deprecated\n      */\n     public void setTableName(String name) {\n-        if (getTable() != null)\n-            throw new IllegalStateException();\n-        _tableName = name;\n-        _fullName = null;\n+        setTableIdentifier(DBIdentifier.newTable(name));\n     }\n \n+      public void setTableIdentifier(DBIdentifier name) {\n+          if (getTable() != null)\n+              throw new IllegalStateException();\n+          _tableName = name;\n+          _fullPath = null;\n+      }\n+\n+    \n     /**\n      * Return the column table's schema name.\n+     * @deprecated\n      */\n     public String getSchemaName() {\n-        return _schemaName;\n+        return getSchemaIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getSchemaIdentifier() {\n+        return _schemaName == null ? DBIdentifier.NULL : _schemaName;\n     }\n \n     /**\n      * Set the column table's schema name. You can only call this method on\n-     * columns whose tbale object is not set.\n+     * columns whose table object is not set.\n+     * @deprecated\n      */\n     public void setSchemaName(String schema) {\n+        setSchemaIdentifier(DBIdentifier.newSchema(schema));\n+    }\n+\n+    public void setSchemaIdentifier(DBIdentifier schema) {\n         if (getTable() != null)\n             throw new IllegalStateException();\n         _schemaName = schema;\n     }\n \n     /**\n      * Return the column's name.\n+     * @deprecated\n      */\n     public String getColumnName() {\n-        return _columnName;\n+        return getColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getColumnIdentifier() {\n+        return _columnName == null ? DBIdentifier.NULL : _columnName;\n     }\n \n     /**\n      * Set the column's name. You can only call this method on\n      * columns whose table object is not set.\n+     * @deprecated\n      */\n     public void setColumnName(String name) {\n+        setColumnIdentifier(DBIdentifier.newColumn(name));\n+    }\n+\n+    public void setColumnIdentifier(DBIdentifier name) {\n         if (getTable() != null)\n             throw new IllegalStateException();\n         _columnName = name;\n     }\n \n     /**\n      * Return the name of the constraint.\n+     * @deprecated\n      */\n     public String getName() {\n-        return _name;\n+        return getIdentifier().getName();\n+    }\n+    \n+    public DBIdentifier getIdentifier() {\n+        return _name == null ? DBIdentifier.NULL : _name;\n     }\n \n+\n     /**\n      * Set the name of the constraint. This method cannot be called if the\n      * constraint already belongs to a table.\n+     * @deprecated\n      */\n     public void setName(String name) {\n+        setIdentifier(DBIdentifier.newConstraint(name));\n+    }\n+\n+    public void setIdentifier(DBIdentifier name) {\n         if (getTable() != null)\n             throw new IllegalStateException();\n         _name = name;\n-        _fullName = null;\n+        _fullPath = null;\n     }\n \n     /**\n      * Return the full name of the constraint.\n+     * @deprecated\n      */\n     public String getFullName() {\n-        if (_fullName == null) {\n-            String name = getName();\n-            if (name == null)\n-                return null;\n-            String tname = getTableName();\n-            if (tname == null)\n-                return name;\n-            _fullName = tname + \".\" + name;\n+        return getFullIdentifier().getName();\n+    }\n+\n+    public QualifiedDBIdentifier getQualifiedPath() {\n+        if (_fullPath == null) {\n+            _fullPath = QualifiedDBIdentifier.newPath(getTableIdentifier(), getIdentifier());\n         }\n-        return _fullName;\n+        return _fullPath;\n     }\n \n+    public DBIdentifier getFullIdentifier() {\n+        return getQualifiedPath().getIdentifier();\n+    }\n+    \n+    \n     /**\n      * Return whether this constraint is a logical constraint only; i.e.\n      * if it does not exist in the database.\n@@ -178,8 +233,8 @@ public void setDeferred(boolean deferred) {\n     }\n \n     public String toString() {\n-        if (getName() != null)\n-            return getName();\n+        if (!getIdentifier().isNull())\n+            return getIdentifier().getName();\n \n         String name = getClass().getName();\n         name = name.substring(name.lastIndexOf('.') + 1);"},{"sha":"c29401d999edb6ab2cccaf4c0176c0b4c8e4509a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":75,"deletions":18,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,6 +21,9 @@\n import java.sql.Types;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -34,17 +37,18 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class DynamicSchemaFactory\n     extends SchemaGroup\n     implements SchemaFactory, Configurable {\n \n     private transient DBDictionary _dict = null;\n-    private String _schema = null;\n+    private DBIdentifier _schema = DBIdentifier.NULL;\n \n     public void setConfiguration(Configuration conf) {\n         JDBCConfiguration jconf = (JDBCConfiguration) conf;\n         _dict = jconf.getDBDictionaryInstance();\n-        _schema = jconf.getSchema();\n+        _schema = DBIdentifier.newSchema(jconf.getSchema());\n     }\n \n     public void startConfiguration() {\n@@ -69,42 +73,67 @@ public boolean isKnownTable(String name) {\n         return super.findTable(name) != null;\n     }\n \n+    public boolean isKnownTable(QualifiedDBIdentifier path) {\n+        return super.findTable(path) != null;\n+    }\n+\n     public Table findTable(String name) {\n+        return super.findTable(name);\n+    }\n+\n+    public Table findTable(DBIdentifier name) {\n         if (name == null)\n             return null;\n \n-        Table table = super.findTable(name);\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(name);\n+        return findTable(path);\n+    }\n+\n+    public Table findTable(QualifiedDBIdentifier path) {\n+        if (DBIdentifier.isNull(path))\n+            return null;\n+\n+        Table table = super.findTable(path);\n         if (table != null)\n             return table;\n \n         // if full name, split\n-        String schemaName = null;\n-        String tableName = name;\n-        int dotIdx = name.lastIndexOf('.');\n-        if (dotIdx != -1) {\n-            schemaName = name.substring(0, dotIdx);\n-            tableName = name.substring(dotIdx + 1);\n-        } else\n+        DBIdentifier schemaName = DBIdentifier.NULL;\n+        DBIdentifier tableName = path.getUnqualifiedName();\n+        if (!DBIdentifier.isNull(path.getSchemaName())) {\n+            schemaName = path.getSchemaName();\n+        } else {\n             schemaName = _schema;\n+        }\n \n         Schema schema = getSchema(schemaName);\n-        if (schema == null)\n+        if (schema == null) {\n             schema = addSchema(schemaName);\n+        }\n \n         // Ensure only valid table name(s) are added to the schema\n-        if (tableName.length() > _dict.maxTableNameLength) {\n+        if (tableName.getName().length() > _dict.maxTableNameLength) {\n             return schema.addTable(tableName, \n                 _dict.getValidTableName(tableName, getSchema(schemaName)));\n         }\n \n         return schema.addTable(tableName);\n     }\n+    \n+    \n+//    protected Table newTable(String name, Schema schema) {\n+//        return new DynamicTable(name, schema);\n+//    }\n \n-    protected Table newTable(String name, Schema schema) {\n+    protected Table newTable(DBIdentifier name, Schema schema) {\n         return new DynamicTable(name, schema);\n     }\n \n-    protected Column newColumn(String name, Table table) {\n+//    protected Column newColumn(String name, Table table) {\n+//        return new DynamicColumn(name, table);\n+//    }\n+\n+    protected Column newColumn(DBIdentifier name, Table table) {\n         return new DynamicColumn(name, table);\n     }\n \n@@ -118,21 +147,42 @@ public DynamicTable(String name, Schema schema) {\n             super(name, schema);\n         }\n \n+        public DynamicTable(DBIdentifier name, Schema schema) {\n+            super(name, schema);\n+        }\n+\n+        /**\n+         * @deprecated\n+         */\n         public Column getColumn(String name) {\n             return getColumn(name, null);\n         }\n \n+        public Column getColumn(DBIdentifier name) {\n+            return getColumn(name, null);\n+        }\n+\n+        /**\n+         * @deprecated\n+         */\n         public Column getColumn(String name, DBDictionary dict) {\n             if (name == null)\n                 return null;\n+            return getColumn(DBIdentifier.newColumn(name), dict);\n+        }\n+\n+        public Column getColumn(DBIdentifier name, DBDictionary dict) {\n+            if (DBIdentifier.isNull(name))\n+                return null;\n \n-            Column col = super.getColumn(name, dict);\n+            Column col = super.getColumn(name);\n             if (col != null)\n                 return col;\n \n             // Ensure only valid column name(s) are added to the table\n-            if ((name.length() > _dict.maxColumnNameLength) ||\n-                _dict.getInvalidColumnWordSet().contains(name.toUpperCase())) {\n+            if ((name.getName().length() > _dict.maxColumnNameLength) ||\n+                _dict.getInvalidColumnWordSet().contains(\n+                    DBIdentifier.toUpper(name).getName())) {\n                 return addColumn(name, \n                     _dict.getValidColumnName(name, this));\n             }\n@@ -147,10 +197,17 @@ public Column getColumn(String name, DBDictionary dict) {\n     private class DynamicColumn\n         extends Column {\n \n+        /**\n+         * @deprecated\n+         */\n         public DynamicColumn(String name, Table table) {\n             super(name, table);\n         }\n \n+        public DynamicColumn(DBIdentifier name, Table table) {\n+            super(name, table);\n+        }\n+\n         public boolean isCompatible(int type, String typeName, int size,\n             int decimals) {\n             if (getType() != Types.OTHER)\n@@ -161,7 +218,7 @@ public boolean isCompatible(int type, String typeName, int size,\n             setType(type);\n             setSize(size);\n             if (typeName != null)\n-                setTypeName(typeName);\n+                setTypeIdentifier(DBIdentifier.newColumnDefinition(typeName));\n             if (decimals >= 0)\n                 setDecimalDigits(decimals);\n             return true;"},{"sha":"60ed28cb4138b1151649ed52ed39f2f15ab766f3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":179,"deletions":21,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -26,6 +26,9 @@\n import java.util.List;\n \n import org.apache.commons.lang.ObjectUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -39,6 +42,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class ForeignKey\n     extends Constraint {\n \n@@ -74,9 +78,9 @@\n     private static final Localizer _loc = \n         Localizer.forPackage(ForeignKey.class);\n \n-    private String _pkTableName = null;\n-    private String _pkSchemaName = null;\n-    private String _pkColumnName = null;\n+    private DBIdentifier _pkTableName = DBIdentifier.NULL;\n+    private DBIdentifier _pkSchemaName = DBIdentifier.NULL;\n+    private DBIdentifier _pkColumnName = DBIdentifier.NULL;\n     private int _seq = 0;\n \n     private LinkedHashMap _joins = null;\n@@ -159,11 +163,16 @@ public ForeignKey() {\n      *\n      * @param name the foreign key name, if any\n      * @param table the local table of the foreign key\n+     * @deprecated\n      */\n     public ForeignKey(String name, Table table) {\n         super(name, table);\n     }\n \n+    public ForeignKey(DBIdentifier name, Table table) {\n+        super(name, table);\n+    }\n+\n     public boolean isLogical() {\n         return _delAction == ACTION_NONE;\n     }\n@@ -226,58 +235,88 @@ private boolean isPrimaryKeyAutoAssigned(List seen) {\n \n     /**\n      * The name of the primary key table.\n+     * @deprecated\n      */\n     public String getPrimaryKeyTableName() {\n+        return getPrimaryKeyTableIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getPrimaryKeyTableIdentifier() {\n         Table table = getPrimaryKeyTable();\n         if (table != null)\n-            return table.getName();\n-        return _pkTableName;\n+            return table.getIdentifier();\n+        return _pkTableName == null ? DBIdentifier.NULL : _pkTableName;\n     }\n \n     /**\n      * The name of the primary key table. You can only set the primary\n      * key table name on foreign keys that have not already been joined.\n+     * @deprecated\n      */\n     public void setPrimaryKeyTableName(String pkTableName) {\n+        setPrimaryKeyTableIdentifier(DBIdentifier.newTable(pkTableName));\n+    }\n+\n+    public void setPrimaryKeyTableIdentifier(DBIdentifier pkTableName) {\n         if (getPrimaryKeyTable() != null)\n             throw new IllegalStateException();\n         _pkTableName = pkTableName;\n     }\n \n     /**\n      * The name of the primary key table's schema.\n+     * @deprecated\n      */\n     public String getPrimaryKeySchemaName() {\n+        return getPrimaryKeySchemaIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getPrimaryKeySchemaIdentifier() {\n         Table table = getPrimaryKeyTable();\n         if (table != null)\n-            return table.getSchemaName();\n+            return table.getSchemaIdentifier();\n         return _pkSchemaName;\n     }\n \n     /**\n      * The name of the primary key table's schema. You can only set the\n      * primary key schema name on foreign keys that have not already been\n      * joined.\n+     * @deprecated\n      */\n     public void setPrimaryKeySchemaName(String pkSchemaName) {\n+        setPrimaryKeySchemaIdentifier(DBIdentifier.newSchema(pkSchemaName));\n+    }\n+\n+    public void setPrimaryKeySchemaIdentifier(DBIdentifier pkSchemaName) {\n         if (getPrimaryKeyTable() != null)\n             throw new IllegalStateException();\n         _pkSchemaName = pkSchemaName;\n     }\n \n     /**\n      * The name of the primary key column.\n+     * @deprecated\n      */\n     public String getPrimaryKeyColumnName() {\n-        return _pkColumnName;\n+        return getPrimaryKeyColumnIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getPrimaryKeyColumnIdentifier() {\n+        return _pkColumnName == null ? DBIdentifier.NULL : _pkColumnName;\n     }\n \n     /**\n      * The name of the primary key column. You can only set the\n      * primary key column name on foreign keys that have not already been\n      * joined.\n+     * @deprecated\n      */\n     public void setPrimaryKeyColumnName(String pkColumnName) {\n+        setPrimaryKeyColumnIdentifier(DBIdentifier.newColumn(pkColumnName));\n+    }\n+\n+    public void setPrimaryKeyColumnIdentifier(DBIdentifier pkColumnName) {\n         if (getPrimaryKeyTable() != null)\n             throw new IllegalStateException();\n         _pkColumnName = pkColumnName;\n@@ -728,7 +767,7 @@ private static boolean match(Column[] cols, Column[] fkCols) {\n \n     private static boolean hasColumn(Column[] cols, Column col) {\n         for (int i = 0; i < cols.length; i++)\n-            if (cols[i].getFullName().equalsIgnoreCase(col.getFullName()))\n+            if (cols[i].getQualifiedPath().equals(col.getQualifiedPath()))\n                 return true;\n         return false;\n     }\n@@ -744,39 +783,67 @@ private static boolean match(Object[] vals, Object[] fkVals) {\n     \n     /**\n      * Return the name of the foreignkey constraint as defined in the database.\n+     * @deprecated\n      */\n     public String loadNameFromDB(DBDictionary dbdict, Connection conn) {\n+        return loadIdentifierFromDB(dbdict, conn).getName();\n+    }\n+\n+    public DBIdentifier loadIdentifierFromDB(DBDictionary dbdict, Connection conn) {\n         if( isLogical() || getTable() == null)\n-            return null;\n-        String retVal = null;\n+            return DBIdentifier.NULL;\n+        DBIdentifier retVal = DBIdentifier.NULL;\n         try{\n             Schema schema = getTable().getSchema();\n             ForeignKey[] fks = dbdict.getImportedKeys(conn.getMetaData(), \n-                conn.getCatalog(), schema.getName(), \n-                getTable().getName(), conn);\n+                DBIdentifier.newCatalog(conn.getCatalog()), schema.getIdentifier(), \n+                getTable().getIdentifier(), conn, false);\n             for ( int i=0; i< fks.length; i++) {\n-                Table localtable = schema.getTable(fks[i].getTableName());\n+                Table localtable = schema.getTable(fks[i].getTableIdentifier());\n                 Table pkTable = schema.getTable(\n-                    fks[i].getPrimaryKeyTableName());\n+                    fks[i].getPrimaryKeyTableIdentifier());\n                 boolean addFK = false;\n                 ForeignKey fkTemp = localtable.getForeignKey(\n-                    fks[i].getName());\n+                    fks[i].getIdentifier());\n                 if( fkTemp == null) {\n                     addFK=true;\n                     fkTemp = localtable.addForeignKey(\n-                        fks[i].getName());\n+                        fks[i].getIdentifier());\n                     fkTemp.setDeferred(fks[i].isDeferred());\n                     fkTemp.setDeleteAction(fks[i].getDeleteAction());\n                 }\n-                if( ! fkTemp.containsColumn(\n-                    localtable.getColumn(fks[i].getColumnName(), dbdict)))\n-                fkTemp.join(localtable.getColumn(fks[i].getColumnName(), dbdict), \n-                    pkTable.getColumn(fks[i].getPrimaryKeyColumnName(), dbdict));\n+                if (fks[i].getColumns() == null || fks[i].getColumns().length == 0) {\n+                    // Singular column foreign key \n+                    if( ! fkTemp.containsColumn(\n+                        localtable.getColumn(fks[i].getColumnIdentifier())))\n+                    fkTemp.join(localtable.getColumn(fks[i].getColumnIdentifier()), \n+                        pkTable.getColumn(fks[i].getPrimaryKeyColumnIdentifier()));\n+                } else {\n+                    // Add the multi-column foreign key, joining local and pk columns in\n+                    // the temporary key\n+                    Column[] locCols = fks[i].getColumns();\n+                    Column[] pkCols = fks[i].getPrimaryKeyColumns();\n+                    // Column counts must match\n+                    if (locCols != null && pkCols != null & \n+                        locCols.length != pkCols.length) {\n+                        Log log = dbdict.getLog();\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"fk-column-mismatch\"));\n+                        }\n+                    }\n+                    for (int j = 0; j < locCols.length; j++) {\n+                        if( ! fkTemp.containsColumn(\n+                            localtable.getColumn(locCols[j].getIdentifier()))) {\n+                            fkTemp.join(localtable.getColumn(locCols[j].getIdentifier()), \n+                                pkTable.getColumn(pkCols[j].getIdentifier()));\n+                        }\n+                    }\n+                }\n                 if( equalsForeignKey(fkTemp))\n                 {\n                     if(addFK)\n                         localtable.removeForeignKey(fkTemp);\n-                    retVal = fks[i].getName();\n+                    retVal = fks[i].getIdentifier();\n                     break;\n                 }\n                 if(addFK)\n@@ -790,5 +857,96 @@ public String loadNameFromDB(DBDictionary dbdict, Connection conn) {\n         }\n         return retVal;\n     }\n+\n+    /**\n+     * Joins the column of a single column FK to this FK.\n+     * @param fk\n+     */\n+    public void addColumn(ForeignKey fk) {\n+        // Convert simple name based fk to a multi-column FK if necessary.\n+        if (getColumns() == null || getColumns().length == 0) {\n+            // If this FK is single column key, covert to a multi-column key\n+            Column[] keyCols = createKeyColumns(this);\n+            if (keyCols[0] != null && keyCols[1] != null) {\n+                setPrimaryKeyColumnIdentifier(DBIdentifier.NULL);\n+                setColumnIdentifier(DBIdentifier.NULL);\n+                join(keyCols[0], keyCols[1]);\n+            }\n+        }\n+        // Create the local and primary key columns from the fk and add them\n+        // to this fk.\n+        Column[] keyCols = createKeyColumns(fk);\n+        if (keyCols[0] != null && keyCols[1] != null) {\n+            join(keyCols[0], keyCols[1]);\n+        }\n+    }\n+    \n+    /*\n+     * Creates the local and primary key columns for a name-based fk. \n+     * @return Column[] element 0 is local column\n+     *                  element 1 is the primary key in another table.\n+     */\n+    private static Column[] createKeyColumns(ForeignKey fk) {\n+        Column fkCol = null;\n+        if (!DBIdentifier.isEmpty(fk.getColumnIdentifier())) {\n+            fkCol = new Column();\n+            fkCol.setIdentifier(fk.getColumnIdentifier());\n+            fkCol.setTableIdentifier(fk.getTableIdentifier());\n+            fkCol.setSchemaIdentifier(fk.getSchemaIdentifier());\n+        }\n+        \n+        Column pkCol = null;\n+        if (!DBIdentifier.isEmpty(fk.getPrimaryKeyColumnIdentifier())) {\n+            pkCol = new Column();\n+            pkCol.setIdentifier(fk.getPrimaryKeyColumnIdentifier());\n+            pkCol.setTableIdentifier(fk.getPrimaryKeyTableIdentifier());\n+            pkCol.setSchemaIdentifier(fk.getPrimaryKeySchemaIdentifier());\n+        }\n+        return new Column[] { fkCol, pkCol };\n+    }\n     \n+    /*\n+     * ForeignKey utility class which determines equality based upon the \n+     * non-column state of the keys.  \n+     */\n+    public static class FKMapKey {\n+        \n+        private ForeignKey _fk;\n+\n+        public FKMapKey(ForeignKey fk) {\n+            _fk = fk;\n+        }\n+        public ForeignKey getFk() {\n+            return _fk;\n+        }\n+\n+        public int hashCode() {\n+            return getFk().getIdentifier() != null ? getFk().getIdentifier().hashCode() : getFk().hashCode();\n+        }\n+        \n+        public boolean equals(Object fkObj) {\n+            if (fkObj == this) {\n+                return true;\n+            }\n+            if (fkObj == null || !(fkObj instanceof FKMapKey)) {\n+                return false;\n+            }\n+            ForeignKey fk = ((FKMapKey)fkObj).getFk();\n+            if (getFk().getDeleteAction() != fk.getDeleteAction())\n+                return false;\n+            if (getFk().isDeferred() != fk.isDeferred())\n+                return false;\n+            if (!getFk().getIdentifier().equals(fk.getIdentifier())) {\n+                return false;\n+            }\n+            // Assert PK table name and schema\n+            if (!getFk().getPrimaryKeySchemaIdentifier().equals(fk.getPrimaryKeySchemaIdentifier()) ||\n+                !getFk().getPrimaryKeyTableIdentifier().equals(fk.getPrimaryKeyTableIdentifier()) ||\n+                !getFk().getSchemaIdentifier().equals(fk.getSchemaIdentifier()) ||\n+                !getFk().getTableIdentifier().equals(fk.getTableIdentifier())) {\n+                return false;\n+            }\n+            return true;\n+        }\n+    }\n }"},{"sha":"2bd283869646dadbce35c03270b085bb9569b487","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n \n /**\n  * Represents a database index. Can also represent a partial index,\n@@ -27,6 +27,7 @@\n  * @author Abe White\n  * @author Stephen Kim\n  */\n+@SuppressWarnings(\"serial\")\n public class Index\n     extends LocalConstraint {\n \n@@ -43,11 +44,16 @@ public Index() {\n      *\n      * @param name the name of the index\n      * @param table the table of the index\n+     * @deprecated\n      */\n     public Index(String name, Table table) {\n         super(name, table);\n     }\n \n+    public Index(DBIdentifier name, Table table) {\n+        super(name, table);\n+    }\n+\n     /**\n      * Return true if this is a UNIQUE index.\n      */\n@@ -66,6 +72,17 @@ public boolean isLogical() {\n         return false;\n     }\n \n+    /**\n+     * @deprecated\n+     */\n+    public String getFullName() {\n+        return getFullIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getFullIdentifier() {\n+        return getQualifiedPath().getIdentifier();\n+    }\n+\n     /**\n      * Indexes are equal if they have the same name, the same columns, and\n      * are both unique/not unique.\n@@ -78,7 +95,7 @@ public boolean equalsIndex(Index idx) {\n \n         if (isUnique() != idx.isUnique())\n             return false;\n-        if (!StringUtils.equalsIgnoreCase(getFullName(), idx.getFullName()))\n+        if (!getQualifiedPath().equals(idx.getQualifiedPath()))\n             return false;\n         return equalsLocalConstraint(idx);\n     }"},{"sha":"6e810e504f8fcd3dbede6f0259f9b117b565ed87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java","status":"modified","additions":47,"deletions":26,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,9 +23,13 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierUtil;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.identifier.IdentifierRule;\n \n /**\n  * Factory that uses database metadata to construct the system schema.\n@@ -35,6 +39,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class LazySchemaFactory\n     extends SchemaGroup\n     implements SchemaFactory, Configurable {\n@@ -80,19 +85,49 @@ public void storeSchema(SchemaGroup schema) {\n         // nothing to do\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Table findTable(String name) {\n         if (name == null)\n             return null;\n+        return findTable(DBIdentifier.newTable(name));\n+    }\n \n-        Table table = super.findTable(name);\n+    public Table findTable(DBIdentifier name) {\n+        if (name == null)\n+            return null;\n+        return findTable(QualifiedDBIdentifier.getPath(name));\n+    }\n+\n+    public Table findTable(QualifiedDBIdentifier path) {\n+        if (path == null)\n+            return null;\n+\n+        Table table = super.findTable(path);\n         if (table != null)\n             return table;\n \n-        generateSchemaObject(name, true);\n-        return super.findTable(name);\n+        generateSchemaObject(path, true);\n+        return super.findTable(path);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n     public Sequence findSequence(String name) {\n+        if (name == null)\n+            return null;\n+        return findSequence(DBIdentifier.newSequence(name));\n+    }\n+\n+    public Sequence findSequence(DBIdentifier name) {\n+        if (name == null)\n+            return null;\n+        return findSequence(QualifiedDBIdentifier.getPath(name));\n+    }\n+        \n+    public Sequence findSequence(QualifiedDBIdentifier name) {\n         if (name == null)\n             return null;\n \n@@ -107,24 +142,10 @@ public Sequence findSequence(String name) {\n     /**\n      * Generate the table or sequence with the given name.\n      */\n-    private void generateSchemaObject(String name, boolean isTable) {\n+    private void generateSchemaObject(QualifiedDBIdentifier name, boolean isTable) {\n         // if full name, split\n-        String schemaName = null;\n-        String objectName = name;\n-\n-        // look for the standard schema separator...\n-        int dotIdx = name.indexOf('.');\n-        // ... or the dictionary schema separator\n-        if (dotIdx == -1) {\n-            String sep = _conf.getDBDictionaryInstance().catalogSeparator;\n-            if (!\".\".equals(sep))\n-                dotIdx = name.indexOf(sep);\n-        }\n-\n-        if (dotIdx != -1) {\n-            schemaName = name.substring(0, dotIdx);\n-            objectName = name.substring(dotIdx + 1);\n-        }\n+        DBIdentifier schemaName = name.getSchemaName();\n+        DBIdentifier objectName = name.getIdentifier();\n \n         // we share a single connection across all schemas, so synch\n         // on the schema group\n@@ -149,18 +170,18 @@ private void generateSchemaObject(String name, boolean isTable) {\n \n                     if (table != null) {\n                         if (_pks)\n-                            _gen.generatePrimaryKeys(table.getSchemaName(),\n-                                table.getName(), _conn, _meta);\n+                            _gen.generatePrimaryKeys(table.getSchemaIdentifier(),\n+                                table.getIdentifier(), _conn, _meta);\n                         if (_indexes)\n-                            _gen.generateIndexes(table.getSchemaName(),\n-                                table.getName(), _conn, _meta);\n+                            _gen.generateIndexes(table.getSchemaIdentifier(),\n+                                table.getIdentifier(), _conn, _meta);\n \n                         // generate foreign keys from the table; this might\n                         // end up re-calling this getTable method if the foreign\n                         // key links to a table that hasn't been loaded yet\n                         if (_fks)\n-                            _gen.generateForeignKeys(table.getSchemaName(),\n-                                table.getName(), _conn, _meta);\n+                            _gen.generateForeignKeys(table.getSchemaIdentifier(),\n+                                table.getIdentifier(), _conn, _meta);\n                     }\n                 } else\n                     _gen.generateSequences(schemaName, objectName, _conn,"},{"sha":"9126bef1698140a32fb4061ab251c8f6016638e8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.lang.ObjectUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n \n@@ -32,13 +32,14 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class LocalConstraint\n     extends Constraint {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (LocalConstraint.class);\n \n-    private List _colList = null;\n+    private List<Column> _colList = null;\n     private Column[] _cols = null;\n \n     /**\n@@ -52,12 +53,16 @@ public LocalConstraint() {\n      *\n      * @param name the name of the constraint, if any\n      * @param table the table of the constraint\n+     * @deprecated\n      */\n     public LocalConstraint(String name, Table table) {\n         super(name, table);\n     }\n \n-    /**\n+    public LocalConstraint(DBIdentifier name, Table table) {\n+        super(name, table);\n+    }\n+/**\n      * Called when the constraint is removed from its table.\n      */\n     void remove() {\n@@ -99,7 +104,7 @@ public void addColumn(Column col) {\n                 col == null ? null : getTable()));\n     \t\n         if (_colList == null)\n-            _colList = new ArrayList(3);\n+            _colList = new ArrayList<Column>(3);\n         else if (_colList.contains(col))\n             return;\n \n@@ -168,7 +173,7 @@ public boolean columnsMatch(Column[] ocols) {\n      */\n     private static boolean hasColumn(Column[] cols, Column col) {\n         for (int i = 0; i < cols.length; i++)\n-            if (cols[i].getFullName().equalsIgnoreCase(col.getFullName()))\n+            if (cols[i].getQualifiedPath().equals(col.getQualifiedPath()))\n                 return true;\n         return false;\n     }"},{"sha":"3cdcea3265ce8228adae1e58f3b49afb16cb0ec6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":38,"deletions":27,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,6 +23,8 @@\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -32,34 +34,47 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class NameSet\n     implements Serializable {\n \n     private static final Localizer _loc = Localizer.forPackage(NameSet.class);\n \n-    private Set _names = null;\n-\n-    // an additional names Set for checking name duplication\n-    private Set _subNames = null;\n+    private Set<DBIdentifier> _names = null;\n \n     /**\n      * Return true if the given name is in use already.\n+     * @deprecated\n      */\n     public boolean isNameTaken(String name) {\n-        if (name == null)\n+        return isNameTaken(DBIdentifier.toUpper(DBIdentifier.newDefault(name)));\n+    }\n+    \n+    public boolean isNameTaken(DBIdentifier name) {\n+        if (DBIdentifier.isEmpty(name)) {\n             return true;\n-        return (_names != null && _names.contains(name.toUpperCase())) ||\n-            (_subNames != null && _subNames.contains(name.toUpperCase()));\n+        }\n+        if (_names == null) {\n+            return false;\n+        }\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        return _names.contains(sName);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n+    protected void addName(String name, boolean validate) {\n+        addName(DBIdentifier.newIdentifier(name, DBIdentifierType.DEFAULT, true), validate);\n+    }\n     /**\n      * Attempt to add the given name to the set.\n      *\n      * @param name the name to add\n      * @param validate if true, null or empty names will not be accepted\n      */\n-    protected void addName(String name, boolean validate) {\n-        if (StringUtils.isEmpty(name)) {\n+    protected void addName(DBIdentifier name, boolean validate) {\n+        if (DBIdentifier.isNull(name) || StringUtils.isEmpty(name.getName())) {\n             if (validate)\n                 throw new IllegalArgumentException(_loc.get(\"bad-name\", name)\n                     .getMessage());\n@@ -70,31 +85,27 @@ protected void addName(String name, boolean validate) {\n         // DBs use different namespaces for components, and it would be\n         // difficult to find a scheme that fits all and is still useful\n         if (_names == null)\n-            _names = new HashSet();\n-        _names.add(name.toUpperCase());\n+            _names = new HashSet<DBIdentifier>();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _names.add(sName);\n     }\n \n     /**\n-     * Remove the given name from the table.\n+     * @deprecated\n      */\n     protected void removeName(String name) {\n-        if (name != null && _names != null)\n-            _names.remove(name.toUpperCase());\n+        if (name != null && _names != null) {\n+            removeName(DBIdentifier.newIdentifier(name, DBIdentifierType.DEFAULT, true));\n+        }\n     }\n-\n     /**\n-    * Attempt to add the given name to the set.\n-    *\n-    * @param name the name to add\n-    */\n-    protected void addSubName(String name) {\n-        if (_subNames == null) {\n-            _subNames = new HashSet();\n+     * Remove the given name from the table.\n+     */\n+    protected void removeName(DBIdentifier name) {\n+        if (!DBIdentifier.isNull(name) && _names != null) {\n+            DBIdentifier sName = DBIdentifier.toUpper(name);\n+            _names.remove(sName);\n         }\n-        _subNames.add(name.toUpperCase());\n-    }\n-\n-    protected void resetSubNames() {\n-        _subNames = null;\n     }\n+    \n }"},{"sha":"a51d9a9581352d2dddd735868cfd4be0fd579f87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,13 +18,16 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+\n /**\n  * Represents a table primary key. It can also represent a partial key,\n  * aligning with the key information available from\n  * {@link java.sql.DatabaseMetaData}.\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class PrimaryKey\n     extends LocalConstraint {\n \n@@ -41,11 +44,16 @@ public PrimaryKey() {\n      *\n      * @param name the name of the primary key, if any\n      * @param table the table of the primary key\n+     * @deprecated\n      */\n     public PrimaryKey(String name, Table table) {\n         super(name, table);\n     }\n \n+    public PrimaryKey(DBIdentifier name, Table table) {\n+        super(name, table);\n+    }\n+\n     public boolean isLogical() {\n         return _logical;\n     }"},{"sha":"f59b07064b035e36cf722b1239d406da7a0d9851","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","status":"modified","additions":90,"deletions":31,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -22,20 +22,22 @@\n import java.util.Map;\n import java.util.TreeMap;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n \n /**\n  * Represents a database schema.\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class Schema\n-    implements Comparable, Serializable {\n+    implements Comparable<Schema>, Serializable {\n \n-    private String _name = null;\n+    private DBIdentifier _name = DBIdentifier.NULL;\n     private SchemaGroup _group = null;\n-    private Map _tableMap = null;\n-    private Map _seqMap = null;\n+    private Map<DBIdentifier, Table> _tableMap = null;\n+    private Map<DBIdentifier, Sequence> _seqMap = null;\n \n     // cache\n     private Table[] _tables = null;\n@@ -52,9 +54,14 @@ public Schema() {\n      *\n      * @param name the schema name, if any\n      * @param group the schema's owning group\n+     * @deprecated\n      */\n     public Schema(String name, SchemaGroup group) {\n-        setName(name);\n+        this(DBIdentifier.newSchema(name), group);\n+    }\n+\n+    public Schema(DBIdentifier name, SchemaGroup group) {\n+        setIdentifier(name);\n         _group = group;\n     }\n \n@@ -81,21 +88,31 @@ public SchemaGroup getSchemaGroup() {\n \n     /**\n      * Return the name of the schema, or null if none.\n+     * @deprecated\n      */\n     public String getName() {\n+        return getIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getIdentifier() {\n         return _name;\n     }\n \n     /**\n      * Set the name of the schema. This method can only be used for schemas\n      * not attached to a group.\n+     * @deprecated\n      */\n     public void setName(String name) {\n+        setIdentifier(DBIdentifier.trimToNull(DBIdentifier.newSchema(name)));\n+    }\n+\n+    public void setIdentifier(DBIdentifier name) {\n         if (getSchemaGroup() != null)\n             throw new IllegalStateException();\n-        _name = StringUtils.trimToNull(name);\n+        _name = DBIdentifier.trimToNull(name);\n     }\n-\n+    \n     /**\n      * Return the schema's tables.\n      */\n@@ -108,35 +125,56 @@ public void setName(String name) {\n \n     /**\n      * Return the table with the given name, or null if none.\n+     * @deprecated\n      */\n     public Table getTable(String name) {\n         if (name == null || _tableMap == null)\n             return null;\n-        return (Table) _tableMap.get(name.toUpperCase());\n+        return getTable(DBIdentifier.newIdentifier(name, DBIdentifierType.TABLE, true));\n+    }\n+\n+    public Table getTable(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name) || _tableMap == null)\n+            return null;\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        return (Table) _tableMap.get(sName);\n     }\n \n     /**\n      * Add a table to the schema.\n+     * @deprecated\n      */\n     public Table addTable(String name) {\n+        return addTable(DBIdentifier.newTable(name));\n+    }\n+    \n+    public Table addTable(DBIdentifier name) {\n         SchemaGroup group = getSchemaGroup();\n         Table tab;\n+        name = name.getUnqualifiedName();\n         if (group != null) {\n             group.addName(name, true);\n             tab = group.newTable(name, this);\n         } else\n             tab = new Table(name, this);\n         if (_tableMap == null)\n-            _tableMap = new TreeMap();\n-        _tableMap.put(name.toUpperCase(), tab);\n+            _tableMap = new TreeMap<DBIdentifier, Table>();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _tableMap.put(sName, tab);\n         _tables = null;\n         return tab;\n     }\n+    \n \n     /**\n      * Add a table with a shortened (i.e., validated) name to the schema\n+     * @deprecated\n      */\n     public Table addTable(String name, String validName) {\n+        return addTable(DBIdentifier.newTable(name), DBIdentifier.newTable(validName));\n+    }\n+\n+    public Table addTable(DBIdentifier name, DBIdentifier validName) {\n         SchemaGroup group = getSchemaGroup();\n         Table tab;\n         if (group != null) {\n@@ -145,8 +183,9 @@ public Table addTable(String name, String validName) {\n         } else\n             tab = new Table(validName, this);\n         if (_tableMap == null)\n-            _tableMap = new TreeMap();\n-        _tableMap.put(name.toUpperCase(), tab);\n+            _tableMap = new TreeMap<DBIdentifier, Table>();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _tableMap.put(sName, tab);\n         _tables = null;\n         return tab;\n     }\n@@ -160,15 +199,16 @@ public boolean removeTable(Table tab) {\n         if (tab == null || _tableMap == null)\n             return false;\n \n-        Table cur = (Table) _tableMap.get(tab.getName().toUpperCase());\n+        DBIdentifier sName = DBIdentifier.toUpper(tab.getIdentifier());\n+        Table cur = (Table) _tableMap.get(sName);\n         if (!cur.equals(tab))\n             return false;\n \n-        _tableMap.remove(tab.getName().toUpperCase());\n+        _tableMap.remove(sName);\n         _tables = null;\n         SchemaGroup group = getSchemaGroup();\n         if (group != null)\n-            group.removeName(tab.getName());\n+            group.removeName(tab.getIdentifier());\n         tab.remove();\n         return true;\n     }\n@@ -181,7 +221,7 @@ public Table importTable(Table table) {\n         if (table == null)\n             return null;\n \n-        Table copy = addTable(table.getName());\n+        Table copy = addTable(table.getIdentifier());\n         Column[] cols = table.getColumns();\n         for (int i = 0; i < cols.length; i++)\n             copy.importColumn(cols[i]);\n@@ -202,17 +242,32 @@ public Table importTable(Table table) {\n \n     /**\n      * Return the sequence with the given name, or null if none.\n+     * @deprecated\n      */\n     public Sequence getSequence(String name) {\n         if (name == null || _seqMap == null)\n             return null;\n-        return (Sequence) _seqMap.get(name.toUpperCase());\n+        return getSequence(DBIdentifier.newIdentifier(name, DBIdentifierType.SEQUENCE, true));\n+    }\n+\n+    public Sequence getSequence(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name) || _seqMap == null)\n+            return null;\n+        \n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        Sequence seq = (Sequence) _seqMap.get(sName);\n+        return seq;\n     }\n \n     /**\n      * Add a sequence to the schema.\n+     * @deprecated\n      */\n     public Sequence addSequence(String name) {\n+        return addSequence(DBIdentifier.newIdentifier(name, DBIdentifierType.SEQUENCE, true));\n+    }\n+\n+    public Sequence addSequence(DBIdentifier name) {\n         SchemaGroup group = getSchemaGroup();\n         Sequence seq;\n         if (group != null) {\n@@ -221,8 +276,10 @@ public Sequence addSequence(String name) {\n         } else\n             seq = new Sequence(name, this);\n         if (_seqMap == null)\n-            _seqMap = new TreeMap();\n-        _seqMap.put(name.toUpperCase(), seq);\n+            _seqMap = new TreeMap<DBIdentifier, Sequence>();\n+        \n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _seqMap.put(sName, seq);\n         _seqs = null;\n         return seq;\n     }\n@@ -236,15 +293,16 @@ public boolean removeSequence(Sequence seq) {\n         if (seq == null || _seqMap == null)\n             return false;\n \n-        Sequence cur = (Sequence) _seqMap.get(seq.getName().toUpperCase());\n+        DBIdentifier sName = DBIdentifier.toUpper(seq.getIdentifier());\n+        Sequence cur = (Sequence) _seqMap.get(sName);\n         if (!cur.equals(seq))\n             return false;\n \n-        _seqMap.remove(seq.getName().toUpperCase());\n+        _seqMap.remove(sName);\n         _seqs = null;\n         SchemaGroup group = getSchemaGroup();\n         if (group != null)\n-            group.removeName(seq.getName());\n+            group.removeName(seq.getIdentifier());\n         seq.remove();\n         return true;\n     }\n@@ -256,26 +314,27 @@ public Sequence importSequence(Sequence seq) {\n         if (seq == null)\n             return null;\n \n-        Sequence copy = addSequence(seq.getName());\n+        Sequence copy = addSequence(seq.getIdentifier());\n         copy.setInitialValue(seq.getInitialValue());\n         copy.setIncrement(seq.getIncrement());\n         copy.setAllocate(seq.getAllocate());\n         return copy;\n     }\n \n-    public int compareTo(Object other) {\n-        String name = getName();\n-        String otherName = ((Schema) other).getName();\n-        if (name == null && otherName == null)\n+    public int compareTo(Schema other) {\n+        DBIdentifier name = getIdentifier();\n+        DBIdentifier otherName = ((Schema) other).getIdentifier();\n+        if (DBIdentifier.isNull(name) && DBIdentifier.isNull(otherName)) {\n             return 0;\n-        if (name == null)\n+        }\n+        if (DBIdentifier.isNull(name))\n             return 1;\n-        if (otherName == null)\n+        if (DBIdentifier.isNull(otherName))\n             return -1;\n         return name.compareTo(otherName);\n     }\n \n     public String toString() {\n-        return getName();\n+        return getIdentifier().getName();\n     }\n }"},{"sha":"723f490754369a465c1a1bfcd5557293896b04ed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":278,"deletions":157,"changes":435,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -34,8 +34,11 @@\n import java.util.Set;\n import javax.sql.DataSource;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -65,7 +68,7 @@\n     private boolean _openjpaTables = true;\n     private SchemaGroup _group = null;\n \n-    private List _listeners = null;\n+    private List<Listener> _listeners = null;\n     private int _schemaObjects = 0;\n \n     /**\n@@ -85,7 +88,20 @@ public SchemaGenerator(JDBCConfiguration conf) {\n         _dict = conf.getDBDictionaryInstance();\n \n         // create a table of allowed schema and tables to reflect on\n-        _allowed = parseSchemasList(conf.getSchemasList());\n+        String[] schemaArray = conf.getSchemasList();\n+        DBIdentifier[] names = new DBIdentifier[schemaArray == null ? 0 : schemaArray.length];\n+        for (int i = 0; i < names.length; i++) {\n+            String[] splitName = Normalizer.splitName(schemaArray[i]);\n+            if (splitName == null || splitName.length == 0) {\n+                continue;\n+            }\n+            if (splitName.length == 1) {\n+                names[i] = DBIdentifier.newSchema(schemaArray[i]);\n+            } else {\n+                names[i] = QualifiedDBIdentifier.newTable(schemaArray[i]);\n+            }\n+        }\n+        _allowed = parseSchemasList(names);\n     }\n \n     /**\n@@ -95,50 +111,42 @@ public SchemaGenerator(JDBCConfiguration conf) {\n      * null if no args are given. If no tables are given for a particular\n      * schema, maps the schema name to null.\n      */\n-    private static Object[][] parseSchemasList(String[] args) {\n+    private static Object[][] parseSchemasList(DBIdentifier[] args) {\n         if (args == null || args.length == 0)\n             return null;\n \n-        Map schemas = new HashMap();\n-        String schema, table;\n-        int dotIdx;\n-        Collection tables;\n+        Map<DBIdentifier, Collection<DBIdentifier>> schemas = new HashMap<DBIdentifier, Collection<DBIdentifier>>();\n+        DBIdentifier schema = DBIdentifier.NULL, table = DBIdentifier.NULL;\n+        Collection<DBIdentifier> tables = null;\n         for (int i = 0; i < args.length; i++) {\n-            dotIdx = args[i].indexOf('.');\n-            if (dotIdx == -1) {\n-                schema = args[i];\n-                table = null;\n-            } else if (dotIdx == 0) {\n-                schema = null;\n-                table = args[i].substring(1);\n-            } else {\n-                schema = args[i].substring(0, dotIdx);\n-                table = args[i].substring(dotIdx + 1);\n-            }\n+            QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(args[i]);\n+            schema = path.getSchemaName();\n+            table = path.getIdentifier();\n \n             // if just a schema name, map schema to null\n-            if (table == null && !schemas.containsKey(schema))\n+            if (DBIdentifier.isNull(table) && !schemas.containsKey(schema))\n                 schemas.put(schema, null);\n-            else if (table != null) {\n-                tables = (Collection) schemas.get(schema);\n+            else if (!DBIdentifier.isNull(table)) {\n+                tables = schemas.get(schema);\n                 if (tables == null) {\n-                    tables = new LinkedList();\n+                    tables = new LinkedList<DBIdentifier>();\n                     schemas.put(schema, tables);\n                 }\n                 tables.add(table);\n             }\n         }\n \n         Object[][] parsed = new Object[schemas.size()][2];\n-        Map.Entry entry;\n+        Map.Entry<DBIdentifier, Collection<DBIdentifier>> entry;\n         int idx = 0;\n-        for (Iterator itr = schemas.entrySet().iterator(); itr.hasNext();) {\n-            entry = (Map.Entry) itr.next();\n-            tables = (Collection) entry.getValue();\n+        for (Iterator<Map.Entry<DBIdentifier, Collection<DBIdentifier>>> itr = schemas.entrySet().iterator(); \n+            itr.hasNext();) {\n+            entry = itr.next();\n+            tables = entry.getValue();\n \n             parsed[idx][0] = entry.getKey();\n             if (tables != null)\n-                parsed[idx][1] = tables.toArray(new String[tables.size()]);\n+                parsed[idx][1] = tables.toArray(new DBIdentifier[tables.size()]);\n             idx++;\n         }\n         return parsed;\n@@ -240,16 +248,24 @@ public void setSchemaGroup(SchemaGroup group) {\n     public void generateSchemas()\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-schemas\"));\n-        generateSchemas(null);\n+        generateSchemas((DBIdentifier[])null);\n     }\n \n+    /**\n+     * @deprecated\n+     */\n+    public void generateSchemas(String[] schemasAndTables)\n+        throws SQLException {        \n+        generateSchemas(DBIdentifier.toArray(schemasAndTables, DBIdentifierType.TABLE));\n+    }\n+    \n     /**\n      * Generate the schemas and/or tables named in the given strings.\n      * This method calls {@link #generateIndexes},\n      * {@link #generatePrimaryKeys}, and {@link #generateForeignKeys}\n      * automatically.\n      */\n-    public void generateSchemas(String[] schemasAndTables)\n+    public void generateSchemas(DBIdentifier[] schemasAndTables)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-schemas\"));\n \n@@ -260,39 +276,39 @@ public void generateSchemas(String[] schemasAndTables)\n             schemaMap = parseSchemasList(schemasAndTables);\n \n         if (schemaMap == null) {\n-            generateSchema(null, null);\n+            generateSchema(DBIdentifier.NULL, (DBIdentifier[])null);\n \n             // estimate the number of schema objects we will need to visit\n-            // in order to estimate progresss total for any listeners\n+            // in order to estimate progress total for any listeners\n             int numTables = getTables(null).size();\n             _schemaObjects += numTables\n                 + (_pks ? numTables : 0)\n                 + (_indexes ? numTables : 0)\n                 + (_fks ? numTables : 0);\n \n             if (_pks)\n-                generatePrimaryKeys(null, null);\n+                generatePrimaryKeys(DBIdentifier.NULL, null);\n             if (_indexes)\n-                generateIndexes(null, null);\n+                generateIndexes(DBIdentifier.NULL, null);\n             if (_fks)\n-                generateForeignKeys(null, null);\n+                generateForeignKeys(DBIdentifier.NULL, null);\n             return;\n         }\n \n         // generate all schemas and tables\n         for (int i = 0; i < schemaMap.length; i++)\n-            generateSchema((String) schemaMap[i][0],\n-                (String[]) schemaMap[i][1]);\n+            generateSchema((DBIdentifier) schemaMap[i][0],\n+                (DBIdentifier[]) schemaMap[i][1]);\n \n         // generate pks, indexes, fks\n-        String schemaName;\n-        String[] tableNames;\n+        DBIdentifier schemaName = DBIdentifier.NULL;\n+        DBIdentifier[] tableNames;\n         for (int i = 0; i < schemaMap.length; i++) {\n-            schemaName = (String) schemaMap[i][0];\n-            tableNames = (String[]) schemaMap[i][1];\n+            schemaName = (DBIdentifier) schemaMap[i][0];\n+            tableNames = (DBIdentifier[]) schemaMap[i][1];\n \n             // estimate the number of schema objects we will need to visit\n-            // in order to estimate progresss total for any listeners\n+            // in order to estimate progress total for any listeners\n             int numTables = (tableNames != null) ? tableNames.length\n                 : getTables(schemaName).size();\n             _schemaObjects += numTables\n@@ -309,6 +325,17 @@ public void generateSchemas(String[] schemasAndTables)\n         }\n     }\n \n+    /**\n+     * @param name\n+     * @param tableNames\n+     * @deprecated\n+     */\n+    public void generateSchema(String name, String[] tableNames)\n+        throws SQLException {\n+        generateSchema(DBIdentifier.newSchema(name),\n+            DBIdentifier.toArray(tableNames, DBIdentifierType.TABLE));\n+    }\n+\n     /**\n      * Add a fully-constructed {@link Schema} matching the given database\n      * schema to the current group. No foreign keys are generated because\n@@ -320,7 +347,7 @@ public void generateSchemas(String[] schemasAndTables)\n      * @param tableNames a list of tables to generate in the schema, or null\n      * to generate all tables\n      */\n-    public void generateSchema(String name, String[] tableNames)\n+    public void generateSchema(DBIdentifier name, DBIdentifier[] tableNames)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-schema\", name));\n \n@@ -329,13 +356,13 @@ public void generateSchema(String name, String[] tableNames)\n         DatabaseMetaData meta = conn.getMetaData();\n         try {\n             if (tableNames == null)\n-                generateTables(name, null, conn, meta);\n+                generateTables(name, DBIdentifier.NULL, conn, meta);\n             else\n                 for (int i = 0; i < tableNames.length; i++)\n                     generateTables(name, tableNames[i], conn, meta);\n \n             if (_seqs)\n-                generateSequences(name, null, conn, meta);\n+                generateSequences(name, DBIdentifier.NULL, conn, meta);\n         } finally {\n             // some databases require a commit after metadata to release locks\n             try {\n@@ -355,8 +382,23 @@ public void generateSchema(String name, String[] tableNames)\n      * only be called after all schemas are generated. The schema name and\n      * tables array can be null to indicate that indexes should be generated\n      * for all schemas and/or tables.\n+     * @deprecated\n      */\n     public void generatePrimaryKeys(String schemaName, String[] tableNames)\n+        throws SQLException {\n+        generatePrimaryKeys(DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.toArray(tableNames, DBIdentifierType.TABLE));\n+    }\n+\n+    \n+    /**\n+     * Generate primary key information for the given schema. This method\n+     * must be called in addition to {@link #generateSchema}. It should\n+     * only be called after all schemas are generated. The schema name and\n+     * tables array can be null to indicate that indexes should be generated\n+     * for all schemas and/or tables.\n+     */\n+    public void generatePrimaryKeys(DBIdentifier schemaName, DBIdentifier[] tableNames)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-all-primaries\", schemaName));\n \n@@ -381,14 +423,28 @@ public void generatePrimaryKeys(String schemaName, String[] tableNames)\n         }\n     }\n \n+    /**\n+     * Generate index information for the given schema. This method\n+     * must be called in addition to {@link #generateSchema}. It should\n+     * only be called after all schemas are generated. The schema name and\n+     * tables array can be null to indicate that indexes should be generated\n+     * for all schemas and/or tables.\n+     * @deprecated\n+     */\n+    public void generateIndexes(String schemaName, String[] tableNames) \n+        throws SQLException {\n+        generateIndexes(DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.toArray(tableNames, DBIdentifierType.TABLE));\n+    }\n+\n     /**\n      * Generate index information for the given schema. This method\n      * must be called in addition to {@link #generateSchema}. It should\n      * only be called after all schemas are generated. The schema name and\n      * tables array can be null to indicate that indexes should be generated\n      * for all schemas and/or tables.\n      */\n-    public void generateIndexes(String schemaName, String[] tableNames)\n+    public void generateIndexes(DBIdentifier schemaName, DBIdentifier[] tableNames)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-all-indexes\", schemaName));\n \n@@ -419,8 +475,23 @@ public void generateIndexes(String schemaName, String[] tableNames)\n      * only be called after all schemas are generated. The schema name and\n      * tables array can be null to indicate that indexes should be generated\n      * for all schemas and/or tables.\n+     * @deprecated\n      */\n     public void generateForeignKeys(String schemaName, String[] tableNames)\n+        throws SQLException {\n+        generateForeignKeys(DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.toArray(tableNames, DBIdentifierType.TABLE));\n+    }\n+\n+    \n+    /**\n+     * Generate foreign key information for the given schema. This method\n+     * must be called in addition to {@link #generateSchema}. It should\n+     * only be called after all schemas are generated. The schema name and\n+     * tables array can be null to indicate that indexes should be generated\n+     * for all schemas and/or tables.\n+     */\n+    public void generateForeignKeys(DBIdentifier schemaName, DBIdentifier[] tableNames)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-all-foreigns\", schemaName));\n \n@@ -446,69 +517,84 @@ public void generateForeignKeys(String schemaName, String[] tableNames)\n     }\n \n     /**\n-     * Adds all tables matching the given name pattern to the schema.\n+     * @deprecated\n      */\n     public void generateTables(String schemaName, String tableName,\n+        Connection conn, DatabaseMetaData meta) \n+        throws SQLException {\n+        generateTables(DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName), conn, meta);\n+    }\n+\n+    /**\n+     * Adds all tables matching the given name pattern to the schema.\n+     */\n+    public void generateTables(DBIdentifier schemaName, DBIdentifier tableName,\n         Connection conn, DatabaseMetaData meta)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-columns\", schemaName,\n             tableName));\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"gen-tables\", schemaName, tableName));\n \n-        Column[] cols = _dict.getColumns(meta, conn.getCatalog(), schemaName,\n+        Column[] cols = _dict.getColumns(meta, \n+            DBIdentifier.newCatalog(conn.getCatalog()), schemaName,\n             tableName, null, conn);\n \n         // when we want to get all the columns for all tables, we need to build\n         // a list of tables to verify because some databases (e.g., Postgres)\n         // will include indexes in the list of columns, and there is no way to\n         // distinguish the indexes from proper columns\n-        Set tableNames = null;\n-        if (tableName == null || \"%\".equals(tableName)) {\n-            Table[] tables = _dict.getTables(meta, conn.getCatalog(),\n+        Set<DBIdentifier> tableNames = null;\n+        if (DBIdentifier.isNull(tableName) || \"%\".equals(tableName.getName())) {\n+            Table[] tables = _dict.getTables(meta, DBIdentifier.newCatalog(conn.getCatalog()),\n                 schemaName, tableName, conn);\n-            tableNames = new HashSet();\n+            tableNames = new HashSet<DBIdentifier>();\n             for (int i = 0; tables != null && i < tables.length; i++) {\n-                if (cols == null)\n-                    tableNames.add(tables[i].getName());\n-                else\n-                    tableNames.add(tables[i].getName().toUpperCase());\n+                if (cols == null) {\n+                    tableNames.add(tables[i].getIdentifier());\n+                }\n+                else {\n+                    DBIdentifier sName = DBIdentifier.toUpper(tables[i].getIdentifier());\n+                    tableNames.add(sName);\n+                }\n             }\n         }\n \n         // if database can't handle null table name, recurse on each known name\n-        if (cols == null && tableName == null) {\n-            for (Iterator itr = tableNames.iterator(); itr.hasNext();)\n-                generateTables(schemaName, (String) itr.next(), conn, meta);\n+        if (cols == null && DBIdentifier.isNull(tableName)) {\n+            for (Iterator<DBIdentifier> itr = tableNames.iterator(); itr.hasNext();)\n+                generateTables(schemaName, itr.next(), conn, meta);\n             return;\n         }\n \n         SchemaGroup group = getSchemaGroup();\n         Schema schema;\n         Table table;\n-        String tableSchema;\n+        DBIdentifier tableSchema = DBIdentifier.NULL;\n         for (int i = 0; cols != null && i < cols.length; i++) {\n-            if (tableName == null || tableName.equals(\"%\")) {\n-                tableName = cols[i].getTableName();\n+            if (DBIdentifier.isNull(tableName) || tableName.equals(\"%\")) {\n+                tableName = cols[i].getTableIdentifier();\n             }\n-            if (schemaName == null) {\n-                tableSchema = StringUtils.trimToNull(cols[i].getSchemaName());\n+            if (DBIdentifier.isNull(schemaName)) {\n+                tableSchema = DBIdentifier.trimToNull(cols[i].getSchemaIdentifier());\n             }\n             else {\n                 tableSchema = schemaName;\n             }\n             \n             // ignore special tables\n             if (!_openjpaTables &&\n-                (tableName.toUpperCase().startsWith(\"OPENJPA_\")\n-                    || tableName.toUpperCase().startsWith(\"JDO_\"))) // legacy\n+                (tableName.getName().toUpperCase().startsWith(\"OPENJPA_\")\n+                    || tableName.getName().toUpperCase().startsWith(\"JDO_\"))) // legacy\n                 continue;\n-            if (_dict.isSystemTable(tableName, tableSchema, schemaName != null))\n+            if (_dict.isSystemTable(tableName, tableSchema, !DBIdentifier.isNull(schemaName)))\n                 continue;\n \n             // ignore tables not in list, or not allowed by schemas property\n+            \n             if (tableNames != null\n-                && !tableNames.contains(tableName.toUpperCase()))\n+                && !tableNames.contains(DBIdentifier.toUpper(tableName)))\n                 continue;\n             if (!isAllowedTable(tableSchema, tableName))\n                 continue;\n@@ -525,9 +611,9 @@ public void generateTables(String schemaName, String tableName,\n             }\n \n             if (_log.isTraceEnabled())\n-                _log.trace(_loc.get(\"gen-column\", cols[i].getName(), table));\n+                _log.trace(_loc.get(\"gen-column\", cols[i].getIdentifier(), table));\n \n-            if (table.getColumn(cols[i].getName(), _dict) == null) {\n+            if (table.getColumn(cols[i].getIdentifier()) == null) {\n                 table.importColumn(cols[i]);\n             }\n         }\n@@ -536,47 +622,55 @@ public void generateTables(String schemaName, String tableName,\n     /**\n      * Return whether the given table is allowed by the user's schema list.\n      */\n-    private boolean isAllowedTable(String schema, String table) {\n+    private boolean isAllowedTable(DBIdentifier schema, DBIdentifier table) {\n         if (_allowed == null)\n             return true;\n \n         // do case-insensitive comparison on allowed table and schema names\n-        String[] tables;\n-        String[] anySchemaTables = null;\n+        DBIdentifier[] tables;\n+        DBIdentifier[] anySchemaTables = null;\n         for (int i = 0; i < _allowed.length; i++) {\n             if (_allowed[i][0] == null) {\n-                anySchemaTables = (String[]) _allowed[i][1];\n+                anySchemaTables = (DBIdentifier[]) _allowed[i][1];\n                 if (schema == null)\n                     break;\n                 continue;\n             }\n-            if (!StringUtils.equalsIgnoreCase(schema, (String) _allowed[i][0]))\n+            if (!schema.equals((DBIdentifier) _allowed[i][0]))\n                 continue;\n \n             if (table == null)\n                 return true;\n-            tables = (String[]) _allowed[i][1];\n+            tables = (DBIdentifier[]) _allowed[i][1];\n             if (tables == null)\n                 return true;\n             for (int j = 0; j < tables.length; j++)\n-                if (StringUtils.equalsIgnoreCase(table, tables[j]))\n+                if (table.equals(tables[j]))\n                     return true;\n         }\n \n         if (anySchemaTables != null) {\n             if (table == null)\n                 return true;\n             for (int i = 0; i < anySchemaTables.length; i++)\n-                if (StringUtils.equalsIgnoreCase(table, anySchemaTables[i]))\n+                if (table.equals(anySchemaTables[i]))\n                     return true;\n         }\n         return false;\n     }\n \n     /**\n      * Generates table primary keys.\n+     * @deprecated\n      */\n     public void generatePrimaryKeys(String schemaName, String tableName,\n+        Connection conn, DatabaseMetaData meta)\n+        throws SQLException {\n+        generatePrimaryKeys(DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName),\n+            conn, meta);\n+    }\n+\n+    public void generatePrimaryKeys(DBIdentifier schemaName, DBIdentifier tableName,\n         Connection conn, DatabaseMetaData meta)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-primary\",\n@@ -586,53 +680,63 @@ public void generatePrimaryKeys(String schemaName, String tableName,\n \n         // if looking for a non-existant table, just return\n         SchemaGroup group = getSchemaGroup();\n-        if (tableName != null && group.findTable(tableName) == null)\n+        if (tableName != null && !tableName.isNull() && \n+                group.findTable(QualifiedDBIdentifier.getPath(tableName)) == null)\n             return;\n \n         // if the database can't use a table name wildcard, recurse on each\n         // concrete table in the requested schema(s)\n-        PrimaryKey[] pks = _dict.getPrimaryKeys(meta, conn.getCatalog(),\n+        PrimaryKey[] pks = _dict.getPrimaryKeys(meta, \n+            DBIdentifier.newCatalog(conn.getCatalog()),\n             schemaName, tableName, conn);\n         Table table;\n         if (pks == null && tableName == null) {\n-            Collection tables = getTables(schemaName);\n-            for (Iterator itr = tables.iterator(); itr.hasNext();) {\n+            Collection<Table> tables = getTables(schemaName);\n+            for (Iterator<Table> itr = tables.iterator(); itr.hasNext();) {\n                 table = (Table) itr.next();\n-                generatePrimaryKeys(table.getSchemaName(),\n-                    table.getName(), conn, meta);\n+                generatePrimaryKeys(table.getSchemaIdentifier(),\n+                    table.getIdentifier(), conn, meta);\n             }\n             return;\n         }\n \n         Schema schema;\n         PrimaryKey pk;\n-        String name;\n-        String colName;\n+        DBIdentifier name = DBIdentifier.NULL;\n+        DBIdentifier colName = DBIdentifier.NULL;\n         for (int i = 0; pks != null && i < pks.length; i++) {\n-            schemaName = StringUtils.trimToNull(pks[i].getSchemaName());\n+            schemaName = DBIdentifier.trimToNull(schemaName);\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 continue;\n-            table = schema.getTable(pks[i].getTableName());\n+            table = schema.getTable(pks[i].getTableIdentifier());\n             if (table == null)\n                 continue;\n \n-            colName = pks[i].getColumnName();\n-            name = pks[i].getName();\n+            colName = pks[i].getColumnIdentifier();\n+            name = pks[i].getIdentifier();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"gen-pk\", name, table, colName));\n \n             pk = table.getPrimaryKey();\n             if (pk == null)\n                 pk = table.addPrimaryKey(name);\n-            pk.addColumn(table.getColumn(colName, _dict));\n+            pk.addColumn(table.getColumn(colName));\n         }\n     }\n \n     /**\n      * Generates table indexes.\n+     * @deprecated\n      */\n     public void generateIndexes(String schemaName, String tableName,\n+        Connection conn, DatabaseMetaData meta)\n+        throws SQLException {\n+        generateIndexes(DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName),\n+            conn, meta);\n+    }\n+\n+    public void generateIndexes(DBIdentifier schemaName, DBIdentifier tableName,\n         Connection conn, DatabaseMetaData meta)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-indexes\",\n@@ -642,52 +746,52 @@ public void generateIndexes(String schemaName, String tableName,\n \n         // if looking for a non-existant table, just return\n         SchemaGroup group = getSchemaGroup();\n-        if (tableName != null && group.findTable(tableName) == null)\n+        if (tableName != null && group.findTable(QualifiedDBIdentifier.getPath(tableName)) == null)\n             return;\n \n         // if the database can't use a table name wildcard, recurse on each\n         // concrete table in the requested schema(s)\n-        Index[] idxs = _dict.getIndexInfo(meta, conn.getCatalog(),\n+        Index[] idxs = _dict.getIndexInfo(meta, DBIdentifier.newCatalog(conn.getCatalog()),\n             schemaName, tableName, false, true, conn);\n         Table table;\n         if (idxs == null && tableName == null) {\n-            Collection tables = getTables(schemaName);\n-            for (Iterator itr = tables.iterator(); itr.hasNext();) {\n-                table = (Table) itr.next();\n-                generateIndexes(table.getSchemaName(),\n-                    table.getName(), conn, meta);\n+            Collection<Table> tables = getTables(schemaName);\n+            for (Iterator<Table> itr = tables.iterator(); itr.hasNext();) {\n+                table = itr.next();\n+                generateIndexes(table.getSchemaIdentifier(),\n+                    table.getIdentifier(), conn, meta);\n             }\n             return;\n         }\n \n         Schema schema;\n         Index idx;\n-        String name;\n-        String colName;\n-        String pkName;\n+        DBIdentifier name = DBIdentifier.NULL;\n+        DBIdentifier colName = DBIdentifier.NULL;\n+        DBIdentifier pkName = DBIdentifier.NULL;\n         for (int i = 0; idxs != null && i < idxs.length; i++) {\n-            schemaName = StringUtils.trimToNull(idxs[i].getSchemaName());\n+            schemaName = DBIdentifier.trimToNull(idxs[i].getSchemaIdentifier());\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 continue;\n-            table = schema.getTable(idxs[i].getTableName());\n+            table = schema.getTable(idxs[i].getTableIdentifier());\n             if (table == null)\n                 continue;\n \n             if (table.getPrimaryKey() != null)\n-                pkName = table.getPrimaryKey().getName();\n+                pkName = table.getPrimaryKey().getIdentifier();\n             else\n                 pkName = null;\n \n             // statistics don't have names; skip them\n-            name = idxs[i].getName();\n-            if (StringUtils.isEmpty(name)\n-                || (pkName != null && name.equalsIgnoreCase(pkName))\n+            name = idxs[i].getIdentifier();\n+            if (DBIdentifier.isEmpty(name)\n+                || (pkName != null && name.equals(pkName))\n                 || _dict.isSystemIndex(name, table))\n                 continue;\n \n-            colName = idxs[i].getColumnName();\n-            if (table.getColumn(colName, _dict) == null)\n+            colName = idxs[i].getColumnIdentifier();\n+            if (table.getColumn(colName) == null)\n                 continue;\n \n             if (_log.isTraceEnabled())\n@@ -699,14 +803,21 @@ public void generateIndexes(String schemaName, String tableName,\n                 idx = table.addIndex(name);\n                 idx.setUnique(idxs[i].isUnique());\n             }\n-            idx.addColumn(table.getColumn(colName, _dict));\n+            idx.addColumn(table.getColumn(colName));\n         }\n     }\n \n     /**\n      * Generates table foreign keys.\n      */\n     public void generateForeignKeys(String schemaName, String tableName,\n+        Connection conn, DatabaseMetaData meta)\n+        throws SQLException {\n+        generateForeignKeys(DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName),\n+            conn, meta);\n+    }\n+\n+    public void generateForeignKeys(DBIdentifier schemaName, DBIdentifier tableName,\n         Connection conn, DatabaseMetaData meta)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-foreign\",\n@@ -716,66 +827,64 @@ public void generateForeignKeys(String schemaName, String tableName,\n \n         // if looking for a non-existant table, just return\n         SchemaGroup group = getSchemaGroup();\n-        if (tableName != null && group.findTable(tableName) == null)\n+        if (!DBIdentifier.isNull(tableName) && group.findTable(QualifiedDBIdentifier.getPath(tableName)) == null)\n             return;\n \n         // if the database can't use a table name wildcard, recurse on each\n         // concrete table in the requested schema(s)\n-        ForeignKey[] fks = _dict.getImportedKeys(meta, conn.getCatalog(),\n+        ForeignKey[] fks = _dict.getImportedKeys(meta, DBIdentifier.newCatalog(conn.getCatalog()),\n             schemaName, tableName, conn);\n         Table table;\n-        if (fks == null && tableName == null) {\n-            Collection tables = getTables(schemaName);\n-            for (Iterator itr = tables.iterator(); itr.hasNext();) {\n-                table = (Table) itr.next();\n-                generateForeignKeys(table.getSchemaName(),\n-                    table.getName(), conn, meta);\n+        if (fks == null && DBIdentifier.isNull(tableName)) {\n+            Collection<Table> tables = getTables(schemaName);\n+            for (Iterator<Table> itr = tables.iterator(); itr.hasNext();) {\n+                table = itr.next();\n+                generateForeignKeys(table.getSchemaIdentifier(),\n+                    table.getIdentifier(), conn, meta);\n             }\n             return;\n         }\n \n         Schema schema;\n         Table pkTable;\n         ForeignKey fk;\n-        String name;\n-        String pkSchemaName;\n-        String pkTableName;\n-        String pkColName;\n-        String fkColName;\n+        DBIdentifier name = DBIdentifier.NULL;\n+        DBIdentifier pkSchemaName = DBIdentifier.NULL;\n+        DBIdentifier pkTableName = DBIdentifier.NULL;\n+        DBIdentifier pkColName = DBIdentifier.NULL;\n+        DBIdentifier fkColName = DBIdentifier.NULL;\n         int seq;\n         boolean seqWas0 = false; // some drivers incorrectly start at 0\n-        Collection invalids = null;\n+        Collection<ForeignKey> invalids = null;\n         for (int i = 0; fks != null && i < fks.length; i++) {\n-            schemaName = StringUtils.trimToNull(fks[i].getSchemaName());\n+            schemaName = DBIdentifier.trimToNull(fks[i].getSchemaIdentifier());\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 continue;\n-            table = schema.getTable(fks[i].getTableName());\n+            table = schema.getTable(fks[i].getTableIdentifier());\n             if (table == null)\n                 continue;\n \n-            name = fks[i].getName();\n-            fkColName = fks[i].getColumnName();\n-            pkColName = fks[i].getPrimaryKeyColumnName();\n+            name = fks[i].getIdentifier();\n+            fkColName = fks[i].getColumnIdentifier();\n+            pkColName = fks[i].getPrimaryKeyColumnIdentifier();\n             seq = fks[i].getKeySequence();\n             if (seq == 0)\n                 seqWas0 = true;\n             if (seqWas0)\n                 seq++;\n \n             // find pk table\n-            pkSchemaName = fks[i].getPrimaryKeySchemaName();\n+            pkSchemaName = fks[i].getPrimaryKeySchemaIdentifier();\n             if(_dict.getTrimSchemaName()) {\n-                pkSchemaName= StringUtils.trimToNull(pkSchemaName);\n+                pkSchemaName= DBIdentifier.trimToNull(pkSchemaName);\n             }\n-            pkTableName = fks[i].getPrimaryKeyTableName();\n+            pkTableName = fks[i].getPrimaryKeyTableIdentifier();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"gen-fk\", new Object[]{ name, table,\n                     fkColName, pkTableName, pkColName, seq + \"\" }));\n \n-            if (!StringUtils.isEmpty(pkSchemaName))\n-                pkTableName = pkSchemaName + \".\" + pkTableName;\n-            pkTable = group.findTable(pkTableName);\n+            pkTable = group.findTable(QualifiedDBIdentifier.newPath(pkSchemaName, pkTableName));\n             if (pkTable == null)\n                 throw new SQLException(_loc.get(\"gen-nofktable\",\n                     table, pkTableName).getMessage());\n@@ -799,36 +908,44 @@ public void generateForeignKeys(String schemaName, String tableName,\n \n             if (invalids == null || !invalids.contains(fk)) {\n                 try {\n-                    Column fkCol = table.getColumn(fkColName, _dict);\n+                    Column fkCol = table.getColumn(fkColName);\n                     if (fkCol == null) {\n                         throw new IllegalArgumentException(_loc.get(\n-                            \"no-column\", fkColName, table.getName())\n+                            \"no-column\", fkColName, table.getIdentifier())\n                             .getMessage());\n                     }\n-                    fk.join(fkCol, pkTable.getColumn(pkColName, _dict));\n+                    fk.join(fkCol, pkTable.getColumn(pkColName));\n                 } catch (IllegalArgumentException iae) {\n                     if (_log.isWarnEnabled())\n                         _log.warn(_loc.get(\"bad-join\", iae.toString()));\n                     if (invalids == null)\n-                        invalids = new HashSet();\n+                        invalids = new HashSet<ForeignKey>();\n                     invalids.add(fk);\n                 }\n             }\n         }\n \n         // remove invalid fks\n         if (invalids != null) {\n-            for (Iterator itr = invalids.iterator(); itr.hasNext();) {\n-                fk = (ForeignKey) itr.next();\n+            for (Iterator<ForeignKey> itr = invalids.iterator(); itr.hasNext();) {\n+                fk = itr.next();\n                 fk.getTable().removeForeignKey(fk);\n             }\n         }\n     }\n \n     /**\n      * Adds all sequences matching the given name pattern to the schema.\n+     * @deprecated\n      */\n     public void generateSequences(String schemaName, String sequenceName,\n+        Connection conn, DatabaseMetaData meta)\n+        throws SQLException {\n+        generateSequences(DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newSequence(sequenceName), conn, meta);\n+    }\n+    \n+    public void generateSequences(DBIdentifier schemaName, DBIdentifier sequenceName,\n         Connection conn, DatabaseMetaData meta)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-sequences\", schemaName));\n@@ -837,20 +954,21 @@ public void generateSequences(String schemaName, String sequenceName,\n \n         // since all the sequences are generated under the default schema\n         // therefore, we can use the null schemaname to search\n-        Sequence[] seqs = _dict.getSequences(meta, conn.getCatalog(),\n-            null, sequenceName, conn);\n+        Sequence[] seqs = _dict.getSequences(meta, DBIdentifier.newCatalog(conn.getCatalog()),\n+            DBIdentifier.NULL, sequenceName, conn);\n \n         SchemaGroup group = getSchemaGroup();\n         Schema schema;\n-        String sequenceSchema;\n+        DBIdentifier sequenceSchema = DBIdentifier.NULL;\n         for (int i = 0; seqs != null && i < seqs.length; i++) {\n-            sequenceName = seqs[i].getName();\n-            sequenceSchema = StringUtils.trimToNull(seqs[i].getSchemaName());\n+            sequenceName = seqs[i].getIdentifier();\n+            sequenceSchema = DBIdentifier.trimToNull(seqs[i].getSchemaIdentifier());\n \n             // ignore special tables\n+            String seqUpper = DBIdentifier.toUpper(sequenceName).getName();\n             if (!_openjpaTables &&\n-                (sequenceName.toUpperCase().startsWith(\"OPENJPA_\")\n-                    || sequenceName.toUpperCase().startsWith(\"JDO_\"))) // legacy\n+                (seqUpper.startsWith(\"OPENJPA_\")\n+                    || seqUpper.startsWith(\"JDO_\"))) // legacy\n                 continue;\n             if (_dict.isSystemSequence(sequenceName, sequenceSchema,\n                 schemaName != null))\n@@ -859,10 +977,12 @@ public void generateSequences(String schemaName, String sequenceName,\n                 continue;\n \n             schema = group.getSchema(sequenceSchema);\n-            if (schema == null)\n+            if (schema == null) {\n                 schema = group.addSchema(sequenceSchema);\n-            if (schema.getSequence(sequenceName) == null)\n+            }\n+            if (schema.getSequence(sequenceName) == null) {\n                 schema.addSequence(sequenceName);\n+            }\n         }\n     }\n \n@@ -878,8 +998,8 @@ private void fireGenerationEvent(Object schemaObject)\n             return;\n \n         Event e = new Event(schemaObject, _schemaObjects);\n-        for (Iterator i = _listeners.iterator(); i.hasNext();) {\n-            Listener l = (Listener) i.next();\n+        for (Iterator<Listener> i = _listeners.iterator(); i.hasNext();) {\n+            Listener l = i.next();\n             if (!l.schemaObjectGenerated(e))\n                 throw new SQLException(_loc.get(\"refresh-cancelled\")\n                     .getMessage());\n@@ -893,7 +1013,7 @@ private void fireGenerationEvent(Object schemaObject)\n      */\n     public void addListener(Listener l) {\n         if (_listeners == null)\n-            _listeners = new LinkedList();\n+            _listeners = new LinkedList<Listener>();\n         _listeners.add(l);\n     }\n \n@@ -911,17 +1031,17 @@ public boolean removeListener(Listener l) {\n      * Return all tables for the given schema name, or all tables in\n      * the schema group if null is given.\n      */\n-    private Collection getTables(String schemaName) {\n+    private Collection<Table> getTables(DBIdentifier schemaName) {\n         SchemaGroup group = getSchemaGroup();\n-        if (schemaName != null) {\n+        if (!DBIdentifier.isNull(schemaName)) {\n             Schema schema = group.getSchema(schemaName);\n             if (schema == null)\n-                return Collections.EMPTY_LIST;\n+                return Collections.emptyList();\n             return Arrays.asList(schema.getTables());\n         }\n \n         Schema[] schemas = group.getSchemas();\n-        Collection tables = new LinkedList();\n+        Collection<Table> tables = new LinkedList<Table>();\n         for (int i = 0; i < schemas.length; i++)\n             tables.addAll(Arrays.asList(schemas[i].getTables()));\n         return tables;\n@@ -938,6 +1058,7 @@ private Collection getTables(String schemaName) {\n     /**\n      * An event corresponding to the generation of a schema object.\n      */\n+    @SuppressWarnings(\"serial\")\n     public class Event\n         extends EventObject {\n "},{"sha":"e0f5b634fcb88d24890483f47c48108fe15b0b59","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","status":"modified","additions":165,"deletions":51,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,16 +23,20 @@\n import java.util.LinkedList;\n import java.util.Map;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n+\n /**\n  * Represents a grouping of schemas used in a database.\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class SchemaGroup\n     extends NameSet\n     implements Cloneable {\n \n-    private Map _schemaMap = null;\n+    private Map<DBIdentifier, Schema> _schemaMap = null;\n \n     // cache\n     private Schema[] _schemas = null;\n@@ -49,37 +53,52 @@\n \n     /**\n      * Return the schema with the given name, or null if none.\n+     * @deprecated\n      */\n     public Schema getSchema(String name) {\n         if (_schemaMap == null)\n             return null;\n-        if (name != null)\n-            name = name.toUpperCase();\n-        return (Schema) _schemaMap.get(name);\n+        return getSchema(DBIdentifier.toUpper(DBIdentifier.newSchema(name)));\n+    }\n+\n+    public Schema getSchema(DBIdentifier name) {\n+        if (_schemaMap == null)\n+            return null;\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        Schema schema = (Schema) _schemaMap.get(sName);\n+        return schema;\n     }\n \n     /**\n      * Add a schema to the group.\n      */\n     public Schema addSchema() {\n-        return addSchema(null);\n+        return addSchema(DBIdentifier.NULL);\n     }\n \n     /**\n      * Add a schema to the group.\n      */\n-    public Schema addSchema(String name) {\n+    public Schema addSchema(DBIdentifier name) {\n         addName(name, false);\n         Schema schema = newSchema(name);\n-        if (name != null)\n-            name = name.toUpperCase();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n         if (_schemaMap == null)\n-            _schemaMap = new HashMap();\n-        _schemaMap.put(name, schema);\n+            _schemaMap = new HashMap<DBIdentifier, Schema>();\n+        _schemaMap.put(sName, schema);\n         _schemas = null;\n         return schema;\n     }\n \n+    /**\n+     * @deprecated\n+     * @param name\n+     * @return\n+     */\n+    public Schema addSchema(String name) {\n+        return addSchema(DBIdentifier.newSchema(name));\n+    }\n+    \n     /**\n      * Remove the given schema from the group.\n      *\n@@ -89,13 +108,11 @@ public boolean removeSchema(Schema schema) {\n         if (schema == null)\n             return false;\n \n-        String name = schema.getName();\n-        if (name != null)\n-            name = name.toUpperCase();\n+        DBIdentifier name = DBIdentifier.toUpper(schema.getIdentifier());\n         Schema rem = (Schema) _schemaMap.get(name);\n         if (schema.equals(rem)) {\n             _schemaMap.remove(name);\n-            removeName(schema.getName());\n+            removeName(schema.getIdentifier());\n             _schemas = null;\n             schema.remove();\n             return true;\n@@ -110,7 +127,7 @@ public Schema importSchema(Schema schema) {\n         if (schema == null)\n             return null;\n \n-        Schema copy = addSchema(schema.getName());\n+        Schema copy = addSchema(schema.getIdentifier());\n         Sequence[] seqs = schema.getSequences();\n         for (int i = 0; i < seqs.length; i++)\n             copy.importSequence(seqs[i]);\n@@ -146,39 +163,50 @@ public boolean isKnownTable(Table table) {\n      * {@link #findTable} may exhibit dynamic behavior in some schema group\n      * implementations, this method only returns true if the table has been\n      * added to this group or is known to exist in the database.\n+     * @deprecated\n      */\n     public boolean isKnownTable(String name) {\n         return findTable(name) != null;\n     }\n \n+      public boolean isKnownTable(QualifiedDBIdentifier path) {\n+          return findTable(path) != null;\n+      }\n+    \n     /**\n      * Find the equivalent of the given table in this schema group. The\n      * given table that may have come from another schema group.\n      */\n     public Table findTable(Table table) {\n-        return findTable(table.getFullName());\n+        return findTable(table.getQualifiedPath());\n     }\n \n     /**\n      * Find the table with the given name in the group, using '.' as the\n      * catalog separator. Returns null if no table found.\n+     * @deprecated\n      */\n     public Table findTable(String name) {\n         if (name == null)\n             return null;\n \n-        int dotIdx = name.indexOf('.');\n-        if (dotIdx != -1) {\n-            String schemaName = name.substring(0, dotIdx);\n-            name = name.substring(dotIdx + 1);\n-            Schema schema = getSchema(schemaName);\n+        return findTable(QualifiedDBIdentifier.getPath(DBIdentifier.newTable(name)));\n+    }\n+\n+    public Table findTable(QualifiedDBIdentifier path) {\n+        if (DBIdentifier.isNull(path)) {\n+            return null;\n+        }\n+        if (!DBIdentifier.isNull(path.getSchemaName())) {\n+            Schema schema = getSchema(path.getSchemaName());\n             if (schema != null)\n-                return schema.getTable(name);\n+                return schema.getTable(path.getUnqualifiedName());\n+            \n         } else {\n             Schema[] schemas = getSchemas();\n             Table tab;\n             for (int i = 0; i < schemas.length; i++) {\n-                tab = schemas[i].getTable(name);\n+                tab = schemas[i].getTable(path.getIdentifier());\n                 if (tab != null)\n                     return tab;\n             }\n@@ -189,22 +217,38 @@ public Table findTable(String name) {\n     /**\n      * Find the table with the given name in the group, using '.' as the catalog\n      * separator. Returns null if no table found.\n+     * @deprecated\n      */\n     public Table findTable(Schema inSchema, String name) {\n         if (name == null)\n             return null;\n+        return findTable(inSchema, DBIdentifier.newTable(name), DBIdentifier.NULL);\n+    }\n \n-        int dotIdx = name.indexOf('.');\n-        if (dotIdx != -1) {\n-            String schemaName = name.substring(0, dotIdx);\n-            name = name.substring(dotIdx + 1);\n-            Schema schema = getSchema(schemaName);\n+    public Table findTable(Schema inSchema, DBIdentifier name) {\n+        if (DBIdentifier.isNull(name))\n+            return null;\n+        return findTable(inSchema, QualifiedDBIdentifier.getPath(name), DBIdentifier.NULL);\n+    }\n+\n+    public Table findTable(Schema inSchema, DBIdentifier name, DBIdentifier defaultSchemaName) {\n+        if (DBIdentifier.isNull(name))\n+            return null;\n+        return findTable(inSchema, QualifiedDBIdentifier.getPath(name), defaultSchemaName);\n+    }\n+    \n+    public Table findTable(Schema inSchema, QualifiedDBIdentifier path, DBIdentifier defaultSchemaName) {\n+        if (path == null)\n+            return null;\n+\n+        if (!DBIdentifier.isNull(path.getSchemaName())) {\n+            Schema schema = getSchema(path.getSchemaName());\n             if (schema != null)\n-                return schema.getTable(name);\n+                return schema.getTable(path.getIdentifier());\n         } else {\n             Schema[] schemas = getSchemas();\n             for (int i = 0; i < schemas.length; i++) {\n-                Table tab = schemas[i].getTable(name);\n+                Table tab = schemas[i].getTable(path.getIdentifier());\n                 // if a table is found and it has the same schema\n                 // as the input schema , it means that the table\n                 // exists. However, if the input schema is null,\n@@ -213,8 +257,14 @@ public Table findTable(Schema inSchema, String name) {\n                 // We can't handle the case that one entity has schema name\n                 // and other entity does not have schema name but both entities\n                 // map to the same table.\n+                boolean isDefaultSchema = DBIdentifier.isNull(inSchema.getIdentifier()) && \n+                    !DBIdentifier.isNull(defaultSchemaName) && \n+                    DBIdentifier.equalsIgnoreCase(defaultSchemaName, schemas[i].getIdentifier());\n+                boolean hasNoDefaultSchema = DBIdentifier.isNull(inSchema.getIdentifier()) && \n+                    DBIdentifier.isNull(defaultSchemaName); \n+                \n                 if (tab != null &&\n-                        (schemas[i] == inSchema || inSchema.getName() == null))\n+                    (schemas[i] == inSchema || isDefaultSchema || hasNoDefaultSchema)) \n                     return tab;\n \n             }\n@@ -237,39 +287,58 @@ public boolean isKnownSequence(Sequence seq) {\n      * {@link #findSequence} may exhibit dynamic behavior in some schema group\n      * implementations, this method only returns true if the sequence has been\n      * added to this group or is known to exist in the database.\n+     * @deprecated\n      */\n     public boolean isKnownSequence(String name) {\n         return findSequence(name) != null;\n     }\n \n+    public boolean isKnownSequence(DBIdentifier name) {\n+        return findSequence(QualifiedDBIdentifier.getPath(name)) != null;\n+    }\n+\n+    public boolean isKnownSequence(QualifiedDBIdentifier path) {\n+        return findSequence(path) != null;\n+    }\n+\n     /**\n      * Find the equivalent of the given sequence in this schema group. The\n      * given sequence that may have come from another schema group.\n      */\n     public Sequence findSequence(Sequence seq) {\n-        return findSequence(seq.getFullName());\n+        return findSequence(seq.getQualifiedPath());\n     }\n \n     /**\n      * Find the sequence with the given name in the group, using '.' as the\n      * catalog separator. Returns null if no sequence found.\n+     * @deprecated\n      */\n     public Sequence findSequence(String name) {\n         if (name == null)\n             return null;\n+        return findSequence(DBIdentifier.newSequence(name));\n+    }\n+\n+    public Sequence findSequence(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name))\n+            return null;\n+        return findSequence(QualifiedDBIdentifier.getPath(name));\n+    }\n+\n+    public Sequence findSequence(QualifiedDBIdentifier path) {\n+        if (path == null)\n+            return null;\n \n-        int dotIdx = name.indexOf('.');\n-        if (dotIdx != -1) {\n-            String schemaName = name.substring(0, dotIdx);\n-            name = name.substring(dotIdx + 1);\n-            Schema schema = getSchema(schemaName);\n+        if (!DBIdentifier.isNull(path.getSchemaName())) {\n+            Schema schema = getSchema(path.getSchemaName());\n             if (schema != null)\n-                return schema.getSequence(name);\n+                return schema.getSequence(path.getIdentifier());\n         } else {\n             Schema[] schemas = getSchemas();\n             Sequence seq;\n             for (int i = 0; i < schemas.length; i++) {\n-                seq = schemas[i].getSequence(name);\n+                seq = schemas[i].getSequence(path.getIdentifier());\n                 if (seq != null)\n                     return seq;\n             }\n@@ -280,28 +349,32 @@ public Sequence findSequence(String name) {\n     /**\n      * Find the sequence with the given name in the group, using '.' as the\n      * catalog separator. Returns null if no sequence found.\n+     * @deprecated\n      */\n     public Sequence findSequence(Schema inSchema, String name) {\n         if (name == null)\n             return null;\n+        return findSequence(inSchema, QualifiedDBIdentifier.getPath(DBIdentifier.newSequence(name)));\n+    }\n+\n+    \n+    public Sequence findSequence(Schema inSchema, QualifiedDBIdentifier path) {\n+        if (path == null)\n+            return null;\n \n-        int dotIdx = name.indexOf('.');\n-        if (dotIdx != -1) {\n-            String schemaName = name.substring(0, dotIdx);\n-            name = name.substring(dotIdx + 1);\n-            Schema schema = getSchema(schemaName);\n+        if (!DBIdentifier.isNull(path.getSchemaName())) {\n+            Schema schema = getSchema(path.getSchemaName());\n             if (schema != null)\n-                return schema.getSequence(name);\n+                return schema.getSequence(path.getIdentifier());\n         } else {\n             Schema[] schemas = getSchemas();\n             Sequence seq;\n             for (int i = 0; i < schemas.length; i++) {\n-                seq = schemas[i].getSequence(name);\n+                seq = schemas[i].getSequence(path.getIdentifier());\n                 if ((seq != null) &&\n-                        (schemas[i] == inSchema || inSchema.getName() == null))\n+                        (schemas[i] == inSchema || DBIdentifier.isNull(inSchema.getIdentifier())))\n                     return seq;\n             }\n-\n         }\n         return null;\n     }\n@@ -317,7 +390,7 @@ public Sequence findSequence(Schema inSchema, String name) {\n         Schema[] schemas = getSchemas();\n         Table[] tabs;\n         ForeignKey[] fks;\n-        Collection exports = new LinkedList();\n+        Collection<ForeignKey> exports = new LinkedList<ForeignKey>();\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n@@ -404,65 +477,106 @@ protected void copy(SchemaGroup group) {\n             for (int j = 0; j < tabs.length; j++) {\n                 fks = tabs[j].getForeignKeys();\n                 for (int k = 0; k < fks.length; k++)\n-                    getSchema(schemas[i].getName()).getTable\n-                        (tabs[j].getName()).importForeignKey(fks[k]);\n+                    getSchema(schemas[i].getIdentifier()).getTable\n+                        (tabs[j].getIdentifier()).importForeignKey(fks[k]);\n             }\n         }\n     }\n \n     /**\n      * Return a new schema with the given name.\n+     * @deprecated\n      */\n     protected Schema newSchema(String name) {\n         return new Schema(name, this);\n     }\n \n+    protected Schema newSchema(DBIdentifier name) {\n+        return new Schema(name, this);\n+    }\n+\n     /**\n      * Return a new sequence with the given name and owner schema.\n+     * @deprecated\n      */\n     protected Sequence newSequence(String name, Schema schema) {\n         return new Sequence(name, schema);\n     }\n \n+    protected Sequence newSequence(DBIdentifier name, Schema schema) {\n+        return new Sequence(name, schema);\n+    }\n+\n     /**\n      * Return a new table with the given name and owner schema.\n+     * @deprecated\n      */\n     protected Table newTable(String name, Schema schema) {\n         return new Table(name, schema);\n     }\n \n+    protected Table newTable(DBIdentifier name, Schema schema) {\n+        return new Table(name, schema);\n+    }\n+\n     /**\n      * Return a new column with the given name and owner table.\n+     * @deprecated\n      */\n     protected Column newColumn(String name, Table table) {\n         return new Column(name, table);\n     }\n \n+    protected Column newColumn(DBIdentifier name, Table table) {\n+        return new Column(name, table);\n+    }\n+\n     /**\n      * Return a new primary key with the given name and owner table.\n+     * @deprecated\n      */\n     protected PrimaryKey newPrimaryKey(String name, Table table) {\n         return new PrimaryKey(name, table);\n     }\n \n+    protected PrimaryKey newPrimaryKey(DBIdentifier name, Table table) {\n+        return new PrimaryKey(name, table);\n+    }\n+\n     /**\n      * Return a new index with the given name and owner table.\n+     * @deprecated\n      */\n     protected Index newIndex(String name, Table table) {\n         return new Index(name, table);\n     }\n \n+    protected Index newIndex(DBIdentifier name, Table table) {\n+        return new Index(name, table);\n+    }\n+\n     /**\n      * Return a new unique constraint with the given name and owner table.\n+     * @deprecated\n      */\n     protected Unique newUnique(String name, Table table) {\n         return new Unique(name, table);\n     }\n \n+    protected Unique newUnique(DBIdentifier name, Table table) {\n+        return new Unique(name, table);\n+    }\n+\n     /**\n      * Return a new foreign key with the given name and owner table.\n+     * @deprecated\n      */\n     protected ForeignKey newForeignKey(String name, Table table) {\n         return new ForeignKey(name, table);\n     }\n+\n+    protected ForeignKey newForeignKey(DBIdentifier name, Table table) {\n+        return new ForeignKey(name, table);\n+    }\n+\n }"},{"sha":"8c90933dcca85282f268dc0483aa0071e9ca1ada","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":44,"deletions":46,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -39,10 +39,13 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.meta.MetaDataSerializer;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -416,7 +419,7 @@ private void deleteTableContents()\n         throws SQLException {\n         SchemaGroup group = getSchemaGroup();\n         Schema[] schemas = group.getSchemas();\n-        Collection tables = new LinkedHashSet();\n+        Collection<Table> tables = new LinkedHashSet<Table>();\n         for (int i = 0; i < schemas.length; i++) {\n             Table[] ts = schemas[i].getTables();\n             for (int j = 0; j < ts.length; j++)\n@@ -451,14 +454,14 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             for (int i = 0; i < schemas.length; i++) {\n                 seqs = schemas[i].getSequences();\n                 for (int j = 0; j < seqs.length; j++) {\n-                    if (db.findSequence(schemas[i], seqs[j].getFullName()) !=\n+                    if (db.findSequence(schemas[i], seqs[j].getQualifiedPath()) !=\n                             null)\n                         continue;\n \n                     if (createSequence(seqs[j])) {\n-                        schema = db.getSchema(seqs[j].getSchemaName());\n+                        schema = db.getSchema(seqs[j].getSchemaIdentifier());\n                         if (schema == null)\n-                            schema = db.addSchema(seqs[j].getSchemaName());\n+                            schema = db.addSchema(seqs[j].getSchemaIdentifier());\n                         schema.importSequence(seqs[j]);\n                     } else\n                         _log.warn(_loc.get(\"add-seq\", seqs[j]));\n@@ -471,30 +474,23 @@ private void add(SchemaGroup db, SchemaGroup repos)\n         Table dbTable;\n         Column[] cols;\n         Column col;\n-        String delim = _dict.getDelimiter();\n+        DBIdentifier defaultSchemaName = DBIdentifier.newSchema(_dict.getDefaultSchemaName());\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n                 cols = tabs[j].getColumns();\n-                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n+                dbTable = db.findTable(schemas[i], tabs[j].getQualifiedPath(), defaultSchemaName);\n                 for (int k = 0; k < cols.length; k++) {\n                     if (dbTable != null) {\n-                        String colName = cols[k].getName();\n-                        boolean delimCol = false;\n-                        if (colName.startsWith(delim) \n-                                && colName.endsWith(delim)) {\n-                            colName = colName.substring(1, colName.length()-1);\n-                            delimCol = true;\n-                        }\n-                        col = dbTable.getColumn(colName, _dict);\n+                        DBIdentifier colName = cols[k].getIdentifier();\n+                        col = dbTable.getColumn(colName);\n                         if (col == null) {\n                             if (addColumn(cols[k]))\n                                 dbTable.importColumn(cols[k]);\n                             else\n                                 _log.warn(_loc.get(\"add-col\", cols[k],\n                                     tabs[j]));\n-                        // TODO: Find a way to compare these with delimCol\n-                        } else if (!delimCol && !cols[k].equalsColumn(col)) {\n+                        } else if (!cols[k].equalsColumn(col)) {\n                             _log.warn(_loc.get(\"bad-col\", new Object[]{\n                                 col, dbTable, col.getDescription(),\n                                 cols[k].getDescription() }));\n@@ -511,7 +507,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n                 tabs = schemas[i].getTables();\n                 for (int j = 0; j < tabs.length; j++) {\n                     pk = tabs[j].getPrimaryKey();\n-                    dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n+                    dbTable = db.findTable(schemas[i], tabs[j].getQualifiedPath());\n                     if (pk != null && !pk.isLogical() && dbTable != null) {\n                         if (dbTable.getPrimaryKey() == null\n                             && addPrimaryKey(pk))\n@@ -527,18 +523,18 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n         }\n \n         // tables\n-        Set newTables = new HashSet();\n+        Set<Table> newTables = new HashSet<Table>();\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n-                if (db.findTable(schemas[i], tabs[j].getFullName()) != null)\n+                if (db.findTable(schemas[i], tabs[j].getQualifiedPath()) != null)\n                     continue;\n \n                 if (createTable(tabs[j])) {\n                     newTables.add(tabs[j]);\n-                    schema = db.getSchema(tabs[j].getSchemaName());\n+                    schema = db.getSchema(tabs[j].getSchemaIdentifier());\n                     if (schema == null)\n-                        schema = db.addSchema(tabs[j].getSchemaName());\n+                        schema = db.addSchema(tabs[j].getSchemaIdentifier());\n                     schema.importTable(tabs[j]);\n                 } else\n                     _log.warn(_loc.get(\"add-table\", tabs[j]));\n@@ -557,7 +553,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 idxs = tabs[j].getIndexes();\n-                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n+                dbTable = db.findTable(schemas[i], tabs[j].getQualifiedPath());\n                 for (int k = 0; k < idxs.length; k++) {\n                     if (dbTable != null) {\n                         idx = findIndex(dbTable, idxs[k]);\n@@ -607,7 +603,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 fks = tabs[j].getForeignKeys();\n-                dbTable = db.findTable(schemas[i],tabs[j].getFullName());\n+                dbTable = db.findTable(schemas[i],tabs[j].getQualifiedPath());\n                 for (int k = 0; k < fks.length; k++) {\n                     if (!fks[k].isLogical() && dbTable != null) {\n                         fk = findForeignKey(dbTable, fks[k]);\n@@ -714,7 +710,7 @@ private void retain(SchemaGroup db, SchemaGroup repos, boolean tables,\n         // columns\n         Column[] cols;\n         Column col;\n-        Collection drops = new LinkedList();\n+        Collection<Table> drops = new LinkedList<Table>();\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n@@ -724,7 +720,7 @@ private void retain(SchemaGroup db, SchemaGroup repos, boolean tables,\n                 reposTable = repos.findTable(tabs[j]);\n                 if (reposTable != null) {\n                     for (int k = 0; k < cols.length; k++) {\n-                        col = reposTable.getColumn(cols[k].getName(), _dict);\n+                        col = reposTable.getColumn(cols[k].getIdentifier());\n                         if (col == null || !cols[k].equalsColumn(col)) {\n                             if (tabs[j].getColumns().length == 1)\n                                 drops.add(tabs[j]);\n@@ -781,7 +777,7 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n         // calculate tables to drop; we can only drop tables if we're sure\n         // the user listed the entire table definition in the stuff they want\n         // dropped; else they might just want to drop a few columns\n-        Collection drops = new LinkedList();\n+        Collection<Table> drops = new LinkedList<Table>();\n         Table[] tabs;\n         Table dbTable;\n         Column[] dbCols;\n@@ -797,7 +793,7 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n \n                 dbCols = dbTable.getColumns();\n                 for (int k = 0; k < dbCols.length; k++)\n-                    if (tabs[j].getColumn(dbCols[k].getName(), _dict) == null)\n+                    if (tabs[j].getColumn(dbCols[k].getIdentifier()) == null)\n                         continue tables;\n \n                 drops.add(tabs[j]);\n@@ -837,8 +833,8 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n \n             // also drop imported foreign keys for tables that will be dropped\n             Table tab;\n-            for (Iterator itr = drops.iterator(); itr.hasNext();) {\n-                tab = (Table) itr.next();\n+            for (Iterator<Table> itr = drops.iterator(); itr.hasNext();) {\n+                tab = itr.next();\n                 dbTable = db.findTable(tab);\n                 if (dbTable == null)\n                     continue;\n@@ -869,7 +865,7 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n                 for (int k = 0; k < cols.length; k++) {\n                     col = null;\n                     if (dbTable != null)\n-                        col = dbTable.getColumn(cols[k].getName(), _dict);\n+                        col = dbTable.getColumn(cols[k].getIdentifier());\n                     if (dbTable == null || col == null)\n                         continue;\n \n@@ -889,17 +885,17 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n      */\n     private boolean isDroppable(Table table) {\n         return _openjpaTables\n-            || (!table.getName().toUpperCase().startsWith(\"OPENJPA_\")\n-            && !table.getName().toUpperCase().startsWith(\"JDO_\")); // legacy\n+            || (!DBIdentifier.toUpper(table.getIdentifier()).getName().startsWith(\"OPENJPA_\")\n+            && !DBIdentifier.toUpper(table.getIdentifier()).getName().startsWith(\"JDO_\")); // legacy\n     }\n \n     /**\n      * Return true if the sequence is droppable.\n      */\n     private boolean isDroppable(Sequence seq) {\n         return _openjpaTables\n-            || (!seq.getName().toUpperCase().startsWith(\"OPENJPA_\")\n-            && !seq.getName().toUpperCase().startsWith(\"JDO_\")); // legacy\n+            || (!DBIdentifier.toUpper(seq.getIdentifier()).getName().startsWith(\"OPENJPA_\")\n+            && !DBIdentifier.toUpper(seq.getIdentifier()).getName().startsWith(\"JDO_\")); // legacy\n     }\n \n     /**\n@@ -932,15 +928,15 @@ private ForeignKey findForeignKey(Table dbTable, ForeignKey fk) {\n      * Remove the given collection of tables from the database schema. Orders\n      * the removals according to foreign key constraints on the tables.\n      */\n-    private void dropTables(Collection tables, SchemaGroup change)\n+    private void dropTables(Collection<Table> tables, SchemaGroup change)\n         throws SQLException {\n         if (tables.isEmpty())\n             return;\n \n         Table table;\n         Table changeTable;\n-        for (Iterator itr = tables.iterator(); itr.hasNext();) {\n-            table = (Table) itr.next();\n+        for (Iterator<Table> itr = tables.iterator(); itr.hasNext();) {\n+            table = itr.next();\n             if (dropTable(table)) {\n                 changeTable = change.findTable(table);\n                 if (changeTable != null)\n@@ -1127,22 +1123,24 @@ private SchemaGroup getDBSchemaGroup(boolean full)\n                 // group; some may not exist yet, which is OK; we just need\n                 // to make sure we can detect the changes to the ones that\n                 // do exist\n-                Collection tables = new LinkedList();\n+                Collection<DBIdentifier> tables = new LinkedList<DBIdentifier>();\n                 SchemaGroup group = assertSchemaGroup();\n                 Schema[] schemas = group.getSchemas();\n                 Table[] tabs;\n                 for (int i = 0; i < schemas.length; i++) {\n                     tabs = schemas[i].getTables();\n                     for (int j = 0; j < tabs.length; j++) {\n-                        if (tabs[j].getSchemaName() == null)\n-                            tables.add(\".\" + tabs[j].getName());\n-                        else\n-                            tables.add(tabs[j].getFullName());\n+                        if (DBIdentifier.isNull(tabs[j].getSchemaIdentifier())) {\n+                            tables.add(tabs[j].getIdentifier());\n+                        } else {\n+                            DBIdentifier sName = tabs[j].getFullIdentifier();\n+                            tables.add(sName);\n+                        }\n                     }\n                 }\n                 if (!tables.isEmpty())\n-                    gen.generateSchemas((String[]) tables.toArray\n-                        (new String[tables.size()]));\n+                    gen.generateSchemas((DBIdentifier[]) tables.toArray\n+                        (new DBIdentifier[tables.size()]));\n             }\n             _db = gen.getSchemaGroup();\n         }\n@@ -1447,7 +1445,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             log.info(_loc.get(\"sch-reflect-write\"));\n             SchemaSerializer ser = new XMLSchemaSerializer(conf);\n             ser.addAll(gen.getSchemaGroup());\n-            ser.serialize(flags.writer, ser.PRETTY);\n+            ser.serialize(flags.writer, MetaDataSerializer.PRETTY);\n             return true;\n         }\n \n@@ -1485,7 +1483,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             log.info(_loc.get(\"tool-export-write\"));\n             SchemaSerializer ser = new XMLSchemaSerializer(conf);\n             ser.addAll(schema);\n-            ser.serialize(flags.writer, ser.PRETTY);\n+            ser.serialize(flags.writer, MetaDataSerializer.PRETTY);\n             return true;\n         }\n "},{"sha":"21b0614dea90ade7b165feb860526897b56225a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -21,7 +21,10 @@\n import java.sql.Types;\n import java.util.Date;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n \n /**\n  * Helper class to deal with schemas.\n@@ -40,20 +43,24 @@\n     /**\n      * Return the schema name that should be used for new tables, or null if\n      * none.\n+     * @deprecated\n      */\n     public static String getNewTableSchema(JDBCConfiguration conf) {\n+        return getNewTableSchemaIdentifier(conf).getName();\n+    }\n+\n+    public static DBIdentifier getNewTableSchemaIdentifier(JDBCConfiguration conf) {\n         if (conf.getSchema() != null)\n-            return conf.getSchema();\n+            return DBIdentifier.newSchema(conf.getSchema());\n \n         String[] schemas = conf.getSchemasList();\n         if (schemas.length == 0)\n-            return null;\n-        int dotIdx = schemas[0].lastIndexOf('.');\n-        if (dotIdx == 0)\n-            return null;\n-        if (dotIdx == -1)\n-            return schemas[0];\n-        return schemas[0].substring(0, dotIdx);\n+            return DBIdentifier.NULL;\n+        String[] names = Normalizer.splitName(schemas[0]);\n+        if (names.length == 0 || StringUtils.isEmpty(names[0])) {\n+            return DBIdentifier.NULL;\n+        }\n+        return DBIdentifier.newSchema(names[0]);\n     }\n \n     /**\n@@ -190,7 +197,7 @@ public static int getJDBCType(String name) {\n     /**\n      * Return the java type for the given SQL type from {@link Types}.\n      */\n-    public static Class getJavaType(int type, int size, int decimals) {\n+    public static Class<?> getJavaType(int type, int size, int decimals) {\n         switch (type) {\n             case Types.CHAR:\n                 if (size == 1)"},{"sha":"8d89b02855f87cfd5f9cdeba2b9fd72495925c55","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","status":"modified","additions":63,"deletions":27,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,27 +20,32 @@\n \n import java.io.File;\n \n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.meta.SourceTracker;\n \n /**\n  * Represents a database sequence.\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class Sequence\n     extends ReferenceCounter\n-    implements Comparable, SourceTracker {\n+    implements Comparable<Sequence>, SourceTracker {\n \n-    private String _name = null;\n-    private String _fullName = null;\n+    private DBIdentifier _name = DBIdentifier.NULL;\n     private Schema _schema = null;\n-    private String _schemaName = null;\n+    private DBIdentifier _schemaName = DBIdentifier.NULL;\n     private int _initial = 1;\n     private int _increment = 1;\n     private int _cache = 0;\n     private int _lineNum = 0;  \n     private int _colNum = 0;  \n-\n+    private QualifiedDBIdentifier _fullPath = null;\n+    \n     // keep track of source\n     private File _source = null;\n     private int _srcType = SRC_OTHER;\n@@ -56,11 +61,16 @@ public Sequence() {\n      *\n      * @param name the sequence name\n      * @param schema the sequence schema\n+     * @deprecated\n      */\n     public Sequence(String name, Schema schema) {\n-        setName(name);\n+        this(DBIdentifier.newSequence(name), schema);\n+    }\n+\n+    public Sequence(DBIdentifier name, Schema schema) {\n+        setIdentifier(name);\n         if (schema != null)\n-            setSchemaName(schema.getName());\n+            setSchemaIdentifier(schema.getIdentifier());\n         _schema = schema;\n     }\n \n@@ -69,7 +79,7 @@ public Sequence(String name, Schema schema) {\n      */\n     void remove() {\n         _schema = null;\n-        _fullName = null;\n+        _fullPath = null;\n     }\n \n     /**\n@@ -83,51 +93,75 @@ public Schema getSchema() {\n      * The sequence's schema name.\n      */\n     public String getSchemaName() {\n-        return _schemaName;\n+        return getSchemaIdentifier().getName();\n+    }\n+    \n+    public DBIdentifier getSchemaIdentifier() {\n+        return _schemaName == null ? DBIdentifier.NULL : _schemaName;\n     }\n \n     /**\n      * The sequence's schema name. You can only call this method on sequences\n      * whose schema object is not set.\n+     * @deprecated\n      */\n     public void setSchemaName(String name) {\n+        setSchemaIdentifier(DBIdentifier.newSchema(name));\n+    }\n+\n+    public void setSchemaIdentifier(DBIdentifier name) {\n         if (getSchema() != null)\n             throw new IllegalStateException();\n         _schemaName = name;\n-        _fullName = null;\n+        _fullPath = null;\n     }\n \n     /**\n      * Return the name of the sequence.\n+     * @deprecated\n      */\n     public String getName() {\n-        return _name;\n+        return getIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getIdentifier() {\n+        return _name == null ? DBIdentifier.NULL : _name;\n     }\n \n     /**\n      * Set the name of the sequence. This method can only be called on\n      * sequences that are not part of a schema.\n+     * @deprecated\n      */\n     public void setName(String name) {\n+        setIdentifier(DBIdentifier.newSequence(name));\n+    }\n+\n+    public void setIdentifier(DBIdentifier name) {\n         if (getSchema() != null)\n             throw new IllegalStateException();\n         _name = name;\n-        _fullName = null;\n+        _fullPath = null;\n     }\n \n     /**\n      * Return the sequence name, including schema, using '.' as the\n      * catalog separator.\n+     * @deprecated\n      */\n     public String getFullName() {\n-        if (_fullName == null) {\n-            Schema schema = getSchema();\n-            if (schema == null || schema.getName() == null)\n-                _fullName = getName();\n-            else\n-                _fullName = schema.getName() + \".\" + getName();\n+        return getFullIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getFullIdentifier() {\n+        return getQualifiedPath().getIdentifier();\n+    }\n+\n+    public QualifiedDBIdentifier getQualifiedPath() {\n+        if (_fullPath  == null) {\n+            _fullPath = QualifiedDBIdentifier.newPath(_schemaName, _name );\n         }\n-        return _fullName;\n+        return _fullPath;\n     }\n \n     /**\n@@ -190,23 +224,24 @@ public void setSource(File source, int srcType) {\n     }\n \n     public String getResourceName() {\n-        return getFullName();\n+        return getFullIdentifier().getName();\n     }\n \n-    public int compareTo(Object other) {\n-        String name = getFullName();\n-        String otherName = ((Sequence) other).getFullName();\n-        if (name == null && otherName == null)\n+    public int compareTo(Sequence other) {\n+        DBIdentifier name = getIdentifier();\n+        DBIdentifier otherName = other.getIdentifier();\n+        if (DBIdentifier.isNull(name) && DBIdentifier.isNull(otherName)) {\n             return 0;\n-        if (name == null)\n+        }\n+        if (DBIdentifier.isNull(name))\n             return 1;\n-        if (otherName == null)\n+        if (DBIdentifier.isNull(otherName))\n             return -1;\n         return name.compareTo(otherName);\n     }\n \n     public String toString() {\n-        return getFullName();\n+        return getFullIdentifier().getName();\n     }\n     \n     public int getLineNumber() {\n@@ -224,4 +259,5 @@ public int getColNumber() {\n     public void setColNumber(int colNum) {\n         _colNum = colNum;\n     }\n+\n }"},{"sha":"ecf913d9b881400c7d05384322d87b645bfec4e0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":208,"deletions":128,"changes":336,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -26,8 +26,13 @@\n import java.util.TreeMap;\n import java.util.LinkedHashMap;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierUtilImpl;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.meta.SourceTracker;\n \n /**\n@@ -36,16 +41,17 @@\n  * @author Abe White\n  * @author Stephen Kim\n  */\n+@SuppressWarnings(\"serial\")\n public class Table\n     extends NameSet\n-    implements Comparable, SourceTracker {\n-\n-    private String _name = null;\n-    private String _schemaName = null;\n-    private Map _colMap = null;\n-    private Map _idxMap = null;\n-    private Collection _fkList = null;\n-    private Collection _unqList = null;\n+    implements Comparable<Object>, SourceTracker {\n+\n+    private DBIdentifier _name = DBIdentifier.NULL;\n+    private DBIdentifier _schemaName = DBIdentifier.NULL;\n+    private Map<DBIdentifier, Column> _colMap = null;\n+    private Map<DBIdentifier, Index> _idxMap = null;\n+    private Collection<ForeignKey> _fkList = null;\n+    private Collection<Unique> _unqList = null;\n     private Schema _schema = null;\n     private PrimaryKey _pk = null;\n \n@@ -54,7 +60,6 @@\n     private int _srcType = SRC_OTHER;\n \n     // cache\n-    private String _fullName = null;\n     private Column[] _cols = null;\n     private Column[] _autoAssign = null;\n     private Column[] _rels = null;\n@@ -65,6 +70,7 @@\n     private int _lineNum = 0;  \n     private int _colNum = 0;\n     private boolean _isAssociation = false;\n+    private QualifiedDBIdentifier _fullPath = null;\n \n     /**\n      * Default constructor.\n@@ -77,12 +83,17 @@ public Table() {\n      *\n      * @param name the table name\n      * @param schema the table schema\n+     * @deprecated\n      */\n     public Table(String name, Schema schema) {\n-        setName(name);\n+        this(DBIdentifier.newTable(name), schema);\n+    }\n+\n+    public Table(DBIdentifier name, Schema schema) {\n+        setIdentifier(name);\n         addName(name, true);\n         if (schema != null)\n-            setSchemaName(schema.getName());\n+            setSchemaIdentifier(schema.getIdentifier());\n         _schema = schema;\n     }\n \n@@ -113,8 +124,8 @@ void remove() {\n         for (int i = 0; i < cols.length; i++)\n             removeColumn(cols[i]);\n         _schema = null;\n-        _schemaName = null;\n-        _fullName = null;\n+        _schemaName = DBIdentifier.NULL;\n+        _fullPath = null;\n     }\n \n     /**\n@@ -126,53 +137,78 @@ public Schema getSchema() {\n \n     /**\n      * The table's schema name.\n+     * @deprecated\n      */\n     public String getSchemaName() {\n-        return _schemaName;\n+        return getSchemaIdentifier().getName();\n+    }\n+\n+    public DBIdentifier getSchemaIdentifier() {\n+        return _schemaName == null ? DBIdentifier.NULL : _schemaName;\n     }\n \n     /**\n      * The table's schema name. You can only call this method on tables\n      * whose schema object is not set.\n+     * @deprecated\n      */\n     public void setSchemaName(String name) {\n+        setSchemaIdentifier(DBIdentifier.newSchema(name));\n+    }\n+\n+    public void setSchemaIdentifier(DBIdentifier name) {\n         if (getSchema() != null)\n             throw new IllegalStateException();\n         _schemaName = name;\n-        _fullName = null;\n+        _fullPath = null;\n     }\n \n     /**\n      * Return the name of the table.\n+     * @deprecated\n      */\n     public String getName() {\n-        return _name;\n+        return getIdentifier().getName();\n+    }\n+    \n+    public DBIdentifier getIdentifier() {\n+        return _name == null ? DBIdentifier.NULL : _name;\n     }\n \n     /**\n      * Set the name of the table. This method can only be called on tables\n      * that are not part of a schema.\n+     * @deprecated\n      */\n     public void setName(String name) {\n+        setIdentifier(DBIdentifier.newTable(name));\n+    }\n+\n+    public void setIdentifier(DBIdentifier name) {\n         if (getSchema() != null)\n             throw new IllegalStateException();\n         _name = name;\n-        _fullName = null;\n+        _fullPath = null;\n     }\n \n     /**\n      * Return the table name, including schema, using '.' as the\n      * catalog separator.\n+     * @deprecated\n      */\n     public String getFullName() {\n-        if (_fullName == null) {\n-            Schema schema = getSchema();\n-            if (schema == null || schema.getName() == null)\n-                _fullName = getName();\n-            else\n-                _fullName = schema.getName() + \".\" + getName();\n+        return getFullIdentifier().getName();\n+    }\n+    \n+    public QualifiedDBIdentifier getQualifiedPath() {\n+        if (_fullPath  == null) {\n+            _fullPath = QualifiedDBIdentifier.newPath(_schemaName, _name );\n         }\n-        return _fullName;\n+        return _fullPath;\n+    }\n+    \n+    public DBIdentifier getFullIdentifier() {\n+        return getQualifiedPath().getIdentifier();\n     }\n \n     public File getSourceFile() {\n@@ -193,7 +229,7 @@ public void setSource(File source, int srcType) {\n     }\n \n     public String getResourceName() {\n-        return getFullName();\n+        return getFullIdentifier().getName();\n     }\n \n     /**\n@@ -205,7 +241,7 @@ public String getResourceName() {\n                 _cols = Schemas.EMPTY_COLUMNS;\n             else {\n                 Column[] cols = new Column[_colMap.size()];\n-                Iterator itr = _colMap.values().iterator();\n+                Iterator<Column> itr = _colMap.values().iterator();\n                 for (int i = 0; itr.hasNext(); i++) {\n                     cols[i] = (Column) itr.next();\n                     cols[i].setIndex(i);\n@@ -224,12 +260,12 @@ public String getResourceName() {\n             if (_colMap == null)\n                 _autoAssign = Schemas.EMPTY_COLUMNS;\n             else {\n-                Collection autos = null;\n+                Collection<Column> autos = null;\n                 Column[] cols = getColumns();\n                 for (int i = 0; i < cols.length; i++) {\n                     if (cols[i].isAutoAssigned()) {\n                         if (autos == null)\n-                            autos = new ArrayList(3);\n+                            autos = new ArrayList<Column>(3);\n                         autos.add(cols[i]);\n                     }\n                 }\n@@ -248,12 +284,12 @@ public String getResourceName() {\n             if (_colMap == null)\n                 _rels = Schemas.EMPTY_COLUMNS;\n             else {\n-                Collection rels = null;\n+                Collection<Column> rels = null;\n                 Column[] cols = getColumns();\n                 for (int i = 0; i < cols.length; i++) {\n                     if (cols[i].isRelationId()) {\n                         if (rels == null)\n-                            rels = new ArrayList(3);\n+                            rels = new ArrayList<Column>(3);\n                         rels.add(cols[i]);\n                     }\n                 }\n@@ -265,47 +301,40 @@ public String getResourceName() {\n     }\n \n     public String[] getColumnNames() {\n-        return _colMap == null ? new String[0] : \n-            (String[])_colMap.keySet().toArray(new String[_colMap.size()]);\n+        if (_colMap == null) {\n+            return new String[0];\n+        }\n+        DBIdentifier[] sNames = (DBIdentifier[])_colMap.keySet().toArray(new DBIdentifier[_colMap.size()]); \n+        return DBIdentifier.toStringArray(sNames);\n     }\n     \n     /**\n      * Return the column with the given name, or null if none.\n+     * @deprecated\n      */\n     public Column getColumn(String name) {\n-        return getColumn(name, null);\n+        return getColumn(DBIdentifier.newIdentifier(name, DBIdentifierType.COLUMN, true));\n     }\n \n-    /**\n-     * Return the column with the given name, or null if none.\n-     * @param dict the current database dictionary or null.\n-     */\n-    public Column getColumn(String name, DBDictionary dict) {\n-        if (name == null || _colMap == null)\n+    public Column getColumn(DBIdentifier name) {\n+        if (DBIdentifier.isNull(name) || _colMap == null)\n             return null;\n-        Column col = (Column)_colMap.get(name.toUpperCase());\n-        if (col == null) {\n-            String delim = null;\n-            if (dict != null) {\n-                delim = dict.getDelimiter();\n-            }\n-            else {\n-                delim = \"\\\"\";\n-            }\n-            String delimName = delim + name + delim;\n-            col = (Column) _colMap.get(delimName.toUpperCase());\n-        }\n-        \n-        return col;\n+        return _colMap.get(DBIdentifier.toUpper(name));\n     }\n+\n     \n     /**\n      * Affirms if this table contains the column of the given name without any \n      * side-effect. \n      * @see Table#getColumn(String) can have side-effect of creating a column\n      * for dynamic table implementation.\n+     * @deprecated\n      */\n     public boolean containsColumn(String name) {\n+        return containsColumn(DBIdentifier.newColumn(name), null);\n+    }\n+    \n+    public boolean containsColumn(DBIdentifier name) {\n         return containsColumn(name, null);\n     }\n \n@@ -315,53 +344,58 @@ public boolean containsColumn(String name) {\n      * @param dict the current database dictionary or null.\n      * @see Table#getColumn(String) can have side-effect of creating a column\n      * for dynamic table implementation.\n+     * @deprecated\n      */\n     public boolean containsColumn(String name, DBDictionary dict) {\n         if (name == null || _colMap == null) {\n             return false;\n         }\n-        if (_colMap.containsKey(name.toUpperCase())) {\n-            return true;\n-        }\n-        \n-        String delim = null;\n-        if (dict != null) {\n-            delim = dict.getDelimiter();\n-        }\n-        else {\n-            delim = \"\\\"\";\n-        }\n-        String delimName = delim + name + delim;\n-        if (_colMap.containsKey(delimName.toUpperCase())) {\n-            return true;\n+        return containsColumn(DBIdentifier.newIdentifier(name, DBIdentifierType.COLUMN, true));\n+    }\n+\n+    public boolean containsColumn(DBIdentifier name, DBDictionary dict) {\n+        if (DBIdentifier.isNull(name) || _colMap == null) {\n+            return false;\n         }\n-        \n-        return false;\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        return _colMap.containsKey(sName);\n     }\n \n     /**\n      * Add a column to the table.\n+     * @deprecated\n      */\n     public Column addColumn(String name) {\n+        return addColumn(DBIdentifier.newColumn(name));\n+    }\n+\n+    public Column addColumn(DBIdentifier name) {\n         addName(name, true);\n         Schema schema = getSchema();\n         Column col;\n-        if (schema != null && schema.getSchemaGroup() != null)\n+        if (schema != null && schema.getSchemaGroup() != null) {\n             col = schema.getSchemaGroup().newColumn(name, this);\n-        else\n+        } else {\n             col = new Column(name, this);\n+        }\n         if (_colMap == null)\n-            _colMap = new LinkedHashMap();\n-        _colMap.put(name.toUpperCase(), col);\n+            _colMap = new LinkedHashMap<DBIdentifier, Column>();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _colMap.put(sName, col);\n         _cols = null;\n         return col;\n     }\n \n \n     /**\n-     * Add a colum with a shortened (i.e., validated) name to the table\n+     * Add a column with a shortened (i.e., validated) name to the table\n+     * @deprecated\n      */\n     public Column addColumn(String name, String validName) {\n+        return addColumn(DBIdentifier.newColumn(name), DBIdentifier.newColumn(validName));\n+    }\n+\n+    public Column addColumn(DBIdentifier name, DBIdentifier validName) {\n         addName(name, true);\n         Schema schema = getSchema();\n         Column col;\n@@ -370,12 +404,25 @@ public Column addColumn(String name, String validName) {\n         else\n             col = new Column(validName, this);\n         if (_colMap == null)\n-            _colMap = new LinkedHashMap();\n-        _colMap.put(name.toUpperCase(), col);\n+            _colMap = new LinkedHashMap<DBIdentifier, Column>();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _colMap.put(sName, col);\n         _cols = null;\n         return col;\n     }\n \n+    /**\n+     * Add a name to this NameSet\n+     * @deprecated\n+     */\n+    public void addCorrectedColumnName(String name, boolean validate) {\n+        addName(DBIdentifier.newColumn(name), validate);\n+    }\n+\n+    public void addCorrectedColumnName(DBIdentifier name, boolean validate) {\n+        addName(name, validate);\n+    }\n+\n \n     /**\n      * Remove the given column from the table.\n@@ -386,12 +433,13 @@ public boolean removeColumn(Column col) {\n         if (col == null || _colMap == null)\n             return false;\n \n-        Column cur = (Column) _colMap.get(col.getName().toUpperCase());\n+        DBIdentifier sName = DBIdentifier.toUpper(col.getIdentifier());\n+        Column cur = (Column) _colMap.get(sName);\n         if (!col.equals(cur))\n             return false;\n \n-        removeName(col.getName());\n-        _colMap.remove(col.getName().toUpperCase());\n+        removeName(sName);\n+        _colMap.remove(sName);\n         _cols = null;\n         if (col.isAutoAssigned())\n             _autoAssign = null;\n@@ -408,9 +456,9 @@ public Column importColumn(Column col) {\n         if (col == null)\n             return null;\n \n-        Column copy = addColumn(col.getName());\n+        Column copy = addColumn(col.getIdentifier());\n         copy.setType(col.getType());\n-        copy.setTypeName(col.getTypeName());\n+        copy.setTypeIdentifier(col.getTypeIdentifier());\n         copy.setJavaType(col.getJavaType());\n         copy.setNotNull(col.isNotNull());\n         copy.setDefaultString(col.getDefaultString());\n@@ -431,13 +479,18 @@ public PrimaryKey getPrimaryKey() {\n      * Set the primary key for the table.\n      */\n     public PrimaryKey addPrimaryKey() {\n-        return addPrimaryKey(null);\n+        return addPrimaryKey(DBIdentifier.NULL);\n     }\n \n     /**\n      * Set the primary key for the table.\n+     * @deprecated\n      */\n     public PrimaryKey addPrimaryKey(String name) {\n+        return addPrimaryKey(DBIdentifier.newConstraint(name));\n+    }\n+\n+    public PrimaryKey addPrimaryKey(DBIdentifier name) {\n         Schema schema = getSchema();\n         if (schema != null && schema.getSchemaGroup() != null) {\n             schema.getSchemaGroup().addName(name, false);\n@@ -457,7 +510,7 @@ public boolean removePrimaryKey() {\n         if (rem) {\n             Schema schema = getSchema();\n             if (schema != null && schema.getSchemaGroup() != null)\n-                schema.getSchemaGroup().removeName(_pk.getName());\n+                schema.getSchemaGroup().removeName(_pk.getIdentifier());\n             _pk.remove();\n         }\n         _pk = null;\n@@ -471,23 +524,30 @@ public PrimaryKey importPrimaryKey(PrimaryKey pk) {\n         if (pk == null)\n             return null;\n \n-        PrimaryKey copy = addPrimaryKey(pk.getName());\n+        PrimaryKey copy = addPrimaryKey(pk.getIdentifier());\n         copy.setLogical(pk.isLogical());\n         Column[] cols = pk.getColumns();\n         for (int i = 0; i < cols.length; i++)\n-            copy.addColumn(getColumn(cols[i].getName()));\n+            copy.addColumn(getColumn(cols[i].getIdentifier()));\n         return copy;\n     }\n \n     /**\n      * Return the foreign key with the given name. If multiple foreign keys\n      * have the name, the first match is returned.\n+     * @deprecated\n      */\n     public ForeignKey getForeignKey(String name) {\n+        return getForeignKey(DBIdentifier.newForeignKey(name));\n+    }\n+\n+    public ForeignKey getForeignKey(DBIdentifier name) {\n         ForeignKey[] fks = getForeignKeys();\n-        for (int i = 0; i < fks.length; i++)\n-            if (StringUtils.equalsIgnoreCase(name, fks[i].getName()))\n+        for (int i = 0; i < fks.length; i++) {\n+            if (name.equals(fks[i].getIdentifier())) {\n                 return fks[i];\n+            }\n+        }\n         return null;\n     }\n \n@@ -500,7 +560,7 @@ public ForeignKey getForeignKey(String name) {\n                 _fks = Schemas.EMPTY_FOREIGN_KEYS;\n             else {\n                 ForeignKey[] fks = new ForeignKey[_fkList.size()];\n-                Iterator itr = _fkList.iterator();\n+                Iterator<ForeignKey> itr = _fkList.iterator();\n                 for (int i = 0; itr.hasNext(); i++) {\n                     fks[i] = (ForeignKey) itr.next();\n                     fks[i].setIndex(i);\n@@ -515,13 +575,18 @@ public ForeignKey getForeignKey(String name) {\n      * Add a foreign key to the table.\n      */\n     public ForeignKey addForeignKey() {\n-        return addForeignKey(null);\n+        return addForeignKey(DBIdentifier.NULL);\n     }\n \n     /**\n      * Add a foreign key to the table. Duplicate key names are not allowed.\n+     * @deprecated\n      */\n     public ForeignKey addForeignKey(String name) {\n+        return addForeignKey(DBIdentifier.newForeignKey(name));\n+    }\n+\n+    public ForeignKey addForeignKey(DBIdentifier name) {\n         Schema schema = getSchema();\n         ForeignKey fk;\n         if (schema != null && schema.getSchemaGroup() != null) {\n@@ -530,7 +595,7 @@ public ForeignKey addForeignKey(String name) {\n         } else\n             fk = new ForeignKey(name, this);\n         if (_fkList == null)\n-            _fkList = new ArrayList(3);\n+            _fkList = new ArrayList<ForeignKey>(3);\n         _fkList.add(fk);\n         _fks = null;\n         return fk;\n@@ -550,7 +615,7 @@ public boolean removeForeignKey(ForeignKey fk) {\n \n         Schema schema = getSchema();\n         if (schema != null && schema.getSchemaGroup() != null)\n-            schema.getSchemaGroup().removeName(fk.getName());\n+            schema.getSchemaGroup().removeName(fk.getIdentifier());\n         _fks = null;\n         fk.remove();\n         return true;\n@@ -563,7 +628,7 @@ public ForeignKey importForeignKey(ForeignKey fk) {\n         if (fk == null)\n             return null;\n \n-        ForeignKey copy = addForeignKey(fk.getName());\n+        ForeignKey copy = addForeignKey(fk.getIdentifier());\n         copy.setDeleteAction(fk.getDeleteAction());\n \n         Schema schema = getSchema();\n@@ -575,20 +640,20 @@ public ForeignKey importForeignKey(ForeignKey fk) {\n \n             Column[] cols = fk.getColumns();\n             for (int i = 0; i < cols.length; i++)\n-                copy.join(getColumn(cols[i].getName()),\n-                    joined.getColumn(pks[i].getName()));\n+                copy.join(getColumn(cols[i].getIdentifier()),\n+                    joined.getColumn(pks[i].getIdentifier()));\n \n             cols = fk.getConstantColumns();\n             for (int i = 0; i < cols.length; i++)\n-                copy.joinConstant(getColumn(cols[i].getName()),\n+                copy.joinConstant(getColumn(cols[i].getIdentifier()),\n                     fk.getPrimaryKeyConstant(cols[i]));\n \n             pks = fk.getConstantPrimaryKeyColumns();\n             if (joined == null && pks.length > 0)\n                 joined = schema.getSchemaGroup().findTable(pks[0].getTable());\n             for (int i = 0; i < pks.length; i++)\n                 copy.joinConstant(fk.getConstant(pks[i]),\n-                    joined.getColumn(pks[i].getName()));\n+                    joined.getColumn(pks[i].getIdentifier()));\n         }\n         return copy;\n     }\n@@ -605,17 +670,31 @@ public ForeignKey importForeignKey(ForeignKey fk) {\n \n     /**\n      * Return the index with the given name, or null if none.\n+     * @deprecated\n      */\n     public Index getIndex(String name) {\n         if (name == null || _idxMap == null)\n             return null;\n-        return (Index) _idxMap.get(name.toUpperCase());\n+        return getIndex(DBIdentifier.newIdentifier(name, DBIdentifierType.INDEX, true));\n+    }\n+\n+    public Index getIndex(DBIdentifier name) {\n+        if (name == null || _idxMap == null)\n+            return null;\n+        \n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        return (Index) _idxMap.get(sName);\n     }\n \n     /**\n      * Add an index to the table.\n+     * @deprecated\n      */\n     public Index addIndex(String name) {\n+        return addIndex(DBIdentifier.newIndex(name));\n+    }\n+\n+    public Index addIndex(DBIdentifier name) {\n         Schema schema = getSchema();\n         Index idx;\n         if (schema != null && schema.getSchemaGroup() != null) {\n@@ -624,8 +703,9 @@ public Index addIndex(String name) {\n         } else\n             idx = new Index(name, this);\n         if (_idxMap == null)\n-            _idxMap = new TreeMap();\n-        _idxMap.put(name.toUpperCase(), idx);\n+            _idxMap = new TreeMap<DBIdentifier, Index>();\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        _idxMap.put(sName, idx);\n         _idxs = null;\n         return idx;\n     }\n@@ -639,14 +719,15 @@ public boolean removeIndex(Index idx) {\n         if (idx == null || _idxMap == null)\n             return false;\n \n-        Index cur = (Index) _idxMap.get(idx.getName().toUpperCase());\n+        DBIdentifier sName = DBIdentifier.toUpper(idx.getIdentifier());\n+        Index cur = (Index) _idxMap.get(sName);\n         if (!idx.equals(cur))\n             return false;\n \n-        _idxMap.remove(idx.getName().toUpperCase());\n+        _idxMap.remove(sName);\n         Schema schema = getSchema();\n         if (schema != null && schema.getSchemaGroup() != null)\n-            schema.getSchemaGroup().removeName(idx.getName());\n+            schema.getSchemaGroup().removeName(idx.getIdentifier());\n         idx.remove();\n         _idxs = null;\n         return true;\n@@ -659,12 +740,12 @@ public Index importIndex(Index idx) {\n         if (idx == null)\n             return null;\n \n-        Index copy = addIndex(idx.getName());\n+        Index copy = addIndex(idx.getIdentifier());\n         copy.setUnique(idx.isUnique());\n \n         Column[] cols = idx.getColumns();\n         for (int i = 0; i < cols.length; i++)\n-            copy.addColumn(getColumn(cols[i].getName()));\n+            copy.addColumn(getColumn(cols[i].getIdentifier()));\n         return copy;\n     }\n \n@@ -680,19 +761,29 @@ public Index importIndex(Index idx) {\n \n     /**\n      * Return the unique constraint with the given name, or null if none.\n+     * @deprecated\n      */\n     public Unique getUnique(String name) {\n+        return getUnique(DBIdentifier.newConstraint(name));\n+    }\n+\n+    public Unique getUnique(DBIdentifier name) {\n         Unique[] unqs = getUniques();\n         for (int i = 0; i < unqs.length; i++)\n-            if (StringUtils.equalsIgnoreCase(name, unqs[i].getName()))\n+            if (DBIdentifier.equal(name, unqs[i].getIdentifier()))\n                 return unqs[i];\n         return null;\n     }\n \n     /**\n      * Add a unique constraint to the table.\n+     * @deprecated\n      */\n     public Unique addUnique(String name) {\n+        return addUnique(DBIdentifier.newConstraint(name));\n+    }\n+\n+    public Unique addUnique(DBIdentifier name) {\n         Schema schema = getSchema();\n         Unique unq;\n         if (schema != null && schema.getSchemaGroup() != null) {\n@@ -701,7 +792,7 @@ public Unique addUnique(String name) {\n         } else\n             unq = new Unique(name, this);\n         if (_unqList == null)\n-            _unqList = new ArrayList(3);\n+            _unqList = new ArrayList<Unique>(3);\n         _unqList.add(unq);\n         _unqs = null;\n         return unq;\n@@ -721,7 +812,7 @@ public boolean removeUnique(Unique unq) {\n \n         Schema schema = getSchema();\n         if (schema != null && schema.getSchemaGroup() != null)\n-            schema.getSchemaGroup().removeName(unq.getName());\n+            schema.getSchemaGroup().removeName(unq.getIdentifier());\n         _unqs = null;\n         unq.remove();\n         return true;\n@@ -734,12 +825,12 @@ public Unique importUnique(Unique unq) {\n         if (unq == null)\n             return null;\n \n-        Unique copy = addUnique(unq.getName());\n+        Unique copy = addUnique(unq.getIdentifier());\n         copy.setDeferred(unq.isDeferred());\n \n         Column[] cols = unq.getColumns();\n         for (int i = 0; i < cols.length; i++)\n-            copy.addColumn(getColumn(cols[i].getName()));\n+            copy.addColumn(getColumn(cols[i].getIdentifier()));\n         return copy;\n     }\n \n@@ -774,23 +865,23 @@ void changeRelationId(Column col) {\n     }\n \n     public int compareTo(Object other) {\n-        String name = getFullName();\n-        String otherName = ((Table) other).getFullName();\n-        if (name == null && otherName == null)\n+        DBIdentifier name = getFullIdentifier();\n+        DBIdentifier otherName = ((Table) other).getFullIdentifier();\n+        if (DBIdentifier.isNull(name) && DBIdentifier.isNull(otherName))\n             return 0;\n-        if (name == null)\n+        if (DBIdentifier.isNull(name))\n             return 1;\n-        if (otherName == null)\n+        if (DBIdentifier.isNull(otherName))\n             return -1;\n         return name.compareTo(otherName);\n     }\n \n     public String toString() {\n-        return getFullName();\n+        return getFullIdentifier().getName();\n     }\n \n     public boolean hasComment() {\n-        return _comment != null && !_comment.equalsIgnoreCase(_name);\n+        return _comment != null && !_comment.equalsIgnoreCase(_name.getName());\n     }\n \n     public String getComment() {\n@@ -816,15 +907,4 @@ public int getColNumber() {\n     public void setColNumber(int colNum) {\n         _colNum = colNum;\n     }\n-\n-    /**\n-    * Add a column to the subNames set to avoid naming conflict.\n-    */\n-    public void addSubColumn(String name) {\n-        addSubName(name);\n-    }\n-\n-    public void resetSubColumns() {\n-        resetSubNames();\n-    }\n }"},{"sha":"182a47d19fc5e962a57ae8716f89cbbeb59f3bba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","status":"modified","additions":27,"deletions":20,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -30,13 +30,17 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.meta.MetaDataSerializer;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -62,9 +66,9 @@\n \n     private JDBCConfiguration _conf = null;\n     private Log _log = null;\n-    private String _table = \"OPENJPA_SCHEMA\";\n-    private String _pkColumnName = \"ID\";\n-    private String _schemaColumnName = \"SCHEMA_DEF\";\n+    private DBIdentifier _table = DBIdentifier.newTable(\"OPENJPA_SCHEMA\");\n+    private DBIdentifier _pkColumnName = DBIdentifier.newColumn(\"ID\");\n+    private DBIdentifier _schemaColumnName = DBIdentifier.newColumn(\"SCHEMA_DEF\");\n     private Column _pkColumn = null;\n     private Column _schemaColumn = null;\n \n@@ -73,15 +77,15 @@\n      * <code>OPENJPA_SCHEMA</code>.\n      */\n     public String getTable() {\n-        return _table;\n+        return _table.getName();\n     }\n \n     /**\n      * The name of the schema definition table. Defaults to\n      * <code>OPENJPA_SCHEMA</code>.\n      */\n     public void setTable(String name) {\n-        _table = name;\n+        _table = DBIdentifier.newTable(name);\n     }\n \n     /**\n@@ -97,31 +101,31 @@ public void setTableName(String name) {\n      * Defaults to <code>ID</code>.\n      */\n     public void setPrimaryKeyColumn(String name) {\n-        _pkColumnName = name;\n+        _pkColumnName = DBIdentifier.newColumn(name);\n     }\n \n     /**\n      * The name of the primary key column on the schema definition table.\n      * Defaults to <code>ID</code>.\n      */\n     public String getPrimaryKeyColumn() {\n-        return _pkColumnName;\n+        return _pkColumnName.getName();\n     }\n \n     /**\n      * The name of the schema column on the schema definition table.\n      * Defaults to <code>SCHEMA_DEF</code>.\n      */\n     public void setSchemaColumn(String name) {\n-        _schemaColumnName = name;\n+        _schemaColumnName = DBIdentifier.newColumn(name);\n     }\n \n     /**\n      * The name of the schema column on the schema definition table.\n      * Defaults to <code>SCHEMA_DEF</code>.\n      */\n     public String getSchemaColumn() {\n-        return _schemaColumnName;\n+        return _schemaColumnName.getName();\n     }\n \n     public JDBCConfiguration getConfiguration() {\n@@ -139,7 +143,7 @@ public void startConfiguration() {\n     public void endConfiguration() {\n         buildTable();\n     }\n-\n+    \n     public synchronized SchemaGroup readSchema() {\n         String schema = null;\n         try {\n@@ -154,7 +158,7 @@ public synchronized SchemaGroup readSchema() {\n         XMLSchemaParser parser = new XMLSchemaParser(_conf);\n         try {\n             parser.parse(new StringReader(schema),\n-                _schemaColumn.getFullName());\n+                _schemaColumn.getQualifiedPath().toString());\n         } catch (IOException ioe) {\n             throw new GeneralException(ioe);\n         }\n@@ -166,7 +170,7 @@ public void storeSchema(SchemaGroup schema) {\n         ser.addAll(schema);\n         Writer writer = new StringWriter();\n         try {\n-            ser.serialize(writer, ser.COMPACT);\n+            ser.serialize(writer, MetaDataSerializer.COMPACT);\n         } catch (IOException ioe) {\n             throw new GeneralException(ioe);\n         }\n@@ -232,7 +236,8 @@ public void refreshTable()\n             DBDictionary dict = _conf.getDBDictionaryInstance();\n             stmnt = conn.prepareStatement(\"INSERT INTO \"\n                 + dict.getFullName(_pkColumn.getTable(), false)\n-                + \" (\" + _pkColumn + \", \" + _schemaColumn + \") VALUES (?, ?)\");\n+                + \" (\" + dict.getColumnDBName(_pkColumn) + \", \" + \n+                dict.getColumnDBName(_schemaColumn) + \") VALUES (?, ?)\");\n             dict.setInt(stmnt, 1, 1, _pkColumn);\n             dict.setNull(stmnt, 2, _schemaColumn.getType(), _schemaColumn);\n             dict.setTimeouts(stmnt, _conf, true);\n@@ -328,11 +333,12 @@ public void writeSchemaColumn(String schema)\n         String update;\n         if (embedded)\n             update = \"UPDATE \" + dict.getFullName(_pkColumn.getTable(), false)\n-                + \" SET \" + _schemaColumn + \" = ?  WHERE \" + _pkColumn + \" = ?\";\n+                + \" SET \" + dict.getColumnDBName(_schemaColumn) + \" = ?  WHERE \" +\n+                dict.getColumnIdentifier(_pkColumn) + \" = ?\";\n         else\n-            update = \"SELECT \" + _schemaColumn + \" FROM \"\n+            update = \"SELECT \" + dict.getColumnDBName(_schemaColumn) + \" FROM \"\n                 + dict.getFullName(_pkColumn.getTable(), false)\n-                + \" WHERE \" + _pkColumn + \" = ?\";\n+                + \" WHERE \" + dict.getColumnDBName(_pkColumn) + \" = ?\";\n \n         Connection conn = getConnection();\n         PreparedStatement stmnt = null;\n@@ -392,10 +398,11 @@ else if (_schemaColumn.getType() == Types.CLOB)\n      * Creates the object-level representation of the sequence table.\n      */\n     private void buildTable() {\n-        String tableName = Strings.getClassName(_table);\n-        String schemaName = Strings.getPackageName(_table);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n+        QualifiedDBIdentifier path = QualifiedDBIdentifier.getPath(_table);\n+        DBIdentifier tableName = path.getIdentifier();\n+        DBIdentifier schemaName = path.getSchemaName();\n+        if (DBIdentifier.isEmpty(schemaName))\n+            schemaName = Schemas.getNewTableSchemaIdentifier(_conf);\n \n         // build the table in one of the designated schemas\n         SchemaGroup group = new SchemaGroup();"},{"sha":"c3c6319ae0cf93db67b848a1c118bf5e72d0fae5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -18,12 +18,15 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+\n /**\n  * Represents a unique constraint. It can also represent a partial constraint.\n  *\n  * @author Abe White\n  * @author Pinaki Poddar\n  */\n+@SuppressWarnings(\"serial\")\n public class Unique\n     extends LocalConstraint {\n \t\n@@ -36,11 +39,16 @@ public Unique() {\n      * \n      * @param name the name of the constraint, if any\n      * @param table the table of the constraint\n+     * @deprecated\n      */\n     public Unique(String name, Table table) {\n         super(name, table);\n     }\n \n+    public Unique(DBIdentifier name, Table table) {\n+        super(name, table);\n+    }\n+\n     public boolean isLogical() {\n         return false;\n     }\n@@ -59,10 +67,15 @@ public void addColumn(Column col) {\n     /**\n      * Set the name of the constraint. This method cannot be called if the\n      * constraint already belongs to a table. \n+     * @deprecated\n      */\n     public void setName(String name) {\n         super.setName(name);\n     }\n+\n+    public void setIdentifier(DBIdentifier name) {\n+        super.setIdentifier(name);\n+    }\n     \n     /**\n      * Return true if the structure of this primary key matches that of"},{"sha":"664f8c516dee739892c48827792b18057728cee3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":42,"deletions":41,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -30,6 +30,7 @@\n import org.xml.sax.SAXException;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Localizer.Message;\n@@ -115,10 +116,10 @@\n     private boolean _delay = false;\n \n     // used to collect info on schema elements before they're resolved\n-    private final Collection _pkInfos = new LinkedList();\n-    private final Collection _indexInfos = new LinkedList();\n-    private final Collection _unqInfos = new LinkedList();\n-    private final Collection _fkInfos = new LinkedList();\n+    private final Collection<PrimaryKeyInfo> _pkInfos = new LinkedList<PrimaryKeyInfo>();\n+    private final Collection<IndexInfo> _indexInfos = new LinkedList<IndexInfo>();\n+    private final Collection<UniqueInfo> _unqInfos = new LinkedList<UniqueInfo>();\n+    private final Collection<ForeignKeyInfo> _fkInfos = new LinkedList<ForeignKeyInfo>();\n \n     /**\n      * Constructor. Supply configuration.\n@@ -185,11 +186,11 @@ private void resolvePrimaryKeys() {\n         PrimaryKeyInfo pkInfo;\n         String colName;\n         Column col;\n-        for (Iterator itr = _pkInfos.iterator(); itr.hasNext();) {\n-            pkInfo = (PrimaryKeyInfo) itr.next();\n-            for (Iterator cols = pkInfo.cols.iterator(); cols.hasNext();) {\n-                colName = (String) cols.next();\n-                col = pkInfo.pk.getTable().getColumn(colName, _dict);\n+        for (Iterator<PrimaryKeyInfo> itr = _pkInfos.iterator(); itr.hasNext();) {\n+            pkInfo = itr.next();\n+            for (Iterator<String> cols = pkInfo.cols.iterator(); cols.hasNext();) {\n+                colName = cols.next();\n+                col = pkInfo.pk.getTable().getColumn(colName);\n                 if (col == null)\n                     throwUserException(_loc.get(\"pk-resolve\", new Object[]\n                         { colName, pkInfo.pk.getTable() }));\n@@ -206,11 +207,11 @@ private void resolveIndexes() {\n         IndexInfo indexInfo;\n         String colName;\n         Column col;\n-        for (Iterator itr = _indexInfos.iterator(); itr.hasNext();) {\n-            indexInfo = (IndexInfo) itr.next();\n-            for (Iterator cols = indexInfo.cols.iterator(); cols.hasNext();) {\n-                colName = (String) cols.next();\n-                col = indexInfo.index.getTable().getColumn(colName, _dict);\n+        for (Iterator<IndexInfo> itr = _indexInfos.iterator(); itr.hasNext();) {\n+            indexInfo = itr.next();\n+            for (Iterator<String> cols = indexInfo.cols.iterator(); cols.hasNext();) {\n+                colName = cols.next();\n+                col = indexInfo.index.getTable().getColumn(colName);\n                 if (col == null)\n                     throwUserException(_loc.get(\"index-resolve\", new Object[]\n                         { indexInfo.index, colName,\n@@ -232,10 +233,10 @@ private void resolveForeignKeys() {\n         Column pkCol;\n         String pkColName;\n         PrimaryKey pk;\n-        Iterator pks;\n-        Iterator cols;\n-        for (Iterator itr = _fkInfos.iterator(); itr.hasNext();) {\n-            fkInfo = (ForeignKeyInfo) itr.next();\n+        Iterator<String> pks;\n+        Iterator<String> cols;\n+        for (Iterator<ForeignKeyInfo> itr = _fkInfos.iterator(); itr.hasNext();) {\n+            fkInfo = itr.next();\n             toTable = _group.findTable(fkInfo.toTable);\n             if (toTable == null || toTable.getPrimaryKey() == null)\n                 throwUserException(_loc.get(\"fk-totable\", new Object[]\n@@ -250,13 +251,13 @@ private void resolveForeignKeys() {\n             pks = fkInfo.pks.iterator();\n             for (cols = fkInfo.cols.iterator(); cols.hasNext();) {\n                 colName = (String) cols.next();\n-                col = fkInfo.fk.getTable().getColumn(colName, _dict);\n+                col = fkInfo.fk.getTable().getColumn(colName);\n                 if (col == null)\n                     throwUserException(_loc.get(\"fk-nocol\",\n                         fkInfo.fk, colName, fkInfo.fk.getTable()));\n \n                 pkColName = (String) pks.next();\n-                pkCol = toTable.getColumn(pkColName, _dict);\n+                pkCol = toTable.getColumn(pkColName);\n                 if (pkCol == null)\n                     throwUserException(_loc.get(\"fk-nopkcol\", new Object[]\n                         { fkInfo.fk, pkColName, toTable,\n@@ -267,9 +268,9 @@ private void resolveForeignKeys() {\n \n             // make constant joins\n             cols = fkInfo.constCols.iterator();\n-            for (Iterator vals = fkInfo.consts.iterator(); vals.hasNext();) {\n-                colName = (String) cols.next();\n-                col = fkInfo.fk.getTable().getColumn(colName, _dict);\n+            for (Iterator<Object> vals = fkInfo.consts.iterator(); vals.hasNext();) {\n+                colName = cols.next();\n+                col = fkInfo.fk.getTable().getColumn(colName);\n                 if (col == null)\n                     throwUserException(_loc.get(\"fk-nocol\",\n                         fkInfo.fk, colName, fkInfo.fk.getTable()));\n@@ -278,9 +279,9 @@ private void resolveForeignKeys() {\n             }\n \n             pks = fkInfo.constColsPK.iterator();\n-            for (Iterator vals = fkInfo.constsPK.iterator(); vals.hasNext();) {\n-                pkColName = (String) pks.next();\n-                pkCol = toTable.getColumn(pkColName, _dict);\n+            for (Iterator<Object> vals = fkInfo.constsPK.iterator(); vals.hasNext();) {\n+                pkColName = pks.next();\n+                pkCol = toTable.getColumn(pkColName);\n                 if (pkCol == null)\n                     throwUserException(_loc.get(\"fk-nopkcol\", new Object[]\n                         { fkInfo.fk, pkColName, toTable,\n@@ -299,11 +300,11 @@ private void resolveUniques() {\n         UniqueInfo unqInfo;\n         String colName;\n         Column col;\n-        for (Iterator itr = _unqInfos.iterator(); itr.hasNext();) {\n-            unqInfo = (UniqueInfo) itr.next();\n-            for (Iterator cols = unqInfo.cols.iterator(); cols.hasNext();) {\n+        for (Iterator<UniqueInfo> itr = _unqInfos.iterator(); itr.hasNext();) {\n+            unqInfo = itr.next();\n+            for (Iterator<String> cols = unqInfo.cols.iterator(); cols.hasNext();) {\n                 colName = (String) cols.next();\n-                col = unqInfo.unq.getTable().getColumn(colName, _dict);\n+                col = unqInfo.unq.getTable().getColumn(colName);\n                 if (col == null)\n                     throwUserException(_loc.get(\"unq-resolve\", new Object[]\n                         { unqInfo.unq, colName, unqInfo.unq.getTable() }));\n@@ -412,7 +413,7 @@ private void startSequence(Attributes attrs) {\n             seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n             seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n         }\n-        seq.setSource(getSourceFile(), seq.SRC_XML);\n+        seq.setSource(getSourceFile(), SourceTracker.SRC_XML);\n         try {\n             String val = attrs.getValue(\"initial-value\");\n             if (val != null)\n@@ -430,7 +431,7 @@ private void startSequence(Attributes attrs) {\n \n     private void startTable(Attributes attrs) {\n         _table = _schema.addTable(attrs.getValue(\"name\"));\n-        _table.setSource(getSourceFile(), _table.SRC_XML);\n+        _table.setSource(getSourceFile(), SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n             _table.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n@@ -580,7 +581,7 @@ private void throwUserException(Message msg) {\n     private static class PrimaryKeyInfo {\n \n         public PrimaryKey pk = null;\n-        public Collection cols = new LinkedList();\n+        public Collection<String> cols = new LinkedList<String>();\n     }\n \n     /**\n@@ -589,7 +590,7 @@ private void throwUserException(Message msg) {\n     private static class IndexInfo {\n \n         public Index index = null;\n-        public Collection cols = new LinkedList();\n+        public Collection<String> cols = new LinkedList<String>();\n     }\n \n     /**\n@@ -598,7 +599,7 @@ private void throwUserException(Message msg) {\n     public static class UniqueInfo {\n \n         public Unique unq = null;\n-        public Collection cols = new LinkedList();\n+        public Collection<String> cols = new LinkedList<String>();\n     }\n \n     /**\n@@ -608,11 +609,11 @@ private void throwUserException(Message msg) {\n \n         public ForeignKey fk = null;\n         public String toTable = null;\n-        public Collection cols = new LinkedList();\n-        public Collection pks = new LinkedList();\n-        public Collection consts = new LinkedList();\n-        public Collection constCols = new LinkedList();\n-        public Collection constsPK = new LinkedList();\n-        public Collection constColsPK = new LinkedList();\n+        public Collection<String> cols = new LinkedList<String>();\n+        public Collection<String> pks = new LinkedList<String>();\n+        public Collection<Object> consts = new LinkedList<Object>();\n+        public Collection<String> constCols = new LinkedList<String>();\n+        public Collection<Object> constsPK = new LinkedList<Object>();\n+        public Collection<String> constColsPK = new LinkedList<String>();\n     }\n }"},{"sha":"b45e9e75cc1b052c14b69f222e1002475c69834b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -50,8 +50,8 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (XMLSchemaSerializer.class);\n \n-    private final Collection _tables = new TreeSet();\n-    private final Collection _seqs = new TreeSet();\n+    private final Collection<Table> _tables = new TreeSet<Table>();\n+    private final Collection<Sequence> _seqs = new TreeSet<Sequence>();\n \n     /**\n      * Constructor. Supply configuration.\n@@ -140,7 +140,7 @@ protected Collection getObjects() {\n             return _tables;\n         if (_tables.isEmpty())\n             return _seqs;\n-        List all = new ArrayList(_seqs.size() + _tables.size());\n+        List<Object> all = new ArrayList<Object>(_seqs.size() + _tables.size());\n         all.addAll(_seqs);\n         all.addAll(_tables);\n         return all;\n@@ -180,7 +180,7 @@ protected void serialize(Collection objs)\n     /**\n      * Serializes the given objects together into the current schema.\n      */\n-    private void serializeSchema(String name, Collection objs)\n+    private void serializeSchema(String name, Collection<?> objs)\n         throws SAXException {\n         if (objs.isEmpty())\n             return;\n@@ -194,7 +194,7 @@ private void serializeSchema(String name, Collection objs)\n \n         // tables and seqs\n         Object obj;\n-        for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+        for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n             obj = itr.next();\n             if (obj instanceof Table)\n                 serializeTable((Table) obj);"},{"sha":"b9b32bbff166116295f46ee5c21b0afc44bf91a1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -38,13 +38,9 @@ public AbstractDB2Dictionary() {\n \n         // DB2-based databases have restrictions on having uncast parameters\n         // in string functions\n-        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))\";\n-        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))\";\n         stringLengthFunction = \"LENGTH({0})\";\n         concatenateFunction = \"(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")) || CAST({1} AS VARCHAR(1000)))\";\n+            + \")) || CAST({1} AS VARCHAR(\" + varcharCastLength + \")))\";\n \n         trimLeadingFunction = \"LTRIM({0})\";\n         trimTrailingFunction = \"RTRIM({0})\";\n@@ -60,6 +56,7 @@ public AbstractDB2Dictionary() {\n         supportsLockingWithOuterJoin = false;\n         supportsLockingWithInnerJoin = false;\n         supportsLockingWithSelectRange = true;\n+        supportsCaseConversionForLob = true;\n \n         requiresAutoCommitForMetaData = true;\n         requiresAliasForSubselect = true;"},{"sha":"9652f5d2b318db22f612794b5200e962c145539c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -25,6 +25,7 @@\n import java.sql.Types;\n import java.util.Arrays;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n@@ -93,7 +94,8 @@ public AbstractSQLServerDictionary() {\n     }\n \n     public String getFullName(Index idx) {\n-        return getFullName(idx.getTable(), false) + \".\" + idx.getName();\n+        return toDBName(getNamingUtil().append(DBIdentifierType.INDEX,\n+            getFullIdentifier(idx.getTable(), false),idx.getIdentifier()));\n     }\n \n     public void setNull(PreparedStatement stmnt, int idx, int colType,"},{"sha":"06007022a55fd7d2f2a690aecb7297511d48cf47","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -65,7 +65,11 @@ public AccessDictionary() {\n         maxIndexesPerTable = 32;\n \n         substringFunctionName = \"MID\";\n-    }\n+        \n+        setLeadingDelimiter(\"[\");\n+        setTrailingDelimiter(\"]\");\n+    }    \n+    \n \n     public void setLong(PreparedStatement stmnt, int idx, long val, Column col)\n         throws SQLException {"},{"sha":"66c3a121d8c795b5ff1d06f0e5e118c3f5e9b282","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":72,"deletions":24,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -26,12 +26,13 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.sql.Statement;\n import java.sql.Types;\n import java.util.Arrays;\n-import java.util.EnumSet;\n import java.util.Set;\n import java.util.StringTokenizer;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.kernel.exps.Lit;\n@@ -89,9 +90,6 @@\n     \n     private int defaultBatchLimit = 100;\n     \n-    private EnumSet<DBIdentifiers> unsupportedDelimitedIds =\n-        EnumSet.of(DBIdentifiers.COLUMN_COLUMN_DEFINITION); \n-    \n     public DB2Dictionary() {\n         platform = \"DB2\";\n         validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\n@@ -125,6 +123,7 @@ public DB2Dictionary() {\n         supportsDeferredConstraints = false;\n         supportsDefaultDeleteAction = false;\n         supportsAlterTableWithDropColumn = false;\n+        supportsLockingWithOrderClause = true;\n \n         supportsNullTableForGetColumns = false;\n         requiresCastForMathFunctions = true;\n@@ -231,17 +230,24 @@ protected void appendSelect(SQLBuffer selectSQL, Object alias, Select sel,\n         return sql;\n     }\n \n+    @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        return getSequencesSQL(DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newSequence(sequenceName));\n+    }\n+\n+    @Override\n+    protected String getSequencesSQL(DBIdentifier schemaName, DBIdentifier sequenceName) {\n+        StringBuilder buf = new StringBuilder();\n         buf.append(sequenceSQL);\n-        if (schemaName != null || sequenceName != null)\n+        if (!DBIdentifier.isNull(schemaName) || !DBIdentifier.isNull(sequenceName))\n             buf.append(\" WHERE \");\n-        if (schemaName != null) {\n+        if (!DBIdentifier.isNull(schemaName)) {\n             buf.append(sequenceSchemaSQL);\n-            if (sequenceName != null)\n+            if (!DBIdentifier.isNull(sequenceName))\n                 buf.append(\" AND \");\n         }\n-        if (sequenceName != null)\n+        if (!DBIdentifier.isNull(sequenceName))\n             buf.append(sequenceNameSQL);\n         return buf.toString();\n     }\n@@ -268,6 +274,22 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n         super.connectedConfiguration(conn);\n \n         DatabaseMetaData metaData = conn.getMetaData();\n+        try {\n+            String str = \"SELECT CURRENT SCHEMA FROM SYSIBM.SYSDUMMY1\";\n+            Statement stmnt = conn.createStatement();\n+            ResultSet rs = stmnt.executeQuery(str);\n+            if (rs.next()) {\n+                String currSchema = rs.getString(1);\n+                if (currSchema != null)\n+                    setDefaultSchemaName(currSchema.trim());\n+            }\n+            rs.close();\n+            stmnt.close();\n+        } catch (SQLException e) {\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"can_not_get_current_schema\", e.getMessage()));\n+        }\n+\n         String driverName = metaData.getDriverName();\n         if (driverName != null && driverName.startsWith(\"IBM DB2\"))\n             driverVendor = VENDOR_IBM;\n@@ -524,7 +546,7 @@ private void getProductVersionMajorMinor() {\n \n     protected String getOptimizeClause(Select sel) {\n         if (sel != null && sel.getExpectedResultCount() > 0) {\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n             buf.append(\" \").append(optimizeClause).append(\" \")\n                 .append(String.valueOf(sel.getExpectedResultCount()))\n                 .append(\" \").append(rowClause);\n@@ -559,7 +581,7 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             getMethod(\"getSqlWarn\", null);\n             Method  getSqlErrdMethd = sqlca.getClass().\n             getMethod(\"getSqlErrd\", null);\n-            StringBuffer errdStr = new StringBuffer();\n+            StringBuilder errdStr = new StringBuilder();\n \n             int[] errds = (int[]) getSqlErrdMethd.invoke(sqlca, new Object[]{});\n             for (int i = 0; i < errds.length; i++)\n@@ -766,9 +788,36 @@ public int getBatchLimit() {\n      * @return a String with the correct CAST function syntax\n      */\n     public String getCastFunction(Val val, String func) {\n-        if (val instanceof Lit || val instanceof Param)\n-            if (func.indexOf(\"VARCHAR\") == -1)\n-                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(1000)\");\n+        if (val instanceof Lit || val instanceof Param) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(\" + varcharCastLength + \")\");\n+            }\n+        }\n+        return func;\n+    }\n+\n+    /**\n+     * Return the correct CAST function syntax\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        boolean doCast = false;\n+        if (val instanceof Lit || val instanceof Param) {\n+            doCast = true;\n+        }\n+        // cast anything not already a VARCHAR to VARCHAR\n+        if (col.getType() != Types.VARCHAR) {\n+            doCast = true;\n+        }\n+        if (doCast == true) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(\" + varcharCastLength + \")\");\n+            }\n+        }\n         return func;\n     }\n \n@@ -852,12 +901,18 @@ public void appendCast(SQLBuffer buf, FilterValue val, int type) {\n      * Create an index if necessary for some database tables\n      */\n     public void createIndexIfNecessary(Schema schema, String table,\n+        Column pkColumn) {\n+        createIndexIfNecessary(schema, DBIdentifier.newTable(table), \n+            pkColumn);\n+    }\n+\n+    public void createIndexIfNecessary(Schema schema, DBIdentifier table,\n             Column pkColumn) {\n         if (isDB2ZOSV8xOrLater()) {\n             // build the index for the sequence tables\n             // the index name will be the fully qualified table name + _IDX\n             Table tab = schema.getTable(table);\n-            Index idx = tab.addIndex(tab.getFullName() + \"_IDX\");\n+            Index idx = tab.addIndex(DBIdentifier.append(tab.getFullIdentifier(), \"IDX\"));\n             idx.setUnique(true);\n             idx.addColumn(pkColumn);\n         }\n@@ -886,14 +941,6 @@ protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n         return recoverable;\n     }\n     \n-    /**\n-     * @return the unsupportedDelimitedIds\n-     */\n-    @Override\n-    protected EnumSet<DBIdentifiers> getUnsupportedDelimitedIds() {\n-        return unsupportedDelimitedIds;\n-    }\n-    \n     @Override\n     protected void setDelimitedCase(DatabaseMetaData metaData) {\n         delimitedCase = SCHEMA_CASE_PRESERVE;\n@@ -932,7 +979,8 @@ public void setBytes(PreparedStatement stmnt, int idx, byte[] val,\n         // for DB2, if the column was defined as CHAR for BIT DATA, then\n         // we want to use the setBytes in stead of the setBinaryStream\n         if (useSetBytesForBlobs \n-                || (col.getTypeName() != null && col.getTypeName().contains(\"BIT DATA\"))) {\n+                || (!DBIdentifier.isNull(col.getTypeIdentifier()) && \n+                col.getTypeIdentifier().getName().contains(\"BIT DATA\"))) {\n             stmnt.setBytes(idx, val);\n         } else {\n             setBinaryStream(stmnt, idx, new ByteArrayInputStream(val), val.length, col);"},{"sha":"780f41bc754d5e85b446132085608935da6445db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":728,"deletions":439,"changes":1167,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -65,6 +65,12 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.ColumnDefIdentifierRule;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierRule;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierUtil;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n@@ -86,12 +92,16 @@\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n+import org.apache.openjpa.jdbc.schema.ForeignKey.FKMapKey;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.Seq;\n import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.identifier.IdentifierConfiguration;\n+import org.apache.openjpa.lib.identifier.IdentifierRule;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n import org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator;\n import org.apache.openjpa.lib.log.Log;\n@@ -124,14 +134,14 @@\n  */\n public class DBDictionary\n     implements Configurable, ConnectionDecorator, JoinSyntaxes,\n-    LoggingConnectionDecorator.SQLWarningHandler {\n+    LoggingConnectionDecorator.SQLWarningHandler, IdentifierConfiguration {\n \n     public static final String VENDOR_OTHER = \"other\";\n     public static final String VENDOR_DATADIRECT = \"datadirect\";\n \n-    public static final String SCHEMA_CASE_UPPER = \"upper\";\n-    public static final String SCHEMA_CASE_LOWER = \"lower\";\n-    public static final String SCHEMA_CASE_PRESERVE = \"preserve\";\n+    public static final String SCHEMA_CASE_UPPER = IdentifierUtil.CASE_UPPER;\n+    public static final String SCHEMA_CASE_LOWER = IdentifierUtil.CASE_LOWER;\n+    public static final String SCHEMA_CASE_PRESERVE = IdentifierUtil.CASE_PRESERVE;\n \n     public static final String CONS_NAME_BEFORE = \"before\";\n     public static final String CONS_NAME_MID = \"mid\";\n@@ -152,9 +162,9 @@\n     protected static final int DECI = MILLI * 100;\n     protected static final int SEC = MILLI * 1000;\n \n-    protected static final int NAME_ANY = 0;\n-    protected static final int NAME_TABLE = 1;\n-    protected static final int NAME_SEQUENCE = 2;\n+    protected static final int NAME_ANY = DBIdentifierUtil.ANY;\n+    protected static final int NAME_TABLE = DBIdentifierUtil.TABLE;\n+    protected static final int NAME_SEQUENCE = DBIdentifierUtil.SEQUENCE;\n     \n     protected static final int UNLIMITED = -1;\n     protected static final int NO_BATCH = 0;\n@@ -171,7 +181,6 @@\n     // schema data\n     public String platform = \"Generic\";\n     public String driverVendor = null;\n-    public String catalogSeparator = \".\";\n     public boolean createPrimaryKeys = true;\n     public String constraintNameMode = CONS_NAME_BEFORE;\n     public int maxTableNameLength = 128;\n@@ -180,6 +189,7 @@\n     public int maxIndexNameLength = 128;\n     public int maxIndexesPerTable = Integer.MAX_VALUE;\n     public boolean supportsForeignKeys = true;\n+    public boolean supportsParameterInSelect = true;\n     public boolean supportsForeignKeysComposite = true;\n     public boolean supportsUniqueConstraints = true;\n     public boolean supportsDeferredConstraints = true;\n@@ -240,10 +250,12 @@\n     public boolean requiresCastForComparisons = false;\n     public boolean supportsModOperator = false;\n     public boolean supportsXMLColumn = false;\n+    public boolean supportsCaseConversionForLob = false;\n     public boolean reportsSuccessNoInfoOnBatchUpdates = false;\n     public boolean supportsSelectFromFinalTable = false;\n     public boolean supportsSimpleCaseExpression = true;\n     public boolean supportsGeneralCaseExpression = true;\n+    public boolean useWildCardForCount = false;\n     \n     /**\n      * Some Databases append whitespace after the schema name \n@@ -343,45 +355,31 @@\n     protected Log log = null;\n     protected boolean connected = false;\n     protected boolean isJDBC3 = false;\n-    protected final Set reservedWordSet = new HashSet();\n+    protected final Set<String> reservedWordSet = new HashSet<String>();\n     // reservedWordSet subset that CANNOT be used as valid column names\n     // (i.e., without surrounding them with double-quotes)\n     protected Set<String> invalidColumnWordSet = new HashSet<String>();\n-    protected final Set systemSchemaSet = new HashSet();\n-    protected final Set systemTableSet = new HashSet();\n-    protected final Set fixedSizeTypeNameSet = new HashSet();\n-    protected final Set typeModifierSet = new HashSet();\n-    \n-    private boolean delimitIds = false;\n-    protected boolean supportsDelimitedIds = false;\n-    protected String delimiter = \"\\\"\";\n-    // Assume mixed case by default.\n-    protected String delimitedCase = SCHEMA_CASE_PRESERVE;\n-    \n-    // TODO: complete the list\n-    public static enum DBIdentifiers {\n-        TABLE_NAME,\n-        TABLE_SCHEMA,\n-        TABLE_CATALOG,\n-        SECONDARY_TABLE_NAME,\n-        SECONDARY_TABLE_SCHEMA,\n-        SECONDARY_TABLE_CATALOG,\n-        TABLE_GEN_TABLE,\n-        TABLE_GEN_SCHEMA,\n-        TABLE_GEN_PK_COLUMN,\n-        TABLE_GEN_VALUE_COLUMN,\n-        COLUMN_NAME,\n-        COLUMN_COLUMN_DEFINITION,\n-        COLUMN_TABLE\n-    }\n+    protected final Set<String> systemSchemaSet = new HashSet<String>();\n+    protected final Set<String> systemTableSet = new HashSet<String>();\n+    protected final Set<String> fixedSizeTypeNameSet = new HashSet<String>();\n+    protected final Set<String> typeModifierSet = new HashSet<String>();\n+\n+    // NamingConfiguration properties\n+    private boolean delimitIdentifiers = false;\n+    public boolean supportsDelimitedIdentifiers = true;\n+    public String leadingDelimiter = \"\\\"\";\n+    public String trailingDelimiter = \"\\\"\";\n+    public String nameConcatenator = \"_\";\n+    public String delimitedCase = SCHEMA_CASE_PRESERVE;\n+    public String catalogSeparator = \".\";\n+    private String defaultSchemaName = null;\n+    private String conversionKey = null;\n+       \n+    // Naming utility and naming rules\n+    private DBIdentifierUtil namingUtil = null;\n+    private Map<String, IdentifierRule> namingRules = new HashMap<String, IdentifierRule>();\n+    private IdentifierRule defaultNamingRule = null;  // cached for performance\n     \n-    // TODO: describe; maybe make private\n-    protected EnumSet<DBIdentifiers> unsupportedDelimitedIds =\n-        EnumSet.noneOf(DBIdentifiers.class);\n-    // TODO\n-    // Should this be EnumSet.<DBIdentifiers>noneOf(....)\n-    // or EnumSet<DBIdentifiers>.noneOf....?\n-\n     /**\n      * If a native query begins with any of the values found here then it will\n      * be treated as a select statement.  \n@@ -445,9 +443,8 @@ public void connectedConfiguration(Connection conn)\n                         conn.getTransactionIsolation()}));\n             }\n             \n-            // While we have the metaData, set some values from it\n-            setSupportsDelimitedIds(metaData);\n-            setDelimitedCase(metaData);\n+            // Configure the naming utility\n+            configureNamingUtil(metaData);\n \n             // Auto-detect generated keys retrieval support\n             // unless user specified it.\n@@ -462,6 +459,28 @@ public void connectedConfiguration(Connection conn)\n         }\n         connected = true;\n     }\n+    \n+    private void configureNamingUtil(DatabaseMetaData metaData) {\n+        // Get the naming utility from the configuration\n+        setSupportsDelimitedIdentifiers(metaData);\n+        setDelimitedCase(metaData);\n+    }\n+\n+    /**\n+     * Configures the naming rules for this dictionary.  Subclasses should \n+     * override this method, providing their own naming rules.\n+     */\n+    protected void configureNamingRules() {\n+        // Add the default naming rule\n+        DBIdentifierRule defRule = new DBIdentifierRule(DBIdentifierType.DEFAULT, reservedWordSet);\n+        namingRules.put(defRule.getName(), defRule);\n+        // Disable delimiting of column definition.  DB platforms are very\n+        // picky about delimiters in column definitions. Base column types\n+        // do not require delimiters and will cause failures if delimited.\n+        DBIdentifierRule cdRule = new ColumnDefIdentifierRule();\n+        cdRule.setCanDelimit(false);\n+        namingRules.put(cdRule.getName(), cdRule);\n+    }\n \n     //////////////////////\n     // ResultSet wrappers\n@@ -1602,8 +1621,8 @@ public int getPreferredType(int type) {\n      * from {@link Types}.\n      */\n     public String getTypeName(Column col) {\n-        if (!StringUtils.isEmpty(col.getTypeName()))\n-            return appendSize(col, col.getTypeName());\n+        if (!DBIdentifier.isEmpty(col.getTypeIdentifier()))\n+            return appendSize(col, toDBName(col.getTypeIdentifier()));\n \n         if (col.isAutoAssigned() && autoAssignTypeName != null)\n             return appendSize(col, autoAssignTypeName);\n@@ -1708,7 +1727,7 @@ protected String appendSize(Column col, String typeName) {\n \n         String size = null;\n         if (col.getSize() > 0) {\n-            StringBuffer buf = new StringBuffer(10);\n+            StringBuilder buf = new StringBuilder(10);\n             buf.append(\"(\").append(col.getSize());\n             if (col.getDecimalDigits() > 0)\n                 buf.append(\", \").append(col.getDecimalDigits());\n@@ -1846,7 +1865,7 @@ public SQLBuffer toSelectCount(Select sel) {\n             // if the select has no identifier cols, use COUNT(*)\n             List aliases = (!sel.isDistinct()) ? Collections.EMPTY_LIST\n                 : sel.getIdentifierAliases();\n-            if (aliases.isEmpty()) {\n+            if (useWildCardForCount || aliases.isEmpty()) {\n                 selectSQL.append(\"COUNT(*)\");\n                 return toSelect(selectSQL, null, from, where, null, null, null,\n                     false, false, 0, Long.MAX_VALUE);\n@@ -1950,7 +1969,8 @@ protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         // (SELECT 1 FROM TABLE t0 WHERE t0.ID = TABLE.ID); also, some\n         // databases do not allow aliases in delete statements, which\n         // also causes us to use a subselect\n-        if (sel.getTableAliases().size() == 1 && supportsSubselect\n+        Collection<String> selectedTables = getSelectTableAliases(sel);\n+        if (selectedTables.size() == 1 && supportsSubselect\n             && allowsAliasInBulkClause) {\n             SQLBuffer from;\n             if (sel.getFromSelect() != null)\n@@ -2032,22 +2052,27 @@ protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         }\n         return sql;\n     }\n+    \n+    protected Collection<String> getSelectTableAliases(Select sel) {\n+        return sel.getTableAliases();\n+    }\n \n     protected SQLBuffer getDeleteTargets(Select sel) {\n       SQLBuffer deleteTargets = new SQLBuffer(this);\n-      Collection aliases = sel.getTableAliases();\n+      Collection<String> aliases = sel.getTableAliases();\n       // Assumes aliases are of the form \"TABLENAME t0\"\n-      for (Iterator itr = aliases.iterator(); itr.hasNext();) {\n-        String tableAlias = itr.next().toString();\n-        int spaceIndex = tableAlias.indexOf(' ');\n-        if (spaceIndex > 0 && spaceIndex < tableAlias.length() - 1) {\n+      // or \"\\\"TABLE NAME\\\" t0\"\n+      for (Iterator<String> itr = aliases.iterator(); itr.hasNext();) {\n+        String tableAlias = itr.next();\n+        String[] names = Normalizer.splitName(tableAlias, IdentifierUtil.SPACE);\n+        if (names.length > 1) {\n           if (allowsAliasInBulkClause) {\n-            deleteTargets.append(tableAlias.substring(spaceIndex + 1));\n+            deleteTargets.append(names[1]);\n           } else {\n-            deleteTargets.append(tableAlias.substring(0, spaceIndex));\n+            deleteTargets.append(toDBName(DBIdentifier.newTable(names[0])));\n           }\n         } else {\n-          deleteTargets.append(tableAlias);\n+          deleteTargets.append(toDBName(DBIdentifier.newTable(tableAlias)));\n         }\n         if (itr.hasNext())\n           deleteTargets.append(\", \");\n@@ -2086,7 +2111,7 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             if (allowAlias) {\n               sql.append(sel.getColumnAlias(col));\n             } else {\n-              sql.append(col.getName());  \n+              sql.append(toDBName(col.getIdentifier()));\n             }            \n             sql.append(\" = \");\n \n@@ -2115,7 +2140,7 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n                 Map.Entry e = (Map.Entry) iter.next();\n                 Column col = (Column) e.getKey();\n                 String val = (String) e.getValue();\n-                sql.append(\", \").append(col.getName())\n+                sql.append(\", \").append(toDBName(col.getIdentifier()))\n                     .append(\" = \").append(val);\n             }\n         }\n@@ -2145,7 +2170,8 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n                 restrictConstraints.add(fks[j]);\n             }\n             \n-            deleteSQL.add(\"DELETE FROM \" + tables[i].getFullName());\n+            deleteSQL.add(\"DELETE FROM \" + \n+                toDBName(tables[i].getFullIdentifier()));\n         }\n         \n         for(ForeignKey fk : restrictConstraints) {\n@@ -2618,6 +2644,9 @@ protected SQLBuffer getSelects(Select sel, boolean distinctIdentifiers,\n         Object alias;\n         for (int i = 0; i < aliases.size(); i++) {\n             alias = aliases.get(i);\n+            if (alias instanceof String) {\n+                alias = getNamingUtil().convertAlias((String)alias);\n+            }\n             appendSelect(selectSQL, alias, sel, i);\n             if (i < aliases.size() - 1)\n                 selectSQL.append(\", \");\n@@ -2841,6 +2870,16 @@ public void comparison(SQLBuffer buf, String op, FilterValue lhs,\n         boolean castrhs = false;\n         Class lc = Filters.wrap(lhs.getType());\n         Class rc = Filters.wrap(rhs.getType());\n+        \n+        // special case of comparison of two boolean constants\n+        // because some databases do not like false = false or false = true\n+        // but all databases understand 1 = 0 or 0 <> 1 etc.\n+        if (lc == rc && lc == Boolean.class && lhs.isConstant() && rhs.isConstant()) {\n+            String lvalue = Boolean.TRUE.equals(lhs.getValue()) ? \"1\" : \"0\";\n+            String rvalue = Boolean.TRUE.equals(rhs.getValue()) ? \"1\" : \"0\";\n+            buf.append(lvalue).append(op).append(rvalue);\n+            return;\n+        }\n         int type = 0;\n         if (requiresCastForComparisons && (lc != rc\n             || (lhs.isConstant() && rhs.isConstant()))) {\n@@ -2945,40 +2984,56 @@ public String addCastAsType(String func, Val val) {\n     public void refSchemaComponents(Table table) {\n     }\n \n+    /**\n+     * Returns the name of the column using database specific delimiters.\n+     */\n+    public DBIdentifier getColumnIdentifier(Column column) {\n+        if (column == null) {\n+            return DBIdentifier.NULL;\n+        }\n+        return column.getIdentifier();\n+    }\n+    \n+    public String getColumnDBName(Column column) {\n+        return toDBName(getColumnIdentifier(column));\n+    }\n+\n     /**\n      * Returns the full name of the table, including the schema (delimited\n      * by {@link #catalogSeparator}).\n      */\n+    public DBIdentifier getFullIdentifier(Table table, boolean logical) {\n+        if (!useSchemaName || DBIdentifier.isNull(table.getSchemaIdentifier()))\n+            return table.getIdentifier();\n+        return table.getFullIdentifier();\n+    }\n+        \n     public String getFullName(Table table, boolean logical) {\n-        if (!useSchemaName || table.getSchemaName() == null)\n-            return table.getName();\n-        if (logical || \".\".equals(catalogSeparator))\n-            return table.getFullName();\n-        return table.getSchemaName() + catalogSeparator + table.getName();\n+        if (!useSchemaName || DBIdentifier.isNull(table.getSchemaIdentifier()))\n+            return toDBName(table.getIdentifier());\n+        return toDBName(table.getFullIdentifier());\n     }\n-\n+    \n     /**\n      * Returns the full name of the index, including the schema (delimited\n      * by the result of {@link #catalogSeparator}).\n      */\n+\n     public String getFullName(Index index) {\n-        if (!useSchemaName || index.getSchemaName() == null)\n-            return index.getName();\n-        if (\".\".equals(catalogSeparator))\n-            return index.getFullName();\n-        return index.getSchemaName() + catalogSeparator + index.getName();\n+        if (!useSchemaName || DBIdentifier.isNull(index.getSchemaIdentifier()))\n+            return toDBName(index.getIdentifier());\n+        return toDBName(index.getFullIdentifier());\n     }\n \n     /**\n      * Returns the full name of the sequence, including the schema (delimited\n      * by the result of {@link #catalogSeparator}).\n      */\n+\n     public String getFullName(Sequence seq) {\n-        if (!useSchemaName || seq.getSchemaName() == null)\n-            return seq.getName();\n-        if (\".\".equals(catalogSeparator))\n-            return seq.getFullName();\n-        return seq.getSchemaName() + catalogSeparator + seq.getName();\n+        if (!useSchemaName || DBIdentifier.isNull(seq.getSchemaIdentifier()))\n+            return toDBName(seq.getIdentifier());\n+        return toDBName(seq.getFullIdentifier());\n     }\n \n     /**\n@@ -2996,44 +3051,75 @@ public String getFullName(Sequence seq) {\n     /**\n      * Make any necessary changes to the given table name to make it valid for\n      * the current DB.\n+     * @deprecated\n      */\n     public String getValidTableName(String name, Schema schema) {\n-        while (name.startsWith(\"_\"))\n-            name = name.substring(1);\n-        return makeNameValid(name, schema.getSchemaGroup(),\n-            maxTableNameLength, NAME_TABLE);\n+        return getValidTableName(DBIdentifier.newTable(name), schema).getName();\n+    }\n+    \n+    /**\n+     * Make any necessary changes to the given table name to make it valid for\n+     * the current DB.\n+     */\n+    public DBIdentifier getValidTableName(DBIdentifier name, Schema schema) {\n+        return namingUtil.getValidTableIdentifier(name, schema, maxTableNameLength);\n     }\n \n     /**\n      * Make any necessary changes to the given sequence name to make it valid\n      * for the current DB.\n+     * @deprecated\n      */\n     public String getValidSequenceName(String name, Schema schema) {\n-        while (name.startsWith(\"_\"))\n-            name = name.substring(1);\n-        return makeNameValid(\"S_\" + name, schema.getSchemaGroup(),\n-            maxTableNameLength, NAME_SEQUENCE);\n+        return getValidSequenceName(DBIdentifier.newSequence(name), schema).getName();\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given sequence name to make it valid\n+     * for the current DB.\n+     */\n+    public DBIdentifier getValidSequenceName(DBIdentifier name, Schema schema) {\n+        return namingUtil.getValidSequenceIdentifier(name, schema, maxTableNameLength);\n     }\n \n     /**\n      * Make any necessary changes to the given column name to make it valid\n      * for the current DB.  The column name will be made unique for the\n      * specified table.\n+     * @deprecated\n      */\n     public String getValidColumnName(String name, Table table) {\n+        return getValidColumnName(DBIdentifier.newColumn(name), table, true).getName();\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given column name to make it valid\n+     * for the current DB.  The column name will be made unique for the\n+     * specified table.\n+     */\n+    public DBIdentifier getValidColumnName(DBIdentifier name, Table table) {\n         return getValidColumnName(name, table, true);\n     }\n \n     /**\n      * Make any necessary changes to the given column name to make it valid\n      * for the current DB.  If checkForUniqueness is true, the column name will \n      * be made unique for the specified table.\n+     * @deprecated\n      */\n     public String getValidColumnName(String name, Table table,\n         boolean checkForUniqueness) {\n-        while (name.startsWith(\"_\"))\n-            name = name.substring(1);\n-        return makeNameValid(name, table, maxColumnNameLength, NAME_ANY,\n+        return getValidColumnName(DBIdentifier.newColumn(name), table, checkForUniqueness).toString();\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given column name to make it valid\n+     * for the current DB.  If checkForUniqueness is true, the column name will \n+     * be made unique for the specified table.\n+     */\n+    public DBIdentifier getValidColumnName(DBIdentifier name, Table table,\n+        boolean checkForUniqueness) {\n+        return getNamingUtil().getValidColumnIdentifier(name, table, maxColumnNameLength, \n             checkForUniqueness);\n     }\n \n@@ -3051,78 +3137,68 @@ public String getValidPrimaryKeyName(String name, Table table) {\n     /**\n      * Make any necessary changes to the given foreign key name to make it\n      * valid for the current DB.\n+     * @deprecated\n      */\n     public String getValidForeignKeyName(String name, Table table,\n         Table toTable) {\n-        while (name.startsWith(\"_\"))\n-            name = name.substring(1);\n-        String tableName = table.getName();\n-        int len = Math.min(tableName.length(), 7);\n-        name = \"F_\" + shorten(tableName, len) + \"_\" + name;\n-        return makeNameValid(name, table.getSchema().getSchemaGroup(),\n-            maxConstraintNameLength, NAME_ANY);\n+        return getValidForeignKeyName(DBIdentifier.newForeignKey(name), table,\n+            toTable).getName();\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given foreign key name to make it\n+     * valid for the current DB.\n+     */\n+    public DBIdentifier getValidForeignKeyName(DBIdentifier name, Table table,\n+        Table toTable) {\n+        return namingUtil.getValidForeignKeyIdentifier(name, table, toTable, maxConstraintNameLength);\n     }\n \n     /**\n      * Make any necessary changes to the given index name to make it valid\n      * for the current DB.\n+     * @deprecated\n      */\n     public String getValidIndexName(String name, Table table) {\n-        while (name.startsWith(\"_\"))\n-            name = name.substring(1);\n-        String tableName = table.getName();\n-        int len = Math.min(tableName.length(), 7);\n-        String shortTableName = shorten(tableName, len);\n-        name = combineNames(\"I\", shortTableName, name);\n-        \n-        return makeNameValid(name, table.getSchema().getSchemaGroup(),\n-            maxIndexNameLength, NAME_ANY);\n+        return getValidIndexName(DBIdentifier.newIndex(name), table).getName();\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given index name to make it valid\n+     * for the current DB.\n+     */\n+    public DBIdentifier getValidIndexName(DBIdentifier name, Table table) {\n+        return getNamingUtil().getValidIndexIdentifier(name, table, maxIndexNameLength);\n     }\n \n     /**\n      * Make any necessary changes to the given unique constraint name to make\n      * it valid for the current DB.\n+     * @deprecated\n      */\n     public String getValidUniqueName(String name, Table table) {\n-        while (name.startsWith(\"_\"))\n-            name = name.substring(1);\n-        String tableName = table.getName();\n-        int len = Math.min(tableName.length(), 7);\n-        name = combineNames(\"U\", shorten(tableName, len), name);\n-        return makeNameValid(name, table.getSchema().getSchemaGroup(),\n-            maxConstraintNameLength, NAME_ANY);\n+        return getValidUniqueName(DBIdentifier.newConstraint(name), table).getName();\n     }\n-    \n-    public boolean isDelimited(String name) {\n-        return (name.startsWith(getDelimiter()) \n-                && name.endsWith(getDelimiter()));\n-    }\n-    \n-    public String stripDelimiters(String name) {\n-        String delimiter = getDelimiter();\n-        int delimLen = delimiter.length();\n-        if (isDelimited(name)) {\n-            return name.substring(delimLen, name.length() - delimLen);\n-        }\n-        return name;\n+\n+    /**\n+     * Make any necessary changes to the given unique constraint name to make\n+     * it valid for the current DB.\n+     */\n+    public DBIdentifier getValidUniqueName(DBIdentifier name, Table table) {\n+        return namingUtil.getValidUniqueIdentifier(name, table, maxConstraintNameLength);\n     }\n     \n-    public String addDelimiters(String name) {\n-        String delimiter = getDelimiter();\n-        return delimiter + name + delimiter;\n-    }\n-\n     /**\n      * Shorten the specified name to the specified target name. This will\n      * be done by first stripping out the vowels, and then removing\n      * characters from the middle of the word until it reaches the target\n      * length.\n      */\n-    protected static String shorten(String name, int targetLength) {\n+    public static String shorten(String name, int targetLength) {\n         if (name == null || name.length() <= targetLength)\n             return name;\n \n-        StringBuffer nm = new StringBuffer(name);\n+        StringBuilder nm = new StringBuilder(name);\n         while (nm.length() > targetLength) {\n             if (!stripVowel(nm)) {\n                 // cut out the middle char\n@@ -3133,11 +3209,11 @@ protected static String shorten(String name, int targetLength) {\n     }\n \n     /**\n-     * Remove vowels from the specified StringBuffer.\n+     * Remove vowels from the specified StringBuilder.\n      *\n      * @return true if any vowels have been removed\n      */\n-    private static boolean stripVowel(StringBuffer name) {\n+    private static boolean stripVowel(StringBuilder name) {\n         if (name == null || name.length() == 0)\n             return false;\n \n@@ -3159,12 +3235,26 @@ private static boolean stripVowel(StringBuffer name) {\n      * character is replace with '0', then '1', etc.\n      * Note that the given max len may be 0 if the database metadata is\n      * incomplete.\n+     * @deprecated\n      */\n     protected String makeNameValid(String name, NameSet set, int maxLen,\n         int nameType) {\n         return makeNameValid(name, set, maxLen, nameType, true);\n     }\n \n+    /**\n+     * Shortens the given name to the given maximum length, then checks that\n+     * it is not a reserved word. If it is reserved, appends a \"0\". If\n+     * the name conflicts with an existing schema component, the last\n+     * character is replace with '0', then '1', etc.\n+     * Note that the given max len may be 0 if the database metadata is\n+     * incomplete.\n+     */\n+    protected DBIdentifier makeNameValid(DBIdentifier name, NameSet set, int maxLen,\n+        int nameType) {\n+        return makeNameValid(name, set, maxLen, nameType, true);\n+    }\n+\n     /**\n      * Shortens the given name to the given maximum length, then checks that\n      * it is not a reserved word. If it is reserved, appends a \"0\". If\n@@ -3179,111 +3269,34 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n      */\n     protected String makeNameValid(String name, NameSet set, int maxLen,\n         int nameType, boolean checkForUniqueness) {\n-        boolean delimited = false;\n-        String delimiter = getDelimiter();\n-        if (name.startsWith(delimiter) && name.endsWith(delimiter)) {\n-            delimited = true;\n-        }\n-        if (maxLen < 1)\n-            maxLen = 255;\n-        if (name.length() > maxLen)\n-            name = removeEndingChars(name, name.length() - maxLen, \n-                delimited, delimiter);\n-        if (reservedWordSet.contains(name.toUpperCase())) {\n-            if (name.length() == maxLen)\n-                name = removeEndingChars(name, 1, delimited, delimiter);\n-            name = addCharsToEnd(name, \"0\", delimited, delimiter);\n-        }\n-\n-        // now make sure the name is unique\n-        if (set != null && checkForUniqueness) {\n-            outer:\n-            for (int version = 1, chars = 1; true; version++) {\n-                // for table names, we check for the table itself in case the\n-                // name set is lazy about schema reflection\n-                switch (nameType) {\n-                    case NAME_TABLE:\n-                        if (!((SchemaGroup) set).isKnownTable(name))\n-                            break outer;\n-                        break;\n-                    case NAME_SEQUENCE:\n-                        if (!((SchemaGroup) set).isKnownSequence(name))\n-                            break outer;\n-                        break;\n-                    default:\n-                        if (!set.isNameTaken(name))\n-                            break outer;\n-                }\n-\n-                // a single char for the version is probably enough, but might\n-                // as well be general about it...\n-                if (version > 1)\n-                    name = removeEndingChars(name, chars, delimited, delimiter);\n-                if (version >= Math.pow(10, chars))\n-                    chars++;\n-                if (name.length() + chars > maxLen)\n-                    name = removeEndingChars(name, \n-                        name.length() + chars - maxLen, \n-                        delimited, delimiter);\n-                name = addCharsToEnd(name, new Integer(version).toString(), \n-                    delimited, delimiter);\n-            }\n-        }\n-        \n-        if (delimited) {\n-            String delimCase = getDelimitedCase();\n-            if (delimCase.equals(SCHEMA_CASE_LOWER)) {\n-                return name.toLowerCase();\n-            }\n-            else if (delimCase.equals(SCHEMA_CASE_UPPER)) {\n-                return name.toUpperCase();\n-            }\n-            else {\n-                return name;\n-            }\n-        }\n-        // TODO: This is the original. Should the db supported case be checked?\n-        return name.toUpperCase();\n+        return namingUtil.makeNameValid(name, set,\n+            maxLen, nameType, checkForUniqueness).toString();\n     }\n-    \n-    private String removeEndingChars(String name, \n-        int charsToRemove,\n-        boolean delimited, \n-        String delimiter) {\n-        if (delimited) {\n-            name = name.substring(0, name.length() - delimiter.length());\n-            name = name.substring(0, name.length() - charsToRemove);\n-            name = name + delimiter;\n-        }\n-        else {\n-            name = name.substring(0, name.length() - charsToRemove);\n-        }\n-        \n-        return name;\n-    }\n-    \n-    private String addCharsToEnd(String name,\n-        String charsToAdd,\n-        boolean delimited,\n-        String delimiter) {\n-        if (delimited) {\n-            name = name.substring(0, name.length() - delimiter.length());\n-            name = name + charsToAdd;\n-            name = name + delimiter;\n-        }\n-        else {\n-            name = name + charsToAdd;\n-        }\n-        \n-        return name;\n+\n+    /**\n+     * Shortens the given name to the given maximum length, then checks that\n+     * it is not a reserved word. If it is reserved, appends a \"0\". If\n+     * the name conflicts with an existing schema component and uniqueness\n+     * checking is enabled, the last character is replace with '0', then \n+     * '1', etc. \n+     * Note that the given max len may be 0 if the database metadata is \n+     * incomplete.\n+     * \n+     * Note: If the name is delimited, make sure the ending delimiter is\n+     * not stripped off.\n+     */\n+    protected DBIdentifier makeNameValid(DBIdentifier name, NameSet set, int maxLen,\n+        int nameType, boolean checkForUniqueness) {\n+        return namingUtil.makeIdentifierValid(name, set,\n+            maxLen, checkForUniqueness);\n     }\n \n     /**\n      * Return a series of SQL statements to create the given table, complete\n      * with columns. Indexes and constraints will be created separately.\n      */\n     public String[] getCreateTableSQL(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         String tableName = checkNameLength(getFullName(table, false), \n                 maxTableNameLength, \"long-table-name\");\n         buf.append(\"CREATE TABLE \").append(tableName);\n@@ -3297,7 +3310,7 @@ private String addCharsToEnd(String name,\n \n         // do this before getting the columns so we know how to handle\n         // the last comma\n-        StringBuffer endBuf = new StringBuffer();\n+        StringBuilder endBuf = new StringBuilder();\n         PrimaryKey pk = table.getPrimaryKey();\n         String pkStr;\n         if (pk != null) {\n@@ -3337,7 +3350,7 @@ public int getBatchFetchSize(int batchFetchSize) {\n         return batchFetchSize;\n     }\n \n-    protected StringBuffer comment(StringBuffer buf, String comment) {\n+    protected StringBuilder comment(StringBuilder buf, String comment) {\n         return buf.append(\"-- \").append(comment);\n     }\n \n@@ -3361,7 +3374,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n         if (nextSequenceQuery == null)\n             return null;\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE SEQUENCE \");\n         String seqName = checkNameLength(getFullName(seq), maxTableNameLength, \n                 \"long-seq-name\");\n@@ -3387,15 +3400,15 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      * (&lt;col list&gt;)</code> by default.\n      */\n     public String[] getCreateIndexSQL(Index index) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE \");\n         if (index.isUnique())\n             buf.append(\"UNIQUE \");\n-        String indexName = checkNameLength(index.getName(), maxIndexNameLength, \n+        String indexName = checkNameLength(toDBName(index.getIdentifier()), maxIndexNameLength, \n                 \"long-index-name\");\n         buf.append(\"INDEX \").append(indexName);\n         buf.append(\" ON \").append(getFullName(index.getTable(), false));\n-        buf.append(\" (\").append(Strings.join(index.getColumns(), \", \")).\n+        buf.append(\" (\").append(namingUtil.appendColumns(index.getColumns())).\n             append(\")\");\n \n         return new String[]{ buf.toString() };\n@@ -3461,11 +3474,11 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      * &lt;pk name&gt;</code> by default.\n      */\n     public String[] getDropPrimaryKeySQL(PrimaryKey pk) {\n-        if (pk.getName() == null)\n+        if (DBIdentifier.isNull(pk.getIdentifier()))\n             return new String[0];\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(pk.getTable(), false)\n-            + \" DROP CONSTRAINT \" + pk.getName() };\n+            + \" DROP CONSTRAINT \" + toDBName(pk.getIdentifier()) };\n     }\n \n     /**\n@@ -3489,18 +3502,18 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      * &lt;fk name&gt;</code> by default.\n      */\n     public String[] getDropForeignKeySQL(ForeignKey fk, Connection conn) {\n-        if (fk.getName() == null) {\n+        if (DBIdentifier.isNull(fk.getIdentifier())) {\n             String[] retVal;\n-            String fkName = fk.loadNameFromDB(this,conn);\n+            DBIdentifier fkName = fk.loadIdentifierFromDB(this,conn);\n             retVal = (fkName == null) ?  new String[0] :\n                 new String[]{ \"ALTER TABLE \"\n                 + getFullName(fk.getTable(), false)\n-                + \" DROP CONSTRAINT \" + fkName };\n-            return retVal;   \n+                + \" DROP CONSTRAINT \" + toDBName(fkName) };\n+            return retVal;\n         }\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(fk.getTable(), false)\n-            + \" DROP CONSTRAINT \" + fk.getName() };\n+            + \" DROP CONSTRAINT \" + toDBName(fk.getIdentifier()) };\n     }\n \n     /**\n@@ -3509,8 +3522,8 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      * {@link #getAddColumnSQL}.\n      */\n     protected String getDeclareColumnSQL(Column col, boolean alter) {\n-        StringBuffer buf = new StringBuffer();\n-        String columnName = checkNameLength(col.getName(), maxColumnNameLength, \n+        StringBuilder buf = new StringBuilder();\n+        String columnName = checkNameLength(toDBName(col.getIdentifier()), maxColumnNameLength, \n                 \"long-column-name\");\n         buf.append(columnName).append(\" \");\n         buf.append(getTypeName(col));\n@@ -3544,17 +3557,17 @@ protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n         if (!createPrimaryKeys)\n             return null;\n \n-        String name = pk.getName();\n+        String name = toDBName(pk.getIdentifier());\n         if (name != null && reservedWordSet.contains(name.toUpperCase()))\n             name = null;\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         if (name != null && CONS_NAME_BEFORE.equals(constraintNameMode))\n             buf.append(\"CONSTRAINT \").append(name).append(\" \");\n         buf.append(\"PRIMARY KEY \");\n         if (name != null && CONS_NAME_MID.equals(constraintNameMode))\n             buf.append(name).append(\" \");\n-        buf.append(\"(\").append(Strings.join(pk.getColumns(), \", \")).\n+        buf.append(\"(\").append(namingUtil.appendColumns(pk.getColumns())).\n             append(\")\");\n         if (name != null && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(name);\n@@ -3596,17 +3609,17 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n         String delAction = getActionName(delActionId);\n         String upAction = getActionName(fk.getUpdateAction());\n \n-        StringBuffer buf = new StringBuffer();\n-        if (fk.getName() != null\n+        StringBuilder buf = new StringBuilder();\n+        if (!DBIdentifier.isNull(fk.getIdentifier())\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n-            buf.append(\"CONSTRAINT \").append(fk.getName()).append(\" \");\n+            buf.append(\"CONSTRAINT \").append(toDBName(fk.getIdentifier())).append(\" \");\n         buf.append(\"FOREIGN KEY \");\n-        if (fk.getName() != null && CONS_NAME_MID.equals(constraintNameMode))\n-            buf.append(fk.getName()).append(\" \");\n-        buf.append(\"(\").append(Strings.join(locals, \", \")).append(\")\");\n+        if (!DBIdentifier.isNull(fk.getIdentifier()) && CONS_NAME_MID.equals(constraintNameMode))\n+            buf.append(toDBName(fk.getIdentifier())).append(\" \");\n+        buf.append(\"(\").append(namingUtil.appendColumns(locals)).append(\")\");\n         buf.append(\" REFERENCES \");\n         buf.append(getFullName(foreigns[0].getTable(), false));\n-        buf.append(\" (\").append(Strings.join(foreigns, \", \")).append(\")\");\n+        buf.append(\" (\").append(namingUtil.appendColumns(foreigns)).append(\")\");\n         if (delAction != null)\n             buf.append(\" ON DELETE \").append(delAction);\n         if (upAction != null)\n@@ -3615,9 +3628,9 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             buf.append(\" INITIALLY DEFERRED\");\n         if (supportsDeferredForeignKeyConstraints())\n             buf.append(\" DEFERRABLE\");\n-        if (fk.getName() != null\n+        if (!DBIdentifier.isNull(fk.getIdentifier())\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n-            buf.append(\" CONSTRAINT \").append(fk.getName());\n+            buf.append(\" CONSTRAINT \").append(toDBName(fk.getIdentifier()));\n         return buf.toString();\n     }\n \n@@ -3701,23 +3714,23 @@ protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n             || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n-        StringBuffer buf = new StringBuffer();\n-        if (unq.getName() != null\n+        StringBuilder buf = new StringBuilder();\n+        if (!DBIdentifier.isNull(unq.getIdentifier())\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n-            buf.append(\"CONSTRAINT \").append(checkNameLength(unq.getName(), \n+            buf.append(\"CONSTRAINT \").append(checkNameLength(toDBName(unq.getIdentifier()), \n                 maxConstraintNameLength, \"long-constraint-name\")).append(\" \");\n         buf.append(\"UNIQUE \");\n-        if (unq.getName() != null && CONS_NAME_MID.equals(constraintNameMode))\n-            buf.append(unq.getName()).append(\" \");\n-        buf.append(\"(\").append(Strings.join(unq.getColumns(), \", \")).\n+        if (!DBIdentifier.isNull(unq.getIdentifier()) && CONS_NAME_MID.equals(constraintNameMode))\n+            buf.append(toDBName(unq.getIdentifier())).append(\" \");\n+        buf.append(\"(\").append(namingUtil.appendColumns(unq.getColumns())).\n             append(\")\");\n         if (unq.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n         if (supportsDeferredUniqueConstraints())\n             buf.append(\" DEFERRABLE\");\n-        if (unq.getName() != null\n+        if (!DBIdentifier.isNull(unq.getIdentifier())\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n-            buf.append(\" CONSTRAINT \").append(unq.getName());\n+            buf.append(\" CONSTRAINT \").append(toDBName(unq.getIdentifier()));\n         return buf.toString();\n     }\n \n@@ -3747,13 +3760,35 @@ protected boolean supportsDeferredUniqueConstraints() {\n      * @param schema the table schema; may be null\n      * @param targetSchema if true, then the given schema was listed by\n      * the user as one of his schemas\n+     * @deprecated\n      */\n     public boolean isSystemTable(String name, String schema,\n         boolean targetSchema) {\n-        if (systemTableSet.contains(name.toUpperCase()))\n+        return isSystemTable(DBIdentifier.newTable(name),\n+            DBIdentifier.newSchema(schema), targetSchema);\n+    }\n+\n+    /**\n+     * This method is used to filter system tables from database metadata.\n+     * Return true if the given table name represents a system table that\n+     * should not appear in the schema definition. By default, returns\n+     * true only if the given table is in the internal list of system tables,\n+     * or if the given schema is in the list of system schemas and is not\n+     * the target schema.\n+     *\n+     * @param name the table name\n+     * @param schema the table schema; may be null\n+     * @param targetSchema if true, then the given schema was listed by\n+     * the user as one of his schemas\n+     */\n+    public boolean isSystemTable(DBIdentifier name, DBIdentifier schema,\n+        boolean targetSchema) {\n+        DBIdentifier sName = DBIdentifier.toUpper(name);\n+        if (systemTableSet.contains(sName.getName()))\n             return true;\n+        DBIdentifier schName = DBIdentifier.toUpper(schema);\n         return !targetSchema && schema != null\n-            && systemSchemaSet.contains(schema.toUpperCase());\n+            && systemSchemaSet.contains(schName.getName());\n     }\n \n     /**\n@@ -3763,10 +3798,23 @@ public boolean isSystemTable(String name, String schema,\n      *\n      * @param name the index name\n      * @param table the index table\n+     * @deprecated\n      */\n     public boolean isSystemIndex(String name, Table table) {\n         return false;\n     }\n+    \n+    /**\n+     * This method is used to filter system indexes from database metadata.\n+     * Return true if the given index name represents a system index that\n+     * should not appear in the schema definition. Returns false by default.\n+     *\n+     * @param name the index name\n+     * @param table the index table\n+     */\n+    public boolean isSystemIndex(DBIdentifier name, Table table) {\n+        return false;\n+    }\n \n     /**\n      * This method is used to filter system sequences from database metadata.\n@@ -3778,23 +3826,56 @@ public boolean isSystemIndex(String name, Table table) {\n      * @param schema the table schema; may be null\n      * @param targetSchema if true, then the given schema was listed by\n      * the user as one of his schemas\n+     * @deprecated\n      */\n     public boolean isSystemSequence(String name, String schema,\n         boolean targetSchema) {\n-        return !targetSchema && schema != null\n-            && systemSchemaSet.contains(schema.toUpperCase());\n+        return isSystemSequence(DBIdentifier.newSequence(name), \n+            DBIdentifier.newSchema(schema), targetSchema);\n+    }\n+\n+    /**\n+     * This method is used to filter system sequences from database metadata.\n+     * Return true if the given sequence represents a system sequence that\n+     * should not appear in the schema definition. Returns true if system\n+     * schema by default.\n+     *\n+     * @param name the table name\n+     * @param schema the table schema; may be null\n+     * @param targetSchema if true, then the given schema was listed by\n+     * the user as one of his schemas\n+     */\n+    public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n+        boolean targetSchema) {\n+        return !targetSchema && !DBIdentifier.isNull(schema)\n+            && systemSchemaSet.contains(DBIdentifier.toUpper(schema).getName());\n     }\n \n     /**\n      * Reflect on the schema to find tables matching the given name pattern.\n+     * @deprecated\n      */\n     public Table[] getTables(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, Connection conn)\n         throws SQLException {\n+        return getTables(meta, DBIdentifier.newCatalog(catalog), DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName), conn);\n+    }\n+\n+    \n+    /**\n+     * Reflect on the schema to find tables matching the given name pattern.\n+     */\n+    public Table[] getTables(DatabaseMetaData meta, DBIdentifier sqlCatalog,\n+        DBIdentifier sqlSchemaName, DBIdentifier sqlTableName, Connection conn)\n+        throws SQLException {\n+                \n+        String schemaName = DBIdentifier.isNull(sqlSchemaName) ? null : sqlSchemaName.getName();\n         if (!supportsSchemaForGetTables)\n             schemaName = null;\n-        else\n-            schemaName = getSchemaNameForMetadata(schemaName);\n+        else {\n+            schemaName = getSchemaNameForMetadata(sqlSchemaName);\n+        }\n \n         String[] types = Strings.split(tableTypes, \",\", 0);\n         for (int i = 0; i < types.length; i++)\n@@ -3803,8 +3884,8 @@ public boolean isSystemSequence(String name, String schema,\n         beforeMetadataOperation(conn);\n         ResultSet tables = null;\n         try {\n-            tables = meta.getTables(getCatalogNameForMetadata(catalog),\n-                schemaName, getTableNameForMetadata(tableName), types);\n+            tables = meta.getTables(getCatalogNameForMetadata(sqlCatalog),\n+                schemaName, getTableNameForMetadata(sqlTableName), types);\n             List tableList = new ArrayList();\n             while (tables != null && tables.next())\n                 tableList.add(newTable(tables));\n@@ -3824,18 +3905,27 @@ public boolean isSystemSequence(String name, String schema,\n     protected Table newTable(ResultSet tableMeta)\n         throws SQLException {\n         Table t = new Table();\n-        t.setName(tableMeta.getString(\"TABLE_NAME\"));\n+        t.setIdentifier(fromDBName(tableMeta.getString(\"TABLE_NAME\"), DBIdentifierType.TABLE));\n         return t;\n     }\n \n     /**\n      * Reflect on the schema to find sequences matching the given name pattern.\n      * Returns an empty array by default, as there is no standard way to\n      * retrieve a list of sequences.\n+     * @deprecated\n      */\n     public Sequence[] getSequences(DatabaseMetaData meta, String catalog,\n         String schemaName, String sequenceName, Connection conn)\n         throws SQLException {\n+        return getSequences(meta, DBIdentifier.newCatalog(catalog), DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newSequence(sequenceName), conn);\n+        \n+    }\n+\n+    public Sequence[] getSequences(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier sequenceName, Connection conn)\n+        throws SQLException {\n         String str = getSequencesSQL(schemaName, sequenceName);\n         if (str == null)\n             return new Sequence[0];\n@@ -3844,10 +3934,10 @@ protected Table newTable(ResultSet tableMeta)\n         ResultSet rs = null;\n         try {\n             int idx = 1;\n-            if (schemaName != null)\n-                stmnt.setString(idx++, schemaName.toUpperCase());\n-            if (sequenceName != null)\n-                stmnt.setString(idx++, sequenceName);\n+            if (!DBIdentifier.isNull(schemaName))\n+                stmnt.setString(idx++, DBIdentifier.toUpper(schemaName).getName());\n+            if (!DBIdentifier.isNull(sequenceName))\n+                stmnt.setString(idx++, sequenceName.getName());\n             setQueryTimeout(stmnt, conf.getQueryTimeout());\n             rs = executeQuery(conn, stmnt, str);\n             return getSequence(rs);            \n@@ -3871,38 +3961,64 @@ protected Table newTable(ResultSet tableMeta)\n     protected Sequence newSequence(ResultSet sequenceMeta)\n         throws SQLException {\n         Sequence seq = new Sequence();\n-        seq.setSchemaName(sequenceMeta.getString(\"SEQUENCE_SCHEMA\"));\n-        seq.setName(sequenceMeta.getString(\"SEQUENCE_NAME\"));\n+        seq.setSchemaIdentifier(fromDBName(StringUtils.stripEnd(sequenceMeta.getString(\"SEQUENCE_SCHEMA\"), null),\n+            DBIdentifierType.SCHEMA));\n+        seq.setIdentifier(fromDBName(StringUtils.stripEnd(sequenceMeta.getString(\"SEQUENCE_NAME\"), null),\n+            DBIdentifierType.SEQUENCE));\n         return seq;\n     }\n \n     /**\n      * Return the SQL needed to select the list of sequences.\n+     * @deprecated\n      */\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return null;\n     }\n \n+    protected String getSequencesSQL(DBIdentifier schemaName, DBIdentifier sequenceName) {\n+        return null;\n+    }\n+\n     /**\n      * Reflect on the schema to find columns matching the given table and\n      * column patterns.\n+     * @deprecated\n      */\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n-        if (tableName == null && !supportsNullTableForGetColumns)\n-            return null;\n+        return getColumns(meta, DBIdentifier.newCatalog(catalog),\n+            DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName),\n+            DBIdentifier.newColumn(columnName),\n+            conn);\n+    }\n \n+    /**\n+     * Reflect on the schema to find columns matching the given table and\n+     * column patterns.\n+     */\n+    public Column[] getColumns(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, DBIdentifier columnName, Connection conn)\n+        throws SQLException {\n+        if (DBIdentifier.isNull(tableName) && !supportsNullTableForGetColumns)\n+            return null;\n+        \n+        String sqlSchemaName = null;\n+        if (!DBIdentifier.isNull(schemaName)) {\n+            sqlSchemaName = schemaName.getName();\n+        }\n         if (!supportsSchemaForGetColumns)\n-            schemaName = null;\n+            sqlSchemaName = null;\n         else\n-            schemaName = getSchemaNameForMetadata(schemaName);\n+            sqlSchemaName = getSchemaNameForMetadata(schemaName);\n \n         beforeMetadataOperation(conn);\n         ResultSet cols = null;\n         try {\n             cols = meta.getColumns(getCatalogNameForMetadata(catalog),\n-                schemaName, getTableNameForMetadata(tableName),\n+                sqlSchemaName, getTableNameForMetadata(tableName),\n                 getColumnNameForMetadata(columnName));\n \n             List columnList = new ArrayList();\n@@ -3925,11 +4041,11 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n     protected Column newColumn(ResultSet colMeta)\n         throws SQLException {\n         Column c = new Column();\n-        c.setSchemaName(colMeta.getString(\"TABLE_SCHEM\"));\n-        c.setTableName(colMeta.getString(\"TABLE_NAME\"));\n-        c.setName(colMeta.getString(\"COLUMN_NAME\"));\n+        c.setSchemaIdentifier(fromDBName(colMeta.getString(\"TABLE_SCHEM\"), DBIdentifierType.SCHEMA));\n+        c.setTableIdentifier(fromDBName(colMeta.getString(\"TABLE_NAME\"), DBIdentifierType.TABLE));\n+        c.setIdentifier(fromDBName(colMeta.getString(\"COLUMN_NAME\"), DBIdentifierType.COLUMN));\n         c.setType(colMeta.getInt(\"DATA_TYPE\"));\n-        c.setTypeName(colMeta.getString(\"TYPE_NAME\"));\n+        c.setTypeIdentifier(fromDBName(colMeta.getString(\"TYPE_NAME\"), DBIdentifierType.COLUMN_DEFINITION));\n         c.setSize(colMeta.getInt(\"COLUMN_SIZE\"));\n         c.setDecimalDigits(colMeta.getInt(\"DECIMAL_DIGITS\"));\n         c.setNotNull(colMeta.getInt(\"NULLABLE\")\n@@ -3943,10 +4059,21 @@ protected Column newColumn(ResultSet colMeta)\n \n     /**\n      * Reflect on the schema to find primary keys for the given table pattern.\n+     * @deprecated\n      */\n     public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta,\n         String catalog, String schemaName, String tableName, Connection conn)\n         throws SQLException {\n+        return getPrimaryKeys(meta, DBIdentifier.newCatalog(catalog), DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName), conn);\n+    }\n+\n+    /**\n+     * Reflect on the schema to find primary keys for the given table pattern.\n+     */\n+    public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta,\n+        DBIdentifier catalog, DBIdentifier schemaName, DBIdentifier tableName, Connection conn)\n+        throws SQLException {\n         if (useGetBestRowIdentifierForPrimaryKeys)\n             return getPrimaryKeysFromBestRowIdentifier(meta, catalog,\n                 schemaName, tableName, conn);\n@@ -3956,10 +4083,21 @@ protected Column newColumn(ResultSet colMeta)\n \n     /**\n      * Reflect on the schema to find primary keys for the given table pattern.\n+     * @deprecated\n      */\n     protected PrimaryKey[] getPrimaryKeysFromGetPrimaryKeys\n         (DatabaseMetaData meta, String catalog, String schemaName,\n             String tableName, Connection conn)\n+    throws SQLException {\n+        return getPrimaryKeysFromGetPrimaryKeys(meta, DBIdentifier.newCatalog(catalog),\n+            DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName), conn);\n+    }\n+    /**\n+     * Reflect on the schema to find primary keys for the given table pattern.\n+     */\n+    protected PrimaryKey[] getPrimaryKeysFromGetPrimaryKeys\n+        (DatabaseMetaData meta, DBIdentifier catalog, DBIdentifier schemaName,\n+            DBIdentifier tableName, Connection conn)\n         throws SQLException {\n         if (tableName == null && !supportsNullTableForGetPrimaryKeys)\n             return null;\n@@ -3991,35 +4129,46 @@ protected Column newColumn(ResultSet colMeta)\n     protected PrimaryKey newPrimaryKey(ResultSet pkMeta)\n         throws SQLException {\n         PrimaryKey pk = new PrimaryKey();\n-        pk.setSchemaName(pkMeta.getString(\"TABLE_SCHEM\"));\n-        pk.setTableName(pkMeta.getString(\"TABLE_NAME\"));\n-        pk.setColumnName(pkMeta.getString(\"COLUMN_NAME\"));\n-        pk.setName(pkMeta.getString(\"PK_NAME\"));\n+        pk.setSchemaIdentifier(fromDBName(pkMeta.getString(\"TABLE_SCHEM\"), DBIdentifierType.SCHEMA));\n+        pk.setTableIdentifier(fromDBName(pkMeta.getString(\"TABLE_NAME\"), DBIdentifierType.TABLE));\n+        pk.setColumnIdentifier(fromDBName(pkMeta.getString(\"COLUMN_NAME\"), DBIdentifierType.COLUMN));\n+        pk.setIdentifier(fromDBName(pkMeta.getString(\"PK_NAME\"), DBIdentifierType.CONSTRAINT));\n         return pk;\n     }\n \n     /**\n      * Reflect on the schema to find primary keys for the given table pattern.\n+     * @deprecated\n      */\n     protected PrimaryKey[] getPrimaryKeysFromBestRowIdentifier\n         (DatabaseMetaData meta, String catalog, String schemaName,\n-            String tableName, Connection conn)\n+            String tableName, Connection conn) throws SQLException {\n+        return getPrimaryKeysFromBestRowIdentifier(meta, DBIdentifier.newCatalog(catalog),\n+            DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName), conn);\n+    }\n+\n+    /**\n+     * Reflect on the schema to find primary keys for the given table pattern.\n+     */\n+    protected PrimaryKey[] getPrimaryKeysFromBestRowIdentifier\n+        (DatabaseMetaData meta, DBIdentifier catalog, DBIdentifier schemaName,\n+            DBIdentifier tableName, Connection conn)\n         throws SQLException {\n         if (tableName == null)\n             return null;\n \n         beforeMetadataOperation(conn);\n         ResultSet pks = null;\n         try {\n-            pks = meta.getBestRowIdentifier(catalog, schemaName,\n-                tableName, 0, false);\n+            pks = meta.getBestRowIdentifier(toDBName(catalog), toDBName(schemaName),\n+                toDBName(tableName), 0, false);\n \n             List pkList = new ArrayList();\n             while (pks != null && pks.next()) {\n                 PrimaryKey pk = new PrimaryKey();\n-                pk.setSchemaName(schemaName);\n-                pk.setTableName(tableName);\n-                pk.setColumnName(pks.getString(\"COLUMN_NAME\"));\n+                pk.setSchemaIdentifier(schemaName);\n+                pk.setTableIdentifier(tableName);\n+                pk.setColumnIdentifier(fromDBName(pks.getString(\"COLUMN_NAME\"), DBIdentifierType.COLUMN));\n                 pkList.add(pk);\n             }\n             return (PrimaryKey[]) pkList.toArray\n@@ -4035,11 +4184,24 @@ protected PrimaryKey newPrimaryKey(ResultSet pkMeta)\n \n     /**\n      * Reflect on the schema to find indexes matching the given table pattern.\n+     * @deprecated\n      */\n     public Index[] getIndexInfo(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, boolean unique,\n         boolean approx, Connection conn)\n         throws SQLException {\n+        return getIndexInfo(meta, DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName), unique,\n+            approx, conn);\n+    }\n+\n+    /**\n+     * Reflect on the schema to find indexes matching the given table pattern.\n+     */\n+    public Index[] getIndexInfo(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, boolean unique,\n+        boolean approx, Connection conn)\n+        throws SQLException {\n         if (tableName == null && !supportsNullTableForGetIndexInfo)\n             return null;\n \n@@ -4069,21 +4231,54 @@ protected PrimaryKey newPrimaryKey(ResultSet pkMeta)\n     protected Index newIndex(ResultSet idxMeta)\n         throws SQLException {\n         Index idx = new Index();\n-        idx.setSchemaName(idxMeta.getString(\"TABLE_SCHEM\"));\n-        idx.setTableName(idxMeta.getString(\"TABLE_NAME\"));\n-        idx.setColumnName(idxMeta.getString(\"COLUMN_NAME\"));\n-        idx.setName(idxMeta.getString(\"INDEX_NAME\"));\n+        idx.setSchemaIdentifier(fromDBName(idxMeta.getString(\"TABLE_SCHEM\"), DBIdentifierType.SCHEMA));\n+        idx.setTableIdentifier(fromDBName(idxMeta.getString(\"TABLE_NAME\"), DBIdentifierType.TABLE));\n+        idx.setColumnIdentifier(fromDBName(idxMeta.getString(\"COLUMN_NAME\"), DBIdentifierType.COLUMN));\n+        idx.setIdentifier(fromDBName(idxMeta.getString(\"INDEX_NAME\"), DBIdentifierType.INDEX));\n         idx.setUnique(!idxMeta.getBoolean(\"NON_UNIQUE\"));\n         return idx;\n     }\n \n     /**\n      * Reflect on the schema to return foreign keys imported by the given\n      * table pattern.\n+     * @deprecated\n      */\n     public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, Connection conn)\n         throws SQLException {\n+        return getImportedKeys(meta, catalog, schemaName, tableName, conn, true);\n+    }\n+\n+    /**\n+     * Reflect on the schema to return foreign keys imported by the given\n+     * table pattern.\n+     */\n+    public ForeignKey[] getImportedKeys(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, Connection conn)\n+        throws SQLException {\n+        return getImportedKeys(meta, catalog, schemaName, tableName, conn, true);\n+    }\n+\n+    /**\n+     * Reflect on the schema to return full foreign keys imported by the given\n+     * table pattern.\n+     * @deprecated\n+     */\n+    public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n+        String schemaName, String tableName, Connection conn, boolean partialKeys) \n+        throws SQLException {\n+        return getImportedKeys(meta, DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName), DBIdentifier.newTable(tableName), conn, partialKeys);\n+    }\n+    \n+    /**\n+     * Reflect on the schema to return full foreign keys imported by the given\n+     * table pattern.\n+     */\n+    public ForeignKey[] getImportedKeys(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, Connection conn, boolean partialKeys)\n+        throws SQLException {\n         if (!supportsForeignKeys)\n             return null;\n         if (tableName == null && !supportsNullTableForGetImportedKeys)\n@@ -4096,18 +4291,49 @@ protected Index newIndex(ResultSet idxMeta)\n                 getSchemaNameForMetadata(schemaName),\n                 getTableNameForMetadata(tableName));\n \n-            List importedKeyList = new ArrayList();\n-            while (keys != null && keys.next())\n-                importedKeyList.add(newForeignKey(keys));\n+            List<ForeignKey> importedKeyList = new ArrayList<ForeignKey>();\n+            Map<FKMapKey, ForeignKey> fkMap = new HashMap<FKMapKey, ForeignKey>();\n+\n+            while (keys != null && keys.next()) {\n+                ForeignKey nfk = newForeignKey(keys);\n+                if (!partialKeys) {\n+                    ForeignKey fk = combineForeignKey(fkMap, nfk);\n+                    // If the key returned != new key, fk col was combined\n+                    // with existing fk.\n+                    if (fk != nfk) {\n+                        continue;\n+                    }\n+                }\n+                importedKeyList.add(nfk);\n+            }\n             return (ForeignKey[]) importedKeyList.toArray\n                 (new ForeignKey[importedKeyList.size()]);\n         } finally {\n-            if (keys != null)\n+            if (keys != null) {\n                 try {\n                     keys.close();\n                 } catch (Exception e) {\n                 }\n+            }\n+        }\n+    }\n+    \n+    /*\n+     * Combines partial foreign keys into singular key\n+     */\n+    protected ForeignKey combineForeignKey(Map<FKMapKey, ForeignKey> fkMap,\n+        ForeignKey fk) {\n+        \n+        FKMapKey fkmk = new FKMapKey(fk);\n+        ForeignKey baseKey = fkMap.get(fkmk);\n+        // Found the FK, add the additional column\n+        if (baseKey != null) {\n+            baseKey.addColumn(fk);\n+            return baseKey;\n         }\n+        // fkey is new\n+        fkMap.put(fkmk, fk);\n+        return fk;\n     }\n \n     /**\n@@ -4116,13 +4342,13 @@ protected Index newIndex(ResultSet idxMeta)\n     protected ForeignKey newForeignKey(ResultSet fkMeta)\n         throws SQLException {\n         ForeignKey fk = new ForeignKey();\n-        fk.setSchemaName(fkMeta.getString(\"FKTABLE_SCHEM\"));\n-        fk.setTableName(fkMeta.getString(\"FKTABLE_NAME\"));\n-        fk.setColumnName(fkMeta.getString(\"FKCOLUMN_NAME\"));\n-        fk.setName(fkMeta.getString(\"FK_NAME\"));\n-        fk.setPrimaryKeySchemaName(fkMeta.getString(\"PKTABLE_SCHEM\"));\n-        fk.setPrimaryKeyTableName(fkMeta.getString(\"PKTABLE_NAME\"));\n-        fk.setPrimaryKeyColumnName(fkMeta.getString(\"PKCOLUMN_NAME\"));\n+        fk.setSchemaIdentifier(fromDBName(fkMeta.getString(\"FKTABLE_SCHEM\"), DBIdentifierType.SCHEMA));\n+        fk.setTableIdentifier(fromDBName(fkMeta.getString(\"FKTABLE_NAME\"), DBIdentifierType.TABLE));\n+        fk.setColumnIdentifier(fromDBName(fkMeta.getString(\"FKCOLUMN_NAME\"), DBIdentifierType.COLUMN));\n+        fk.setIdentifier(fromDBName(fkMeta.getString(\"FK_NAME\"), DBIdentifierType.FOREIGN_KEY));\n+        fk.setPrimaryKeySchemaIdentifier(fromDBName(fkMeta.getString(\"PKTABLE_SCHEM\"), DBIdentifierType.SCHEMA));\n+        fk.setPrimaryKeyTableIdentifier(fromDBName(fkMeta.getString(\"PKTABLE_NAME\"), DBIdentifierType.TABLE));\n+        fk.setPrimaryKeyColumnIdentifier(fromDBName(fkMeta.getString(\"PKCOLUMN_NAME\"), DBIdentifierType.COLUMN));\n         fk.setKeySequence(fkMeta.getShort(\"KEY_SEQ\"));\n         fk.setDeferred(fkMeta.getShort(\"DEFERRABILITY\")\n             == DatabaseMetaData.importedKeyInitiallyDeferred);\n@@ -4150,7 +4376,15 @@ protected ForeignKey newForeignKey(ResultSet fkMeta)\n      * from {@link DatabaseMetaData}.\n      */\n     protected String getTableNameForMetadata(String tableName) {\n-        return convertSchemaCase(tableName);\n+        return convertSchemaCase(DBIdentifier.newTable(tableName));\n+    }\n+\n+    /**\n+     * Returns the table name that will be used for obtaining information\n+     * from {@link DatabaseMetaData}.\n+     */\n+    protected String getTableNameForMetadata(DBIdentifier tableName) {\n+        return convertSchemaCase(tableName.getUnqualifiedName());\n     }\n \n     /**\n@@ -4160,6 +4394,16 @@ protected String getTableNameForMetadata(String tableName) {\n     protected String getSchemaNameForMetadata(String schemaName) {\n         if (schemaName == null)\n             schemaName = conf.getSchema();\n+        return convertSchemaCase(DBIdentifier.newSchema(schemaName));\n+    }\n+\n+    /**\n+     * Returns the schema name that will be used for obtaining information\n+     * from {@link DatabaseMetaData}.\n+     */\n+    protected String getSchemaNameForMetadata(DBIdentifier schemaName) {\n+        if (DBIdentifier.isNull(schemaName))\n+            schemaName = DBIdentifier.newSchema(conf.getSchema());\n         return convertSchemaCase(schemaName);\n     }\n \n@@ -4168,6 +4412,14 @@ protected String getSchemaNameForMetadata(String schemaName) {\n      * from {@link DatabaseMetaData}.\n      */\n     protected String getCatalogNameForMetadata(String catalogName) {\n+        return convertSchemaCase(DBIdentifier.newCatalog(catalogName));\n+    }\n+\n+    /**\n+     * Returns the catalog name that will be used for obtaining information\n+     * from {@link DatabaseMetaData}.\n+     */\n+    protected String getCatalogNameForMetadata(DBIdentifier catalogName) {\n         return convertSchemaCase(catalogName);\n     }\n \n@@ -4176,6 +4428,14 @@ protected String getCatalogNameForMetadata(String catalogName) {\n      * from {@link DatabaseMetaData}.\n      */\n     protected String getColumnNameForMetadata(String columnName) {\n+        return convertSchemaCase(DBIdentifier.newColumn(columnName));\n+    }\n+\n+    /**\n+     * Returns the column name that will be used for obtaining information\n+     * from {@link DatabaseMetaData}.\n+     */\n+    protected String getColumnNameForMetadata(DBIdentifier columnName) {\n         return convertSchemaCase(columnName);\n     }\n \n@@ -4184,28 +4444,15 @@ protected String getColumnNameForMetadata(String columnName) {\n      * be able to understand.\n      */\n     public String convertSchemaCase(String objectName) {\n-        if (objectName == null)\n-            return null;\n+        return convertSchemaCase(DBIdentifier.newIdentifier(objectName, DBIdentifierType.DEFAULT, false));\n+    }\n \n-        // Handle delimited string differently. Return unquoted name.\n-        if (delimitIds || isDelimited(objectName)) {\n-            String delimCase = getDelimitedCase();\n-            if (SCHEMA_CASE_UPPER.equals(delimCase)) {\n-                objectName.toUpperCase();\n-            }\n-            else if (SCHEMA_CASE_LOWER.equals(delimCase)) {\n-                objectName.toLowerCase();\n-            }\n-            \n-            return stripDelimiters(objectName);\n-        }\n-        \n-        String scase = getSchemaCase();\n-        if (SCHEMA_CASE_LOWER.equals(scase))\n-            return objectName.toLowerCase();\n-        if (SCHEMA_CASE_PRESERVE.equals(scase))\n-            return objectName;\n-        return objectName.toUpperCase();\n+    /**\n+     * Convert the specified schema name to a name that the database will\n+     * be able to understand.\n+     */\n+    public String convertSchemaCase(DBIdentifier objectName) {\n+        return toDBName(namingUtil.convertSchemaCase(objectName), false);\n     }\n     \n     /**\n@@ -4250,7 +4497,7 @@ public Object getGeneratedKey(Column col, Connection conn)\n         if (query.indexOf('{') != -1) // only if the token is in the string\n         {\n             query = MessageFormat.format(query, new Object[]{\n-                col.getName(), getFullName(col.getTable(), false),\n+                toDBName(col.getIdentifier()), getFullName(col.getTable(), false),\n                 getGeneratedKeySequenceName(col),\n             });\n         }\n@@ -4275,18 +4522,7 @@ public Object getGeneratedKey(Column col, Connection conn)\n      * to be used for auto-assign support.\n      */\n     protected String getGeneratedKeySequenceName(Column col) {\n-        String tname = col.getTableName();\n-        String cname = col.getName();\n-        int max = maxAutoAssignNameLength;\n-        int extraChars = -max + tname.length() + 1 // <tname> + '_'\n-            + cname.length() + 4; // <cname> + '_SEQ'\n-        if (extraChars > 0) {\n-            // this assumes that tname is longer than extraChars\n-            tname = tname.substring(0, tname.length() - extraChars);\n-        }\n-        StringBuffer buf = new StringBuffer(max);\n-        buf.append(tname).append(\"_\").append(cname).append(\"_SEQ\");\n-        return buf.toString();\n+        return toDBName(namingUtil.getGeneratedKeySequenceName(col, maxAutoAssignNameLength));\n     }\n \n     ///////////////////////////////\n@@ -4297,6 +4533,11 @@ public void setConfiguration(Configuration conf) {\n         this.conf = (JDBCConfiguration) conf;\n         this.log = this.conf.getLog(JDBCConfiguration.LOG_JDBC);\n \n+        // Create the naming utility\n+        namingUtil = this.conf.getIdentifierUtilInstance();\n+        namingUtil.setIdentifierConfiguration(this);\n+        configureNamingRules();\n+\n         // warn about unsupported dicts\n         if (log.isWarnEnabled() && !isSupported())\n             log.warn(_loc.get(\"dict-not-supported\", getClass()));\n@@ -4639,7 +4880,11 @@ public SerializedData(byte[] bytes) {\n      * @return\n      */\n     public String getVersionColumn(Column column, String tableAlias) {\n-        return column.toString();\n+        return getVersionColumn(column, DBIdentifier.newTable(tableAlias)).toString();\n+    }\n+\n+    public DBIdentifier getVersionColumn(Column column, DBIdentifier tableAlias) {\n+        return column.getIdentifier();\n     }\n     \n     public void insertBlobForStreamingLoad(Row row, Column col, \n@@ -4712,11 +4957,13 @@ public void updateClob(Select sel, JDBCStore store, Reader reader)\n                 throw new InternalException(_loc.get(\"stream-exception\"));\n             }\n             Clob clob = res.getClob(1);\n-            Writer writer = clob.setCharacterStream(1);\n-            copy(reader, writer);\n-            writer.close();\n-            res.updateClob(1, clob);\n-            res.updateRow();\n+            if (clob != null) {\n+                Writer writer = clob.setCharacterStream(1);\n+                copy(reader, writer);\n+                writer.close();\n+                res.updateClob(1, clob);\n+                res.updateRow();\n+            }\n \n         } catch (IOException ioe) {\n             throw new StoreException(ioe);\n@@ -4765,13 +5012,31 @@ protected long copy(Reader reader, Writer writer) throws IOException {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n+\n+    /**\n+     * Return the correct CAST function syntax.  This should be overriden by subclasses\n+     * that need access to the Column information.\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        return getCastFunction (val, func);\n+    }\n     \n     /**\n      * Create an index if necessary for some database tables\n+     * @deprecated\n      */\n     public void createIndexIfNecessary(Schema schema, String table,\n             Column pkColumn) {\n     }\n+\n+    public void createIndexIfNecessary(Schema schema, DBIdentifier table,\n+        Column pkColumn) {\n+    }\n     \n     /**\n      * Return the batchLimit\n@@ -4900,7 +5165,7 @@ public boolean needsToCreateIndex(Index idx, Table table) {\n     }\n \n     /**\n-     * Return batched statements update succes count\n+     * Return batched statements update success count\n      * @param ps A PreparedStatement\n      * @return return update count\n      */\n@@ -4931,54 +5196,6 @@ final String checkNameLength(String name, int length, String msgKey) {\n                     length));\n         return name;\n     }\n-    \n-    public String delimitString(String name, DBIdentifiers type) {\n-        if (StringUtils.isEmpty(name)) {\n-            return null;\n-        }\n-        \n-        if (!getSupportsDelimitedIds()) {\n-            // TODO: log (or maybe log in the method itself; so maybe\n-            // merge with next if stmt\n-            return name;\n-        }\n-        \n-        if (!delimitIds) {\n-            return name;\n-        }\n-        // TODO: merge with if stmt above (maybe not, may want to log this)\n-        if (!supportsDelimitedId(type)) {\n-            // TODO: log\n-            return name;\n-        }\n-        String delimitedString = delimiter + name + delimiter;\n-        return delimitedString;\n-    }\n-\n-    /**\n-     * @return the unsupportedDelimitedIds\n-     */\n-    protected EnumSet<DBIdentifiers> getUnsupportedDelimitedIds() {\n-        return unsupportedDelimitedIds;\n-    }\n-    \n-    protected boolean supportsDelimitedId(DBIdentifiers type) {\n-        if (getUnsupportedDelimitedIds().contains(type)) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * @return the delimiter\n-     */\n-    public String getDelimiter() {\n-        return delimiter;\n-    }\n-    \n-    protected String getDelimitedCase() {\n-        return delimitedCase;\n-    }\n \n     protected void setDelimitedCase(DatabaseMetaData metaData) {\n         try {\n@@ -4992,41 +5209,47 @@ else if (metaData.storesLowerCaseQuotedIdentifiers()) {\n                 delimitedCase = SCHEMA_CASE_LOWER;\n             }\n         } catch (SQLException e) {\n-            // TODO log this\n+            getLog().warn(\"cannot-determine-identifier-case\");\n+            if (getLog().isTraceEnabled()) {\n+                getLog().trace(e.toString(), e);\n+            }\n         }\n     }\n     \n     /**\n      * @return the supportsDelimitedIds\n      */\n-    public boolean getSupportsDelimitedIds() {\n-        return supportsDelimitedIds;\n+    public boolean getSupportsDelimitedIdentifiers() {\n+        return supportsDelimitedIdentifiers;\n     }\n \n     /**\n      * @param supportsDelimitedIds the supportsDelimitedIds to set\n      */\n-    public void setSupportsDelimitedIds(DatabaseMetaData metaData) {\n+    public void setSupportsDelimitedIdentifiers(DatabaseMetaData metaData) {\n         try {\n-            supportsDelimitedIds = \n-                metaData.supportsMixedCaseQuotedIdentifiers();\n+            supportsDelimitedIdentifiers = \n+                metaData.supportsMixedCaseQuotedIdentifiers() ||\n+                metaData.storesLowerCaseQuotedIdentifiers() ||\n+                metaData.storesUpperCaseQuotedIdentifiers();\n         } catch (SQLException e) {\n-            // TODO log this, or should we throw an exception?\n+            supportsDelimitedIdentifiers = false;\n+            getLog().warn(_loc.get(\"unknown-delim-support\", e));\n         }\n     }\n \n     /**\n      * @return the delimitIds\n      */\n-    public boolean isDelimitIds() {\n-        return delimitIds;\n+    public boolean getDelimitIdentifiers() {\n+        return delimitIdentifiers;\n     }\n \n     /**\n      * @param delimitIds the delimitIds to set\n      */\n-    public void setDelimitIds(boolean delimitIds) {\n-        this.delimitIds = delimitIds;\n+    public void setDelimitIdentifiers(boolean delimitIds) {\n+        delimitIdentifiers = delimitIds;\n     }\n     \n     /**\n@@ -5056,33 +5279,99 @@ public String getXMLTypeEncoding() {\n     public void setXMLTypeEncoding(String encoding) {\n         xmlTypeEncoding = encoding;\n     }\n+\n+    public Log getLog() { \n+        return log;\n+    }\n+\n+    public boolean delimitAll() {\n+        return delimitIdentifiers;\n+    }\n+\n+    public String getLeadingDelimiter() {\n+        return leadingDelimiter;\n+    }\n+\n+    public void setLeadingDelimiter(String delim) {\n+        leadingDelimiter = delim;\n+    }\n+\n+    public String getIdentifierDelimiter() {\n+        return catalogSeparator;\n+    }\n+\n+    public String getIdentifierConcatenator() {\n+        return nameConcatenator;\n+    }\n     \n-    // TODO: Should we pass in combining char, or just assume '_'?\n-    public String combineNames(String... names) {\n-        boolean delimited = false;\n-        String combined = null;\n-        for (int i = 0; i < names.length; i++) {\n-            String name = names[i];\n-            if (isDelimited(name)) {\n-                delimited = true;\n-                name = stripDelimiters(name);\n-            }\n-            if (i == 0) {\n-                combined = name;\n-            }\n-            else {\n-                combined = combined + \"_\" + name;\n-            }\n+    public String getTrailingDelimiter() {\n+        return trailingDelimiter;\n+    }\n+\n+    public void setTrailingDelimiter(String delim) {\n+        trailingDelimiter = delim;\n+    }\n+\n+    public IdentifierRule getDefaultIdentifierRule() {\n+        if (defaultNamingRule == null) {\n+            defaultNamingRule = namingRules.get(DBIdentifierType.DEFAULT.name());\n         }\n-        \n-        if (delimited) {\n-            combined = addDelimiters(combined);\n+        return defaultNamingRule;\n+    }\n+\n+    public <T> IdentifierRule getIdentifierRule(T t) {\n+        if (t.equals(DBIdentifierType.DEFAULT.name())) {\n+            return getDefaultIdentifierRule();\n         }\n-        \n-        return combined;\n+        IdentifierRule nrule = namingRules.get(t);\n+        if (nrule == null) {\n+            return getDefaultIdentifierRule();\n+        }\n+        return nrule;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Map<String, IdentifierRule> getIdentifierRules() {\n+        return namingRules;\n+    }\n+\n+    /**\n+     * Returns the naming utility used by this dictionary instance\n+     * @return\n+     */\n+    public DBIdentifierUtil getNamingUtil() {\n+        return namingUtil;\n     }\n     \n-    public Log getLog() { \n-        return log;\n+    public String getDelimitedCase() {\n+        return delimitedCase;\n+    }\n+\n+    public String toDBName(DBIdentifier name) {\n+        return getNamingUtil().toDBName(name);\n+    }\n+\n+    public String toDBName(DBIdentifier name, boolean delimit) {\n+        return getNamingUtil().toDBName(name, delimit);\n+    }\n+\n+    public DBIdentifier fromDBName(String name, DBIdentifierType id) {\n+        return getNamingUtil().fromDBName(name, id);\n+    }\n+    \n+    public void setDefaultSchemaName(String defaultSchemaName) {\n+        this.defaultSchemaName = defaultSchemaName;\n+    }\n+\n+    public String getDefaultSchemaName() {\n+        return defaultSchemaName;\n+    }\n+    \n+    public String getConversionKey() {\n+        if (conversionKey == null) {\n+            conversionKey = getLeadingDelimiter() + getIdentifierDelimiter() +\n+            getTrailingDelimiter();\n+        }\n+        return conversionKey;\n     }\n }"},{"sha":"a5e0f8fc96b9b13bf8e2de6079554c507270aadd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -154,6 +154,18 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n                         DBDictionary.class)));\n             dict = (DBDictionary) AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(c));\n+        } catch (ClassNotFoundException cnfe) {\n+            // if the dictionary was not found, make another attempt\n+            // at loading the dictionary using the current thread.\n+            try {\n+                Class c = Thread.currentThread().getContextClassLoader().loadClass(dclass);\n+                dict = (DBDictionary) AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(c));\n+            } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n+                throw new UserException(e).setFatal(true);\n+            }\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n                 e = ((PrivilegedActionException) e).getException();\n@@ -284,7 +296,7 @@ private static String dictionaryClassForString(String prod\n     public static String toString(DatabaseMetaData meta)\n         throws SQLException {\n         String lineSep = J2DoPrivHelper.getLineSeparator();\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder(4096);\n         try {\n             buf.append(\"catalogSeparator: \")\n                 .append(meta.getCatalogSeparator())"},{"sha":"11527e4f30b1f52e644e6386d180f3de8039182b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -40,14 +40,13 @@\n      */\n     public boolean shutdownOnClose = true;\n     \n-    private EnumSet<DBIdentifiers> unsupportedDelimitedIds =\n-        EnumSet.of(DBIdentifiers.COLUMN_COLUMN_DEFINITION); \n-\n     public DerbyDictionary() {\n         platform = \"Apache Derby\";\n         validationSQL = \"VALUES(1)\";\n         stringLengthFunction = \"LENGTH({0})\";\n         substringFunctionName = \"SUBSTR\";\n+        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength + \")))\";\n+        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength + \")))\";\n \n         // Derby name length restriction has been relaxed \n         //http://www.archivum.info/derby-dev@db.apache.org/2004-12/msg00270.html\n@@ -61,6 +60,7 @@ public DerbyDictionary() {\n \n         allowsAliasInBulkClause = false;\n         supportsDeferredConstraints = false;\n+        supportsParameterInSelect = false;\n         supportsSelectForUpdate = true;\n         supportsDefaultDeleteAction = false;\n         requiresCastForMathFunctions = true;\n@@ -158,12 +158,4 @@ protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n         return recoverable;\n     }\n \n-    /**\n-     * @return the unsupportedDelimitedIds\n-     */\n-    @Override\n-    protected EnumSet<DBIdentifiers> getUnsupportedDelimitedIds() {\n-        return unsupportedDelimitedIds;\n-    }\n-\n }"},{"sha":"b9b589d95f1ba96e806c00c64de0d017b183f1d4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/EmpressDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/EmpressDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/EmpressDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/EmpressDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -135,7 +135,8 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         // empress wants dropped columns in the form: ALTER TABLE foo\n         // DELETE columnToDrop\n         return new String[]{ \"ALTER TABLE \"\n-            + getFullName(column.getTable(), false) + \" DELETE \" + column };\n+            + getFullName(column.getTable(), false) + \" DELETE \" + \n+            getColumnDBName(column) };\n     }\n \n     public void setFloat(PreparedStatement stmnt, int idx, float val,"},{"sha":"4eebd4cf6bd7d3c71172cae2634afaa78d6f7fb2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -29,12 +29,14 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Unique;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UnsupportedException;\n \n@@ -285,8 +287,15 @@ public String getPlaceholderValueString(Column col) {\n      */\n     @Override\n     protected String getTableNameForMetadata(String tableName) {\n-        return (tableName == null) ? \"%\" : super\n-            .getTableNameForMetadata(tableName);\n+        return (tableName == null) ? IdentifierUtil.PERCENT : \n+            getTableNameForMetadata(DBIdentifier.newTable(tableName));\n+    }\n+\n+    protected String getTableNameForMetadata(DBIdentifier tableName) {\n+        if (DBIdentifier.isNull(tableName)) {\n+            return IdentifierUtil.PERCENT;\n+        }\n+        return super.getTableNameForMetadata(tableName);\n     }\n \n     /**\n@@ -306,7 +315,7 @@ protected String getColumnNameForMetadata(String columnName) {\n     @Override\n     public String[] getDropColumnSQL(Column column) {\n         return new String[] { \"ALTER TABLE \"\n-            + getFullName(column.getTable(), false) + \" DROP \" + column };\n+            + getFullName(column.getTable(), false) + \" DROP \" + getColumnDBName(column) };\n     }\n \n     /**\n@@ -338,6 +347,11 @@ protected String getColumnNameForMetadata(String columnName) {\n      */\n     @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n+        return getSequencesSQL(DBIdentifier.newSchema(schemaName), DBIdentifier.newSequence(sequenceName));\n+    }\n+\n+    @Override\n+    protected String getSequencesSQL(DBIdentifier schemaName, DBIdentifier sequenceName) {\n         StringBuilder buf = new StringBuilder(sequenceSQL);\n         if (sequenceName != null)\n             buf.append(sequenceNameSQL);\n@@ -354,7 +368,7 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n     @Override\n     protected Sequence newSequence(ResultSet sequenceMeta) throws SQLException {\n         Sequence seq = super.newSequence(sequenceMeta);\n-        seq.setName(seq.getName().trim());\n+        seq.setIdentifier(DBIdentifier.trim(seq.getIdentifier()));\n         return seq;\n     }\n "},{"sha":"9966163936e997576bd4749a407e61a64bfa1491","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FoxProDictionary.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FoxProDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FoxProDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FoxProDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -25,6 +25,7 @@\n import java.sql.SQLException;\n import java.sql.Types;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n@@ -83,6 +84,7 @@ public FoxProDictionary() {\n         characterColumnSize = 240;\n     }\n \n+    @Override\n     public String getString(ResultSet rs, int column)\n         throws SQLException {\n         // foxpro doesn't auto-truncate values.\n@@ -92,6 +94,7 @@ public String getString(ResultSet rs, int column)\n         return str;\n     }\n \n+    @Override\n     public void setNull(PreparedStatement stmnt, int idx, int colType,\n         Column col)\n         throws SQLException {\n@@ -108,6 +111,7 @@ public void setNull(PreparedStatement stmnt, int idx, int colType,\n         }\n     }\n \n+    @Override\n     protected String appendSize(Column col, String typeName) {\n         // foxpro does not like unsized column declarations.\n         if (col.getSize() == 0) {\n@@ -119,19 +123,30 @@ else if (\"NUMERIC\".equals(typeName))\n         return super.appendSize(col, typeName);\n     }\n \n+    @Override\n     protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n         // this foxpro driver combination does not support primary keys\n         return null;\n     }\n \n+    @Override\n     public String[] getCreateIndexSQL(Index index) {\n         // foxpro JDBC access does not allow the creation of indexes\n         return new String[0];\n     }\n \n+    @Override\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n+        return getColumns(meta, DBIdentifier.newCatalog(catalog), DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName), DBIdentifier.newColumn(columnName), conn);\n+    }\n+    \n+    @Override\n+    public Column[] getColumns(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, DBIdentifier columnName, Connection conn)\n+        throws SQLException {\n         try {\n             Column[] cols = super.getColumns(meta, catalog, schemaName,\n                 tableName, columnName, conn);\n@@ -140,7 +155,7 @@ protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n                 if (cols[i].getType() == 11)\n                     cols[i].setType(Types.TIMESTAMP);\n                     // MEMO maps to LONGVARCHAR during reverse analysis\n-                else if (\"MEMO\".equals(cols[i].getTypeName()))\n+                else if (\"MEMO\".equals(cols[i].getTypeIdentifier().getName()))\n                     cols[i].setType(Types.CLOB);\n             }\n             return cols;\n@@ -153,10 +168,19 @@ else if (\"MEMO\".equals(cols[i].getTypeName()))\n         }\n     }\n \n+    @Override\n     public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, Connection conn)\n         throws SQLException {\n         // this combination does not reliably return PK information\n         return null;\n     }\n+\n+    @Override\n+    public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, Connection conn)\n+        throws SQLException {\n+        // this combination does not reliably return PK information\n+        return null;\n+    }\n }"},{"sha":"8006a64864b73974dfd36bcea04704517046df97","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":38,"deletions":6,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -28,6 +28,7 @@\n import java.util.Locale;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n@@ -87,6 +88,7 @@ public H2Dictionary() {\n             }));\n     }\n \n+    @Override\n     public int getJDBCType(int metaTypeCode, boolean lob) {\n         int type = super.getJDBCType(metaTypeCode, lob);\n         switch (type) {\n@@ -98,27 +100,32 @@ public int getJDBCType(int metaTypeCode, boolean lob) {\n         return type;\n     }\n \n+    @Override\n     public int getPreferredType(int type) {\n         return super.getPreferredType(type);\n     }\n \n+    @Override\n     public String[] getAddPrimaryKeySQL(PrimaryKey pk) {\n         return new String[0];\n     }\n \n+    @Override\n     public String[] getDropPrimaryKeySQL(PrimaryKey pk) {\n         return new String[0];\n     }\n \n+    @Override\n     public String[] getAddColumnSQL(Column column) {\n         return new String[] { \n             \"ALTER TABLE \" + getFullName(column.getTable(), false) \n                 + \" ADD COLUMN \" + getDeclareColumnSQL(column, true) \n         };\n     }\n \n+    @Override\n     public String[] getCreateTableSQL(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE TABLE \").append(getFullName(table, false))\n             .append(\" (\");\n \n@@ -149,6 +156,7 @@ public int getPreferredType(int type) {\n         return new String[] { buf.toString() };\n     }\n \n+    @Override\n     protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n         Column[] cols = pk.getColumns();\n         if (cols.length == 1 && cols[0].isAutoAssigned())\n@@ -160,30 +168,53 @@ public boolean isSystemIndex(String name, Table table) {\n         return name.toUpperCase(Locale.ENGLISH).startsWith(\"SYSTEM_\");\n     }\n \n+    public boolean isSystemIndex(DBIdentifier name, Table table) {\n+        if (DBIdentifier.isNull(name)) {\n+            return false;\n+        }\n+        return name.getName().toUpperCase(Locale.ENGLISH).startsWith(\"SYSTEM_\");\n+    }\n+    \n+    @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        return getSequencesSQL(DBIdentifier.newSchema(schemaName), DBIdentifier.newSequence(sequenceName));\n+    }\n+\n+    @Override\n+    protected String getSequencesSQL(DBIdentifier schemaName, DBIdentifier sequenceName) {\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME FROM \")\n             .append(\"INFORMATION_SCHEMA.SEQUENCES\");\n-        if (schemaName != null || sequenceName != null)\n+        if (!DBIdentifier.isNull(schemaName) || !DBIdentifier.isNull(sequenceName))\n             buf.append(\" WHERE \");\n-        if (schemaName != null) {\n+        if (!DBIdentifier.isNull(schemaName)) {\n             buf.append(\"SEQUENCE_SCHEMA = ?\");\n-            if (sequenceName != null)\n+            if (!DBIdentifier.isNull(sequenceName))\n                 buf.append(\" AND \");\n         }\n-        if (sequenceName != null)\n+        if (!DBIdentifier.isNull(sequenceName))\n             buf.append(\"SEQUENCE_NAME = ?\");\n         return buf.toString();\n     }\n \n+    @Override\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n+        return getColumns(meta, DBIdentifier.newCatalog(catalog), DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName), DBIdentifier.newColumn(columnName), conn);\n+    }\n+\n+    @Override\n+    public Column[] getColumns(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, DBIdentifier columnName, Connection conn)\n+        throws SQLException {\n         Column[] cols = super.getColumns(meta, catalog, schemaName, tableName, \n             columnName, conn);\n         return cols;\n     }\n \n+    @Override\n     protected void appendSelectRange(SQLBuffer buf, long start, long end,\n         boolean subselect) {\n         if (end != Long.MAX_VALUE)\n@@ -192,6 +223,7 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n             buf.append(\" OFFSET \").appendValue(start);\n     }\n \n+    @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(POSITION(\");"},{"sha":"d8e4635354b079f32e5899e7941d95df3cd26ce3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":29,"deletions":3,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.hsqldb.Trace;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n@@ -54,6 +55,7 @@\n     public HSQLDictionary() {\n         platform = \"HSQL\";\n         validationSQL = \"CALL 1\";\n+        concatenateFunction = \"CONCAT({0},{1})\";\n         closePoolSQL = \"SHUTDOWN\";\n \n         supportsAutoAssign = true;\n@@ -96,6 +98,7 @@ public HSQLDictionary() {\n         }));\n     }\n \n+    @Override\n     public int getJDBCType(int metaTypeCode, boolean lob) {\n         int type = super.getJDBCType(metaTypeCode, lob);\n         switch (type) {\n@@ -107,6 +110,7 @@ public int getJDBCType(int metaTypeCode, boolean lob) {\n         return type;\n     }\n \n+    @Override\n     public int getPreferredType(int type) {\n         switch (type) {\n             case Types.CLOB:\n@@ -118,22 +122,26 @@ public int getPreferredType(int type) {\n         }\n     }\n \n+    @Override\n     public String[] getAddPrimaryKeySQL(PrimaryKey pk) {\n         return new String[0];\n     }\n \n+    @Override\n     public String[] getDropPrimaryKeySQL(PrimaryKey pk) {\n         return new String[0];\n     }\n \n+    @Override\n     public String[] getAddColumnSQL(Column column) {\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(column.getTable(), false)\n             + \" ADD COLUMN \" + getDeclareColumnSQL(column, true) };\n     }\n \n+    @Override\n     public String[] getCreateTableSQL(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE \");\n         if (cacheTables)\n             buf.append(\"CACHED \");\n@@ -166,6 +174,7 @@ public int getPreferredType(int type) {\n         return new String[]{ buf.toString() };\n     }\n \n+    @Override\n     protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n         Column[] cols = pk.getColumns();\n         if (cols.length == 1 && cols[0].isAutoAssigned())\n@@ -177,8 +186,17 @@ public boolean isSystemIndex(String name, Table table) {\n         return name.toUpperCase().startsWith(\"SYS_\");\n     }\n \n+    @Override\n+    public boolean isSystemIndex(DBIdentifier name, Table table) {\n+        if (DBIdentifier.isNull(name)) {\n+            return false;\n+        }\n+        return name.getName().toUpperCase().startsWith(\"SYS_\");\n+    }\n+\n+    @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME FROM \").\n             append(\"INFORMATION_SCHEMA.SYSTEM_SEQUENCES\");\n         if (schemaName != null || sequenceName != null)\n@@ -193,6 +211,7 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return buf.toString();\n     }\n \n+    @Override\n     public SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n         SQLBuffer order, boolean distinct, long start, long end,\n@@ -205,18 +224,20 @@ public SQLBuffer toOperation(String op, SQLBuffer selects,\n             order, distinct, start, end, forUpdateClause);\n     }\n \n+    @Override\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n         Column[] cols = super.getColumns(meta, catalog, schemaName, tableName,\n             columnName, conn);\n \n         for (int i = 0; cols != null && i < cols.length; i++)\n-            if (\"BOOLEAN\".equalsIgnoreCase(cols[i].getTypeName()))\n+            if (\"BOOLEAN\".equalsIgnoreCase(cols[i].getTypeIdentifier().getName()))\n                 cols[i].setType(Types.BIT);\n         return cols;\n     }\n \n+    @Override\n     public void setDouble(PreparedStatement stmnt, int idx, double val,\n         Column col)\n         throws SQLException {\n@@ -229,6 +250,7 @@ public void setDouble(PreparedStatement stmnt, int idx, double val,\n         }\n     }\n \n+    @Override\n     public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n         Column col)\n         throws SQLException {\n@@ -250,6 +272,7 @@ public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n         }\n     }\n \n+    @Override\n     protected void appendSelectRange(SQLBuffer buf, long start, long end,\n         boolean subselect) {\n         // HSQL doesn't parameters in range\n@@ -260,6 +283,7 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n             buf.append(String.valueOf(end - start));\n     }\n \n+    @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(LOCATE(\");\n@@ -274,6 +298,7 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         buf.append(\") - 1)\");\n     }\n \n+    @Override\n     public String getPlaceholderValueString(Column col) {\n         String type = getTypeName(col.getType());\n         int idx = type.indexOf(\"{0}\");\n@@ -287,6 +312,7 @@ public String getPlaceholderValueString(Column col) {\n         return \"NULL AS \" + type;\n     }\n \n+    @Override\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n         OpenJPAException ke = super.newStoreException(msg, causes, failed);"},{"sha":"9722fe408142c6e87adbef98b88ac17a2895a010","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -29,6 +29,7 @@\n import java.util.Collection;\n import java.util.Set;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -154,6 +155,7 @@ public InformixDictionary() {\n         trimSchemaName = true;\n     }\n \n+    @Override\n     public void connectedConfiguration(Connection conn)\n         throws SQLException {\n         super.connectedConfiguration(conn);\n@@ -185,6 +187,7 @@ public void connectedConfiguration(Connection conn)\n         }\n     }\n \n+    @Override\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n@@ -198,30 +201,34 @@ public void connectedConfiguration(Connection conn)\n         return cols;\n     }\n \n+    @Override\n     public Column newColumn(ResultSet colMeta)\n         throws SQLException {\n         Column col = super.newColumn(colMeta);\n         if (swapSchemaAndCatalog)\n-            col.setSchemaName(colMeta.getString(\"TABLE_CAT\"));\n+            col.setSchemaIdentifier(fromDBName(colMeta.getString(\"TABLE_CAT\"), DBIdentifierType.CATALOG));\n         return col;\n     }\n \n+    @Override\n     public PrimaryKey newPrimaryKey(ResultSet pkMeta)\n         throws SQLException {\n         PrimaryKey pk = super.newPrimaryKey(pkMeta);\n         if (swapSchemaAndCatalog)\n-            pk.setSchemaName(pkMeta.getString(\"TABLE_CAT\"));\n+            pk.setSchemaIdentifier(fromDBName(pkMeta.getString(\"TABLE_CAT\"), DBIdentifierType.CATALOG));\n         return pk;\n     }\n \n+    @Override\n     public Index newIndex(ResultSet idxMeta)\n         throws SQLException {\n         Index idx = super.newIndex(idxMeta);\n         if (swapSchemaAndCatalog)\n-            idx.setSchemaName(idxMeta.getString(\"TABLE_CAT\"));\n+            idx.setSchemaIdentifier(fromDBName(idxMeta.getString(\"TABLE_CAT\"), DBIdentifierType.CATALOG));\n         return idx;\n     }\n \n+    @Override\n     public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n         Column col)\n         throws SQLException {\n@@ -230,12 +237,14 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n         stmnt.setString(idx, val ? \"t\" : \"f\");\n     }\n \n+    @Override\n     public String[] getCreateTableSQL(Table table) {\n         String[] create = super.getCreateTableSQL(table);\n         create[0] = create[0] + \" LOCK MODE ROW\";\n         return create;\n     }\n \n+    @Override\n     public String[] getAddPrimaryKeySQL(PrimaryKey pk) {\n         String pksql = getPrimaryKeyConstraintSQL(pk);\n         if (pksql == null)\n@@ -244,6 +253,7 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n             + getFullName(pk.getTable(), false) + \" ADD CONSTRAINT \" + pksql };\n     }\n \n+    @Override\n     public String[] getAddForeignKeySQL(ForeignKey fk) {\n         String fksql = getForeignKeyConstraintSQL(fk);\n         if (fksql == null)\n@@ -252,12 +262,14 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n             + getFullName(fk.getTable(), false) + \" ADD CONSTRAINT \" + fksql };\n     }\n \n+    @Override\n     public boolean supportsRandomAccessResultSet(Select sel,\n         boolean forUpdate) {\n         return !forUpdate && !sel.isLob()\n             && super.supportsRandomAccessResultSet(sel, forUpdate);\n     }\n \n+    @Override\n     public Connection decorate(Connection conn)\n         throws SQLException {\n         conn = super.decorate(conn);\n@@ -303,12 +315,14 @@ public Connection decorate(Connection conn)\n         return conn;\n     }\n \n+    @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         throw new UnsupportedException(_loc.get(\"function-not-supported\",\n                 getClass(), \"LOCATE\"));\n     }\n \n+    @Override\n     public boolean needsToCreateIndex(Index idx, Table table) {\n        // Informix will automatically create a unique index for the \n        // primary key, so don't create another index again\n@@ -325,6 +339,7 @@ public boolean useJCC() {\n     /**\n      * Return DB specific schemaCase \n      */\n+    @Override\n     public String getSchemaCase(){\n         return schemaCase;\n     }"},{"sha":"45ae13012c814f82652555f5c31d067ed507497c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,6 +23,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Sequence;\n \n@@ -210,16 +211,21 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n      */\n     @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        return getSequencesSQL(DBIdentifier.newSchema(schemaName), DBIdentifier.newSequence(sequenceName));\n+    }\n+\n+    @Override\n+    protected String getSequencesSQL(DBIdentifier schemaName, DBIdentifier sequenceName) {\n+        StringBuilder buf = new StringBuilder();\n         buf.append(sequenceSQL);\n-        if (schemaName != null || sequenceName != null)\n+        if (!DBIdentifier.isNull(schemaName) || !DBIdentifier.isNull(sequenceName))\n             buf.append(\" WHERE \");\n-        if (schemaName != null) {\n+        if (!DBIdentifier.isNull(schemaName)) {\n             buf.append(sequenceSchemaSQL);\n             if (sequenceName != null)\n                 buf.append(\" AND \");\n         }\n-        if (sequenceName != null)\n+        if (!DBIdentifier.isNull(sequenceName))\n             buf.append(sequenceNameSQL);\n         return buf.toString();\n     }\n@@ -232,7 +238,7 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n     @Override\n     protected Sequence newSequence(ResultSet sequenceMeta) throws SQLException {\n         Sequence seq = super.newSequence(sequenceMeta);\n-        seq.setName(seq.getName().trim());\n+        seq.setIdentifier(DBIdentifier.trim(seq.getIdentifier()));\n         return seq;\n     }\n     \n@@ -257,6 +263,7 @@ protected Sequence newSequence(ResultSet sequenceMeta) throws SQLException {\n      *            start at the beginning\n      */\n \n+    @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(POSITION((\");\n@@ -284,6 +291,7 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n      *  org.apache.openjpa.jdbc.kernel.exps.FilterValue, \n      *  org.apache.openjpa.jdbc.kernel.exps.FilterValue)\n      */\n+    @Override\n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n         buf.append(substringFunctionName).append(\"(\");"},{"sha":"6200e4dfb9f6ae46b776245b1dd2247810cadb40","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InterbaseDictionary.java","status":"modified","additions":27,"deletions":5,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InterbaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InterbaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InterbaseDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -20,9 +20,11 @@\n \n import java.sql.Types;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n+import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n \n@@ -65,16 +67,33 @@ public InterbaseDictionary() {\n         stringLengthFunction = null;\n     }\n \n+    @Override\n     protected String getTableNameForMetadata(String tableName) {\n-        return (tableName == null) ? \"%\"\n-            : super.getTableNameForMetadata(tableName);\n+        return getTableNameForMetadata(DBIdentifier.newTable(tableName));\n     }\n \n+    @Override\n+    protected String getTableNameForMetadata(DBIdentifier tableName) {\n+        if (DBIdentifier.isNull(tableName)) {\n+            return IdentifierUtil.PERCENT;\n+        }\n+        return super.getTableNameForMetadata(tableName);\n+    }\n+\n+    @Override\n     protected String getColumnNameForMetadata(String columnName) {\n-        return (columnName == null) ? \"%\"\n-            : super.getColumnNameForMetadata(columnName);\n+        return getColumnNameForMetadata(DBIdentifier.newColumn(columnName));\n+    }\n+\n+    @Override\n+    protected String getColumnNameForMetadata(DBIdentifier columnName) {\n+        if (DBIdentifier.isNull(columnName)) {\n+            return IdentifierUtil.PERCENT;\n+        }\n+        return super.getColumnNameForMetadata(columnName);\n     }\n \n+    @Override\n     protected String appendSize(Column col, String typeName) {\n         if (col.isPrimaryKey() && col.getType() == Types.VARCHAR) {\n             // reduce size of varchar primary key cols proportional to the\n@@ -98,21 +117,24 @@ protected String appendSize(Column col, String typeName) {\n         return super.appendSize(col, typeName);\n     }\n \n+    @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         throw new StoreException(_loc.get(\"indexof-not-supported\", platform));\n     }\n \n+    @Override\n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n         throw new StoreException(_loc.get(\"substring-not-supported\",\n             platform));\n     }\n \n+    @Override\n     public String[] getDropColumnSQL(Column column) {\n         // Interbase uses \"ALTER TABLE DROP <COLUMN_NAME>\" rather than the\n         // usual \"ALTER TABLE DROP COLUMN <COLUMN_NAME>\"\n         return new String[]{ \"ALTER TABLE \"\n-            + getFullName(column.getTable(), false) + \" DROP \" + column };\n+            + getFullName(column.getTable(), false) + \" DROP \" + getColumnDBName(column) };\n     }\n }"},{"sha":"461c73b18db09cb39d4ab19f1bc14235a380dc65","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -67,6 +67,7 @@ public JDataStoreDictionary() {\n         searchStringEscape = \"\";\n     }\n \n+    @Override\n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n         buf.append(\"SUBSTRING(\");\n@@ -85,6 +86,7 @@ public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         buf.append(\")))\");\n     }\n \n+    @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(POSITION(\");\n@@ -102,6 +104,7 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         buf.append(\")\");\n     }\n \n+    @Override\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n         OpenJPAException ke = super.newStoreException(msg, causes, failed);"},{"sha":"e603fcba3672b16f17c2e7a6bc8e04328d6a9776","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -345,7 +345,7 @@ public int hashCode() {\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"[\");\n         for (Iterator itr = iterator(); itr.hasNext();) {\n             buf.append(\"<\").append(itr.next()).append(\">\");"},{"sha":"2e2b268c3769a1cdd9e20117d33b9bbce65742a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -97,6 +97,10 @@ public void close() {\n             _res[i].close();\n     }\n \n+    public void setLocking(boolean locking) {\n+        _res[_idx].setLocking(locking);\n+    }\n+\n     public boolean isLocking() {\n         return _res[_idx].isLocking();\n     }"},{"sha":"be1e160134de74cf6fe8068058dc5285c323d7eb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":44,"deletions":9,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -24,8 +24,13 @@\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n@@ -43,6 +48,8 @@\n \n     public static final String SELECT_HINT = \"openjpa.hint.MySQLSelectHint\";\n \n+    public static final String DELIMITER_BACK_TICK = \"`\";\n+    \n     /**\n      * The MySQL table type to use when creating tables; defaults to innodb.\n      */\n@@ -139,8 +146,14 @@ public MySQLDictionary() {\n \n         typeModifierSet.addAll(Arrays.asList(new String[] { \"UNSIGNED\",\n             \"ZEROFILL\" }));\n+\n+        setLeadingDelimiter(DELIMITER_BACK_TICK);\n+        setTrailingDelimiter(DELIMITER_BACK_TICK);\n+        \n+        fixedSizeTypeNameSet.remove(\"NUMERIC\");\n     }\n \n+    @Override\n     public void connectedConfiguration(Connection conn) throws SQLException {\n         super.connectedConfiguration(conn);\n \n@@ -176,6 +189,7 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             driverDeserializesBlobs = true;\n     }\n \n+    @Override\n     public Connection decorate(Connection conn)  throws SQLException {\n         conn = super.decorate(conn);\n         String driver = conf.getConnectionDriverName();\n@@ -214,13 +228,15 @@ public Connection decorate(Connection conn)  throws SQLException {\n         return new int[]{maj, min};\n     }\n \n+    @Override\n     public String[] getCreateTableSQL(Table table) {\n         String[] sql = super.getCreateTableSQL(table);\n         if (!StringUtils.isEmpty(tableType))\n             sql[0] = sql[0] + \" TYPE = \" + tableType;\n         return sql;\n     }\n \n+    @Override\n     public String[] getDropIndexSQL(Index index) {\n         return new String[]{ \"DROP INDEX \" + getFullName(index) + \" ON \"\n             + getFullName(index.getTable(), false) };\n@@ -231,7 +247,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n      */\n     @Override\n     public String[] getDropPrimaryKeySQL(PrimaryKey pk) {\n-        if (pk.getName() == null)\n+        if (DBIdentifier.isNull(pk.getIdentifier()))\n             return new String[0];\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(pk.getTable(), false)\n@@ -244,19 +260,20 @@ public Connection decorate(Connection conn)  throws SQLException {\n      */\n     @Override\n     public String[] getDropForeignKeySQL(ForeignKey fk, Connection conn) {\n-        if (fk.getName() == null) {\n-            String fkName = fk.loadNameFromDB(this,conn);\n+        if (DBIdentifier.isNull(fk.getIdentifier())) {\n+            DBIdentifier fkName = fk.loadIdentifierFromDB(this,conn);\n             String[] retVal = (fkName == null) ?  new String[0] :\n                 new String[]{ \"ALTER TABLE \"\n                 + getFullName(fk.getTable(), false)\n-                + \" DROP FOREIGN KEY \" + fkName };\n+                + \" DROP FOREIGN KEY \" + toDBName(fkName) };\n             return retVal;   \n         }\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(fk.getTable(), false)\n-            + \" DROP FOREIGN KEY \" + fk.getName() };\n+            + \" DROP FOREIGN KEY \" + toDBName(fk.getIdentifier()) };\n     }\n \n+    @Override\n     public String[] getAddPrimaryKeySQL(PrimaryKey pk) {\n         String[] sql = super.getAddPrimaryKeySQL(pk);\n \n@@ -266,31 +283,33 @@ public Connection decorate(Connection conn)  throws SQLException {\n         String[] ret = new String[cols.length + sql.length];\n         for (int i = 0; i < cols.length; i++) {\n             ret[i] = \"ALTER TABLE \" + getFullName(cols[i].getTable(), false)\n-                + \" CHANGE \" + cols[i].getName()\n-                + \" \" + cols[i].getName() // name twice\n+                + \" CHANGE \" + toDBName(cols[i].getIdentifier())\n+                + \" \" + toDBName(cols[i].getIdentifier()) // name twice\n                 + \" \" + getTypeName(cols[i]) + \" NOT NULL\";\n         }\n \n         System.arraycopy(sql, 0, ret, cols.length, sql.length);\n         return ret;\n     }\n     \n+    @Override\n     public String[] getDeleteTableContentsSQL(Table[] tables,Connection conn) {\n         // mysql >= 4 supports more-optimal delete syntax\n         if (!optimizeMultiTableDeletes)\n             return super.getDeleteTableContentsSQL(tables,conn);\n         else {\n-            StringBuffer buf = new StringBuffer(tables.length * 8);\n+            StringBuilder buf = new StringBuilder(tables.length * 8);\n             buf.append(\"DELETE FROM \");\n             for (int i = 0; i < tables.length; i++) {\n-                buf.append(tables[i].getFullName());\n+                buf.append(toDBName(tables[i].getFullIdentifier()));\n                 if (i < tables.length - 1)\n                     buf.append(\", \");\n             }\n             return new String[] { buf.toString() };\n         }\n     }\n \n+    @Override\n     protected void appendSelectRange(SQLBuffer buf, long start, long end,\n         boolean subselect) {\n         buf.append(\" LIMIT \").appendValue(start).append(\", \");\n@@ -300,6 +319,7 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n             buf.appendValue(end - start);\n     }\n \n+    @Override\n     protected Column newColumn(ResultSet colMeta)\n         throws SQLException {\n         Column col = super.newColumn(colMeta);\n@@ -308,6 +328,7 @@ protected Column newColumn(ResultSet colMeta)\n         return col;\n     }\n \n+    @Override\n     public Object getBlobObject(ResultSet rs, int column, JDBCStore store)\n         throws SQLException {\n         // if the user has set a get-blob strategy explicitly or the driver\n@@ -320,6 +341,7 @@ public Object getBlobObject(ResultSet rs, int column, JDBCStore store)\n         return rs.getObject(column);\n     }\n \n+    @Override\n     public int getPreferredType(int type) {\n         if (type == Types.CLOB && !useClobs)\n             return Types.LONGVARCHAR;\n@@ -336,6 +358,7 @@ public int getPreferredType(int type) {\n      * @param lhsxml indicates whether the left operand maps to XML\n      * @param rhsxml indicates whether the right operand maps to XML\n      */\n+    @Override\n     public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n         FilterValue rhs, boolean lhsxml, boolean rhsxml) {\n         super.appendXmlComparison(buf, op, lhs, rhs, lhsxml, rhsxml);\n@@ -364,6 +387,7 @@ private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n         buf.append(\"')\");\n     }\n     \n+    @Override\n     public int getBatchFetchSize(int batchFetchSize) {\n         return Integer.MIN_VALUE;\n     }\n@@ -381,4 +405,15 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n             select += \" \" + hint;\n         return select;\n     }\n+    \n+    @Override\n+    protected Collection<String> getSelectTableAliases(Select sel) {\n+        Set<String> result = new HashSet<String>();\n+        List<String> selects = sel.getIdentifierAliases();\n+        for (String s : selects) {\n+            String tableAlias = s.substring(0, s.indexOf('.'));\n+            result.add(tableAlias);\n+        }\n+        return result;\n+    }\n }"},{"sha":"248724cf6911fca644aff5233342bd715384eea9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":158,"deletions":60,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -34,11 +34,13 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n@@ -49,6 +51,7 @@\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.ForeignKey.FKMapKey;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -193,12 +196,14 @@ public OracleDictionary() {\n         requiresSearchStringEscapeForLike = false;\n     }\n \n+    @Override\n     public void endConfiguration() {\n         super.endConfiguration();\n         if (useTriggersForAutoAssign)\n             supportsAutoAssign = true;\n     }\n \n+    @Override\n     public void connectedConfiguration(Connection conn)\n         throws SQLException {\n         super.connectedConfiguration(conn);\n@@ -290,13 +295,15 @@ public void ensureDriverVendor() {\n         }\n     }\n \n+    @Override\n     public boolean supportsLocking(Select sel) {\n         if (!super.supportsLocking(sel))\n             return false;\n         return !requiresSubselectForRange(sel.getStartIndex(),\n             sel.getEndIndex(), sel.isDistinct(), sel.getOrdering());\n     }\n \n+    @Override\n     protected SQLBuffer getSelects(Select sel, boolean distinctIdentifiers,\n         boolean forUpdate) {\n         // if range doesn't require a subselect can use super\n@@ -335,6 +342,7 @@ protected SQLBuffer getSelects(Select sel, boolean distinctIdentifiers,\n         return selectSQL;\n     }\n \n+    @Override\n     public boolean canOuterJoin(int syntax, ForeignKey fk) {\n         if (!super.canOuterJoin(syntax, fk))\n             return false;\n@@ -347,6 +355,7 @@ public boolean canOuterJoin(int syntax, ForeignKey fk) {\n         return true;\n     }\n \n+    @Override\n     public SQLBuffer toNativeJoin(Join join) {\n         if (join.getType() != Join.TYPE_OUTER)\n             return toTraditionalJoin(join);\n@@ -384,6 +393,7 @@ public SQLBuffer toNativeJoin(Join join) {\n         return buf;\n     }\n \n+    @Override\n     protected SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         SQLBuffer tables, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n@@ -393,6 +403,7 @@ protected SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n             distinct, forUpdate, start, end, sel);\n     }\n \n+    @Override\n     protected SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         SQLBuffer tables, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n@@ -476,7 +487,7 @@ public void setString(PreparedStatement stmnt, int idx, String val,\n         // special handling to configure them correctly; see:\n         // http://www.oracle.com/technology/sample_code/tech/java/\n         // sqlj_jdbc/files/9i_jdbc/NCHARsupport4UnicodeSample/Readme.html\n-        String typeName = (col == null) ? null : col.getTypeName();\n+        String typeName = (col == null) ? null : col.getTypeIdentifier().getName();\n         if (useSetFormOfUseForUnicode && typeName != null &&\n             (typeName.toLowerCase().startsWith(\"nvarchar\") ||\n                 typeName.toLowerCase().startsWith(\"nchar\") ||\n@@ -532,20 +543,21 @@ public void setString(PreparedStatement stmnt, int idx, String val,\n         super.setString(stmnt, idx, val, col);\n     }\n \n+    @Override\n     public void setNull(PreparedStatement stmnt, int idx, int colType,\n         Column col)\n         throws SQLException {\n         if ((colType == Types.CLOB || colType == Types.BLOB) && col.isNotNull())\n-            throw new UserException(_loc.get(\"null-blob-in-not-nullable\", col\n-                .getFullName()));\n+            throw new UserException(_loc.get(\"null-blob-in-not-nullable\", toDBName(col\n+                .getFullDBIdentifier())));\n         if (colType == Types.BLOB && _driverBehavior == BEHAVE_ORACLE)\n             stmnt.setBlob(idx, getEmptyBlob());\n         else if (colType == Types.CLOB && _driverBehavior == BEHAVE_ORACLE\n             && !col.isXML())\n             stmnt.setClob(idx, getEmptyClob());\n         else if ((colType == Types.STRUCT || colType == Types.OTHER)\n-            && col != null && col.getTypeName() != null)\n-            stmnt.setNull(idx, Types.STRUCT, col.getTypeName());\n+            && col != null && !DBIdentifier.isNull(col.getTypeIdentifier()))\n+            stmnt.setNull(idx, Types.STRUCT, col.getTypeIdentifier().getName());\n             // some versions of the Oracle JDBC driver will fail if calling\n             // setNull with DATE; see bug #1171\n         else if (colType == Types.DATE)\n@@ -557,6 +569,7 @@ else if (colType == Types.OTHER || col.isXML())\n             super.setNull(stmnt, idx, colType, col);\n     }\n \n+    @Override\n     public String getClobString(ResultSet rs, int column)\n         throws SQLException {\n         if (_driverBehavior != BEHAVE_ORACLE)\n@@ -583,6 +596,7 @@ public String getClobString(ResultSet rs, int column)\n         return clob.getSubString(1, (int) clob.length());\n     }\n \n+    @Override\n     public Timestamp getTimestamp(ResultSet rs, int column, Calendar cal)\n         throws SQLException {\n         if (cal == null) {\n@@ -604,6 +618,7 @@ public Timestamp getTimestamp(ResultSet rs, int column, Calendar cal)\n         return ts;\n     }\n \n+    @Override\n     public Object getObject(ResultSet rs, int column, Map map)\n         throws SQLException {\n         // recent oracle drivers return oracle-specific types for timestamps\n@@ -640,33 +655,55 @@ private static Object convertFromOracleType(Object obj,\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n+        return getColumns(meta, \n+            DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newTable(tableName), \n+            DBIdentifier.newColumn(columnName),conn);\n+    }\n+\n+    public Column[] getColumns(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, DBIdentifier columnName, Connection conn)\n+        throws SQLException {\n         Column[] cols = super.getColumns(meta, catalog, schemaName, tableName,\n             columnName, conn);\n \n         for (int i = 0; cols != null && i < cols.length; i++) {\n-            if (cols[i].getTypeName() == null)\n+            String typeName = cols[i].getTypeIdentifier().getName();\n+            if (typeName == null)\n                 continue;\n-            if (cols[i].getTypeName().toUpperCase().startsWith(\"TIMESTAMP\"))\n+            if (typeName.toUpperCase().startsWith(\"TIMESTAMP\"))\n                 cols[i].setType(Types.TIMESTAMP);\n-            else if (\"BLOB\".equalsIgnoreCase(cols[i].getTypeName()))\n+            else if (\"BLOB\".equalsIgnoreCase(typeName))\n                 cols[i].setType(Types.BLOB);\n-            else if (\"CLOB\".equalsIgnoreCase(cols[i].getTypeName())\n-                || \"NCLOB\".equalsIgnoreCase(cols[i].getTypeName()))\n+            else if (\"CLOB\".equalsIgnoreCase(typeName)\n+                || \"NCLOB\".equalsIgnoreCase(typeName))\n                 cols[i].setType(Types.CLOB);\n-            else if (\"FLOAT\".equalsIgnoreCase(cols[i].getTypeName()))\n+            else if (\"FLOAT\".equalsIgnoreCase(typeName))\n                 cols[i].setType(Types.FLOAT);\n-            else if (\"NVARCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n+            else if (\"NVARCHAR\".equalsIgnoreCase(typeName))\n                 cols[i].setType(Types.VARCHAR);\n-            else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n+            else if (\"NCHAR\".equalsIgnoreCase(typeName))\n                 cols[i].setType(Types.CHAR);\n         }\n         return cols;\n     }\n \n+    @Override\n     public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta,\n         String catalog, String schemaName, String tableName, Connection conn)\n         throws SQLException {\n-        StringBuffer buf = new StringBuffer();\n+        return getPrimaryKeys(meta,\n+            DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newTable(tableName), conn);\n+    }\n+\n+    @Override\n+    public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta,\n+        DBIdentifier catalog, DBIdentifier schemaName, DBIdentifier tableName, Connection conn)\n+        throws SQLException {\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT t0.OWNER AS TABLE_SCHEM, \").\n             append(\"t0.TABLE_NAME AS TABLE_NAME, \").\n             append(\"t0.COLUMN_NAME AS COLUMN_NAME, \").\n@@ -675,19 +712,19 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n             append(\"WHERE t0.OWNER = t1.OWNER \").\n             append(\"AND t0.CONSTRAINT_NAME = t1.CONSTRAINT_NAME \").\n             append(\"AND t1.CONSTRAINT_TYPE = 'P'\");\n-        if (schemaName != null)\n+        if (!DBIdentifier.isNull(schemaName))\n             buf.append(\" AND t0.OWNER = ?\");\n-        if (tableName != null)\n+        if (!DBIdentifier.isNull(tableName))\n             buf.append(\" AND t0.TABLE_NAME = ?\");\n \n         PreparedStatement stmnt = conn.prepareStatement(buf.toString());\n         ResultSet rs = null;\n         try {\n             int idx = 1;\n-            if (schemaName != null)\n-                setString(stmnt, idx++, schemaName.toUpperCase(), null);\n-            if (tableName != null)\n-                setString(stmnt, idx++, tableName.toUpperCase(), null);\n+            if (!DBIdentifier.isNull(schemaName))\n+                setString(stmnt, idx++, convertSchemaCase(schemaName), null);\n+            if (!DBIdentifier.isNull(tableName))\n+                setString(stmnt, idx++, convertSchemaCase(tableName), null);\n             setTimeouts(stmnt, conf, false);\n             rs = stmnt.executeQuery();\n             List pkList = new ArrayList();\n@@ -708,11 +745,23 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n         }\n     }\n \n+    @Override\n     public Index[] getIndexInfo(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, boolean unique, boolean approx,\n         Connection conn)\n         throws SQLException {\n-        StringBuffer buf = new StringBuffer();\n+        return getIndexInfo(meta,\n+            DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newTable(tableName), unique, approx, conn);\n+    }\n+\n+    @Override\n+    public Index[] getIndexInfo(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, boolean unique, boolean approx,\n+        Connection conn)\n+        throws SQLException {\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT t0.INDEX_OWNER AS TABLE_SCHEM, \").\n             append(\"t0.TABLE_NAME AS TABLE_NAME, \").\n             append(\"DECODE(t1.UNIQUENESS, 'UNIQUE', 0, 'NONUNIQUE', 1) \").\n@@ -722,19 +771,19 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n             append(\"FROM ALL_IND_COLUMNS t0, ALL_INDEXES t1 \").\n             append(\"WHERE t0.INDEX_OWNER = t1.OWNER \").\n             append(\"AND t0.INDEX_NAME = t1.INDEX_NAME\");\n-        if (schemaName != null)\n+        if (!DBIdentifier.isNull(schemaName))\n             buf.append(\" AND t0.TABLE_OWNER = ?\");\n-        if (tableName != null)\n+        if (!DBIdentifier.isNull(tableName))\n             buf.append(\" AND t0.TABLE_NAME = ?\");\n \n         PreparedStatement stmnt = conn.prepareStatement(buf.toString());\n         ResultSet rs = null;\n         try {\n             int idx = 1;\n-            if (schemaName != null)\n-                setString(stmnt, idx++, schemaName.toUpperCase(), null);\n-            if (tableName != null)\n-                setString(stmnt, idx++, tableName.toUpperCase(), null);\n+            if (!DBIdentifier.isNull(schemaName))\n+                setString(stmnt, idx++, convertSchemaCase(schemaName), null);\n+            if (!DBIdentifier.isNull(tableName))\n+                setString(stmnt, idx++, convertSchemaCase(tableName), null);\n \n             setTimeouts(stmnt, conf, false);\n             rs = stmnt.executeQuery();\n@@ -755,18 +804,29 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n         }\n     }\n \n+    @Override\n     public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n-        String schemaName, String tableName, Connection conn)\n+        String schemaName, String tableName, Connection conn, boolean partialKeys)\n         throws SQLException {\n-        StringBuffer delAction = new StringBuffer(\"DECODE(t1.DELETE_RULE\").\n+        return getImportedKeys(meta,\n+            DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName), \n+            DBIdentifier.newTable(tableName), conn, partialKeys);\n+    }\n+    \n+    @Override\n+    public ForeignKey[] getImportedKeys(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, Connection conn, boolean partialKeys)\n+        throws SQLException {\n+        StringBuilder delAction = new StringBuilder(\"DECODE(t1.DELETE_RULE\").\n             append(\", 'NO ACTION', \").append(meta.importedKeyNoAction).\n             append(\", 'RESTRICT', \").append(meta.importedKeyRestrict).\n             append(\", 'CASCADE', \").append(meta.importedKeyCascade).\n             append(\", 'SET NULL', \").append(meta.importedKeySetNull).\n             append(\", 'SET DEFAULT', \").append(meta.importedKeySetDefault).\n             append(\")\");\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT t2.OWNER AS PKTABLE_SCHEM, \").\n             append(\"t2.TABLE_NAME AS PKTABLE_NAME, \").\n             append(\"t2.COLUMN_NAME AS PKCOLUMN_NAME, \").\n@@ -789,25 +849,36 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n             append(\"AND t1.R_OWNER = t2.OWNER \").\n             append(\"AND t1.R_CONSTRAINT_NAME = t2.CONSTRAINT_NAME \").\n             append(\"AND t0.POSITION = t2.POSITION\");\n-        if (schemaName != null)\n+        if (!DBIdentifier.isNull(schemaName))\n             buf.append(\" AND t0.OWNER = ?\");\n-        if (tableName != null)\n+        if (!DBIdentifier.isNull(tableName))\n             buf.append(\" AND t0.TABLE_NAME = ?\");\n         buf.append(\" ORDER BY t2.OWNER, t2.TABLE_NAME, t0.POSITION\");\n \n         PreparedStatement stmnt = conn.prepareStatement(buf.toString());\n         ResultSet rs = null;\n         try {\n             int idx = 1;\n-            if (schemaName != null)\n-                setString(stmnt, idx++, schemaName.toUpperCase(), null);\n-            if (tableName != null)\n-                setString(stmnt, idx++, tableName.toUpperCase(), null);\n+            if (!DBIdentifier.isNull(schemaName))\n+                setString(stmnt, idx++, convertSchemaCase(schemaName), null);\n+            if (!DBIdentifier.isNull(tableName))\n+                setString(stmnt, idx++, convertSchemaCase(tableName), null);\n             setTimeouts(stmnt, conf, false);\n             rs = stmnt.executeQuery();\n-            List fkList = new ArrayList();\n-            while (rs != null && rs.next())\n-                fkList.add(newForeignKey(rs));\n+            List<ForeignKey> fkList = new ArrayList<ForeignKey>();            \n+            Map<FKMapKey, ForeignKey> fkMap = new HashMap<FKMapKey, ForeignKey>();\n+\n+            while (rs != null && rs.next()) {\n+                ForeignKey nfk = newForeignKey(rs);\n+                if (!partialKeys) {\n+                    ForeignKey fk = combineForeignKey(fkMap, nfk);\n+                    // Only add the fk to the import list if it is new\n+                    if (fk != nfk) {\n+                        continue;\n+                    }\n+                }\n+                fkList.add(nfk);\n+            }\n             return (ForeignKey[]) fkList.toArray\n                 (new ForeignKey[fkList.size()]);\n         } finally {\n@@ -823,6 +894,7 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n         }\n     }\n \n+    @Override\n     public String[] getCreateTableSQL(Table table) {\n         // only override if we are simulating auto-incremenet with triggers\n         String[] create = super.getCreateTableSQL(table);\n@@ -854,9 +926,9 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n             // create the trigger that will insert new values into\n             // the table whenever a row is created\n             seqs.add(\"CREATE OR REPLACE TRIGGER \" + trig\n-                + \" BEFORE INSERT ON \" + table.getName()\n+                + \" BEFORE INSERT ON \" + toDBName(table.getIdentifier())\n                 + \" FOR EACH ROW BEGIN SELECT \" + seq + \".nextval INTO \"\n-                + \":new.\" + cols[i].getName() + \" FROM DUAL; \"\n+                + \":new.\" + toDBName(cols[i].getIdentifier()) + \" FROM DUAL; \"\n                 + \"END \" + trig + \";\");\n         }\n         if (seqs == null)\n@@ -870,6 +942,7 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n         return sql;\n     }\n \n+    @Override\n     public String[] getCreateSequenceSQL(Sequence seq) {\n         String[] sql = super.getCreateSequenceSQL(seq);\n         if (seq.getAllocate() > 1)\n@@ -884,38 +957,52 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n     @Override\n     public int getJDBCType(int metaTypeCode, boolean lob, int precis, \n         int scale, boolean xml) {        \n-        return getJDBCType(metaTypeCode, lob && !xml, precis, scale);        \n+        return getJDBCType(metaTypeCode, lob || xml, precis, scale);        \n     }\n \n-\n+    @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        return getSequencesSQL(DBIdentifier.newSchema(schemaName), DBIdentifier.newSequence(sequenceName));\n+    }\n+\n+    @Override\n+    protected String getSequencesSQL(DBIdentifier schemaName, DBIdentifier sequenceName) {\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT SEQUENCE_OWNER AS SEQUENCE_SCHEMA, \").\n             append(\"SEQUENCE_NAME FROM ALL_SEQUENCES\");\n-        if (schemaName != null || sequenceName != null)\n+        if (!DBIdentifier.isNull(schemaName) || !DBIdentifier.isNull(sequenceName))\n             buf.append(\" WHERE \");\n-        if (schemaName != null) {\n+        if (!DBIdentifier.isNull(schemaName)) {\n             buf.append(\"SEQUENCE_OWNER = ?\");\n-            if (sequenceName != null)\n+            if (!DBIdentifier.isNull(sequenceName))\n                 buf.append(\" AND \");\n         }\n-        if (sequenceName != null)\n+        if (!DBIdentifier.isNull(sequenceName))\n             buf.append(\"SEQUENCE_NAME = ?\");\n         return buf.toString();\n     }\n \n     public boolean isSystemSequence(String name, String schema,\n+        boolean targetSchema) {\n+        return isSystemSequence(DBIdentifier.newSequence(name),\n+            DBIdentifier.newSchema(schema), targetSchema);\n+    }\n+\n+    @Override\n+    public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n         boolean targetSchema) {\n         if (super.isSystemSequence(name, schema, targetSchema))\n             return true;\n \n         // filter out generated sequences used for auto-assign\n+        String strName = DBIdentifier.isNull(name) ? \"\" : name.getName();\n         return (autoAssignSequenceName != null\n-            && name.equalsIgnoreCase(autoAssignSequenceName))\n+            && strName.equalsIgnoreCase(autoAssignSequenceName))\n             || (autoAssignSequenceName == null\n-            && name.toUpperCase().startsWith(\"ST_\"));\n+            && strName.toUpperCase().startsWith(\"ST_\"));\n     }\n \n+    @Override\n     public Object getGeneratedKey(Column col, Connection conn)\n         throws SQLException {\n         if (!useTriggersForAutoAssign)\n@@ -958,17 +1045,19 @@ protected String getGeneratedKeyTriggerName(Column col) {\n      */\n     protected String getOpenJPA3GeneratedKeySequenceName(Column col) {\n         Table table = col.getTable();\n-        return makeNameValid(\"SEQ_\" + table.getName(), table.getSchema().\n-            getSchemaGroup(), maxTableNameLength, NAME_ANY);\n+        DBIdentifier sName = DBIdentifier.preCombine(table.getIdentifier(), \"SEQ\");\n+        return toDBName(getNamingUtil().makeIdentifierValid(sName, table.getSchema().\n+            getSchemaGroup(), maxTableNameLength, true));\n     }\n \n     /**\n      * Returns a OpenJPA 3-compatible name for an auto-assign trigger.\n      */\n     protected String getOpenJPA3GeneratedKeyTriggerName(Column col) {\n-        Table table = col.getTable();\n-        return makeNameValid(\"TRIG_\" + table.getName(), table.getSchema().\n-            getSchemaGroup(), maxTableNameLength, NAME_ANY);\n+        Table table = col.getTable();        \n+        DBIdentifier sName = DBIdentifier.preCombine(table.getIdentifier(), \"TRIG\");\n+        return toDBName(getNamingUtil().makeIdentifierValid(sName, table.getSchema().\n+            getSchemaGroup(), maxTableNameLength, true));\n     }\n \n     /**\n@@ -977,6 +1066,7 @@ protected String getOpenJPA3GeneratedKeyTriggerName(Column col) {\n      * vendor-specific class; for example Weblogic wraps oracle thin driver\n      * lobs in its own interfaces with the same methods.\n      */\n+    @Override\n     public void putBytes(Blob blob, byte[] data)\n         throws SQLException {\n         if (blob == null)\n@@ -998,6 +1088,7 @@ public void putBytes(Blob blob, byte[] data)\n      * vendor-specific class; for example Weblogic wraps oracle thin driver\n      * lobs in its own interfaces with the same methods.\n      */\n+    @Override\n     public void putString(Clob clob, String data)\n         throws SQLException {\n         if (_putString == null) {\n@@ -1017,6 +1108,7 @@ public void putString(Clob clob, String data)\n      * vendor-specific class; for example Weblogic wraps oracle thin driver\n      * lobs in its own interfaces with the same methods.\n      */\n+    @Override\n     public void putChars(Clob clob, char[] data)\n         throws SQLException {\n         if (_putChars == null) {\n@@ -1148,9 +1240,12 @@ private void appendXmlExtractValue(SQLBuffer buf, FilterValue val) {\n     \n     public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n         throws SQLException {\n-        if (ob == null)\n+        if (ob == null) {\n             col.setType(Types.OTHER);\n-        row.setNull(col);\n+            row.setNull(col);\n+        } else {\n+            row.setClob(col, getEmptyClob());\n+        }\n     }\n \n     public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n@@ -1189,8 +1284,11 @@ protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n     @Override\n     public void insertBlobForStreamingLoad(Row row, Column col, \n         JDBCStore store, Object ob, Select sel) throws SQLException {\n-        if (ob == null)\n+        if (ob == null) {\n             col.setType(Types.OTHER);\n-        row.setNull(col);\n-    }    \n+            row.setNull(col);\n+        } else {\n+            row.setBlob(col, getEmptyBlob());\n+        }\n+    }\n }"},{"sha":"c89f7c480f9d5bb4cefd6cd79824ea5028898c2c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PointbaseDictionary.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PointbaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PointbaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PointbaseDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","patch":"@@ -23,6 +23,8 @@\n import java.sql.SQLException;\n import java.sql.Types;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n@@ -72,21 +74,32 @@ public int getPreferredType(int type) {\n         }\n     }\n \n+    @Override\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n+        return getColumns(meta, DBIdentifier.newCatalog(catalog), DBIdentifier.newSchema(schemaName),\n+            DBIdentifier.newTable(tableName), DBIdentifier.newColumn(columnName), conn);\n+    }\n+\n+    @Override\n+    public Column[] getColumns(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, DBIdentifier columnName, Connection conn)\n+        throws SQLException {\n         Column[] cols = super.getColumns(meta, catalog, schemaName, tableName,\n             columnName, conn);\n \n         // pointbase reports the type for a CLOB field as VARCHAR: override it\n         for (int i = 0; cols != null && i < cols.length; i++)\n-            if (cols[i].getTypeName().toUpperCase().startsWith(\"CLOB\"))\n+            if (cols[i].getTypeIdentifier().getName().toUpperCase().startsWith(\"CLOB\"))\n                 cols[i].setType(Types.CLOB);\n         return cols;\n     }\n \n+    @Override\n     public String getFullName(Index index) {\n-        return getFullName(index.getTable(), false) + \".\" + index.getName();\n+        return toDBName(getNamingUtil().append(DBIdentifierType.INDEX, \n+            getFullIdentifier(index.getTable(), false), index.getIdentifier()));\n     }\n \n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,"},{"sha":"a3cd9394185f51cc38070acf964926ba5ae85829","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"04cb56fef600e1b73d671692559b3c1a255668fb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"a6ae3a9206eaa7668683310e6cdb8ec90e45b7e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e00f59c64f48e52129f2e0bf7382285562d0dd76","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"576974f3255d0299c85dbe2b656645d0525c82a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"9d9b150d446bcc74322b312544785affbbb7d010","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"47144f44a7fad0cbb684efbf734ca41d767bd24a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d06501afc269bcf6ec380ceeeaf019efcdd3002f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1009c86712d9e67fd67671683cc51be9a60e813c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1e5dc54c9abd3bfa10980b043abc86a102ce26ce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"6e9d55440b71fbb819c935004446f63d1a754fc4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"edddbfa898390783d4024af2c1535bfcf315aaf7","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d74dfca8246742e914f838f7aab4de5c5999cb02","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"ce81842b24be863b4717bfe37e734432de570f61","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"6ae28b91a2ce6a806460ae5bef0afe552926b3ff","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"55dad1e8b5c71b2f74f88abc27838fc8c6545131","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"095d509388fac534141f7928411f281a347447f8","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/identifier/TestDBIdentifiers.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/identifier/TestDBIdentifiers.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/identifier/TestDBIdentifiers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/identifier/TestDBIdentifiers.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"79c4950055a7da0879fec379741567b72947ee8c","filename":"openjpa-kernel/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"0fd735ddce995e55b178ee495b1b4744a75281c2","filename":"openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/appended-resources/META-INF/NOTICE.vm?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"7896fdd39e42d15ed52d3679cdd7aee2a51a2d48","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"523524edab3f8e9b8ac859758e7055f4e42ad05c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"eb29d6919ce3305c6a9a71f9a09cd678c2905ae7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"4f83bb7d7560724fd60c1ce3334bfb46d554030f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"b3dfde43d63d5d8b2e8e512004d694ed5ad55f65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"3fa0f7500a2b05528ed163c80d8fe9258e396895","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"ad9cb6f6a15d47331edec0470b9635ad422c926d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"c5a5c5d32dc90b7f54b9a9627fdc901eb0ea374c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"f5e532a4e3ab5b6795e69ebdc454f06e397ac884","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"fe2137f904e25285809f2f5b36b3ca6407c9f078","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"979db3f14e1af5593ff6e8fe83cbce683bd25bc1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"c783f0f6ab34c2a15e94430224ee0490fae424c4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"b7f3fe72c8c9ead8d12cfca1e61f56da1ee1256b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"69e830bf012dee43315068fc7ae1de844db92e42","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"afcb31e2f80e62f834d1145d8f56f15b8aba98eb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"8b65c16e8eb15ebd31e919726013c59e1fdd13e6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"c257004ff45c2e330d27dba7706e7f03eb104d94","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/PartitionedDataCache.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/PartitionedDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/PartitionedDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/PartitionedDataCache.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"904b6582e98b9bd0df6444e3ee65fc77dd64a365","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"c0eac1e0cba3874b78ae5403eabbaa5558b83e3c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"09b78076dc273bec03b6dfa02581a9cb7f76b4da","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"f798f6e187c04c2e53526e6fc36b9379cf651384","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"6ba4c9ac0acb224f39e5a225ba06a6343b9d84c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d64fc8055a2cc68c5fcc3edfa08a2329d76ba45d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"86630a690f056ee98dd4c311e47788d4b82c519c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d626845887394067cf62517408aa8cb3b39b223b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"bf696e944c7d717a9f8b5a864cd40b4f19a56c49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e90bb4d4c0d9668999524273eb33f12f33768241","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractHintHandler.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractHintHandler.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractHintHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractHintHandler.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"139b452ee2ee494dd3a7c8c21655aebbc2a4724e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"2abe5de0efacda6cba730e202649491d5c7bb3de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1b1190b3dcada19a6ac380dcb3c9bef66bc4f9a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"64196848a88b23ecdda3cfad86790edd4229ef9f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"f9d59a05fbad0fad12d86218f1a40d7616f80e18","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d035eb114ee240290a158b8eecdcc222b80b8086","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"13dfc4fd82252f609ef81d87278fe0c07f200063","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"cc81bd1833829a3b5f3408e5cebac36230976692","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"77dffd1bc9c56c5f28ae10a0eb1b647638b14482","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"53566875d1d5ad43d92011cda437a92a2aee7890","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"3187348356f57f1bfe2832961d11ea45c49b85f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"2d2f209d3629b1a39b9f2b75dd411fb5a299d3dc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1df96b664245c895bf81570955762a56bbe62288","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e2b9165b14757f2d5a5e603e854f720052a497d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"136e66d17a1ec3a8bc4df77ccc38b8e7c732bca9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"f529b3da20081cf86b97c96cc3434eb103207db8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"475b5351dce1854bc6faa0b35d2f393a684dbd43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"a1f01cbb44d340aa8b1e6220086663eb49d48572","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"42aadb690508d5f9f8e06ae48fec2624b0cdb461","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationHintHandler.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationHintHandler.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationHintHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationHintHandler.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"657bd57fce64fe560cdf83cd84a6403a5ea2faa7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"7f23a9808d438224e3bcb132cd00fcfc49187e99","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"592fcdd1477baa521fc041c9c82cd1f527da9bac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"54c9f9f5d9f848a94c560524981b892ddf680593","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"6d066aacd0e6f1c6d33ac1e910002423eb34cbba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"7f1ae2c5242ecaedb975556a286fae70052633e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockScopes.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockScopes.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockScopes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockScopes.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"710cca2525fbc718686c36449d9e467c6fb30e60","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d1799c3567736d3d94ebf9828b422487eb39bd46","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"07d94cb0638ff1c1d1ef7cc3b11c49290b82e428","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"3e703ed4607051d0db1524717a0bb89cea80b445","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"65681e451d3c98387d0b8dbcef0f344a06cc5020","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"0cee214f2d91972c0ce3bbda086b3c9df839fd0d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"fe8552fa5ae965447c4f0ccdb56488064ef87287","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"77bc2271764fcbd89d7a0c85d4cdfc3bd9ccd5ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e9337d5d920ac3341c1e2cfb7d967b28dd99a587","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"f85bb51b725dd393587c4c99992c190be65c3847","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"355869973e1318577d82f55b6ea8c0dad78ea331","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"56bd34181cc0024cd825d9b1d76adf1b9f9d23d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1d885348b27bfa3184c9f77d2a508df2961105a9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"026350c1e1faf565bec207208f7faae6884b91ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"fb2432c4fef032db01e0137afd75552fd4bf1aba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d5a84f7d56e05f654f33134b85975edea8b0d49a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"21373142c9d866c59129f1bc2f143896a03d4785","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"3ed615d995e9e3c7ad1af3de8f8ef09b71e0b230","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1869b541db4414f00c8c3bc9ac85735b96986d01","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"873c9eb70dd2a833a323c5cafa9cb0c7dc3e798e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"819a91c3cb5d2f27f7f055182f10200ee6af125e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"309d87fef34b4924a684ae52bde0c231a7dc3649","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"a62eaa22fa6e58300153fa4c0e32f7ea4812fa24","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"ccdd2574af00178fb2c45392d2d8258c23b511f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"00594ae86b6f887e37fd6dc3b9d4acb752c6aa75","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1f1b4dbc6bfeda545a6c571db0b26b6ee6391c8c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"5d14a3239b4b2fa598968ebec151f769f1d08185","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"25f680626e1eb40664377733ce3904bd4e15da9b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"c50ab5552693f6a6596da797b54988731d54359f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"3979035d956e9f4ee4443b207372e8678a951a89","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"ec2505fe440e3661484f1e87412d2821bb94981b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"ddc3829b811bce04213bce0ba8f506f9f91d324b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"6363126ec065bd551a929b829ecea05edfde1745","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"41e7f0f25375562f50108d8d8cb0a5189921a214","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"b35ed4d423c7755f0955f852a7c25c047526882f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"18766983faeb9101e2730804a27d355310982102","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"c17f4408ad673612133379bc0e0af0839c3ea086","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"7f588d224ae9f38d2b481164e80d64d32b23d9bd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"95cc81a8ad248ba1000c92ae38c9162a733f7be6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e1d4fcb312cfb32e05e0c0094fde038a72af4660","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"48a633399bf40cfc508a66ee76c1a0449e7d8024","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"da77783deda908cf266dc2edffaa06c5847a5b71","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e1f2da1561d267f585229fb995456b190fd87efa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"a8a26f56d78cc8f81eb4d55535174a5a12f7fd2e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"02e24944e6b3489bdcd1d48f54b4fa23c72eae1d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"384df3099dd514a5233eccaafa0803054fd632b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"8923a0890647c6c7cb317f41ad851403fcf630e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"41187caa9326b0039d29b74d1640b6d01e1df566","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"e7ad5fcbe34056ef128bb4860c6fe468ee526169","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"30976a8f698b3024843680b4361ee854a334c7d5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"74af406736bca61362d2fea1a14ff570200a2724","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"f534dc8ed17c00a3ef7e5b8a193ec676f99bbef6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"8b237c12ee79316cba77a3bc079370e899ffb879","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"96a7c8216e4dc135b705f3b717cb8a29a972c5dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c6085cd2961fb178d64a2f739fc25cdc33c9195c/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java?ref=c6085cd2961fb178d64a2f739fc25cdc33c9195c"},{"sha":"d6163e0f388dc6b90d4a20590494dab582d892fa","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"3e11b280ae62de71376cb64befa6be66ff05eec0","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"1c73518e9e6840a118a6835b1081f768b1325f80","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"d3403b899a52b443fc608c5c8fd9bb45f8327cca","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"9e00e4e2e5d5282758342a9357e4defcf734479c","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"23a80824f81f714be50910451ccf888cd34deca2","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"fe88b9ee8379c1b25c800beed1a3879a8b869e6a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"7a74c6d12404ce2ee0111e9746354137019a2427","filename":"openjpa-lib/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"e67fe41659919597d59b1d49fcfc2bd2762048d3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"fb4d9cd03bf908db1cdbeb7f7116633611bb6db1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"eba5098ecc7e8e1abb7eae3cb6a1e6a195b9f45f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"60df32452819f49e1c7eb49ec4f18325f8a63860","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"},{"sha":"10d68d4f7680ef2d1094c24b8e299279e004d06e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java?ref=2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c"}]}

