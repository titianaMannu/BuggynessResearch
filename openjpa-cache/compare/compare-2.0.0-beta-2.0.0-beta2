{"url":"https://api.github.com/repos/apache/openjpa/compare/2.0.0-beta...2.0.0-beta2","html_url":"https://github.com/apache/openjpa/compare/2.0.0-beta...2.0.0-beta2","permalink_url":"https://github.com/apache/openjpa/compare/apache:2ca2ae0...apache:99ec183","diff_url":"https://github.com/apache/openjpa/compare/2.0.0-beta...2.0.0-beta2.diff","patch_url":"https://github.com/apache/openjpa/compare/2.0.0-beta...2.0.0-beta2.patch","base_commit":{"sha":"2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjYTJhZTA0NWEyZWViZWJjOWYyNmM0YTgwZDBlYjY5ZjcyM2Q1MWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T03:06:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T03:06:15Z"},"message":"fix openjpa-all, which had some jaxb code included by the shade plugin due to transitive depends\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.0-beta@903062 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c06ccf320a31b7b87b967af4eeaf9ad05c5d3b1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/c06ccf320a31b7b87b967af4eeaf9ad05c5d3b1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","html_url":"https://github.com/apache/openjpa/commit/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ca2ae045a2eebebc9f26c4a80d0eb69f723d51c/comments","author":null,"committer":null,"parents":[{"sha":"116797b77cef213e14a57ca1c49c5a53e6d71f9e","url":"https://api.github.com/repos/apache/openjpa/commits/116797b77cef213e14a57ca1c49c5a53e6d71f9e","html_url":"https://github.com/apache/openjpa/commit/116797b77cef213e14a57ca1c49c5a53e6d71f9e"}]},"merge_base_commit":{"sha":"671417a73a8d3c3548792da6886f207bca99b72d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3MTQxN2E3M2E4ZDNjMzU0ODc5MmRhNjg4NmYyMDdiY2E5OWI3MmQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-22T17:02:13Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-22T17:02:13Z"},"message":"OPENJPA-1115 Fix auto gen id related jUnit regressions on PostgreSQL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902177 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db071b10fadf5e7689c52512e88acb9b0858e4b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/db071b10fadf5e7689c52512e88acb9b0858e4b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/671417a73a8d3c3548792da6886f207bca99b72d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/671417a73a8d3c3548792da6886f207bca99b72d","html_url":"https://github.com/apache/openjpa/commit/671417a73a8d3c3548792da6886f207bca99b72d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/671417a73a8d3c3548792da6886f207bca99b72d/comments","author":null,"committer":null,"parents":[{"sha":"31757064ca69e04e6169f19f4ea5e6bb22c60bcb","url":"https://api.github.com/repos/apache/openjpa/commits/31757064ca69e04e6169f19f4ea5e6bb22c60bcb","html_url":"https://github.com/apache/openjpa/commit/31757064ca69e04e6169f19f4ea5e6bb22c60bcb"}]},"status":"diverged","ahead_by":98,"behind_by":10,"total_commits":98,"commits":[{"sha":"c15f473949ca72a972dc75f61c5f0b43a9dd1e9f","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxNWY0NzM5NDljYTcyYTk3MmRjNzVmNjFjNWYwYjQzYTlkZDFlOWY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-22T22:11:39Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-22T22:11:39Z"},"message":"OPENJPA-1460: back out the previous change until the visibility scope of orm.xml is fully agreed upon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902291 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d209057769558100fa1340f2cf7fcc114f9130c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d209057769558100fa1340f2cf7fcc114f9130c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c15f473949ca72a972dc75f61c5f0b43a9dd1e9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c15f473949ca72a972dc75f61c5f0b43a9dd1e9f","html_url":"https://github.com/apache/openjpa/commit/c15f473949ca72a972dc75f61c5f0b43a9dd1e9f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c15f473949ca72a972dc75f61c5f0b43a9dd1e9f/comments","author":null,"committer":null,"parents":[{"sha":"671417a73a8d3c3548792da6886f207bca99b72d","url":"https://api.github.com/repos/apache/openjpa/commits/671417a73a8d3c3548792da6886f207bca99b72d","html_url":"https://github.com/apache/openjpa/commit/671417a73a8d3c3548792da6886f207bca99b72d"}]},{"sha":"ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmODljOWQ2OTlkM2VjZTlmNjQ1NDJiM2NjOWM3YTJhY2UxZjNkNzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:34:51Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:34:51Z"},"message":"update copyrights for 2010\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902822 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dcf06d316ce20b957e215df08c0371ce558e18f0","url":"https://api.github.com/repos/apache/openjpa/git/trees/dcf06d316ce20b957e215df08c0371ce558e18f0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72","html_url":"https://github.com/apache/openjpa/commit/ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72/comments","author":null,"committer":null,"parents":[{"sha":"c15f473949ca72a972dc75f61c5f0b43a9dd1e9f","url":"https://api.github.com/repos/apache/openjpa/commits/c15f473949ca72a972dc75f61c5f0b43a9dd1e9f","html_url":"https://github.com/apache/openjpa/commit/c15f473949ca72a972dc75f61c5f0b43a9dd1e9f"}]},{"sha":"c9b82eec1f696cd42300fefe22184440aa6f70d3","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5YjgyZWVjMWY2OTZjZDQyMzAwZmVmZTIyMTg0NDQwYWE2ZjcwZDM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:48:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T14:48:10Z"},"message":"update copyright year in docs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902832 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d719c4508fe1b9ab68fa5d15a5c6852a8985044c","url":"https://api.github.com/repos/apache/openjpa/git/trees/d719c4508fe1b9ab68fa5d15a5c6852a8985044c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c9b82eec1f696cd42300fefe22184440aa6f70d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c9b82eec1f696cd42300fefe22184440aa6f70d3","html_url":"https://github.com/apache/openjpa/commit/c9b82eec1f696cd42300fefe22184440aa6f70d3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c9b82eec1f696cd42300fefe22184440aa6f70d3/comments","author":null,"committer":null,"parents":[{"sha":"ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72","url":"https://api.github.com/repos/apache/openjpa/commits/ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72","html_url":"https://github.com/apache/openjpa/commit/ef89c9d699d3ece9f64542b3cc9c7a2ace1f3d72"}]},{"sha":"85c75d84c21cf6dae278e277b2ab3e8b98194859","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1Yzc1ZDg0YzIxY2Y2ZGFlMjc4ZTI3N2IyYWIzZThiOTgxOTQ4NTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T17:36:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T17:36:15Z"},"message":"OPENJPA-1468 Upgrade to final Bean Validation spec API from Geronimo\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1dcfba68239539587cbe316948989e1f106ef3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1dcfba68239539587cbe316948989e1f106ef3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85c75d84c21cf6dae278e277b2ab3e8b98194859","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85c75d84c21cf6dae278e277b2ab3e8b98194859","html_url":"https://github.com/apache/openjpa/commit/85c75d84c21cf6dae278e277b2ab3e8b98194859","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85c75d84c21cf6dae278e277b2ab3e8b98194859/comments","author":null,"committer":null,"parents":[{"sha":"c9b82eec1f696cd42300fefe22184440aa6f70d3","url":"https://api.github.com/repos/apache/openjpa/commits/c9b82eec1f696cd42300fefe22184440aa6f70d3","html_url":"https://github.com/apache/openjpa/commit/c9b82eec1f696cd42300fefe22184440aa6f70d3"}]},{"sha":"e6850b316b2a4e438cea534a5e2c57ab8a814c1f","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2ODUwYjMxNmIyYTRlNDM4Y2VhNTM0YTVlMmM1N2FiOGE4MTRjMWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T18:31:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T18:31:02Z"},"message":"merge in more beta release updates\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902912 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5eaa21607aa6cf1f0c07b99eda44280ef84f61fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/5eaa21607aa6cf1f0c07b99eda44280ef84f61fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e6850b316b2a4e438cea534a5e2c57ab8a814c1f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e6850b316b2a4e438cea534a5e2c57ab8a814c1f","html_url":"https://github.com/apache/openjpa/commit/e6850b316b2a4e438cea534a5e2c57ab8a814c1f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e6850b316b2a4e438cea534a5e2c57ab8a814c1f/comments","author":null,"committer":null,"parents":[{"sha":"85c75d84c21cf6dae278e277b2ab3e8b98194859","url":"https://api.github.com/repos/apache/openjpa/commits/85c75d84c21cf6dae278e277b2ab3e8b98194859","html_url":"https://github.com/apache/openjpa/commit/85c75d84c21cf6dae278e277b2ab3e8b98194859"}]},{"sha":"9c90ca5506ace031689ce9803a1a1922e1c87693","node_id":"MDY6Q29tbWl0MjA2MzY0OjljOTBjYTU1MDZhY2UwMzE2ODljZTk4MDNhMWExOTIyZTFjODc2OTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T21:50:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-25T21:50:14Z"},"message":"merged in r902968 from beta branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902988 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b7adbf7ef123c7750a28aca0d0ea02dfec697d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b7adbf7ef123c7750a28aca0d0ea02dfec697d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c90ca5506ace031689ce9803a1a1922e1c87693","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c90ca5506ace031689ce9803a1a1922e1c87693","html_url":"https://github.com/apache/openjpa/commit/9c90ca5506ace031689ce9803a1a1922e1c87693","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c90ca5506ace031689ce9803a1a1922e1c87693/comments","author":null,"committer":null,"parents":[{"sha":"e6850b316b2a4e438cea534a5e2c57ab8a814c1f","url":"https://api.github.com/repos/apache/openjpa/commits/e6850b316b2a4e438cea534a5e2c57ab8a814c1f","html_url":"https://github.com/apache/openjpa/commit/e6850b316b2a4e438cea534a5e2c57ab8a814c1f"}]},{"sha":"83897b4d2882e5aa39d41e338ce7607e9d6cb4b4","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzODk3YjRkMjg4MmU1YWEzOWQ0MWUzMzhjZTc2MDdlOWQ2Y2I0YjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T03:12:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T03:12:12Z"},"message":"merged in r903062 from beta branch - fix openjpa-all, which had some jaxb code included by the shade plugin due to transitive depends\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903064 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a45563fe3cc4ce1815f6762d21db4ec0b057245","url":"https://api.github.com/repos/apache/openjpa/git/trees/7a45563fe3cc4ce1815f6762d21db4ec0b057245"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/83897b4d2882e5aa39d41e338ce7607e9d6cb4b4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/83897b4d2882e5aa39d41e338ce7607e9d6cb4b4","html_url":"https://github.com/apache/openjpa/commit/83897b4d2882e5aa39d41e338ce7607e9d6cb4b4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/83897b4d2882e5aa39d41e338ce7607e9d6cb4b4/comments","author":null,"committer":null,"parents":[{"sha":"9c90ca5506ace031689ce9803a1a1922e1c87693","url":"https://api.github.com/repos/apache/openjpa/commits/9c90ca5506ace031689ce9803a1a1922e1c87693","html_url":"https://github.com/apache/openjpa/commit/9c90ca5506ace031689ce9803a1a1922e1c87693"}]},{"sha":"f25dda05b5fe59f2478755f49b4772461c24a6af","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyNWRkYTA1YjVmZTU5ZjI0Nzg3NTVmNDliNDc3MjQ2MWMyNGE2YWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T15:52:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T15:52:37Z"},"message":"add pointer to 1.2.2 release notes, as discovered missing by Kevin.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903285 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7016c3bbe520ea4cc0d090c3cf8728e9a345aeca","url":"https://api.github.com/repos/apache/openjpa/git/trees/7016c3bbe520ea4cc0d090c3cf8728e9a345aeca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f25dda05b5fe59f2478755f49b4772461c24a6af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f25dda05b5fe59f2478755f49b4772461c24a6af","html_url":"https://github.com/apache/openjpa/commit/f25dda05b5fe59f2478755f49b4772461c24a6af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f25dda05b5fe59f2478755f49b4772461c24a6af/comments","author":null,"committer":null,"parents":[{"sha":"83897b4d2882e5aa39d41e338ce7607e9d6cb4b4","url":"https://api.github.com/repos/apache/openjpa/commits/83897b4d2882e5aa39d41e338ce7607e9d6cb4b4","html_url":"https://github.com/apache/openjpa/commit/83897b4d2882e5aa39d41e338ce7607e9d6cb4b4"}]},{"sha":"7091a5292781815e9876a03b16f85a644849ee0f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwOTFhNTI5Mjc4MTgxNWU5ODc2YTAzYjE2Zjg1YTY0NDg0OWVlMGY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T17:23:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T17:23:33Z"},"message":"OPENJPA-1076 Testcases for PersistenceProviderResolver contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903328 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f9782f6935833b0628c39c11ce99a54e1caac6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0f9782f6935833b0628c39c11ce99a54e1caac6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7091a5292781815e9876a03b16f85a644849ee0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7091a5292781815e9876a03b16f85a644849ee0f","html_url":"https://github.com/apache/openjpa/commit/7091a5292781815e9876a03b16f85a644849ee0f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7091a5292781815e9876a03b16f85a644849ee0f/comments","author":null,"committer":null,"parents":[{"sha":"f25dda05b5fe59f2478755f49b4772461c24a6af","url":"https://api.github.com/repos/apache/openjpa/commits/f25dda05b5fe59f2478755f49b4772461c24a6af","html_url":"https://github.com/apache/openjpa/commit/f25dda05b5fe59f2478755f49b4772461c24a6af"}]},{"sha":"a32573481e7759f1c29fd12f9850193b8e611690","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzMjU3MzQ4MWU3NzU5ZjFjMjlmZDEyZjk4NTAxOTNiOGU2MTE2OTA=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-27T19:57:59Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-27T19:57:59Z"},"message":"OPENJPA-1485 Check persistent collection attributes for null when determining load state.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aef99192ee4cab523133c7a39956336b679dfde3","url":"https://api.github.com/repos/apache/openjpa/git/trees/aef99192ee4cab523133c7a39956336b679dfde3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a32573481e7759f1c29fd12f9850193b8e611690","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a32573481e7759f1c29fd12f9850193b8e611690","html_url":"https://github.com/apache/openjpa/commit/a32573481e7759f1c29fd12f9850193b8e611690","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a32573481e7759f1c29fd12f9850193b8e611690/comments","author":null,"committer":null,"parents":[{"sha":"7091a5292781815e9876a03b16f85a644849ee0f","url":"https://api.github.com/repos/apache/openjpa/commits/7091a5292781815e9876a03b16f85a644849ee0f","html_url":"https://github.com/apache/openjpa/commit/7091a5292781815e9876a03b16f85a644849ee0f"}]},{"sha":"b3a931f4b0994d539e2e2dca98fa3a6a6914ee65","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzYTkzMWY0YjA5OTRkNTM5ZTJlMmRjYTk4ZmEzYTZhNjkxNGVlNjU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-27T20:16:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-27T20:16:02Z"},"message":"re-enable test.jar creation in parent pom, so the generated artifacts will get signed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903816 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08735e7aa661e8f69c31e67e0e954307ec9c24c3","url":"https://api.github.com/repos/apache/openjpa/git/trees/08735e7aa661e8f69c31e67e0e954307ec9c24c3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b3a931f4b0994d539e2e2dca98fa3a6a6914ee65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b3a931f4b0994d539e2e2dca98fa3a6a6914ee65","html_url":"https://github.com/apache/openjpa/commit/b3a931f4b0994d539e2e2dca98fa3a6a6914ee65","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b3a931f4b0994d539e2e2dca98fa3a6a6914ee65/comments","author":null,"committer":null,"parents":[{"sha":"a32573481e7759f1c29fd12f9850193b8e611690","url":"https://api.github.com/repos/apache/openjpa/commits/a32573481e7759f1c29fd12f9850193b8e611690","html_url":"https://github.com/apache/openjpa/commit/a32573481e7759f1c29fd12f9850193b8e611690"}]},{"sha":"4197457c850cba65612f29bb501f0f97e3e7fcd4","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxOTc0NTdjODUwY2JhNjU2MTJmMjliYjUwMWYwZjk3ZTNlN2ZjZDQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T00:04:31Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T00:04:31Z"},"message":"OPENJPA-1485: isLoaded util method should return true for an entity when an unloaded basic type is not in the fetch plan.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903914 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7932c65b00edeb6bd7348028be4e8b015e21637c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7932c65b00edeb6bd7348028be4e8b015e21637c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4197457c850cba65612f29bb501f0f97e3e7fcd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4197457c850cba65612f29bb501f0f97e3e7fcd4","html_url":"https://github.com/apache/openjpa/commit/4197457c850cba65612f29bb501f0f97e3e7fcd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4197457c850cba65612f29bb501f0f97e3e7fcd4/comments","author":null,"committer":null,"parents":[{"sha":"b3a931f4b0994d539e2e2dca98fa3a6a6914ee65","url":"https://api.github.com/repos/apache/openjpa/commits/b3a931f4b0994d539e2e2dca98fa3a6a6914ee65","html_url":"https://github.com/apache/openjpa/commit/b3a931f4b0994d539e2e2dca98fa3a6a6914ee65"}]},{"sha":"54ef07f799bfd130d825eef8a39257ff0f6eac1c","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0ZWYwN2Y3OTliZmQxMzBkODI1ZWVmOGEzOTI1N2ZmMGY2ZWFjMWM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T05:53:47Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T05:53:47Z"},"message":"OPENJPA-1485: fix potential classCast exception for StateManagerImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903964 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8e381f144bd526b77f314464216741d2d9d1e7f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/8e381f144bd526b77f314464216741d2d9d1e7f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/54ef07f799bfd130d825eef8a39257ff0f6eac1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/54ef07f799bfd130d825eef8a39257ff0f6eac1c","html_url":"https://github.com/apache/openjpa/commit/54ef07f799bfd130d825eef8a39257ff0f6eac1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/54ef07f799bfd130d825eef8a39257ff0f6eac1c/comments","author":null,"committer":null,"parents":[{"sha":"4197457c850cba65612f29bb501f0f97e3e7fcd4","url":"https://api.github.com/repos/apache/openjpa/commits/4197457c850cba65612f29bb501f0f97e3e7fcd4","html_url":"https://github.com/apache/openjpa/commit/4197457c850cba65612f29bb501f0f97e3e7fcd4"}]},{"sha":"c2ef7871fac32cde39a1c41da8727b1640362b00","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyZWY3ODcxZmFjMzJjZGUzOWExYzQxZGE4NzI3YjE2NDAzNjJiMDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-28T15:40:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-28T15:40:10Z"},"message":"upgrade to latest maven-release-plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@904136 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b82dff7f0db70c2fd1b3dd7f317a6b51390674bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/b82dff7f0db70c2fd1b3dd7f317a6b51390674bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c2ef7871fac32cde39a1c41da8727b1640362b00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c2ef7871fac32cde39a1c41da8727b1640362b00","html_url":"https://github.com/apache/openjpa/commit/c2ef7871fac32cde39a1c41da8727b1640362b00","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c2ef7871fac32cde39a1c41da8727b1640362b00/comments","author":null,"committer":null,"parents":[{"sha":"54ef07f799bfd130d825eef8a39257ff0f6eac1c","url":"https://api.github.com/repos/apache/openjpa/commits/54ef07f799bfd130d825eef8a39257ff0f6eac1c","html_url":"https://github.com/apache/openjpa/commit/54ef07f799bfd130d825eef8a39257ff0f6eac1c"}]},{"sha":"e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzNTYwY2ZkNmJmOGE0YmZlNWJhZDc4ZjE3YzU1MGE3MDZkNjYyNWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-28T16:38:52Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-28T16:38:52Z"},"message":"revert r903816 as creation of tests.jar artifacts must be done only in the modules that have tests to jar, as otherwise a jar will be created w/o the required license/notice files and cause the IANAL check to fail.  details added to release process wiki page explaining what other step is required at release time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@904149 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71dc794c8108c0b811d4aa19acd55ef78238849d","url":"https://api.github.com/repos/apache/openjpa/git/trees/71dc794c8108c0b811d4aa19acd55ef78238849d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","html_url":"https://github.com/apache/openjpa/commit/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c/comments","author":null,"committer":null,"parents":[{"sha":"c2ef7871fac32cde39a1c41da8727b1640362b00","url":"https://api.github.com/repos/apache/openjpa/commits/c2ef7871fac32cde39a1c41da8727b1640362b00","html_url":"https://github.com/apache/openjpa/commit/c2ef7871fac32cde39a1c41da8727b1640362b00"}]},{"sha":"1000f39d355943c8bfc31322f5a26ffd5a2a1d53","node_id":"MDY6Q29tbWl0MjA2MzY0OjEwMDBmMzlkMzU1OTQzYzhiZmMzMTMyMmY1YTI2ZmZkNWEyYTFkNTM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T21:57:48Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T21:57:48Z"},"message":"OPENJPA-1486: lazily fetched embeddable should not be materialized in the query result\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@904277 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5580409148e9d236867e4f2f70a9979503eb04d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5580409148e9d236867e4f2f70a9979503eb04d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","html_url":"https://github.com/apache/openjpa/commit/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/comments","author":null,"committer":null,"parents":[{"sha":"e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","url":"https://api.github.com/repos/apache/openjpa/commits/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","html_url":"https://github.com/apache/openjpa/commit/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c"}]},{"sha":"7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhYWQ5NWE3NWIwNmY1NjIwZmI0ZDlhYzliNTBlMWE4MTQ5ZDBlMTk=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-30T04:46:42Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-30T04:46:42Z"},"message":"OPENJPA-1485: null collection value can still be treated as loaded.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@904728 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a7b66379bdcc090cf2954ea5355ac10556cc1d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a7b66379bdcc090cf2954ea5355ac10556cc1d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","html_url":"https://github.com/apache/openjpa/commit/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19/comments","author":null,"committer":null,"parents":[{"sha":"1000f39d355943c8bfc31322f5a26ffd5a2a1d53","url":"https://api.github.com/repos/apache/openjpa/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","html_url":"https://github.com/apache/openjpa/commit/1000f39d355943c8bfc31322f5a26ffd5a2a1d53"}]},{"sha":"97496b0bd6fe8d7471c3b3495ecab01614b8dfd9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3NDk2YjBiZDZmZThkNzQ3MWMzYjM0OTVlY2FiMDE2MTRiOGRmZDk=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-31T11:15:01Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-31T11:15:01Z"},"message":"OPENJPA-1367: Improvements for H2 database. Commit patch provided by Prashant Bhat with slight modifications. Information on CROSS JOIN provided by Thomas Mueller.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cdb3c0ab55ce9c1b83bd2d963b87babc6d7ecefe","url":"https://api.github.com/repos/apache/openjpa/git/trees/cdb3c0ab55ce9c1b83bd2d963b87babc6d7ecefe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/97496b0bd6fe8d7471c3b3495ecab01614b8dfd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/97496b0bd6fe8d7471c3b3495ecab01614b8dfd9","html_url":"https://github.com/apache/openjpa/commit/97496b0bd6fe8d7471c3b3495ecab01614b8dfd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/97496b0bd6fe8d7471c3b3495ecab01614b8dfd9/comments","author":null,"committer":null,"parents":[{"sha":"7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","url":"https://api.github.com/repos/apache/openjpa/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","html_url":"https://github.com/apache/openjpa/commit/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19"}]},{"sha":"784e4560db9ed097c77b23d50eee4731d49510b2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4NGU0NTYwZGI5ZWQwOTdjNzdiMjNkNTBlZWU0NzMxZDQ5NTEwYjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-01T18:28:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-01T18:28:18Z"},"message":"OPENJPA-960: Block unwrap for Object.class or null argument \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905355 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"56500222aa925db3c3c691f978cf9faca1c855b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/56500222aa925db3c3c691f978cf9faca1c855b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/784e4560db9ed097c77b23d50eee4731d49510b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/784e4560db9ed097c77b23d50eee4731d49510b2","html_url":"https://github.com/apache/openjpa/commit/784e4560db9ed097c77b23d50eee4731d49510b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/784e4560db9ed097c77b23d50eee4731d49510b2/comments","author":null,"committer":null,"parents":[{"sha":"97496b0bd6fe8d7471c3b3495ecab01614b8dfd9","url":"https://api.github.com/repos/apache/openjpa/commits/97496b0bd6fe8d7471c3b3495ecab01614b8dfd9","html_url":"https://github.com/apache/openjpa/commit/97496b0bd6fe8d7471c3b3495ecab01614b8dfd9"}]},{"sha":"1a216e9fb71736bbcf2007c0e3a4463332280eeb","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhMjE2ZTlmYjcxNzM2YmJjZjIwMDdjMGUzYTQ0NjMzMzIyODBlZWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-02T07:58:31Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-02T07:58:31Z"},"message":"OPENJPA-1483: support count distinct compound key \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905540 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58b38b901cdda7bb868602bb89f77d208d640021","url":"https://api.github.com/repos/apache/openjpa/git/trees/58b38b901cdda7bb868602bb89f77d208d640021"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb","html_url":"https://github.com/apache/openjpa/commit/1a216e9fb71736bbcf2007c0e3a4463332280eeb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb/comments","author":null,"committer":null,"parents":[{"sha":"784e4560db9ed097c77b23d50eee4731d49510b2","url":"https://api.github.com/repos/apache/openjpa/commits/784e4560db9ed097c77b23d50eee4731d49510b2","html_url":"https://github.com/apache/openjpa/commit/784e4560db9ed097c77b23d50eee4731d49510b2"}]},{"sha":"cbf700e499b2e8e724873cefe2dd1f5f98ae0e32","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiZjcwMGU0OTliMmU4ZTcyNDg3M2NlZmUyZGQxZjVmOThhZTBlMzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-02T14:47:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-02T14:47:11Z"},"message":"minor notice file updates\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905653 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5eccb17deb6861e5494047b04973789b0867edc4","url":"https://api.github.com/repos/apache/openjpa/git/trees/5eccb17deb6861e5494047b04973789b0867edc4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbf700e499b2e8e724873cefe2dd1f5f98ae0e32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbf700e499b2e8e724873cefe2dd1f5f98ae0e32","html_url":"https://github.com/apache/openjpa/commit/cbf700e499b2e8e724873cefe2dd1f5f98ae0e32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbf700e499b2e8e724873cefe2dd1f5f98ae0e32/comments","author":null,"committer":null,"parents":[{"sha":"1a216e9fb71736bbcf2007c0e3a4463332280eeb","url":"https://api.github.com/repos/apache/openjpa/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb","html_url":"https://github.com/apache/openjpa/commit/1a216e9fb71736bbcf2007c0e3a4463332280eeb"}]},{"sha":"a720a9c6f69baa0dd3bed4953fbb772b5a0a4915","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3MjBhOWM2ZjY5YmFhMGRkM2JlZDQ5NTNmYmI3NzJiNWEwYTQ5MTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-02T23:23:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-02T23:23:57Z"},"message":"OPENJPA-1482:\nPrevent NoSuchMethodError when calling setVersion.\nSubmitted By : Rick Curtis\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905835 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a3b2923798417143c7bf2cc2da2b178d592d4110","url":"https://api.github.com/repos/apache/openjpa/git/trees/a3b2923798417143c7bf2cc2da2b178d592d4110"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a720a9c6f69baa0dd3bed4953fbb772b5a0a4915","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a720a9c6f69baa0dd3bed4953fbb772b5a0a4915","html_url":"https://github.com/apache/openjpa/commit/a720a9c6f69baa0dd3bed4953fbb772b5a0a4915","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a720a9c6f69baa0dd3bed4953fbb772b5a0a4915/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"cbf700e499b2e8e724873cefe2dd1f5f98ae0e32","url":"https://api.github.com/repos/apache/openjpa/commits/cbf700e499b2e8e724873cefe2dd1f5f98ae0e32","html_url":"https://github.com/apache/openjpa/commit/cbf700e499b2e8e724873cefe2dd1f5f98ae0e32"}]},{"sha":"ec0eeedf35d6250433d1a185ade1a894c44387ad","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjMGVlZWRmMzVkNjI1MDQzM2QxYTE4NWFkZTFhODk0YzQ0Mzg3YWQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-02-03T05:26:58Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-02-03T05:26:58Z"},"message":"OPENJPA-1493: Performance improvement in SelectImpl.getTableIndex() for JPQL without subselect\nThe JUnit regression uncovers an issue in Criteria Query\nadd @AllowFailure in TestTypesafeCriteria.testValues5(), it is found the expected sql is incorrect. A separate issue will address this problem.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0e11ee8d4589c29a340459c2e44ef9f972a3db1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/0e11ee8d4589c29a340459c2e44ef9f972a3db1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec0eeedf35d6250433d1a185ade1a894c44387ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec0eeedf35d6250433d1a185ade1a894c44387ad","html_url":"https://github.com/apache/openjpa/commit/ec0eeedf35d6250433d1a185ade1a894c44387ad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec0eeedf35d6250433d1a185ade1a894c44387ad/comments","author":null,"committer":null,"parents":[{"sha":"a720a9c6f69baa0dd3bed4953fbb772b5a0a4915","url":"https://api.github.com/repos/apache/openjpa/commits/a720a9c6f69baa0dd3bed4953fbb772b5a0a4915","html_url":"https://github.com/apache/openjpa/commit/a720a9c6f69baa0dd3bed4953fbb772b5a0a4915"}]},{"sha":"814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNGZlZjBmN2RmNDRlMjVkNWQzYzFmMWVkMDRjOGI0MTVkYzdjNDE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-04T19:38:27Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-04T19:38:27Z"},"message":"OPENJPA-1493: performance fix in getTableIndex\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@906614 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8463c6d88674f93b372c2e9a8110b79fe23760e","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8463c6d88674f93b372c2e9a8110b79fe23760e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41","html_url":"https://github.com/apache/openjpa/commit/814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41","comments_url":"https://api.github.com/repos/apache/openjpa/commits/814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41/comments","author":null,"committer":null,"parents":[{"sha":"ec0eeedf35d6250433d1a185ade1a894c44387ad","url":"https://api.github.com/repos/apache/openjpa/commits/ec0eeedf35d6250433d1a185ade1a894c44387ad","html_url":"https://github.com/apache/openjpa/commit/ec0eeedf35d6250433d1a185ade1a894c44387ad"}]},{"sha":"69c5eb11ff8545473e4d65102313e1a562f65cf8","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5YzVlYjExZmY4NTQ1NDczZTRkNjUxMDIzMTNlMWE1NjJmNjVjZjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-05T16:37:54Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-05T16:37:54Z"},"message":"OPENJPA-1498. Minor message file improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@906993 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"181a69e32a9f0f41b00d7d97aac04b6020e8d8f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/181a69e32a9f0f41b00d7d97aac04b6020e8d8f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69c5eb11ff8545473e4d65102313e1a562f65cf8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69c5eb11ff8545473e4d65102313e1a562f65cf8","html_url":"https://github.com/apache/openjpa/commit/69c5eb11ff8545473e4d65102313e1a562f65cf8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69c5eb11ff8545473e4d65102313e1a562f65cf8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41","url":"https://api.github.com/repos/apache/openjpa/commits/814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41","html_url":"https://github.com/apache/openjpa/commit/814fef0f7df44e25d5d3c1f1ed04c8b415dc7c41"}]},{"sha":"3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4NTRmOWI1ZTYzZGM1ZDQwZDY0NDVhZDNlZTkxMWM4YmE1YWJlYTU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-09T00:17:50Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-09T00:17:50Z"},"message":"OPENJPA-931: support nested embeddedId in IdClass during remove\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@907853 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a3f6f7c88d5e3d8d3cf4a43a91ae9c3fd74ea05","url":"https://api.github.com/repos/apache/openjpa/git/trees/1a3f6f7c88d5e3d8d3cf4a43a91ae9c3fd74ea05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5","html_url":"https://github.com/apache/openjpa/commit/3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5/comments","author":null,"committer":null,"parents":[{"sha":"69c5eb11ff8545473e4d65102313e1a562f65cf8","url":"https://api.github.com/repos/apache/openjpa/commits/69c5eb11ff8545473e4d65102313e1a562f65cf8","html_url":"https://github.com/apache/openjpa/commit/69c5eb11ff8545473e4d65102313e1a562f65cf8"}]},{"sha":"d3b3ee04389520f121eeb1684780e77f3fb75f94","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzYjNlZTA0Mzg5NTIwZjEyMWVlYjE2ODQ3ODBlNzdmM2ZiNzVmOTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-09T15:23:16Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-09T15:23:16Z"},"message":"OPENJPA-1502 Improve WARN msg for unrecognized EntityManager properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908071 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"164b5da94749b17ed403cf6ca40006d806f6abf8","url":"https://api.github.com/repos/apache/openjpa/git/trees/164b5da94749b17ed403cf6ca40006d806f6abf8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d3b3ee04389520f121eeb1684780e77f3fb75f94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d3b3ee04389520f121eeb1684780e77f3fb75f94","html_url":"https://github.com/apache/openjpa/commit/d3b3ee04389520f121eeb1684780e77f3fb75f94","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d3b3ee04389520f121eeb1684780e77f3fb75f94/comments","author":null,"committer":null,"parents":[{"sha":"3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5","url":"https://api.github.com/repos/apache/openjpa/commits/3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5","html_url":"https://github.com/apache/openjpa/commit/3854f9b5e63dc5d40d6445ad3ee911c8ba5abea5"}]},{"sha":"31265de187e0f6ba913ec895ef9e3374f4ecea47","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxMjY1ZGUxODdlMGY2YmE5MTNlYzg5NWVmOWUzMzc0ZjRlY2VhNDc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-09T18:36:10Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-09T18:36:10Z"},"message":"OPENJPA-1496: fix temporal parameter processing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"878431201aaa24c51d8589445123c855c032a3e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/878431201aaa24c51d8589445123c855c032a3e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47","html_url":"https://github.com/apache/openjpa/commit/31265de187e0f6ba913ec895ef9e3374f4ecea47","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47/comments","author":null,"committer":null,"parents":[{"sha":"d3b3ee04389520f121eeb1684780e77f3fb75f94","url":"https://api.github.com/repos/apache/openjpa/commits/d3b3ee04389520f121eeb1684780e77f3fb75f94","html_url":"https://github.com/apache/openjpa/commit/d3b3ee04389520f121eeb1684780e77f3fb75f94"}]},{"sha":"27abdb414926377f28e4aadff948576353ea3bc3","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3YWJkYjQxNDkyNjM3N2YyOGU0YWFkZmY5NDg1NzYzNTNlYTNiYzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-09T19:39:45Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-09T19:39:45Z"},"message":"OPENJPA-1107 TraversableResolver testcases contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908173 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b8e31286913b8a9d8842f1bf36c0f957352493a","url":"https://api.github.com/repos/apache/openjpa/git/trees/3b8e31286913b8a9d8842f1bf36c0f957352493a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/27abdb414926377f28e4aadff948576353ea3bc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/27abdb414926377f28e4aadff948576353ea3bc3","html_url":"https://github.com/apache/openjpa/commit/27abdb414926377f28e4aadff948576353ea3bc3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/27abdb414926377f28e4aadff948576353ea3bc3/comments","author":null,"committer":null,"parents":[{"sha":"31265de187e0f6ba913ec895ef9e3374f4ecea47","url":"https://api.github.com/repos/apache/openjpa/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47","html_url":"https://github.com/apache/openjpa/commit/31265de187e0f6ba913ec895ef9e3374f4ecea47"}]},{"sha":"ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkM2NmMmM2ODIxMGQzYWQ1M2Y3MWZkYzNhNWY5YTU0M2QxMmI3NDg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-09T21:13:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-09T21:13:44Z"},"message":"OPENJPA-1503: Use AccessController to load metamodel class.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908225 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc0d6d5e3df02b86ae2bb0ab2067b9d4a7c58307","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc0d6d5e3df02b86ae2bb0ab2067b9d4a7c58307"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","html_url":"https://github.com/apache/openjpa/commit/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748/comments","author":null,"committer":null,"parents":[{"sha":"27abdb414926377f28e4aadff948576353ea3bc3","url":"https://api.github.com/repos/apache/openjpa/commits/27abdb414926377f28e4aadff948576353ea3bc3","html_url":"https://github.com/apache/openjpa/commit/27abdb414926377f28e4aadff948576353ea3bc3"}]},{"sha":"6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmYTMyNzE5YjlkYTdiMjQ5ZDhmYWFhMmY4OWMxZWZmOGY0YTdkNDI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:26:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:26:31Z"},"message":"OPENJPA-1334: Separate distribution policy from DataCacheManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908322 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"74158eb7fd3dfe5cc35a301cde2c98bafb8492c9","url":"https://api.github.com/repos/apache/openjpa/git/trees/74158eb7fd3dfe5cc35a301cde2c98bafb8492c9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","html_url":"https://github.com/apache/openjpa/commit/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/comments","author":null,"committer":null,"parents":[{"sha":"ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","url":"https://api.github.com/repos/apache/openjpa/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","html_url":"https://github.com/apache/openjpa/commit/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748"}]},{"sha":"92f162bd4b12b0700f9784df26cfb21982a44c91","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyZjE2MmJkNGIxMmIwNzAwZjk3ODRkZjI2Y2ZiMjE5ODJhNDRjOTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:32:41Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:32:41Z"},"message":"OPENJPA-1334: Separate distribution policy from DataCacheManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908325 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c364b8f8585311967c8442b6b443e5141a73cd6","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c364b8f8585311967c8442b6b443e5141a73cd6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/92f162bd4b12b0700f9784df26cfb21982a44c91","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/92f162bd4b12b0700f9784df26cfb21982a44c91","html_url":"https://github.com/apache/openjpa/commit/92f162bd4b12b0700f9784df26cfb21982a44c91","comments_url":"https://api.github.com/repos/apache/openjpa/commits/92f162bd4b12b0700f9784df26cfb21982a44c91/comments","author":null,"committer":null,"parents":[{"sha":"6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","url":"https://api.github.com/repos/apache/openjpa/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","html_url":"https://github.com/apache/openjpa/commit/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42"}]},{"sha":"2641d43ed44233b666048977a260aa4a85cde518","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2NDFkNDNlZDQ0MjMzYjY2NjA0ODk3N2EyNjBhYTRhODVjZGU1MTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:39:38Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:39:38Z"},"message":"OPENJPA-1334: Separate distribution policy from DataCacheManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c03b14304a1ab6981d71f5039e61ef58539c118f","url":"https://api.github.com/repos/apache/openjpa/git/trees/c03b14304a1ab6981d71f5039e61ef58539c118f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2641d43ed44233b666048977a260aa4a85cde518","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2641d43ed44233b666048977a260aa4a85cde518","html_url":"https://github.com/apache/openjpa/commit/2641d43ed44233b666048977a260aa4a85cde518","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2641d43ed44233b666048977a260aa4a85cde518/comments","author":null,"committer":null,"parents":[{"sha":"92f162bd4b12b0700f9784df26cfb21982a44c91","url":"https://api.github.com/repos/apache/openjpa/commits/92f162bd4b12b0700f9784df26cfb21982a44c91","html_url":"https://github.com/apache/openjpa/commit/92f162bd4b12b0700f9784df26cfb21982a44c91"}]},{"sha":"4a987190d99d77dd18878423280489367bd17397","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhOTg3MTkwZDk5ZDc3ZGQxODg3ODQyMzI4MDQ4OTM2N2JkMTczOTc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-10T18:23:59Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-10T18:23:59Z"},"message":"OPENJPA-1460: resolve visibility scope of orm.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908621 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0dbe7012c9f26fbdfe0f1899be703156542be451","url":"https://api.github.com/repos/apache/openjpa/git/trees/0dbe7012c9f26fbdfe0f1899be703156542be451"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4a987190d99d77dd18878423280489367bd17397","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4a987190d99d77dd18878423280489367bd17397","html_url":"https://github.com/apache/openjpa/commit/4a987190d99d77dd18878423280489367bd17397","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4a987190d99d77dd18878423280489367bd17397/comments","author":null,"committer":null,"parents":[{"sha":"2641d43ed44233b666048977a260aa4a85cde518","url":"https://api.github.com/repos/apache/openjpa/commits/2641d43ed44233b666048977a260aa4a85cde518","html_url":"https://github.com/apache/openjpa/commit/2641d43ed44233b666048977a260aa4a85cde518"}]},{"sha":"f259a4ee1e12b5efe4435665a99f61bced7e8106","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyNTlhNGVlMWUxMmI1ZWZlNDQzNTY2NWE5OWY2MWJjZWQ3ZTgxMDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-10T20:35:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-10T20:35:22Z"},"message":"OPENJPA-1504 Update TestTraversableResolver so it can be used with Hibernate or Agimatec providers.  Upgrade to agimatec-validation-0.9.6-SNAPSHOT, which now supports constraints.xml so all junits pass again with it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908660 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93dcc4d635c28a146bd10b2957e04d413745bfa5","url":"https://api.github.com/repos/apache/openjpa/git/trees/93dcc4d635c28a146bd10b2957e04d413745bfa5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106","html_url":"https://github.com/apache/openjpa/commit/f259a4ee1e12b5efe4435665a99f61bced7e8106","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106/comments","author":null,"committer":null,"parents":[{"sha":"4a987190d99d77dd18878423280489367bd17397","url":"https://api.github.com/repos/apache/openjpa/commits/4a987190d99d77dd18878423280489367bd17397","html_url":"https://github.com/apache/openjpa/commit/4a987190d99d77dd18878423280489367bd17397"}]},{"sha":"dc61fa06805c3da59008411127e0e2cc8a479d97","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjNjFmYTA2ODA1YzNkYTU5MDA4NDExMTI3ZTBlMmNjOGE0NzlkOTc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-10T21:58:53Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-10T21:58:53Z"},"message":"OPENJPA-1334 add missing license headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9081174ab9015a2abcc49335b2d7caf006bbc29","url":"https://api.github.com/repos/apache/openjpa/git/trees/d9081174ab9015a2abcc49335b2d7caf006bbc29"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc61fa06805c3da59008411127e0e2cc8a479d97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc61fa06805c3da59008411127e0e2cc8a479d97","html_url":"https://github.com/apache/openjpa/commit/dc61fa06805c3da59008411127e0e2cc8a479d97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc61fa06805c3da59008411127e0e2cc8a479d97/comments","author":null,"committer":null,"parents":[{"sha":"f259a4ee1e12b5efe4435665a99f61bced7e8106","url":"https://api.github.com/repos/apache/openjpa/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106","html_url":"https://github.com/apache/openjpa/commit/f259a4ee1e12b5efe4435665a99f61bced7e8106"}]},{"sha":"19f5b130458db0c5797992446f60f542cc44fccf","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5ZjViMTMwNDU4ZGIwYzU3OTc5OTI0NDZmNjBmNTQyY2M0NGZjY2Y=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-10T23:01:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-10T23:01:42Z"},"message":"Add doc for datacache inclusion/exclusion\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908729 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6407e15997ec724c52e829be6496a4fd443061e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a6407e15997ec724c52e829be6496a4fd443061e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/19f5b130458db0c5797992446f60f542cc44fccf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/19f5b130458db0c5797992446f60f542cc44fccf","html_url":"https://github.com/apache/openjpa/commit/19f5b130458db0c5797992446f60f542cc44fccf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/19f5b130458db0c5797992446f60f542cc44fccf/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"dc61fa06805c3da59008411127e0e2cc8a479d97","url":"https://api.github.com/repos/apache/openjpa/commits/dc61fa06805c3da59008411127e0e2cc8a479d97","html_url":"https://github.com/apache/openjpa/commit/dc61fa06805c3da59008411127e0e2cc8a479d97"}]},{"sha":"f028f744c2a24fcc93fd13aa07e255655ea552a0","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwMjhmNzQ0YzJhMjRmY2M5M2ZkMTNhYTA3ZTI1NTY1NWVhNTUyYTA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-10T23:11:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-10T23:11:12Z"},"message":"fix line width and add missing end section tag.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908737 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a616c1e5a522e6b2f8e6614163b39af230238d68","url":"https://api.github.com/repos/apache/openjpa/git/trees/a616c1e5a522e6b2f8e6614163b39af230238d68"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f028f744c2a24fcc93fd13aa07e255655ea552a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f028f744c2a24fcc93fd13aa07e255655ea552a0","html_url":"https://github.com/apache/openjpa/commit/f028f744c2a24fcc93fd13aa07e255655ea552a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f028f744c2a24fcc93fd13aa07e255655ea552a0/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"19f5b130458db0c5797992446f60f542cc44fccf","url":"https://api.github.com/repos/apache/openjpa/commits/19f5b130458db0c5797992446f60f542cc44fccf","html_url":"https://github.com/apache/openjpa/commit/19f5b130458db0c5797992446f60f542cc44fccf"}]},{"sha":"fb004027ad861c1c0b00c0470bf3248d16f54c15","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiMDA0MDI3YWQ4NjFjMWMwYjAwYzA0NzBiZjMyNDhkMTZmNTRjMTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T16:18:46Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T16:18:46Z"},"message":"OPENJPA-1334: Emulate 1.2 versions IncludedTypes/ExcludedTypes functionality via new distribution policy mechanics\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909054 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2088ad09a0e42fea9e8e51570b379f3726cbe887","url":"https://api.github.com/repos/apache/openjpa/git/trees/2088ad09a0e42fea9e8e51570b379f3726cbe887"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15","html_url":"https://github.com/apache/openjpa/commit/fb004027ad861c1c0b00c0470bf3248d16f54c15","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15/comments","author":null,"committer":null,"parents":[{"sha":"f028f744c2a24fcc93fd13aa07e255655ea552a0","url":"https://api.github.com/repos/apache/openjpa/commits/f028f744c2a24fcc93fd13aa07e255655ea552a0","html_url":"https://github.com/apache/openjpa/commit/f028f744c2a24fcc93fd13aa07e255655ea552a0"}]},{"sha":"80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwZDZjNzliNTI1ODhkZDBjMGY3ZTFmZDc2ZjAyYjY3YTliOWE5NDU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-11T16:22:58Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-11T16:22:58Z"},"message":"OPENJPA-1506 - Fix ConfigurationImpl.equals() to support derived provider.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909058 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afbf964d19d2b927bb2f6c9c5b5b6a4e68f93426","url":"https://api.github.com/repos/apache/openjpa/git/trees/afbf964d19d2b927bb2f6c9c5b5b6a4e68f93426"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","html_url":"https://github.com/apache/openjpa/commit/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945/comments","author":null,"committer":null,"parents":[{"sha":"fb004027ad861c1c0b00c0470bf3248d16f54c15","url":"https://api.github.com/repos/apache/openjpa/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15","html_url":"https://github.com/apache/openjpa/commit/fb004027ad861c1c0b00c0470bf3248d16f54c15"}]},{"sha":"feff96b4c468cef75140700aa14c71f6dafaf7c8","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlZmY5NmI0YzQ2OGNlZjc1MTQwNzAwYWExNGM3MWY2ZGFmYWY3Yzg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T17:37:53Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T17:37:53Z"},"message":"OPENJPA-1334: Emulate 1.2 versions IncludedTypes/ExcludedTypes functionality via new distribution policy mechanics\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909091 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a0f3e87129fa859b1e738d376cb4bf039c60d13","url":"https://api.github.com/repos/apache/openjpa/git/trees/3a0f3e87129fa859b1e738d376cb4bf039c60d13"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8","html_url":"https://github.com/apache/openjpa/commit/feff96b4c468cef75140700aa14c71f6dafaf7c8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8/comments","author":null,"committer":null,"parents":[{"sha":"80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","url":"https://api.github.com/repos/apache/openjpa/commits/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","html_url":"https://github.com/apache/openjpa/commit/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945"}]},{"sha":"9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzNDRkMDNiNTBiZmUyZDNmMTExYWM5YmQxYzU1MGU5YTNkNDFhNjE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-11T23:14:14Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-11T23:14:14Z"},"message":"OPENJPA-1001:\nTestcases\nSubmitted By: Richard Rak\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909171 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"251a97daf03b4ded33064564f31c0c3a4b678065","url":"https://api.github.com/repos/apache/openjpa/git/trees/251a97daf03b4ded33064564f31c0c3a4b678065"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","html_url":"https://github.com/apache/openjpa/commit/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"feff96b4c468cef75140700aa14c71f6dafaf7c8","url":"https://api.github.com/repos/apache/openjpa/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8","html_url":"https://github.com/apache/openjpa/commit/feff96b4c468cef75140700aa14c71f6dafaf7c8"}]},{"sha":"e603bdc5c8e4a2d8c0be197490f2e71a33fdc553","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2MDNiZGM1YzhlNGEyZDhjMGJlMTk3NDkwZjJlNzFhMzNmZGM1NTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2010-02-12T17:38:45Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2010-02-12T17:38:45Z"},"message":"OPENJPA-1507. NPE fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909515 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b9439b01764a037a1e043f10ab6ff7c3fd1a294","url":"https://api.github.com/repos/apache/openjpa/git/trees/9b9439b01764a037a1e043f10ab6ff7c3fd1a294"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553","html_url":"https://github.com/apache/openjpa/commit/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553/comments","author":null,"committer":null,"parents":[{"sha":"9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","url":"https://api.github.com/repos/apache/openjpa/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","html_url":"https://github.com/apache/openjpa/commit/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61"}]},{"sha":"5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmOGFkM2U4MTFmNTk1Y2VlNjQ5Nzk1M2NlNmM3OTg5ZDNjNWUzYzg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T17:52:38Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T17:52:38Z"},"message":"OPENJPA-1442: \nsetting svn:eol-style native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f0bf8ce4e4a9baa6b99b5a82105d9e7d6f6c680d","url":"https://api.github.com/repos/apache/openjpa/git/trees/f0bf8ce4e4a9baa6b99b5a82105d9e7d6f6c680d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","html_url":"https://github.com/apache/openjpa/commit/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e603bdc5c8e4a2d8c0be197490f2e71a33fdc553","url":"https://api.github.com/repos/apache/openjpa/commits/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553","html_url":"https://github.com/apache/openjpa/commit/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553"}]},{"sha":"a0e95fb993b33ff75d528d5e96c71b4f27f2f505","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZTk1ZmI5OTNiMzNmZjc1ZDUyOGQ1ZTk2YzcxYjRmMjdmMmY1MDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T17:55:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T17:55:39Z"},"message":"OPENJPA-1401:\nsetting svn:eol-style native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909534 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f980a8c7bd0f9ec1ecd244afdea7378d70c46b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f980a8c7bd0f9ec1ecd244afdea7378d70c46b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","html_url":"https://github.com/apache/openjpa/commit/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","url":"https://api.github.com/repos/apache/openjpa/commits/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","html_url":"https://github.com/apache/openjpa/commit/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8"}]},{"sha":"c1a24be02bed1d45a892acc4b777c0f834ef4c9b","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxYTI0YmUwMmJlZDFkNDVhODkyYWNjNGI3NzdjMGY4MzRlZjRjOWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T18:21:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T18:21:01Z"},"message":"OPENJPA-1370:\nSetting svn:eol-style native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909545 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6eeab790b4328e3c844a9603b270b857e6baa9e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6eeab790b4328e3c844a9603b270b857e6baa9e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","html_url":"https://github.com/apache/openjpa/commit/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a0e95fb993b33ff75d528d5e96c71b4f27f2f505","url":"https://api.github.com/repos/apache/openjpa/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","html_url":"https://github.com/apache/openjpa/commit/a0e95fb993b33ff75d528d5e96c71b4f27f2f505"}]},{"sha":"307d5e8a9899d538fa0ad3729fdd6dccb8b441f3","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwN2Q1ZThhOTg5OWQ1MzhmYTBhZDM3MjlmZGQ2ZGNjYjhiNDQxZjM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-12T20:22:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-12T20:22:29Z"},"message":"merge in updates from trunk/openjpa/pom.xml and waiting for testing from Apache Aries before merging into openjpa/pom.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909595 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8df78930b699ad3693644c6bd5f8fb9942d17b7c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8df78930b699ad3693644c6bd5f8fb9942d17b7c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/307d5e8a9899d538fa0ad3729fdd6dccb8b441f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/307d5e8a9899d538fa0ad3729fdd6dccb8b441f3","html_url":"https://github.com/apache/openjpa/commit/307d5e8a9899d538fa0ad3729fdd6dccb8b441f3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/307d5e8a9899d538fa0ad3729fdd6dccb8b441f3/comments","author":null,"committer":null,"parents":[{"sha":"c1a24be02bed1d45a892acc4b777c0f834ef4c9b","url":"https://api.github.com/repos/apache/openjpa/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","html_url":"https://github.com/apache/openjpa/commit/c1a24be02bed1d45a892acc4b777c0f834ef4c9b"}]},{"sha":"23341c871cc395924aa984976c725af06af84315","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzMzQxYzg3MWNjMzk1OTI0YWE5ODQ5NzZjNzI1YWYwNmFmODQzMTU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2010-02-13T00:10:11Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2010-02-13T00:10:11Z"},"message":"OPENJPA-1509. In-mem bulk update + enums.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909669 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"baabd8d650f8b63b602da9e75e8b25e937b1e981","url":"https://api.github.com/repos/apache/openjpa/git/trees/baabd8d650f8b63b602da9e75e8b25e937b1e981"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/23341c871cc395924aa984976c725af06af84315","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/23341c871cc395924aa984976c725af06af84315","html_url":"https://github.com/apache/openjpa/commit/23341c871cc395924aa984976c725af06af84315","comments_url":"https://api.github.com/repos/apache/openjpa/commits/23341c871cc395924aa984976c725af06af84315/comments","author":null,"committer":null,"parents":[{"sha":"307d5e8a9899d538fa0ad3729fdd6dccb8b441f3","url":"https://api.github.com/repos/apache/openjpa/commits/307d5e8a9899d538fa0ad3729fdd6dccb8b441f3","html_url":"https://github.com/apache/openjpa/commit/307d5e8a9899d538fa0ad3729fdd6dccb8b441f3"}]},{"sha":"e70d8bf5f2de6b0f4fac0529830a64ce387eee01","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3MGQ4YmY1ZjJkZTZiMGY0ZmFjMDUyOTgzMGE2NGNlMzg3ZWVlMDE=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-13T11:09:57Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-13T11:09:57Z"},"message":"Added GlassFish to javadoc and moved its JNDI location up in the list - see https://jira.jboss.org/jira/browse/JBCACHE-1354\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909792 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a5de3b2006abd52c3e5f930c80e324f5d40437c","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a5de3b2006abd52c3e5f930c80e324f5d40437c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e70d8bf5f2de6b0f4fac0529830a64ce387eee01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e70d8bf5f2de6b0f4fac0529830a64ce387eee01","html_url":"https://github.com/apache/openjpa/commit/e70d8bf5f2de6b0f4fac0529830a64ce387eee01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e70d8bf5f2de6b0f4fac0529830a64ce387eee01/comments","author":null,"committer":null,"parents":[{"sha":"23341c871cc395924aa984976c725af06af84315","url":"https://api.github.com/repos/apache/openjpa/commits/23341c871cc395924aa984976c725af06af84315","html_url":"https://github.com/apache/openjpa/commit/23341c871cc395924aa984976c725af06af84315"}]},{"sha":"8cc89f96dcb353a3cbdd20cbca236b1b65f127c0","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjYzg5Zjk2ZGNiMzUzYTNjYmRkMjBjYmNhMjM2YjFiNjVmMTI3YzA=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-14T12:43:46Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-14T12:43:46Z"},"message":"OPENJPA-1510: User manual corrections: some terms made consistent in case, made hint and locking descriptions more database-agnostic, removed an old MySQL known issue, H2 version updated.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910003 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55d359c00a745c0d58b640a07a0a35a5dfcfe156","url":"https://api.github.com/repos/apache/openjpa/git/trees/55d359c00a745c0d58b640a07a0a35a5dfcfe156"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8cc89f96dcb353a3cbdd20cbca236b1b65f127c0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8cc89f96dcb353a3cbdd20cbca236b1b65f127c0","html_url":"https://github.com/apache/openjpa/commit/8cc89f96dcb353a3cbdd20cbca236b1b65f127c0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8cc89f96dcb353a3cbdd20cbca236b1b65f127c0/comments","author":null,"committer":null,"parents":[{"sha":"e70d8bf5f2de6b0f4fac0529830a64ce387eee01","url":"https://api.github.com/repos/apache/openjpa/commits/e70d8bf5f2de6b0f4fac0529830a64ce387eee01","html_url":"https://github.com/apache/openjpa/commit/e70d8bf5f2de6b0f4fac0529830a64ce387eee01"}]},{"sha":"0b1268aa5de08615493f4f6369b70bf06c07eab8","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiMTI2OGFhNWRlMDg2MTU0OTNmNGY2MzY5YjcwYmYwNmMwN2VhYjg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-15T18:56:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-15T18:56:10Z"},"message":"aries needs a different service name for now\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910300 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb835c238238da063186cc39c2dc1ae3374a46a8","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb835c238238da063186cc39c2dc1ae3374a46a8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b1268aa5de08615493f4f6369b70bf06c07eab8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b1268aa5de08615493f4f6369b70bf06c07eab8","html_url":"https://github.com/apache/openjpa/commit/0b1268aa5de08615493f4f6369b70bf06c07eab8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b1268aa5de08615493f4f6369b70bf06c07eab8/comments","author":null,"committer":null,"parents":[{"sha":"8cc89f96dcb353a3cbdd20cbca236b1b65f127c0","url":"https://api.github.com/repos/apache/openjpa/commits/8cc89f96dcb353a3cbdd20cbca236b1b65f127c0","html_url":"https://github.com/apache/openjpa/commit/8cc89f96dcb353a3cbdd20cbca236b1b65f127c0"}]},{"sha":"928993b7e2279d3977c130638efac0a5c3a5e3c1","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyODk5M2I3ZTIyNzlkMzk3N2MxMzA2MzhlZmFjMGE1YzNhNWUzYzE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-15T20:41:13Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-15T20:41:13Z"},"message":"OPENJPA-1512 Include a BundleActivator to register ourselves as a javax.persistence.provider for Apache Aries\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910332 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e4d67954a707b68f91a7a1086fd1ffde8e8951d","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e4d67954a707b68f91a7a1086fd1ffde8e8951d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/928993b7e2279d3977c130638efac0a5c3a5e3c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/928993b7e2279d3977c130638efac0a5c3a5e3c1","html_url":"https://github.com/apache/openjpa/commit/928993b7e2279d3977c130638efac0a5c3a5e3c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/928993b7e2279d3977c130638efac0a5c3a5e3c1/comments","author":null,"committer":null,"parents":[{"sha":"0b1268aa5de08615493f4f6369b70bf06c07eab8","url":"https://api.github.com/repos/apache/openjpa/commits/0b1268aa5de08615493f4f6369b70bf06c07eab8","html_url":"https://github.com/apache/openjpa/commit/0b1268aa5de08615493f4f6369b70bf06c07eab8"}]},{"sha":"ad106583e804914433e0ff9d3644b6e8894d821c","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkMTA2NTgzZTgwNDkxNDQzM2UwZmY5ZDM2NDRiNmU4ODk0ZDgyMWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-16T17:44:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-16T17:44:30Z"},"message":"OPENJPA-1503:Metamodel reflection  with security manager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910616 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f32407dafe1bf408731c380b0fd2ad87fd4e102","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f32407dafe1bf408731c380b0fd2ad87fd4e102"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad106583e804914433e0ff9d3644b6e8894d821c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad106583e804914433e0ff9d3644b6e8894d821c","html_url":"https://github.com/apache/openjpa/commit/ad106583e804914433e0ff9d3644b6e8894d821c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad106583e804914433e0ff9d3644b6e8894d821c/comments","author":null,"committer":null,"parents":[{"sha":"928993b7e2279d3977c130638efac0a5c3a5e3c1","url":"https://api.github.com/repos/apache/openjpa/commits/928993b7e2279d3977c130638efac0a5c3a5e3c1","html_url":"https://github.com/apache/openjpa/commit/928993b7e2279d3977c130638efac0a5c3a5e3c1"}]},{"sha":"d82add658d2dd767680978e038501895005a3eb3","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4MmFkZDY1OGQyZGQ3Njc2ODA5NzhlMDM4NTAxODk1MDA1YTNlYjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-16T17:46:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-16T17:46:00Z"},"message":"OPENJPA-1503:Metamodel reflection  with security manager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910617 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41b30b33406f0cb47f749fc3994e0aebbf5a0f12","url":"https://api.github.com/repos/apache/openjpa/git/trees/41b30b33406f0cb47f749fc3994e0aebbf5a0f12"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d82add658d2dd767680978e038501895005a3eb3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d82add658d2dd767680978e038501895005a3eb3","html_url":"https://github.com/apache/openjpa/commit/d82add658d2dd767680978e038501895005a3eb3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d82add658d2dd767680978e038501895005a3eb3/comments","author":null,"committer":null,"parents":[{"sha":"ad106583e804914433e0ff9d3644b6e8894d821c","url":"https://api.github.com/repos/apache/openjpa/commits/ad106583e804914433e0ff9d3644b6e8894d821c","html_url":"https://github.com/apache/openjpa/commit/ad106583e804914433e0ff9d3644b6e8894d821c"}]},{"sha":"d037890f7410c1d3f96d87ad876726578b43c61c","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwMzc4OTBmNzQxMGMxZDNmOTZkODdhZDg3NjcyNjU3OGI0M2M2MWM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-16T20:00:38Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-16T20:00:38Z"},"message":"OPENJPA-1515: Make CacheStatistics configurable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910667 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"422c6493231f88f4a5cec57ab42e316390a8ddab","url":"https://api.github.com/repos/apache/openjpa/git/trees/422c6493231f88f4a5cec57ab42e316390a8ddab"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d037890f7410c1d3f96d87ad876726578b43c61c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d037890f7410c1d3f96d87ad876726578b43c61c","html_url":"https://github.com/apache/openjpa/commit/d037890f7410c1d3f96d87ad876726578b43c61c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d037890f7410c1d3f96d87ad876726578b43c61c/comments","author":null,"committer":null,"parents":[{"sha":"d82add658d2dd767680978e038501895005a3eb3","url":"https://api.github.com/repos/apache/openjpa/commits/d82add658d2dd767680978e038501895005a3eb3","html_url":"https://github.com/apache/openjpa/commit/d82add658d2dd767680978e038501895005a3eb3"}]},{"sha":"5d6a881a43965f778ed623c7755dd8737b538a88","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkNmE4ODFhNDM5NjVmNzc4ZWQ2MjNjNzc1NWRkODczN2I1MzhhODg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-17T22:17:02Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-17T22:17:02Z"},"message":"OPENJPA-1517: Reduce synchronization in LifecycleEventManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911194 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec141be7b4c51d66bb7f522870df3425cf341d42","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec141be7b4c51d66bb7f522870df3425cf341d42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d6a881a43965f778ed623c7755dd8737b538a88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d6a881a43965f778ed623c7755dd8737b538a88","html_url":"https://github.com/apache/openjpa/commit/5d6a881a43965f778ed623c7755dd8737b538a88","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d6a881a43965f778ed623c7755dd8737b538a88/comments","author":null,"committer":null,"parents":[{"sha":"d037890f7410c1d3f96d87ad876726578b43c61c","url":"https://api.github.com/repos/apache/openjpa/commits/d037890f7410c1d3f96d87ad876726578b43c61c","html_url":"https://github.com/apache/openjpa/commit/d037890f7410c1d3f96d87ad876726578b43c61c"}]},{"sha":"3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjZDhjNGM2ZjBiYmM3ZTM3YmUzYzhmYzQ1Yjg0YWZmNDRiZWU0YjE=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-17T23:00:50Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-17T23:00:50Z"},"message":"OPENJPA-1517: Reduce synchronization in LifecycleEventManager. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911213 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"811cb648b7ec38491a71d0a9841bd9ef15f15b58","url":"https://api.github.com/repos/apache/openjpa/git/trees/811cb648b7ec38491a71d0a9841bd9ef15f15b58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","html_url":"https://github.com/apache/openjpa/commit/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1/comments","author":null,"committer":null,"parents":[{"sha":"5d6a881a43965f778ed623c7755dd8737b538a88","url":"https://api.github.com/repos/apache/openjpa/commits/5d6a881a43965f778ed623c7755dd8737b538a88","html_url":"https://github.com/apache/openjpa/commit/5d6a881a43965f778ed623c7755dd8737b538a88"}]},{"sha":"bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkYjFlNWQ2ZjI5ODRlYzNiN2U1ZTZjODRjOTU5NWJiYTI1ZTY5M2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T01:26:04Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T01:26:04Z"},"message":"OPENJPA-1503: Set txn for rollback directly on illegal argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911240 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a1bc7effd713385ddde22c3c308a6b28b993ccc","url":"https://api.github.com/repos/apache/openjpa/git/trees/1a1bc7effd713385ddde22c3c308a6b28b993ccc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b","html_url":"https://github.com/apache/openjpa/commit/bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b/comments","author":null,"committer":null,"parents":[{"sha":"3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","url":"https://api.github.com/repos/apache/openjpa/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","html_url":"https://github.com/apache/openjpa/commit/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1"}]},{"sha":"c043302e1e6c90d2859ae5833f455a53a3c62bd8","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwNDMzMDJlMWU2YzkwZDI4NTlhZTU4MzNmNDU1YTUzYTNjNjJiZDg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T01:28:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T01:28:00Z"},"message":"OPENJPA-1503: Set txn for rollback directly on illegal argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911241 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19469632b3f964a21378bd95019d89e0453ee183","url":"https://api.github.com/repos/apache/openjpa/git/trees/19469632b3f964a21378bd95019d89e0453ee183"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c043302e1e6c90d2859ae5833f455a53a3c62bd8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c043302e1e6c90d2859ae5833f455a53a3c62bd8","html_url":"https://github.com/apache/openjpa/commit/c043302e1e6c90d2859ae5833f455a53a3c62bd8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c043302e1e6c90d2859ae5833f455a53a3c62bd8/comments","author":null,"committer":null,"parents":[{"sha":"bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b","url":"https://api.github.com/repos/apache/openjpa/commits/bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b","html_url":"https://github.com/apache/openjpa/commit/bdb1e5d6f2984ec3b7e5e6c84c9595bba25e693b"}]},{"sha":"8df8d0234e473bdc930be9570e8e27e837dcbaeb","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkZjhkMDIzNGU0NzNiZGM5MzBiZTk1NzBlOGUyN2U4MzdkY2JhZWI=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-18T09:43:10Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-18T09:43:10Z"},"message":"OPENJPA-1510: Fix two broken references.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911297 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4188f066b113eefb91bdceca59983ee271623ae9","url":"https://api.github.com/repos/apache/openjpa/git/trees/4188f066b113eefb91bdceca59983ee271623ae9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8df8d0234e473bdc930be9570e8e27e837dcbaeb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8df8d0234e473bdc930be9570e8e27e837dcbaeb","html_url":"https://github.com/apache/openjpa/commit/8df8d0234e473bdc930be9570e8e27e837dcbaeb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8df8d0234e473bdc930be9570e8e27e837dcbaeb/comments","author":null,"committer":null,"parents":[{"sha":"c043302e1e6c90d2859ae5833f455a53a3c62bd8","url":"https://api.github.com/repos/apache/openjpa/commits/c043302e1e6c90d2859ae5833f455a53a3c62bd8","html_url":"https://github.com/apache/openjpa/commit/c043302e1e6c90d2859ae5833f455a53a3c62bd8"}]},{"sha":"4fb3371debaf3e20ebe4f63d1f4f89834d634681","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmYjMzNzFkZWJhZjNlMjBlYmU0ZjYzZDFmNGY4OTgzNGQ2MzQ2ODE=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-18T11:28:16Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-18T11:28:16Z"},"message":"OPENJPA-1510: Add missing documentation for supportsForeignKeysComposite, supportsSimpleCaseExpression and useWildCardForCount DBDictionary properties.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42e97f66c28febb8c5178e3cb0c131ea6bf3d4a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/42e97f66c28febb8c5178e3cb0c131ea6bf3d4a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4fb3371debaf3e20ebe4f63d1f4f89834d634681","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4fb3371debaf3e20ebe4f63d1f4f89834d634681","html_url":"https://github.com/apache/openjpa/commit/4fb3371debaf3e20ebe4f63d1f4f89834d634681","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4fb3371debaf3e20ebe4f63d1f4f89834d634681/comments","author":null,"committer":null,"parents":[{"sha":"8df8d0234e473bdc930be9570e8e27e837dcbaeb","url":"https://api.github.com/repos/apache/openjpa/commits/8df8d0234e473bdc930be9570e8e27e837dcbaeb","html_url":"https://github.com/apache/openjpa/commit/8df8d0234e473bdc930be9570e8e27e837dcbaeb"}]},{"sha":"1a4362eb7e01c5ed9c03b5d3125a62b680c4c004","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhNDM2MmViN2UwMWM1ZWQ5YzAzYjVkMzEyNWE2MmI2ODBjNGMwMDQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T15:31:29Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T15:31:29Z"},"message":"OPENJPA-1510.  Incorrect tag caused the whole paragraph to be \"red\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911440 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9548967db841f5ef26b02a9960ecfcd7fb83e5a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/9548967db841f5ef26b02a9960ecfcd7fb83e5a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a4362eb7e01c5ed9c03b5d3125a62b680c4c004","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a4362eb7e01c5ed9c03b5d3125a62b680c4c004","html_url":"https://github.com/apache/openjpa/commit/1a4362eb7e01c5ed9c03b5d3125a62b680c4c004","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a4362eb7e01c5ed9c03b5d3125a62b680c4c004/comments","author":null,"committer":null,"parents":[{"sha":"4fb3371debaf3e20ebe4f63d1f4f89834d634681","url":"https://api.github.com/repos/apache/openjpa/commits/4fb3371debaf3e20ebe4f63d1f4f89834d634681","html_url":"https://github.com/apache/openjpa/commit/4fb3371debaf3e20ebe4f63d1f4f89834d634681"}]},{"sha":"2c397e9306ee00217289167c0440da09aeac4ed4","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjMzk3ZTkzMDZlZTAwMjE3Mjg5MTY3YzA0NDBkYTA5YWVhYzRlZDQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T15:40:11Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T15:40:11Z"},"message":"OPENJPA-1510.  Incorrect tag caused the whole paragraph to be \"red\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911449 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dca67a08e9a9f59d106df2f006d480dce0778a0c","url":"https://api.github.com/repos/apache/openjpa/git/trees/dca67a08e9a9f59d106df2f006d480dce0778a0c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c397e9306ee00217289167c0440da09aeac4ed4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c397e9306ee00217289167c0440da09aeac4ed4","html_url":"https://github.com/apache/openjpa/commit/2c397e9306ee00217289167c0440da09aeac4ed4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c397e9306ee00217289167c0440da09aeac4ed4/comments","author":null,"committer":null,"parents":[{"sha":"1a4362eb7e01c5ed9c03b5d3125a62b680c4c004","url":"https://api.github.com/repos/apache/openjpa/commits/1a4362eb7e01c5ed9c03b5d3125a62b680c4c004","html_url":"https://github.com/apache/openjpa/commit/1a4362eb7e01c5ed9c03b5d3125a62b680c4c004"}]},{"sha":"fe2c9295f430082c84a541215cd8c14e1e1f6f14","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlMmM5Mjk1ZjQzMDA4MmM4NGE1NDEyMTVjZDhjMTRlMWUxZjZmMTQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T15:52:06Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T15:52:06Z"},"message":"OPENJPA-1510.  Oops, wrong xml file on the commit of svn revision 911440.  Backing out the debug change to the persistence.xml file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911454 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c9640f775ad2a4ecdb21ba4e0729a59b98651ef4","url":"https://api.github.com/repos/apache/openjpa/git/trees/c9640f775ad2a4ecdb21ba4e0729a59b98651ef4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe2c9295f430082c84a541215cd8c14e1e1f6f14","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe2c9295f430082c84a541215cd8c14e1e1f6f14","html_url":"https://github.com/apache/openjpa/commit/fe2c9295f430082c84a541215cd8c14e1e1f6f14","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe2c9295f430082c84a541215cd8c14e1e1f6f14/comments","author":null,"committer":null,"parents":[{"sha":"2c397e9306ee00217289167c0440da09aeac4ed4","url":"https://api.github.com/repos/apache/openjpa/commits/2c397e9306ee00217289167c0440da09aeac4ed4","html_url":"https://github.com/apache/openjpa/commit/2c397e9306ee00217289167c0440da09aeac4ed4"}]},{"sha":"7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiNmMxMWE2Y2Q4OTg3ZTMzYjNmMGNkNWM3N2ExNjc5ODQ3MWFjZjY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T17:23:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T17:23:06Z"},"message":"OPENJPA-924: Remove logging from FinderCache -- such low-level details seem to confuse rather to inform the user.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911496 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64d88571a1d913c64f45699cd6a6c9013db2d3cf","url":"https://api.github.com/repos/apache/openjpa/git/trees/64d88571a1d913c64f45699cd6a6c9013db2d3cf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","html_url":"https://github.com/apache/openjpa/commit/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6/comments","author":null,"committer":null,"parents":[{"sha":"fe2c9295f430082c84a541215cd8c14e1e1f6f14","url":"https://api.github.com/repos/apache/openjpa/commits/fe2c9295f430082c84a541215cd8c14e1e1f6f14","html_url":"https://github.com/apache/openjpa/commit/fe2c9295f430082c84a541215cd8c14e1e1f6f14"}]},{"sha":"f738b0ba626c3ab8d5a402f80fe4684e6874e8a8","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3MzhiMGJhNjI2YzNhYjhkNWE0MDJmODBmZTQ2ODRlNjg3NGU4YTg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T18:44:57Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T18:44:57Z"},"message":"OPENJPA-1520 remove jdk5 profile\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911520 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2a82b0073b60bcbb12d71918f6d1ffe1d009cc07","url":"https://api.github.com/repos/apache/openjpa/git/trees/2a82b0073b60bcbb12d71918f6d1ffe1d009cc07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f738b0ba626c3ab8d5a402f80fe4684e6874e8a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f738b0ba626c3ab8d5a402f80fe4684e6874e8a8","html_url":"https://github.com/apache/openjpa/commit/f738b0ba626c3ab8d5a402f80fe4684e6874e8a8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f738b0ba626c3ab8d5a402f80fe4684e6874e8a8/comments","author":null,"committer":null,"parents":[{"sha":"7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","url":"https://api.github.com/repos/apache/openjpa/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","html_url":"https://github.com/apache/openjpa/commit/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6"}]},{"sha":"87b284b52b3d33ca351910bdeca85f30b38181a9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3YjI4NGI1MmIzZDMzY2EzNTE5MTBiZGVjYTg1ZjMwYjM4MTgxYTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T18:46:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T18:46:11Z"},"message":"OPENJPA-1520 Require Java SE 6 or later to compile and require Maven 2.0.9 or later\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911522 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb6051ceda10bb02b6c045ac6ff3d2b76f8ba66a","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb6051ceda10bb02b6c045ac6ff3d2b76f8ba66a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/87b284b52b3d33ca351910bdeca85f30b38181a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/87b284b52b3d33ca351910bdeca85f30b38181a9","html_url":"https://github.com/apache/openjpa/commit/87b284b52b3d33ca351910bdeca85f30b38181a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/87b284b52b3d33ca351910bdeca85f30b38181a9/comments","author":null,"committer":null,"parents":[{"sha":"f738b0ba626c3ab8d5a402f80fe4684e6874e8a8","url":"https://api.github.com/repos/apache/openjpa/commits/f738b0ba626c3ab8d5a402f80fe4684e6874e8a8","html_url":"https://github.com/apache/openjpa/commit/f738b0ba626c3ab8d5a402f80fe4684e6874e8a8"}]},{"sha":"2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmM2RhMThiZTBmZDU2Y2IxY2JkMTBhNDZiYzk3YWYwYzhiOWJkM2Q=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T19:11:36Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T19:11:36Z"},"message":"Throw informative error messages on bad enum field\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb8cac86871f0a8ee7d1c39ea53cb9bff2083d38","url":"https://api.github.com/repos/apache/openjpa/git/trees/cb8cac86871f0a8ee7d1c39ea53cb9bff2083d38"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","html_url":"https://github.com/apache/openjpa/commit/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/comments","author":null,"committer":null,"parents":[{"sha":"87b284b52b3d33ca351910bdeca85f30b38181a9","url":"https://api.github.com/repos/apache/openjpa/commits/87b284b52b3d33ca351910bdeca85f30b38181a9","html_url":"https://github.com/apache/openjpa/commit/87b284b52b3d33ca351910bdeca85f30b38181a9"}]},{"sha":"a69c39c86976472e3d8e77a7ccb1c7ee607ceaac","node_id":"MDY6Q29tbWl0MjA2MzY0OmE2OWMzOWM4Njk3NjQ3MmUzZDhlNzdhN2NjYjFjN2VlNjA3Y2VhYWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T19:32:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T19:32:10Z"},"message":"some reorg and cleanup of pom. removed unused maven 2.0.4 requirement and pointer to staging repo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911537 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d38292d00fde7b37880db63f4cc54df709e29b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d38292d00fde7b37880db63f4cc54df709e29b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a69c39c86976472e3d8e77a7ccb1c7ee607ceaac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a69c39c86976472e3d8e77a7ccb1c7ee607ceaac","html_url":"https://github.com/apache/openjpa/commit/a69c39c86976472e3d8e77a7ccb1c7ee607ceaac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a69c39c86976472e3d8e77a7ccb1c7ee607ceaac/comments","author":null,"committer":null,"parents":[{"sha":"2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","url":"https://api.github.com/repos/apache/openjpa/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","html_url":"https://github.com/apache/openjpa/commit/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d"}]},{"sha":"88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4ZTMyZmIyZWUxZWFlYTZmYTRhNWEzYmNjYzUxZjQxZDEwZDNiMDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T19:34:36Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-18T19:34:36Z"},"message":"OPENJPA-1520 Upgrade to Derby 10.5.3 which has lots of JDBC4 fixes since 10.2.2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911538 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93d480fa906072e81725a0893439db3ba2f1b98b","url":"https://api.github.com/repos/apache/openjpa/git/trees/93d480fa906072e81725a0893439db3ba2f1b98b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06","html_url":"https://github.com/apache/openjpa/commit/88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06/comments","author":null,"committer":null,"parents":[{"sha":"a69c39c86976472e3d8e77a7ccb1c7ee607ceaac","url":"https://api.github.com/repos/apache/openjpa/commits/a69c39c86976472e3d8e77a7ccb1c7ee607ceaac","html_url":"https://github.com/apache/openjpa/commit/a69c39c86976472e3d8e77a7ccb1c7ee607ceaac"}]},{"sha":"babda8d2186d065f2c4d5dfb5f2ec627960fe04a","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhYmRhOGQyMTg2ZDA2NWYyYzRkNWRmYjVmMmVjNjI3OTYwZmUwNGE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T21:47:37Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-18T21:47:37Z"},"message":"OPENJPA-1520.  Doc updates to point at appropriate javase 6 and javaee 6 api urls (instead of javase/ee 5 urls).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911608 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e80e9478d780606b815c77f178d58d7d58951e11","url":"https://api.github.com/repos/apache/openjpa/git/trees/e80e9478d780606b815c77f178d58d7d58951e11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/babda8d2186d065f2c4d5dfb5f2ec627960fe04a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/babda8d2186d065f2c4d5dfb5f2ec627960fe04a","html_url":"https://github.com/apache/openjpa/commit/babda8d2186d065f2c4d5dfb5f2ec627960fe04a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/babda8d2186d065f2c4d5dfb5f2ec627960fe04a/comments","author":null,"committer":null,"parents":[{"sha":"88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06","url":"https://api.github.com/repos/apache/openjpa/commits/88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06","html_url":"https://github.com/apache/openjpa/commit/88e32fb2ee1eaea6fa4a5a3bccc51f41d10d3b06"}]},{"sha":"e512e15ba03eb735f8ddc374969cafe4555c7143","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1MTJlMTViYTAzZWI3MzVmOGRkYzM3NDk2OWNhZmU0NTU1YzcxNDM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-19T02:52:51Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-19T02:52:51Z"},"message":"OPENJPA-1520 Compile for 1.6 and update javadoc links to use 1.6\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911682 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09bd2fe6c18fcc4baf46beb5ffdcdfad6b62c64e","url":"https://api.github.com/repos/apache/openjpa/git/trees/09bd2fe6c18fcc4baf46beb5ffdcdfad6b62c64e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e512e15ba03eb735f8ddc374969cafe4555c7143","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e512e15ba03eb735f8ddc374969cafe4555c7143","html_url":"https://github.com/apache/openjpa/commit/e512e15ba03eb735f8ddc374969cafe4555c7143","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e512e15ba03eb735f8ddc374969cafe4555c7143/comments","author":null,"committer":null,"parents":[{"sha":"babda8d2186d065f2c4d5dfb5f2ec627960fe04a","url":"https://api.github.com/repos/apache/openjpa/commits/babda8d2186d065f2c4d5dfb5f2ec627960fe04a","html_url":"https://github.com/apache/openjpa/commit/babda8d2186d065f2c4d5dfb5f2ec627960fe04a"}]},{"sha":"9ec42334e97fc6e10c766b55dd9a74de192f9b46","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYzQyMzM0ZTk3ZmM2ZTEwYzc2NmI1NWRkOWE3NGRlMTkyZjliNDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-19T03:10:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-19T03:10:33Z"},"message":"OPENJPA-1512 minor updates to BundleActivator support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911684 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a2bf665be0883e92bc6a35dca3467c0a6845a4a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/a2bf665be0883e92bc6a35dca3467c0a6845a4a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ec42334e97fc6e10c766b55dd9a74de192f9b46","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ec42334e97fc6e10c766b55dd9a74de192f9b46","html_url":"https://github.com/apache/openjpa/commit/9ec42334e97fc6e10c766b55dd9a74de192f9b46","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ec42334e97fc6e10c766b55dd9a74de192f9b46/comments","author":null,"committer":null,"parents":[{"sha":"e512e15ba03eb735f8ddc374969cafe4555c7143","url":"https://api.github.com/repos/apache/openjpa/commits/e512e15ba03eb735f8ddc374969cafe4555c7143","html_url":"https://github.com/apache/openjpa/commit/e512e15ba03eb735f8ddc374969cafe4555c7143"}]},{"sha":"a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0YzhmMjhlMmNkZGRhNmQ4MGEzZTE1ZDNlMWJlNTRjYzI4MTJiYmE=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-19T10:48:34Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-02-19T10:48:34Z"},"message":"OPENJPA-1510: Correct confusing sentences in Query Hints section; correct the Oracle known issue with empty strings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911780 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db3cf219b5b08ae8f0b956119906ca79d41b6cd5","url":"https://api.github.com/repos/apache/openjpa/git/trees/db3cf219b5b08ae8f0b956119906ca79d41b6cd5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba","html_url":"https://github.com/apache/openjpa/commit/a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba/comments","author":null,"committer":null,"parents":[{"sha":"9ec42334e97fc6e10c766b55dd9a74de192f9b46","url":"https://api.github.com/repos/apache/openjpa/commits/9ec42334e97fc6e10c766b55dd9a74de192f9b46","html_url":"https://github.com/apache/openjpa/commit/9ec42334e97fc6e10c766b55dd9a74de192f9b46"}]},{"sha":"8fcc5e7896f147273a537132d18af2a45bde5b92","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmY2M1ZTc4OTZmMTQ3MjczYTUzNzEzMmQxOGFmMmE0NWJkZTViOTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-19T18:37:45Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-19T18:37:45Z"},"message":"OPENJPA-1525 - Implements warn() method in TestCacheMarshallerEndToEnd$LogImpl class.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dccd210ef4e6806be0ab9e428c6ec0527d7e2037","url":"https://api.github.com/repos/apache/openjpa/git/trees/dccd210ef4e6806be0ab9e428c6ec0527d7e2037"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8fcc5e7896f147273a537132d18af2a45bde5b92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8fcc5e7896f147273a537132d18af2a45bde5b92","html_url":"https://github.com/apache/openjpa/commit/8fcc5e7896f147273a537132d18af2a45bde5b92","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8fcc5e7896f147273a537132d18af2a45bde5b92/comments","author":null,"committer":null,"parents":[{"sha":"a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba","url":"https://api.github.com/repos/apache/openjpa/commits/a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba","html_url":"https://github.com/apache/openjpa/commit/a4c8f28e2cddda6d80a3e15d3e1be54cc2812bba"}]},{"sha":"0086e25b8cf904a599529f8475c1cd1bf973e96e","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwODZlMjViOGNmOTA0YTU5OTUyOWY4NDc1YzFjZDFiZjk3M2U5NmU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-19T22:17:57Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-19T22:17:57Z"},"message":"OPENJPA-1526.  AllowFailure for one testcase until DERBY-4558 is resolved.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@912012 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9970e22bfe1932246edf1b78c78c6a7717cd6f35","url":"https://api.github.com/repos/apache/openjpa/git/trees/9970e22bfe1932246edf1b78c78c6a7717cd6f35"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0086e25b8cf904a599529f8475c1cd1bf973e96e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0086e25b8cf904a599529f8475c1cd1bf973e96e","html_url":"https://github.com/apache/openjpa/commit/0086e25b8cf904a599529f8475c1cd1bf973e96e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0086e25b8cf904a599529f8475c1cd1bf973e96e/comments","author":null,"committer":null,"parents":[{"sha":"8fcc5e7896f147273a537132d18af2a45bde5b92","url":"https://api.github.com/repos/apache/openjpa/commits/8fcc5e7896f147273a537132d18af2a45bde5b92","html_url":"https://github.com/apache/openjpa/commit/8fcc5e7896f147273a537132d18af2a45bde5b92"}]},{"sha":"52e2d925446c06995ebd0979eb1cf93160a8cc31","node_id":"MDY6Q29tbWl0MjA2MzY0OjUyZTJkOTI1NDQ2YzA2OTk1ZWJkMDk3OWViMWNmOTMxNjBhOGNjMzE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-22T04:29:45Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-22T04:29:45Z"},"message":"Re-factor imports and use of generic in BrokerImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@912477 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"504da8c2dd66f8066edca10f1c7af56173e1199c","url":"https://api.github.com/repos/apache/openjpa/git/trees/504da8c2dd66f8066edca10f1c7af56173e1199c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/52e2d925446c06995ebd0979eb1cf93160a8cc31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/52e2d925446c06995ebd0979eb1cf93160a8cc31","html_url":"https://github.com/apache/openjpa/commit/52e2d925446c06995ebd0979eb1cf93160a8cc31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/52e2d925446c06995ebd0979eb1cf93160a8cc31/comments","author":null,"committer":null,"parents":[{"sha":"0086e25b8cf904a599529f8475c1cd1bf973e96e","url":"https://api.github.com/repos/apache/openjpa/commits/0086e25b8cf904a599529f8475c1cd1bf973e96e","html_url":"https://github.com/apache/openjpa/commit/0086e25b8cf904a599529f8475c1cd1bf973e96e"}]},{"sha":"b44715211e61211da14969d1dbdc73bae737bd08","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0NDcxNTIxMWU2MTIxMWRhMTQ5NjlkMWRiZGM3M2JhZTczN2JkMDg=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-22T18:53:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-22T18:53:45Z"},"message":"OPENJPA-1516.  Introduce prepareForPooling method on EntityManagerImpl to allow for more efficient EntityManager \"clear\" operations.  This also allows to go outside of the spec just a bit and clean up resources before pooling as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915015 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19c0e6f9462a75123023b5cbd03be5da541b5fb0","url":"https://api.github.com/repos/apache/openjpa/git/trees/19c0e6f9462a75123023b5cbd03be5da541b5fb0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b44715211e61211da14969d1dbdc73bae737bd08","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b44715211e61211da14969d1dbdc73bae737bd08","html_url":"https://github.com/apache/openjpa/commit/b44715211e61211da14969d1dbdc73bae737bd08","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b44715211e61211da14969d1dbdc73bae737bd08/comments","author":null,"committer":null,"parents":[{"sha":"52e2d925446c06995ebd0979eb1cf93160a8cc31","url":"https://api.github.com/repos/apache/openjpa/commits/52e2d925446c06995ebd0979eb1cf93160a8cc31","html_url":"https://github.com/apache/openjpa/commit/52e2d925446c06995ebd0979eb1cf93160a8cc31"}]},{"sha":"eb81fddc950687f413fa988b1a92f807fea9db59","node_id":"MDY6Q29tbWl0MjA2MzY0OmViODFmZGRjOTUwNjg3ZjQxM2ZhOTg4YjFhOTJmODA3ZmVhOWRiNTk=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-22T19:03:05Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-22T19:03:05Z"},"message":"Added some comments to indicate the special options required for creating a DB2 database that supports the XML column types...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915020 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a20cca04b7572465b326086a1838f01f0dcad2b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a20cca04b7572465b326086a1838f01f0dcad2b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb81fddc950687f413fa988b1a92f807fea9db59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb81fddc950687f413fa988b1a92f807fea9db59","html_url":"https://github.com/apache/openjpa/commit/eb81fddc950687f413fa988b1a92f807fea9db59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb81fddc950687f413fa988b1a92f807fea9db59/comments","author":null,"committer":null,"parents":[{"sha":"b44715211e61211da14969d1dbdc73bae737bd08","url":"https://api.github.com/repos/apache/openjpa/commits/b44715211e61211da14969d1dbdc73bae737bd08","html_url":"https://github.com/apache/openjpa/commit/b44715211e61211da14969d1dbdc73bae737bd08"}]},{"sha":"127b7bec630ba2e6afa25aed7f56934ea52c186f","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyN2I3YmVjNjMwYmEyZTZhZmEyNWFlZDdmNTY5MzRlYTUyYzE4NmY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-23T14:15:11Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-23T14:15:11Z"},"message":"OPENJPA-1510. Corrected placement of the Distributed Cache description, along with a few incorrect spellings and punctuation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915353 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4534cc7941403eea821c28bfeef7f5833c6333cd","url":"https://api.github.com/repos/apache/openjpa/git/trees/4534cc7941403eea821c28bfeef7f5833c6333cd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/127b7bec630ba2e6afa25aed7f56934ea52c186f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/127b7bec630ba2e6afa25aed7f56934ea52c186f","html_url":"https://github.com/apache/openjpa/commit/127b7bec630ba2e6afa25aed7f56934ea52c186f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/127b7bec630ba2e6afa25aed7f56934ea52c186f/comments","author":null,"committer":null,"parents":[{"sha":"eb81fddc950687f413fa988b1a92f807fea9db59","url":"https://api.github.com/repos/apache/openjpa/commits/eb81fddc950687f413fa988b1a92f807fea9db59","html_url":"https://github.com/apache/openjpa/commit/eb81fddc950687f413fa988b1a92f807fea9db59"}]},{"sha":"55509846c11d27067dd03232701e9c185b9edcba","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1NTA5ODQ2YzExZDI3MDY3ZGQwMzIzMjcwMWU5YzE4NWI5ZWRjYmE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-23T16:25:19Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-23T16:25:19Z"},"message":"OPENJPA-1520 Require Java SE 6 to compile but target Java SE 5 so users can still run trunk on 1.5 and 1.6 JVMs for now, given the lack of performance improvements found with the patch to drop JDBC3 support...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915410 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"121d0b4244a9e5e2920a8991e1fa6e318f802b8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/121d0b4244a9e5e2920a8991e1fa6e318f802b8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55509846c11d27067dd03232701e9c185b9edcba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55509846c11d27067dd03232701e9c185b9edcba","html_url":"https://github.com/apache/openjpa/commit/55509846c11d27067dd03232701e9c185b9edcba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55509846c11d27067dd03232701e9c185b9edcba/comments","author":null,"committer":null,"parents":[{"sha":"127b7bec630ba2e6afa25aed7f56934ea52c186f","url":"https://api.github.com/repos/apache/openjpa/commits/127b7bec630ba2e6afa25aed7f56934ea52c186f","html_url":"https://github.com/apache/openjpa/commit/127b7bec630ba2e6afa25aed7f56934ea52c186f"}]},{"sha":"fa4b72d7f50174238a6d97ead9a736b161271609","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhNGI3MmQ3ZjUwMTc0MjM4YTZkOTdlYWQ5YTczNmIxNjEyNzE2MDk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-23T17:10:18Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-02-23T17:10:18Z"},"message":"OPENJPA-1498 - Commit contribution by Cathy Nordstrom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915439 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b4fcfb555a1e97ed3271a74598ac2d48b545a0f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b4fcfb555a1e97ed3271a74598ac2d48b545a0f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fa4b72d7f50174238a6d97ead9a736b161271609","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fa4b72d7f50174238a6d97ead9a736b161271609","html_url":"https://github.com/apache/openjpa/commit/fa4b72d7f50174238a6d97ead9a736b161271609","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fa4b72d7f50174238a6d97ead9a736b161271609/comments","author":null,"committer":null,"parents":[{"sha":"55509846c11d27067dd03232701e9c185b9edcba","url":"https://api.github.com/repos/apache/openjpa/commits/55509846c11d27067dd03232701e9c185b9edcba","html_url":"https://github.com/apache/openjpa/commit/55509846c11d27067dd03232701e9c185b9edcba"}]},{"sha":"cda835d50bd2236de5c17551bcdadc77a7d37b4b","node_id":"MDY6Q29tbWl0MjA2MzY0OmNkYTgzNWQ1MGJkMjIzNmRlNWMxNzU1MWJjZGFkYzc3YTdkMzdiNGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-23T17:27:27Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-23T17:27:27Z"},"message":"OPENJPA-1528 Upgrade to MySQL 5.1.12 driver.  Include dbcp overrides needed for MySQL.  Moved common dbcp and junit properties to parent pom to simplify maintenance.  Add some blank lines in a couple poms to improve readability.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915448 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"29d28d7d03c8edd0e56d52b55aa84e41774450eb","url":"https://api.github.com/repos/apache/openjpa/git/trees/29d28d7d03c8edd0e56d52b55aa84e41774450eb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cda835d50bd2236de5c17551bcdadc77a7d37b4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cda835d50bd2236de5c17551bcdadc77a7d37b4b","html_url":"https://github.com/apache/openjpa/commit/cda835d50bd2236de5c17551bcdadc77a7d37b4b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cda835d50bd2236de5c17551bcdadc77a7d37b4b/comments","author":null,"committer":null,"parents":[{"sha":"fa4b72d7f50174238a6d97ead9a736b161271609","url":"https://api.github.com/repos/apache/openjpa/commits/fa4b72d7f50174238a6d97ead9a736b161271609","html_url":"https://github.com/apache/openjpa/commit/fa4b72d7f50174238a6d97ead9a736b161271609"}]},{"sha":"baa37056999ccc33666e36109cc1d9ed634c4c92","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhYTM3MDU2OTk5Y2NjMzM2NjZlMzYxMDljYzFkOWVkNjM0YzRjOTI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-23T18:35:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-02-23T18:35:44Z"},"message":"OPENJPA-1516.  Additional comments on the free() method to indicate that callers need to ensure thread-safety.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ccf4f50f9e7d4b7ca72241959ade2a076594bb7","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ccf4f50f9e7d4b7ca72241959ade2a076594bb7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/baa37056999ccc33666e36109cc1d9ed634c4c92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/baa37056999ccc33666e36109cc1d9ed634c4c92","html_url":"https://github.com/apache/openjpa/commit/baa37056999ccc33666e36109cc1d9ed634c4c92","comments_url":"https://api.github.com/repos/apache/openjpa/commits/baa37056999ccc33666e36109cc1d9ed634c4c92/comments","author":null,"committer":null,"parents":[{"sha":"cda835d50bd2236de5c17551bcdadc77a7d37b4b","url":"https://api.github.com/repos/apache/openjpa/commits/cda835d50bd2236de5c17551bcdadc77a7d37b4b","html_url":"https://github.com/apache/openjpa/commit/cda835d50bd2236de5c17551bcdadc77a7d37b4b"}]},{"sha":"11c299d895387ddeb9a89d22f50fed7ced69f2c1","node_id":"MDY6Q29tbWl0MjA2MzY0OjExYzI5OWQ4OTUzODdkZGViOWE4OWQyMmY1MGZlZDdjZWQ2OWYyYzE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-23T21:55:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-23T21:55:49Z"},"message":"OPENJPA-1520 Allow using JDK 1.5 to compile/run the junits by using -Ptest-java5,test-derby -Djava5.home=<1.5 JDK home>, so we can verify that the 1.6 built artifacts will still work for 1.5 users.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915539 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df161af1e97014ac07d9437c7a14579481e56c36","url":"https://api.github.com/repos/apache/openjpa/git/trees/df161af1e97014ac07d9437c7a14579481e56c36"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11c299d895387ddeb9a89d22f50fed7ced69f2c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11c299d895387ddeb9a89d22f50fed7ced69f2c1","html_url":"https://github.com/apache/openjpa/commit/11c299d895387ddeb9a89d22f50fed7ced69f2c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11c299d895387ddeb9a89d22f50fed7ced69f2c1/comments","author":null,"committer":null,"parents":[{"sha":"baa37056999ccc33666e36109cc1d9ed634c4c92","url":"https://api.github.com/repos/apache/openjpa/commits/baa37056999ccc33666e36109cc1d9ed634c4c92","html_url":"https://github.com/apache/openjpa/commit/baa37056999ccc33666e36109cc1d9ed634c4c92"}]},{"sha":"7f319c44739aa96d4c54262c3c87d03ab857f3ec","node_id":"MDY6Q29tbWl0MjA2MzY0OjdmMzE5YzQ0NzM5YWE5NmQ0YzU0MjYyYzNjODdkMDNhYjg1N2YzZWM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-23T23:46:26Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-23T23:46:26Z"},"message":"OPENJPA-1527: fix AssociationOverride on the key of map where the key is an embeddable via orm.xml. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915593 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ad40430da85dda6f4717a4b46da797428daac92","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ad40430da85dda6f4717a4b46da797428daac92"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7f319c44739aa96d4c54262c3c87d03ab857f3ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7f319c44739aa96d4c54262c3c87d03ab857f3ec","html_url":"https://github.com/apache/openjpa/commit/7f319c44739aa96d4c54262c3c87d03ab857f3ec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7f319c44739aa96d4c54262c3c87d03ab857f3ec/comments","author":null,"committer":null,"parents":[{"sha":"11c299d895387ddeb9a89d22f50fed7ced69f2c1","url":"https://api.github.com/repos/apache/openjpa/commits/11c299d895387ddeb9a89d22f50fed7ced69f2c1","html_url":"https://github.com/apache/openjpa/commit/11c299d895387ddeb9a89d22f50fed7ced69f2c1"}]},{"sha":"ff71a1c093fde27bd395854c42afb59cd1a56e9a","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmNzFhMWMwOTNmZGUyN2JkMzk1ODU0YzQyYWZiNTljZDFhNTZlOWE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-24T03:49:18Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-24T03:49:18Z"},"message":"OPENJPA-1527: fix test case error\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915654 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42c87551143fec7a890d5d875a13a8c7b3642e84","url":"https://api.github.com/repos/apache/openjpa/git/trees/42c87551143fec7a890d5d875a13a8c7b3642e84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff71a1c093fde27bd395854c42afb59cd1a56e9a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff71a1c093fde27bd395854c42afb59cd1a56e9a","html_url":"https://github.com/apache/openjpa/commit/ff71a1c093fde27bd395854c42afb59cd1a56e9a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff71a1c093fde27bd395854c42afb59cd1a56e9a/comments","author":null,"committer":null,"parents":[{"sha":"7f319c44739aa96d4c54262c3c87d03ab857f3ec","url":"https://api.github.com/repos/apache/openjpa/commits/7f319c44739aa96d4c54262c3c87d03ab857f3ec","html_url":"https://github.com/apache/openjpa/commit/7f319c44739aa96d4c54262c3c87d03ab857f3ec"}]},{"sha":"05e0669c0725cb01d125af9cc04032e2bc834990","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1ZTA2NjljMDcyNWNiMDFkMTI1YWY5Y2MwNDAzMmUyYmM4MzQ5OTA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-02-24T08:55:07Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-02-24T08:55:07Z"},"message":"OPENJPA-1533: JPA2 select math mix with aggregate reports syntax error\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915725 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65283a9ecd724a334e62434cc937eece602e16bc","url":"https://api.github.com/repos/apache/openjpa/git/trees/65283a9ecd724a334e62434cc937eece602e16bc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/05e0669c0725cb01d125af9cc04032e2bc834990","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/05e0669c0725cb01d125af9cc04032e2bc834990","html_url":"https://github.com/apache/openjpa/commit/05e0669c0725cb01d125af9cc04032e2bc834990","comments_url":"https://api.github.com/repos/apache/openjpa/commits/05e0669c0725cb01d125af9cc04032e2bc834990/comments","author":null,"committer":null,"parents":[{"sha":"ff71a1c093fde27bd395854c42afb59cd1a56e9a","url":"https://api.github.com/repos/apache/openjpa/commits/ff71a1c093fde27bd395854c42afb59cd1a56e9a","html_url":"https://github.com/apache/openjpa/commit/ff71a1c093fde27bd395854c42afb59cd1a56e9a"}]},{"sha":"0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjNzZiMjVlZjU3YjEwNzliY2NjYmM1ZjdhZTNkY2UxN2EyMWM1ZTc=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-02-24T16:01:26Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-02-24T16:01:26Z"},"message":"OPENJPA-1529 Committing L2 shared cache mode test cases contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fbdc53a28f936f78a6faeaad27d033f712d788c","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fbdc53a28f936f78a6faeaad27d033f712d788c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","html_url":"https://github.com/apache/openjpa/commit/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/comments","author":null,"committer":null,"parents":[{"sha":"05e0669c0725cb01d125af9cc04032e2bc834990","url":"https://api.github.com/repos/apache/openjpa/commits/05e0669c0725cb01d125af9cc04032e2bc834990","html_url":"https://github.com/apache/openjpa/commit/05e0669c0725cb01d125af9cc04032e2bc834990"}]},{"sha":"2d7d5599f33d77b856235bce1ea6363a9259bdc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkN2Q1NTk5ZjMzZDc3Yjg1NjIzNWJjZTFlYTYzNjNhOTI1OWJkYzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T16:15:48Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T16:15:48Z"},"message":"update release notes and changes for beta 2 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"244070d2a7dcc5f2a673390973b58365552372ce","url":"https://api.github.com/repos/apache/openjpa/git/trees/244070d2a7dcc5f2a673390973b58365552372ce"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d7d5599f33d77b856235bce1ea6363a9259bdc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d7d5599f33d77b856235bce1ea6363a9259bdc2","html_url":"https://github.com/apache/openjpa/commit/2d7d5599f33d77b856235bce1ea6363a9259bdc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d7d5599f33d77b856235bce1ea6363a9259bdc2/comments","author":null,"committer":null,"parents":[{"sha":"0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","url":"https://api.github.com/repos/apache/openjpa/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","html_url":"https://github.com/apache/openjpa/commit/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7"}]},{"sha":"fb57d61322d65e42a65cb2661d69fe63eaaa2171","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiNTdkNjEzMjJkNjVlNDJhNjVjYjI2NjFkNjlmZTYzZWFhYTIxNzE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T17:59:43Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T17:59:43Z"},"message":"OPENJPA-1490 Add new message for pending Aries changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915900 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f500911e33f480d71a3e4183e91f02729a3cd6d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/f500911e33f480d71a3e4183e91f02729a3cd6d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb57d61322d65e42a65cb2661d69fe63eaaa2171","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb57d61322d65e42a65cb2661d69fe63eaaa2171","html_url":"https://github.com/apache/openjpa/commit/fb57d61322d65e42a65cb2661d69fe63eaaa2171","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb57d61322d65e42a65cb2661d69fe63eaaa2171/comments","author":null,"committer":null,"parents":[{"sha":"2d7d5599f33d77b856235bce1ea6363a9259bdc2","url":"https://api.github.com/repos/apache/openjpa/commits/2d7d5599f33d77b856235bce1ea6363a9259bdc2","html_url":"https://github.com/apache/openjpa/commit/2d7d5599f33d77b856235bce1ea6363a9259bdc2"}]},{"sha":"8ef5a5dda19ed0330b128a2022104e80325f4a21","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlZjVhNWRkYTE5ZWQwMzMwYjEyOGEyMDIyMTA0ZTgwMzI1ZjRhMjE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-02-24T18:09:01Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-02-24T18:09:01Z"},"message":"OPENJPA-1529 Committing test case updates contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915904 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"547037ce449539552f3776dd3cf28bec24297b96","url":"https://api.github.com/repos/apache/openjpa/git/trees/547037ce449539552f3776dd3cf28bec24297b96"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8ef5a5dda19ed0330b128a2022104e80325f4a21","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8ef5a5dda19ed0330b128a2022104e80325f4a21","html_url":"https://github.com/apache/openjpa/commit/8ef5a5dda19ed0330b128a2022104e80325f4a21","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8ef5a5dda19ed0330b128a2022104e80325f4a21/comments","author":null,"committer":null,"parents":[{"sha":"fb57d61322d65e42a65cb2661d69fe63eaaa2171","url":"https://api.github.com/repos/apache/openjpa/commits/fb57d61322d65e42a65cb2661d69fe63eaaa2171","html_url":"https://github.com/apache/openjpa/commit/fb57d61322d65e42a65cb2661d69fe63eaaa2171"}]},{"sha":"428cbc0cae31b1546cd4228930bf4d81b42f1e06","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyOGNiYzBjYWUzMWIxNTQ2Y2Q0MjI4OTMwYmY0ZDgxYjQyZjFlMDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T18:33:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T18:33:29Z"},"message":"add OPENJPA-1529 to beta2 release notes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915913 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70d5db767d0fb624511b1795836a0275735b3841","url":"https://api.github.com/repos/apache/openjpa/git/trees/70d5db767d0fb624511b1795836a0275735b3841"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/428cbc0cae31b1546cd4228930bf4d81b42f1e06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/428cbc0cae31b1546cd4228930bf4d81b42f1e06","html_url":"https://github.com/apache/openjpa/commit/428cbc0cae31b1546cd4228930bf4d81b42f1e06","comments_url":"https://api.github.com/repos/apache/openjpa/commits/428cbc0cae31b1546cd4228930bf4d81b42f1e06/comments","author":null,"committer":null,"parents":[{"sha":"8ef5a5dda19ed0330b128a2022104e80325f4a21","url":"https://api.github.com/repos/apache/openjpa/commits/8ef5a5dda19ed0330b128a2022104e80325f4a21","html_url":"https://github.com/apache/openjpa/commit/8ef5a5dda19ed0330b128a2022104e80325f4a21"}]},{"sha":"1462290177b8a53919b6718a7fbf62c8c0371dbd","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0NjIyOTAxNzdiOGE1MzkxOWI2NzE4YTdmYmY2MmM4YzAzNzFkYmQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T20:15:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T20:15:20Z"},"message":"hack for maven-release-plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915958 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eba2f74c9ab89d0528be2e74720df389b9a4538c","url":"https://api.github.com/repos/apache/openjpa/git/trees/eba2f74c9ab89d0528be2e74720df389b9a4538c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1462290177b8a53919b6718a7fbf62c8c0371dbd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1462290177b8a53919b6718a7fbf62c8c0371dbd","html_url":"https://github.com/apache/openjpa/commit/1462290177b8a53919b6718a7fbf62c8c0371dbd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1462290177b8a53919b6718a7fbf62c8c0371dbd/comments","author":null,"committer":null,"parents":[{"sha":"428cbc0cae31b1546cd4228930bf4d81b42f1e06","url":"https://api.github.com/repos/apache/openjpa/commits/428cbc0cae31b1546cd4228930bf4d81b42f1e06","html_url":"https://github.com/apache/openjpa/commit/428cbc0cae31b1546cd4228930bf4d81b42f1e06"}]},{"sha":"c28ffa7be15b25b914eefb897ec1d197ae028c01","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyOGZmYTdiZTE1YjI1YjkxNGVlZmI4OTdlYzFkMTk3YWUwMjhjMDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T20:24:17Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T20:24:17Z"},"message":"more attempts to fix release plugin issue with test jars\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915964 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3cfaef892e45ddcb9fffc56af561e64ed72de329","url":"https://api.github.com/repos/apache/openjpa/git/trees/3cfaef892e45ddcb9fffc56af561e64ed72de329"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c28ffa7be15b25b914eefb897ec1d197ae028c01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c28ffa7be15b25b914eefb897ec1d197ae028c01","html_url":"https://github.com/apache/openjpa/commit/c28ffa7be15b25b914eefb897ec1d197ae028c01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c28ffa7be15b25b914eefb897ec1d197ae028c01/comments","author":null,"committer":null,"parents":[{"sha":"1462290177b8a53919b6718a7fbf62c8c0371dbd","url":"https://api.github.com/repos/apache/openjpa/commits/1462290177b8a53919b6718a7fbf62c8c0371dbd","html_url":"https://github.com/apache/openjpa/commit/1462290177b8a53919b6718a7fbf62c8c0371dbd"}]},{"sha":"6d53d755f78770a2d801ca1d4cc7de849be6238f","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkNTNkNzU1Zjc4NzcwYTJkODAxY2ExZDRjYzdkZTg0OWJlNjIzOGY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T20:51:59Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T20:51:59Z"},"message":"OPENJPA-1520 revert some refs back to Java SE 5 docs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915975 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43a10e620a963ddb73a22acd4a83135853249e06","url":"https://api.github.com/repos/apache/openjpa/git/trees/43a10e620a963ddb73a22acd4a83135853249e06"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d53d755f78770a2d801ca1d4cc7de849be6238f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d53d755f78770a2d801ca1d4cc7de849be6238f","html_url":"https://github.com/apache/openjpa/commit/6d53d755f78770a2d801ca1d4cc7de849be6238f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d53d755f78770a2d801ca1d4cc7de849be6238f/comments","author":null,"committer":null,"parents":[{"sha":"c28ffa7be15b25b914eefb897ec1d197ae028c01","url":"https://api.github.com/repos/apache/openjpa/commits/c28ffa7be15b25b914eefb897ec1d197ae028c01","html_url":"https://github.com/apache/openjpa/commit/c28ffa7be15b25b914eefb897ec1d197ae028c01"}]},{"sha":"099d18901e5dd164c189f8b9538c9e80d3923569","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5OWQxODkwMWU1ZGQxNjRjMTg5ZjhiOTUzOGM5ZTgwZDM5MjM1Njk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:42Z"},"message":"[maven-release-plugin] prepare release 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"940d40b9afe52947f3a16c39ea89411c8602ba3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/940d40b9afe52947f3a16c39ea89411c8602ba3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/099d18901e5dd164c189f8b9538c9e80d3923569","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569","html_url":"https://github.com/apache/openjpa/commit/099d18901e5dd164c189f8b9538c9e80d3923569","comments_url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569/comments","author":null,"committer":null,"parents":[{"sha":"6d53d755f78770a2d801ca1d4cc7de849be6238f","url":"https://api.github.com/repos/apache/openjpa/commits/6d53d755f78770a2d801ca1d4cc7de849be6238f","html_url":"https://github.com/apache/openjpa/commit/6d53d755f78770a2d801ca1d4cc7de849be6238f"}]},{"sha":"99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5ZWMxODNlZTZjZDA1NGEyOWQ3ZGJmNWYyYjUzZDYzNTE5N2M3Zjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:46Z"},"message":"[maven-scm] copy for tag 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta2@915978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"940d40b9afe52947f3a16c39ea89411c8602ba3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/940d40b9afe52947f3a16c39ea89411c8602ba3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","html_url":"https://github.com/apache/openjpa/commit/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/comments","author":null,"committer":null,"parents":[{"sha":"099d18901e5dd164c189f8b9538c9e80d3923569","url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569","html_url":"https://github.com/apache/openjpa/commit/099d18901e5dd164c189f8b9538c9e80d3923569"}]}],"files":[{"sha":"e1f50bc47f55c8143d3ddfc10f88e69337a8cc98","filename":"NOTICE.txt","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/NOTICE.txt?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,14 +1,16 @@\n-================================================================================\r\n-==  NOTICE file corresponding to the section 4 d of                           ==\r\n-==  the Apache License, Version 2.0,                                          ==\r\n-==  in this case for the Apache OpenJPA distribution.                         ==\r\n-================================================================================\r\n+\r\n+Apache OpenJPA\r\n+Copyright 2006-2010 The Apache Software Foundation\r\n \r\n This product includes software developed by\r\n The Apache Software Foundation (http://www.apache.org/).\r\n \r\n+Apache, the Apache feather logo and OpenJPA are trademarks of The Apache Software Foundation.\r\n+\r\n+\r\n+The following copyright notice(s) were affixed to portions of this code\r\n+with which this file is now or was at one time distributed.\r\n \r\n-COPYRIGHT NOTICES\r\n \r\n OpenJPA includes software developed by the SERP project\r\n Copyright (c) 2002-2006, A. Abram White. All rights reserved.\r"},{"sha":"ad9b7d71173d1b7c0f73d4ec6770e603b33e59dc","filename":"openjpa-all/pom.xml","status":"modified","additions":2,"deletions":36,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <build>\n@@ -73,7 +73,7 @@\n                                  javax.persistence.spi.PersistenceProvider\n                                  org.apache.openjpa.kernel.exps.ExpressionParser\n                                 -->\n-                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n                                 <!-- Need to add some MANIFEST.MF metadata -->\n                                 <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                     <manifestEntries>\n@@ -106,39 +106,5 @@\n             <artifactId>openjpa</artifactId>\n             <version>${pom.version}</version>\n         </dependency>\n-        <!-- Need to manually add back optional openjpa-jdbc depends -->\n-        <dependency>\n-            <groupId>javax.xml.bind</groupId>\n-            <artifactId>jaxb-api</artifactId>\n-            <scope>compile</scope>\n-            <optional>true</optional>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>javax.xml.bind</groupId>\n-                    <artifactId>jsr173_api</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>javax.activation</groupId>\n-                    <artifactId>activation</artifactId>\n-                </exclusion>\n-            </exclusions>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.sun.xml.bind</groupId>\n-            <artifactId>jaxb-impl</artifactId>\n-            <scope>compile</scope>\n-            <optional>true</optional>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>javax.xml.bind</groupId>\n-                    <artifactId>jsr173_api</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>javax.activation</groupId>\n-                    <artifactId>activation</artifactId>\n-                </exclusion>\n-            </exclusions>\n-        </dependency>\n-        <!-- end optional openjpa-jdbc depends -->\n     </dependencies>\n </project>"},{"sha":"c14f34815c87f8a76748bb84328dfc55b19794e0","filename":"openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/src/main/appended-resources/META-INF/NOTICE.vm?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,4 +1,6 @@\n \n+Apache, the Apache feather logo and OpenJPA are trademarks of The Apache Software Foundation.\n+\n openjpa-all includes software developed by the:\n     Apache Commons Collections project\n     Apache Commons Lang project"},{"sha":"4f601f481db17a87d72f77b46a216e948a5ad756","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -32,7 +32,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -62,8 +62,6 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n                     <!--\n                         need to skip reversemapping since it depends on\n                         classes that are generated by the build.xml file"},{"sha":"2802e00511c97676373ada7b3b0a33f4c540644d","filename":"openjpa-examples/src/main/java/README.txt","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-examples/src/main/java/README.txt","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-examples/src/main/java/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/README.txt?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,5 +1,5 @@\n Apache OpenJPA Examples\n-Copyright © 2005-2009, The Apache Software Foundation.\n+Copyright © 2006,2010 The Apache Software Foundation.\n Licensed under ASL 2.0 - http://www.apache.org/licenses/LICENSE-2.0\n --------------------------------------------------------------------------------\n "},{"sha":"637a3ae2b7377d124feb5c509eb7ab6565744faf","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -39,7 +39,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <profiles>\n@@ -59,7 +59,7 @@\n                         <echo>Running OpenJPA Examples</echo>\n \n                         <property name=\"examples.base\" value=\"${basedir}/target/examples\" />\n-                        <delete dir=\"${examples.base}\" quiet=\"true\"/>\n+                        <delete dir=\"${examples.base}\" quiet=\"true\" />\n                         <mkdir dir=\"${examples.base}\" />\n \n                         <unzip overwrite=\"false\" dest=\"${examples.base}\" src=\"../../openjpa-project/target/site/downloads/apache-openjpa-${pom.version}-binary.zip\" />"},{"sha":"91654c085912967938b500c7f5be9ddccd7ac24c","filename":"openjpa-integration/osgi-itests/pom.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/osgi-itests/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/osgi-itests/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -222,14 +222,6 @@\n         </resources>\n \n         <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>"},{"sha":"dd63c334a96de9b190fc1f24b0ca3af19a80066f","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"237c913b726e88cb5ba78db7f25f9a1c5c803a9a","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":3,"deletions":31,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -70,7 +70,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <profiles>\n@@ -110,7 +110,7 @@\n                         <echo>Running Sun JPA 2.0 TCK Init</echo>\n                         <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n                         <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n-                        <property name=\"LOCAL_M2_REPO\" value=\"${settings.localRepository}\"/>\n+                        <property name=\"LOCAL_M2_REPO\" value=\"${settings.localRepository}\" />\n                         <ant antfile=\"${basedir}/tck2.xml\">\n                             <target name=\"init\" />\n                         </ant>\n@@ -190,25 +190,6 @@\n         <id>tck-profile</id>\n         <build>\n           <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-enforcer-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <phase>validate</phase>\n-                        <goals>\n-                            <goal>enforce</goal>\n-                        </goals>\n-                        <configuration>\n-                            <rules>\n-                                <requireJavaVersion>\n-                                    <version>[1.5,)</version>\n-                                </requireJavaVersion>\n-                            </rules>\n-                        </configuration>\n-                    </execution>\n-                </executions>\n-            </plugin>\n             <plugin>\n               <groupId>org.apache.maven.plugins</groupId>\n               <artifactId>maven-antrun-plugin</artifactId>\n@@ -418,16 +399,7 @@ databaseName=${db.name}\n             </plugin>\n           </plugins>\n         </build>\n-        <!-- only used for old JPA 1.0 RI API, which we don't use anymore\n-        <repositories>\n-          <repository>\n-            <id>java.net</id>\n-            <name>Java.net Maven Repository</name>\n-            <url>https://maven-repository.dev.java.net/nonav/repository</url>\n-            <layout>legacy</layout>\n-          </repository>\n-        </repositories>\n-        -->\n+\n         <dependencies>\n           <dependency>\n             <groupId>org.apache.geronimo.specs</groupId>"},{"sha":"42f60be4c960b59e180377cae573cf9847196e57","filename":"openjpa-integration/validation/pom.xml","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -26,7 +26,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <artifactId>openjpa-integration-validation</artifactId>\n@@ -73,7 +73,7 @@\n                 <dependency>\n                     <groupId>com.agimatec</groupId>\n                     <artifactId>agimatec-jsr303</artifactId>\n-                    <version>0.9.3</version>\n+                    <version>0.9.6-SNAPSHOT</version>\n                     <scope>test</scope>\n                     <exclusions>\n                         <!-- force usage of the geronimo-validation_1.0_spec -->\n@@ -91,13 +91,13 @@\n                 <dependency>\n                     <groupId>com.agimatec</groupId>\n                     <artifactId>agimatec-validation</artifactId>\n-                    <version>0.9.3</version>\n+                    <version>0.9.6-SNAPSHOT</version>\n                     <scope>test</scope>\n                 </dependency>\n                 <dependency>\n                     <groupId>commons-beanutils</groupId>\n                     <artifactId>commons-beanutils</artifactId>\n-                    <version>1.8.0</version>\n+                    <version>1.8.2</version>\n                     <scope>test</scope>\n                 </dependency>\n                 <dependency>\n@@ -208,7 +208,8 @@\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-persistence-jdbc</artifactId>\n             <version>${pom.version}</version>\n-            <classifier>tests</classifier>\n+            <!-- <classifier>tests</classifier> -->\n+            <type>test-jar</type>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n@@ -230,6 +231,19 @@\n \n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>"},{"sha":"99e97c3679ce15eef896504f09b2247baea12f46","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.util.List;\n+\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceProviderResolver;\n+\n+public class DummyPersistenceProviderResolver implements\n+    PersistenceProviderResolver {\n+\n+    public void clearCachedProviders() {\n+    }\n+\n+    public List<PersistenceProvider> getPersistenceProviders() {\n+        return null;\n+    }\n+\n+}"},{"sha":"dd71fdddd8e43c0eb260c9814fd1373fd4057793","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.util.Map;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.ProviderUtil;\n+\n+public class DummyProvider1 implements PersistenceProvider {\n+\n+    public EntityManagerFactory createContainerEntityManagerFactory(\n+        PersistenceUnitInfo persistenceunitinfo, Map map) {\n+        return null;\n+    }\n+\n+    public EntityManagerFactory createEntityManagerFactory(String s, Map map) {\n+        return null;\n+    }\n+\n+    public ProviderUtil getProviderUtil() {\n+        return null;\n+    }\n+\n+}"},{"sha":"3e2daf42de66a183c3e6a2484cf04bd444934e23","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.util.Map;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.ProviderUtil;\n+\n+public class DummyProvider2 implements PersistenceProvider {\n+\n+    public EntityManagerFactory createContainerEntityManagerFactory(\n+        PersistenceUnitInfo persistenceunitinfo, Map map) {\n+        return null;\n+    }\n+\n+    public EntityManagerFactory createEntityManagerFactory(String s, Map map) {\n+        return null;\n+    }\n+\n+    public ProviderUtil getProviderUtil() {\n+        return null;\n+    }\n+\n+}"},{"sha":"b7d815784f7313f967ad94911d42652b1ab7ea19","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java","status":"added","additions":234,"deletions":0,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceProviderResolver;\n+import javax.persistence.spi.PersistenceProviderResolverHolder;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n+import junit.framework.TestCase;\n+\n+public class TestPersistenceProviderResolver extends TestCase {\n+    File persistenceProviderFile;\n+    File targetJar1;\n+    File targetJar2;\n+    URL classesDirUrl;\n+    String currentDir;\n+    String openjpaProvider = \"org.apache.openjpa.persistence.PersistenceProviderImpl\";\n+    String dummyProvider1 = \"org.apache.openjpa.integration.persistence.provider.DummyProvider1\";\n+    String dummyProvider2 = \"org.apache.openjpa.integration.persistence.provider.DummyProvider2\";\n+    DummyPersistenceProviderResolver dummyResolver = new DummyPersistenceProviderResolver();\n+    \n+    ClassLoader originalLoader = null;\n+    TempUrlLoader tempLoader = null;\n+    \n+    public void setUp() throws Exception {\n+        super.setUp();\n+        \n+        currentDir = System.getProperty(\"user.dir\");\n+        \n+        targetJar1 = new File(currentDir + File.separator + \"target\" + \n+            File.separator + \n+            \"TestPersistenceProviderResolver1.jar\");\n+        targetJar2 = new File(currentDir + File.separator + \"target\" + \n+            File.separator + \n+            \"TestPersistenceProviderResolver2.jar\");\n+        \n+        deleteTargetJars();\n+        \n+        File classesDir = new File(currentDir + File.separator + \"target\" +\n+            File.separator + \"test-classes\" + File.separator);\n+        classesDirUrl = classesDir.toURI().toURL();\n+        \n+        originalLoader = (URLClassLoader)Thread.currentThread().getContextClassLoader();\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        // Restore the original classloader, in case there was an exception\n+        Thread.currentThread().setContextClassLoader(originalLoader);\n+    }\n+    \n+    public void testDefault() {\n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        checkProviders(providerNames);\n+    }\n+    \n+    \n+    public void testDefaultMultipleJars() throws Exception {\n+        String[] contents = new String[]{dummyProvider1};\n+        buildFile(\"testPersistenceProviderResolver1\", contents);\n+        buildTargetJar(targetJar1);\n+        tempLoader = new TempUrlLoader(new URL[]{targetJar1.toURI().toURL(), classesDirUrl}\n+            ,originalLoader);\n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(tempLoader));\n+        \n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        providerNames.add(dummyProvider1);\n+        checkProviders(providerNames);\n+        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(originalLoader));\n+    }\n+    \n+    public void testDefaultMultipleProviders() throws Exception {\n+        String[] contents = new String[]{dummyProvider1, dummyProvider2};\n+        buildFile(\"testPersistenceProviderResolver2\", contents);\n+        buildTargetJar(targetJar2);\n+        tempLoader = new TempUrlLoader(new URL[]{targetJar2.toURI().toURL(), classesDirUrl}\n+            ,originalLoader); \n+        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(tempLoader));\n+        \n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        providerNames.add(dummyProvider1);\n+        providerNames.add(dummyProvider2);\n+        checkProviders(providerNames);\n+        \n+        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(originalLoader));\n+    }\n+    \n+    public void testClearCachedProviders() {\n+        PersistenceProviderResolver resolver = \n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        List<PersistenceProvider> providers = resolver.getPersistenceProviders();\n+        assertNotNull(providers);\n+        resolver.clearCachedProviders();\n+        \n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        checkProviders(providerNames);\n+    }\n+    \n+    public void testNonDefaultResolver() {\n+        PersistenceProviderResolver originalResolver =\n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        PersistenceProviderResolverHolder.setPersistenceProviderResolver(dummyResolver);\n+        PersistenceProviderResolver retrievedResolver = \n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        assertTrue(retrievedResolver instanceof DummyPersistenceProviderResolver);\n+        \n+        PersistenceProviderResolverHolder.setPersistenceProviderResolver(originalResolver);\n+    }\n+    \n+    \n+    private void deleteTargetJars() {\n+        if (targetJar1.exists()) {\n+            targetJar1.delete();\n+        }\n+        if (targetJar2.exists()) {\n+            targetJar2.delete();\n+        }\n+    }\n+    \n+    private void buildFile(String dir, String[] contents) throws Exception {\n+        File servicesDir = new File(currentDir + File.separator + \"target\" + File.separator\n+            + \"test-classes\" + File.separator + dir + File.separator + \"META-INF\" + File.separator\n+            + \"services\");\n+        servicesDir.mkdirs();\n+        assertTrue(servicesDir.exists());\n+        persistenceProviderFile = new File(servicesDir, \"javax.persistence.spi.PersistenceProvider\");\n+        if (persistenceProviderFile.exists()) {\n+            persistenceProviderFile.delete();\n+        }\n+        try {\n+            persistenceProviderFile.createNewFile();\n+            BufferedWriter bw = new BufferedWriter(new FileWriter(persistenceProviderFile));\n+            for (String line : contents) {\n+                bw.write(line);\n+                bw.newLine();\n+            }\n+            \n+            bw.flush();\n+            bw.close();\n+        } catch (IOException e) {\n+            System.out.println(\"Problem writing to file: \" + persistenceProviderFile.getAbsolutePath());\n+            throw e;\n+        }\n+        assertTrue(persistenceProviderFile.exists());\n+    }\n+    \n+    \n+    private void buildTargetJar(File targetJar) throws Exception {\n+        JarOutputStream out = new JarOutputStream(\n+            new BufferedOutputStream(new FileOutputStream(targetJar)));\n+        \n+        BufferedInputStream in = \n+            new BufferedInputStream(new FileInputStream(persistenceProviderFile));\n+\n+        out.putNextEntry(new JarEntry(\"META-INF/\"));\n+        out.putNextEntry(new JarEntry(\"META-INF/services/\"));\n+        out.putNextEntry(new JarEntry(\"META-INF/services/javax.persistence.spi.PersistenceProvider\"));\n+        //write the file to the jar\n+        byte[] buf = new byte[1024];\n+        int i;\n+        while ((i = in.read(buf)) != -1) {\n+          out.write(buf, 0, i);\n+        }\n+        \n+        out.close();\n+        in.close();        \n+    }\n+    \n+    private void checkProviders(List<String> providerNames) {\n+        PersistenceProviderResolver resolver = \n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        List<PersistenceProvider> providers = resolver.getPersistenceProviders();\n+        assertNotNull(providers);\n+        assertFalse(providers.isEmpty());\n+        for (PersistenceProvider provider : providers) {\n+            String providerName = provider.getClass().getName();\n+            if (providerNames.contains(providerName)) {\n+                providerNames.remove(providerName);\n+            }\n+        }\n+        assertTrue(providerNames.isEmpty());\n+    }\n+    \n+    class TempUrlLoader extends URLClassLoader {\n+        public TempUrlLoader(URL[] urls, ClassLoader parent) {\n+            super(urls,parent);\n+        }\n+    }\n+}"},{"sha":"c9a741d823dcb19dc749798e58d840d9dc92b1c5","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.validation.Valid;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.Size;\n+\n+@Entity(name=\"Vbook\")\n+public class Book {\n+    int id;\n+    String title;\n+    int pages;\n+    Publisher publisher;\n+    \n+    public Book() {}\n+    \n+    public Book(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the id\n+     */\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the title\n+     */\n+    @Basic(fetch = FetchType.LAZY)\n+    @Size(min = 0, max = 9)\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    /**\n+     * @param title the title to set\n+     */\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    /**\n+     * @return the pages\n+     */\n+    public int getPages() {\n+        return pages;\n+    }\n+\n+    /**\n+     * @param pages the pages to set\n+     */\n+    public void setPages(int pages) {\n+        this.pages = pages;\n+    }\n+\n+    /**\n+     * @return the publisher\n+     */\n+    @Valid\n+    @Embedded\n+    public Publisher getPublisher() {\n+        return publisher;\n+    }\n+\n+    /**\n+     * @param publisher the publisher to set\n+     */\n+    public void setPublisher(Publisher publisher) {\n+        this.publisher = publisher;\n+    }\n+}"},{"sha":"d42918c7c21db9ed072aa944d189cfcc3e0c6c56","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embeddable;\n+import javax.validation.constraints.Size;\n+\n+@Embeddable\n+public class Publisher {\n+    @Basic\n+    @Size(min = 0, max = 5)\n+    String name;\n+    \n+    String publisherID;\n+    \n+    public Publisher() {}\n+    \n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * @return the publisherID\n+     */\n+    public String getPublisherID() {\n+        return publisherID;\n+    }\n+\n+    /**\n+     * @param publisherID the publisherID to set\n+     */\n+    public void setPublisherID(String publisherID) {\n+        this.publisherID = publisherID;\n+    }\n+}"},{"sha":"83134903c5e5ae40f525cc7b705c22c499a56eb9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Path;\n+import javax.validation.TraversableResolver;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.validation.TraversableResolverImpl;\n+// The following 2 are dynamically loaded by loadPathImpl() from setUp()\n+// import org.hibernate.validator.engine.PathImpl;\n+// import com.agimatec.validation.jsr303.util.PathImpl;\n+\n+/**\n+ * Test the TraversableResolver methods\n+ * \n+ * First run several testcases from a user perspective. These test the methods\n+ * indirectly:\n+ *    1) testLoadedTitle()\n+ *    2} testUnloaded()\n+ *    3) testCascading()\n+ * \n+ * Then test the methods directly:\n+ *    1) testPages()\n+ *    2) testTitle\n+ */\n+public class TestTraversableResolver extends TestCase {\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private Log log = null;\n+    private OpenJPAEntityManager em = null;\n+    private Book book;\n+\n+    /**\n+     * Create a book with a title that is too long, and the embedded\n+     * publisher has a name that is also too long. However, use a\n+     * persistence unit with validation-mode set to NONE. Therefore,\n+     * the create should be successful. This is to setup a situation\n+     * where fields to be potentially validated are not necessarily loaded.\n+     */\n+    @Override\n+    public void setUp() {\n+        createBook(1, \"long title\", 234);\n+    }\n+    \n+    private void createEMF(String pu, String schemaAction) {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,\"\n+            + schemaAction);\n+        emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory(\n+            pu,\n+            \"org/apache/openjpa/integration/validation/persistence.xml\",\n+            map);\n+        assertNotNull(emf);\n+        log = emf.getConfiguration().getLog(\"Tests\");\n+    }\n+\n+    private void closeEMF() {\n+        log = null;\n+        if (em != null) {\n+            em.close();\n+            em = null;\n+        }\n+        if (emf != null) {\n+            emf.close();\n+            emf = null;\n+        }\n+    }\n+    \n+    /**\n+     * By default, the title is not loaded. Make sure it gets loaded,\n+     * make a change in a different field, and commit. The isLoaded() method\n+     * of the TraversableResolver should return true, resulting in a validation\n+     * being performed and a ConstraintViolationException should be returned\n+     * because the title is too long.\n+     */\n+    public void testLoadedTitle() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        book.setPages(124);\n+        // load the title\n+        String title = book.getTitle();\n+        assertEquals(\"long title\", title);\n+        boolean exceptionCaught = false;\n+        try {\n+            em.getTransaction().commit();\n+        } catch (ConstraintViolationException e) {\n+            exceptionCaught = true;\n+        }\n+        assertTrue(exceptionCaught);\n+    }\n+    \n+    /**\n+     * By default, the title and publisher are not loaded. Make a change in a different field\n+     * and commit. The isLoaded() method of the TraversableResolver should return\n+     * false for both of these. Therefore a validation should not be performed. \n+     * The commit should succeed with no exception.\n+     */\n+    public void testUnloaded() {\n+        createEMF(\"non-validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        book.setPages(124);\n+        boolean exceptionCaught = false;\n+        try {\n+            em.getTransaction().commit();\n+        } catch (ConstraintViolationException e) {\n+            exceptionCaught = true;\n+        }\n+        assertFalse(exceptionCaught);\n+        closeEMF();\n+    }\n+    \n+    /**\n+     * By default, the publisher is not loaded. Make sure it gets loaded.\n+     * The isLoaded() and isCascadable() methods should both return true,\n+     * resulting in a validation being performed. A ConstraintViolation\n+     * should be thrown since the publisher name is too long.\n+     */\n+    public void testCascading() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        book.setPages(124);\n+        // load the embedded publisher\n+        Publisher publisher = book.getPublisher();\n+        assertNotNull(publisher);\n+        publisher.setPublisherID(\"yyy\");\n+        boolean exceptionCaught = false;\n+        try {\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            exceptionCaught = true;\n+        }\n+        assertTrue(exceptionCaught);\n+        closeEMF();\n+    }\n+    \n+    /**\n+     * Test the isReachable() and isCascadable() methods on the pages element of Book,\n+     * which is eagerly fetched by default. \n+     */\n+    public void testPages() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        // PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.pages\");\n+        // Path.Node node = path.getLeafNode();\n+        Path.Node node = getLeafNodeFromString(\"org.apache.openjpa.integration.validation.Book.pages\");\n+        TraversableResolver tr = new TraversableResolverImpl();\n+        assertTrue(tr.isReachable(book, node, Book.class, null, ElementType.METHOD));\n+        assertTrue(tr.isCascadable(book, node, Book.class, null, ElementType.METHOD));\n+        em.getTransaction().commit();\n+        closeEMF();\n+    }\n+    \n+    /**\n+     * Test the isReachable() method on the title.\n+     * It is configured with fetch=FetvhType.LAZY.\n+     */\n+    public void testTitle() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        // PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.title\");\n+        // Path.Node node = path.getLeafNode();\n+        Path.Node node = getLeafNodeFromString(\"org.apache.openjpa.integration.validation.Book.title\");\n+        TraversableResolver tr = new TraversableResolverImpl();\n+        assertFalse(tr.isReachable(book, node, Book.class, null, ElementType.FIELD));\n+        em.getTransaction().commit();\n+        closeEMF();\n+    }\n+    \n+    private void createBook(int id, String title, int pages) {\n+        createEMF(\"non-validation-pu\", \"SchemaAction='drop,add')\");\n+        em = emf.createEntityManager();\n+        book = new Book(id);\n+        book.setTitle(title);\n+        book.setPages(pages);\n+        Publisher publisher = new Publisher();\n+        publisher.setName(\"long name\");\n+        publisher.setPublisherID(\"xxx\");\n+        book.setPublisher(publisher);\n+        em.getTransaction().begin();\n+        em.persist(book);\n+        em.getTransaction().commit();\n+        closeEMF();\n+    }\n+\n+    private Path.Node getLeafNodeFromString(String s) {\n+        Class<?> PathImpl = null;\n+        Path.Node node = null;\n+\n+        // dynamically load PathImpl depending on the Bean Validation provider\n+        try {\n+            PathImpl = Class.forName(\"org.hibernate.validator.engine.PathImpl\",\n+                true, AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n+        } catch (ClassNotFoundException e) {\n+            log.trace(\"getLeafNodeFromPath: Did not find org.hibernate.validator.engine.PathImpl\");\n+        }\n+        if (PathImpl == null) {\n+            try {\n+                PathImpl = Class.forName(\"com.agimatec.validation.jsr303.util.PathImpl\",\n+                    true, AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n+            } catch (ClassNotFoundException e) {\n+                log.trace(\"getLeafNodeFromPath: Did not find com.agimatec.validation.jsr303.util.PathImpl\");\n+            }\n+        }\n+        assertNotNull(PathImpl);\n+        try {\n+            Method createPathFromString = PathImpl.getMethod(\"createPathFromString\", String.class);\n+            assertNotNull(createPathFromString);\n+            Method getLeafNode = PathImpl.getMethod(\"getLeafNode\");\n+            assertNotNull(getLeafNode);\n+            Object path = createPathFromString.invoke(null, s);\n+            node = (Path.Node) getLeafNode.invoke(path, null);\n+        } catch (NoSuchMethodException e) {\n+        } catch (IllegalAccessException ae) {\n+        } catch (java.lang.reflect.InvocationTargetException te) {\n+        }\n+        return node;\n+    }\n+\n+}\n+"},{"sha":"0e326bb3e04e962b770d2b4d606c6a531c37e45d","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -135,14 +135,28 @@\n         <class>org.apache.openjpa.integration.validation.ConstraintDates</class>\n         <class>org.apache.openjpa.integration.validation.ConstraintPattern</class>\n         <class>org.apache.openjpa.integration.validation.Person</class>\n-        <class>org.apache.openjpa.integration.validation.Address</class>        \n+        <class>org.apache.openjpa.integration.validation.Address</class> \n+        <class>org.apache.openjpa.integration.validation.Book</class>       \n         <validation-mode>AUTO</validation-mode>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" \n                 value=\"buildSchema\"/>\n         </properties>\n     </persistence-unit>\n     \n+    <persistence-unit name=\"validation-pu\">\n+        <class>org.apache.openjpa.integration.validation.Book</class> \n+        <class>org.apache.openjpa.integration.validation.Publisher</class>      \n+        <validation-mode>AUTO</validation-mode>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"non-validation-pu\">\n+        <class>org.apache.openjpa.integration.validation.Book</class> \n+        <class>org.apache.openjpa.integration.validation.Publisher</class>         \n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+    \n+    \n     <persistence-unit name=\"XMLConstraintPU\">\n         <description>Make sure the mapping file and class listings match the same PU\n          in META-INF/ehn-persistence.xml</description>"},{"sha":"67951058eaa60123c779dfd0179ea8f6f515a8b1","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -78,4 +78,22 @@\n             <scope>test</scope>\n         </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n </project>"},{"sha":"98bb6d4137bd3714ff2593e04a3e7d0eab455c91","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","status":"modified","additions":22,"deletions":64,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -29,7 +29,6 @@\n import java.util.concurrent.locks.ReentrantLock;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n@@ -39,8 +38,6 @@\n import org.apache.openjpa.kernel.QueryHints;\n import org.apache.openjpa.kernel.QueryStatistics;\n import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Implementation of FinderCache for JDBC.\n@@ -55,20 +52,15 @@\n     private static final String PATTERN_SEPARATOR = \"\\\\;\";\n     private static final String EXLUDED_BY_USER = \"Excluded by user\";\n      \n-    private final Map<ClassMapping, \n-        FinderQuery<ClassMapping, SelectExecutor, Result>> _delegate;\n+    private final Map<ClassMapping, FinderQuery<ClassMapping, SelectExecutor, Result>> _delegate;\n     // Key: class name Value: Reason why excluded\n     private final Map<String, String> _uncachables;\n     private List<String> _exclusionPatterns;\n     private QueryStatistics<ClassMapping> _stats;\n     private ReentrantLock _lock = new ReentrantLock();\n-    private Log _log;\n-    private Localizer _loc = Localizer.forPackage(FinderCacheImpl.class);\n-\n     \n     public FinderCacheImpl() {\n-        _delegate = new HashMap<ClassMapping, \n-            FinderQuery<ClassMapping, SelectExecutor, Result>>();\n+        _delegate = new HashMap<ClassMapping, FinderQuery<ClassMapping, SelectExecutor, Result>>();\n         _uncachables = new HashMap<String, String>();\n         _stats = new QueryStatistics.Default<ClassMapping>();\n     }\n@@ -82,9 +74,10 @@ public FinderCacheImpl() {\n         lock();\n         try {\n             Map<String, String> view = new TreeMap<String, String>();\n-            for (ClassMapping mapping : _delegate.keySet())\n+            for (ClassMapping mapping : _delegate.keySet()) {\n                 view.put(mapping.getDescribedType().getName(), \n                     _delegate.get(mapping).getQueryString());\n+            }\n             return view;\n         } finally {\n             unlock();\n@@ -110,16 +103,18 @@ public FinderCacheImpl() {\n      */\n     public FinderQuery<ClassMapping,SelectExecutor,Result> \n         get(ClassMapping mapping, FetchConfiguration fetch) {\n-        if (fetch.getReadLockLevel() != 0)\n+        if (fetch.getReadLockLevel() != 0) {\n             return null;\n+        }\n         boolean ignore = isHinted(fetch, QueryHints.HINT_IGNORE_FINDER);\n         boolean invalidate = isHinted(fetch, QueryHints.HINT_INVALIDATE_FINDER);\n-        if (invalidate)\n+        if (invalidate) {\n             invalidate(mapping);\n-        if (ignore)\n+        }\n+        if (ignore) {\n             return null;\n-        FinderQuery<ClassMapping, SelectExecutor, Result> result = \n-            _delegate.get(mapping);\n+        }\n+        FinderQuery<ClassMapping, SelectExecutor, Result> result = _delegate.get(mapping);\n         _stats.recordExecution(mapping);\n         return result;\n     }\n@@ -145,8 +140,9 @@ public FinderCacheImpl() {\n        (ClassMapping mapping, SelectExecutor select, FetchConfiguration fetch) {\n         lock();\n         try {\n-            if (fetch.getReadLockLevel() != 0)\n+            if (fetch.getReadLockLevel() != 0) {\n                 return null;\n+            }\n             boolean recache = isHinted(fetch, QueryHints.HINT_RECACHE_FINDER);\n             if (isExcluded(mapping)) {\n                 return recache ? put(mapping, select) : null;\n@@ -167,18 +163,11 @@ public FinderCacheImpl() {\n      * some Select are not cached), then the mapping is marked invalid.\n      *  \n     */\n-    private FinderQuery<ClassMapping, SelectExecutor, Result> put\n-       (ClassMapping mapping, SelectExecutor select) {\n-        FinderQuery<ClassMapping, SelectExecutor, Result> finder = \n-            FinderQueryImpl.newFinder(mapping, select);\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> put(ClassMapping mapping, SelectExecutor select) {\n+        FinderQuery<ClassMapping, SelectExecutor, Result> finder = FinderQueryImpl.newFinder(mapping, select);\n         if (finder != null) {\n             _delegate.put(mapping, finder);\n-            if (_log != null && _log.isTraceEnabled())\n-                _log.trace(_loc.get(\"finder-cached\", mapping, \n-                    finder.getQueryString())); \n         } else {\n-            if (_log != null && _log.isWarnEnabled())\n-                _log.warn(_loc.get(\"finder-not-cachable\", mapping));\n             invalidate(mapping);\n         }\n         return finder;\n@@ -188,8 +177,7 @@ public FinderCacheImpl() {\n      * Affirms if the given mapping is excluded from being cached.\n      */\n     public boolean isExcluded(ClassMapping mapping) {\n-        return mapping != null && \n-            isExcluded(mapping.getDescribedType().getName());\n+        return mapping != null && isExcluded(mapping.getDescribedType().getName());\n     }\n \n     /**\n@@ -214,10 +202,6 @@ public void addExclusionPattern(String pattern) {\n             _exclusionPatterns.add(pattern);\n             Collection<ClassMapping> invalidMappings = getMatchedKeys(pattern, \n                     _delegate.keySet());\n-            if (!invalidMappings.isEmpty() \n-                && _log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"finder-add-pattern\", pattern, \n-                    invalidMappings.size(), invalidMappings));\n             for (ClassMapping invalidMapping : invalidMappings)\n                 markUncachable(invalidMapping, pattern);\n         } finally {\n@@ -237,9 +221,6 @@ public void removeExclusionPattern(String pattern) {\n             _exclusionPatterns.remove(pattern);\n             Collection<String> reborns = getMatchedKeys(pattern, \n                 _uncachables.keySet());\n-            if (!reborns.isEmpty() && _log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"finder-remove-pattern\", pattern, \n-                    reborns.size(), reborns));\n             for (String rebornKey : reborns)\n                 _uncachables.remove(rebornKey);\n         } finally {\n@@ -262,8 +243,7 @@ private String getMatchedExclusionPattern(String id) {\n     /**\n      * Gets the elements of the given set that match the given pattern. \n      */\n-    private Collection<ClassMapping> getMatchedKeys(String pattern, \n-            Set<ClassMapping> set) {\n+    private Collection<ClassMapping> getMatchedKeys(String pattern, Set<ClassMapping> set) {\n         List<ClassMapping> result = new ArrayList<ClassMapping>();\n         for (ClassMapping entry : set) {\n             if (matches(pattern, entry)) {\n@@ -276,8 +256,7 @@ private String getMatchedExclusionPattern(String id) {\n     /**\n      * Gets the elements of the given list which match the given pattern. \n      */\n-    private Collection<String> getMatchedKeys(String pattern, \n-            Collection<String> coll) {\n+    private Collection<String> getMatchedKeys(String pattern, Collection<String> coll) {\n         List<String> result = new ArrayList<String>();\n         for (String key : coll) {\n             if (matches(pattern, key)) {\n@@ -299,58 +278,39 @@ boolean matches(String pattern, String target) {\n     public boolean invalidate(ClassMapping mapping) {\n         lock();\n         try {\n-            if (_log.isTraceEnabled())\n-                _log.trace(_loc.get(\"finder-invalidate\", mapping));\n             return _delegate.remove(mapping) != null;\n         } finally {\n             unlock();\n         }\n     }\n \n-    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        ClassMapping mapping) {\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(ClassMapping mapping) {\n         return markUncachable(mapping.getDescribedType().getName());\n     }\n \n-    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        String id) {\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(String id) {\n         return markUncachable(id, EXLUDED_BY_USER);\n     }\n     \n-    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        String cls, String reason) {\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(String cls, String reason) {\n         lock();\n         try {\n             boolean excludedByUser = _uncachables.get(cls) == EXLUDED_BY_USER;\n             if (!excludedByUser)\n                 _uncachables.put(cls, reason);\n-            if (_log != null && _log.isInfoEnabled()) {\n-                if (excludedByUser) \n-                    _log.info(_loc.get(\"finder-uncache-strong\", cls));\n-                else \n-                    _log.info(_loc.get(\"finder-uncache-weak\", cls, \n-                        reason));\n-            }\n             return _delegate.remove(searchMappingByName(cls));\n         } finally {\n             unlock();\n         }\n     }\n     \n-    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        ClassMapping mapping, String reason) {\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(ClassMapping mapping, String reason) {\n         lock();\n         try {\n             String cls = mapping.getDescribedType().getName();\n             boolean excludedByUser = _uncachables.get(cls) == EXLUDED_BY_USER;\n             if (!excludedByUser)\n                 _uncachables.put(cls, reason);\n-            if (_log != null && _log.isInfoEnabled()) {\n-                if (excludedByUser) \n-                    _log.info(_loc.get(\"finder-uncache-strong\", cls));\n-                else \n-                    _log.info(_loc.get(\"finder-uncache-weak\", cls, reason));\n-            }\n             return _delegate.remove(mapping);\n         } finally {\n             unlock();\n@@ -411,10 +371,8 @@ public void startConfiguration() {\n     }\n     \n     public void setConfiguration(Configuration conf) {\n-        _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n     }\n \n     public void endConfiguration() {\n     }\n-\n }"},{"sha":"e16f899d4ff4e3e3250ff3877483e26bce94a3fe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1025,8 +1025,13 @@ else if (sm.getVersion() == null)\n                     \tfetch.traverseJDBC(fms[i]), eres);\n                     if (processed != eres)\n                         res.putEager(fms[i], processed);\n-                } else\n-                    fms[i].load(sm, this, fetch.traverseJDBC(fms[i]), res);\n+                } else {\n+                    boolean lazyEmbeddable = fms[i].getValueMapping().isEmbedded() &&\n+                        fms[i].getEmbeddedMetaData() != null && \n+                        fetch.requiresFetch(fms[i]) == FetchConfiguration.FETCH_NONE;\n+                    if (!lazyEmbeddable)    \n+                        fms[i].load(sm, this, fetch.traverseJDBC(fms[i]), res);\n+                }\n             } finally {\n                 res.endDataRequest();\n             }\n@@ -1525,6 +1530,9 @@ public void close() throws SQLException {\n             }\n         }\n \n+        /*\n+         * Non-thread-safe method.  Ensure protection in the call path...\n+         */\n         public void free() {\n             // ensure that we do not close the underlying connection\n             // multiple times; this could happen if someone (e.g., an"},{"sha":"023d2dc91ab409db4c4502dcbffb1982fb1d5dbd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n@@ -29,16 +30,30 @@\n class Count\n     extends UnaryOp {\n \n+    private boolean isCountMultiColumns = false;\n+    private boolean isCountDistinct = false;\n+    \n     /**\n      * Constructor. Provide the value to operate on.\n      */\n     public Count(Val val) {\n         super(val);\n+        if (val instanceof Distinct)\n+            isCountDistinct = true;\n     }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         // join into related object if present\n-        return initializeValue(sel, ctx, JOIN_REL);\n+        ExpState expState = initializeValue(sel, ctx, JOIN_REL);\n+        Val val = isCountDistinct ? ((Distinct)getValue()).getValue() : getValue();\n+        if (val instanceof PCPath) {\n+            Column[] cols = ((PCPath)val).getColumns(expState);\n+            if (cols.length > 1) {\n+                isCountMultiColumns = true;\n+            }\n+        }\n+            \n+        return expState;\n     }\n \n     protected Class getType(Class c) {\n@@ -52,15 +67,24 @@ protected String getOperator() {\n     public boolean isAggregate() {\n         return true;\n     }\n-    \n+\n+    public boolean isCountDistinctMultiCols() {\n+        return isCountDistinct && isCountMultiColumns;\n+    }\n+\n     /**\n      * Overrides SQL formation by replacing COUNT(column) by COUNT(*) when specific conditions are met and\n      * DBDictionary configuration <code>useWildCardForCount</code> is set.\n      */\n     @Override\n     public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index) {\n-        super.appendTo(sel, ctx, state, sql, index);\n-        if (ctx.store.getDBDictionary().useWildCardForCount && state.joins.isEmpty()) {\n+        if (isCountDistinctMultiCols()) {\n+            getValue().appendTo(sel, ctx, state, sql, 0);\n+            sql.addCastForParam(getOperator(), getValue());\n+        } else\n+            super.appendTo(sel, ctx, state, sql, index);\n+        if ((ctx.store.getDBDictionary().useWildCardForCount && state.joins.isEmpty()) ||\n+            !isCountDistinct && isCountMultiColumns){\n             String s = sql.getSQL();\n             if (s.startsWith(\"COUNT(\") && s.endsWith(\")\")) {\n                 sql.replaceSqlString(\"COUNT(\".length(), s.length()-1, \"*\");"},{"sha":"486a940c7d6ca2eaccca7ec7962f772ff707b68b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -41,4 +41,22 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n     protected String getOperator() {\n         return \"DISTINCT\";\n     }\n+\n+    @Override\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        Val val = getValue();\n+        if (val instanceof PCPath) {\n+            boolean noParen = getNoParen();\n+            sql.append(getOperator());\n+            sql.append(noParen ? \" \" : \"(\");\n+            ((PCPath)val).appendTo(sel, ctx, state, sql); \n+            sql.addCastForParam(getOperator(), val);\n+            if (!noParen)\n+                sql.append(\")\");\n+            \n+        } else\n+            super.appendTo(sel, ctx, state, sql, index);\n+    }\n+    \n }"},{"sha":"ea59e783621cec4da6c9386c60277bb94c871dc7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -970,9 +970,23 @@ public int length(Select sel, ExpContext ctx, ExpState state) {\n         return getColumns(state).length;\n     }\n \n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql) {\n+        Column[] cols = getColumns(state);\n+        for (int i = 0; i < cols.length; i++) {\n+            appendTo(sel, state, sql, cols[i]);\n+            if (i < cols.length -1)\n+            sql.append(\", \");\n+        }\n+    }\n+    \n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n         Column col = getColumns(state)[index];\n+        appendTo(sel, state, sql, col);\n+    }\n+    \n+    public void appendTo(Select sel, ExpState state, SQLBuffer sql, Column col) {\n         if (sel != null)\n             sel.setSchemaAlias(_schemaAlias);\n "},{"sha":"d7c2800a33fa855afe6df4463c9cf0784f461f30","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":41,"deletions":5,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -36,6 +36,8 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.UnsupportedException;\n \n /**\n  * Turns parsed queries into selects.\n@@ -48,6 +50,7 @@\n \n     private boolean _extent = false;\n     private Select _subselect = null;\n+    private static final Localizer _loc = Localizer.forPackage(SelectConstructor.class);\n \n     /**\n      * Return true if we know the select to have on criteria; to be an extent.\n@@ -115,6 +118,18 @@ public Select evaluate(ExpContext ctx, Select parent, String alias,\n         }\n         for (int i = 0; i < exps.grouping.length; i++)\n             ((Val) exps.grouping[i]).groupBy(sel, ctx, state.grouping[i]);\n+        \n+        if (exps.projections.length == 1) {\n+            Val val = (Val) exps.projections[0];\n+            if (val instanceof Count && ((Count)val).isCountDistinctMultiCols()) {\n+                Select newSel = ctx.store.getSQLFactory().newSelect();\n+                newSel.select(\"COUNT(*)\", val);\n+                newSel.setExpectedResultCount(1, true);\n+                newSel.setFromSelect(sel);\n+                sel.setExpectedResultCount(0, true);\n+                sel = newSel;\n+            }\n+        }        \n         return sel;\n     }\n \n@@ -151,7 +166,9 @@ private Select newSelect(ExpContext ctx, Select parent,\n                 subsel.setParent(sel, subquery.getCandidateAlias());\n             }\n         }\n-     \n+        if (HasContainsExpressionVisitor.hasContains(exps.filter)) {\n+            sel.setHasSubselect(true);\n+        }\n         initialize(sel, ctx, exps, state);\n \n         if (!sel.getAutoDistinct()) {\n@@ -235,6 +252,10 @@ private void initialize(Select sel, ExpContext ctx, QueryExpressions exps,\n                 // projections; this ensures that we have all our joins cached\n                 state.projections[i] = resultVal.initialize(sel, ctx, \n                     Val.JOIN_REL | Val.FORCE_OUTER);\n+                if (exps.projections.length > 1 && resultVal instanceof Count) {\n+                    if (((Count)resultVal).isCountDistinctMultiCols())\n+                        throw new UnsupportedException(_loc.get(\"count-distinct-multi-col-only\"));\n+                }\n                 joins = sel.and(joins, state.projections[i].joins);\n             }\n         }\n@@ -290,6 +311,8 @@ public void select(Select sel, ExpContext ctx, ClassMapping mapping,\n         Select inner = sel.getFromSelect();\n         Val val;\n         Joins joins = null;\n+        boolean isCountDistinctMultiCols = false;\n+\n         if (sel.getSubselectPath() != null)\n             joins = sel.newJoins().setSubselect(sel.getSubselectPath());\n \n@@ -307,19 +330,32 @@ public void select(Select sel, ExpContext ctx, ClassMapping mapping,\n             // subselect for objects; we really just need the primary key values\n             sel.select(mapping.getPrimaryKeyColumns(), joins);\n         } else {\n+            if (exps.projections.length == 1) {\n+                val = (Val) exps.projections[0];\n+                if (val instanceof Count && ((Count)val).isCountDistinctMultiCols()) {\n+                    isCountDistinctMultiCols = true;\n+                    if (sel.getParent() != null)\n+                        throw new UnsupportedException(_loc.get(\"count-distinct-multi-col-subselect-unsupported\"));\n+                }\n+            }            \n+\n             // if we have an inner select, we need to select the candidate\n             // class' pk columns to guarantee unique instances\n-            if (inner != null)\n+            if (inner != null && !isCountDistinctMultiCols)\n                 inner.select(mapping.getPrimaryKeyColumns(), joins);\n \n             // select each result value; no need to pass on the eager mode since\n             // under projections we always use EAGER_NONE\n             boolean pks = sel.getParent() != null;\n             for (int i = 0; i < exps.projections.length; i++) {\n                 val = (Val) exps.projections[i];\n-                if (inner != null)\n-                    val.selectColumns(inner, ctx, state.projections[i], pks);\n-                val.select(sel, ctx, state.projections[i], pks);\n+                if (inner != null) {\n+                    if (!isCountDistinctMultiCols)\n+                        val.selectColumns(inner, ctx, state.projections[i], pks);\n+                    else\n+                        val.select(inner, ctx, state.projections[i], pks);\n+                } else\n+                    val.select(sel, ctx, state.projections[i], pks);\n             }\n \n             // make sure having columns are selected since it is required by "},{"sha":"be543b64803fbd09b13466e86d9ad174031fdc12","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -74,6 +74,10 @@ public Class getType() {\n     public void setImplicitType(Class type) {\n         _cast = type;\n     }\n+    \n+    public boolean getNoParen() {\n+        return _noParen;\n+    }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         return initializeValue(sel, ctx, flags);"},{"sha":"d84e88cb70e96720db5e9ef59cae88955649f4c5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -26,19 +26,23 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n  * Value handler for JDK1.5 enum field types.\n  *\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class EnumValueHandler\n     extends AbstractValueHandler {\n \n-    private Enum[] _vals = null;\n+    private Enum<?>[] _vals = null;\n     private boolean _ordinal = false;\n+    private static final Localizer _loc = Localizer.forPackage(EnumValueHandler.class);\n \n     /**\n      * Whether to store the enum value as its ordinal.\n@@ -72,7 +76,9 @@ public void setStoreOrdinal(boolean ordinal) {\n             Method m = vm.getType().getMethod(\"values\", (Class[]) null);\n             _vals = (Enum[]) m.invoke(null, (Object[]) null);\n         } catch (Exception e) {\n-            throw new MetaDataException().setCause(e);\n+            \n+            throw new MetaDataException(_loc.get(\"not-enum-field\", \n+                    vm.getFieldMapping().getFullName(true), Exceptions.toClassName(vm.getType()))).setCause(e);\n         }\n \n         Column col = new Column();\n@@ -96,8 +102,7 @@ public boolean isVersionable() {\n         return true;\n     }\n \n-    public Object toDataStoreValue(ValueMapping vm, Object val,\n-        JDBCStore store) {\n+    public Object toDataStoreValue(ValueMapping vm, Object val, JDBCStore store) {\n         if (val == null)\n             return null;\n         if (_ordinal)"},{"sha":"7a536ca58f47b61763e4eec8d1e172cc32e099c8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1012,7 +1012,9 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n                 getPrimaryKeyIndex()];\n         } else if (relmapping.getObjectIdType() == ObjectId.class && \n             relmapping.getPrimaryKeyFieldMappings()[0].getValueMapping().isEmbedded()) {\n-            return j.getJoinValue(savedFieldVal, col, store);\n+            if (fieldVal == null)\n+                return j.getJoinValue(savedFieldVal, col, store);\n+            return j.getJoinValue(fieldVal, col, store);\n         }\n         return j.getJoinValue(fieldVal, col, store);\n     }"},{"sha":"5fb5414dae1b434453017059fafdbc2c9d9ddd44","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,10 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n-import java.math.BigDecimal;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n-import java.sql.PreparedStatement;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Arrays;\n@@ -37,7 +35,7 @@\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n- * Support for the H2 database ({@link http://www.h2database.com}).\n+ * Dictionary for H2 ({@link http://www.h2database.com}).\n  *\n  * @since 0.9.7\n  */\n@@ -54,30 +52,19 @@ public H2Dictionary() {\n         autoAssignTypeName = \"INTEGER\";\n         nextSequenceQuery = \"CALL NEXT VALUE FOR {0}\";\n \n-        // CROSS JOIN is currently not supported\n-        crossJoinClause = \"JOIN\";\n-        requiresConditionForCrossJoin = true;\n         stringLengthFunction = \"LENGTH({0})\";\n         trimLeadingFunction = \"LTRIM({0})\";\n         trimTrailingFunction = \"RTRIM({0})\";\n         trimBothFunction = \"TRIM({0})\";\n \n-        useSchemaName = true;\n-        supportsSelectForUpdate = true;\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n         rangePosition = RANGE_POST_LOCK;\n         supportsDeferredConstraints = false;\n \n-        blobTypeName = \"BLOB\";\n-        doubleTypeName = \"DOUBLE\";\n-\n         supportsNullTableForGetPrimaryKeys = true;\n         supportsNullTableForGetIndexInfo = true;\n \n-        requiresCastForMathFunctions = false;\n-        requiresCastForComparisons = false;\n-\n         reservedWordSet.addAll(Arrays.asList(new String[] {\n             \"CURRENT_TIMESTAMP\", \"CURRENT_TIME\", \"CURRENT_DATE\", \"CROSS\",\n             \"DISTINCT\", \"EXCEPT\", \"EXISTS\", \"FROM\", \"FOR\", \"FALSE\", \"FULL\",\n@@ -102,7 +89,9 @@ public int getJDBCType(int metaTypeCode, boolean lob) {\n \n     @Override\n     public int getPreferredType(int type) {\n-        return super.getPreferredType(type);\n+        if(type == Types.BIT)\n+            return Types.BOOLEAN;\n+        return type;\n     }\n \n     @Override\n@@ -219,8 +208,11 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n         boolean subselect) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);\n-        if (start != 0)\n+        if (start != 0) {\n+            if(end == Long.MAX_VALUE)\n+                buf.append(\" LIMIT 0\");\n             buf.append(\" OFFSET \").appendValue(start);\n+        }\n     }\n \n     @Override"},{"sha":"a0ebd75c1770972803b250a42ab1a8a3e3401399","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -443,6 +443,14 @@ public void setParent(Select parent, String path) {\n             throw new UnsupportedException(_loc.get(\"union-element\"));\n         }\n \n+        public void setHasSubselect(boolean hasSub) {\n+            sel.setHasSubselect(hasSub);\n+        }\n+        \n+        public boolean getHasSubselect() {\n+            return sel.getHasSubselect();    \n+        }\n+        \n         public Select getFromSelect() {\n             return null;\n         }"},{"sha":"effe2f0a7b8e331ee4e3dd0e93140a25deb661c6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -719,4 +719,18 @@ public SelectExecutor eagerClone(FieldMapping key, int eagerType,\n      * @param schemaAlias\n      */\n     public void setSchemaAlias(String schemaAlias);\n+    \n+    /**\n+     * Set the flag to indicate whether this Select has\n+     * internally generated subselect \n+     */\n+    public void setHasSubselect(boolean hasSub);\n+    \n+    /**\n+     * Return the flag to indicate whether this Select has\n+     * internally generated subselect\n+     * @return\n+     */\n+    public boolean getHasSubselect();\n+   \n }"},{"sha":"61ad9231780724e84b10112b1f8febf80584782e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -158,6 +158,7 @@\n     private List _subsels = null;\n     private SelectImpl _parent = null;\n     private String _subPath = null;\n+    private boolean _hasSub = false;\n \n     // from select if this select selects from a tmp table created by another\n     private SelectImpl _from = null;\n@@ -559,6 +560,14 @@ public void setParent(Select parent, String path) {\n         }\n     }\n     \n+    public void setHasSubselect(boolean hasSub) {\n+        _hasSub = hasSub;\n+    }\n+    \n+    public boolean getHasSubselect() {\n+        return _hasSub;    \n+    }\n+    \n     public Map getAliases() {\n         return _aliases;\n     }\n@@ -1990,8 +1999,9 @@ private int getTableIndex(Table table, PathJoins pj, boolean create) {\n         if (pj != null && pj.path() != null)\n             key = new Key(pj.path().toString(), key);\n \n-        if (_ctx != null)\n+        if (_ctx != null && (_parent != null || _subsels != null || _hasSub)) {\n             i = findAliasForQuery(table, pj, key, create);\n+        }\n \n         if (i != null)\n             return i.intValue();\n@@ -3111,9 +3121,10 @@ public Object get(int i) {\n                         alias = alias + _dict.getStringVal;\n                         \n                     String as = null;\n-                    if (inner)\n-                        as = ((String) alias).replace('.', '_');\n-                    else if (_selectAs != null)\n+                    if (inner) {\n+                        if (alias instanceof String)\n+                            as = ((String) alias).replace('.', '_');\n+                    } else if (_selectAs != null)\n                         as = (String) _selectAs.get(id);\n                     else if (id instanceof Value)\n                         as = ((Value) id).getAlias();"},{"sha":"70fa2dd8a03b6936677f7cdc8170cdd2fcae4b03","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -30,4 +30,8 @@ invalid-unbound-var: Invalid unbound variable \"{0}\" in query.\n no-order-column: Field \"{0}\" does not have order column defined\".\n not-collection-parm: Invalid input parameter \"{0}\", a collection-valued \\\n     input parameter is expected.\n-empty-collection-parm: Input parameter \"{0}\" is empty.\n\\ No newline at end of file\n+empty-collection-parm: Input parameter \"{0}\" is empty.\n+count-distinct-multi-col-only: Count distinct compound primary key is not \\\n+    supported when there are other projection items.\n+count-distinct-multi-col-subselect-unsupported: Count distinct multiple columns \\\n+\tin the subselect is not supported.\n\\ No newline at end of file"},{"sha":"5ba876d536d2b845cf75c4c1fe6cec89bc4f3822","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -77,7 +77,7 @@ no-seq-sql: Error instantiating named sequence \"{0}\": Your database dictionary \\\n \tdoes not support native sequences.  To tell the dictionary how to select \\\n \tsequence values, use:\\n\\\n \topenjpa.jdbc.DBDictionary: NextSequenceQuery=\"SELECT NEXT VALUE \\\n-    FOR '{0}\"\\n\\\n+    FOR \"{0}\"\\n\\\n \tWhere the above string is replaced with the proper SQL for your database.\n invalid-seq-sql: No rows returned for sql \"{0}\".  Check your configuration.\n insert-seq: Inserting row for this mapping into sequence table.\n@@ -121,7 +121,7 @@ prepared-query-cached: Query \"{0}\" is cached.\"\n prepared-query-not-cachable: Query \"{0}\" is not fit for caching.\n prepared-query-invalidate: Query \"{0}\" is invalidated and removed from cache.\n prepared-query-uncache: Query \"{0}\" is removed from cache {1}.\n-prepared-query-remove-pattern: Removing exclusion pattern \"{0}\" caused \\ \n+prepared-query-remove-pattern: Removing exclusion pattern \"{0}\" caused \\\n \tquery to be cacheable again.\n uparam-mismatch: Supplied user parameters \"{1}\" do not match expected \\\n \tparameters \"{0}\" for the prepared query \"{2}\". \n@@ -135,10 +135,6 @@ uparam-pc-key: Class \"{0}\" uses {1} primary key columns but corresponding \\\n \tpositions {2} in the parameter list of the prepared query is not compatible.\n uparam-missing: Parameter {0} in SQL Query \"{1}\" is not given a value. The \\\n \tparameters given is \"{2}\".   \n-finder-cached: Cached finder for \"{0}\" SQL: \"{1}\"\n-finder-not-cachable: Finder for \"{0}\" is not cachable.\n-finder-add-pattern: Exclusion pattern \"{0}\" for finder query has invalidated \\\n-\t{1} existing entries \"{2}\"\n optimistic-violation-lock: An optimistic lock violation was detected when \\\n     locking object instance.\n sql-warning: The statement resulted in SQL warning: {0}"},{"sha":"59c7316143e2352328b4308782d85c999e50d6a5","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -137,3 +137,4 @@ unmapped-datastore-value: Instances of type \"{0}\" are not valid query \\\n multi-column-version-unsupported:You have specified more than one column for \\\n \tversion data, but the \"{1}\" version strategy does not support multi-column \\\n \tversioning.\n+not-enum-field: Field \"{0}\" is expected to be a enum but actually is of type \"{1}\".\n\\ No newline at end of file"},{"sha":"cae2617c9ac109bc113fae675a7de67776d75f92","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -101,12 +101,12 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.H2Dictionary\">\n-\t\t<lock></lock>\n-\t\t<referential-integrity>22003,22012,22025,23000,23001</referential-integrity>\n-\t\t<object-exists></object-exists>\n-\t\t<object-not-found></object-not-found>\n+\t\t<lock>HYT00</lock>\n+\t\t<referential-integrity>22003,22012,22025,23000,23002,23003</referential-integrity>\n+\t\t<object-exists>23001</object-exists>\n+\t\t<object-not-found>02000</object-not-found>\n \t\t<optimistic></optimistic>\n-\t\t<query></query>\n+\t\t<query>90031</query>\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.HSQLDictionary\">"},{"sha":"46f54bc22f25e3b4ab58c2893324d1124dec2f6a","filename":"openjpa-kernel/pom.xml","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -75,7 +75,7 @@\n                         <phase>generate-sources</phase>\n                         <configuration>\n                             <buildNodeFiles>false</buildNodeFiles>\n-                            <jdkVersion>1.5</jdkVersion>\n+                            <jdkVersion>1.6</jdkVersion>\n                         </configuration>\n                         <goals>\n                             <goal>jjtree-javacc</goal>\n@@ -125,6 +125,15 @@\n                         </manifestEntries>\n                     </archive>\n                 </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n             </plugin>\n         </plugins>\n     </build>"},{"sha":"b5af37e7c89672cd70f7dd0cb7a72dd778da44f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":28,"deletions":8,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.openjpa.conf;\n \n-import java.net.URL;\n import java.util.Collection;\n import java.util.Map;\n \n+import org.apache.openjpa.datacache.CacheDistributionPolicy;\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n import org.apache.openjpa.datacache.DataCacheMode;\n@@ -1802,20 +1802,40 @@\n     public String getDataCacheMode();\n     \n     /**\n-     * Set the persistent unit root url.\n+     * Gets the policy object that determines distribution of cached instances\n+     * across named partitions of L2 data cache.\n      * \n-     * @see PersistenceUnitInfo#getPersistenceUnitRootUrl()\n+     * @return an implementation of {@link CacheDistributionPolicy}.\n+     * @since 2.0.0\n+     */\n+    public CacheDistributionPolicy getCacheDistributionPolicyInstance();\n+    \n+    /**\n+     * Sets the policy object that determines distribution of cached instances\n+     * across named partitions of L2 data cache.\n      * \n-     * @param the persistent unit root url\n+     * @param policy a non-null implementation of {@link CacheDistributionPolicy}.\n      * @since 2.0.0\n      */\n-    public void setPersistenceUnitRootUrl(URL url);\n+    public void setCacheDistributionPolicyInstance(CacheDistributionPolicy policy);\n     \n     /**\n-     * Return the persistent unit rool URL\n-     * @return URL\n+     * Gets the plug-in string that described the policy to distribute cached instances\n+     * across named partitions of L2 data cache.\n+     * \n+     * @return a plug-in string for {@link CacheDistributionPolicy}.\n      * @since 2.0.0\n      */\n-    public URL getPersistenceUnitRootUrl();\n+    public String getCacheDistributionPolicy();\n+    \n+    /**\n+     * Sets the plug-in string that describes the policy to distribute cached instances\n+     * across named partitions of L2 data cache.\n+     * \n+     * @param a plug-in string for {@link CacheDistributionPolicy}.\n+     * @since 2.0.0\n+     */\n+    public void setCacheDistributionPolicy(String policyPlugin);\n+\n }\n "},{"sha":"db1ea81c5ecde84716325926080d784270d88ed6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":42,"deletions":8,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.openjpa.conf;\n \n-import java.net.URL;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.datacache.CacheDistributionPolicy;\n import org.apache.openjpa.datacache.ConcurrentDataCache;\n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n@@ -94,6 +94,7 @@\n     public BrokerValue brokerPlugin;\n     public ObjectValue dataCachePlugin;\n     public ObjectValue dataCacheManagerPlugin;\n+    public ObjectValue cacheDistributionPolicyPlugin;\n     public IntValue dataCacheTimeout;\n     public ObjectValue queryCachePlugin;\n     public BooleanValue dynamicDataStructs;\n@@ -178,7 +179,7 @@\n     private Collection<String> supportedOptions = new HashSet<String>(33);\n     private final StoreFacadeTypeRegistry _storeFacadeRegistry = new StoreFacadeTypeRegistry();\n     private BrokerFactoryEventManager _brokerFactoryEventManager = new BrokerFactoryEventManager(this);\n-    private URL _puRootUrl;    \n+    private Map<String, Object> _peMap; //contains persistence environment-specific info    \n \n     /**\n      * Default constructor. Attempts to load global properties.\n@@ -230,6 +231,15 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dataCacheManagerPlugin.setString(aliases[0]);\n         dataCacheManagerPlugin.setInstantiatingGetter(\"getDataCacheManager\");\n \n+        cacheDistributionPolicyPlugin = addPlugin(\"CacheDistributionPolicy\", true);\n+        aliases = new String[] {\n+                \"default\",    \"org.apache.openjpa.datacache.DefaultCacheDistributionPolicy\",\n+                \"type-based\", \"org.apache.openjpa.datacache.TypeBasedCacheDistributionPolicy\"};\n+        cacheDistributionPolicyPlugin.setAliases(aliases);\n+        cacheDistributionPolicyPlugin.setDefault(aliases[0]);\n+        cacheDistributionPolicyPlugin.setString(aliases[0]);\n+        cacheDistributionPolicyPlugin.setInstantiatingGetter(\"getCacheDistributionPolicy\");\n+        \n         dataCachePlugin = addPlugin(\"DataCache\", false);\n         aliases = new String[] { \n             \"false\", null, \n@@ -1614,6 +1624,9 @@ public String getQuerySQLCache() {\n     }\n     \n     public PreparedQueryCache getQuerySQLCacheInstance() {\n+        if (preparedQueryCachePlugin == null)\n+            return null;\n+        \n         if (preparedQueryCachePlugin.get() == null) {\n             preparedQueryCachePlugin.instantiate(PreparedQueryCache.class,\n                     this);\n@@ -1696,13 +1709,34 @@ public String getDataCacheMode() {\n         return dataCacheMode.getString();\n     }\n     \n-    public void setPersistenceUnitRootUrl(URL url) {\n-        this._puRootUrl = url;\n+\n+    public String getCacheDistributionPolicy() {\n+        return cacheDistributionPolicyPlugin.getString();\n     }\n-    \n-    public URL getPersistenceUnitRootUrl() {\n-        return _puRootUrl;\n+\n+    public CacheDistributionPolicy getCacheDistributionPolicyInstance() {\n+        CacheDistributionPolicy policy = (CacheDistributionPolicy) cacheDistributionPolicyPlugin.get();\n+        if (policy == null) {\n+            policy =  (CacheDistributionPolicy) \n+                cacheDistributionPolicyPlugin.instantiate(CacheDistributionPolicy.class, this);\n+        }\n+        return policy;\n+    }\n+\n+    public void setCacheDistributionPolicy(String policyPlugin) {\n+        cacheDistributionPolicyPlugin.setString(policyPlugin);\n+    }\n+\n+    public void setCacheDistributionPolicyInstance(CacheDistributionPolicy policy) {\n+        cacheDistributionPolicyPlugin.set(policy);\n+    }\n+\n+    public void setPersistenceEnvironment(Map<String, Object> peMap) {\n+        this._peMap = peMap;\n+    }\n+\n+    public Map<String, Object> getPersistenceEnvironment() {\n+        return _peMap;\n     }\n-    \n }\n "},{"sha":"9eab145edc70f2d3495e66b2bde9cc12133ecbc6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -19,12 +19,10 @@\n package org.apache.openjpa.datacache;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -40,8 +38,6 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n \n-import serp.util.Strings;\n-\n /**\n  * Abstract {@link DataCache} implementation that provides various\n  * statistics, logging, and timeout functionality common across cache\n@@ -82,6 +78,14 @@ public String getName() {\n     public void setName(String name) {\n         _name = name;\n     }\n+    public void setEnableStatistics(boolean enable){\n+        if(enable == true){\n+            stats.enable();\n+        }\n+    }\n+    public void getEnableStatistics(){\n+        stats.isEnabled();\n+    }\n \n     public String getEvictionSchedule() {\n         return _schedule;\n@@ -131,7 +135,9 @@ public void commit(Collection<DataCachePCData> additions, Collection<DataCachePC\n \n     public boolean contains(Object key) {\n         DataCachePCData o = getInternal(key);\n-        stats.newGet(o == null ? null : o.getType(), o != null);\n+        if (stats.isEnabled()) {\n+            stats.newGet(o == null ? null : o.getType(), o != null);\n+        }\n         if (o != null && o.isTimedOut()) {\n             o = null;\n             removeInternal(key);\n@@ -167,7 +173,9 @@ public DataCachePCData get(Object key) {\n             else\n                 log.trace(s_loc.get(\"cache-hit\", key));\n         }\n-        stats.newGet((o == null) ? null : o.getType(), o != null);\n+        if (stats.isEnabled()) {\n+            stats.newGet((o == null) ? null : o.getType(), o != null);\n+        }\n         return o;\n     }\n \n@@ -183,7 +191,9 @@ public DataCachePCData get(Object key) {\n     }\n \n     public DataCachePCData put(DataCachePCData data) {\n-        stats.newPut(data.getType());\n+        if (stats.isEnabled()) {\n+            stats.newPut(data.getType());\n+        }\n         DataCachePCData o = putInternal(data.getId(), data);\n         if (log.isTraceEnabled())\n             log.trace(s_loc.get(\"cache-put\", data.getId()));\n@@ -192,7 +202,9 @@ public DataCachePCData put(DataCachePCData data) {\n \n     public void update(DataCachePCData data) {\n         if (recacheUpdates()) {\n-            stats.newPut(data.getType());\n+            if (stats.isEnabled()) {\n+                stats.newPut(data.getType());\n+            }\n             putInternal(data.getId(), data);\n         }\n     }\n@@ -381,7 +393,9 @@ protected abstract DataCachePCData putInternal(Object oid,\n      */\n     protected void putAllInternal(Collection<DataCachePCData> pcs) {\n         for (DataCachePCData pc : pcs) {\n-            stats.newPut(pc.getType());\n+            if (stats.isEnabled()) {\n+                stats.newPut(pc.getType());\n+            }\n             putInternal(pc.getId(), pc);\n         }\n     }"},{"sha":"0f722e2c7c1b1518dbf3ab80630a4ecb64d606ad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -19,38 +19,42 @@\n package org.apache.openjpa.datacache;\n \n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.lib.conf.Configurable;\n \n /**\n- * A policy determines the name of the cache where a given entity state will be cached.\n+ * A policy determines whether a given entity should be cached and if true, in which named partition of the\n+ * cache.\n+ * <br>\n+ * This policy is activated for each instance if and only if the cache settings specified in metadata \n+ * such as JPA specification defined {@link Cacheable @Cacheable} annotation or OpenJPA specific\n+ * {@link org.apache.openjpa.persistence.DataCache @DataCache} annotation or configuration property \n+ * such as <code>javax.persistence.sharedCache.mode</code> determined the type of the instance being cachable.\n+ * <br> \n+ * For example, a specific policy will never be active for when <code>javax.persistence.sharedCache.mode</code> \n+ * is set to <code>NONE</code>. \n+ * <br>\n+ * Distribution Policies are configurable. So a specific policy can be configured as\n+ * <pre>\n+ *  &lt;property name=\"openjpa.CacheDistributionPolicy\" value=\"com.acme.FooPolicy(param1='xyz',param2=true)\"/&gt;\n+ * </pre>\n+ * where <code>com.acme.FooPolicy</code> is an implementation of this interface and defines bean style setter and\n+ * getter methods for String property <code>param1</code> and boolean property <code>param2</code>. \n  * \n  * @author Pinaki Poddar\n  * \n  * @since 2.0.0\n  *\n  */\n-public interface CacheDistributionPolicy {\n+public interface CacheDistributionPolicy extends Configurable {\n     /**\n      * Selects the name of the cache where the given managed proxy object state be cached.\n      * \n-     * @param sm the managed proxy object to be cached\n-     * @param context the context of invocation. No specific semantics is \n-     * attributed currently. Can be null.\n+     * @param sm the managed proxy object to be cached. The actual managed instance can be accessed from the proxy\n+     * instance simply as <code>sm.getManagedInstance()</code>.\n+     * \n+     * @param context the context of invocation. No specific semantics is attributed currently. Can be null.\n      *  \n-     * @return name of the cache or null if the managed instance need not be cached.\n+     * @return name of the cache or null, implying that that the instance should not be cached.\n      */\n     String selectCache(OpenJPAStateManager sm, Object context);\n-    \n-    /**\n-     * A default implementation that selects the cache by the type of the given\n-     * managed instance.\n-     * \n-     * @see ClassMetaData#getDataCacheName()\n-     *\n-     */\n-    public static class Default implements CacheDistributionPolicy {\n-        public String selectCache(OpenJPAStateManager sm, Object context) {\n-            return sm.getMetaData().getDataCacheName();\n-        }\n-    }\n }"},{"sha":"bb4d9ce26b96e05cfa7d5ad0613f8bd313038225","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -118,6 +118,11 @@\n \t */\n \tpublic void reset();\n \t\n+\t/**\n+\t * Returns whether or not statistics will be collected.\n+\t */\n+\tpublic boolean isEnabled();\n+\t\n \t/**\n \t * A default implementation.\n \t *\n@@ -129,7 +134,8 @@\n         private Map<Class, long[]> astats = new HashMap<Class, long[]>();\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = new Date();\n-\n+\t\tprivate boolean enabled = false;\n+\t\t\n \t\tprivate static final int READ  = 0;\n \t\tprivate static final int HIT   = 1;\n \t\tprivate static final int WRITE = 2;\n@@ -201,6 +207,15 @@ public void reset() {\n \t\t\tsince = new Date();\n \t\t}\n \n+\t\tpublic boolean isEnabled() {\n+\t\t    return enabled;\n+\t\t}\n+\t\tvoid enable(){\n+\t\t    enabled = true;\n+\t\t}\n+\t      void disable() {\n+            enabled = false;\n+        }\n \t\tvoid newGet(Class cls, boolean hit) {\n \t\t\tcls = (cls == null) ? Object.class : cls;\n \t\t\taddSample(cls, READ);"},{"sha":"679cf1446b13ccf648e5e517d3f924b5a109a544","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -20,12 +20,16 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.ObjectValue;\n \n /**\n- * Manages the system's data and query caches. You can\n- * retrieve the data cache manager from the {@link OpenJPAConfiguration}.\n+ * Manages the system's data and query caches. You can retrieve the data cache manager from the \n+ * {@link OpenJPAConfiguration#getDataCacheManagerInstance()}.\n  * <br>\n+ * Manages zero or more individual {@link DataCache caches} or partitions. Each individual partition\n+ * is identified by a string-based identifier.\n+ *  \n  * Decides eligibility to cache for managed types.\n  * \n  *\n@@ -95,22 +99,6 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\n      */\n     public CacheDistributionPolicy getDistributionPolicy();\n     \n-    /**\n-     * Set the types that are explicitly excluded from being cached.\n-     * \n-     * @param typeNames semicolon separated fully qualified class names.\n-     * @since 2.0.0\n-     */\n-    public void setExcludedTypes(String typeNames);\n-    \n-    /**\n-     * Set the types that are explicitly included to be cached.\n-     * \n-     * @param typeNames semicolon separated fully qualified class names.\n-     * @since 2.0.0\n-     */\n-    public void setIncludedTypes(String typeNames);\n-\n     /**\n      * Close all caches.\n      */"},{"sha":"b9dacad8401b4c932b1ef02b49835c2f5d6f3182","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":6,"deletions":72,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PCDataGenerator;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ObjectValue;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -51,9 +52,7 @@\n     private QueryCache _queryCache = null;\n     private DataCachePCDataGenerator _pcGenerator = null;\n     private DataCacheScheduler _scheduler = null;\n-    private CacheDistributionPolicy _policy = new CacheDistributionPolicy.Default();\n-    private Set<String> _excludedTypes;\n-    private Set<String> _includedTypes;\n+    private CacheDistributionPolicy _policy = new DefaultCacheDistributionPolicy();\n \n     public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectValue queryCache) {\n         _conf = conf;\n@@ -65,6 +64,8 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectV\n         if (conf.getDynamicDataStructs())\n             _pcGenerator = new DataCachePCDataGenerator(conf);\n         _scheduler = new DataCacheScheduler(conf);\n+        \n+        _policy = conf.getCacheDistributionPolicyInstance();\n \n         _cache.initialize(this);\n         _queryCache = (QueryCache) queryCache.instantiate(QueryCache.class, conf);\n@@ -132,23 +133,13 @@ public CacheDistributionPolicy getDistributionPolicy() {\n         return _policy;\n     }\n     \n-    /**\n-     * Sets the instance-based cache distribution policy. \n-     */\n-    public void setDistributionPolicy(CacheDistributionPolicy policy) {\n-        _policy = policy;\n-    }\n-    \n     /**\n      * Affirms if the given type is eligible for cache.\n      */\n     public boolean isCachable(ClassMetaData meta) {\n-        Boolean isCachable = isCacheableByPlugin(meta);\n+        Boolean isCachable = isCacheableByMode(meta);\n         if (isCachable == null) {\n-            isCachable = isCacheableByMode(meta);\n-            if (isCachable == null) {\n-                isCachable = isCacheableByType(meta);\n-            }\n+           isCachable = isCacheableByType(meta);\n         }\n         return isCachable;\n     }\n@@ -180,61 +171,4 @@ private Boolean isCacheableByMode(ClassMetaData meta) {\n     private Boolean isCacheableByType(ClassMetaData meta) {\n         return meta.getDataCacheName() != null;\n     }\n-    \n-    /**\n-     * Is the given type cacheable by excludeTypes/includeTypes plug-in properties.\n-     *  \n-     * @param meta the given type\n-     * @return TRUE or FALSE if the type has appeared in the plug-in property.\n-     * null otherwise.\n-     */\n-    private Boolean isCacheableByPlugin(ClassMetaData meta) {\n-        String className = meta.getDescribedType().getName();\n-        if (_excludedTypes != null && _excludedTypes.contains(className)) {  \n-            return Boolean.FALSE;\n-        } \n-        if (_includedTypes != null && _includedTypes.contains(className)) {\n-            return Boolean.TRUE;\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Gets the excluded types, if configured.\n-     */\n-    public Set<String> getExcludedTypes() {\n-        return _excludedTypes;\n-    }\n-    \n-    /**\n-     * Sets excluded types from a semicolon separated list of type names.\n-     */\n-    public void setExcludedTypes(String types) {\n-        _excludedTypes = parseNames(types);\n-    }\n-\n-    /**\n-     * Gets the included types, if configured.\n-     */\n-    public Set<String> getIncludedTypes() {\n-        return _excludedTypes;\n-    }\n-    \n-    /**\n-     * Sets included types from a semicolon separated list of type names.\n-     */\n-    public void setIncludedTypes(String types) {\n-        _includedTypes = parseNames(types);\n-    }\n-    \n-    private Set<String> parseNames(String types) {\n-        if (StringUtils.isEmpty(types))\n-            return Collections.emptySet();\n-        String[] names = Strings.split(types, \";\", 0);\n-        Set<String> set = new HashSet<String>();\n-        set.addAll(Arrays.asList(names));\n-        \n-        return  Collections.unmodifiableSet(set);\n-    }\n-\n }"},{"sha":"c8253b428b3922867e7ec1644b13c6315b5e1594","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,45 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.datacache;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * A default implementation that selects the cache by the type of the given managed instance.\n+ * The name of the cache is determined by {@link ClassMetaData#getDataCacheName() name as specified} by\n+ * the metadata. \n+ * \n+ * @see ClassMetaData#getDataCacheName()\n+ *\n+ */\n+public class DefaultCacheDistributionPolicy implements CacheDistributionPolicy {\n+    public String selectCache(OpenJPAStateManager sm, Object context) {\n+        return sm.getMetaData().getDataCacheName();\n+        \n+    }\n+\n+    public void endConfiguration() {\n+    }\n+\n+    public void setConfiguration(Configuration conf) {\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+}"},{"sha":"e797a815339ee09a0071ea26db92823694fb86dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,104 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.datacache;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+import serp.util.Strings;\n+\n+/**\n+ * A cache distribution policy based on the type of the managed objects.\n+ * <br>\n+ * The policy is configured by specifying list of included or excluded types.\n+ * The lists are specified as fully-qualified persistence class names separated by semicolon.\n+ * <br>\n+ * The policy checks for the given instance by its type whether the class name appears in\n+ * exclusion or inclusion lists. If the class name appears in exclusion list then the\n+ * instance is not cached. Otherwise, if an inclusion list exists and the class name appears in inclusion list \n+ * or @DataCache annotation is specified on the class meta data, then the instance is cached.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TypeBasedCacheDistributionPolicy extends DefaultCacheDistributionPolicy \n+    implements CacheDistributionPolicy {\n+    private Set<String> _excludedTypes;\n+    private Set<String> _includedTypes;\n+    \n+    \n+    /**\n+     * Gets the excluded types, if configured.\n+     */\n+    public Set<String> getExcludedTypes() {\n+        return _excludedTypes;\n+    }\n+    \n+    /**\n+     * Sets excluded types from a semicolon separated list of type names.\n+     */\n+    public void setExcludedTypes(String types) {\n+        _excludedTypes = parseNames(types);\n+    }\n+\n+    /**\n+     * Gets the included types, if configured.\n+     */\n+    public Set<String> getIncludedTypes() {\n+        return _includedTypes;\n+    }\n+    \n+    /**\n+     * Sets included types from a semicolon separated list of type names.\n+     */\n+    public void setIncludedTypes(String types) {\n+        _includedTypes = parseNames(types);\n+    }\n+    \n+    private Set<String> parseNames(String types) {\n+        if (StringUtils.isEmpty(types))\n+            return Collections.emptySet();\n+        String[] names = Strings.split(types, \";\", 0);\n+        Set<String> set = new HashSet<String>();\n+        set.addAll(Arrays.asList(names));\n+        \n+        return  Collections.unmodifiableSet(set);\n+    }\n+\n+    @Override\n+    public String selectCache(OpenJPAStateManager sm, Object context) {\n+        ClassMetaData meta = sm.getMetaData();\n+        String className = meta.getDescribedType().getName();\n+        if (_excludedTypes != null && _excludedTypes.contains(className)) {  \n+            return null;\n+        } \n+        if (_includedTypes != null && !_includedTypes.isEmpty()) {\n+            if (_includedTypes.contains(className))\n+                return meta.getDataCacheName();\n+            return (meta.getDataCacheEnabled()) ? meta.getDataCacheName() : null;\n+                \n+        } else {\n+            return super.selectCache(sm, context);\n+        }\n+    }\n+}"},{"sha":"5173e066e64314aa76703d9b452d0b3d394a82b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -38,6 +38,7 @@\n  *  Built in support is provided for the following Application Servers:\n  * <ul>\n  * <li>Bluestone</li>\n+ * <li>GlassFish</li>\n  * <li>HP Application Server</li>\n  * <li>JBoss</li>\n  * <li>JRun</li>\n@@ -60,8 +61,8 @@\n         \"java:/DefaultDomain/TransactionManager\", // jrun too\n         \"java:comp/pm/TransactionManager\", // orion & oracle\n         \"java:comp/TransactionManager\", // generic\n-        \"java:pm/TransactionManager\", // borland\n         \"java:appserver/TransactionManager\", // GlassFish\n+        \"java:pm/TransactionManager\", // borland\n     };\n     private static final String [] METHODS = new String[]{\n         \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp"},{"sha":"d5a2c092d79f21f49ff86decf3c4ad8ec9bfe7c1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -3714,7 +3714,8 @@ private void addSetMethod(int index, FieldMetaData fmd)\n             v.setTransient(true);\n             loadManagedInstance(code, true);\n             code.constant().setValue(1);\n-            addSetManagedValueCode(code, v);   \n+            // pcVersionInit = true;\n+            putfield(code, null, v.getName(), v.getDeclaredType());   \n         }\n         code.vreturn();\n "},{"sha":"a241da26217cd50b5a5bfdd4966b2c0344c7378f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -233,7 +233,7 @@ private boolean hasCallbacks(Object source, ClassMetaData meta, int type) {\n      * Return true if any listeners are registered for the given source and\n      * event type.\n      */\n-    private synchronized boolean hasListeners(Object source,\n+    private boolean hasListeners(Object source,\n         ClassMetaData meta, int type) {\n         if (meta.getLifecycleMetaData().getIgnoreSystemListeners())\n             return false;"},{"sha":"a0ecab522c294313e6d0c2278b06561582736112","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":125,"deletions":130,"changes":255,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -38,8 +38,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.Stack;\n-import java.util.TreeSet;\n import java.util.concurrent.locks.ReentrantLock;\n \n import javax.transaction.Status;\n@@ -175,28 +173,28 @@\n \n     // user state\n     private Synchronization _sync = null;\n-    private Map _userObjects = null;\n+    private Map<Object, Object> _userObjects = null;\n \n     // managed object caches\n     private ManagedCache _cache = null;\n     private TransactionalCache _transCache = null;\n-    private Set _transAdditions = null;\n-    private Set _derefCache = null;\n-    private Set _derefAdditions = null;\n+    private Set<StateManagerImpl> _transAdditions = null;\n+    private Set<StateManagerImpl> _derefCache = null;\n+    private Set<StateManagerImpl> _derefAdditions = null;\n \n     // these are used for method-internal state only\n-    private transient Map _loading = null;\n-    private transient Set _operating = null;\n+    private transient Map<Object, StateManagerImpl> _loading = null;\n+    private transient Set<Object> _operating = null;\n \n-    private Set _persistedClss = null;\n-    private Set _updatedClss = null;\n-    private Set _deletedClss = null;\n-    private Set _pending = null;\n+    private Set<Class<?>> _persistedClss = null;\n+    private Set<Class<?>> _updatedClss = null;\n+    private Set<Class<?>> _deletedClss = null;\n+    private Set<StateManagerImpl> _pending = null;\n     private int findAllDepth = 0;\n \n     // track instances that become transactional after the first savepoint\n     // (the first uses the transactional cache)\n-    private Set _savepointCache = null;\n+    private Set<StateManagerImpl> _savepointCache = null;\n     private LinkedMap _savepoints = null;\n     private transient SavepointManager _spm = null;\n \n@@ -249,7 +247,7 @@\n \n     private transient boolean _initializeWasInvoked = false;\n     private transient boolean _fromWriteBehindCallback = false;\n-    private LinkedList _fcs;\n+    private LinkedList<FetchConfiguration> _fcs;\n     \n     // Set of supported property keys. The keys in this set correspond to bean-style setter methods\n     // that can be set by reflection. The keys are not qualified by any prefix.\n@@ -372,7 +370,7 @@ private void initializeOperatingSet() {\n     /**\n      * Gets the unmodifiable set of instances being operated.\n      */\n-    protected Set getOperatingSet() {\n+    protected Set<Object> getOperatingSet() {\n     \treturn Collections.unmodifiableSet(_operating);\n     }\n \n@@ -390,7 +388,7 @@ public Object clone()\n      * Maps oids to state managers. By default, this creates a\n      * {@link ReferenceMap} with soft values.\n      */\n-    protected Map newManagedObjectCache() {\n+    protected Map<?,?> newManagedObjectCache() {\n         return new ReferenceHashMap(ReferenceMap.HARD, ReferenceMap.SOFT);\n     }\n \n@@ -432,7 +430,7 @@ public FetchConfiguration getFetchConfiguration() {\n \n     public FetchConfiguration pushFetchConfiguration() {\n         if (_fcs == null)\n-            _fcs = new LinkedList();\n+            _fcs = new LinkedList<FetchConfiguration>();\n         _fcs.add(_fc);\n         _fc = (FetchConfiguration) _fc.clone();\n         return _fc;\n@@ -442,7 +440,7 @@ public void popFetchConfiguration() {\n         if (_fcs == null || _fcs.isEmpty())\n             throw new UserException(\n                     _loc.get(\"fetch-configuration-stack-empty\"));\n-        _fc = (FetchConfiguration) _fcs.removeLast();\n+        _fc = _fcs.removeLast();\n     }\n \n     public int getConnectionRetainMode() {\n@@ -514,7 +512,7 @@ public void setNontransactionalRead(boolean val) {\n \n         // make sure the runtime supports it\n         if (val && !_conf.supportedOptions().contains\n-            (_conf.OPTION_NONTRANS_READ))\n+            (OpenJPAConfiguration.OPTION_NONTRANS_READ))\n             throw new UnsupportedException(_loc.get\n                 (\"nontrans-read-not-supported\"));\n \n@@ -544,7 +542,7 @@ public void setOptimistic(boolean val) {\n                 \"Optimistic\"));\n \n         // make sure the runtime supports it\n-        if (val && !_conf.supportedOptions().contains(_conf.OPTION_OPTIMISTIC))\n+        if (val && !_conf.supportedOptions().contains(OpenJPAConfiguration.OPTION_OPTIMISTIC))\n             throw new UnsupportedException(_loc.get\n                 (\"optimistic-not-supported\"));\n \n@@ -671,7 +669,7 @@ public Object putUserObject(Object key, Object val) {\n                 return (_userObjects == null) ? null : _userObjects.remove(key);\n \n             if (_userObjects == null)\n-                _userObjects = new HashMap();\n+                _userObjects = new HashMap<Object, Object>();\n             return _userObjects.put(key, val);\n         } finally {\n             endOperation();\n@@ -685,7 +683,7 @@ public Object putUserObject(Object key, Object val) {\n      * Optimistic flag. \n      */\n     public Map<String, Object> getProperties() {\n-        Map props = _conf.toProperties(true);\n+        Map<String, Object> props = _conf.toProperties(true);\n         for (String s : _supportedPropertyNames) {\n             props.put(\"openjpa.\" + s, Reflection.getValue(this, s, true));\n         }\n@@ -1034,7 +1032,7 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         // array, so that we make sure not to create multiple sms for equivalent\n         // oids if the user has duplicates in the given array\n         if (_loading == null)\n-            _loading = new HashMap((int) (oids.size() * 1.33 + 1));\n+            _loading = new HashMap<Object, StateManagerImpl>((int) (oids.size() * 1.33 + 1));\n \n         if (call == null)\n             call = this;\n@@ -1046,13 +1044,13 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n             assertNontransactionalRead();\n \n             // collection of state managers to pass to store manager\n-            List load = null;\n+            List<OpenJPAStateManager> load = null;\n             StateManagerImpl sm;\n             boolean initialized;\n             boolean transState = useTransactionalState(fetch);\n             Object obj, oid;\n             int idx = 0;\n-            for (Iterator itr = oids.iterator(); itr.hasNext(); idx++) {\n+            for (Iterator<?> itr = oids.iterator(); itr.hasNext(); idx++) {\n                 // if we've already seen this oid, skip repeats\n                 obj = itr.next();\n                 oid = call.processArgument(obj);\n@@ -1073,7 +1071,7 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n                     if (initialized && !sm.isTransactional() && transState)\n                         sm.transactional();\n                     if (load == null)\n-                        load = new ArrayList(oids.size() - idx);\n+                        load = new ArrayList<OpenJPAStateManager>(oids.size() - idx);\n                     load.add(sm);\n                 } else if (!initialized)\n                     sm.initialize(sm.getMetaData().getDescribedType(),\n@@ -1085,14 +1083,14 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n             if (load != null) {\n                 PCState state = (transState) ? PCState.PCLEAN\n                     : PCState.PNONTRANS;\n-                Collection failed = _store.loadAll(load, state,\n+                Collection<Object> failed = _store.loadAll(load, state,\n                     StoreManager.FORCE_LOAD_NONE, fetch, edata);\n \n                 // set failed instances to null\n                 if (failed != null && !failed.isEmpty()) {\n                     if ((flags & OID_NOVALIDATE) != 0)\n                         throw newObjectNotFoundException(failed);\n-                    for (Iterator itr = failed.iterator(); itr.hasNext();)\n+                    for (Iterator<Object> itr = failed.iterator(); itr.hasNext();)\n                         _loading.put(itr.next(), null);\n                 }\n             }\n@@ -1103,9 +1101,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n             boolean active = (_flags & FLAG_ACTIVE) != 0;\n             int level = fetch.getReadLockLevel();\n             idx = 0;\n-            for (Iterator itr = oids.iterator(); itr.hasNext(); idx++) {\n+            for (Iterator<?> itr = oids.iterator(); itr.hasNext(); idx++) {\n                 oid = itr.next();\n-                sm = (StateManagerImpl) _loading.get(oid);\n+                sm = _loading.get(oid);\n                 if (sm != null && requiresLoad(sm, true, fetch, edata, flags)) {\n                     try {\n                         sm.load(fetch, StateManagerImpl.LOAD_FGS,\n@@ -1185,7 +1183,7 @@ public Object findCached(Object oid, FindCallbacks call) {\n         }\n     }\n \n-    public Class getObjectIdType(Class cls) {\n+    public Class<?> getObjectIdType(Class<?> cls) {\n         if (cls == null)\n             return null;\n \n@@ -1209,7 +1207,7 @@ public Class getObjectIdType(Class cls) {\n         }\n     }\n \n-    public Object newObjectId(Class cls, Object val) {\n+    public Object newObjectId(Class<?> cls, Object val) {\n         if (val == null)\n             return null;\n \n@@ -1269,13 +1267,13 @@ private StateManagerImpl newStateManagerImpl(Object oid, boolean copy) {\n         // see if we're in the process of loading this oid in a loadAll call\n         StateManagerImpl sm;\n         if (_loading != null) {\n-            sm = (StateManagerImpl) _loading.get(oid);\n+            sm = _loading.get(oid);\n             if (sm != null && sm.getPersistenceCapable() == null)\n                 return sm;\n         }\n \n         // find metadata for the oid\n-        Class pcType = _store.getManagedType(oid);\n+        Class<?> pcType = _store.getManagedType(oid);\n         MetaDataRepository repos = _conf.getMetaDataRepositoryInstance();\n         ClassMetaData meta;\n         if (pcType != null)\n@@ -1355,7 +1353,7 @@ private void beginInternal() {\n \n         if (_pending != null) {\n             StateManagerImpl sm;\n-            for (Iterator it = _pending.iterator(); it.hasNext();) {\n+            for (Iterator<StateManagerImpl> it = _pending.iterator(); it.hasNext();) {\n                 sm = (StateManagerImpl) it.next();\n                 sm.transactional();\n                 if (sm.isDirty())\n@@ -1734,7 +1732,7 @@ public void rollbackToSavepoint(String savepoint) {\n                 // more info per state\n                 SavepointFieldManager fm;\n                 StateManagerImpl sm;\n-                for (Iterator itr = saved.iterator(); itr.hasNext();) {\n+                for (Iterator<?> itr = saved.iterator(); itr.hasNext();) {\n                     fm = (SavepointFieldManager) itr.next();\n                     sm = fm.getStateManager();\n                     sm.rollbackToSavepoint(fm);\n@@ -1744,7 +1742,7 @@ public void rollbackToSavepoint(String savepoint) {\n                     else\n                         newTransCache.addClean(sm);\n                 }\n-                for (Iterator itr = oldTransCache.iterator(); itr.hasNext();) {\n+                for (Iterator<?> itr = oldTransCache.iterator(); itr.hasNext();) {\n                     sm = (StateManagerImpl) itr.next();\n                     sm.rollback();\n                     removeFromTransaction(sm);\n@@ -1772,7 +1770,7 @@ public void flush() {\n                 return;\n \n             // make sure the runtime supports it\n-            if (!_conf.supportedOptions().contains(_conf.OPTION_INC_FLUSH))\n+            if (!_conf.supportedOptions().contains(OpenJPAConfiguration.OPTION_INC_FLUSH))\n                 throw new UnsupportedException(_loc.get\n                     (\"incremental-flush-not-supported\"));\n             if (_savepoints != null && !_savepoints.isEmpty()\n@@ -1820,7 +1818,7 @@ public void validateChanges() {\n             }\n \n             // make sure the runtime supports inc flush\n-            if (!_conf.supportedOptions().contains(_conf.OPTION_INC_FLUSH))\n+            if (!_conf.supportedOptions().contains(OpenJPAConfiguration.OPTION_INC_FLUSH))\n                 throw new UnsupportedException(_loc.get\n                     (\"incremental-flush-not-supported\"));\n \n@@ -2059,8 +2057,8 @@ protected void flush(int reason) {\n             // dependents\n             _flags |= FLAG_DEREFDELETING;\n             if (flush && _derefCache != null && !_derefCache.isEmpty()) {\n-                for (Iterator itr = _derefCache.iterator(); itr.hasNext();)\n-                    deleteDeref((StateManagerImpl) itr.next());\n+                for (Iterator<StateManagerImpl> itr = _derefCache.iterator(); itr.hasNext();)\n+                    deleteDeref(itr.next());\n                 flushAdditions(transactional, reason);\n             }\n \n@@ -2108,7 +2106,7 @@ protected void flush(int reason) {\n         }\n \n         // flush to store manager\n-        List exceps = null;\n+        List<Exception> exceps = null;\n         try {\n             if (flush && reason != FLUSH_LOGICAL) {\n                 _flags |= FLAG_STORE_FLUSHING;\n@@ -2242,13 +2240,12 @@ private int processArgument(int op, Object obj, OpenJPAStateManager sm,\n      * Throw the proper exception based on the given set of flush errors, or\n      * do nothing if no errors occurred.\n      */\n-    private OpenJPAException newFlushException(Collection exceps) {\n+    private OpenJPAException newFlushException(Collection<Exception> exceps) {\n         if (exceps == null || exceps.isEmpty())\n             return null;\n \n-        Throwable[] t = (Throwable[]) exceps.toArray\n-            (new Throwable[exceps.size()]);\n-        List failed = new ArrayList(t.length);\n+        Throwable[] t = exceps.toArray(new Throwable[exceps.size()]);\n+        List<Object> failed = new ArrayList<Object>(t.length);\n \n         // create fatal exception with nested exceptions for all the failed\n         // objects; if all OL exceptions, throw a top-level OL exception\n@@ -2281,7 +2278,7 @@ protected void endTransaction(int status) {\n         // if a data store transaction was in progress, do the\n         // appropriate transaction change\n         boolean rollback = status != Status.STATUS_COMMITTED;\n-        List exceps = null;\n+        List<Exception> exceps = null;\n \n         try {\n             exceps = add(exceps, endStoreManagerTransaction(rollback));\n@@ -2331,9 +2328,8 @@ protected void endTransaction(int status) {\n         // rely on rollback and commit calls below cause some instances might\n         // not be transactional\n         if (_derefCache != null && !_derefCache.isEmpty()) {\n-            for (Iterator itr = _derefCache.iterator(); itr.hasNext();)\n-                ((StateManagerImpl) itr.next()).setDereferencedDependent\n-                    (false, false);\n+            for (Iterator<StateManagerImpl> itr = _derefCache.iterator(); itr.hasNext();)\n+                itr.next().setDereferencedDependent(false, false);\n             _derefCache = null;\n         }\n \n@@ -2414,11 +2410,11 @@ public void persistAll(Collection objs, boolean explicit,\n             return;\n \n         beginOperation(true);\n-        List exceps = null;\n+        List<Exception> exceps = null;\n         try {\n             assertWriteOperation();\n \n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 try {\n                     persist(itr.next(), explicit, call);\n                 } catch (UserException ue) {\n@@ -2435,27 +2431,26 @@ public void persistAll(Collection objs, boolean explicit,\n      * If the given element is not null, add it to the given list,\n      * creating the list if necessary.\n      */\n-    private List add(List l, Object o) {\n+    private List<Exception> add(List<Exception> l, Exception o) {\n         if (o == null)\n             return l;\n         if (l == null)\n-            l = new LinkedList();\n+            l = new LinkedList<Exception>();\n         l.add(o);\n         return l;\n     }\n \n     /**\n      * Throw an exception wrapping the given nested exceptions.\n      */\n-    private void throwNestedExceptions(List exceps, boolean datastore) {\n+    private void throwNestedExceptions(List<Exception> exceps, boolean datastore) {\n         if (exceps == null || exceps.isEmpty())\n             return;\n         if (datastore && exceps.size() == 1)\n             throw (RuntimeException) exceps.get(0);\n \n         boolean fatal = false;\n-        Throwable[] t = (Throwable[]) exceps.toArray\n-            (new Throwable[exceps.size()]);\n+        Throwable[] t = exceps.toArray(new Throwable[exceps.size()]);\n         for (int i = 0; i < t.length; i++) {\n             if (t[i] instanceof OpenJPAException\n                 && ((OpenJPAException) t[i]).isFatal())\n@@ -2623,9 +2618,9 @@ public void deleteAll(Collection objs, OpCallbacks call) {\n         try {\n             assertWriteOperation();\n \n-            List exceps = null;\n+            List<Exception> exceps = null;\n             Object obj;\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 try {\n                     obj = itr.next();\n                     if (obj != null)\n@@ -2707,8 +2702,8 @@ private OpenJPAException newDetachedException(Object obj,\n     public void releaseAll(Collection objs, OpCallbacks call) {\n         beginOperation(false);\n         try {\n-            List exceps = null;\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            List<Exception> exceps = null;\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 try {\n                     release(itr.next(), call);\n                 } catch (UserException ue) {\n@@ -2777,7 +2772,7 @@ public OpenJPAStateManager embed(Object obj, Object id,\n \n             PersistenceCapable copy;\n             PCState state;\n-            Class type = meta.getDescribedType();\n+            Class<?> type = meta.getDescribedType();\n             if (obj != null) {\n                 // give copy and the original instance the same state manager\n                 // so that we can copy fields from one to the other\n@@ -2837,7 +2832,7 @@ OpenJPAStateManager copy(OpenJPAStateManager copy, PCState state) {\n         try {\n             assertOpen();\n             Object oid = copy.fetchObjectId();\n-            Class type = copy.getManagedInstance().getClass();\n+            Class<?> type = copy.getManagedInstance().getClass();\n             if (oid == null)\n                 throw new InternalException();\n             // cached instance?\n@@ -2867,7 +2862,7 @@ public void refreshAll(Collection objs, OpCallbacks call) {\n         try {\n             assertNontransactionalRead();\n \n-            for (Iterator itr = objs.iterator(); itr.hasNext();) \n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) \n                 gatherCascadeRefresh(itr.next(), call);\n             if (_operating.isEmpty())\n             \treturn;\n@@ -2928,13 +2923,13 @@ void gatherCascadeRefresh(Object obj, OpCallbacks call) {\n     protected void refreshInternal(Collection objs, OpCallbacks call) {\n     \tif (objs == null || objs.isEmpty())\n     \t\treturn;\n-        List exceps = null;\n+        List<Exception> exceps = null;\n         try {\n             // collect instances that need a refresh\n-            Collection load = null;\n+            Collection<OpenJPAStateManager> load = null;\n             StateManagerImpl sm;\n             Object obj;\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 obj = itr.next();\n                 if (obj == null)\n                     continue;\n@@ -2950,7 +2945,7 @@ protected void refreshInternal(Collection objs, OpCallbacks call) {\n                             throw newDetachedException(obj, \"refresh\");\n                         else if (sm.beforeRefresh(true)) {\n                         \tif (load == null)\n-                        \t\tload = new ArrayList(objs.size());\n+                        \t\tload = new ArrayList<OpenJPAStateManager>(objs.size());\n                             load.add(sm);\n                         }\n                         int level = _fc.getReadLockLevel();\n@@ -2967,14 +2962,14 @@ else if (sm.beforeRefresh(true)) {\n \n             // refresh all\n             if (load != null) {\n-                Collection failed = _store.loadAll(load, null,\n+                Collection<Object> failed = _store.loadAll(load, null,\n                     StoreManager.FORCE_LOAD_REFRESH, _fc, null);\n                 if (failed != null && !failed.isEmpty())\n                     exceps = add(exceps, newObjectNotFoundException(failed));\n \n                 // perform post-refresh transitions and make sure all fetch\n                 // group fields are loaded\n-                for (Iterator itr = load.iterator(); itr.hasNext();) {\n+                for (Iterator<OpenJPAStateManager> itr = load.iterator(); itr.hasNext();) {\n                     sm = (StateManagerImpl) itr.next();\n                     if (failed != null && failed.contains(sm.getId()))\n                         continue;\n@@ -2990,7 +2985,7 @@ else if (sm.beforeRefresh(true)) {\n             }\n \n             // now invoke postRefresh on all the instances\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 try {\n                     sm = getStateManagerImpl(itr.next(), true);\n                     if (sm != null && !sm.isDetached())\n@@ -3051,18 +3046,18 @@ public void retrieveAll(Collection objs, boolean dfgOnly,\n             return;\n         }\n \n-        List exceps = null;\n+        List<Exception> exceps = null;\n         beginOperation(true);\n         try {\n             assertOpen();\n             assertNontransactionalRead();\n \n             // collect all hollow instances for load\n             Object obj;\n-            Collection load = null;\n+            Collection<OpenJPAStateManager> load = null;\n             StateManagerImpl sm;\n-            Collection sms = new ArrayList(objs.size());\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            Collection<StateManagerImpl> sms = new ArrayList<StateManagerImpl>(objs.size());\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 obj = itr.next();\n                 if (obj == null)\n                     continue;\n@@ -3080,7 +3075,7 @@ public void retrieveAll(Collection objs, boolean dfgOnly,\n                             sms.add(sm);\n                             if (sm.getPCState() == PCState.HOLLOW) {\n                                 if (load == null)\n-                                    load = new ArrayList();\n+                                    load = new ArrayList<OpenJPAStateManager>();\n                                 load.add(sm);\n                             }\n                         }\n@@ -3093,18 +3088,18 @@ public void retrieveAll(Collection objs, boolean dfgOnly,\n             }\n \n             // load all hollow instances\n-            Collection failed = null;\n+            Collection<Object> failed = null;\n             if (load != null) {\n-                int mode = (dfgOnly) ? _store.FORCE_LOAD_DFG\n-                    : _store.FORCE_LOAD_ALL;\n+                int mode = (dfgOnly) ? StoreManager.FORCE_LOAD_DFG\n+                    : StoreManager.FORCE_LOAD_ALL;\n                 failed = _store.loadAll(load, null, mode, _fc, null);\n                 if (failed != null && !failed.isEmpty())\n                     exceps = add(exceps, newObjectNotFoundException(failed));\n             }\n \n             // retrieve all non-failed instances\n-            for (Iterator itr = sms.iterator(); itr.hasNext();) {\n-                sm = (StateManagerImpl) itr.next();\n+            for (Iterator<StateManagerImpl> itr = sms.iterator(); itr.hasNext();) {\n+                sm = itr.next();\n                 if (failed != null && failed.contains(sm.getId()))\n                     continue;\n \n@@ -3166,10 +3161,10 @@ public void evictAll(OpCallbacks call) {\n         beginOperation(false);\n         try {\n             // evict all PClean and PNonTrans objects\n-            Collection c = getManagedStates();\n+            Collection<StateManagerImpl> c = getManagedStates();\n             StateManagerImpl sm;\n-            for (Iterator itr = c.iterator(); itr.hasNext();) {\n-                sm = (StateManagerImpl) itr.next();\n+            for (Iterator<StateManagerImpl> itr = c.iterator(); itr.hasNext();) {\n+                sm = itr.next();\n                 if (sm.isPersistent() && !sm.isDirty())\n                     evict(sm.getManagedInstance(), call);\n             }\n@@ -3180,10 +3175,10 @@ public void evictAll(OpCallbacks call) {\n     }\n \n     public void evictAll(Collection objs, OpCallbacks call) {\n-        List exceps = null;\n+        List<Exception> exceps = null;\n         beginOperation(false);\n         try {\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 try {\n                     evict(itr.next(), call);\n                 } catch (UserException ue) {\n@@ -3203,11 +3198,11 @@ public void evictAll(Extent extent, OpCallbacks call) {\n         beginOperation(false);\n         try {\n             // evict all PClean and PNonTrans objects in extent\n-            Collection c = getManagedStates();\n+            Collection<StateManagerImpl> c = getManagedStates();\n             StateManagerImpl sm;\n-            Class cls;\n-            for (Iterator itr = c.iterator(); itr.hasNext();) {\n-                sm = (StateManagerImpl) itr.next();\n+            Class<?> cls;\n+            for (Iterator<StateManagerImpl> itr = c.iterator(); itr.hasNext();) {\n+                sm = itr.next();\n                 if (sm.isPersistent() && !sm.isDirty()) {\n                     cls = sm.getMetaData().getDescribedType();\n                     if (cls == extent.getElementType()\n@@ -3310,10 +3305,10 @@ public void detachAll(OpCallbacks call, boolean flush) {\n     }\n \n     private void detachAllInternal(OpCallbacks call) {\n-        Collection states = getManagedStates();\n+        Collection<StateManagerImpl> states = getManagedStates();\n         StateManagerImpl sm;\n-        for (Iterator itr = states.iterator(); itr.hasNext();) {\n-            sm = (StateManagerImpl) itr.next();\n+        for (Iterator<StateManagerImpl> itr = states.iterator(); itr.hasNext();) {\n+            sm = itr.next();\n             if (!sm.isPersistent())\n                 itr.remove();\n             else if (!sm.getMetaData().isDetachable()) {\n@@ -3393,8 +3388,8 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n     public void nontransactionalAll(Collection objs, OpCallbacks call) {\n         beginOperation(true);\n         try {\n-            List exceps = null;\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            List<Exception> exceps = null;\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 try {\n                     nontransactional(itr.next(), call);\n                 } catch (UserException ue) {\n@@ -3444,13 +3439,13 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n         try {\n             // collect all hollow instances for load, and make unmananged\n             // instances transient-transactional\n-            Collection load = null;\n+            Collection<OpenJPAStateManager> load = null;\n             Object obj;\n             StateManagerImpl sm;\n             ClassMetaData meta;\n-            Collection sms = new LinkedHashSet(objs.size());\n-            List exceps = null;\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            Collection<StateManagerImpl> sms = new LinkedHashSet<StateManagerImpl>(objs.size());\n+            List<Exception> exceps = null;\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 obj = itr.next();\n                 if (obj == null)\n                     continue;\n@@ -3475,7 +3470,7 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n                         sms.add(sm);\n                         if (sm.getPCState() == PCState.HOLLOW) {\n                             if (load == null)\n-                                load = new ArrayList();\n+                                load = new ArrayList<OpenJPAStateManager>();\n                             load.add(sm);\n                         }\n \n@@ -3491,9 +3486,9 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n             }\n \n             // load all hollow instances\n-            Collection failed = null;\n+            Collection<Object> failed = null;\n             if (load != null) {\n-                failed = _store.loadAll(load, null, _store.FORCE_LOAD_NONE,\n+                failed = _store.loadAll(load, null, StoreManager.FORCE_LOAD_NONE,\n                     _fc, null);\n                 if (failed != null && !failed.isEmpty())\n                     exceps = add(exceps,\n@@ -3556,10 +3551,10 @@ public void transactional(Object obj, boolean updateVersion,\n      * Transition the given state managers to transactional.\n      */\n     private void transactionalStatesAll(Collection sms, Collection failed,\n-        List exceps) {\n+        List<Exception> exceps) {\n         // make instances transactional and make sure they are loaded\n         StateManagerImpl sm;\n-        for (Iterator itr = sms.iterator(); itr.hasNext();) {\n+        for (Iterator<?> itr = sms.iterator(); itr.hasNext();) {\n             sm = (StateManagerImpl) itr.next();\n             if (failed != null && failed.contains(sm.getId()))\n                 continue;\n@@ -3791,10 +3786,10 @@ public void lockAll(Collection objs, int level, int timeout,\n         try {\n             assertActiveTransaction();\n \n-            Collection sms = new LinkedHashSet(objs.size());\n+            Collection<StateManagerImpl> sms = new LinkedHashSet<StateManagerImpl>(objs.size());\n             Object obj;\n             StateManagerImpl sm;\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {\n                 obj = itr.next();\n                 if (obj == null)\n                     continue;\n@@ -3808,8 +3803,8 @@ public void lockAll(Collection objs, int level, int timeout,\n             }\n \n             _lm.lockAll(sms, level, timeout, null);\n-            for (Iterator itr = sms.iterator(); itr.hasNext();)\n-                ((StateManagerImpl) itr.next()).readLocked(level, level);\n+            for (Iterator<StateManagerImpl> itr = sms.iterator(); itr.hasNext();)\n+                itr.next().readLocked(level, level);\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (RuntimeException re) {\n@@ -3846,7 +3841,7 @@ public boolean cancelAll() {\n     public Object getConnection() {\n         assertOpen();\n         if (!_conf.supportedOptions().contains\n-            (_conf.OPTION_DATASTORE_CONNECTION))\n+            (OpenJPAConfiguration.OPTION_DATASTORE_CONNECTION))\n             throw new UnsupportedException(_loc.get(\"conn-not-supported\"));\n \n         return _store.getClientConnection();\n@@ -3969,7 +3964,7 @@ protected Collection getDirtyStates() {\n     protected Collection getPendingTransactionalStates() {\n         if (_pending == null)\n             return Collections.EMPTY_SET;\n-        return new LinkedHashSet(_pending);\n+        return new LinkedHashSet<StateManagerImpl>(_pending);\n     }\n \n     /**\n@@ -4057,7 +4052,7 @@ void setDirty(StateManagerImpl sm, boolean firstDirty) {\n \n         if (_savepoints != null && !_savepoints.isEmpty()) {\n             if (_savepointCache == null)\n-                _savepointCache = new HashSet();\n+                _savepointCache = new HashSet<StateManagerImpl>();\n             _savepointCache.add(sm);\n         }\n \n@@ -4072,15 +4067,15 @@ void setDirty(StateManagerImpl sm, boolean firstDirty) {\n                 // also record that the class is dirty\n                 if (sm.isNew()) {\n                     if (_persistedClss == null)\n-                        _persistedClss = new HashSet();\n+                        _persistedClss = new HashSet<Class<?>>();\n                     _persistedClss.add(sm.getMetaData().getDescribedType());\n                 } else if (sm.isDeleted()) {\n                     if (_deletedClss == null)\n-                        _deletedClss = new HashSet();\n+                        _deletedClss = new HashSet<Class<?>>();\n                     _deletedClss.add(sm.getMetaData().getDescribedType());\n                 } else {\n                     if (_updatedClss == null)\n-                        _updatedClss = new HashSet();\n+                        _updatedClss = new HashSet<Class<?>>();\n                     _updatedClss.add(sm.getMetaData().getDescribedType());\n                 }\n \n@@ -4089,7 +4084,7 @@ void setDirty(StateManagerImpl sm, boolean firstDirty) {\n                 // enter the transaction during pre store\n                 if ((_flags & FLAG_PRESTORING) != 0) {\n                     if (_transAdditions == null)\n-                        _transAdditions = new HashSet();\n+                        _transAdditions = new HashSet<StateManagerImpl>();\n                     _transAdditions.add(sm);\n                 }\n             } finally {\n@@ -4107,7 +4102,7 @@ void addToPendingTransaction(StateManagerImpl sm) {\n         lock();\n         try {\n             if (_pending == null)\n-                _pending = new HashSet();\n+                _pending = new HashSet<StateManagerImpl>();\n             _pending.add(sm);\n         } finally {\n             unlock();\n@@ -4141,11 +4136,11 @@ void addDereferencedDependent(StateManagerImpl sm) {\n             // via instance callbacks, add them to the special additions set\n             if ((_flags & FLAG_DEREFDELETING) != 0) {\n                 if (_derefAdditions == null)\n-                    _derefAdditions = new HashSet();\n+                    _derefAdditions = new HashSet<StateManagerImpl>();\n                 _derefAdditions.add(sm);\n             } else {\n                 if (_derefCache == null)\n-                    _derefCache = new HashSet();\n+                    _derefCache = new HashSet<StateManagerImpl>();\n                 _derefCache.add(sm);\n             }\n         }\n@@ -4181,7 +4176,7 @@ public void dirtyType(Class cls) {\n         beginOperation(false);\n         try {\n             if (_updatedClss == null)\n-                _updatedClss = new HashSet();\n+                _updatedClss = new HashSet<Class<?>>();\n             _updatedClss.add(cls);\n         } finally {\n             endOperation();\n@@ -4272,7 +4267,7 @@ protected void free() {\n         _savepointCache = null;\n \n         if (_queries != null) {\n-            for (Iterator itr = _queries.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = _queries.iterator(); itr.hasNext();) {\n                 try {\n                     ((Query) itr.next()).closeResources();\n                 } catch (RuntimeException re) {\n@@ -4283,7 +4278,7 @@ protected void free() {\n \n         if (_extents != null) {\n             Extent e;\n-            for (Iterator itr = _extents.iterator(); itr.hasNext();) {\n+            for (Iterator<?> itr = _extents.iterator(); itr.hasNext();) {\n                 e = (Extent) itr.next();\n                 try {\n                     e.closeAll();\n@@ -4492,7 +4487,7 @@ protected PersistenceCapable assertPersistenceCapable(Object obj) {\n \n         // check for different instances of the PersistenceCapable interface\n         // and throw a better error that mentions the class loaders\n-        Class[] intfs = obj.getClass().getInterfaces();\n+        Class<?>[] intfs = obj.getClass().getInterfaces();\n         for (int i = 0; intfs != null && i < intfs.length; i++) {\n             if (intfs[i].getName().equals(PersistenceCapable.class.getName())) {\n                 throw new UserException(_loc.get(\"pc-loader-different\",\n@@ -4565,7 +4560,7 @@ public void assertWriteOperation() {\n         (Collection failed) {\n         Throwable[] t = new Throwable[failed.size()];\n         int idx = 0;\n-        for (Iterator itr = failed.iterator(); itr.hasNext(); idx++)\n+        for (Iterator<?> itr = failed.iterator(); itr.hasNext(); idx++)\n             t[idx] = new ObjectNotFoundException(itr.next());\n         return new ObjectNotFoundException(failed, t);\n     }\n@@ -4647,8 +4642,8 @@ boolean isSerializing() {\n         implements Set, Serializable {\n \n         private final boolean _orderDirty;\n-        private Set _dirty = null;\n-        private Set _clean = null;\n+        private Set<StateManagerImpl> _dirty = null;\n+        private Set<StateManagerImpl> _clean = null;\n \n         public TransactionalCache(boolean orderDirty) {\n             _orderDirty = orderDirty;\n@@ -4666,10 +4661,10 @@ public Collection copy() {\n             // big by some\n             Set copy = new LinkedHashSet(size());\n             if (_dirty != null)\n-                for (Iterator itr = _dirty.iterator(); itr.hasNext();)\n+                for (Iterator<StateManagerImpl> itr = _dirty.iterator(); itr.hasNext();)\n                     copy.add(itr.next());\n             if (_clean != null)\n-                for (Iterator itr = _clean.iterator(); itr.hasNext();)\n+                for (Iterator<StateManagerImpl> itr = _clean.iterator(); itr.hasNext();)\n                     copy.add(itr.next());\n             return copy;\n         }\n@@ -4680,7 +4675,7 @@ public Collection copy() {\n         public Collection copyDirty() {\n             if (_dirty == null || _dirty.isEmpty())\n                 return Collections.EMPTY_SET;\n-            return new LinkedHashSet(_dirty);\n+            return new LinkedHashSet<StateManagerImpl>(_dirty);\n         }\n \n         /**\n@@ -4713,7 +4708,7 @@ public void addDirty(StateManagerImpl sm) {\n                 if (_orderDirty)\n                     _dirty = MapBackedSet.decorate(new LinkedMap());\n                 else\n-                    _dirty = new HashSet();\n+                    _dirty = new HashSet<StateManagerImpl>();\n             }\n             if (_dirty.add(sm))\n                 removeCleanInternal(sm);\n@@ -4746,7 +4741,7 @@ public boolean contains(Object obj) {\n         }\n \n         public boolean containsAll(Collection coll) {\n-            for (Iterator itr = coll.iterator(); itr.hasNext();)\n+            for (Iterator<?> itr = coll.iterator(); itr.hasNext();)\n                 if (!contains(itr.next()))\n                     return false;\n             return true;"},{"sha":"d84484b0c98f3b3791f2dfa03e5434ef843be632","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -238,6 +238,12 @@ public static boolean canConvert(Class<?> c1, Class<?> c2, boolean strict) {\n             return !strict;\n         if (c1 == String.class && isTemporalType(c2))\n             return true;\n+        if ((c1 == java.util.Date.class ||c1 == java.sql.Time.class) && c2 == java.sql.Timestamp.class)\n+            return false;\n+        if ((c1 == java.util.Date.class ||c1 == java.sql.Timestamp.class) && c2 == java.sql.Time.class)\n+            return false;\n+        if (isTemporalType(c1) && isTemporalType(c2))\n+            return true;\n         return false;\n     }\n \n@@ -972,7 +978,8 @@ public static boolean isTemporalType(Class<?> c) {\n         return c != null \n             && (Date.class.isAssignableFrom(c) \n              || Time.class.isAssignableFrom(c) \n-             || Timestamp.class.isAssignableFrom(c));\n+             || Timestamp.class.isAssignableFrom(c)\n+             || Calendar.class.isAssignableFrom(c));\n     }\n     \n     public static Object getDefaultForNull(Class<?> nType) {"},{"sha":"9eaa8cd063236ddb71689cf7d72064cb80d8f311","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1163,6 +1163,7 @@ private void updateInMemory(Object ob, Object[] params, StoreQuery q) {\n                 case JavaTypes.LOCALE:\n                 case JavaTypes.OBJECT:\n                 case JavaTypes.OID:\n+                case JavaTypes.ENUM:\n                     sm.settingObjectField(into, i, sm.fetchObjectField(i), val,\n                         set);\n                     break;"},{"sha":"3310e0538d744e8bccefa3fc2989a22f699c0546","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -3376,4 +3376,8 @@ PersistenceCapable readPC(ObjectInputStream in)\n     public List<FieldMetaData> getMappedByIdFields() {\n         return _mappedByIdFields;\n     }\n+    \n+    public boolean requiresFetch(FieldMetaData fmd) {\n+        return (_broker.getFetchConfiguration().requiresFetch(fmd) != FetchConfiguration.FETCH_NONE);\n+    }\n }"},{"sha":"963410acd13598869b5f7ef4661d6a04b54cebc8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":36,"deletions":7,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -39,6 +39,8 @@\n import java.util.zip.ZipInputStream;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.ClasspathMetaDataIterator;\n import org.apache.openjpa.lib.meta.FileMetaDataIterator;\n@@ -76,6 +78,9 @@\n     protected Collection<String> cpath = null;\n \n     private Set<String> _typeNames = null;\n+    public static final String PERSISTENCE_UNIT_ROOT_URL = \"PersistenceUnitRootUrl\";\n+    public static final String MAPPING_FILE_NAMES = \"MappingFileNames\";\n+    public static final String JAR_FILE_URLS = \"JarFiles\";\n \n     /**\n      * Set of {@link File}s of metadata files or directories supplied by user.\n@@ -752,26 +757,50 @@ protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-resource\", rsrc));\n                     mitr = new ResourceMetaDataIterator(rsrc, loader);\n-                    \n-                    URL puUrl  = repos.getConfiguration().getPersistenceUnitRootUrl();\n+                    OpenJPAConfiguration conf = repos.getConfiguration();\n+                    Map peMap = null;\n+                    if (conf instanceof OpenJPAConfigurationImpl)\n+                        peMap = ((OpenJPAConfigurationImpl)conf).getPersistenceEnvironment();\n+                    URL puUrl = peMap == null ? null : (URL) peMap.get(PERSISTENCE_UNIT_ROOT_URL);\n+                    List<String> mappingFileNames = \n+                        peMap == null ? null : (List<String>) peMap.get(MAPPING_FILE_NAMES);\n+                    List<URL> jars = peMap == null ? null : (List<URL>)peMap.get(JAR_FILE_URLS);\n                     String puUrlString = puUrl == null ? null : puUrl.toString();\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"pu-root-url\", puUrlString));\n-                    \n+\n                     List<URL> urls = new ArrayList<URL>(3);\n                     while (mitr.hasNext()) {\n                         url = (URL) mitr.next();\n                         String urlString = url.toString();\n                         if (log.isTraceEnabled())\n                             log.trace(_loc.get(\"resource-url\", urlString));\n-                        if (puUrlString != null) {\n-                            if (urlString.indexOf(puUrlString) != -1)\n+                        if (peMap != null) {\n+                            if (puUrlString != null && urlString.indexOf(puUrlString) != -1) \n                                 urls.add(url);\n-                        } else \n+                            if (mappingFileNames != null && mappingFileNames.size() != 0) {\n+                                for (String mappingFileName : mappingFileNames) {\n+                                    if (log.isTraceEnabled())\n+                                        log.trace(_loc.get(\"mapping-file-name\", mappingFileName));\n+                                    if (urlString.indexOf(mappingFileName) != -1)\n+                                        urls.add(url);\n+                                }\n+                            }\n+\n+                            if (jars != null && jars.size() != 0) {\n+                                for (URL jarUrl : jars) {\n+                                    if (log.isTraceEnabled())\n+                                        log.trace(_loc.get(\"jar-file-url\", jarUrl));\n+                                    if (urlString.indexOf(jarUrl.toString()) != -1)\n+                                        urls.add(url);\n+                                }\n+                            }\n+                        } else {\n                             urls.add(url);\n+                        }\n                     }\n                     mitr.close();\n-                    \n+\n                     for (Object obj : urls) {\n                         url = (URL) obj;\n                         clss = cparser.parseTypeNames(new URLMetaDataIterator"},{"sha":"77079e8e7d7b966bf37044cf38d780bdccddfbbf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -152,8 +152,7 @@\n     private int _resMode = MODE_NONE;\n \n     private Class<?> _type = Object.class;\n-    private final Map<String,FieldMetaData> _fieldMap = \n-    \tnew TreeMap<String,FieldMetaData>();\n+    private final Map<String,FieldMetaData> _fieldMap = new TreeMap<String,FieldMetaData>();\n     private Map<String,FieldMetaData> _supFieldMap = null;\n     private boolean _defSupFields = false;\n     private Collection<String> _staticFields = null;\n@@ -183,6 +182,9 @@\n     private String _seqName = DEFAULT_STRING;\n     private SequenceMetaData _seqMeta = null;\n     private String _cacheName = DEFAULT_STRING; // null implies @DataCache(enabled=false)\n+    private boolean _dataCacheEnabled = false;     // true implies the class has been annotated by the user or name of\n+                                                // the cache is explicitly set by the user to a null string\n+\n     private Boolean _cacheEnabled = null;       // denotes status of JPA 2 @Cacheable annotation\n     private int _cacheTimeout = Integer.MIN_VALUE;\n     private Boolean _detachable = null;\n@@ -1429,14 +1431,24 @@ public String getDataCacheName() {\n         }\n         return _cacheName;\n     }\n-\n+    \n     /**\n      * Set the cache name for this class. \n      * \n      * @param can be null to disable cache.\n      */\n     public void setDataCacheName(String name) {\n         _cacheName = name;\n+        if (name != null)\n+            _dataCacheEnabled = true;\n+    }\n+    \n+    /**\n+     * Affirms true if this receiver is annotated with @DataCache and is not disabled. \n+     * A separate state variable is necessary besides the name of the cache defaulted to a special string.\n+     */\n+    public boolean getDataCacheEnabled() {\n+        return _dataCacheEnabled;\n     }\n \n     /**\n@@ -2430,6 +2442,7 @@ public void copy(ClassMetaData meta) {\n         if (_cacheTimeout == Integer.MIN_VALUE)\n             _cacheTimeout = meta.getDataCacheTimeout();\n         _cacheEnabled = meta.getCacheEnabled();\n+        _dataCacheEnabled = meta.getDataCacheEnabled();\n         if (_detachable == null)\n             _detachable = meta._detachable;\n         if (DEFAULT_STRING.equals(_detachState))"},{"sha":"ab63ae71891224d7da4f5b0840ad86682b3c1185","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1837,7 +1837,8 @@ public void setMetaModel(ClassMetaData meta, Class<?> m2) {\n             return _metamodel.get(entity);\n         String m2 = _factory.getMetaModelClassName(entity.getName());\n         try {\n-            Class<?> m2cls = J2DoPrivHelper.getForNameAction(m2, true, entity.getClassLoader()).run();\n+            ClassLoader loader = AccessController.doPrivileged(J2DoPrivHelper.getClassLoaderAction(entity));\n+            Class<?> m2cls = AccessController.doPrivileged(J2DoPrivHelper.getForNameAction(m2, true, loader));\n             _metamodel.put(entity, m2cls);\n             return m2cls;\n         } catch (Throwable t) {"},{"sha":"4c3f0c36295c8c98ff39c01abc5f1cd835a42d08","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -265,4 +265,11 @@ private static Object getObjectId(Object ob) {\n         else\n             return pc.pcFetchObjectId();\n \t}\n+    \n+    public static String toClassName(Class<?> cls) {\n+        if (cls == null) return \"\";\n+        if (cls.isArray())\n+            return toClassName(cls.getComponentType())+\"[]\";\n+        return cls.getName();\n+    }\n }"},{"sha":"f281e317dae9fb408499e8cc0b649d9269757480","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -522,8 +522,8 @@ void select_expressions() #SELECTEXPRESSIONS : { }\n \r\n void select_expression() #SELECTEXPRESSION : { }\r\n {\r\n-\t(LOOKAHEAD(aggregate_select_expression()) aggregate_select_expression()\r\n-\t\t| LOOKAHEAD(scalar_expression()) scalar_expression()\r\n+\t(LOOKAHEAD(scalar_expression()) scalar_expression()\r\n+\t\t| LOOKAHEAD(aggregate_select_expression()) aggregate_select_expression()\r\n \t\t| LOOKAHEAD(path()) path()\r\n \t\t| LOOKAHEAD(qualified_path()) qualified_path()\r\n \t\t| LOOKAHEAD(qualified_identification_variable()) qualified_identification_variable()\r"},{"sha":"24be74361a841e6a202966e64fe16ea5f3ce7e4e","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -90,13 +90,13 @@ partition-cache-no-config: You have specified a partitioned cache but have not \\\n partition-cache-parse-error-paren: Failed to configure cache partitions from the \\\n \tsupplied configuration \"{0}\" while parsing the part \"{1}\" because this part \\\n \tis not enclosed by parentheses. The proper \\\n-\tconfiguration string for cache partitions is '(p1),(p2),(p3)' i.e. each \\\n+\tconfiguration string for cache partitions is ''(p1),(p2),(p3)'' i.e. each \\\n \tpartition plug-in is enclosed in parentheses, separated by comma and the \\\n \tfinal string is enclosed by single quote.\n partition-cache-parse-error-comma: Failed to configure cache partitions from the \\\n \tsupplied configuration \"{0}\" while parsing the part \"{1}\" because this part \\\n \tis not separated by comma. The proper \\\n-\tconfiguration string for cache partitions is '(p1),(p2),(p3)' i.e. each \\\n+\tconfiguration string for cache partitions is ''(p1),(p2),(p3)'' i.e. each \\\n \tpartition plug-in is enclosed in parentheses, separated by comma and the \\\n \tfinal string is enclosed by single quote.\t\n partition-cache-null-partition: You have not specified any name for a partition in \\"},{"sha":"ee27ab679c72a228fc5714de8631504b9add0887","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,27 +18,27 @@\n tm-not-found: Could not perform automatic lookup of EJB container''s \\\n \tjavax.transaction.TransactionManager implementation. Please ensure that \\\n \tyou are running the application from within an EJB 1.1 compliant EJB \\\n-\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to \\ \n-\tthe\tappropriate value to obtain the TransactionManager.\n+\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to \\\n+\tthe appropriate value to obtain the TransactionManager.\n expected-reference: Expected object to be of type Reference, but instead was \\\n \t\"{0}\".\n not-supported: This operation is not supported.\n was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\n \tWebSphere does not support direct manipulation of managed transactions.\n-was-transaction-id-exception: Unable to determine identity of the current \\ \n+was-transaction-id-exception: Unable to determine identity of the current \\\n \tWebSphere managed transaction. Please ensure that your are running the \\\n \tapplication from within WebSphere Application Server (version 5.0.2 or \\ \n \tnewer).\n was-reflection-exception: An error occurred reflecting WebSphere proprietary \\\n \tinterfaces. Please ensure that you are running the application from within \\\n \tWebSphere Application Server (version 5.0.2 or newer).\n was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\n-\tservice. Please ensure that you are running the application from within \\ \n+\tservice. Please ensure that you are running the application from within \\\n \tWebSphere Application Server (version 5.0.2 or newer).\n tm-unavailable: Unable to obtain a TransactionManager using {0}. \n tsr-cannot-suspend: The Transaction Synchronization Registry can not suspend \\\n \tthe current transaction. \n exc-suspend-tran: A {0} exception occurred when trying to suspend the current \\\n \ttransaction. \n exc-resume-tran: A {0} exception occurred when trying to resume the current \\\n-\ttransaction. The transaction will be marked rollback only.\n\\ No newline at end of file\n+\ttransaction. The transaction will be marked rollback only."},{"sha":"507e937158f47710b940d3e646a3e8b849734bc2","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -93,7 +93,7 @@ pcdata-created: Dynamic PCData created: name=\"{0}\", for type=\"{1}\"\n factory-not-oidloader: Attempt to run the application id tool under metadata \\\n \tconfiguration that does not support it.  The application id tool can only \\\n \trun under certain metadata factory settings.\n-str-cons: The id type \"{0}\" specified by persistent type \"{1}\" \\  \n+str-cons: The id type \"{0}\" specified by persistent type \"{1}\" \\\n \tdoes not have a public {0}(String) or {0}(Class, String) constructor.\n appid-start: Generating an application id for type \"{0}\".\n appid-invalid: Type \"{0}\" does not have metadata, does not use application \\\n@@ -160,7 +160,7 @@ subclasser-super-already-pc: The superclass for type {0} implements \\\n     processed by the OpenJPA enhancer. If you are enhancing some of your \\\n     persistent types, you must enhance all of them.\n subclasser-private-ctor: Unenhanced classes must have a public or protected \\\n-    no-args constructor. Type {0}'s no-args constructor is private or \\\n+    no-args constructor. Type {0}''s no-args constructor is private or \\\n     package-visible. If you do not want to add such a constructor, you must \\\n     run the OpenJPA enhancer after compilation, \\\n     or deploy to an environment that supports deploy-time enhancement, such as \\\n@@ -175,9 +175,9 @@ subclasser-class-already-pc: Type {0} is already persistence-capable. Please \\\n     report this problem to the OpenJPA team at dev@openjpa.apache.org.\n subclasser-no-getter: No getter exists for field {0}.\n subclasser-no-setter: No setter exists for field {0}.\n-subclasser-invalid-getter: The getter for field {0} does not obey OpenJPA's \\\n+subclasser-invalid-getter: The getter for field {0} does not obey OpenJPA''s \\\n     subclassing restrictions. Getters must return a single non-computed field.\n-subclasser-invalid-setter: The setter for field {0} does not obey OpenJPA's \\\n+subclasser-invalid-setter: The setter for field {0} does not obey OpenJPA''s \\\n     subclassing restrictions. Setters must assign the passed-in parameter to a \\\n     single field in the object.\n subclasser-private-accessors-unsupported: The accessor for field {1} in type \\"},{"sha":"eb11cd294edc401d680534fb8362c0c284880180","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -33,7 +33,6 @@ reentrant-flush: Detected reentrant flush.  Make sure your flush-time instance \\\n \trequire the in-progress flush to complete.\n rolled-back: The transaction has been rolled back.  See the nested exceptions \\\n \tfor details on the errors that occurred.\n-bad-lock-level: This lock manager does not recognize lock level \"{0}\".\n pessimistic-mutate: You are attempting to directly mutate a persistent second \\\n \tclass object (such as a collection or map field) that you obtained before \\\n \tthe transaction began.  After beginning a datastore transaction, you \\\n@@ -348,6 +347,8 @@ bad-datastore-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Map, \\\n \tthe in-memory method instead (a method with the same signature but with an \\\n \tObject argument) and want this query to execute in-memory, supply a \\\n \tCollection of candidates to filter.\n+only-update-primitives: Bulk update queries can only update basic field values \\\n+    (Strings, ints, enums, etc.)\n only-update-constants: Bulk update queries when executed in memory \\\n \tmay only update to constant values.\n only-range-constants: Range values must be numeric constants.  Illegal query: \\\n@@ -443,7 +444,7 @@ fill-bean-setter: Can not find a setter method on \"{0}\" for property \"{1}\" \\\n fill-bean-error: Error while filling data with JavaBean strategy. The error \\\n     occurred while invoking bean method \"{0}\" with input argument \"{1}\" of \\\n     types \"{2}\". See nested exception for details.\n-fill-assign-error: Error while assigning data from values \"{0}\" of types \\ \n+fill-assign-error: Error while assigning data from values \"{0}\" of types \\\n \t\"{1}\". See nested exception for details.\n fill-factory-error: Error while fill data with factory strategy. The error \\\n \toccurred while invoking \"{0}\" with key \"{1}\" and value \"{2}\" of type \"{3}\". \\"},{"sha":"0819deec3b395c3bddb2e549a601d67111d4fe4b","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -357,4 +357,6 @@ repos-initializeEager-found: The following classes are being preloaded \"{0}\".\n repos-initializeEager-error: Unexpected error during early loading of entity metadata during initialization. \\\n     See nested stacktrace for details.\t  \n pu-root-url: The persistent unit root url is \"{0}\"\n-resource-url: The resource url is \"{0}\"   \n\\ No newline at end of file\n+resource-url: The resource url is \"{0}\"   \n+mapping-file-name: Mapping file name is \"{0}\"\n+jar-file-url: Jar file url is \"{0}\"\n\\ No newline at end of file"},{"sha":"221bfb64dad23d4bd530e99a4e64dc91f3c8a2e4","filename":"openjpa-lib/pom.xml","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -115,6 +115,19 @@ openjpa.version=${project.version}</echo>\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n         </plugins>\n     </build>\n </project>"},{"sha":"33b69ab302fc7209c6a08d6178f98d5dec3151a7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -885,9 +885,11 @@ public boolean equals(Object other) {\n         ConfigurationImpl conf = (ConfigurationImpl) other;\n         if (_vals.size() != conf.getValues().length)\n         \treturn false;\n-        for(Value v : _vals) { \n-        \tValue thatV = conf.getValue(v.getProperty());\n-        \tif (!v.equals(thatV)) {\n+        for(Value v : _vals) {\n+            String propName = v.getProperty();\n+        \tValue thisV = this.getValue(propName);\n+            Value thatV = conf.getValue(propName);\n+        \tif (!thisV.equals(thatV)) {\n         \t\treturn false;\n         \t}\n         }"},{"sha":"a6dc13385f209f9611b85a9fa5fc2f2cacacddea","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -48,11 +48,12 @@\n public class Localizer {\n \n     // static cache of package+loc name to localizer mappings\n-    private static final Map _localizers = new ConcurrentHashMap();\n+    private static final Map<String,Localizer> _localizers = new ConcurrentHashMap<String,Localizer>();\n \n     // list of resource providers to delegate to when locating resources\n-    private static final Collection _providers = new CopyOnWriteArraySet\n-        (Arrays.asList(new Object[]{\n+    private static final Collection<ResourceBundleProvider> _providers = \n+        new CopyOnWriteArraySet<ResourceBundleProvider>\n+        (Arrays.asList(new ResourceBundleProvider[]{\n             new SimpleResourceBundleProvider(),\n             new StreamResourceBundleProvider(),\n             new ZipResourceBundleProvider(), }));\n@@ -63,7 +64,7 @@\n      *\n      * @see #forPackage(Class,Locale)\n      */\n-    public static Localizer forPackage(Class cls) {\n+    public static Localizer forPackage(Class<?> cls) {\n         return forPackage(cls, null);\n     }\n \n@@ -77,7 +78,7 @@ public static Localizer forPackage(Class cls) {\n      * @param locale the locale to which strings should be localized; if\n      * null, the system default will be assumed\n      */\n-    public static Localizer forPackage(Class cls, Locale locale) {\n+    public static Localizer forPackage(Class<?> cls, Locale locale) {\n         if (locale == null)\n             locale = Locale.getDefault();\n \n@@ -138,10 +139,9 @@ private ResourceBundle getBundle() {\n         // no locking; it's ok to create multiple bundles\n         if (_bundle == null) {\n             // find resource bundle\n-            for (Iterator itr = _providers.iterator();\n+            for (Iterator<ResourceBundleProvider> itr = _providers.iterator();\n                 itr.hasNext() && _bundle == null; ) {\n-                _bundle = ((ResourceBundleProvider) itr.next())\n-                    .findResource(_file, _locale, _loader);\n+                _bundle = itr.next().findResource(_file, _locale, _loader);\n             }\n         }\n         return _bundle;"},{"sha":"f7083d6cbb4efd55989a11c9e600e2816b6f44aa","filename":"openjpa-osgi/pom.xml","status":"removed","additions":0,"deletions":252,"changes":252,"blob_url":"https://github.com/apache/openjpa/blob/671417a73a8d3c3548792da6886f207bca99b72d/openjpa-osgi/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/671417a73a8d3c3548792da6886f207bca99b72d/openjpa-osgi/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-osgi/pom.xml?ref=671417a73a8d3c3548792da6886f207bca99b72d","patch":"@@ -1,252 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Please keep the project tag on one line to avoid confusing \n-    the release plugin.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <artifactId>openjpa-osgi</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA Aggregate Jar for OSGi</name>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n-    </parent>\n-\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <!--\n-                    Manually build an aggregate jar of all the other\n-                    openjpa-* jars using ant. We cannot use the assembly\n-                    plugin, since it doesn't provide support for appending\n-                    multiple same-named files to each other (which is\n-                    required for correctly aggregating services files).\n-                -->\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>build-single-jar</id>\n-                        <phase>compile</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <unjar overwrite=\"false\" dest=\"${basedir}/target/classes\">\n-                                    <fileset dir=\"${basedir}/..\">\n-                                        <include name=\"*/target/openjpa-*.jar\" />\n-                                        <exclude name=\"*/target/openjpa-2*.jar\" />\n-                                        <exclude name=\"*/target/openjpa-all-*.jar\" />\n-                                        <exclude name=\"*/target/openjpa-examples-*.jar\" />\n-                                        <exclude name=\"**/*-tests.jar\" />\n-                                        <exclude name=\"**/*-sources.jar\" />\n-                                        <exclude name=\"**/*-javadoc.jar\" />\n-                                        <exclude name=\"openjpa-integration/**/target/openjpa-all-*.jar\" />\n-                                    </fileset>\n-                                </unjar>\n-\n-                                <!--\n-                                    need to manually concatinate the services \n-                                    resources so they are aggregated\n-                                -->\n-                                <macrodef name=\"aggregate-file\">\n-                                   <attribute name=\"servicename\" />\n-                                    <sequential>\n-                                        <echo>Building service: @{servicename}</echo>\n-                                        <concat destfile=\"${basedir}/target/classes/META-INF/services/@{servicename}\">\n-                                            <fileset dir=\"${basedir}/..\" includes=\"*/src/main/resources/META-INF/services/@{servicename}\" />\n-                                        </concat>\n-                                    </sequential>\n-                                </macrodef>\n-\n-                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ProductDerivation\" />\n-                                <aggregate-file servicename=\"javax.persistence.spi.PersistenceProvider\" />\n-                                <aggregate-file servicename=\"org.apache.openjpa.kernel.exps.ExpressionParser\" />\n-                            </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-\n-            <!--\n-                create enhancer pre-main and agent-main attributes\n-            -->\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <configuration>\n-                    <archive>\n-                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n-                        <manifest>\n-                           <mainClass>org.apache.openjpa.conf.OpenJPAVersion</mainClass>\n-                        </manifest>\n-                        <manifestEntries>\n-                            <Premain-Class>\n-                                org.apache.openjpa.enhance.PCEnhancerAgent\n-                            </Premain-Class>\n-                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n-                            <Agent-Class>\n-                                org.apache.openjpa.enhance.InstrumentationFactory\n-                            </Agent-Class>\n-                            <Can-Redefine-Classes>true</Can-Redefine-Classes>                            \n-                            <Can-Retransform-Classes>true</Can-Retransform-Classes>\n-                        </manifestEntries>\n-                    </archive>\n-                </configuration>\n-            </plugin>\n-\n-            <plugin>\n-                <groupId>org.apache.felix</groupId>\n-                <artifactId>maven-bundle-plugin</artifactId>\n-                <extensions>true</extensions>\n-                <configuration>\n-                    <instructions>\n-                        <Bundle-Activator>org.apache.openjpa.osgi.PersistenceActivator</Bundle-Activator>\n-                        <Bundle-Name>${artifactId}</Bundle-Name>\n-                        <Bundle-SymbolicName>${groupId}.${artifactId};singleton=true</Bundle-SymbolicName>\n-                        <Bundle-DocURL>http://openjpa.apache.org/documentation.html</Bundle-DocURL>\n-                        <Implementation-Title>Apache OpenJPA</Implementation-Title>\n-                        <Implementation-Version>${project.version}</Implementation-Version>\n-                        <Specification-Title>JSR-317 Java Persistence</Specification-Title>\n-                        <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>\n-                        <Specification-Version>2.0</Specification-Version>\n-                        <!-- OSGi Bundle Metadata -->\n-                        <Private-Package>org.openjpa.lib.ant*,org.apache.jdbc.ant*,META-INF*</Private-Package>\n-                        <Export-Package>!META-INF*,!org.openjpa.lib.ant*,!org.apache.jdbc.ant*,org.apache.openjpa*</Export-Package>\n-                        <Import-Package>com.ibm.*;resolution:=optional,org.postgresql.*;resolution:=optional,org.apache.tools.ant.*;resolution:=optional,org.apache.log4j.*;resolution:=optional,javax.activation.xa*;resolution:=optional,javax.jms.*;resolution:=optional,javax.transaction.*;resolution:=optional,javax.validation.*;resolution:=optional,javax.xml.bind.*;resolution:=optional,serp.*;resolution:=optional,*</Import-Package>\n-                        <Require-Bundle>org.apache.geronimo.specs.geronimo-jpa_2.0_spec;bundle-version=\"[1.0.0,2.0.0)\"</Require-Bundle>\n-                        <!-- Eclipse metadata\n-                        <Eclipse-Autostart>false</Eclipse-Autostart>\n-                        <Bundle-ClassPath>.</Bundle-ClassPath>\n-                        -->\n-                    </instructions>\n-                    <unpackBundle>true</unpackBundle>\n-                </configuration>\n-                <executions>\n-                    <execution>\n-                        <id>bundle-manifest</id>\n-                        <phase>process-classes</phase>\n-                        <goals>\n-                            <goal>manifest</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-        </plugins>\n-    </build>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.felix</groupId>\n-            <artifactId>org.osgi.core</artifactId>\n-            <version>1.4.0</version>\n-            <scope>provided</scope>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>org.apache.felix</groupId>\n-                    <artifactId>org.osgi.foundation</artifactId>\n-                </exclusion>\n-            </exclusions>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-lib</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-xmlstore</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-slice</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>net.sourceforge.serp</groupId>\n-            <artifactId>serp</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-logging</groupId>\n-            <artifactId>commons-logging</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-lang</groupId>\n-            <artifactId>commons-lang</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-collections</groupId>\n-            <artifactId>commons-collections</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-pool</groupId>\n-            <artifactId>commons-pool</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n-        </dependency>\n-        <!-- optional dependencies -->\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-validation_1.0_spec</artifactId>\n-            <scope>provided</scope>\n-        </dependency>\n-    </dependencies>\n-</project>"},{"sha":"50043bcd3b6da710e6c1f115a65b79959049cb68","filename":"openjpa-osgi/src/main/appended-resources/META-INF/LICENSE.vm","status":"removed","additions":0,"deletions":145,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/671417a73a8d3c3548792da6886f207bca99b72d/openjpa-osgi/src/main/appended-resources/META-INF/LICENSE.vm","raw_url":"https://github.com/apache/openjpa/raw/671417a73a8d3c3548792da6886f207bca99b72d/openjpa-osgi/src/main/appended-resources/META-INF/LICENSE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-osgi/src/main/appended-resources/META-INF/LICENSE.vm?ref=671417a73a8d3c3548792da6886f207bca99b72d","patch":"@@ -1,145 +0,0 @@\n-\n-======================================\n-  LICENSES FOR INCLUDED DEPENDENCIES\n-======================================\n-\n-All the source code for the OpenJPA project is released under the\n-license above. Additionally, the OpenJPA binary distribution\n-includes a number of third-party files that are required in\n-order to the software to function. Unless noted below, these jars\n-and resource files are also released under the ASF license above.\n-\n-The exceptions are as follows:\n-\n-===========================\n-  orm-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd)\n-  orm_2_0-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/orm_2_0.xsd)\n-  persistence-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd)\n-  persistence_2_0-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd)\n-  websphere-uow-api.jar - this jar file contains WebSphere proprietary\n-    API code which is licensed for use when compiling OpenJPA. The\n-    jar is not distributed with OpenJPA and is only included with the\n-    source archive in order to resolve compilation dependencies. \n-===========================\n-\n-COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n-\n-1. Definitions.\n-\n-1.1. Contributor means each individual or entity that creates or contributes to the creation of Modifications.\n-\n-1.2. Contributor Version means the combination of the Original Software, prior Modifications used by a Contributor (if any), and the Modifications made by that particular Contributor.\n-\n-1.3. Covered Software means (a) the Original Software, or (b) Modifications, or (c) the combination of files containing Original Software with files containing Modifications, in each case including portions thereof.\n-\n-1.4. Executable means the Covered Software in any form other than Source Code.\n-\n-1.5. Initial Developer means the individual or entity that first makes Original Software available under this License.\n-\n-1.6. Larger Work means a work which combines Covered Software or portions thereof with code not governed by the terms of this License.\n-\n-1.7. License means this document.\n-\n-1.8. Licensable means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.\n-\n-1.9. Modifications means the Source Code and Executable form of any of the following:\n-\n-A. Any file that results from an addition to, deletion from or modification of the contents of a file containing Original Software or previous Modifications;\n-\n-B. Any new file that contains any part of the Original Software or previous Modification; or\n-\n-C. Any new file that is contributed or otherwise made available under the terms of this License.\n-\n-1.10. Original Software means the Source Code and Executable form of computer software code that is originally released under this License.\n-\n-1.11. Patent Claims means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.\n-\n-1.12. Source Code means (a) the common form of computer software code in which modifications are made and (b) associated documentation included in or with such code.\n-\n-1.13. You (or Your) means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, You includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, control means (a)�the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b)�ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n-\n-2. License Grants.\n-\n-2.1. The Initial Developer Grant.\n-Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, the Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license:\n-(a) under intellectual property rights (other than patent or trademark) Licensable by Initial Developer, to use, reproduce, modify, display, perform, sublicense and distribute the Original Software (or portions thereof), with or without Modifications, and/or as part of a Larger Work; and\n-(b) under Patent Claims infringed by the making, using or selling of Original Software, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Software (or portions thereof).\n-(c) The licenses granted in Sections�2.1(a) and (b) are effective on the date Initial Developer first distributes or otherwise makes the Original Software available to a third party under the terms of this License.\n-(d) Notwithstanding Section�2.1(b) above, no patent license is granted: (1)�for code that You delete from the Original Software, or (2)�for infringements caused by: (i)�the modification of the Original Software, or (ii)�the combination of the Original Software with other software or devices.\n-\n-2.2. Contributor Grant.\n-Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n-(a) under intellectual property rights (other than patent or trademark) Licensable by Contributor to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof), either on an unmodified basis, with other Modifications, as Covered Software and/or as part of a Larger Work; and\n-(b) under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)�Modifications made by that Contributor (or portions thereof); and (2)�the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).\n-(c) The licenses granted in Sections�2.2(a) and 2.2(b) are effective on the date Contributor first distributes or otherwise makes the Modifications available to a third party.\n-(d) Notwithstanding Section�2.2(b) above, no patent license is granted: (1)�for any code that Contributor has deleted from the Contributor Version; (2)�for infringements caused by: (i)�third party modifications of Contributor Version, or (ii)�the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or (3)�under Patent Claims infringed by Covered Software in the absence of Modifications made by that Contributor.\n-\n-3. Distribution Obligations.\n-\n-3.1. Availability of Source Code.\n-\n-Any Covered Software that You distribute or otherwise make available in Executable form must also be made available in Source Code form and that Source Code form must be distributed only under the terms of this License. You must include a copy of this License with every copy of the Source Code form of the Covered Software You distribute or otherwise make available. You must inform recipients of any such Covered Software in Executable form as to how they can obtain such Covered Software in Source Code form in a reasonable manner on or through a medium customarily used for software exchange.\n-\n-3.2. Modifications.\n-\n-The Modifications that You create or to which You contribute are governed by the terms of this License. You represent that You believe Your Modifications are Your original creation(s) and/or You have sufficient rights to grant the rights conveyed by this License.\n-\n-3.3. Required Notices.\n-You must include a notice in each of Your Modifications that identifies You as the Contributor of the Modification. You may not remove or alter any copyright, patent or trademark notices contained within the Covered Software, or any notices of licensing or any descriptive text giving attribution to any Contributor or the Initial Developer.\n-\n-3.4. Application of Additional Terms.\n-You may not offer or impose any terms on any Covered Software in Source Code form that alters or restricts the applicable version of this License or the recipients rights hereunder. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, you may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear that any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.\n-\n-3.5. Distribution of Executable Versions.\n-You may distribute the Executable form of the Covered Software under the terms of this License or under the terms of a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable form does not attempt to limit or alter the recipients rights in the Source Code form from the rights set forth in this License. If You distribute the Covered Software in Executable form under a different license, You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.\n-\n-3.6. Larger Works.\n-You may create a Larger Work by combining Covered Software with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Software.\n-\n-4. Versions of the License.\n-\n-4.1. New Versions.\n-Sun Microsystems, Inc. is the initial license steward and may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Except as provided in Section 4.3, no one other than the license steward has the right to modify this License.\n-\n-4.2. Effect of New Versions.\n-\n-You may always continue to use, distribute or otherwise make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. If the Initial Developer includes a notice in the Original Software prohibiting it from being distributed or otherwise made available under any subsequent version of the License, You must distribute and make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. Otherwise, You may also choose to use, distribute or otherwise make the Covered Software available under the terms of any subsequent version of the License published by the license steward.\n-4.3. Modified Versions.\n-\n-When You are an Initial Developer and You want to create a new license for Your Original Software, You may create and use a modified version of this License if You: (a)�rename the license and remove any references to the name of the license steward (except to note that the license differs from this License); and (b)�otherwise make it clear that the license contains terms which differ from this License.\n-\n-5. DISCLAIMER OF WARRANTY.\n-\n-COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN AS IS BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\n-\n-6. TERMINATION.\n-\n-6.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.\n-\n-6.2. If You assert a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You assert such claim is referred to as Participant) alleging that the Participant Software (meaning the Contributor Version where the Participant is a Contributor or the Original Software where the Participant is the Initial Developer) directly or indirectly infringes any patent, then any and all rights granted directly or indirectly to You by such Participant, the Initial Developer (if the Initial Developer is not the Participant) and all Contributors under Sections�2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively and automatically at the expiration of such 60 day notice period, unless if within such 60 day period You withdraw Your claim with respect to the Participant Software against such Participant either unilaterally or pursuant to a written agreement with Participant.\n-\n-6.3. In the event of termination under Sections�6.1 or 6.2 above, all end user licenses that have been validly granted by You or any distributor hereunder prior to termination (excluding licenses granted to You by any distributor) shall survive termination.\n-\n-7. LIMITATION OF LIABILITY.\n-\n-UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTYS NEGLIGENCE TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\n-\n-8. U.S. GOVERNMENT END USERS.\n-\n-The Covered Software is a commercial item, as that term is defined in 48�C.F.R.�2.101 (Oct. 1995), consisting of commercial computer software (as that term is defined at 48 C.F.R. �252.227-7014(a)(1)) and commercial computer software documentation as such terms are used in 48�C.F.R.�12.212 (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Software with only those rights set forth herein. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or provision that addresses Government rights in computer software under this License.\n-\n-9. MISCELLANEOUS.\n-\n-This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by the law of the jurisdiction specified in a notice contained within the Original Software (except to the extent applicable law, if any, provides otherwise), excluding such jurisdictions conflict-of-law provisions. Any litigation relating to this License shall be subject to the jurisdiction of the courts located in the jurisdiction and venue specified in a notice contained within the Original Software, with the losing party responsible for costs, including, without limitation, court costs and reasonable attorneys fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. You agree that You alone are responsible for compliance with the United States export administration regulations (and the export control laws and regulation of any other countries) when You use, distribute or otherwise make available any Covered Software.\n-\n-10. RESPONSIBILITY FOR CLAIMS.\n-\n-As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.\n-\n-NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)\n-The GlassFish code released under the CDDL shall be governed by the laws of the State of California (excluding conflict-of-law provisions). Any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California and the state courts of the State of California, with venue lying in Santa Clara County, California. \n-"},{"sha":"4728993fa61f3d96121ac27d631db72195d9ea12","filename":"openjpa-osgi/src/main/appended-resources/META-INF/NOTICE.vm","status":"removed","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/671417a73a8d3c3548792da6886f207bca99b72d/openjpa-osgi/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/671417a73a8d3c3548792da6886f207bca99b72d/openjpa-osgi/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-osgi/src/main/appended-resources/META-INF/NOTICE.vm?ref=671417a73a8d3c3548792da6886f207bca99b72d","patch":"@@ -1,16 +0,0 @@\n-\n-OpenJPA includes software developed by the SERP project\n-Copyright (c) 2002-2006, A. Abram White. All rights reserved.\n-\n-OpenJPA includes the persistence and orm schemas from the JPA specifications.\n-Copyright 2005-2007 Sun Microsystems, Inc. All rights reserved.\n-OpenJPA elects to include this software in this distribution under the\n-CDDL license.  You can obtain a copy of the License at:\n-    https://glassfish.dev.java.net/public/CDDL+GPL.html\n-The source code is available at:\n-    https://glassfish.dev.java.net/source/browse/glassfish/\n-\n-OpenJPA includes software written by Miroslav Nachev\n-\n-OpenJPA uses test code written by Charles Tillman.\n-"},{"sha":"fe2f9c77927f28cc057d1afe82da83579f642f29","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":22,"deletions":26,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -21,35 +21,22 @@\n     Maven release plugin requires the project tag to be on a single line. \n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n     <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>2.0.0-beta2</version>\n+    </parent>\n+\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-persistence-jdbc</artifactId>\n     <packaging>jar</packaging>\n     <name>OpenJPA Persistence JDBC</name>\n     <description>OpenJPA Persistence JDBC</description>\n-    <url>http://openjpa.apache.org</url>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n-    </parent>\n-    <properties>\n-        <openjpa.loglevel>INFO</openjpa.loglevel>\n-        <dbcp.maxActive>10</dbcp.maxActive>\n-        <dbcp.maxIdle>5</dbcp.maxIdle>\n-        <dbcp.minIdle>2</dbcp.minIdle>\n-        <dbcp.maxWait>10000</dbcp.maxWait>\n-        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n-        <derby.locks.waitTimeout>10</derby.locks.waitTimeout>        \n-        <derby.locks.deadlockTimeout>5</derby.locks.deadlockTimeout>\n-        <!-- @AllowFailure options:  ignore = silently skip test,\n-             log = execute test and log results but don't fail the test,\n-             anything else allows the test to execute normally\n-        -->\n-        <tests.openjpa.allowfailure>ignore</tests.openjpa.allowfailure>\n-    </properties>\n-    <profiles>\n \n+    <profiles>\n         <!-- Profile for testing with test-dynamic-enhancer -->\n         <profile>\n             <id>test-dynamic-enhancer</id>\n@@ -63,7 +50,7 @@\n             </properties>\n             <build>\n             <plugins>\n-               <plugin>\n+              <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n                 <configuration>\n@@ -95,8 +82,8 @@\n                     </systemProperties>\n                 </configuration>\n             </plugin>\n-        </plugins>\n-        </build>\n+          </plugins>\n+          </build>\n         </profile>\n \n         <!-- Profile for testing with HSQL DB -->\n@@ -141,11 +128,13 @@\n                 </dependency>\n             </dependencies>\n             <properties>\n-                <mysql.version>5.1.6</mysql.version>\n                 <connection.driver.name>com.mysql.jdbc.Driver</connection.driver.name>\n                 <connection.url>${openjpa.mysql.url}</connection.url>\n                 <connection.username>${openjpa.mysql.username}</connection.username>\n                 <connection.password>${openjpa.mysql.password}</connection.password>\n+                <!-- DBCP overrides for MySQL testing -->\n+                <dbcp.maxIdle>0</dbcp.maxIdle>\n+                <dbcp.minIdle>0</dbcp.minIdle>\n             </properties>\n         </profile>\n \n@@ -777,6 +766,13 @@\n                             </includes>\n                         </configuration>\n                     </execution>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n                 </executions>\n             </plugin>\n             <plugin>"},{"sha":"40b0b53e0680d2dafb34dae867404290cefc4fb9","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -26,6 +26,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+\n import javax.persistence.DiscriminatorType;\n import javax.persistence.EnumType;\n import javax.persistence.InheritanceType;\n@@ -56,11 +58,13 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.AccessCode;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UserException;\n import org.xml.sax.Attributes;\n import org.xml.sax.Locator;\n@@ -1390,6 +1394,27 @@ private DeferredEmbeddableOverrides findDeferredMapping(Class<?> cls,\n         }\n         return null;\n     }\n+\n+    /**\n+     * Process all deferred embeddables using an unknown access type.\n+     */\n+    protected void addDeferredEmbeddableMetaData() {\n+        super.addDeferredEmbeddableMetaData();\n+        if (_deferredMappings.size() > 0) {\n+            Set<Class<?>> keys = _deferredMappings.keySet();\n+            Class[] classes = keys.toArray(new Class[0]);\n+            for (int i = 0; i < classes.length; i++) {\n+                try {\n+                    applyDeferredEmbeddableOverrides(classes[i]);\n+                } catch (Exception e) {\n+                    throw new MetaDataException(\n+                            _loc.get(\"no-embeddable-metadata\",\n+                                classes[i].getName()), e);\n+                }\n+            }\n+        }\n+        \n+    }    \n     \n     // Inner class for storing override information\n     class DeferredEmbeddableOverrides {"},{"sha":"10553c01c24ad8e7361f16059c43ebb91242ab29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.openjpa.conf;\n \n-import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.io.PrintStream;\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityManager;\n@@ -31,7 +29,6 @@\n import org.apache.openjpa.persistence.query.NamedQueryEntity;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.lib.log.Log;\n \n public class TestCacheMarshallerEndToEnd\n@@ -118,7 +115,7 @@ public boolean isInfoEnabled() {\n         }\n \n         public boolean isWarnEnabled() {\n-            throw new UnsupportedOperationException();\n+            return true;\n         }\n \n         public boolean isErrorEnabled() {\n@@ -146,11 +143,11 @@ public void info(Object o, Throwable t) {\n         }\n \n         public void warn(Object o) {\n-            throw new UnsupportedOperationException();\n+            lines.add(o.toString());\n         }\n \n         public void warn(Object o, Throwable t) {\n-            throw new UnsupportedOperationException();\n+            lines.add(o.toString());\n         }\n \n         public void error(Object o) {"},{"sha":"2ec29377c4872d94b8ace4f4e91b0e51036a255e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.util.Properties;\n+\n import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n import javax.persistence.Query;\n \n import org.apache.openjpa.kernel.QueryLanguages;\n@@ -54,15 +57,39 @@ public void testValidQueryUnwrap() {\n     public void testValidEntityManagerUnwrap() {\n         EntityManager em = emf.createEntityManager();\n         \n-        Class[] validCasts = new Class[] {\n+        Class<?>[] validCasts = new Class[] {\n             org.apache.openjpa.persistence.OpenJPAEntityManager.class,\n             org.apache.openjpa.persistence.OpenJPAEntityManagerSPI.class,\n             org.apache.openjpa.kernel.DelegatingBroker.class,\n             org.apache.openjpa.kernel.Broker.class\n         };\n-        for (Class c : validCasts) {\n+        for (Class<?> c : validCasts) {\n             Object unwrapped = em.unwrap(c);\n             assertTrue(c.isInstance(unwrapped));\n         }\n     }\n+    \n+    /**\n+     * Tests a EntityManager can be unwrapped as an instance of a series of \n+     * class or interface. \n+     */\n+    public void testInvalidEntityManagerUnwrap() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        Class<?>[] invalidCasts = new Class[] {\n+            Object.class,\n+            Properties.class,\n+            null,\n+        };\n+        for (Class<?> c : invalidCasts) {\n+            try {\n+                em.unwrap(c);\n+                fail(\"Expected to fail to unwarp with \" + c);\n+            } catch (Exception e) {\n+                EntityTransaction txn = em.getTransaction();\n+                assertFalse(txn.isActive());\n+            }\n+        }\n+    }\n+\n }"},{"sha":"b24f768c83bd13524cb35a67665f5f3fcc9eb696","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.persistence.cache.jpa;\n \n import java.lang.reflect.Modifier;\n+import java.util.Map;\n+import java.util.Set;\n \n import javax.persistence.EntityManager;\n \n@@ -60,13 +62,21 @@ public void populate() throws IllegalAccessException, InstantiationException {\n         em.close();\n     }\n \n-    public OpenJPAEntityManagerFactorySPI createEntityManagerFactory(String puName) {\n+    public OpenJPAEntityManagerFactorySPI createEntityManagerFactory(String puName,\n+        Map<String, Object> additionalProperties) {\n+        Map<String, Object> propertiesMap = getPropertiesMap(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes, \n+            \"openjpa.jdbc.JDBCListeners\", new JDBCListener [] { getListener() });\n+        if (additionalProperties != null) {\n+            Set<String> keys = additionalProperties.keySet();\n+            for (String key : keys) {\n+                propertiesMap.put(key, additionalProperties.get(key));\n+            }\n+        }\n         OpenJPAEntityManagerFactorySPI emf =\n             (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(puName,\n-                \"META-INF/caching-persistence.xml\", getPropertiesMap(\"openjpa.DataCache\", \"true\",\n-                    \"openjpa.QueryCache\", \"true\",\n-                    \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes, \n-                    \"openjpa.jdbc.JDBCListeners\", new JDBCListener [] { getListener() } ));\n+                \"META-INF/caching-persistence.xml\", propertiesMap );\n         return emf;\n     }\n "},{"sha":"f6746ac710d2817181a503571de4d77a512c2a59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -39,7 +39,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-all\");\n+            emf = createEntityManagerFactory(\"cache-mode-all\",null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"787498ed622560d164e1e115c9f590dc3e200076","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -47,7 +47,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-disable\");\n+            emf = createEntityManagerFactory(\"cache-mode-disable\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"d3ccf33e4d7c618d3ca3db901f0dbf827a4bdec5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -38,7 +38,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-empty\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"5ec5bacb80302c983ffd10a8eda8f6a1ea3dfc5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -47,7 +47,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-enable\");\n+            emf = createEntityManagerFactory(\"cache-mode-enable\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"0c3312de402884d480344236ff00342e4d85b60a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+public class TestCacheModeInvalid extends AbstractCacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    \n+    @Override\n+    public void setUp() {}\n+    \n+    public void testInvalidElement() {\n+        boolean exceptionCaught = false;\n+        try {\n+            Map<String, Object> propertiesMap = getPropertiesMap(\"openjpa.DataCache\", \"true\",\n+                \"openjpa.QueryCache\", \"true\",\n+                \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes, \n+                \"openjpa.jdbc.JDBCListeners\", new JDBCListener [] { getListener() });\n+            emf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\"cache-mode-invalid\",\n+                \"META-INF/caching-persistence-invalid.xml\", propertiesMap );\n+        } catch (Throwable e) {\n+            exceptionCaught = true;\n+            assertException(e, org.apache.openjpa.util.GeneralException.class);\n+            String msg = e.getMessage();\n+            assertTrue(msg.contains(\"org.xml.sax.SAXException\"));\n+        }\n+        assertTrue(exceptionCaught);\n+    }\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public JDBCListener getListener() {\n+        return null;\n+    }\n+ \n+}"},{"sha":"0d7c01446a3ef6516e90ad5596d28f1d30c92757","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -39,7 +39,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-none\");\n+            emf = createEntityManagerFactory(\"cache-mode-none\",null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"dc0f7f952e8093536a2a909ee09e1919ec8a3b66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -38,7 +38,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-unspecified\");\n+            emf = createEntityManagerFactory(\"cache-mode-unspecified\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"7fd2a3c6653b71e2fffd1150b1d748b2cc93bbf3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeAll extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = persistentTypes;\n+    private static Class<?>[] expectedNotInCache = {};\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"ALL\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\",propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+    \n+    public List<String> getSql() { \n+        return sql;\n+    }\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"93ed63de18cea0da485a688e382e123e7b92366a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedUncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UnspecifiedEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlCacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlUncacheableEntity;\n+\n+public class TestPropertyCacheModeDisableSelective extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache =\n+        { CacheableEntity.class, XmlCacheableEntity.class, NegatedUncacheableEntity.class, UnspecifiedEntity.class, };\n+    private static Class<?>[] expectedNotInCache =\n+        { UncacheableEntity.class, XmlUncacheableEntity.class, };\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"DISABLE_SELECTIVE\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+    \n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"dec116fbeca53358aa99b56c4fb10280fe9d1b0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedUncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UnspecifiedEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlCacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlUncacheableEntity;\n+\n+public class TestPropertyCacheModeEnableSelective extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+\n+    private static Class<?>[] expectedInCache =\n+        { CacheableEntity.class, XmlCacheableEntity.class, NegatedUncacheableEntity.class, };\n+    private static Class<?>[] expectedNotInCache =\n+        { UncacheableEntity.class, XmlUncacheableEntity.class, UnspecifiedEntity.class, };\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"ENABLE_SELECTIVE\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+    \n+    // =======================================================================\n+    // Tests\n+    // =======================================================================\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, false);\n+    }\n+\n+}"},{"sha":"79fa0ea246a504e55b2caddc49f05636b7a2eb3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeInvalid extends AbstractCacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    \n+    @Override\n+    public void setUp() {}\n+    \n+    public void testInvalidPropertyValue() {\n+        boolean exceptionCaught = false;\n+        try {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"INVALID\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\",propertyMap);\n+        } catch (Throwable e) {\n+            exceptionCaught = true;\n+            assertException(e, java.lang.IllegalArgumentException.class);\n+            String msg = e.getMessage();\n+            assertTrue(msg.contains(\"javax.persistence.SharedCacheMode.INVALID\"));\n+        }\n+        assertTrue(exceptionCaught);\n+    }\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public JDBCListener getListener() {\n+        return null;\n+    }\n+ \n+}"},{"sha":"0504d705746f80abfed97af90aecfc145303ce0f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeNone extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = {}; \n+    private static Class<?>[] expectedNotInCache = persistentTypes;\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"NONE\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+    \n+    @Override\n+    public boolean getCacheEnabled() {\n+        return false;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, false);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, false);\n+    }\n+    \n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+\n+}"},{"sha":"2c817778e64739c657e0876aabe2a6977df3cff2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeUnspecified extends AbstractCacheModeTestCase {\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = persistentTypes;\n+    private static Class<?>[] expectedNotInCache = {};\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"UNSPECIFIED\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+    \n+    public List<String> getSql() { \n+        return sql;\n+    }\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"75f0ee50b4cb2fccf6a3816a632123f1c506ff43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","status":"modified","additions":16,"deletions":18,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -28,9 +28,10 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n-public class TestCacheExclusions extends PersistenceTestCase {\n+public class TestCacheExclusions extends AbstractCachedEMFTestCase {\n \n     private OpenJPAEntityManagerFactorySPI emf = null;\n \n@@ -80,12 +81,10 @@ public void tearDown() throws Exception {\n             for (ClassMapping mapping : ((ClassMapping[]) emf\n                 .getConfiguration().getMetaDataRepositoryInstance()\n                 .getMetaDatas())) {\n-                if (mapping.getTable() != null) {\n-                    Query q =\n-                        em.createNativeQuery(\"DROP TABLE \"\n-                            + mapping.getTable().getName());\n-                    q.executeUpdate();\n-                }\n+                Query q =\n+                    em.createNativeQuery(\"DROP TABLE \"\n+                        + mapping.getTable().getName());\n+                q.executeUpdate();\n             }\n             em.getTransaction().commit();\n             em.close();\n@@ -107,31 +106,31 @@ public void testCacheItems() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Item.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, false, false, true);\n     }\n \n     public void testCacheItemsAndPurchases() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Item.class,\n             Purchase.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, true, false, true);\n     }\n \n     public void testCacheItemsAndOrders() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Item.class,\n             Order.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, false, true, true);\n     }\n \n     public void testCachePurchasesAndOrders() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Purchase.class,\n             Order.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, true, true, false);\n     }\n \n     public void testExcludePurchases() {\n@@ -169,7 +168,7 @@ public void testIncludePurchaseItemExcludePurchase() {\n             Item.class }, new Class[] { Purchase.class });\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, false, true, true);\n+        assertCacheContents(cache, false, false, true);\n     }\n \n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n@@ -193,18 +192,17 @@ public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n             excludes.setLength(excludes.length() - 1); // remove last semicolon\n         }\n         StringBuilder dataCacheSettings = new StringBuilder();\n-        dataCacheSettings.append(\"default\");\n-        if (includes.length() > 0 || excludes.length() > 0) {\n-            dataCacheSettings.append(\"(\");\n+        boolean hasIncludeOrExclude = includes.length() > 0 || excludes.length() > 0;\n+        dataCacheSettings.append(hasIncludeOrExclude ? \"type-based(\" : \"default\");\n+        if (hasIncludeOrExclude) {\n             dataCacheSettings.append(includes);\n-            if (includes.length() > 0 && excludes.length() > 0) {\n+            if (includes.length() > 0 && excludes.length() > 0) \n                 dataCacheSettings.append(\",\");\n-            }\n             dataCacheSettings.append(excludes);\n             dataCacheSettings.append(\")\");\n         }\n         Map<String, String> props = new HashMap<String, String>();\n-        props.put(\"openjpa.DataCacheManager\", dataCacheSettings.toString());\n+        props.put(\"openjpa.CacheDistributionPolicy\", dataCacheSettings.toString());\n         props.put(\"openjpa.DataCache\", \"true\");\n         props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n         props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\""},{"sha":"ba7d62c3266a3e24a41f0eec8a383b14bfbc453d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPartitionedDataCache.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPartitionedDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPartitionedDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPartitionedDataCache.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.datacache.PartitionedDataCache;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.persistence.StoreCacheImpl;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n import org.apache.openjpa.util.UserException;\n@@ -32,8 +33,8 @@ public void setUp() {\n         super.setUp(\"openjpa.DataCache\", \"partitioned(PartitionType=concurrent,partitions=\"+\n                 \"'(name=a,cacheSize=100),(name=b,cacheSize=200)')\",\n                     \"openjpa.RemoteCommitProvider\", \"sjvm\",\n-        \"openjpa.DataCacheManager\", \n-        \"DistributionPolicy=org.apache.openjpa.persistence.datacache.TestPartitionedDataCache$TestPolicy\");\n+        \"openjpa.CacheDistributionPolicy\",\n+        \"org.apache.openjpa.persistence.datacache.TestPartitionedDataCache$TestPolicy\");\n     }\n     \n     public void testPropertyParsing() {\n@@ -76,7 +77,10 @@ public void testPropertyParsing() {\n         \n     }\n     \n-    public void testPolicy() {\n+    public void testPolicyConfiguration() {\n+        Object v = emf.getConfiguration().toProperties(true).get(\"openjpa.CacheDistributionPolicy\");\n+        String policyPlugin = emf.getConfiguration().getCacheDistributionPolicy();\n+        CacheDistributionPolicy policyInstance = emf.getConfiguration().getCacheDistributionPolicyInstance();\n         CacheDistributionPolicy policy = emf.getConfiguration().getDataCacheManagerInstance().getDistributionPolicy();\n         assertNotNull(policy);\n         assertTrue(policy.getClass() + \" not TestPolicy\", policy instanceof TestPolicy);\n@@ -105,6 +109,15 @@ void assertCacheConfiguration(String name, int size) {\n         public String selectCache(OpenJPAStateManager sm, Object context) {\n             return \"a\";\n         }\n+\n+        public void endConfiguration() {\n+        }\n+\n+        public void setConfiguration(Configuration conf) {\n+        }\n+\n+        public void startConfiguration() {\n+        }\n         \n     }\n }"},{"sha":"f45afafebfdeadbdf3eb98ecd26aba975b4a3865","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java","status":"modified","additions":43,"deletions":33,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence.datacache;\n \n+import java.util.Arrays;\n+\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.datacache.CacheStatistics;\n@@ -40,9 +42,8 @@\n     private StoreCache cache;\n     CacheStatistics stats;\n     public void setUp() {\n-        \n         super.setUp(CLEAR_TABLES, CachedPerson.class,\n-                \"openjpa.DataCache\", \"true\",\n+                \"openjpa.DataCache\", \"true(EnableStatistics=true)\",\n                 \"openjpa.QueryCache\", \"true\",\n                 \"openjpa.RemoteCommitProvider\", \"sjvm\");\n         cache = emf.getStoreCache();\n@@ -51,36 +52,57 @@ public void setUp() {\n         assertNotNull(stats);\n         em = emf.createEntityManager();\n         \n-        if (person == null) {\n-            person = createData();\n-        }\n+        person = createData();\n         stats.reset();\n         em.clear();\n     }\n     \n-    public CachedPerson createData() {\n-        em.getTransaction().begin();\n-        CachedPerson p = new CachedPerson();\n-        p.setId((int)System.currentTimeMillis());\n-        em.persist(p);\n-        em.getTransaction().commit();\n-        return p;\n+    /**\n+     * Test that the CacheStatistics is disabled by default.\n+     */\n+    public void testDefaultSettings() {\n+        Object[] props = {\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\"};\n+        OpenJPAEntityManagerFactory emf1 = createNamedEMF(\"second-persistence-unit\", props);\n+        \n+        assertFalse(emf1.getStoreCache().getStatistics().isEnabled());\n     }\n     \n     /**\n      * Finding an entity from a clean should hit the L2 cache.\n      */\n     public void testFind() {\n+        assertTrue(cache.getStatistics().isEnabled());\n         Object pid = person.getId();\n-        int N = 0;\n-        for (int i = 0; i < N; i++) {\n-            assertCached(person, pid, !L1Cached, L2Cached);\n-            long[] before = snapshot();\n-            CachedPerson p = em.find(CachedPerson.class, pid);\n-            long[] after = snapshot();\n-            assertDelta(before, after, 1, 1, 0); //READ:1 HIT:1, WRITE:0\n-            assertCached(p, pid, L1Cached, L2Cached);\n-        }\n+        assertCached(person, pid, !L1Cached, L2Cached);\n+        \n+        long[] before = snapshot();\n+        CachedPerson p = em.find(CachedPerson.class, pid);\n+        long[] after = snapshot();\n+\n+        assertDelta(before, after, 1, 1, 0); // READ:1 HIT:1, WRITE:0\n+        assertCached(p, pid, L1Cached, L2Cached);\n+\n+    }\n+    \n+    public void testMultipleUnits() {\n+        String[] props = {\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\"};\n+        OpenJPAEntityManagerFactory emf1 = createNamedEMF(\"test\", props);\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(\"empty-pu\", props);\n+        assertNotSame(emf1, emf2);\n+        assertNotSame(emf1.getStoreCache(), emf2.getStoreCache());\n+        assertNotSame(emf1.getStoreCache().getStatistics(), emf2.getStoreCache().getStatistics());\n+        assertNotSame(((StoreCacheImpl)emf1.getStoreCache()).getDelegate(), \n+                ((StoreCacheImpl)emf2.getStoreCache()).getDelegate());\n+        \n+    }\n+    \n+    CachedPerson createData() {\n+        em.getTransaction().begin();\n+        CachedPerson p = new CachedPerson();\n+        p.setId((int)System.currentTimeMillis());\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        return p;\n     }\n     \n     /**\n@@ -121,16 +143,4 @@ void print(String msg, CacheStatistics stats) {\n         System.err.println(msg + stats + \" H:\" + stats.getHitCount() + \" R:\" + stats.getReadCount() + \" W:\" + \n                 stats.getWriteCount());\n     }\n-    \n-    public void testMultipleUnits() {\n-        String[] props = {\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\"};\n-        OpenJPAEntityManagerFactory emf1 = createNamedEMF(\"test\", props);\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(\"empty-pu\", props);\n-        assertNotSame(emf1, emf2);\n-        assertNotSame(emf1.getStoreCache(), emf2.getStoreCache());\n-        assertNotSame(emf1.getStoreCache().getStatistics(), emf2.getStoreCache().getStatistics());\n-        assertNotSame(((StoreCacheImpl)emf1.getStoreCache()).getDelegate(), \n-                ((StoreCacheImpl)emf2.getStoreCache()).getDelegate());\n-        \n-    }\n }"},{"sha":"287ff6394143678970072116c027ce8d16976c3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigDecimalID.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigDecimalID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigDecimalID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigDecimalID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import java.math.BigDecimal;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-@Entity\r\n-public class EBigDecimalID {\r\n-    @Id\r\n-    @Column(precision=20,scale=5)\r\n-    private BigDecimal  id;\r\n-\r\n-    private String name;\r\n-    \r\n-    public EBigDecimalID() {}\r\n-\r\n-    public EBigDecimalID(BigDecimal id) {\r\n-        this.id = id;\r\n-        this.name = \"BigDecimalID \"+id;\r\n-    }\r\n-\r\n-    public BigDecimal getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(BigDecimal id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }   \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+@Entity\n+public class EBigDecimalID {\n+    @Id\n+    @Column(precision=20,scale=5)\n+    private BigDecimal  id;\n+\n+    private String name;\n+    \n+    public EBigDecimalID() {}\n+\n+    public EBigDecimalID(BigDecimal id) {\n+        this.id = id;\n+        this.name = \"BigDecimalID \"+id;\n+    }\n+\n+    public BigDecimal getId() {\n+        return id;\n+    }\n+\n+    public void setId(BigDecimal id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }   \n+}"},{"sha":"edf76d48f0dc1cf0bcb3a4c9c3dbb5e438f3dbf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigIntegerID.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigIntegerID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigIntegerID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EBigIntegerID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import java.math.BigInteger;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-@Entity\r\n-public class EBigIntegerID {\r\n-    @Id\r\n-    private BigInteger  id;\r\n-\r\n-    private String name;\r\n-    \r\n-    public EBigIntegerID() {}\r\n-\r\n-\r\n-    public EBigIntegerID(BigInteger id) {\r\n-        this.id = id;\r\n-        this.name = \"BigIntegerID \"+id;\r\n-    }\r\n-\r\n-    public BigInteger getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(BigInteger id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import java.math.BigInteger;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+@Entity\n+public class EBigIntegerID {\n+    @Id\n+    private BigInteger  id;\n+\n+    private String name;\n+    \n+    public EBigIntegerID() {}\n+\n+\n+    public EBigIntegerID(BigInteger id) {\n+        this.id = id;\n+        this.name = \"BigIntegerID \"+id;\n+    }\n+\n+    public BigInteger getId() {\n+        return id;\n+    }\n+\n+    public void setId(BigInteger id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+}"},{"sha":"d0f6b2f99a935f0083a36940c8dc0753459ceef9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigDecimalID.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigDecimalID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigDecimalID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigDecimalID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Entity\r\n-public class EDBigDecimalID {\r\n-    @Id\r\n-    @OneToOne\r\n-    private EBigDecimalID rid;    \r\n-\r\n-    private String name;\r\n-    \r\n-    public EDBigDecimalID() {}\r\n-    \r\n-    public EDBigDecimalID(EBigDecimalID rid) {\r\n-        this.rid = rid;\r\n-        this.name = \"Rel BigDecimalID \"+rid.getId();\r\n-    }\r\n-\r\n-    public EBigDecimalID getRid() {\r\n-        return rid;\r\n-    }\r\n-\r\n-    public void setRid(EBigDecimalID rid) {\r\n-        this.rid = rid;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class EDBigDecimalID {\n+    @Id\n+    @OneToOne\n+    private EBigDecimalID rid;    \n+\n+    private String name;\n+    \n+    public EDBigDecimalID() {}\n+    \n+    public EDBigDecimalID(EBigDecimalID rid) {\n+        this.rid = rid;\n+        this.name = \"Rel BigDecimalID \"+rid.getId();\n+    }\n+\n+    public EBigDecimalID getRid() {\n+        return rid;\n+    }\n+\n+    public void setRid(EBigDecimalID rid) {\n+        this.rid = rid;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"72b767b6d2b16673a403f71c3e15474af7c03333","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigIntegerID.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigIntegerID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigIntegerID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDBigIntegerID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Entity\r\n-public class EDBigIntegerID {\r\n-    @Id\r\n-    @OneToOne\r\n-    private EBigIntegerID rid;    \r\n-\r\n-    private String name;\r\n-    \r\n-    public EDBigIntegerID() {}\r\n-    \r\n-    public EDBigIntegerID(EBigIntegerID rid) {\r\n-        this.rid = rid;\r\n-        this.name = \"Rel BigIntegerID \"+rid.getId();\r\n-    }\r\n-\r\n-    public EBigIntegerID getRid() {\r\n-        return rid;\r\n-    }\r\n-\r\n-    public void setRid(EBigIntegerID rid) {\r\n-        this.rid = rid;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class EDBigIntegerID {\n+    @Id\n+    @OneToOne\n+    private EBigIntegerID rid;    \n+\n+    private String name;\n+    \n+    public EDBigIntegerID() {}\n+    \n+    public EDBigIntegerID(EBigIntegerID rid) {\n+        this.rid = rid;\n+        this.name = \"Rel BigIntegerID \"+rid.getId();\n+    }\n+\n+    public EBigIntegerID getRid() {\n+        return rid;\n+    }\n+\n+    public void setRid(EBigIntegerID rid) {\n+        this.rid = rid;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"528abe24cf291f0ed5ea254604d16fb6f6f2df7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDDateID.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDDateID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDDateID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDDateID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Entity\r\n-public class EDDateID {\r\n-    @Id\r\n-    @OneToOne\r\n-    private EDateID rid;    \r\n-\r\n-    private String name;\r\n-    \r\n-    public EDDateID() {}\r\n-    \r\n-    public EDDateID(EDateID rid) {\r\n-        this.rid = rid;\r\n-        this.name = \"Rel DateID \"+rid.getId();\r\n-    }\r\n-\r\n-    public EDateID getRid() {\r\n-        return rid;\r\n-    }\r\n-\r\n-    public void setRid(EDateID rid) {\r\n-        this.rid = rid;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class EDDateID {\n+    @Id\n+    @OneToOne\n+    private EDateID rid;    \n+\n+    private String name;\n+    \n+    public EDDateID() {}\n+    \n+    public EDDateID(EDateID rid) {\n+        this.rid = rid;\n+        this.name = \"Rel DateID \"+rid.getId();\n+    }\n+\n+    public EDateID getRid() {\n+        return rid;\n+    }\n+\n+    public void setRid(EDateID rid) {\n+        this.rid = rid;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"c77f3166375d21dcb60f19594dc587a4b7d5fd43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDSQLDateID.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDSQLDateID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDSQLDateID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDSQLDateID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Entity\r\n-public class EDSQLDateID {\r\n-    @Id\r\n-    @OneToOne\r\n-    private ESQLDateID rid;    \r\n-\r\n-    private String name;\r\n-    \r\n-    public EDSQLDateID() {}\r\n-    \r\n-    public EDSQLDateID(ESQLDateID rid) {\r\n-        this.rid = rid;\r\n-        this.name = \"Rel SQLDateID \"+rid.getId();\r\n-    }\r\n-\r\n-    public ESQLDateID getRid() {\r\n-        return rid;\r\n-    }\r\n-\r\n-    public void setRid(ESQLDateID rid) {\r\n-        this.rid = rid;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class EDSQLDateID {\n+    @Id\n+    @OneToOne\n+    private ESQLDateID rid;    \n+\n+    private String name;\n+    \n+    public EDSQLDateID() {}\n+    \n+    public EDSQLDateID(ESQLDateID rid) {\n+        this.rid = rid;\n+        this.name = \"Rel SQLDateID \"+rid.getId();\n+    }\n+\n+    public ESQLDateID getRid() {\n+        return rid;\n+    }\n+\n+    public void setRid(ESQLDateID rid) {\n+        this.rid = rid;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"9a9a5cb85a81e7096b5fe748e63bd0cef2f6af54","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDateID.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDateID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDateID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/EDateID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-@Entity\r\n-public class EDateID {\r\n-    @Id\r\n-    private Date  id; \r\n-    private String name;\r\n-    \r\n-    public EDateID() {}\r\n-\r\n-    public EDateID(Date id) {\r\n-        this.id = id;\r\n-        this.name = \"DateID \"+id;\r\n-    }\r\n-\r\n-    public Date getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(Date id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class EDateID {\n+    @Id\n+    private Date  id; \n+    private String name;\n+    \n+    public EDateID() {}\n+\n+    public EDateID(Date id) {\n+        this.id = id;\n+        this.name = \"DateID \"+id;\n+    }\n+\n+    public Date getId() {\n+        return id;\n+    }\n+\n+    public void setId(Date id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"45c693701ee60c63cf553977ba9ff5d948093c38","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/ESQLDateID.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/ESQLDateID.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/ESQLDateID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/ESQLDateID.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import java.sql.Date;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-@Entity\r\n-public class ESQLDateID {\r\n-    @Id\r\n-    private Date  id;\r\n-    private String name;\r\n-    \r\n-    public ESQLDateID() {}\r\n-\r\n-    public ESQLDateID(Date id) {\r\n-        this.id = id;\r\n-        this.name = \"SQLDateID \"+id;\r\n-    }\r\n-\r\n-    public Date getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(Date id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import java.sql.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+@Entity\n+public class ESQLDateID {\n+    @Id\n+    private Date  id;\n+    private String name;\n+    \n+    public ESQLDateID() {}\n+\n+    public ESQLDateID(Date id) {\n+        this.id = id;\n+        this.name = \"SQLDateID \"+id;\n+    }\n+\n+    public Date getId() {\n+        return id;\n+    }\n+\n+    public void setId(Date id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"d2546d743130ddb7a361505703989fa9a3fee6a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/TestDerivedIdentity.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/TestDerivedIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/TestDerivedIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/TestDerivedIdentity.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,123 +1,123 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.derivedid;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.Date;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-public class TestDerivedIdentity  extends SQLListenerTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(EBigDecimalID.class, EDBigDecimalID.class,\r\n-            EBigIntegerID.class, EDBigIntegerID.class,\r\n-            EDateID.class, EDDateID.class,\r\n-            ESQLDateID.class, EDSQLDateID.class,\r\n-            CLEAR_TABLES);\r\n-        populate();\r\n-    }\r\n-\r\n-    public void populate() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        \r\n-        for (int i = 0; i < 2; i++) {\r\n-            long time = (long) (System.currentTimeMillis() / 1000)+i*1317;\r\n-            BigDecimal did = new BigDecimal(time);            \r\n-            EBigDecimalID e1 = new EBigDecimalID(did);\r\n-            EDBigDecimalID e2 = new EDBigDecimalID(e1);\r\n-            em.persist(e1);\r\n-            em.persist(e2);\r\n-\r\n-            int time2 = (int) (System.currentTimeMillis() / 1000)+i*7131;\r\n-            BigInteger iid = new BigInteger(Integer.toString(time2));\r\n-            EBigIntegerID e3 = new EBigIntegerID(iid);\r\n-            EDBigIntegerID e4 = new EDBigIntegerID(e3);\r\n-            em.persist(e3);\r\n-            em.persist(e4);\r\n-\r\n-            Date id = new Date(time);\r\n-            EDateID e5 = new EDateID(id);\r\n-            EDDateID e6 = new EDDateID(e5);\r\n-            em.persist(e5);\r\n-            em.persist(e6);\r\n-            \r\n-            if (i == 0) {\r\n-                java.sql.Date sid = new java.sql.Date(time);\r\n-                ESQLDateID e7 = new ESQLDateID(sid);\r\n-                EDSQLDateID e8 = new EDSQLDateID(e7);\r\n-                em.persist(e7);\r\n-                em.persist(e8);\r\n-            }\r\n-        }\r\n-        \r\n-        em.getTransaction().begin();\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testDerivedIdentity() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query query = null;\r\n-        String str[] = {\r\n-            \"select e from EDDateID e\",\r\n-            \"select e from EDBigDecimalID e\",\r\n-            \"select e from EDBigIntegerID e\",\r\n-            \"select e from EDSQLDateID e\",\r\n-            \"select e from EDDateID e join fetch e.rid\",\r\n-            \"select e from EDBigDecimalID e join fetch e.rid\",\r\n-            \"select e from EDBigIntegerID e join fetch e.rid\",\r\n-            \"select e from EDSQLDateID e join fetch e.rid\",\r\n-        };\r\n-        for (int i = 0; i < str.length; i++) {\r\n-            query = em.createQuery(str[i]);\r\n-            List rs = query.getResultList();\r\n-            assertTrue(rs.size() > 0);\r\n-            for (int j = 0; j < rs.size(); j++) {\r\n-                Object e = rs.get(j);\r\n-                String name = null;\r\n-                Object oid = null;\r\n-                if (e instanceof EDDateID) {\r\n-                    name = ((EDDateID)e).getName();\r\n-                    oid = ((EDDateID)e).getRid().getId();\r\n-                } else if (e instanceof EDBigDecimalID) {\r\n-                    name = ((EDBigDecimalID)e).getName();\r\n-                    oid = ((EDBigDecimalID)e).getRid().getId();\r\n-                } else if (e instanceof EDBigIntegerID) {\r\n-                    name = ((EDBigIntegerID)e).getName();\r\n-                    oid = ((EDBigIntegerID)e).getRid().getId();\r\n-                } else if (e instanceof EDSQLDateID) {\r\n-                    name = ((EDSQLDateID)e).getName();\r\n-                    oid = ((EDSQLDateID)e).getRid().getId();\r\n-                }\r\n-                //System.out.println(name);\r\n-                //System.out.println(oid.toString());\r\n-                assertTrue(name.startsWith(\"Rel\"));\r\n-            }\r\n-        }\r\n-        \r\n-        em.close();\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.derivedid;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestDerivedIdentity  extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(EBigDecimalID.class, EDBigDecimalID.class,\n+            EBigIntegerID.class, EDBigIntegerID.class,\n+            EDateID.class, EDDateID.class,\n+            ESQLDateID.class, EDSQLDateID.class,\n+            CLEAR_TABLES);\n+        populate();\n+    }\n+\n+    public void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        for (int i = 0; i < 2; i++) {\n+            long time = (long) (System.currentTimeMillis() / 1000)+i*1317;\n+            BigDecimal did = new BigDecimal(time);            \n+            EBigDecimalID e1 = new EBigDecimalID(did);\n+            EDBigDecimalID e2 = new EDBigDecimalID(e1);\n+            em.persist(e1);\n+            em.persist(e2);\n+\n+            int time2 = (int) (System.currentTimeMillis() / 1000)+i*7131;\n+            BigInteger iid = new BigInteger(Integer.toString(time2));\n+            EBigIntegerID e3 = new EBigIntegerID(iid);\n+            EDBigIntegerID e4 = new EDBigIntegerID(e3);\n+            em.persist(e3);\n+            em.persist(e4);\n+\n+            Date id = new Date(time);\n+            EDateID e5 = new EDateID(id);\n+            EDDateID e6 = new EDDateID(e5);\n+            em.persist(e5);\n+            em.persist(e6);\n+            \n+            if (i == 0) {\n+                java.sql.Date sid = new java.sql.Date(time);\n+                ESQLDateID e7 = new ESQLDateID(sid);\n+                EDSQLDateID e8 = new EDSQLDateID(e7);\n+                em.persist(e7);\n+                em.persist(e8);\n+            }\n+        }\n+        \n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testDerivedIdentity() {\n+        EntityManager em = emf.createEntityManager();\n+        Query query = null;\n+        String str[] = {\n+            \"select e from EDDateID e\",\n+            \"select e from EDBigDecimalID e\",\n+            \"select e from EDBigIntegerID e\",\n+            \"select e from EDSQLDateID e\",\n+            \"select e from EDDateID e join fetch e.rid\",\n+            \"select e from EDBigDecimalID e join fetch e.rid\",\n+            \"select e from EDBigIntegerID e join fetch e.rid\",\n+            \"select e from EDSQLDateID e join fetch e.rid\",\n+        };\n+        for (int i = 0; i < str.length; i++) {\n+            query = em.createQuery(str[i]);\n+            List rs = query.getResultList();\n+            assertTrue(rs.size() > 0);\n+            for (int j = 0; j < rs.size(); j++) {\n+                Object e = rs.get(j);\n+                String name = null;\n+                Object oid = null;\n+                if (e instanceof EDDateID) {\n+                    name = ((EDDateID)e).getName();\n+                    oid = ((EDDateID)e).getRid().getId();\n+                } else if (e instanceof EDBigDecimalID) {\n+                    name = ((EDBigDecimalID)e).getName();\n+                    oid = ((EDBigDecimalID)e).getRid().getId();\n+                } else if (e instanceof EDBigIntegerID) {\n+                    name = ((EDBigIntegerID)e).getName();\n+                    oid = ((EDBigIntegerID)e).getRid().getId();\n+                } else if (e instanceof EDSQLDateID) {\n+                    name = ((EDSQLDateID)e).getName();\n+                    oid = ((EDSQLDateID)e).getRid().getId();\n+                }\n+                //System.out.println(name);\n+                //System.out.println(oid.toString());\n+                assertTrue(name.startsWith(\"Rel\"));\n+            }\n+        }\n+        \n+        em.close();\n+    }\n+}\n+"},{"sha":"c09a400b442539d647072626d20bc45419fb7ab6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -75,6 +75,14 @@ public void testPersistRelationshipToDetchedEntityZeroVersion() {\n \n     }\n \n+    /**\n+     * This testcase was added for OPENJPA-1482.\n+     */\n+    public void testSetVersionPropertyAccess() {\n+        NoDetachedStateEntityPropertyAccess entity = new NoDetachedStateEntityPropertyAccess();\n+        entity.setVersion(1);\n+    }\n+    \n     void loadDB() {\n         OpenJPAEntityManagerSPI em = emf.createEntityManager();\n         em.getTransaction().begin();"},{"sha":"b6383e212e38c15972d8f5ff088784abe62b6a3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"TBL7B\")\n+public class EntityA_Embed implements Serializable {\n+    @Id\n+    Integer id;\n+\n+    @Column(length=30)\n+    String name;\n+    \n+    @Basic(fetch=FetchType.LAZY)\n+    int age;\n+\n+    @Embedded\n+    protected Embed embed;\n+    \n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Embed getEmbed() {\n+        return embed;\n+    }\n+    \n+    public void setEmbed(Embed embed) {\n+        this.embed = embed;\n+    }\n+}\n+"},{"sha":"a9f2f3a38a7eb7cf1565d6be52a67cd89cfa57b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -36,6 +36,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.EntityTransaction;\n+import javax.persistence.PersistenceUnitUtil;\n import javax.persistence.Query;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -44,7 +45,9 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n public class TestEmbeddable extends SQLListenerTestCase {\n@@ -100,7 +103,7 @@ public void setUp() {\n             Embed_MappedToOne.class, Embed_MappedToOneCascadeDelete.class, \n             EntityA_Embed_MappedToOneCascadeDelete.class, EntityB2.class, \n             Book.class, Listing.class, Seller.class,\n-            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class,\n+            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class, EntityA_Embed.class,\n             EntityA_Embed_Complex.class, A.class, CLEAR_TABLES);\n             sql.clear();\n             DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n@@ -922,6 +925,35 @@ public void findEntityA_Embed_ToOne() {\n         assertNull(b);\n         em.close();\n     }\n+    \n+    public void testLazyFetchEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityA_Embed a = new EntityA_Embed();\n+        a.setId(ID);\n+        a.setName(\"name\");\n+        a.setAge(1);\n+        Embed emb = new Embed();\n+        emb.setIntVal1(1);\n+        emb.setIntVal1(2);\n+        emb.setIntVal1(3);\n+        a.setEmbed(emb);\n+        em.persist(a);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        // do not fetch emb\n+        kem.getFetchPlan().resetFetchGroups().removeFetchGroup(\"default\")\n+            .addField(EntityA_Embed.class, \"name\")\n+            .addField(EntityA_Embed.class, \"age\");\n+        a = em.find(EntityA_Embed.class, ID);\n+        assertNotNull(a);\n+        Embed embed = a.getEmbed();\n+        assertNull(embed);\n+        assertFalse(puu.isLoaded(a, \"embed\"));\n+    }\n \n     /*\n      * Find EntityA_Embed_MappedToOne"},{"sha":"3d8b30c6274b4c881d5ced5477e932b3c25b3aae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverridesXML.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverridesXML.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverridesXML.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverridesXML.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -82,6 +82,9 @@ public void testElementCollectionAssocOverrides() {\n             assertSQLFragnments(_sql, \"CREATE TABLE XML_EMBALIST .*\" +\n                 \" .*emba_entb.*emba_mentb\");\n         \n+            assertSQLFragnments(_sql, \"CREATE TABLE XML_EMBAMAP_3 .*\" +\n+                \" .*key_emba_entb.*key_emba_mentb\" + \n+                \" .*value_emba_entb.*value_emba_mentb\");\n         } \n         finally {\n             try {"},{"sha":"f08ae2cf3df0b5c0711a9f4b36de7204f238f2bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEmbedB.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEmbedB.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEmbedB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEmbedB.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed.attrOverrides;\n+\n+public class XMLAssocOverEmbedB {\n+    \n+    private String name;\n+    \n+    private XMLAssocOverEntityB eb;\n+\n+    private XMLAssocOverEntityB meb;\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setEb(XMLAssocOverEntityB eb) {\n+        this.eb = eb;\n+    }\n+\n+    public XMLAssocOverEntityB getEb() {\n+        return eb;\n+    }\n+\n+    public void setMeb(XMLAssocOverEntityB meb) {\n+        this.meb = meb;\n+    }\n+\n+    public XMLAssocOverEntityB getMeb() {\n+        return meb;\n+    }\n+}"},{"sha":"bfbed7d7a76876cc55e4a6b59ffe9a227b787af3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEntityA.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEntityA.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLAssocOverEntityA.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -19,12 +19,16 @@\n package org.apache.openjpa.persistence.embed.attrOverrides;\n \n import java.util.List;\n+import java.util.Map;\n \n public class XMLAssocOverEntityA {\n \n     private int id;\n     \n     private List<XMLAssocOverEmbed> embaList;\n+    \n+    private Map<XMLAssocOverEmbedB, XMLAssocOverEmbed> embaMap;\n+    \n \n     public void setEmbA(List<XMLAssocOverEmbed> embA) {\n         this.embaList = embA;\n@@ -34,6 +38,14 @@ public void setEmbA(List<XMLAssocOverEmbed> embA) {\n         return embaList;\n     }\n \n+    public void setEmbAMap(Map<XMLAssocOverEmbedB, XMLAssocOverEmbed> embAMap) {\n+        this.embaMap = embAMap;\n+    }\n+\n+    public Map<XMLAssocOverEmbedB, XMLAssocOverEmbed> getEmbAMap() {\n+        return embaMap;\n+    }\n+\n     public void setId(int id) {\n         this.id = id;\n     }"},{"sha":"25cedc71717d58642fbe0c47d198c8910e242bf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":56,"deletions":1,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -187,7 +187,7 @@ public void testEnumIdClass() {\n         em.close();\n     }\n     \n-    public void testEmbeddedIdContainedInIdClass() {\n+    public void testEmbeddedIdNestedInIdClass() {\n         EntityManager em = emf.createEntityManager();\n         EmployeeId5 eId1 = new EmployeeId5(\"Java\", \"Duke\");\n         Employee5 employee1 = new Employee5(eId1);\n@@ -204,8 +204,63 @@ public void testEmbeddedIdContainedInIdClass() {\n         DependentId5 depId1 = new DependentId5(\"1\", eId1);\n         Dependent5 newDep = em.find(Dependent5.class, depId1);\n         assertNotNull(newDep);\n+        em.getTransaction().begin();\n+        em.remove(newDep);\n+        em.getTransaction().commit();\n+        newDep = em.find(Dependent5.class, depId1);\n+        assertNull(newDep);        \n+        em.close();\n     }\n     \n+    public void testCountDistinctMultiCols() {\n+        EntityManager em = emf.createEntityManager(); \n+\n+        Employee2 emp1 = new Employee2();\n+        EmployeeId2 empId1 = new EmployeeId2();\n+        empId1.setFirstName(\"James\");\n+        empId1.setLastName(\"Bond\");\n+        emp1.setEmpId(empId1);\n+        \n+        Employee2 emp2 = new Employee2();\n+        EmployeeId2 empId2 = new EmployeeId2();\n+        empId2.setFirstName(\"James\");\n+        empId2.setLastName(\"Obama\");\n+        emp2.setEmpId(empId2);\n+        \n+        Dependent2 dep1 = new Dependent2();\n+        DependentId2 depId1 = new DependentId2();\n+        depId1.setEmpPK(empId1);\n+        depId1.setName(\"Alan\");\n+        dep1.setId(depId1);\n+        \n+        Dependent2 dep2 = new Dependent2();\n+        DependentId2 depId2 = new DependentId2();\n+        depId2.setEmpPK(empId2);\n+        depId2.setName(\"Darren\");\n+        dep2.setId(depId2);\n+        \n+        em.persist(emp1);\n+        em.persist(emp2);\n+        em.persist(dep1);\n+        em.persist(dep2);\n+        \n+        em.getTransaction().begin();\n+        em.flush();        \n+        em.getTransaction().commit();\n+        \n+        String[] jpqls = {\n+            \"SELECT COUNT (DISTINCT d2.emp) FROM Dependent2 d2\",\n+            \"select count (DISTINCT d2) from Dependent2 d2\",\n+        };\n+        \n+        for (int i = 0; i < jpqls.length; i++) {\n+            Query q = em.createQuery(jpqls[i]) ;\n+            Long o = (Long)q.getSingleResult();\n+            int count = (int)o.longValue();\n+            assertEquals(2, count);\n+        }\n+    }\n+\n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();"},{"sha":"74cd3538020477d170295ecef1a0705602adc979","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -26,6 +26,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.H2Dictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n@@ -411,7 +412,7 @@ public void testGeneratedIDENTITY() {\n     }\n \n     /**\n-     * Create necessary schemas if running on PostgreSQL as it does\n+     * Create necessary schemas if running on PostgreSQL or H2 as they do\n      * not create them automatically.\n      * Oracle, MySQL and MSSQL also don't create schemas automatically but\n      * we give up as they treat schemas in special ways.\n@@ -420,7 +421,7 @@ private void createSchemas() {\n         OpenJPAEntityManagerFactorySPI tempEmf = createEMF();\n         DBDictionary dict = ((JDBCConfiguration) tempEmf.getConfiguration()).getDBDictionaryInstance();\n         \n-        if (!(dict instanceof PostgresDictionary)) {\n+        if (!(dict instanceof PostgresDictionary || dict instanceof H2Dictionary)) {\n             closeEMF(tempEmf);\n             return;\n         }"},{"sha":"a71addfa7821ba1a0beb940b8d7cfaaac1f79a89","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.Index;\r\n-\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@Entity\r\n-@Table(name=\"WContractor\")\r\n-public class Contractor extends Employee {\r\n-    @Column(name=\"ContractorProp1\",length=10)\r\n-    @Basic\r\n-    private String ctrProp1;\r\n-\r\n-\r\n-    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\r\n-    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\r\n-    @Index\r\n-    private Department dept;\r\n-\r\n-    public Contractor() {\r\n-    }\r\n-\r\n-    public Contractor(String desc) {\r\n-        setDescription(desc);\r\n-    }\r\n-\r\n-    public String getCtrProp1() {\r\n-        return ctrProp1;\r\n-    }\r\n-\r\n-    public void setCtrProp1(String ctrProp1) {\r\n-        this.ctrProp1 = ctrProp1;\r\n-    }\r\n-\r\n-    public Department getDept() {\r\n-        return dept;\r\n-    }\r\n-\r\n-    public void setDept(Department dept) {\r\n-        this.dept = dept;\r\n-    }\r\n-\r\n-    public boolean equals(Object other) {\r\n-        if (other instanceof Contractor) {\r\n-            Contractor c = (Contractor) other;\r\n-            if (c.getOID() == this.getOID() &&\r\n-                c.getDept() == this.getDept())\r\n-                return true;\r\n-        }\r\n-        return false;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.Index;\n+\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@Entity\n+@Table(name=\"WContractor\")\n+public class Contractor extends Employee {\n+    @Column(name=\"ContractorProp1\",length=10)\n+    @Basic\n+    private String ctrProp1;\n+\n+\n+    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\n+    @Index\n+    private Department dept;\n+\n+    public Contractor() {\n+    }\n+\n+    public Contractor(String desc) {\n+        setDescription(desc);\n+    }\n+\n+    public String getCtrProp1() {\n+        return ctrProp1;\n+    }\n+\n+    public void setCtrProp1(String ctrProp1) {\n+        this.ctrProp1 = ctrProp1;\n+    }\n+\n+    public Department getDept() {\n+        return dept;\n+    }\n+\n+    public void setDept(Department dept) {\n+        this.dept = dept;\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other instanceof Contractor) {\n+            Contractor c = (Contractor) other;\n+            if (c.getOID() == this.getOID() &&\n+                c.getDept() == this.getDept())\n+                return true;\n+        }\n+        return false;\n+    }\n+}\n+"},{"sha":"30583b66408112d585d65e6396947406c5f3942c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@Entity\r\n-@Table(name=\"WDept\")\r\n-public class Department {\r\n-    @Id\r\n-    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\r\n-    private long OID; \r\n-\r\n-    @Basic\r\n-    private String description;\r\n-\r\n-\t@Column(name=\"DeptProp1\",length=10)\r\n-    @Basic\r\n-    private String deptProp1;\r\n-  \r\n-    @OneToMany(mappedBy=\"dept\",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\r\n-    private java.util.Collection<Contractor> ctrs;\r\n-    \r\n-\tpublic Department() {\r\n-\t}\r\n-\t\r\n-\tpublic Department(String desc) {\r\n-        setDescription(desc);\r\n-    }\r\n-\r\n-    public void setDescription(String description) {\r\n-        this.description = description;\r\n-    }\r\n-\r\n-    public String getDescription() {\r\n-        return description;\r\n-    }\r\n-    \r\n-    public long getOID() {\r\n-        return OID;\r\n-    }\r\n-    \r\n-    public void setOID(long oid) {\r\n-        this.OID = oid;\r\n-    }\r\n-\r\n-\t\r\n-\tpublic String getDeptProp1() {\r\n-\t\treturn deptProp1;\r\n-\t}\r\n-\r\n-\tpublic void setDeptProp1(String deptProp1) {\r\n-\t\tthis.deptProp1 = deptProp1;\r\n-\t}\r\n-\r\n-\tpublic java.util.Collection<Contractor> getCtrs() {\r\n-\t\treturn ctrs;\r\n-\t}\r\n-\r\n-\tpublic void setCtrs(java.util.Collection<Contractor> ctrs) {\r\n-\t\tthis.ctrs = ctrs;\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@Entity\n+@Table(name=\"WDept\")\n+public class Department {\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\n+    private long OID; \n+\n+    @Basic\n+    private String description;\n+\n+\t@Column(name=\"DeptProp1\",length=10)\n+    @Basic\n+    private String deptProp1;\n+  \n+    @OneToMany(mappedBy=\"dept\",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\n+    private java.util.Collection<Contractor> ctrs;\n+    \n+\tpublic Department() {\n+\t}\n+\t\n+\tpublic Department(String desc) {\n+        setDescription(desc);\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+    \n+    public long getOID() {\n+        return OID;\n+    }\n+    \n+    public void setOID(long oid) {\n+        this.OID = oid;\n+    }\n+\n+\t\n+\tpublic String getDeptProp1() {\n+\t\treturn deptProp1;\n+\t}\n+\n+\tpublic void setDeptProp1(String deptProp1) {\n+\t\tthis.deptProp1 = deptProp1;\n+\t}\n+\n+\tpublic java.util.Collection<Contractor> getCtrs() {\n+\t\treturn ctrs;\n+\t}\n+\n+\tpublic void setCtrs(java.util.Collection<Contractor> ctrs) {\n+\t\tthis.ctrs = ctrs;\n+\t}\n+}\n+"},{"sha":"d560bce11ff01bb3049cccb5dd3cba81686583be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"WEmployee\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-public abstract class Employee extends Person {\r\n-\r\n-    @Basic\r\n-    private String description;\r\n-\r\n-    public Employee() {\r\n-    }\r\n-\r\n-\tpublic void setDescription(String description) {\r\n-\t\tthis.description = description;\r\n-        super.setName(\"Name \"+description);\r\n-\t}\r\n-\r\n-\tpublic String getDescription() {\r\n-\t\treturn description;\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"WEmployee\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class Employee extends Person {\n+\n+    @Basic\n+    private String description;\n+\n+    public Employee() {\n+    }\n+\n+\tpublic void setDescription(String description) {\n+\t\tthis.description = description;\n+        super.setName(\"Name \"+description);\n+\t}\n+\n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+}\n+"},{"sha":"d101e0ab372cf3427dfe684ce5b8ed8ce4ff320b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.TableGenerator;\r\n-\r\n-@Entity\r\n-@Table(name=\"WPerson\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@TableGenerator(name=\"JWTGen\", table=\"JWT_GEN\", pkColumnName=\"PK\",\r\n-        valueColumnName=\"ID\")\r\n-\r\n-public abstract class Person {\r\n-    @Id\r\n-    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\r\n-    private long OID; \r\n-\r\n-    @Basic\r\n-    private String name;\r\n-\r\n-    public Person() {\r\n-    }\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\tpublic long getOID() {\r\n-\t\treturn OID;\r\n-\t}\r\n-\t\r\n-\tpublic void setOID(long oid) {\r\n-\t\tthis.OID = oid;\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+\n+@Entity\n+@Table(name=\"WPerson\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@TableGenerator(name=\"JWTGen\", table=\"JWT_GEN\", pkColumnName=\"PK\",\n+        valueColumnName=\"ID\")\n+\n+public abstract class Person {\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\n+    private long OID; \n+\n+    @Basic\n+    private String name;\n+\n+    public Person() {\n+    }\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic long getOID() {\n+\t\treturn OID;\n+\t}\n+\t\n+\tpublic void setOID(long oid) {\n+\t\tthis.OID = oid;\n+\t}\n+}\n+"},{"sha":"a8c7e88f8d1ca279e58d26224faa3bb55df486ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","status":"modified","additions":159,"deletions":159,"changes":318,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,159 +1,159 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-\r\n-public class TestInheritanceTypeJoinedQuery  extends SQLListenerTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Contractor.class, Employee.class, Department.class, Person.class,\r\n-            CLEAR_TABLES);\r\n-        populate();\r\n-    }\r\n-\r\n-    public void populate() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        \r\n-        Department d = new Department(\"IT\");\r\n-        for (int i = 0; i < 3; i++) {\r\n-            Contractor c = new Contractor(\"ctr\" + i);\r\n-            c.setDept(d);\r\n-            em.persist(c);\r\n-        }\r\n-        em.persist(d);\r\n-      \r\n-        em.getTransaction().begin();\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInheritanceTypeJoinedQuery() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query q = null;\r\n-        String qS = null;\r\n-        Department dept = null;\r\n-        \r\n-        qS = \"SELECT c.OID, c.dept FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS); \r\n-        List<Object[]> lResult = q.getResultList();\r\n-        for (Object[] resultElement : lResult) {\r\n-            Long oid = (Long)resultElement[0];\r\n-            dept = (Department)resultElement[1];\r\n-        }\r\n-        \r\n-        qS = \"SELECT c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS); \r\n-        for (Object resultElement : q.getResultList()) {\r\n-            Long oid = (Long)resultElement;\r\n-        }\r\n-       \r\n-        qS = \"SELECT d FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS); \r\n-        for (Department aResult: (List <Department>) q.getResultList()) {\r\n-            assertEquals(dept.getOID(), aResult.getOID());\r\n-        }\r\n-\r\n-        qS = \"SELECT c FROM Department d, Contractor c  where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\r\n-            //System.out.println(aResult.getDescription() + \", \" + aResult.getOID());\r\n-            assertEquals(dept.getOID(), aResult.getDept().getOID());\r\n-        }\r\n-        qS = \"SELECT c FROM Contractor c, Department d  where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\r\n-            assertEquals(dept.getOID(), aResult.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> cResult = q.getResultList();\r\n-        Contractor contractor = null;\r\n-        for (Object[] resultElement : cResult) {\r\n-            contractor = (Contractor)resultElement[0];\r\n-            Long oid = (Long)resultElement[1];\r\n-            assertTrue(contractor.getOID() == oid);\r\n-            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT c.OID, c FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> dResult = q.getResultList();\r\n-        for (Object[] resultElement : dResult) {\r\n-            Long oid = (Long)resultElement[0];\r\n-            contractor = (Contractor)resultElement[1];\r\n-            assertTrue(contractor.getOID() == oid);\r\n-            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> eResult = q.getResultList();\r\n-        for (Object[] resultElement : eResult) {\r\n-            Long oid = (Long)resultElement[1];\r\n-            contractor = (Contractor)resultElement[0];\r\n-            assertTrue(contractor.getOID() == oid);\r\n-            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n-        }\r\n-\r\n-        qS = \"SELECT c.OID, c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> fResult = q.getResultList();\r\n-        for (Object[] resultElement : fResult) {\r\n-            Long oid = (Long)resultElement[0];\r\n-            Contractor c = (Contractor)resultElement[1];\r\n-            assertTrue(oid.longValue() == c.getOID());\r\n-            assertEquals(dept.getOID(), c.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT d,c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT' \" +\r\n-                \" and c = ?1\";\r\n-        q = em.createQuery(qS);\r\n-        q.setParameter(1, contractor);\r\n-        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\r\n-            System.out.println(((Department)aResult[0]).getOID() + \", \" + ((Contractor)aResult[1]).getOID());\r\n-            assertTrue(contractor.equals(aResult[1]));\r\n-        }\r\n-                \r\n-        qS = \"SELECT c,d FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT' \" +\r\n-                \" and c = ?1\";\r\n-        q = em.createQuery(qS);\r\n-        q.setParameter(1, contractor);\r\n-        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\r\n-            System.out.println(((Contractor)aResult[0]).getOID() + \", \" + ((Department)aResult[1]).getOID());\r\n-            assertTrue(contractor.equals(aResult[0]));\r\n-        }\r\n-\r\n-        qS = \"SELECT p FROM Person p \";\r\n-        q = em.createQuery(qS);\r\n-        for (Object aResult: (List<Object>) q.getResultList()) {\r\n-            assertTrue(aResult instanceof Contractor);\r\n-        }\r\n-\r\n-        em.close();\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+\n+public class TestInheritanceTypeJoinedQuery  extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(Contractor.class, Employee.class, Department.class, Person.class,\n+            CLEAR_TABLES);\n+        populate();\n+    }\n+\n+    public void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        Department d = new Department(\"IT\");\n+        for (int i = 0; i < 3; i++) {\n+            Contractor c = new Contractor(\"ctr\" + i);\n+            c.setDept(d);\n+            em.persist(c);\n+        }\n+        em.persist(d);\n+      \n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testInheritanceTypeJoinedQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = null;\n+        String qS = null;\n+        Department dept = null;\n+        \n+        qS = \"SELECT c.OID, c.dept FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS); \n+        List<Object[]> lResult = q.getResultList();\n+        for (Object[] resultElement : lResult) {\n+            Long oid = (Long)resultElement[0];\n+            dept = (Department)resultElement[1];\n+        }\n+        \n+        qS = \"SELECT c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS); \n+        for (Object resultElement : q.getResultList()) {\n+            Long oid = (Long)resultElement;\n+        }\n+       \n+        qS = \"SELECT d FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS); \n+        for (Department aResult: (List <Department>) q.getResultList()) {\n+            assertEquals(dept.getOID(), aResult.getOID());\n+        }\n+\n+        qS = \"SELECT c FROM Department d, Contractor c  where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\n+            //System.out.println(aResult.getDescription() + \", \" + aResult.getOID());\n+            assertEquals(dept.getOID(), aResult.getDept().getOID());\n+        }\n+        qS = \"SELECT c FROM Contractor c, Department d  where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\n+            assertEquals(dept.getOID(), aResult.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> cResult = q.getResultList();\n+        Contractor contractor = null;\n+        for (Object[] resultElement : cResult) {\n+            contractor = (Contractor)resultElement[0];\n+            Long oid = (Long)resultElement[1];\n+            assertTrue(contractor.getOID() == oid);\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT c.OID, c FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> dResult = q.getResultList();\n+        for (Object[] resultElement : dResult) {\n+            Long oid = (Long)resultElement[0];\n+            contractor = (Contractor)resultElement[1];\n+            assertTrue(contractor.getOID() == oid);\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> eResult = q.getResultList();\n+        for (Object[] resultElement : eResult) {\n+            Long oid = (Long)resultElement[1];\n+            contractor = (Contractor)resultElement[0];\n+            assertTrue(contractor.getOID() == oid);\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\n+        }\n+\n+        qS = \"SELECT c.OID, c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> fResult = q.getResultList();\n+        for (Object[] resultElement : fResult) {\n+            Long oid = (Long)resultElement[0];\n+            Contractor c = (Contractor)resultElement[1];\n+            assertTrue(oid.longValue() == c.getOID());\n+            assertEquals(dept.getOID(), c.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT d,c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT' \" +\n+                \" and c = ?1\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, contractor);\n+        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\n+            System.out.println(((Department)aResult[0]).getOID() + \", \" + ((Contractor)aResult[1]).getOID());\n+            assertTrue(contractor.equals(aResult[1]));\n+        }\n+                \n+        qS = \"SELECT c,d FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT' \" +\n+                \" and c = ?1\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, contractor);\n+        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\n+            System.out.println(((Contractor)aResult[0]).getOID() + \", \" + ((Department)aResult[1]).getOID());\n+            assertTrue(contractor.equals(aResult[0]));\n+        }\n+\n+        qS = \"SELECT p FROM Person p \";\n+        q = em.createQuery(qS);\n+        for (Object aResult: (List<Object>) q.getResultList()) {\n+            assertTrue(aResult instanceof Contractor);\n+        }\n+\n+        em.close();\n+    }\n+}\n+"},{"sha":"0b3d559e03b3844803441602e52409cfe622aa40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -29,8 +29,8 @@\n import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\n import org.apache.openjpa.persistence.jdbc.query.domain.Game;\n import org.apache.openjpa.persistence.jdbc.query.procedure.DerbyProcedureList;\n-import \n-    org.apache.openjpa.persistence.jdbc.query.procedure.AbstractProcedureList;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.AbstractProcedureList;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -167,6 +167,7 @@ public void testNoReturnNoParamProcedure() {\n         }\n     }\n \n+    @AllowFailure(value=true, message=\"Waiting for resolution for JIRA DERBY-4558\")\n     public void testNoReturnMultiParamProcedure() {\n         if (procedureList != null) {\n             EntityManager em = emf.createEntityManager();\n@@ -244,6 +245,7 @@ public void testNoReturnMultiParamProcedure() {\n         }\n     }\n \n+    \n     public void testOneReturnNoParamProcedure() {\n         if (procedureList != null) {\n             EntityManager em = emf.createEntityManager();"},{"sha":"7daebdc8f0ef28d52c51efcdf78d82a57d2e8bea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","status":"modified","additions":87,"deletions":3,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.TemporalType;\n \n import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.jdbc.query.domain.TimeEntity;\n import org.apache.openjpa.persistence.jdbc.query.domain.TimeKeeper;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -63,16 +64,27 @@\n \tprivate EntityManager em;\n \t@Override\n \tpublic void setUp() throws Exception {\n-\t\tsuper.setUp(CLEAR_TABLES, TimeKeeper.class);\n+\t\tsuper.setUp(CLEAR_TABLES, TimeKeeper.class, TimeEntity.class);\n \t\tem = emf.createEntityManager();\n \t\t\n \t\tTimeKeeper pc = new TimeKeeper();\n \t\tpc.setDate(VALUE_DATE);\n \t\tpc.setTime(VALUE_TIME);\n \t\tpc.setTstamp(VALUE_TSTAMP);\n-\t\t\n+\n+        TimeEntity te = new TimeEntity();\n+        te.setName(\"name1\");\n+        te.setValue(1);\n+        te.setCal2Timestamp(PARAM_CALENDAR);\n+        te.setCal2Time(PARAM_CALENDAR);\n+        te.setCal2Date(PARAM_CALENDAR);\n+\t\tte.setUDate2SDate(VALUE_DATE);\n+\t\tte.setUDate2Time(VALUE_DATE);\n+\t\tte.setUDate2Timestamp(VALUE_DATE);\n+        \n \t\tem.getTransaction().begin();\n \t\tem.persist(pc);\n+\t\tem.persist(te);\n \t\tem.getTransaction().commit();\n \t}\n \t\n@@ -173,7 +185,61 @@ public void testPositionalParameterWithMismatchedValue() {\n         }\n \t}\n \t\n-\tvoid verifyParams(String jpql, Class<? extends Exception> error,\n+    public void testTemporalType() {\n+        EntityManager em = emf.createEntityManager(); \n+        Calendar endTime = PARAM_CALENDAR;\n+        Calendar startTime = PARAM_CALENDAR;\n+        startTime.add(14, -4);\n+        \n+        //(1) Calendar to Timestamp\n+        String jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.cal2Timestamp BETWEEN ?1 AND ?2\";\n+        Query q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startTime, TemporalType.TIMESTAMP);\n+        assertSetTemporalParameter(q, 2, endTime, TemporalType.TIMESTAMP);\n+        assertEquals(1, q.getResultList().size());\n+         \n+        //(2) Calendar to Time\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.cal2Time BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startTime, TemporalType.TIME);\n+        assertSetTemporalParameter(q, 2, endTime, TemporalType.TIME);\n+        assertEquals(1, q.getResultList().size());\n+        \n+        //(3)Calendar to Date\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.cal2Date BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startTime, TemporalType.DATE);\n+        assertSetTemporalParameter(q, 2, endTime, TemporalType.DATE);\n+        q.setParameter(1, startTime, TemporalType.DATE);\n+        q.setParameter(2, endTime, TemporalType.DATE);\n+        assertEquals(1, q.getResultList().size());\n+ \n+        //(4)Date to Timestamp\n+        java.util.Date endDate = VALUE_DATE;\n+        java.util.Date startDate = new Date(T1 - 1000);\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.udate2Timestamp BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startDate, TemporalType.TIMESTAMP);\n+        assertSetTemporalParameter(q, 2, endDate, TemporalType.TIMESTAMP);\n+        assertEquals(1, q.getResultList().size());\n+        \n+        //(5) Date to Time\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.udate2Time BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startDate, TemporalType.TIME);\n+        assertSetTemporalParameter(q, 2, endDate, TemporalType.TIME);\n+        assertEquals(1, q.getResultList().size());\n+        \n+        //(6) Date to Date\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.udate2SDate BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startDate, TemporalType.DATE);\n+        assertSetTemporalParameter(q, 2, endDate, TemporalType.DATE);\n+        assertEquals(1, q.getResultList().size());\n+    }\n+    \n+\n+    void verifyParams(String jpql, Class<? extends Exception> error,\n         Object... params) {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -198,4 +264,22 @@ void verifyParams(String jpql, Class<? extends Exception> error,\n \t\t}\n \t\tem.getTransaction().commit();\n \t}\n+    \n+    void assertSetTemporalParameter(Query q, int pos, Date v, TemporalType temporalType) {\n+        try {\n+            q.setParameter(pos, v, temporalType);\n+        } catch (Exception e) {\n+            fail(\"Fail in setting positional parameter [\" + pos + \"] to a value of \" + v);\n+        }\n+    }\n+\n+    void assertSetTemporalParameter(Query q, int pos, Calendar v, TemporalType temporalType) {\n+        try {\n+            q.setParameter(pos, v, temporalType);\n+        } catch (Exception e) {\n+            fail(\"Fail in setting positional parameter [\" + pos + \"] to a value of \" + v);\n+        }\n+    }\n+\n+    \n }"},{"sha":"90ce7a30a3fba06dc3e1d52ed8323d2f66ced082","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.domain;\n+\n+import java.util.Calendar;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+public class TimeEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+    String name;\n+    \n+    int value;\n+    \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private java.util.Calendar cal2Timestamp;\n+\n+    @Temporal(TemporalType.TIME)\n+    private java.util.Calendar cal2Time;\n+\n+    @Temporal(TemporalType.DATE)\n+    private java.util.Calendar cal2Date;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private java.util.Date udate2Timestamp;\n+\n+    @Temporal(TemporalType.TIME)\n+    private java.util.Date udate2Time;\n+\n+    @Temporal(TemporalType.DATE)\n+    private java.util.Date udate2SDate;\n+\n+    public TimeEntity() {\n+    }\n+\n+    public TimeEntity(int id, String name, int value) {\n+        this.id = id;\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public int getValue() {\n+        return value;\n+    }\n+    \n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+    \n+    public Calendar getCal2Timestamp() {\n+        return cal2Timestamp;\n+    }\n+\n+    public void setCal2Timestamp(Calendar cal2Timestamp) {\n+        this.cal2Timestamp = cal2Timestamp;\n+    }\n+\n+    public Calendar getCal2Time() {\n+        return cal2Time;\n+    }\n+\n+    public void setCal2Time(Calendar cal2Time) {\n+        this.cal2Time = cal2Time;\n+    }\n+\n+    public Calendar getCal2Date() {\n+        return cal2Date;\n+    }\n+\n+    public void setCal2Date(Calendar cal2Date) {\n+        this.cal2Date = cal2Date;\n+    }\n+\n+    public java.util.Date getUDate2Timestamp() {\n+        return udate2Timestamp;\n+    }\n+\n+    public void setUDate2Timestamp(java.util.Date udate2Timestamp) {\n+        this.udate2Timestamp = udate2Timestamp;\n+    }\n+\n+    public java.util.Date getUDate2Time() {\n+        return udate2Time;\n+    }\n+\n+    public void setUDate2Time(java.util.Date udate2Time) {\n+        this.udate2Time = udate2Time;\n+    }\n+\n+    public java.util.Date getUDate2SDate() {\n+        return udate2SDate;\n+    }\n+\n+    public void setUDate2SDate(java.util.Date udate2SDate) {\n+        this.udate2SDate = udate2SDate;\n+    }\n+}"},{"sha":"ee2641a75e9078e256ca533e243c0d8f2ca182aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -69,6 +69,30 @@ public void setUp() {\n         endEm(em);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public void testMathAndAggregate() {\n+        EntityManager em = currentEntityManager();\n+        String query[] = {\n+            \"SELECT SUM(c.age) + SUM(c.userid) FROM CompUser c\",\n+            \"SELECT SUM(c.age) * SUM(c.userid) FROM CompUser c\",\n+            \"SELECT SUM(c.age) - MIN(c.userid) + MAX(c.userid) FROM CompUser c\",\n+        };\n+        for (int i = 0; i < query.length; i++) {\n+            List<Long> rs = em.createQuery(query[i]).getResultList();\n+            assertTrue(rs.get(0) > 0);\n+        }\n+        String query2[] = {\n+                \"SELECT SUM(c.age) + SUM(c.userid), MIN(c.age) + MAX(c.age) FROM CompUser c\",\n+                \"SELECT SUM(c.age) * SUM(c.userid), AVG(c.age) FROM CompUser c\",\n+                \"SELECT SUM(c.age) - MIN(c.userid) + MAX(c.userid), AVG(c.age)/10 FROM CompUser c\",\n+        };\n+        for (int i = 0; i < query2.length; i++) {\n+            List<Object[]> rs = (List<Object[]>)em.createQuery(query2[i]).getResultList();\n+            assertNotNull(rs.get(0)[1]);\n+        }\n+        endEm(em);\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public void testCoalesceExpressions() {\n         EntityManager em = currentEntityManager();"},{"sha":"fa8bab88c637ca82cc685b9102cca81e17135233","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.kernel.PreparedQuery;\r\n-import org.apache.openjpa.kernel.PreparedQueryCache;\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest2;\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest4;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestQueryResultClassAPI extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(QueryTest1.class, QueryTest2.class, QueryTest4.class,\r\n-            \"openjpa.jdbc.QuerySQLCache\", \"true\",\r\n-            CLEAR_TABLES);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        QueryTest1 pc = null;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            pc = new QueryTest1();\r\n-            if (i < 5)\r\n-                pc.setNum(4);\r\n-            else\r\n-                pc.setNum(i + 10);\r\n-            pc.setDate(new java.util.Date(9999));\r\n-            em.persist(pc);\r\n-        }\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-\r\n-    public void testQueryWithResultClass() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String jpql = \"SELECT o FROM QueryTest1 o\";\r\n-\r\n-        Query query = em.createQuery(jpql, QueryTest1.class);\r\n-\r\n-        List rs = query.getResultList();\r\n-        assertTrue(rs.get(0) instanceof QueryTest1);\r\n-        PreparedQuery pq = getPreparedQueryCache().get(jpql);\r\n-        assertNotNull(pq);\r\n-\r\n-        Query query2 = em.createQuery(jpql, QueryTest1.class);\r\n-        PreparedQuery pq2 = getPreparedQueryCache().get(jpql);\r\n-        assertEquals(pq, pq2);\r\n-        rs = query2.getResultList();\r\n-        assertTrue(rs.get(0) instanceof QueryTest1);\r\n-\r\n-        jpql = \"SELECT o.datum FROM QueryTest1 o\";\r\n-        query = em.createQuery(jpql, java.util.Date.class);\r\n-        rs = query.getResultList();\r\n-        assertTrue(rs.get(0) instanceof java.util.Date);\r\n-\r\n-        query = em.createNamedQuery(\"named\", QueryTest1.class);\r\n-        rs = query.getResultList();\r\n-        assertTrue(rs.get(0) instanceof QueryTest1);\r\n-\r\n-        em.close();\r\n-    }\r\n-    \r\n-    PreparedQueryCache getPreparedQueryCache() {\r\n-        return emf.getConfiguration().getQuerySQLCacheInstance();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+\n+\n+import org.apache.openjpa.kernel.PreparedQuery;\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest2;\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest4;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestQueryResultClassAPI extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(QueryTest1.class, QueryTest2.class, QueryTest4.class,\n+            \"openjpa.jdbc.QuerySQLCache\", \"true\",\n+            CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        QueryTest1 pc = null;\n+        for (int i = 0; i < 10; i++) {\n+            pc = new QueryTest1();\n+            if (i < 5)\n+                pc.setNum(4);\n+            else\n+                pc.setNum(i + 10);\n+            pc.setDate(new java.util.Date(9999));\n+            em.persist(pc);\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+\n+    public void testQueryWithResultClass() {\n+        EntityManager em = emf.createEntityManager();\n+        String jpql = \"SELECT o FROM QueryTest1 o\";\n+\n+        Query query = em.createQuery(jpql, QueryTest1.class);\n+\n+        List rs = query.getResultList();\n+        assertTrue(rs.get(0) instanceof QueryTest1);\n+        PreparedQuery pq = getPreparedQueryCache().get(jpql);\n+        assertNotNull(pq);\n+\n+        Query query2 = em.createQuery(jpql, QueryTest1.class);\n+        PreparedQuery pq2 = getPreparedQueryCache().get(jpql);\n+        assertEquals(pq, pq2);\n+        rs = query2.getResultList();\n+        assertTrue(rs.get(0) instanceof QueryTest1);\n+\n+        jpql = \"SELECT o.datum FROM QueryTest1 o\";\n+        query = em.createQuery(jpql, java.util.Date.class);\n+        rs = query.getResultList();\n+        assertTrue(rs.get(0) instanceof java.util.Date);\n+\n+        query = em.createNamedQuery(\"named\", QueryTest1.class);\n+        rs = query.getResultList();\n+        assertTrue(rs.get(0) instanceof QueryTest1);\n+\n+        em.close();\n+    }\n+    \n+    PreparedQueryCache getPreparedQueryCache() {\n+        return emf.getConfiguration().getQuerySQLCacheInstance();\n+    }\n+}"},{"sha":"a14299bf006b9069ea1002589bd0533151bd16e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.persistence.relations.entity.IncompleteRelationshipChildEntity;\n+import org.apache.openjpa.persistence.relations.entity.IncompleteRelationshipParentEntity;\n+import org.apache.openjpa.persistence.relations.entity.IncompleteRelationshipSubclass;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import javax.persistence.EntityManager;\n+\n+/**\n+ * A test case that tests for incomplete foreign-key relationships and ensures\n+ * that proper database mechanics are enforced.\n+ */\n+public class TestIncompleteRelationship extends SingleEMFTestCase {\n+    private static final String CLIENT_ID = \"00000-00000-00000-00000-00000-00000\";\n+\n+    private static final String DISCOUNTS[] = {\n+        \"Five-Finger Discount\",\n+        \"Staff Discount\"\n+    };\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+                    IncompleteRelationshipParentEntity.class,\n+                    IncompleteRelationshipParentEntity.IncompleteRelationshipParentEntityPk.class,\n+                    IncompleteRelationshipChildEntity.class,\n+                    IncompleteRelationshipChildEntity.IncompleteRelationshipChildEntityPk.class,\n+                    IncompleteRelationshipSubclass.class,\n+                    \"openjpa.jdbc.QuerySQLCache\", \"true\");\n+    }\n+\n+    public void testIncompleteRelationship() {\n+        final EntityManager em = emf.createEntityManager();\n+        IncompleteRelationshipSubclass parent = null;\n+        IncompleteRelationshipChildEntity child = null;\n+\n+        em.getTransaction().begin();\n+        for (String s : DISCOUNTS) {\n+            child = new IncompleteRelationshipChildEntity(s, CLIENT_ID);\n+            em.persist(child);\n+        }\n+        em.getTransaction().commit();\n+\n+        for (int i = 1; i < 100; i++) {\n+            em.getTransaction().begin();\n+\n+            parent = new IncompleteRelationshipSubclass(i, CLIENT_ID);\n+//            parent.setChild(child);\n+\n+            em.persist(parent);\n+            em.getTransaction().commit();\n+\n+            parent = (IncompleteRelationshipSubclass)\n+                    em.createQuery(\"SELECT i \"+\n+                                   \"FROM IncompleteRelationshipSubclass i \"+\n+                                   \"WHERE   i.pk.id = :id \"+\n+                                   \"AND     i.pk.clientId = :clientId \")\n+              .setParameter(\"id\", i)\n+              .setParameter(\"clientId\", CLIENT_ID)\n+              .getSingleResult();\n+\n+            assertEquals(parent.getPk().getId(), i);\n+            assertNull(parent.getChild());\n+        }\n+    }\n+}"},{"sha":"3c01a3c0460b7255cc8ef97be57406bd4b464193","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations.entity;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+\n+/**\n+ * This is the child entity for the IncompleteRelationship test case.\n+ */\n+@Entity\n+public class IncompleteRelationshipChildEntity implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Embeddable\n+    public static class IncompleteRelationshipChildEntityPk implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+        \n+        @Column(name = \"DISCOUNT\", nullable = false, length = 120)\n+        protected String discount;\n+        @Column(name = \"CLIENT_ID\", nullable = false, length = 35)\n+        protected String clientId;\n+\n+        public IncompleteRelationshipChildEntityPk() {\n+        }\n+\n+        public IncompleteRelationshipChildEntityPk(String discount, String clientId) {\n+            this.discount = discount;\n+            this.clientId = clientId;\n+        }\n+\n+        public String getClientId() {\n+            return clientId;\n+        }\n+\n+        public void setClientId(String clientId) {\n+            this.clientId = clientId;\n+        }\n+\n+        public String getDiscount() {\n+            return discount;\n+        }\n+\n+        public void setDiscount(String discount) {\n+            this.discount = discount;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            final IncompleteRelationshipChildEntityPk other = (IncompleteRelationshipChildEntityPk) obj;\n+            if ((this.discount == null) ? (other.discount != null) : !this.discount.equals(other.discount)) {\n+                return false;\n+            }\n+            if ((this.clientId == null) ? (other.clientId != null) : !this.clientId.equals(other.clientId)) {\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int hash = 5;\n+            hash = 53 * hash + (this.discount != null ? this.discount.hashCode() : 0);\n+            hash = 53 * hash + (this.clientId != null ? this.clientId.hashCode() : 0);\n+            return hash;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"IncompleteRelationshipChildEntityPk[discount=\"+discount+\",\"+\n+                    \"clientId=\"+clientId+\"]\";\n+        }\n+    }\n+\n+    @EmbeddedId\n+    protected IncompleteRelationshipChildEntityPk pk;\n+\n+    public IncompleteRelationshipChildEntity() {\n+    }\n+\n+    public IncompleteRelationshipChildEntity(IncompleteRelationshipChildEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    public IncompleteRelationshipChildEntity(String discount, String clientId) {\n+        this(new IncompleteRelationshipChildEntityPk(discount, clientId));\n+    }\n+\n+    public IncompleteRelationshipChildEntityPk getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(IncompleteRelationshipChildEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final IncompleteRelationshipChildEntity other = (IncompleteRelationshipChildEntity) obj;\n+        if (this.pk != other.pk && (this.pk == null || !this.pk.equals(other.pk))) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        if (this.pk != null) {\n+            return pk.hashCode();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (this.pk != null) {\n+            return pk.toString();\n+        } else {\n+            return \"IncompleteRelationshipChildEntity[pk=null]\";\n+        }\n+    }\n+}"},{"sha":"d6f36d911d8894b91ce70bbfeeaa9640ee5e1096","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations.entity;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+\n+/**\n+ * This is the parent entity for the IncompleteRelationship test case.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+public class IncompleteRelationshipParentEntity implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    @Embeddable\n+    public static class IncompleteRelationshipParentEntityPk implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+\n+        @Column(name = \"ID\", nullable = false, precision = 9)\n+        protected int id;\n+        @Column(name = \"CLIENT_ID\", nullable = false, length = 35)\n+        protected String clientId;\n+\n+        public IncompleteRelationshipParentEntityPk() {\n+        }\n+\n+        public IncompleteRelationshipParentEntityPk(int id, String clientId) {\n+            this.id = id;\n+            this.clientId = clientId;\n+        }\n+\n+        public String getClientId() {\n+            return clientId;\n+        }\n+\n+        public void setClientId(String clientId) {\n+            this.clientId = clientId;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            final IncompleteRelationshipParentEntityPk other = (IncompleteRelationshipParentEntityPk) obj;\n+            if (this.id != other.id) {\n+                return false;\n+            }\n+            if ((this.clientId == null) ? (other.clientId != null) : !this.clientId.equals(other.clientId)) {\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int hash = 7;\n+            hash = 89 * hash + (this.id);\n+            hash = 89 * hash + (this.clientId != null ? this.clientId.hashCode() : 0);\n+            return hash;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"IncompleteRelationshipParentEntityPk[id=\"+id+\",\"+\n+                    \"clientId=\"+clientId+\"]\";\n+        }\n+    }\n+\n+    @EmbeddedId\n+    protected IncompleteRelationshipParentEntityPk pk;\n+    @JoinColumns({\n+        @JoinColumn(name = \"DEFAULT_DISCOUNT\", referencedColumnName = \"DISCOUNT\"),\n+        @JoinColumn(name = \"CLIENT_ID\", referencedColumnName = \"CLIENT_ID\")\n+    })\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    protected IncompleteRelationshipChildEntity child;\n+\n+    public IncompleteRelationshipParentEntity() {\n+    }\n+\n+    public IncompleteRelationshipParentEntity(IncompleteRelationshipParentEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    public IncompleteRelationshipParentEntity(int id, String clientId) {\n+        this(new IncompleteRelationshipParentEntityPk(id, clientId));\n+    }\n+\n+    public IncompleteRelationshipChildEntity getChild() {\n+        return child;\n+    }\n+\n+    public void setChild(IncompleteRelationshipChildEntity child) {\n+        this.child = child;\n+    }\n+\n+    public IncompleteRelationshipParentEntityPk getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(IncompleteRelationshipParentEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final IncompleteRelationshipParentEntity other = (IncompleteRelationshipParentEntity) obj;\n+        if (this.pk != other.pk && (this.pk == null || !this.pk.equals(other.pk))) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        if (this.pk != null) {\n+            return pk.hashCode();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (this.pk != null) {\n+            return pk.toString();\n+        } else {\n+            return \"IncompleteRelationshipParentEntity[pk=null]\";\n+        }\n+    }\n+}"},{"sha":"a91a5b59ca51bb480065d545129f61217abe0f18","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations.entity;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * This class simply extends IncompleteRelationshipParentEntity.\n+ */\n+@Entity\n+public class IncompleteRelationshipSubclass\n+        extends IncompleteRelationshipParentEntity {\n+    private static final long serialVersionUID = 1L;\n+\n+    public IncompleteRelationshipSubclass(int id, String clientId) {\n+        super(id, clientId);\n+    }\n+\n+    public IncompleteRelationshipSubclass(IncompleteRelationshipParentEntityPk pk) {\n+        super(pk);\n+    }\n+\n+    public IncompleteRelationshipSubclass() {\n+    }\n+}"},{"sha":"1fa0146e0c2c2170af2b402e476fc993c2aac2f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.util;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+public class OneToEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)\n+    private Collection<ToManyLazy> toManyLazy;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n+    private Collection<ToManyEager> toManyEager;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setToManyLazy(Collection<ToManyLazy> toManyEnt) {\n+        this.toManyLazy = toManyEnt;\n+    }\n+\n+    public Collection<ToManyLazy> getToManyLazy() {\n+        return toManyLazy;\n+    }\n+\n+    public void setToManyEager(Collection<ToManyEager> toManyEnt) {\n+        this.toManyEager = toManyEnt;\n+    }\n+\n+    public Collection<ToManyEager> getToManyEager() {\n+        return toManyEager;\n+    }\n+\n+}"},{"sha":"bf56296935994575efad19a4dcfa4d9a5bfa8090","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","status":"modified","additions":150,"deletions":2,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -21,6 +21,7 @@\n import java.sql.Date;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Random;\n \n import javax.persistence.EntityManager;\n@@ -32,6 +33,7 @@\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.ProviderUtil;\n \n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.PersistenceProviderImpl;\n@@ -43,7 +45,8 @@ public void setUp() {\n         setUp(CLEAR_TABLES, EagerEntity.class, LazyEmbed.class,\n             LazyEntity.class, EagerEmbed.class, RelEntity.class,\n             EagerEmbedRel.class, MapEntity.class,\n-            MapKeyEmbed.class, MapValEntity.class);\n+            MapKeyEmbed.class, MapValEntity.class,\n+            OneToEntity.class, ToManyLazy.class, ToManyEager.class);\n     }\n \n     /*\n@@ -251,7 +254,7 @@ public void testIsApplicationLoaded() {\n         em.close();\n     }\n \n-    public void testPCMapEager() {        \n+    public void testPCMapEager() {\n         PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n         EntityManager em = emf.createEntityManager();\n         \n@@ -296,6 +299,151 @@ public void testPCMapEager() {\n         em.close();\n     }\n \n+    /*\n+     * Verify load state is not loaded for null relationships or relationships\n+     * set to null.\n+     */\n+    public void testSetNullLazyRelationship() {\n+\n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            OneToEntity ote = new OneToEntity();\n+            assertFalse(puu.isLoaded(ote, \"toManyLazy\"));\n+            em.getTransaction().begin();\n+            em.persist(ote);\n+            em.getTransaction().commit();\n+            em.clear();\n+            ote = em.find(OneToEntity.class, ote.getId());\n+            // Field is lazy and not immediately loaded by the application\n+            assertFalse(puu.isLoaded(ote, \"toManyLazy\"));\n+            // Force load the lazy field\n+            ote.getToManyLazy();\n+            assertTrue(puu.isLoaded(ote, \"toManyLazy\"));\n+            \n+            OneToEntity ote2 = new OneToEntity();\n+            em.getTransaction().begin();\n+            em.persist(ote2);\n+            em.getTransaction().commit();\n+            // Field gets set to loaded upon commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            em.clear();\n+            ote2 = em.find(OneToEntity.class, ote2.getId());\n+            \n+            // Field is lazy and not immediately loaded by the application\n+            assertFalse(puu.isLoaded(ote2, \"toManyLazy\"));\n+            \n+            // Load by application\n+            List<ToManyLazy> tmes = new ArrayList<ToManyLazy>();\n+            for (int i = 0; i < 5; i++) {\n+                tmes.add(new ToManyLazy(\"ToMany\" + i));\n+            }\n+            em.getTransaction().begin();\n+            ote2.setToManyLazy(tmes);\n+            // App loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            em.getTransaction().commit();\n+            // Still loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            \n+            // Set to null - still loaded per spec.\n+            em.getTransaction().begin();\n+            ote2.setToManyLazy(null);\n+            // Considered loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            em.getTransaction().commit();\n+            //Loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+        }\n+        finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public void testSetNullEagerRelationship() {\n+\n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            OneToEntity ote = new OneToEntity();\n+            assertFalse(puu.isLoaded(ote, \"toManyEager\"));\n+            em.getTransaction().begin();\n+            em.persist(ote);\n+            em.getTransaction().commit();\n+            em.clear();\n+            ote = em.find(OneToEntity.class, ote.getId());\n+            // Field is eager and is immediately loaded by the application\n+            assertTrue(puu.isLoaded(ote, \"toManyEager\"));\n+            \n+            OneToEntity ote2 = new OneToEntity();\n+            em.getTransaction().begin();\n+            em.persist(ote2);\n+            // Field is null by default, but after persist, it is treated as loaded.\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.getTransaction().commit();\n+            // Field gets set to loaded upon commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.clear();\n+            ote2 = em.find(OneToEntity.class, ote2.getId());\n+            \n+            // Field is eager and is immediately loaded by the application\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            \n+            // Load by application\n+            List<ToManyEager> tmes = new ArrayList<ToManyEager>();\n+            for (int i = 0; i < 5; i++) {\n+                tmes.add(new ToManyEager(\"ToMany\" + i));\n+            }\n+            em.getTransaction().begin();\n+            ote2.setToManyEager(tmes);\n+            // App loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.getTransaction().commit();\n+            // Still loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            \n+            // Set to null - still loaded per spec.\n+            em.getTransaction().begin();\n+            ote2.setToManyEager(null);\n+            // Entity is considered loaded before commit\n+            assertTrue(puu.isLoaded(ote2));\n+            // Attribute is considered loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.getTransaction().commit();\n+            //Loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+        }\n+        finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public void testBasicTypeNotLoaded() {\n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        EntityManager em = emf.createEntityManager();\n+        EagerEntity ee = createEagerEntity();\n+        int id = ee.getId();\n+        \n+        em.getTransaction().begin();\n+        em.persist(ee);\n+        em.getTransaction().commit();\n+        em.clear();\n+        // name is not eagerly loaded, only eagerEmbed is eagerly loaded\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        kem.getFetchPlan().resetFetchGroups().removeFetchGroup(\"default\")\n+            .addField(EagerEntity.class, \"eagerEmbed\");\n+        ee = em.find(EagerEntity.class, id);\n+        assertEquals(true, puu.isLoaded(ee));\n+    }\n+\n     private EagerEntity createEagerEntity() {\n         EagerEntity ee = new EagerEntity();\n         ee.setId(new Random().nextInt());"},{"sha":"132429a2fa54d38c0f474235c65231959c621519","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.util;\n+\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+\n+@Entity\n+public class ToManyEager {\n+\n+    public ToManyEager() {\n+    }\n+\n+    public ToManyEager(String n) {\n+        setName(n);\n+    }\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    \n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"},{"sha":"06378166214ff1c9befa5b5a372d2c7af7d41fd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.util;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class ToManyLazy {\n+\n+    public ToManyLazy() {\n+    }\n+\n+    public ToManyLazy(String n) {\n+        setName(n);\n+    }\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    \n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"},{"sha":"870cda078fc15ff6819099e0b8fe8b923c6cd45e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -59,8 +59,7 @@ public void testNamedQueryInXmlUsingShortClassName() {\n             fail(\"should not be able to execute query using short class name \" +\n                 \"for entity that has an entity name specified\");\n         } catch (ArgumentException ae) {\n-            assertTrue(\n-                ae.getMessage().indexOf(\"Perhaps you meant SimpleXml,\") != -1);\n+            assertMarkerInErrorMessage(ae, \"The name \\\"SimpleXmlEntity\\\" is not a recognized entity\");\n         }\n     }\n \n@@ -74,8 +73,16 @@ public void testShortClassNameInDynamicQuery() {\n             fail(\"should not be able to execute query using short class name \" +\n                 \"for entity that has an entity name specified\");\n         } catch (ArgumentException ae) {\n-            assertTrue(\n-                ae.getMessage().indexOf(\"Perhaps you meant SimpleXml,\") != -1);\n+            assertMarkerInErrorMessage(ae, \"The name \\\"SimpleXmlEntity\\\" is not a recognized entity\");\n         }\n     }\n+    \n+    /**\n+     * Asserts that the given marker string appears in the error message.\n+     * Not a kosher way to verify -- but ...\n+     */\n+    void assertMarkerInErrorMessage(Exception ex, String marker) {\n+        String message = ex.getMessage();\n+        assertTrue(\"Can not find [\" + marker + \"] in the message [\" + message + \"]\", message.indexOf(marker) != -1);\n+    }\n }"},{"sha":"57718179936e6d260a6674832af7ef4f99bc47ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -28,7 +28,6 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -46,6 +45,10 @@\n  * Samples of platform specific sqls are under resources in\n  * TestXMLCustomerOrder.[dbname] files.\n  * \n+ * DB2 requires some special options on the database creation to allow for\n+ * native XML support:\n+ * create database test using codeset utf-8 territory us\n+ * \n  * @author Catalina Wei\n  * @author Milosz Tylenda\n  * @since 1.0.0"},{"sha":"c01f83e6202174b088494a334da8a1f7d71dcbb6","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" \n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n+    version=\"2.0\">\n+    <!--  Caching Persistence Units -->\n+    <persistence-unit name=\"cache-mode-invalid\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>INVALID</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"87e3d4998d76ae0a22f554bd5ce47a3367010938","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -37,6 +37,21 @@\n                 </association-override>\n                 <collection-table name=\"XML_EMBALIST\"/>\n             </element-collection>\n+            <element-collection name=\"embaMap\">\n+                <association-override name=\"key.eb\">\n+                    <join-column name=\"key_emba_entb\" />\n+                </association-override>\n+                <association-override name=\"key.meb\">\n+                    <join-column name=\"key_emba_mentb\" />\n+                </association-override>\n+                <association-override name=\"value.eb\">\n+                    <join-column name=\"value_emba_entb\" />\n+                </association-override>\n+                <association-override name=\"value.meb\">\n+                    <join-column name=\"value_emba_mentb\" />\n+                </association-override>\n+                <collection-table name=\"XML_EMBAMAP_3\"/>\n+            </element-collection>\n         </attributes>\n     </entity>\n     \n@@ -69,4 +84,21 @@\n             </one-to-one>\n         </attributes>\n     </embeddable>    \n+    \n+    <embeddable class=\"org.apache.openjpa.persistence.embed.attrOverrides.XMLAssocOverEmbedB\">\n+        <attributes>\n+            <basic name=\"name\"/>\n+            <many-to-one name=\"meb\">\n+                <cascade>\n+                    <cascade-all />\n+                </cascade>\n+            </many-to-one>\n+            <one-to-one name=\"eb\">\n+                <cascade>\n+                    <cascade-all />\n+                </cascade>\n+            </one-to-one>\n+        </attributes>\n+    </embeddable>    \n+    \n </entity-mappings>\n\\ No newline at end of file"},{"sha":"914eb423493a7fea1fa9495bb909a509d76d29c5","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-persistence.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -23,6 +23,7 @@\n     <persistence-unit name=\"AssocOverPU\">\n         <mapping-file>org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.embed.attrOverrides.XMLAssocOverEmbed</class>\n+        <class>org.apache.openjpa.persistence.embed.attrOverrides.XMLAssocOverEmbedB</class>\n         <class>org.apache.openjpa.persistence.embed.attrOverrides.XMLAssocOverEntityA</class>\n         <class>org.apache.openjpa.persistence.embed.attrOverrides.XMLAssocOverEntityB</class>\n             <properties>"},{"sha":"d88a00f2fc52b928c049135491fccde843c19872","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -21,12 +21,13 @@\n     Maven release plugin requires the project tag to be on a single line.\n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n     <modelVersion>4.0.0</modelVersion>\n \n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <groupId>org.apache.openjpa</groupId>\n@@ -36,25 +37,14 @@\n     <description>OpenJPA Persistence Locking Tests</description>\n \n     <properties>\n-        <openjpa.loglevel>INFO</openjpa.loglevel>\n-        <dbcp.maxActive>10</dbcp.maxActive>\n-        <dbcp.maxIdle>5</dbcp.maxIdle>\n-        <dbcp.minIdle>2</dbcp.minIdle>\n-        <dbcp.maxWait>10000</dbcp.maxWait>\n-        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n         <!-- have to use a larger waitTimeout to avoid lockmgr test failures -->\n         <derby.locks.waitTimeout>60</derby.locks.waitTimeout>\n         <derby.locks.deadlockTimeout>5</derby.locks.deadlockTimeout>\n-        <!-- @AllowFailure options:  ignore = silently skip test,\n-             log = execute test and log results but don't fail the test,\n-             anything else allows the test to execute normally\n-        -->\n-        <tests.openjpa.allowfailure>ignore</tests.openjpa.allowfailure>\n         <!-- set this =** on cmdline to skip all tests -->\n         <surefire.excludes.locking />\n     </properties>\n-    <profiles>\n \n+    <profiles>\n         <!-- Profile for testing with test-dynamic-enhancer -->\n         <profile>\n             <id>test-dynamic-enhancer</id>\n@@ -148,11 +138,13 @@\n                 </dependency>\n             </dependencies>\n             <properties>\n-                <mysql.version>5.1.6</mysql.version>\n                 <connection.driver.name>com.mysql.jdbc.Driver</connection.driver.name>\n                 <connection.url>${openjpa.mysql.url}</connection.url>\n                 <connection.username>${openjpa.mysql.username}</connection.username>\n                 <connection.password>${openjpa.mysql.password}</connection.password>\n+                <!-- DBCP overrides for MySQL testing -->\n+                <dbcp.maxIdle>0</dbcp.maxIdle>\n+                <dbcp.minIdle>0</dbcp.minIdle>\n             </properties>\n         </profile>\n \n@@ -702,7 +694,8 @@\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-persistence-jdbc</artifactId>\n             <version>${pom.version}</version>\n-            <classifier>test-base</classifier>\n+            <!-- <classifier>test-base</classifier> -->\n+            <type>test-jar</type>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n@@ -747,6 +740,19 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>"},{"sha":"93a3de7b9b1031d76eb75a8ede0ad0d09b1e87ff","filename":"openjpa-persistence/pom.xml","status":"modified","additions":18,"deletions":62,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -50,65 +50,21 @@\n         </dependency>        \n     </dependencies>\n     \n-    <profiles>\n-        <profile>\n-            <!-- =========================================================== -->\n-            <!-- Compiling with JDK5 excludes classes that explicitly import -->\n-            <!-- and use JDK6 classes/packages for annotation processing     -->\n-            <!-- =========================================================== -->\n-            <activation>\n-                <jdk>1.5</jdk>\n-            </activation>\n-            <id>jdk5-compiler</id>\n-            <build>\n-                <plugins>\n-                    <plugin>\n-                        <groupId>org.apache.maven.plugins</groupId>\n-                        <artifactId>maven-compiler-plugin</artifactId>\n-                        <configuration>\n-                            <excludes>\n-                                <exclude>**/AnnotationProcessor6.java</exclude>\n-                                <exclude>**/SourceAnnotationHandler.java</exclude>\n-                                <exclude>**/CompileTimeLogger.java</exclude>\n-                            </excludes>\n-                        </configuration>\n-                    </plugin>\n-                </plugins>\n-            </build>\n-        </profile>\n-        <profile>\n-            <!-- =========================================================== -->\n-            <!-- Compiling with JDK6+ compiler packages a META-INF/services  -->\n-            <!-- file for our annotation processor                           -->\n-            <!-- =========================================================== -->\n-            <activation>\n-                <jdk>[1.6,)</jdk>\n-            </activation>\n-            <id>jdk6-compiler</id>\n-            <build>\n-                <!--\n-                <plugins>\n-                    <plugin>\n-                        <groupId>org.apache.maven.plugins</groupId>\n-                        <artifactId>maven-antrun-plugin</artifactId>\n-                        <executions>\n-                            <execution>\n-                                <phase>process-classes</phase>\n-                                <configuration>\n-                                    <tasks>\n-                                        <echo file=\"${basedir}/src/main/resources/META-INF/services/javax.annotation.processing.Processor\"\n-                                        message=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\"/>\n-                                    </tasks>\n-                                </configuration>\n-                                <goals>\n-                                    <goal>run</goal>\n-                                </goals>\n-                            </execution>\n-                        </executions>\n-                    </plugin>\n-                </plugins>\n-                -->\n-            </build>\n-        </profile>\n-    </profiles>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n </project>"},{"sha":"9509216269b7822a04e40deb55f99761c662c223","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":30,"deletions":4,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1108,6 +1108,23 @@ static int toFlushBeforeQueries(FlushModeType flushMode) {\n         throw new ArgumentException(flushMode.toString(), null, null, false);\n     }\n \n+    /*\n+     * Used by Java EE Containers that wish to pool OpenJPA EntityManagers.  The specification\n+     * doesn't allow the closing of connections with the clear() method.  By introducing this\n+     * new method, we can do additional processing (and maybe more efficient processing) to \n+     * properly prepare an EM for pooling.\n+     */\n+    public void prepareForPooling() {\n+        assertNotCloseInvoked();\n+        clear();\n+        _broker.lock();  // since this direct close path is not protected...\n+        try {\n+            _broker.getStoreManager().close();\n+        } finally {\n+            _broker.unlock();\n+        }\n+    }\n+    \n     public void clear() {\n         assertNotCloseInvoked();\n         _broker.detachAll(this, false);\n@@ -1602,15 +1619,24 @@ public OpenJPACriteriaBuilder getCriteriaBuilder() {\n         return _broker.getSupportedProperties();\n     }\n \n+    /**\n+     * Unwraps this receiver to an instance of the given class, if possible.\n+     * \n+     * @exception if the given class is null, generic <code>Object.class</code> or a class\n+     * that is not wrapped by this receiver.  \n+     */\n     public <T> T unwrap(Class<T> cls) {\n         Object[] delegates = new Object[]{_broker.getInnermostDelegate(),\n             _broker.getDelegate(), _broker, this};\n         for (Object o : delegates) {\n-            if (cls.isInstance(o))\n+            if (cls != null && cls != Object.class && cls.isInstance(o))\n                 return (T)o;\n         }\n-        throw new PersistenceException(_loc.get(\"unwrap-em-invalid\", cls)\n-            .toString(), null, this, false);\n+        // Set this transaction to rollback only (as per spec) here because the raised exception \n+        // does not go through normal exception translation pathways\n+        RuntimeException ex = new IllegalArgumentException(_loc.get(\"unwrap-em-invalid\", cls).toString());\n+        setRollbackOnly(ex);\n+        throw ex;\n     }\n \n     public void setQuerySQLCache(boolean flag) {\n@@ -1686,7 +1712,7 @@ public void setProperty(String prop, Object value) {\n             if (!setKernelProperty(this.getFetchPlan(), prop, value)) {\n                 Log log = getConfiguration().getLog(OpenJPAConfiguration.LOG_RUNTIME);\n                 if (log.isWarnEnabled()) {\n-                    log.warn(_loc.get(\"bad-em-prop\", prop, value == null ? \"\" : value.getClass()+\":\" + value));\n+                    log.warn(_loc.get(\"ignored-em-prop\", prop, value == null ? \"\" : value.getClass()+\":\" + value));\n                  }\n             }\n         }"},{"sha":"1acf3685cda203c8d52cac7d63be480640e1884d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -156,7 +157,7 @@ private static LoadState isLoaded(OpenJPAStateManager sm, String attr,\n             if (fmds != null && fmds.length > 0) {\n                 pcs = addToLoadSet(pcs, sm);\n                 for (FieldMetaData fmd : fmds) {\n-                    if (fmd.isInDefaultFetchGroup()) {\n+                    if (requiresFetch(sm, fmd)) {\n                         if (!isLoadedField(sm, fmd, pcs)) {\n                             isLoaded = false;\n                             break;\n@@ -173,6 +174,12 @@ private static LoadState isLoaded(OpenJPAStateManager sm, String attr,\n         return isLoaded ? LoadState.LOADED : LoadState.NOT_LOADED;        \n     }\n     \n+    private static boolean requiresFetch(OpenJPAStateManager sm, FieldMetaData fmd) {\n+        if (sm instanceof StateManagerImpl)\n+            return ((StateManagerImpl)sm).requiresFetch(fmd);\n+        return fmd.isInDefaultFetchGroup();\n+    }\n+\n     private static HashSet<OpenJPAStateManager> addToLoadSet(\n         HashSet<OpenJPAStateManager> pcs, OpenJPAStateManager sm) {\n         if (pcs == null) {"},{"sha":"9941cf6f78934e474d7e32b8fdb7d0c6337e9741","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -22,6 +22,7 @@\n import java.lang.instrument.IllegalClassFormatException;\n import java.security.AccessController;\n import java.security.ProtectionDomain;\n+import java.util.HashMap;\n import java.util.Map;\n \n import javax.persistence.EntityManager;\n@@ -46,6 +47,7 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n@@ -186,10 +188,8 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n                     log.warn(_loc.get(\"transformer-registration-error\", pui));\n                 }\n             }\n-\n             OpenJPAConfiguration conf = factory.getConfiguration();\n-            // OPENJPA-1460 Fix scope visibility of orm.xml when it is packaged in both ear file and war file\n-            conf.setPersistenceUnitRootUrl(pui.getPersistenceUnitRootUrl());\n+            setPersistenceEnvironmentInfo(conf, pui);\n             _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n \n             // Create appropriate LifecycleEventManager\n@@ -208,6 +208,20 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n         }\n     }\n \n+    public void setPersistenceEnvironmentInfo(OpenJPAConfiguration conf, PersistenceUnitInfo pui) {\n+        // OPENJPA-1460 Fix scope visibility of orm.xml when it is packaged in both ear file and war file\n+        if (conf instanceof OpenJPAConfigurationImpl) {\n+            Map<String, Object> peMap =((OpenJPAConfigurationImpl)conf).getPersistenceEnvironment();\n+            if (peMap == null) {\n+                peMap = new HashMap<String, Object>();\n+                ((OpenJPAConfigurationImpl)conf).setPersistenceEnvironment(peMap);\n+            }\n+            peMap.put(AbstractCFMetaDataFactory.PERSISTENCE_UNIT_ROOT_URL, pui.getPersistenceUnitRootUrl());\n+            peMap.put(AbstractCFMetaDataFactory.MAPPING_FILE_NAMES, pui.getMappingFileNames());\n+            peMap.put(AbstractCFMetaDataFactory.JAR_FILE_URLS, pui.getJarFileUrls());\n+        }\n+    }\n+    \n     /*\n      * Returns a ProviderUtil for use with entities managed by this\n      * persistence provider."},{"sha":"df2f0289a2d5da60623f1219307936c3c986fb8e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -473,6 +473,10 @@ public boolean equals(Object other) {\n     public <T> T unwrap(Class<T> cls) {\n         Object[] delegates = new Object[]{_query.getInnermostDelegate(), \n             _query.getDelegate(), _query, this};\n+        if (cls == null || cls == Object.class) {\n+            throw new PersistenceException(_loc.get(\"unwrap-em-invalid\", cls)\n+                    .toString(), null, this, false);\n+        }\n         for (Object o : delegates) {\n             if (cls.isInstance(o))\n                 return (T)o;"},{"sha":"176727a4db86c8008d5437781d5e7c20be041116","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -27,6 +27,7 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.GenericArrayType;\n import java.lang.reflect.ParameterizedType;\n+import java.security.AccessController;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -51,6 +52,7 @@\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.kernel.exps.Resolver;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -302,7 +304,7 @@ static CollectionType categorizeCollection(Class<?> cls) {\n             mcls.getName(), cls.getName(), anno.value()).getMessage());\n         }\n         \n-        Field[] mfields = mcls.getDeclaredFields();\n+        Field[] mfields = AccessController.doPrivileged(J2DoPrivHelper.getDeclaredFieldsAction(mcls));\n     \tfor (Field mf : mfields) {\n             try {\n                 ParameterizedType mfType = getParameterziedType(mf);"},{"sha":"fee0cb8fa2479278bf4054dd182be74364f2123d","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -115,6 +115,9 @@ missing-param-name: The parameter \"{1}\" in query \"{0}\" is not found in the \\\n \tavailable list of parameters \"{2}\".\n bad-em-prop: Invalid EntityManager property passed to createEntityManager. \\\n \tKey: \"{0}\", Value: \"{1}\".\n+ignored-em-prop: An unrecognized EntityManager property was passed to \\\n+\tcreateEntityManager and will be ignored. \\\n+\tKey: \"{0}\", Value: \"{1}\".\n bad-em-props: Invalid EntityManager properties passed to createEntityManager. \\\n \tSee nested exceptions for details.\n system-listener-err: An error occurred invoking system entity listener \\\n@@ -160,7 +163,7 @@ EntityManagerFactory-interface: org.apache.openjpa.persistence.EntityManagerFact\n param-style-mismatch: Query \"{0}\" is declared with named parameters \"{1}\" but \\\n \tactual parameters \"{2}\" are bound by position.\n param-missing: Parameter \"{0}\" declared in \"{1}\" but is missing from the bound \\\n-\tparameters \"{2}\".\n+\tparameter keys \"{2}\".\n param-extra: Parameter \"{0}\" is bound to \"{1}\" but is missing from the \\\n \tdeclared parameters \"{2}\".\n param-type-mismatch: Parameter \"{0}\" declared in \"{1}\" is set to value of \\\n@@ -195,8 +198,6 @@ dynamic-agent: OpenJPA dynamically loaded the class enhancer. Any classes \\\n vlem-creation-info: OpenJPA dynamically loaded a validation provider.\n no-embeddable-metadata: Unable to load metadata for embeddable class \"{0}\".\n \n-param-missing: {0} is not declared in query \"{1}\". \\\n-    Declared parameter keys are \"{2}\".\n param-missing-pos: Parameter position {0} is not declared in query \"{1}\". \\\n \tDeclared parameter keys are \"{2}\".\n param-missing-name: Parameter named \"{0}\" is not declared in query \"{1}\". \\\n@@ -207,20 +208,22 @@ param-pos-in-criteria: Can not set value for positional parameter {0} \\\n \tfor Criteria Query parameters.\n params-named-in-native: Can not set value for named parameter \"{0}\" \\\n \tbecause the executable query is created by a native query \"{1}\". \\\n-\tUse only 1-based positional parameter to set values \\in native queries.\n+\tUse only 1-based positional parameter to set values in native queries.\n param-null-assignable: {0} can not be assigned to null.\n param-value-not-assignable: {0} can not be assigned to \"{1}\" of {2}.\n param-not-bound: {0} is not bound to any value.\n param-pos-named-mix: {0} can not be used in query \" {1}\" because JPA does \\\n     not allow to mix named and positional parameters in a query. Existing \\\n \tparameters are \"{2}\".\n-param-no-key: {0} has either a name nor a position as identifier. \t\n+param-no-key: {0} has neither a name nor a position as identifier. \t\n tuple-element-not-found: TupleElement \"{0}\" \"{1}\"  was not found in this Tuple. Contents of the Tuple: {2}.\n tuple-was-null: Input argument {0} was null. Unable to proceed.\n tuple-element-wrong-type: TupleElement {0} of value {1} of actual type {2} can not be converted to {3}.\n tuple-alias-not-found: Alias \"{0}\" was not found in this tuple. Aliases found : \"{1}\"\n tuple-exceeded-size : Attempt to access TupleElement at illegal index {0}. There are only {1} elements available.\n create-emf-error: Failed to create a provider for \"{0}\".\n+create-emf-depend-error: Failed to create a provider for \"{0}\" because a \\\n+\trequired runtime dependency is missing.\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query.\n-cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  \n\\ No newline at end of file\n+cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  "},{"sha":"2d923935097f01ad7b5ceb7c1aa6ea3cfc01727c","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -47,7 +47,7 @@ mmg-bad-source: Wrong value \"{0}\" of -Asource option to specify the target \\\n \tpositive number. Setting default value as Java {1} compiler.\n mmg-bad-naming: Naming policy for meta-featureSelection classes specified in -Anaming \\\n \toption \"{0}\" can not be used due to \"{1}\". Using default naming policy.\n-mmg-bad-log: Log level specified is -Alog option \"{0}\" is not recognized. \\\n+mmg-bad-log: Log level specified in -Alog option \"{0}\" is not recognized. \\\n \tLogging at default \"{1}\" level.  \n \n meta-class-no-anno: Meta class \"{0}\" registered for \"{1}\" is not annotated \\"},{"sha":"567ba4deec84c77583bf5f38be9e8a343f274bf6","filename":"openjpa-project/BUILDING.txt","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/BUILDING.txt","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/BUILDING.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/BUILDING.txt?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -18,16 +18,17 @@ limitations under the License.\n ===============================================================================\n \n These instructions describe how to build OpenJPA from source code using the\n-Apache Maven 2 build too. They are written for use from the console, and are \n+Apache Maven 2 build tool. They are written for use from the console, and are \n known to work on Linux and Mac OSX. They are also reported to work from Windows.\n \n The most up to date version of these instructions may be found on the OpenJPA \n website at http://openjpa.apache.org/building-openjpa.html\n \n-   1. Ensure that Java 1.5 or 1.6 is installed and on your path by running:\n+   1. Ensure that Java SE 6 is installed and on your path by running:\n           java -version\n-      OpenJPA requires Java 1.5 or later, but some features are only available\n-      with Java 6.\n+      OpenJPA requires Java 1.6 or later to build, but still supports using\n+      Java SE 5 for runtime even though some features are only available\n+      with Java SE 6.\n    2. Install the build tool Apache Maven 2.0.9 or later, from:\n           http://maven.apache.org/\n       If it is installed correctly, typing mvn -v from the console will result\n@@ -64,9 +65,9 @@ An example session as as follows:\n $ cd /tmp/\n \n $ java -version\n-java version \"1.5.0_20\"\n-Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_20-b02-315)\n-Java HotSpot(TM) Client VM (build 1.5.0_20-144, mixed mode, sharing)\n+java version \"1.6.0_17\"\n+Java(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025)\n+Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101, mixed mode)\n \n $ mvn -v\n Maven version: 2.0.10\n@@ -91,7 +92,7 @@ java\n  ...\n \n A  trunk/openjpa-persistence/pom.xml\n-Checked out revision 822485.\n+Checked out revision 915725.\n \n $ cd trunk/\n \n@@ -127,33 +128,32 @@ $ mvn clean install -DfailIfNoTests=false -Dtest=\n [INFO] ------------------------------------------------------------------------\n [INFO] Reactor Summary:\n [INFO] ------------------------------------------------------------------------\n-[INFO] OpenJPA Parent POM .................................... SUCCESS [4.767s]\n-[INFO] OpenJPA Utilities Library ............................. SUCCESS [13.592s]\n-[INFO] OpenJPA Kernel ........................................ SUCCESS [14.810s]\n-[INFO] OpenJPA JDBC .......................................... SUCCESS [6.430s]\n-[INFO] OpenJPA Persistence ................................... SUCCESS [5.194s]\n-[INFO] OpenJPA Persistence JDBC .............................. SUCCESS [56.944s]\n-[INFO] OpenJPA Persistence Locking Tests ..................... SUCCESS [2.662s]\n-[INFO] OpenJPA XML Store ..................................... SUCCESS [1.423s]\n-[INFO] OpenJPA Slice ......................................... SUCCESS [2.742s]\n-[INFO] OpenJPA Aggregate Jar ................................. SUCCESS [10.928s]\n-[INFO] OpenJPA Aggregate Jar with Dependencies ............... SUCCESS [4.026s]\n-[INFO] OpenJPA Project Docs and Assemblies ................... SUCCESS [32.172s]\n-[INFO] OpenJPA Examples ...................................... SUCCESS [1.085s]\n-[INFO] OpenJPA Integration Tests ............................. SUCCESS [0.195s]\n-[INFO] OpenJPA Integration Tests - Examples .................. SUCCESS [0.128s]\n-[INFO] OpenJPA Integration Tests - JPA TCK ................... SUCCESS [0.136s]\n-[INFO] OpenJPA Integration Tests - Bean Validation ........... SUCCESS [2.956s]\n+[INFO] OpenJPA Parent POM .................................... SUCCESS [8.999s]\n+[INFO] OpenJPA Utilities Library ............................. SUCCESS [22.600s]\n+[INFO] OpenJPA Kernel ........................................ SUCCESS [26.888s]\n+[INFO] OpenJPA JDBC .......................................... SUCCESS [13.231s]\n+[INFO] OpenJPA Persistence ................................... SUCCESS [8.635s]\n+[INFO] OpenJPA Persistence JDBC .............................. SUCCESS [1:33.5s]\n+[INFO] OpenJPA Persistence Locking Tests ..................... SUCCESS [3.857s]\n+[INFO] OpenJPA XML Store ..................................... SUCCESS [1.294s]\n+[INFO] OpenJPA Slice ......................................... SUCCESS [3.779s]\n+[INFO] OpenJPA Aggregate Jar ................................. SUCCESS [21.544s]\n+[INFO] OpenJPA Aggregate Jar with Dependencies ............... SUCCESS [8.322s]\n+[INFO] OpenJPA Project Docs and Assemblies ................... SUCCESS [1:12.6s]\n+[INFO] OpenJPA Examples ...................................... SUCCESS [1.049s]\n+[INFO] OpenJPA Integration Tests ............................. SUCCESS [0.341s]\n+[INFO] OpenJPA Integration Tests - Examples .................. SUCCESS [0.278s]\n+[INFO] OpenJPA Integration Tests - JPA TCK ................... SUCCESS [0.229s]\n+[INFO] OpenJPA Integration Tests - Bean Validation ........... SUCCESS [4.028s]\n [INFO] ------------------------------------------------------------------------\n [INFO] ------------------------------------------------------------------------\n [INFO] BUILD SUCCESSFUL\n [INFO] ------------------------------------------------------------------------\n-[INFO] Total time: 2 minutes 42 seconds\n-[INFO] Finished at: Wed Oct 07 12:38:44 EDT 2009\n-[INFO] Final Memory: 96M/291M\n+[INFO] Total time: 4 minutes 56 seconds\n+[INFO] Finished at: Wed Feb 24 09:01:40 EST 2010\n+[INFO] Final Memory: 110M/376M\n [INFO] ------------------------------------------------------------------------\n \n-\n $ ls openjpa-project/target/site/downloads/\n \n apache-openjpa-2.0.0-SNAPSHOT-binary.zip"},{"sha":"ebbfc4037df1d4106c01ac7f3a96c85cc62cdc7c","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":225,"deletions":24,"changes":249,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,5 +1,5 @@\n-                           OpenJPA 2.0.0 Milestone 4\n-                           -------------------------\n+                          Apache OpenJPA 2.0.0-beta2\n+                          --------------------------\n \n Content\n -------\n@@ -19,26 +19,69 @@ Content\n \n Overview\n --------\n-   This distribution of Apache OpenJPA builds upon the prior releases which \n-   provided a feature-rich implementation of the Java Persistence API (JPA 1.0)\n-   part of Java Community Process JSR-220 (Enterprise JavaBeans 3.0) by\n-   implementing the specification functionality from the final Java\n-   Community Process JSR-317 (JPA 2.0) release on 12/10/2009.\n-\n-   Some of the key features included in this distribution:\n-     * TBD\n-\n-\n-   This Milestone 4 distribution is based upon the contributions provided in\n-   development iterations 12 through XXX, as defined in the JPA 2.0 Roadmap at:\n-       http://openjpa.apache.org/jpa-20-roadmap.html\n+   The Apache OpenJPA community is proud to release a Beta 2 distribution of\n+   OpenJPA 2.0.0. This distribution is based on the final JSR 317 Java \n+   Persistence API, Version 2.0 specification and passes the JPA 2.0 TCK,\n+   while remaining backwards compatiable with prior releases based on the\n+   Java Persistence API (JPA 1.0) part of Java Community Process JSR-220\n+   (Enterprise JavaBeans 3.0). Included in this release are many enhancements,\n+   fixes, and new functionality; giving developers access to all the new\n+   features of JPA 2.0, including:\n+\n+   * Access Types - expanded to allow specification on a per-persistent type\n+     basis or on individual attributes.\n+   * Embeddables - expanded to include collections of embeddables, nested\n+     embeddables, and embeddables containing relationships to other entities.\n+   * Enhanced Map Collections - expanded to support ElementCollection and new\n+     annotations for MapKeyColumn, MapKeyClass and MapKeyJoinColumn\n+   * Derived Identities - enables the ID of an entity to be derived from\n+     another entity, which provides for parent-to-dependent relationships\n+   * Query API - methods to get typed query parameters and results, supported\n+     and in-effect hints and lock mode getter/setter\n+   * Locking - official support for Pessimistic locking (included in prior\n+     OpenJPA releases) along with LockModeType properties and hint\n+   * JPQL Updates -\n+      ** Embeddables support for path expressions to nested Embeddables and\n+         Embeddables with relationships\n+      ** Enhanced Map Collection support for ElementCollection and new query\n+         expressions for KEY, ENTRY, VALUE\n+      ** Support for CASE and TYPE expressions along with IN expressions for\n+         Collection parameters\n+      ** Support for native date/time/timestamp literals\n+      ** Support for INDEX expressions on an OrderColumn\n+   * L2 Cache -\n+      ** Provides cache operations such as entity eviction and cache mode\n+         behaviors to use, bypass or refresh items\n+      ** Per-entity annotation to specify whether an entity should be cached\n+   * Bean Validation - supports using a JSR 303 implementation for entity\n+     validation for persist and remove operations\n+   * Metamodel API -\n+      ** Provides API to dynamically retrieve metamodel information for a\n+         persistence unit\n+      ** Currently limited to persistent state and relationships\n+      ** Used with Criteria API to generate and execute type safe queries\n+      ** Supports dynamic or static generation of the metamodel\n+   * Criteria API -\n+      ** Provides programmatic construction of queries using an object based\n+         query graph\n+      ** Operates on Metamodel objects to provide compile-time type safety\n+         enforcement\n+   * EntityManagerFactory API - updated for new L2 Cache, Properties, Criteria\n+     and Metamodel APIs\n+   * EntityManager API - updated for new Query and Query Result APIs, Hints,\n+     Properties, LockModeType, and Detach\n+   * And many more...\n+\n+   This Beta 2 distribution is based upon the contributions provided in\n+   development iterations after the Beta, as defined in the JPA 2.0 Roadmap at:\n+      http://openjpa.apache.org/jpa-20-roadmap.html\n \n    The JPA 2.0 Roadmap contains a complete list of implemented features and\n    feature summaries, including what is on deck for future iterations.\n \n    Additional information on the OpenJPA project may be found at the project\n    web site:\n-       http://openjpa.apache.org\n+      http://openjpa.apache.org\n \n \n License\n@@ -63,7 +106,9 @@ License\n \n Notices\n -------\n-   Copyright 2006-2009 Apache Software Foundation\n+   Copyright 2006,2010 The Apache Software Foundation.\n+   Apache, the Apache feather logo and OpenJPA are trademarks of\n+   The Apache Software Foundation.\n \n    This product includes software developed at\n    The Apache Software Foundation (http://www.apache.org/).\n@@ -76,14 +121,13 @@ Notices\n    The source code is available at:\n        https://glassfish.dev.java.net/source/browse/glassfish/\n \n-\n    The complete list of notices can be found in NOTICE.txt included in each\n    assembly.\n \n \n Prerequisites\n -------------\n-   In normal usage, OpenJPA requires Java 5 or higher and a relational \n+   In normal usage, OpenJPA requires Java SE 5 or higher and a relational \n    database of some sort.\n \n \n@@ -119,14 +163,171 @@ Getting Involved\n         * Bugs and other issues can be posted on the project JIRA.\n \n \n-Included Changes in OpenJPA Milestone 4\n----------------------------------------\n+Included Changes in OpenJPA 2.0.0 Beta 2\n+----------------------------------------\n+\n+Bug\n+---\n+    * [OPENJPA-1001] - java.lang.IndexOutOfBoundsException when executing attached test case\n+    * [OPENJPA-1367] - H2 Database Engine does support cross join\n+    * [OPENJPA-1485] - isLoaded util method does not behave per spec for collection attributes and basic type\n+    * [OPENJPA-1504] - Validation junits should not rely on Hibernate Impl\n+    * [OPENJPA-1507] - NPE with a non-JDBC store manager\n+    * [OPENJPA-1509] - Enum field types cannot be modified in an in-memory JPQL bulk update statement\n+    * [OPENJPA-1533] - JPA2 select math mix with aggregate reports syntax error\n+\n+Improvement\n+-----------\n+    * [OPENJPA-1475] - Performance improvement - don't call syncVersion() when no version is specified\n+    * [OPENJPA-1493] - Performance improvement in SelectImpl.getTableIndex() for JPQL without subselect\n+    * [OPENJPA-1502] - Improve msg for unrecognized EntityManager properties\n+    * [OPENJPA-1512] - Include a BundleActivator to register ourselves as a javax.persistence.provider for Apache Aries\n+    * [OPENJPA-1516] - Introduce new \"clear\" method on EntityManagerImpl\n+    * [OPENJPA-1520] - Move trunk (2.0.x) to require Java 6 to build (but target 1.5 runtime)\n+    * [OPENJPA-1525] - TestCacheMarshallerEndToEnd.Log requires to implement warn() method\n+    * [OPENJPA-1528] - Upgrade to latest MySQL 5.1.12 for junit tests\n+\n+** Test\n+    * [OPENJPA-1408] - Create test case binary and source jars in module\n+    * [OPENJPA-1529] - Create new tests for bean caching mode\n \n-    * TBD\n \n+Included Changes in OpenJPA 2.0.0 Beta\n+--------------------------------------\n \n-Included Changes in OpenJPA Milestone 3\n----------------------------------------\n+Sub-task\n+--------\n+    * [OPENJPA-1103] - Remove early-access disclaimer from the NOTICE files once the spec is released\n+    * [OPENJPA-1115] - Finish support for delimited identifiers\n+    * [OPENJPA-1347] - Upgrade to Validation API 1.0.0.GA\n+    * [OPENJPA-1353] - Add legal info to the docs\n+    * [OPENJPA-1358] - Support CacheRetrieve/StoreMode properties for find()/refresh() operation\n+    * [OPENJPA-1404] - Add find method that accepts properties to entity manager\n+    * [OPENJPA-1453] - Add support for testing with final JPA 2.0 TCK\n+    * [OPENJPA-1476] - Turn off QueryCache by default\n+\n+Bug\n+---\n+    * [OPENJPA-123] - Test framework should allow tests that are expected to fail to be checked in\n+    * [OPENJPA-459] - Problem with bulk updates in mySQL\n+    * [OPENJPA-714] - \"Encountered unmanaged object in persistent field\" error while merging object tree\n+    * [OPENJPA-748] - Disable QuerySQLCache by default\n+    * [OPENJPA-757] - Map existing OpenJPA extensions to new features of JPA 2.0\n+    * [OPENJPA-859] - OpenJPA requires all persistent fields to be specified on an XML defined entity\n+    * [OPENJPA-944] - FetchAttribute.recursionDepth = -1 does not load properly self referenced entities in a complex relation\n+    * [OPENJPA-991] - Implement LockTimeout using db specific server-side lock timeout feature\n+    * [OPENJPA-993] - PCEnhancer can't execute if a non-OpenJPA PU is found\n+    * [OPENJPA-1005] - Add PersistenceXMLSchemaVersion(); support\n+    * [OPENJPA-1025] - AbstractResultList.subList throws UnsupportedOperationException\n+    * [OPENJPA-1046] - Unique Constraint on MappedSupperClass causes NullPointerException\n+    * [OPENJPA-1141] - NPE at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1400)\n+    * [OPENJPA-1173] - Update PostgreSQL support for 8.4.x\n+    * [OPENJPA-1185] - Subquery overhaul\n+    * [OPENJPA-1197] - NativeQueries fail with MySQL\n+    * [OPENJPA-1224] - OpenJPA MySQL BigDecimal ignoring Precision/Scale column Annotation when generating tables\n+    * [OPENJPA-1263] - TestReaderLob.testUpdateWithNull() fails on MySQL\n+    * [OPENJPA-1276] - Support CQL for Criteria Query\n+    * [OPENJPA-1289] - Oracle driver throws exception due to incorrect mapping of XMLType column\n+    * [OPENJPA-1293] - JUnit test failure when using Derby 10.5.3.0\n+    * [OPENJPA-1294] - Nested JDBC calls fail for certain database\n+    * [OPENJPA-1306] - Extended lock scope support\n+    * [OPENJPA-1308] - shouldn't always use CAST with UPPER and LOWER for DB2\n+    * [OPENJPA-1321] - Documentation inaccuracies\n+    * [OPENJPA-1326] - ReverseMappingTool and SchemaTool failing for Sybase\n+    * [OPENJPA-1328] - Move cacheable class configuration to ClassMetaData\n+    * [OPENJPA-1341] - PostRemove not invoked after database record was deleted\n+    * [OPENJPA-1344] - Query [get|set]LockMode & Em getLockMode not throwing correct exceptions\n+    * [OPENJPA-1349] - Compatibility options are not set appropriately for spec level when emf is created by JEE container\n+    * [OPENJPA-1351] - java.lang.ClassCastException: javax.naming.Reference incompatible with javax.sql.DataSource\n+    * [OPENJPA-1352] - Merge fails if an entity has an element collection which is contructed using Arrays.asList\n+    * [OPENJPA-1354] - Configuring DBCP connection pool with connection properties breaks when user/pasword is specifed and javax.* configuration is set to DBCP Driver\n+    * [OPENJPA-1355] - Recent snaphot versions of openjpa have problem with postgresPreparedStatementImpl constructor making Postgres impossible to use\n+    * [OPENJPA-1357] - Support CacheRetrieve/StoreMode properties for find()/refresh() operation\n+    * [OPENJPA-1370] - JPA2 missing implementation for createNamedQuery(String name, Class<T> resultClass)\n+    * [OPENJPA-1374] - Enable junits to be executed against an in-memory Derby 10.5.3.0 db\n+    * [OPENJPA-1375] - OutOfMemory runs in container environment in a long stress run\n+    * [OPENJPA-1377] - JPA property to enum conversion failure\n+    * [OPENJPA-1379] - Locking problem when using timestamp QueryCache eviction policy.\n+    * [OPENJPA-1380] - Query not getting evicted from QueryCache\n+    * [OPENJPA-1381] - IllegalStateException on query method call after named query is created twice.\n+    * [OPENJPA-1384] - ClassNotFoundException for custom DBDictionary used by EJB\n+    * [OPENJPA-1385] - Parameter in having clause of Criteria query not recognized\n+    * [OPENJPA-1386] - Metamodel Generator does not handle field types that can hide another\n+    * [OPENJPA-1387] - Unique colums automatically defined as non-nullable\n+    * [OPENJPA-1388] - JPQL named parameter using a reserved word resulting in ArgumentException\n+    * [OPENJPA-1390] - Criteria API untyped join(String attr) implies any attribute not a singular attribute\n+    * [OPENJPA-1391] - Handle generic/unspecified type arguments for persistent fields during metamodel generation\n+    * [OPENJPA-1392] - CriteriaBuilder.size() must return Integer as value\n+    * [OPENJPA-1393] - CriteriaBuilder.countDistinct() does not return correct result\n+    * [OPENJPA-1394] - Pessimistic Lock not honour when ORDER BY clause is used\n+    * [OPENJPA-1396] - metadata-complete in the orm file does not override @Transition annotation\n+    * [OPENJPA-1397] - NULL in columns part of an @IdClass composite key leads to \"disappearing\" (null) returned objects\n+    * [OPENJPA-1400] - Unable to persist a relationship to a detached Entity\n+    * [OPENJPA-1401] - Inheritance using Join Strategy may fail in cross join JPQL\n+    * [OPENJPA-1402] - Improve (avoid) lock on relation field per 2.0 spec semantics\n+    * [OPENJPA-1408] - Create test case binary and source jars in module\n+    * [OPENJPA-1409] - Improve type preservation for currentDate/Time expression in queries\n+    * [OPENJPA-1413] - NPE when update using CASE statement on Derby\n+    * [OPENJPA-1414] - Performance improvements for detach\n+    * [OPENJPA-1419] - Access path metadata set incorrectly for fetch joins in Criteria Query\n+    * [OPENJPA-1425] - Literal value in projection can not be parameterized for all databases\n+    * [OPENJPA-1431] - @Temporal annotation overrides the @Column annotation when using in conjunction with @ElementCollection\n+    * [OPENJPA-1435] - Multi-1xm relation of same type in entity yields extra null in result collection\n+    * [OPENJPA-1439] - Metamodel instantiation fails on InputStream properties\n+    * [OPENJPA-1441] - NPE when enhancing a Serializable, versioned class\n+    * [OPENJPA-1442] - java.sql.Date, java.math.BigDecimal, or java.math.BigInteger types as derived primary keys are not Enhanced correctly\n+    * [OPENJPA-1444] - Criteria Query with fetch joins does not return correct DISTINCT result\n+    * [OPENJPA-1445] - Support Enum as external value\n+    * [OPENJPA-1452] - OpenJPA 2.0.0-M3 attempts to mutate unmodifiable map in Glassfish\n+    * [OPENJPA-1461] - Incorrect Oracle CREATE TABLE DDL for XML column\n+    * [OPENJPA-1463] - JPQL new operator arguments should be more flexible in matching constructor arguments\n+    * [OPENJPA-1464] - PreparedQuery fails with enum query parameter\n+    * [OPENJPA-1467] - java.lang.IllegalMonitorStateException in ConcurrentDataCache.writeUnlock()\n+    * [OPENJPA-1470] - PCEnhancer is overly verbose\n+    * [OPENJPA-1478] - OpenJPA is no longer available as an OSGi bundle\n+\n+Improvement\n+-----------\n+    * [OPENJPA-250] - Reduce synchronization bottlenecks in data cache, metadata repository, and lifecycle event manager\n+    * [OPENJPA-709] - Better naming for unique constraints\n+    * [OPENJPA-716] - Improve the documentation about Streaming LOB Support\n+    * [OPENJPA-839] - change pom.xml to publish sources as well.\n+    * [OPENJPA-1085] - Add toString() method to PCState classes\n+    * [OPENJPA-1172] - Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n+    * [OPENJPA-1356] - Use maven-enforcer-plugin to verify proper Java and Maven levels\n+    * [OPENJPA-1363] - Upgrade to latest commons-pool maintenance release\n+    * [OPENJPA-1366] - Remove need for an EMF from OpenJPAPersistenceUtil and TraversableResolverImpl\n+    * [OPENJPA-1368] - Upgrade to HSQLDB 1.8.0.10 and in-memory db for unit tests\n+    * [OPENJPA-1415] - Performance improvement by reduced logging of batched OLE\n+    * [OPENJPA-1440] - Allow COUNT(*) instead of COUNT(t0.id) for simple queries as an option\n+    * [OPENJPA-1456] - Replace StringBuffer usage with StringBuilder\n+    * [OPENJPA-1468] - Upgrade build to use final Bean Validation spec API from Geronimo\n+\n+New Feature\n+-----------\n+    * [OPENJPA-773] - Upgrade to JPA 2\n+    * [OPENJPA-1181] - Metamodel Generation must be more selective and controllable\n+    * [OPENJPA-1276] - Support CQL for Criteria Query\n+    * [OPENJPA-1332] - Allow configuration property to be declared for internal usage only\n+    * [OPENJPA-1334] - Support instance level distribution policy for named cache partitions\n+    * [OPENJPA-1337] - OpenJPA 2.0 iteration 12 primary task\n+    * [OPENJPA-1357] - Support CacheRetrieve/StoreMode properties for find()/refresh() operation\n+    * [OPENJPA-1373] - OpenJPA 2.0 iteration 13 primary task\n+    * [OPENJPA-1426] - OpenJPA 2.0 iteration 14 primary task\n+\n+Task\n+----\n+    * [OPENJPA-1183] - Ergonomics of metamodel generation process\n+    * [OPENJPA-1290] - Document Criteria API\n+\n+Test\n+----\n+    * [OPENJPA-1153] - Test suite speed-up outside SingleEMFTestCase\n+    * [OPENJPA-1342] - Build a mechanics to test JTA transaction semantics within JSE\n+\n+\n+Included Changes in OpenJPA 2.0.0 Milestone 3\n+---------------------------------------------\n \n Sub-task\n --------"},{"sha":"b93a6e3e459a464c29b09e9c3ce55ab6770cc7bd","filename":"openjpa-project/NOTICE.txt","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/NOTICE.txt?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,9 +1,12 @@\n-OpenJPA Aggregate Jar with Dependencies\n-Copyright 2006-2009 Apache Software Foundation\n+\n+Apache OpenJPA Aggregate Jar with Dependencies\n+Copyright 2006-2010 The Apache Software Foundation\n \n This product includes software developed at\n The Apache Software Foundation (http://www.apache.org/).\n \n+Apache, the Apache feather logo and OpenJPA are trademarks of The Apache Software Foundation.\n+\n The OpenJPA binary assembly includes software developed by the:\n     Apache Commons Collections project\n     Apache Commons Lang project\n@@ -12,6 +15,11 @@ The OpenJPA binary assembly includes software developed by the:\n     Apache Geronimo project (JMS 1.1, JTA 1.1 and JPA 2.0 spec apis)\n     SERP project\n \n+\n+The following copyright notice(s) were affixed to portions of this code\n+with which this file is now or was at one time distributed.\n+\n+\n OpenJPA includes software developed by the SERP project\n Copyright (c) 2002-2006, A. Abram White. All rights reserved.\n "},{"sha":"d228dc08b054ff850023d3ec5f999d563e0f5dad","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":427,"deletions":21,"changes":448,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,7 +1,7 @@\n <html>\n-<title>Release Notes for Apache OpenJPA 2.0.0 Milestone 4</title>\n+<title>Release Notes for Apache OpenJPA 2.0.0-beta2</title>\n <body>\n-<h1>Release Notes for Apache OpenJPA 2.0.0 Milestone 4</h1>\n+<h1>Release Notes for Apache OpenJPA 2.0.0-beta2</h1>\n <p>\n <ul>\n   <li><a href=\"#Overview\">Overview</a></li>\n@@ -12,7 +12,8 @@ <h1>Release Notes for Apache OpenJPA 2.0.0 Milestone 4</h1>\n   <li><a href=\"#Notice\">Notice</a></li>\n   <li><a href=\"#ReleaseNotes\">Release Notes</a></li>\n   <ul>\n-    <li><a href=\"#200M4\">2.0.0 Milestone 4</a></li>\n+    <li><a href=\"#200beta2\">2.0.0 Beta 2</a></li>\n+    <li><a href=\"#200beta\">2.0.0 Beta</a></li>\n     <li><a href=\"#200M3\">2.0.0 Milestone 3</a></li>\n     <li><a href=\"#200M2\">2.0.0 Milestone 2</a></li>\n     <li><a href=\"#200M1\">2.0.0 Milestone 1</a></li>\n@@ -24,21 +25,128 @@ <h1>Release Notes for Apache OpenJPA 2.0.0 Milestone 4</h1>\n <hr>\n <h2><a name=\"Overview\"></a>Overview</h2>\n \n-<P>This distribution of Apache OpenJPA builds upon the prior releases which \n-provided a feature-rich implementation of the Java Persistence API (JPA 1.0)\n-part of Java Community Process JSR-220 (Enterprise JavaBeans 3.0) by\n-includng some early-draft specification functionality from the Java\n-Community Process JSR-317 (JPA 2.0) Proposed Final Draft 2 on 09/22/2009.\n+<P>\n+   The Apache OpenJPA community is proud to release a Beta 2 distribution of\n+   OpenJPA 2.0.0. This distribution is based on the final JSR 317 Java\n+   Persistence API, Version 2.0 specification and passes the JPA 2.0 TCK,\n+   while remaining backwards compatiable with prior releases based on the\n+   Java Persistence API (JPA 1.0) part of Java Community Process JSR-220\n+   (Enterprise JavaBeans 3.0). Included in this release are many enhancements,\n+   fixes, and new functionality; giving developers access to all the new\n+   features of JPA 2.0, including:\n </P>\n \n-<p> Some of the key features included in this distribution:\n <ul>\n-<li>TBD</li>\n+<li>\n+     Access Types - expanded to allow specification on a per-persistent type\n+     basis or on individual attributes.\n+</li>\n+<li>\n+     Embeddables - expanded to include collections of embeddables, nested\n+     embeddables, and embeddables containing relationships to other entities.\n+</li>\n+<li>\n+     Enhanced Map Collections - expanded to support ElementCollection and new\n+     annotations for MapKeyColumn, MapKeyClass and MapKeyJoinColumn\n+</li>\n+<li>\n+     Derived Identities - enables the ID of an entity to be derived from\n+     another entity, which provides for parent-to-dependent relationships\n+</li>\n+<li>\n+     Query API - methods to get typed query parameters and results, supported\n+     and in-effect hints and lock mode getter/setter\n+</li>\n+<li>\n+     Locking - official support for Pessimistic locking (included in prior\n+     OpenJPA releases) along with LockModeType properties and hint\n+</li>\n+<li>\n+     JPQL Updates -\n+     <ul>\n+     <li>\n+         Embeddables support for path expressions to nested Embeddables and\n+         Embeddables with relationships\n+     </li>\n+     <li>\n+         Enhanced Map Collection support for ElementCollection and new query\n+         expressions for KEY, ENTRY, VALUE\n+     </li>\n+     <li>\n+         Support for CASE and TYPE expressions along with IN expressions for\n+         Collection parameters\n+     </li>\n+     <li>\n+         Support for native date/time/timestamp literals\n+     </li>\n+     <li>\n+         Support for INDEX expressions on an OrderColumn\n+     </li>\n+     </ul>\n+</li>\n+<li>\n+     L2 Cache -\n+     <ul>\n+     <li>\n+         Provides cache operations such as entity eviction and cache mode\n+         behaviors to use, bypass or refresh items\n+     </li>\n+     <li>\n+         Per-entity annotation to specify whether an entity should be cached\n+     </li>\n+     </ul>\n+</li>\n+<li>\n+     Bean Validation - supports using a JSR 303 implementation for entity\n+     validation for persist and remove operations\n+</li>\n+<li>\n+     Metamodel API -\n+     <ul>\n+     <li>\n+         Provides API to dynamically retrieve metamodel information for a\n+         persistence unit\n+     </li>\n+     <li>\n+         Currently limited to persistent state and relationships\n+     </li>\n+     <li>\n+         Used with Criteria API to generate and execute type safe queries\n+     </li>\n+     <li>\n+         Supports dynamic or static generation of the metamodel\n+     </li>\n+     </ul>\n+</li>\n+<li>\n+     Criteria API -\n+     <ul>\n+     <li>\n+         Provides programmatic construction of queries using an object based\n+         query graph\n+     </li>\n+     <li>\n+         Operates on Metamodel objects to provide compile-time type safety\n+         enforcement\n+     </li>\n+     </ul>\n+</li>\n+<li>\n+     EntityManagerFactory API - updated for new L2 Cache, Properties, Criteria\n+     and Metamodel APIs\n+</li>\n+<li>\n+     EntityManager API - updated for new Query and Query Result APIs, Hints,\n+     Properties, LockModeType, and Detach\n+</li>\n+<li>\n+     And many more...\n+</li>\n </ul>\n </p>\n \n-<p>This Milestone 4 distribution is based upon the contributions provided in\n-development iterations 12 through XXX, as defined in the JPA 2.0 Roadmap at:\n+<p>This Beta 2 distribution is based upon the contributions provided in\n+development iterations after the Beta, as defined in the JPA 2.0 Roadmap at:\n <a href=\"http://openjpa.apache.org/jpa-20-roadmap.html\">http://openjpa.apache.org/jpa-20-roadmap.html</a></p>\n \n <p>The JPA 2.0 Roadmap contains a complete list of implemented features and\n@@ -104,13 +212,11 @@ <h2><a name=\"License\"></a>License</h2>\n in each release of OpenJPA.</P>\n \n <h2><a name=\"Notice\"></a>Notice</h2>\n-<p>Copyright 2006-2009 Apache Software Foundation\n+<p>Copyright 2006,2010 The Apache Software Foundation\n <BR>This product includes software developed at The Apache Software Foundation (http://www.apache.org/).</p>\n-<P>This is an implementation of an early-draft specification developed under the Java Community Process (JCP). The code is untested and presumed not to be a compatible implementation of the JSR-317 Java Persistence API, Version 2.0 specification.  We encourage you to migrate to an implementation of the JSR-317 Java Persistence API, Version 2.0 specification that has been tested and verified to be compatible as soon as such an implementation is available, and we encourage you to retain this notice in any implementation of JSR-317 Java Persistence API, Version 2.0 specification that you distribute.</p>\n-<P>OpenJPA includes the persistence and orm schemas from the JPA specifications.\n+<P>Apache OpenJPA includes the persistence and orm schemas from the JPA specifications.\n <BR>Copyright 2005-2009 Sun Microsystems, Inc. All rights reserved.\n-<BR>OpenJPA elects to include this software in this distribution under the\n-CDDL license.\n+<BR>Apache OpenJPA elects to include this software in this distribution under the CDDL license.\n <BR>You can obtain a copy of the License at:\n <a href=\"https://glassfish.dev.java.net/public/CDDL+GPL.html\">https://glassfish.dev.java.net/public/CDDL+GPL.html</a>\n <BR>The source code is available at:\n@@ -121,8 +227,307 @@ <h2><a name=\"Notice\"></a>Notice</h2>\n <hr>\n <h2><a name=\"ReleaseNotes\">Release Notes</h2>\n \n-<h3><a name=\"200M4\">OpenJPA 2.0.0 Milestone 4</h3>\n-<h4>TBD</h4>\n+<hr>\n+<h3><a name=\"200beta2\">OpenJPA 2.0.0-beta2</h3>\n+<h4>Bug</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1001'>OPENJPA-1001</a>] -         java.lang.IndexOutOfBoundsException when executing attached test case\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1367'>OPENJPA-1367</a>] -         H2 Database Engine does support cross join\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1485'>OPENJPA-1485</a>] -         isLoaded util method does not behave per spec for collection attributes and basic type\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1504'>OPENJPA-1504</a>] -         Validation junits should not rely on Hibernate Impl\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1507'>OPENJPA-1507</a>] -         NPE with a non-JDBC store manager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1509'>OPENJPA-1509</a>] -         Enum field types cannot be modified in an in-memory JPQL bulk update statement\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1533'>OPENJPA-1533</a>] -         JPA2 select math mix with aggregate reports syntax error\n+</li>\n+</ul>\n+\n+<h4>Improvement</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1475'>OPENJPA-1475</a>] -         Performance improvement - don't call syncVersion() when no version is specified\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1493'>OPENJPA-1493</a>] -         Performance improvement in SelectImpl.getTableIndex() for JPQL without subselect\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1502'>OPENJPA-1502</a>] -         Improve msg for unrecognized EntityManager properties\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1512'>OPENJPA-1512</a>] -         Include a BundleActivator to register ourselves as a javax.persistence.provider for Apache Aries\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1516'>OPENJPA-1516</a>] -         Introduce new &quot;clear&quot; method on EntityManagerImpl\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1520'>OPENJPA-1520</a>] -         Move trunk (2.0.x) to require Java 6 to build (but target 1.5 runtime)\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1525'>OPENJPA-1525</a>] -         TestCacheMarshallerEndToEnd.Log requires to implement warn() method\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1528'>OPENJPA-1528</a>] -         Upgrade to latest MySQL 5.1.12 for junit tests\n+</li>\n+</ul>\n+\n+<h4>Test</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1408'>OPENJPA-1408</a>] -         Create test case binary and source jars in module\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1529'>OPENJPA-1529</a>] -         Create new tests for bean caching mode\n+</li>\n+</ul>\n+\n+\n+<hr>\n+<h3><a name=\"200beta\">OpenJPA 2.0.0 Beta</h3>\n+<h4>Sub-task</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1103'>OPENJPA-1103</a>] -         Remove early-access disclaimer from the NOTICE files once the spec is released\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1115'>OPENJPA-1115</a>] -         Finish support for delimited identifiers\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1173'>OPENJPA-1173</a>] -         Update PostgreSQL support for 8.4.x\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1306'>OPENJPA-1306</a>] -         Extended lock scope support\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1347'>OPENJPA-1347</a>] -         Upgrade to Validation API 1.0.0.GA\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1353'>OPENJPA-1353</a>] -         Add legal info to the docs\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1358'>OPENJPA-1358</a>] -         Support CacheRetrieve/StoreMode properties for find()/refresh() operation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1404'>OPENJPA-1404</a>] -         Add find method that accepts properties to entity manager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1453'>OPENJPA-1453</a>] -         Add support for testing with final JPA 2.0 TCK\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1476'>OPENJPA-1476</a>] -         Turn off QueryCache by default\n+</li>\n+</ul>\n+\n+<h4>Bug</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-123'>OPENJPA-123</a>] -         Test framework should allow tests that are expected to fail to be checked in\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-459'>OPENJPA-459</a>] -         Problem with bulk updates in mySQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-714'>OPENJPA-714</a>] -         &quot;Encountered unmanaged object in persistent field&quot; error while merging object tree\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-748'>OPENJPA-748</a>] -         Disable QuerySQLCache by default\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-859'>OPENJPA-859</a>] -         OpenJPA requires all persistent fields to be specified on an XML defined entity\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-944'>OPENJPA-944</a>] -         FetchAttribute.recursionDepth = -1 does not load properly self referenced entities in a complex relation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-993'>OPENJPA-993</a>] -         PCEnhancer can't execute if a non-OpenJPA PU is found\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1025'>OPENJPA-1025</a>] -         AbstractResultList.subList throws UnsupportedOperationException\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1046'>OPENJPA-1046</a>] -         Unique Constraint on MappedSupperClass causes NullPointerException\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1141'>OPENJPA-1141</a>] -         NPE  at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1400)\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1185'>OPENJPA-1185</a>] -         Subquery overhaul\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1197'>OPENJPA-1197</a>] -         NativeQueries fail with MySQL \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1224'>OPENJPA-1224</a>] -         OpenJPA MySQL BigDecimal ignoring Precision/Scale column Annotation when generating tables \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1263'>OPENJPA-1263</a>] -         TestReaderLob.testUpdateWithNull() fails on MySQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1289'>OPENJPA-1289</a>] -         Oracle driver throws exception due to incorrect mapping of XMLType column\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1293'>OPENJPA-1293</a>] -         JUnit test failure when using Derby 10.5.3.0\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1294'>OPENJPA-1294</a>] -         Nested JDBC calls fail for certain database\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1308'>OPENJPA-1308</a>] -         shouldn't always use CAST with UPPER and LOWER for DB2\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1321'>OPENJPA-1321</a>] -         Documentation inaccuracies\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1326'>OPENJPA-1326</a>] -         ReverseMappingTool and SchemaTool failing for Sybase\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1328'>OPENJPA-1328</a>] -         Move cacheable class configuration to ClassMetaData\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1341'>OPENJPA-1341</a>] -         PostRemove not invoked after database record was deleted\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1344'>OPENJPA-1344</a>] -         Query [get|set]LockMode &amp; Em getLockMode not throwing correct exceptions\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1349'>OPENJPA-1349</a>] -         Compatibility options are not set appropriately for spec level when emf is created by JEE container\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1351'>OPENJPA-1351</a>] -         java.lang.ClassCastException: javax.naming.Reference incompatible with javax.sql.DataSource\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1352'>OPENJPA-1352</a>] -         Merge fails if an entity has an element collection which is contructed using Arrays.asList\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1354'>OPENJPA-1354</a>] -         Configuring DBCP connection pool with connection properties breaks when user/pasword is specifed and javax.* configuration is set to DBCP Driver\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1355'>OPENJPA-1355</a>] -         Recent snaphot versions of openjpa have problem with postgresPreparedStatementImpl constructor making Postgres impossible to use\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1370'>OPENJPA-1370</a>] -         JPA2 missing implementation for createNamedQuery(String name, Class&lt;T&gt; resultClass)\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1375'>OPENJPA-1375</a>] -         OutOfMemory runs in container environment in a long stress run\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1377'>OPENJPA-1377</a>] -         JPA property to enum conversion failure\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1379'>OPENJPA-1379</a>] -         Locking problem when using timestamp QueryCache eviction policy.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1380'>OPENJPA-1380</a>] -         Query not getting evicted from QueryCache\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1381'>OPENJPA-1381</a>] -         IllegalStateException on query method call after named query is created twice.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1384'>OPENJPA-1384</a>] -         ClassNotFoundException for custom DBDictionary used by EJB\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1385'>OPENJPA-1385</a>] -         Parameter in having clause of Criteria query not recognized\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1386'>OPENJPA-1386</a>] -         Metamodel Generator does not handle field types that can hide another\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1387'>OPENJPA-1387</a>] -         Unique colums automatically defined as non-nullable\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1388'>OPENJPA-1388</a>] -         JPQL named parameter using a reserved word resulting in ArgumentException\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1390'>OPENJPA-1390</a>] -         Criteria API untyped join(String attr) implies any attribute not a singular attribute\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1391'>OPENJPA-1391</a>] -         Handle generic/unspecified  type arguments for persistent fields during metamodel generation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1392'>OPENJPA-1392</a>] -         CriteriaBuilder.size() must return Integer as value\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1393'>OPENJPA-1393</a>] -         CriteriaBuilder.countDistinct() does not return correct result\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1394'>OPENJPA-1394</a>] -         Pessimistic Lock not honour when ORDER BY clause is used\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1396'>OPENJPA-1396</a>] -         metadata-complete in the orm file does not override @Transition annotation \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1397'>OPENJPA-1397</a>] -         NULL in columns part of an @IdClass composite key leads to &quot;disappearing&quot; (null) returned objects\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1400'>OPENJPA-1400</a>] -         Unable to persist a relationship to a detached Entity \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1401'>OPENJPA-1401</a>] -         Inheritance using Join Strategy may fail in cross join JPQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1409'>OPENJPA-1409</a>] -         Improve type preservation for currentDate/Time  expression in queries\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1413'>OPENJPA-1413</a>] -         NPE when update using CASE statement on Derby\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1419'>OPENJPA-1419</a>] -         Access path metadata set incorrectly for fetch joins in Criteria Query\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1425'>OPENJPA-1425</a>] -         Literal value in projection can not be parameterized for all databases\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1431'>OPENJPA-1431</a>] -         @Temporal annotation overrides the @Column annotation when using in conjunction with @ElementCollection\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1435'>OPENJPA-1435</a>] -         Multi-1xm relation of same type in entity yields extra null in result collection\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1439'>OPENJPA-1439</a>] -         Metamodel instantiation fails on InputStream properties\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1441'>OPENJPA-1441</a>] -         NPE when enhancing a Serializable, versioned class\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1442'>OPENJPA-1442</a>] -         java.sql.Date, java.math.BigDecimal, or java.math.BigInteger types as derived primary keys are not Enhanced correctly\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1444'>OPENJPA-1444</a>] -         Criteria Query with fetch joins does not return correct DISTINCT result\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1445'>OPENJPA-1445</a>] -         Support Enum as external value\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1452'>OPENJPA-1452</a>] -         OpenJPA 2.0.0-M3 attempts to mutate unmodifiable map in Glassfish\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1461'>OPENJPA-1461</a>] -         Incorrect Oracle CREATE TABLE DDL for XML column\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1463'>OPENJPA-1463</a>] -         JPQL new operator arguments should be more flexible in matching constructor arguments\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1464'>OPENJPA-1464</a>] -         PreparedQuery fails with enum query parameter\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1467'>OPENJPA-1467</a>] -         java.lang.IllegalMonitorStateException in ConcurrentDataCache.writeUnlock()\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1478'>OPENJPA-1478</a>] -         OpenJPA is no longer available as an OSGi bundle\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1487'>OPENJPA-1487</a>] -         incomplete tutorial [CONF] OpenJPA &gt; Begin using OpenJPA - The Basics  \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1515'>OPENJPA-1515</a>] -         CacheStatistics should be disabled by default\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1527'>OPENJPA-1527</a>] -         AssociationOverride does not work when applying to the map key of the element collection via orm.xml\n+</li>\n+</ul>\n+\n+<h4>Improvement</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-250'>OPENJPA-250</a>] -         Reduce synchronization bottlenecks in data cache, metadata repository, and lifecycle event manager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-709'>OPENJPA-709</a>] -         Better naming for unique constraints\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-716'>OPENJPA-716</a>] -         Improve the documentation about Streaming LOB Support\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-839'>OPENJPA-839</a>] -         change pom.xml to publish sources as well.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-991'>OPENJPA-991</a>] -         Implement LockTimeout using db specific server-side lock timeout feature\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1085'>OPENJPA-1085</a>] -         Add toString() method to PCState classes\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1172'>OPENJPA-1172</a>] -         Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1356'>OPENJPA-1356</a>] -         Use maven-enforcer-plugin to verify proper Java and Maven levels\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1363'>OPENJPA-1363</a>] -         Upgrade to latest commons-pool maintenance release\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1366'>OPENJPA-1366</a>] -         Remove need for an EMF from OpenJPAPersistenceUtil and TraversableResolverImpl\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1368'>OPENJPA-1368</a>] -         Upgrade to HSQLDB 1.8.0.10 and in-memory db for unit tests\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1374'>OPENJPA-1374</a>] -         Enable junits to be executed against an in-memory Derby 10.5.3.0 db\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1402'>OPENJPA-1402</a>] -         Improve (avoid) lock on relation field per 2.0 spec semantics\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1414'>OPENJPA-1414</a>] -         Performance improvements for detach\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1415'>OPENJPA-1415</a>] -         Performance improvement by reduced logging of batched OLE\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1440'>OPENJPA-1440</a>] -         Allow COUNT(*) instead of COUNT(t0.id) for simple queries as an option\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1456'>OPENJPA-1456</a>] -         Replace StringBuffer usage with StringBuilder\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1468'>OPENJPA-1468</a>] -         Upgrade build to use final Bean Validation spec API from Geronimo\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1470'>OPENJPA-1470</a>] -         PCEnhancer is overly verbose\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1489'>OPENJPA-1489</a>] -         Generated UNIQUE constraint names and HSQL \n+</li>\n+</ul>\n+\n+<h4>New Feature</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-773'>OPENJPA-773</a>] -         Upgrade to JPA 2\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1005'>OPENJPA-1005</a>] -         Add PersistenceXMLSchemaVersion(); support\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1181'>OPENJPA-1181</a>] -         Metamodel Generation must be more selective and controllable\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1276'>OPENJPA-1276</a>] -         Support CQL for Criteria Query\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1332'>OPENJPA-1332</a>] -         Allow configuration property to be declared for internal usage only\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1334'>OPENJPA-1334</a>] -         Support instance level distribution policy for named cache partitions\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1337'>OPENJPA-1337</a>] -         OpenJPA 2.0 iteration 12 primary task\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1357'>OPENJPA-1357</a>] -         Support CacheRetrieve/StoreMode properties for find()/refresh() operation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1373'>OPENJPA-1373</a>] -         OpenJPA 2.0 iteration 13 primary task\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1426'>OPENJPA-1426</a>] -         OpenJPA 2.0 iteration 14 primary task\n+</li>\n+</ul>\n+\n+<h4>Task</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-757'>OPENJPA-757</a>] -         Map existing OpenJPA extensions to new features of JPA 2.0\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1183'>OPENJPA-1183</a>] -         Ergonomics of metamodel generation process\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1290'>OPENJPA-1290</a>] -         Document Criteria API\n+</li>\n+</ul>\n+\n+<h4>Test</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1153'>OPENJPA-1153</a>] -         Test suite speed-up outside SingleEMFTestCase\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1342'>OPENJPA-1342</a>] -         Build a mechanics to test JTA transaction semantics within JSE \n+</li>\n+</ul>\n+\n \n <hr>\n <h3><a name=\"200M3\">OpenJPA 2.0.0 Milestone 3</h3>\n@@ -562,13 +967,14 @@ <h4>Task</h4>\n <h2><a name=\"Previous\"></a>Previous Releases</h2>\n <p>Release notes for earlier releases of OpenJPA may be found in SVN at the following locations. \n <ul>\n+  <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.2/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.2.2 RELEASE-NOTES.html</a></li>\n   <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.1/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.2.1 RELEASE-NOTES.html</a></li>\n   <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.1.0 RELEASE-NOTES.html</a></li>\n   <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.3/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.0.3 RELEASE-NOTES.html</a></li>\n </ul></p>\n  \n <hr>\n-<p>Copyright (C) 2006-2009 Apache Software Foundation. Licensed under Apache License 2.0.<br>\n-Apache and the Apache feather logo are trademarks of Apache Software Foundation.<br>\n+<p>Copyright (C) 2006,2010 Apache Software Foundation. Licensed under Apache License 2.0.<br>\n+Apache, the Apache feather logo and OpenJPA are trademarks of Apache Software Foundation.<br>\n </body>\n </html>"},{"sha":"15de18bea29b3247427b23b0e9e42741d53eb7f4","filename":"openjpa-project/assembly.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/assembly.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -97,7 +97,8 @@\n \n                 <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\n                 <include>org.apache.geronimo.specs:geronimo-jpa_2.0_spec</include>\n-                <include>org.apache.geronimo.specs:geronimo-validation_1.0_spec</include>\n+                <include>org.apache.geronimo.specs:geronimo-jms_1.1_spec</include>\n+                <!-- <include>org.apache.geronimo.specs:geronimo-validation_1.0_spec</include> -->\n             </includes>\n         </dependencySet>\n     </dependencySets>"},{"sha":"4059a22fbdc05eccdd1fb86adf2c62c1a1e586f0","filename":"openjpa-project/pom.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -41,7 +41,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <properties>\n@@ -266,7 +266,7 @@\n                                         <move file=\"${docbook.target}/manual.html\" tofile=\"${docbook.target}/index.html\" />\n                                         <!-- Replace a 'base href' token to 'base target' in the index.html -->\n                                         <!-- This base href was inserted by manual-xhtml-chunk.xsl parameter 'html.base' -->\n-\t\t\t\t\t\t\t\t\t\t<replace file=\"${docbook.target}/index.html\" token=\"base href\" value=\"base target\"/>\n+\t\t\t\t\t\t\t\t\t\t<replace file=\"${docbook.target}/index.html\" token=\"base href\" value=\"base target\" />\n                                         <!-- Copy main.html from original location to docbook target  -->\n                                         <copy file=\"${docbook.source}/main.html\" tofile=\"${docbook.target}/main.html\" />\n                                         <!-- copy over images and styles -->\n@@ -392,10 +392,10 @@\n                                 <configuration>\n                                     <tasks>\n                                         <ant antfile=\"upload.xml\" target=\"upload\" inheritRefs=\"true\">\n-                                            <property name=\"nightly.user.name\" value=\"${nightly.user.name}\"/>\n-                                            <property name=\"nightly.password\" value=\"${nightly.password}\"/>\n-                                            <property name=\"nightly.version\" value=\"${nightly.version}\"/>\n-                                            <property name=\"pom.version\" value=\"${pom.version}\"/>\n+                                            <property name=\"nightly.user.name\" value=\"${nightly.user.name}\" />\n+                                            <property name=\"nightly.password\" value=\"${nightly.password}\" />\n+                                            <property name=\"nightly.version\" value=\"${nightly.version}\" />\n+                                            <property name=\"pom.version\" value=\"${pom.version}\" />\n                                         </ant>\n                                     </tasks>\n                                 </configuration>"},{"sha":"47fe558e39a1a4ee39ea8fb96724e5fcd7c26441","filename":"openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -299,7 +299,7 @@ appropriate, most notably <classname>IllegalArgumentException</classname>s and\n <classname>IllegalStateException</classname>s. The specification also provides\n a few JPA-specific exceptions in the <literal>javax.persistence</literal>\n package. These exceptions should be self-explanatory. See the\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api\">Javadoc</ulink> for\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api\">Javadoc</ulink> for\n additional details on JPA exceptions.\n         </para>\n         <note>"},{"sha":"a2444e29d45381a54e20b9678ba4bddd94f13eb0","filename":"openjpa-project/src/doc/manual/jpa_overview_em.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_em.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_em.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_em.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -37,7 +37,7 @@\n The diagram above presents an overview of the <classname>EntityManager\n </classname> interface. For a complete treatment of the <classname>\n EntityManager</classname> API, see the\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityManager.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/EntityManager.html\">\n Javadoc</ulink> documentation. Methods whose parameter signatures consist of \n an ellipsis (...) are overloaded to take multiple parameter types.\n     </para>\n@@ -515,7 +515,7 @@ public void lock(Object entity, LockModeType mode);\n             </seealso>\n         </indexterm>\n This method locks the given entity using the named mode. The\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/LockmodeType.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/LockmodeType.html\">\n <classname>javax.persistence.LockModeType</classname></ulink> enum defines two\n modes:\n         </para>\n@@ -916,7 +916,7 @@ The <classname>EntityManager</classname>'s <literal>FlushMode</literal> property\n controls whether to flush transactional changes before executing queries. This\n allows the query results to take into account changes you have made during the\n current transaction. Available\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/FlushModeType.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/FlushModeType.html\">\n <classname>javax.persistence.FlushModeType</classname></ulink> constants are:\n         </para>\n         <itemizedlist>"},{"sha":"b311f09f300a26d9450789f3f2d282acc2c3b65c","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1069,7 +1069,7 @@ lifecycle events and their corresponding method markers are:\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PrePersist.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PrePersist.html\">\n <classname>PrePersist</classname></ulink>: Methods marked with this annotation\n will be invoked before an object is persisted. This could be used for assigning\n primary key values to persistent objects. This is equivalent to the XML element\n@@ -1086,7 +1086,7 @@ tag <literal>pre-persist</literal>.\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostPersist.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PostPersist.html\">\n <classname>PostPersist</classname></ulink>: Methods marked with this annotation\n will be invoked after an object has transitioned to the persistent state. You\n might want to use such methods to update a screen after a new row is added. This\n@@ -1103,7 +1103,7 @@ is equivalent to the XML element tag <literal>post-persist</literal>.\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostLoad.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PostLoad.html\">\n <classname>PostLoad</classname></ulink>: Methods marked with this annotation\n will be invoked after all eagerly fetched fields of your class have been loaded\n from the datastore. No other persistent fields can be accessed in this method.\n@@ -1125,7 +1125,7 @@ data structure.\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PreUpdate.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PreUpdate.html\">\n <classname>PreUpdate</classname></ulink>: Methods marked with this annotation\n will be invoked just the persistent values in your objects are flushed to the\n datastore. This is equivalent to the XML element tag <literal>\n@@ -1149,7 +1149,7 @@ persistent fields with information cached in non-persistent data.\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostUpdate.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PostUpdate.html\">\n <classname>PostUpdate</classname></ulink>: Methods marked with this annotation\n will be invoked after changes to a given instance have been stored to the\n datastore. This is useful for clearing stale data cached at the application\n@@ -1166,7 +1166,7 @@ layer. This is equivalent to the XML element tag <literal>post-update</literal>.\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PreRemove.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PreRemove.html\">\n <classname>PreRemove</classname></ulink>: Methods marked with this annotation\n will be invoked before an object transactions to the deleted state. Access to\n persistent fields is valid within this method. You might use this method to\n@@ -1185,7 +1185,7 @@ pre-remove</literal>.\n                             lifecycle callbacks\n                         </seealso>\n                     </indexterm>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostRemove.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/PostRemove.html\">\n <classname>PostRemove</classname></ulink>: Methods marked with this annotation\n will be invoked after an object has been marked as to be deleted. This is\n equivalent to the XML element tag <literal>post-remove</literal>."},{"sha":"bfa9abfe33343f4f77499e9cc11294e35a91162a","filename":"openjpa-project/src/doc/manual/jpa_overview_persistence.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_persistence.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -68,7 +68,7 @@ additional utility methods.\n Within a container, you will typically use <emphasis>injection</emphasis> to\n access an <classname>EntityManagerFactory</classname>. Applications operating\n outside of a container, however, can use the\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Persistence.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/Persistence.html\">\n <classname>Persistence</classname></ulink> class to obtain <classname>\n EntityManagerFactory</classname> objects in a vendor-neutral fashion.\n     </para>\n@@ -456,7 +456,7 @@ transaction management.\n                 <para>\n <literal>provider</literal>: If you are using a third-party JPA vendor, this\n element names its implementation of the\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/spi/PersistenceProvider.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/spi/PersistenceProvider.html\">\n <classname>PersistenceProvider</classname></ulink> bootstrapping interface.\n                 </para>\n                 <note>"},{"sha":"f42b3a29d74d951d7cd926b2c80b4823aa7bb6d4","filename":"openjpa-project/src/doc/manual/jpa_overview_query.xml","status":"modified","additions":31,"deletions":19,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_query.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_overview_query.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_query.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -74,7 +74,7 @@ public Query createQuery(String jpql);\n </programlisting>\n             <para>\n The\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityManager.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/EntityManager.html\">\n <methodname>EntityManager.createQuery</methodname></ulink> method creates a\n <classname>Query</classname> instance from a given JPQL string.\n             </para>\n@@ -83,7 +83,7 @@ public List getResultList();\n </programlisting>\n             <para>\n Invoking\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html#getResultList()\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/Query.html#getResultList()\">\n <methodname>Query.getResultList</methodname></ulink> executes the query and\n returns a <classname>List</classname> containing the matching objects. The\n following example executes our <classname>Magazine</classname> query above:\n@@ -737,8 +737,12 @@ All input parameters must be single-valued, except in IN expressions\n                 Query Hints\n             </title>\n             <para>\n-JPQL provides support for hints which are name/value pairs used to control locking and optimization keywords in sql. \n-The following example shows how to use the JPA hint api to set the <classname>ReadLockMode</classname>  and <classname>ResultCount</classname>  in the OpenJPA fetch plan.  This will result in the sql keywords OPTIMIZE FOR 2 ROWS  and FOR UPDATE to be emitted into the sql provided that a pessimistic LockManager is being used.\n+JPQL provides support for hints which are name/value pairs used to control locking and optimization keywords in SQL. \n+The following example shows how to use the JPA hint API to set the <classname>ReadLockMode</classname>\n+and <classname>ResultCount</classname> in the OpenJPA fetch plan. This will result in\n+a database-specific SQL keyword (usually FOR UPDATE) to be emitted into the SQL provided that a\n+pessimistic LockManager is being used. Additionally, if a DB2 database is being used,\n+the OPTIMIZE FOR 2 ROWS clause will also be emitted.\n             </para>\n             <example id=\"jpa_query_hint1\">\n                 <title>\n@@ -754,17 +758,22 @@ List r = q.getResultList();\n </programlisting>\n             </example>\n             <para>\n-Invalid hints or hints which can not be processed by a particular database are ignored.  Otherwise, invalid hints will result in an ArgumentException being thrown. \n+Hints which can not be processed by a particular database or are unknown to OpenJPA are ignored.\n+Hints known to OpenJPA but supplied with an incompatible value will result in an\n+<classname>IllegalArgumentException</classname> being thrown.\n             </para>\n             <section id=\"jpa_hints_locking\">\n                 <title>\n                     Locking Hints\n                 </title>\n                 <para>\n-To avoid deadlock and optimistic update exceptions among multiple updaters, use a pessimistic LockManager, specified in the persistence unit definition, and use a hint name of &quot;openjpa.FetchPlan.ReadLockMode&quot; on queries for entities that must be locked for serialization.   The value of <classname>ReadLockMode</classname> can be either &quot;READ&quot; or &quot;WRITE&quot;.  This results in FOR UPDATE or USE AND KEEP UPDATE LOCKS in sql.\n+To avoid deadlock and optimistic update exceptions among multiple updaters, use a pessimistic LockManager, specified in the persistence unit definition,\n+and use a hint name of &quot;openjpa.FetchPlan.ReadLockMode&quot; on queries for entities that must be locked for serialization.\n+The value of <classname>ReadLockMode</classname> can be either &quot;READ&quot; or &quot;WRITE&quot;.\n+This results in a database-specific locking keyword (usually FOR UPDATE) to be emitted into the SQL.\n                 </para>\n                 <para>\n-Using a <classname>ReadLockMode</classname> hint with JPA optimistic locking ( i.e. specifying LockManager = &quot;version&quot;) will result in the entity version field either being reread at end of transaction in the case of a value of &quot;READ&quot; or the version field updated at end of transaction in the case of  &quot;WRITE&quot;.   You must define a version field in the entity mapping when using a version LockManager and using ReadLockMode.   \n+Using a <classname>ReadLockMode</classname> hint with JPA optimistic locking (i.e. specifying LockManager = &quot;version&quot;) will result in the entity version field either being reread at end of transaction in the case of a value of &quot;READ&quot; or the version field updated at end of transaction in the case of  &quot;WRITE&quot;.   You must define a version field in the entity mapping when using a version LockManager and using ReadLockMode.   \n                 </para>\n                 <table>\n                     <title>\n@@ -793,9 +802,9 @@ Using a <classname>ReadLockMode</classname> hint with JPA optimistic locking ( i\n                                  READ\n                              </entry>\n                              <entry colname=\"pessimistic\">\n-                                 sql with UPDATE\n+                                 SQL with FOR UPDATE\n                              </entry>\n-                             <entry colname=\"version\">sql without update;\n+                             <entry colname=\"version\">SQL without FOR UPDATE;\n                              <para>\n reread version field at the end of transaction and check for no change.\n                              </para>\n@@ -806,10 +815,10 @@ reread version field at the end of transaction and check for no change.\n                                  WRITE\n                              </entry>\n                              <entry colname=\"pessimistic\">\n-                                 sql with UPDATE\n+                                 SQL with FOR UPDATE\n                              </entry>\n                              <entry colname=\"version\">\n-                                 sql without update; \n+                                 SQL without FOR UPDATE; \n                              <para>\n force update version field at the end of transaction\n                              </para>\n@@ -820,10 +829,10 @@ force update version field at the end of transaction\n                                  not specified\n                              </entry>\n                              <entry colname=\"pessimistic\">\n-                                 sql without update\n+                                 SQL without FOR UPDATE\n                              </entry>\n                              <entry colname=\"version\">\n-                                 sql without update\n+                                 SQL without FOR UPDATE\n                              </entry>\n                          </row>\n                     </tbody>\n@@ -857,15 +866,15 @@ default behavior.\n                     Result Set Size Hint\n                 </title>\n                 <para>\n-To specify a result set size hint to those databases that support it, specify a hint name of &quot;openjpa.hint.OptimizeResultCount&quot; with an integer value greater than zero.  This causes the sql keyword OPTIMIZE FOR to be generated.\n+To specify a result set size hint to those databases that support it, specify a hint name of &quot;openjpa.hint.OptimizeResultCount&quot; with an integer value greater than zero.  This causes the SQL keyword OPTIMIZE FOR to be generated.\n                 </para>\n             </section>\n             <section id=\"jpa_hints_isolation\">\n                 <title>\n                     Isolation Level Hint\n                 </title>\n                 <para>\n-To specify an isolation level, specify a hint name of &quot;openjpa.FetchPlan.Isolation&quot;.  The value will be used to specify isolation level using the sql WITH &lt;isolation&gt; clause for those databases that support it.  This hint only works in conjunction with the ReadLockMode hint.\n+To specify an isolation level, specify a hint name of &quot;openjpa.FetchPlan.Isolation&quot;.  The value will be used to specify isolation level using the SQL WITH &lt;isolation&gt; clause for those databases that support it.  This hint only works in conjunction with the ReadLockMode hint.\n                 </para>\n             </section>\n             <section id=\"jpa_hints_fetchplan\">\n@@ -884,7 +893,7 @@ Any property of  an OpenJPA FetchPlan can be changed using a hint by using a nam\n                 <para>\n The hint names &quot;openjpa.hint.MySQLSelectHint&quot; and\n &quot;openjpa.hint.OracleSelectHint&quot; can be used to specify a string value\n-of a query hint that will be inserted into sql for MySQL and Oracle databases.\n+of a query hint that will be inserted into SQL for MySQL and Oracle databases.\n See <xref linkend=\"dbsupport_mysql_query_hints\"/> and\n <xref linkend=\"dbsupport_oracle_query_hints\"/> for examples.  \n                 </para>\n@@ -903,9 +912,12 @@ Hints can also be included as part of a NamedQuery definition.\n <programlisting>\n ...\n @NamedQuery(name=\"magsOverPrice\",\n-query=\"SELECT x FROM Magazine x WHERE x.price > ?1\",\n-hints={ @QueryHint  (name=\"openjpa.hint.OptimizeResultCount\", value=\"2\"),\n-        @QueryHint (name=\"openjpa.FetchPlan.ReadLockMode\",value=\"WRITE\")} )\n+    query=\"SELECT x FROM Magazine x WHERE x.price > ?1\",\n+    hints={\n+        @QueryHint(name=\"openjpa.hint.OptimizeResultCount\", value=\"2\"),\n+        @QueryHint(name=\"openjpa.FetchPlan.ReadLockMode\", value=\"WRITE\")\n+    }\n+)\n ...\n </programlisting>\n                 </example>"},{"sha":"992164f2c18bbd5258f14195a36d46cb1b4c9c7d","filename":"openjpa-project/src/doc/manual/jpa_resources.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_resources.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_resources.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_resources.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -35,7 +35,7 @@ EJB 3 JSR page</ulink>\n         </listitem>\n         <listitem>\n             <para>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/index.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/index.html\">\n javax.persistence Javadoc</ulink>\n             </para>\n         </listitem>"},{"sha":"6ee8ac293592cf4a752d891ec21a84360e5ce114","filename":"openjpa-project/src/doc/manual/jpa_tutorials.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_tutorials.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/jpa_tutorials.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_tutorials.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -382,7 +382,7 @@ Compile the <filename>.java</filename> files.\n javac *.java\n </programlisting>\n                     <para>\n-You can use any java compiler instead of <command>javac</command>.\n+You can use any Java compiler instead of <command>javac</command>.\n                     </para>\n                 </listitem>\n                 <listitem>\n@@ -1158,8 +1158,8 @@ The first query is snake-centric - the query runs against the <classname>Snake\n </classname> class, looking for all snakes named Killer and providing a detailed\n listing of them. The second is rabbit-centric - it examines the rabbits in the\n database for instances whose <literal>eater</literal> is named Killer. This\n-second query demonstrates the that simple java 'dot' syntax is used when\n-traversing an to-one field in a query.\n+second query demonstrates that the simple Java 'dot' syntax is used when\n+traversing a to-one field in a query.\n                 </para>\n                 <para>\n It is also possible to traverse collection fields. Imagine that there was a"},{"sha":"e8352f3694b1bc0b9e579ba5ae17d812a3f0758d","filename":"openjpa-project/src/doc/manual/openjpa_legal.xml","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/openjpa_legal.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/openjpa_legal.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/openjpa_legal.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -74,7 +74,7 @@ The openjpa-all aggregate JAR includes software developed by the:\n     Apache Commons Pool project\n                 </para></listitem>\n                 <listitem><para>\n-    Apache Geronimo project (JMS 1.1, JTA 1.1 and JPA 2.0 spec apis)\n+    Apache Geronimo project (JMS 1.1, JTA 1.1 and JPA 2.0 spec APIs)\n                 </para></listitem>\n                 <listitem><para>\n     JCP JSR-317 JPA 2.0 Schemas\n@@ -93,10 +93,12 @@ The openjpa-all aggregate JAR includes software developed by the:\n         <section id=\"openjpa_legal_copyright_apache\">\n             <title>Apache</title>\n             <para>\n-Copyright (C) 2005-2009 Apache Software Foundation.\n+Copyright (C) 2006,2010 The Apache Software Foundation.\n             </para>\n             <para>\n Apache, OpenJPA and the Apache feather logo are trademarks of Apache Software Foundation.\n+Java and all Java-based trademarks and logos are trademarks of Sun Microsystems, Inc. in the United States, other countries, or both.\n+Other names may be trademarks of their respective owners.\n             </para>\n         </section>\n         <section id=\"openjpa_legal_copyright_serp\">"},{"sha":"be0f33150b81c987897735861f6b954a323c7321","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":103,"deletions":41,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -151,44 +151,6 @@ openjpa.RemoteCommitProvider</literal></link> property to <literal>sjvm\n </programlisting>\n             </example>\n             <para>\n-OpenJPA also supports a partitioned cache configuration where the cached\n-instances can be distributed across partitions by a application-defined\n-policy. Each partition is a data cache by itself, identified by its name and can\n-configured individually. The distribution policy \n-determines the specific partition that stores the state of a managed instance.\n-The default distribution policy distributes the instances by their type\n-as specified by the <literal>name</literal> attribute in <literal>@DataCache</literal> \n-annotation. Cache distribution policy is a simple interface that can be implemented\n-by an application to distribute among the partitions per instance basis.               \n-To enable a partitioned cache set the <literal>openjpa.DataCache</literal>\n-property to <literal>partitioned</literal>, and configure individual partitions\n-as follows:\n-            </para>\n-            <example id=\"ref_guide_cache_conf_partition\">\n-                <title>\n-                    Partitioned Data Cache\n-                </title>\n-<programlisting>\n-&lt;property name=\"openjpa.DataCacheManager\" value=\"DistributionPolicy=org.acme.foo.DistributionPolicy\"/&gt;\n-&lt;property name=\"openjpa.DataCache\" value=\"partitioned(PartitionType=concurrent,partitions=\n-                '(name=a,cacheSize=100),(name=b,cacheSize=200)')\"/&gt;\n-</programlisting>\n-            </example>\n-            <para>\n-The distribution policy is configured by a full-qualified class name that implements \n-<literal>org.apache.openjpa.datacahe.CacheDistributionPolicy</literal>. The partitions\n-are specified as value of <literal>partitions</literal> attribute as a series of\n-individually configurable plug-in strings. As the example shows, i) each partition plug-in configuration\n-must be enclosed in parentheses, ii) must be separated by comma and iii) the complete\n-set be enclosed in single quote. Each individual partition is a Data Cache by itself and\n-class that implements the partition can be configured via <literal>PartitionType</literal>\n-attribute. The above example configuration will configure a partitioned cache with\n-two partitions named <literal>a</literal> and <literal>b</literal> of cache size 100 and 200\n-respectively. The partitions are of <literal>concurrent</literal> type which is a mnemonic or alias\n-for <literal>org.apache.openjpa.datacache.ConcurrentDataCache</literal>. The <literal>PartitionType</literal>\n-is defaulted to <literal>concurrent</literal> though explicitly mentioned in this example.         \n-            </para>\n-            <para>\n To configure the data cache to remain up-to-date in a distributed environment,\n set the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n openjpa.RemoteCommitProvider</literal></link> property appropriately, or\n@@ -254,6 +216,51 @@ public class Employee {\n }\n </programlisting>\n             </example>\n+\n+            <para>\n+            <indexterm>\n+                <primary>caching</primary>\n+                <secondary>exclusions</secondary>\n+            </indexterm>\n+            Entities may be explicitly excluded from the cache by providing a \n+            list of fully qualified class names in the ExcludedTypes argument. \n+            The entities provided via ExcludedTypes will not be cached \n+            regardless of the @DataCache annotation. \n+            </para>\n+            <example id=\"ex_exclude_types_from_cache\">\n+                <title>\n+                    Excluding entities\n+                </title>\n+                <para>\n+                    Exclude entities foo.bar.Person and foo.bar.Employee from the cache. \n+                    <programlisting>\n+&lt;property name=\"openjpa.DataCache\" value=\"true(ExcludedTypes=foo.bar.Person;foo.bar.Employee)\"/&gt;\n+                    </programlisting>\n+                </para>\n+            </example>\n+\n+            <para>\n+            <indexterm>\n+                <primary>caching</primary>\n+                <secondary>inclusions</secondary>\n+            </indexterm>\n+            Entities may be explicitly included from the cache by providing a\n+            list of fully qualified class names in the Types argument.\n+            The entities provided via ExcludedTypes will not cached regardless\n+            of the @DataCache annotation. Any entities which are not included \n+            in this list will not be cached. \n+            </para>\n+            <example id=\"ex_include_types_in_cache\">\n+                <title>\n+                    Including entities\n+                </title>\n+                <para>\n+                    Include only entity foo.bar.FullTimeEmployee from the cache. \n+                    <programlisting>\n+&lt;property name=\"openjpa.DataCache\" value=\"true(Types=foo.bar.FullTimeEmployee)\"/&gt;\n+                    </programlisting>\n+                </para>\n+            </example>\n             <para>\n See the <ulink url=\"../javadoc/org/apache/openjpa/persistence/DataCache.html\">\n <classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc\n@@ -310,6 +317,48 @@ past 3 PM on Sunday.\n <programlisting>\n true(EvictionSchedule='15,45 15 * * 1')\n </programlisting>\n+<section id=\"ref_guide_cache_distribution\">\n+   <title>Distributing instances across cache partitions</title>\n+            <para>\n+            \n+OpenJPA also supports a partitioned cache configuration where the cached\n+instances can be distributed across partitions by an application-defined\n+policy. Each partition behaves as a data cache by itself, identified by its name and can\n+be configured individually. The distribution policy \n+determines the specific partition that stores the state of a managed instance.\n+The default distribution policy distributes the instances by their type\n+as specified by the <literal>name</literal> attribute in <literal>@DataCache</literal> \n+annotation. Cache distribution policy is a simple interface that can be implemented\n+by an application to distribute among the partitions on a per instance basis.               \n+To enable a partitioned cache set the <literal>openjpa.DataCache</literal>\n+property to <literal>partitioned</literal>, and configure individual partitions\n+as follows:\n+            </para>\n+            <example id=\"ref_guide_cache_conf_partition\">\n+                <title>\n+                    Partitioned Data Cache\n+                </title>\n+<programlisting>\n+&lt;property name=\"openjpa.CacheDistributionPolicy\" value=\"org.acme.foo.DistributionPolicy\"/&gt;\n+&lt;property name=\"openjpa.DataCache\" value=\"partitioned(PartitionType=concurrent,partitions=\n+                '(name=a,cacheSize=100),(name=b,cacheSize=200)')\"/&gt;\n+</programlisting>\n+            </example>\n+</section>\n+            <para>\n+The distribution policy is configured by a full-qualified class name that implements \n+<literal>org.apache.openjpa.datacahe.CacheDistributionPolicy</literal>. The partitions\n+are specified as value of the <literal>partitions</literal> attribute as a series of\n+individually configurable plug-in strings. As the example shows, i) each partition plug-in configuration\n+must be enclosed in parentheses, ii) must be separated by comma and iii) the complete\n+set be enclosed in single quote. Each individual partition is a Data Cache by itself and\n+the class that implements the partition can be configured via <literal>PartitionType</literal>\n+attribute. The above example configuration will configure a partitioned cache with\n+two partitions named <literal>a</literal> and <literal>b</literal> of cache size 100 and 200, \n+respectively. The partitions are of <literal>concurrent</literal> type which is a mnemonic or alias\n+for <literal>org.apache.openjpa.datacache.ConcurrentDataCache</literal>. The <literal>PartitionType</literal>\n+is defaulted to <literal>concurrent</literal> though explicitly mentioned in this example.         \n+            </para>\n         </section>\n         <section id=\"ref_guide_cache_use\">\n             <title>\n@@ -500,7 +549,17 @@ oem.evict(changedMag);  // will evict from data cache also\n data cache is available via \n <ulink url=\"../javadoc/org/apache/openjpa/datacache/CacheStatistics.html\">\n <classname>org.apache.openjpa.datacache.CacheStatistics</classname></ulink> \n-interface. You can access this statistics via StoreCache \n+interface. The collection of cache statistics is disabled by default and needs to be enabled on a per cache basis. By default\n+all counts returned from the CacheStatistics interface will return 0.\n+        <example id=\"ref_guide_cache_enablestats\">\n+                <title>\n+                    Configuring CacheStatistics\n+                </title>\n+                <programlisting>\n+&lt;property name=\"openjpa.DataCache\" value=\"true(EnableStatistics=true)\"/&gt;\n+</programlisting>\n+        </example>\n+Once cache statistics are enabled you can access them via StoreCache \n <programlisting>\n import org.apache.openjpa.datacache.CacheStatistics;\n ...\n@@ -537,6 +596,9 @@ public interface org.apache.openjpa.datacache.CacheStatistics extends java.io.Se\n     \n     // Resets the statistics. \n     public void reset();\n+    \n+    // Returns whether or not statistics will be collected.\n+    public boolean isEnabled();\n }\n </programlisting>\n Collecting per-class statistics depends on determining the runtime type of a\n@@ -722,7 +784,7 @@ public void evictAll();\n </programlisting>\n             <para>\n For JPA queries with parameters, set the desired parameter values into the\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/Query.html\">\n <classname>Query</classname></ulink> instance before calling the above methods.\n             </para>\n             <example id=\"ref_guide_cache_query_classchange\">\n@@ -766,7 +828,7 @@ public void unpin(Query q);\n </programlisting>\n             <para>\n For JPA queries with parameters, set the desired parameter values into the\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/Query.html\">\n <classname>Query</classname></ulink> instance before calling the above methods.\n             </para>\n             <para>"},{"sha":"b6fb612a690d0d8db051d58bf302ec3c24eed931","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1876,7 +1876,7 @@ runtime. See <xref linkend=\"ref_guide_dbsetup_lrs\"/> for details.\n <xref linkend=\"ref_guide_conf_plugins\"/>) describing the\n <ulink url=\"../javadoc/org/apache/openjpa/lib/EncryptionProvider.html\"><classname>\n org.apache.openjpa.lib.EncryptionProvider</classname></ulink>s to use for connection password\n-encryption. See <xref linkend=\"ref_guide_encryption1\"/> for details.\n+encryption. See <xref linkend=\"ref_guide_encryption\"/> for details.\n             </para>\n         </section>\n \n@@ -2075,7 +2075,6 @@ or flush before running it against the datastore.\n             </para>\n         </section>\n         \n-InitializeEagerly\n         <section id=\"openjpa.InitializeEagerly\">\n             <title>\n                 openjpa.InitializeEagerly"},{"sha":"cc6c071d19f3c60ad02bdb788c71f68d58f52586","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":54,"deletions":7,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -664,10 +664,10 @@ class.\n                 <para>\n                 <indexterm>\n                     <primary>\n-                        SQLServer\n+                        SQL Server\n                     </primary>\n                 </indexterm>\n-<literal>sqlserver</literal>: Dictionary for Microsoft's SQLServer database.\n+<literal>sqlserver</literal>: Dictionary for Microsoft's SQL Server database.\n This is an alias for the\n <ulink url=\"../javadoc/org/apache/openjpa/jdbc/sql/SQLServerDictionary.html\">\n <classname>org.apache.openjpa.jdbc.sql.SQLServerDictionary</classname></ulink>\n@@ -2397,6 +2397,20 @@ supports delimited identifiers. It defaults to <literal>true</literal>.\n keys. Defaults to <literal>true</literal>.\n                     </para>\n                 </listitem>\n+                <listitem id=\"DBDictionary.SupportsForeignKeysComposite\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            foreign keys\n+                        </primary>\n+                        <secondary>\n+                            SupportsForeignKeysComposite\n+                        </secondary>\n+                    </indexterm>\n+<literal>SupportsForeignKeysComposite</literal>: When true, the database supports\n+composite foreign keys. Defaults to <literal>true</literal>.\n+                    </para>\n+                </listitem>\n                 <listitem id=\"DBDictionary.SupportsGetGeneratedKeys\">\n                     <para>\n                     <indexterm>\n@@ -2788,6 +2802,24 @@ select that is limited to the first N results.\n select that skips the first N results.\n                     </para>\n                 </listitem>\n+                <listitem id=\"DBDictionary.SupportsSimpleCaseExpression\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            SupportsSimpleCaseExpression\n+                        </secondary>\n+                    </indexterm>\n+<literal>SupportsSimpleCaseExpression</literal>: When true, the database supports\n+the simple form of <literal>CASE</literal> expression:\n+<literal>CASE &lt;a&gt; WHEN &lt;b&gt; THEN &lt;c&gt; WHEN &lt;d&gt; THEN &lt;e&gt; ELSE &lt;f&gt; END</literal>.\n+When false, the general form of <literal>CASE</literal> expression will be used:\n+<literal>CASE WHEN &lt;a&gt; = &lt;b&gt; THEN &lt;c&gt; WHEN &lt;a&gt; = &lt;d&gt; THEN &lt;e&gt; ELSE &lt;f&gt; END</literal>.\n+Defaults to <literal>true</literal>.\n+                    </para>\n+                </listitem>\n                 <listitem id=\"DBDictionary.SupportsSubselect\">\n                     <para>\n                     <indexterm>\n@@ -3192,6 +3224,21 @@ PreparedStatement.setString</methodname> will be used to set clob data, rather\n than <methodname>PreparedStatement.setCharacterStream</methodname>.\n                     </para>\n                 </listitem>\n+                <listitem id=\"DBDictionary.UseWildCardForCount\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            UseWildCardForCount\n+                        </secondary>\n+                    </indexterm>\n+<literal>UseWildCardForCount</literal>: When true, the JPQL <literal>COUNT</literal>\n+aggregate function will be translated into SQL <literal>COUNT(*)</literal> expression\n+if the SQL query does not involve joins. Defaults to <literal>false</literal>.\n+                    </para>\n+                </listitem>\n                 <listitem id=\"DBDictionary.ValidationSQL\">\n                     <para>\n                     <indexterm>\n@@ -3962,12 +4009,12 @@ property accepts the following values:\n <literal>always</literal>: Each <classname>EntityManager</classname> obtains a\n single connection and uses it until the <classname>EntityManager</classname>\n closes. Great care should be taken when using this property if the application \n-cannot close the EntityManager (ie container-managed EntityManagers in a JEE \n+cannot close the EntityManager (i.e. container-managed EntityManagers in a JEE \n Application Server). In this case the connection will remain open for an \n undefined time and the application may not be able to recover from a terminated\n-connection(ie if a TCP/IP timeout severs the connection to the database). \n+connection (for example, if a TCP/IP timeout severs the connection to the database). \n For this reason the <literal>always</literal> option should not be used with \n-container managed EntityManagers.\n+container-managed EntityManagers.\n                 </para>\n             </listitem>\n             <listitem>\n@@ -4277,7 +4324,7 @@ Or\n &lt;property name=\"openjpa.jdbc.DBDictionary\" value=\"batchLimit=0\"/&gt;\n </programlisting>\n         </example>\n-        <par>\n+        <para>\n By default, org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager \n is the default statement batching implementation. OPENJPA also \n provides another update manager \n@@ -4291,7 +4338,7 @@ class as a property in the persistence.xml file. For example, a custom\n statement batching implementation mycomp.MyUpdateManager extends \n ConstraitUpdateManager. You specify this implementation in the persistence.xml\n file as the following example:\n-        </par>\n+        </para>\n          <example id=\"ref_guide_dbsetup_stmtbatch_exmple3\">\n             <title>\n                 Plug-in custom statement batching implementation"},{"sha":"e9a0dd18bcb5032d17af9e38b4a5101faaf82262","filename":"openjpa-project/src/doc/manual/ref_guide_deploy.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_deploy.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_deploy.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_deploy.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -139,7 +139,7 @@ global transactions.\n         <para>\n You can override the global transaction mode setting when you obtain an\n <classname>EntityManager</classname> using the \n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityManagerFactory.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/EntityManagerFactory.html\">\n <classname>EntityManagerFactory</classname></ulink>'s\n <methodname>createEntityManager(Map props)</methodname> method.  Simply set the\n <literal>openjpa.TransactionMode</literal> key of the given <classname>Map"},{"sha":"985ad57773bea3b00fcc80861418fbe8e5b6a39b","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -549,7 +549,7 @@ generation.\n                         <para>\n <literal>-annotations/-ann &lt;true/t | false/f&gt;</literal>: Set to\n <literal>true</literal> to\n-generate JPA annotations in generated java classes.\n+generate JPA annotations in generated Java classes.\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -652,7 +652,7 @@ the default Java classes to generate for each SQL type that is seen in the\n schema. The format is <literal> SQLTYPE1=JavaClass1,SQLTYPE2=JavaClass2\n </literal>. The SQL type name first looks for a customization based on <literal>\n SQLTYPE(SIZE,PRECISION)</literal>, then <literal>SQLTYPE(SIZE)</literal>, then\n-<literal>SQLTYPE(SIZE,PRECISION)</literal>. So if a column whose type name is\n+<literal>SQLTYPE</literal>. So if a column whose type name is\n <literal>CHAR</literal> is found, it will first look for the <literal>\n CHAR(50,0)</literal> type name specification, then it will look for <literal>\n CHAR(50)</literal>, and finally it will just look for <literal>CHAR</literal>.\n@@ -2869,8 +2869,8 @@ public class Employee {\n         </indexterm>\n         <para>\n         Key columns serve the same role for map keys as the element\n-        columns described in\n-        <xref linkend=\"ref_guide_mapping_jpa_coll_cols\"/> serve for\n+        join columns described in\n+        <xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/> serve for\n         collection elements.  OpenJPA's\n         <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyColumn.html\">\n         <classname>org.apache.openjpa.persistence.jdbc.KeyColumn</classname>"},{"sha":"673dc313d799695ec13b00e7ddaa2b11dfac3c75","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -461,9 +461,9 @@ database only as necessary.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-If you have enabled scrollable result sets and on-demand loading but do you not\n+If you have enabled scrollable result sets and on-demand loading but you do not\n require it, consider disabling it again.  Some JDBC drivers and databases \n-(SQLServer for example) are much slower when used with scrolling result sets.\n+(SQL Server for example) are much slower when used with scrolling result sets.\n                     </entry>\n                 </row>\n                 <row>"},{"sha":"cb8f5b7a99fcef71ee593450d104c09228be4cb8","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -658,7 +658,7 @@ Returns the level at which the given object is currently locked.\n             </para>\n             <para>\n In addition to the standard\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityManager.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/EntityManager.html\">\n <methodname>EntityManager.lock(Object, LockModeType)</methodname></ulink>\n method, the\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">"},{"sha":"4e42f0baf2ae49f964dfcd4b3ac0908800489fd3","filename":"openjpa-project/src/doc/manual/ref_guide_slice.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_slice.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/ref_guide_slice.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_slice.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -633,4 +633,4 @@ the JDBC connection URL of a slice.\n   </section>\n \n </chapter>\n-  \n\\ No newline at end of file\n+  "},{"sha":"a713c692c05818517c77015a8a82f6556d810cc3","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -320,13 +320,13 @@ databases that have been fully tested against this release, please refer to the\n                         <link linkend=\"dbsupport_h2\">H2 Database Engine</link>\n                     </entry>\n                     <entry colname=\"dbversion\">\n-                        1.0\n+                        1.1.118\n                     </entry>\n                     <entry colname=\"drivname\">\n                         H2\n                     </entry>\n                     <entry colname=\"drivversion\">\n-                        1.0\n+                        1.1.118\n                     </entry>\n                 </row>\n                 <row>\n@@ -678,7 +678,7 @@ openjpa.ConnectionURL: jdbc:h2:DB_NAME\n             <itemizedlist>\n                 <listitem>\n                     <para>\n-H2 does not support cross joins\n+None\n                     </para>\n                 </listitem>\n             </itemizedlist>\n@@ -1050,13 +1050,6 @@ mismatch between the field that is stored and the field that is retrieved.\n                 </listitem>\n                 <listitem>\n                     <para>\n-Some version of the MySQL JDBC driver have a bug that prevents OpenJPA from\n-being able to interrogate the database for foreign keys. Version 3.0.14 (or\n-higher) of the MySQL driver is required in order to get around this bug.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n When using large result sets with MySQL there are a number of documented limitations.\n Please read the section titled \"ResultSet\" in the \"MySQL JDBC API Implementation Notes\".\n The net effect of these limitations is that you will have to read all of the rows of a\n@@ -1127,9 +1120,7 @@ http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.\n                 </listitem>\n                 <listitem>\n                     <para>\n-For VARCHAR fields, <literal>null</literal> and a blank string are equivalent.\n-This means that an object that stores a null string field will have it get read\n-back as a blank string.\n+Empty string/char values are stored as NULL.\n                     </para>\n                 </listitem>\n                 <listitem>"},{"sha":"1663d8aedee15a83c746ac4df44418dd4d5bde00","filename":"openjpa-slice/pom.xml","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -21,17 +21,21 @@\n     Maven release plugin requires the project tag to be on a single line.\n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n     <modelVersion>4.0.0</modelVersion>\n+\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n+\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-slice</artifactId>\n     <packaging>jar</packaging>\n     <name>OpenJPA Slice</name>\n     <description>OpenJPA Slice</description>\n+\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n@@ -62,6 +66,7 @@\n             <scope>test</scope>\n         </dependency>\n     </dependencies>\n+\n     <profiles>\n         <!-- Default is to test with Embedded Derby, which is setup in\n              persistence.xml to create the required slices -->\n@@ -85,14 +90,17 @@\n                 </dependency>\n             </dependencies>\n             <properties>\n-                <mysql.version>5.1.6</mysql.version>\n                 <connection.driver.name>com.mysql.jdbc.Driver</connection.driver.name>\n                 <connection.url>${openjpa.mysql.url}</connection.url>\n                 <connection.username>${openjpa.mysql.username}</connection.username>\n                 <connection.password>${openjpa.mysql.password}</connection.password>\n+                <!-- DBCP overrides for MySQL testing -->\n+                <dbcp.maxIdle>0</dbcp.maxIdle>\n+                <dbcp.minIdle>0</dbcp.minIdle>\n             </properties>\n         </profile>\n     </profiles>\n+\n     <build>\n         <plugins>\n             <plugin>\n@@ -118,6 +126,19 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>"},{"sha":"c287c3acbc400ff894f32ace8ee81d80c4566731","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"d5a186b1a751b7619df9d4dc813f140b3f0f9a93","filename":"openjpa/pom.xml","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n+        <version>2.0.0-beta2</version>\n     </parent>\n \n     <build>\n@@ -85,7 +85,7 @@\n                                  javax.persistence.spi.PersistenceProvider\n                                  org.apache.openjpa.kernel.exps.ExpressionParser\n                                 -->\n-                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n                                 <!-- Need to add some MANIFEST.MF metadata -->\n                                 <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                     <manifestEntries>\n@@ -118,7 +118,7 @@\n                         </goals>\n                         <configuration>\n                             <tasks>\n-                                <unzip src=\"${project.build.directory}/${pom.artifactId}-${pom.version}.jar\" dest=\"${project.build.directory}/classes\"/>\n+                                <unzip src=\"${project.build.directory}/${pom.artifactId}-${pom.version}.jar\" dest=\"${project.build.directory}/classes\" />\n                             </tasks>\n                         </configuration>\n                     </execution>\n@@ -134,14 +134,10 @@\n                     <instructions>\n                         <!-- OSGi Bundle Metadata -->\n                         <Bundle-DocURL>${project.url}</Bundle-DocURL>\n+                        <Bundle-Activator>org.apache.openjpa.osgi.PersistenceActivator</Bundle-Activator>\n                         <Private-Package />\n                         <Export-Package>org.apache.openjpa.*;version=${pom.version}</Export-Package>\n-                        <Import-Package>com.ibm.*;resolution:=optional,org.postg\n-resql.*;resolution:=optional,org.apache.tools.ant.*;resolution:=optional,org.apa\n-che.log4j.*;resolution:=optional,javax.activation.xa*;resolution:=optional,javax\n-.jms.*;resolution:=optional,javax.transaction.*;resolution:=optional,javax.valid\n-ation.*;resolution:=optional,javax.xml.bind.*;resolution:=optional,serp.*;resolu\n-tion:=optional,*</Import-Package>\n+                        <Import-Package>com.ibm.*;resolution:=optional,org.postgresql.*;resolution:=optional,org.apache.tools.ant.*;resolution:=optional,org.apache.log4j.*;resolution:=optional,javax.activation.xa*;resolution:=optional,javax.jms.*;version=\"[1.1.0,1.2)\";resolution:=optional,javax.transaction.*;version=\"[1.1.0,1.2)\";resolution:=optional,javax.validation.*;version=\"[1.0.0,1.1)\";resolution:=optional,javax.xml.bind.*;resolution:=optional,serp.*;resolution:=optional,javax.persistence.*;version=\"[2.0.0,2.1)\",*</Import-Package>\n                         <!-- Eclipse metadata -->\n                         <Eclipse-Autostart>false</Eclipse-Autostart>\n                         <Bundle-ClassPath>.</Bundle-ClassPath>\n@@ -174,6 +170,7 @@ tion:=optional,*</Import-Package>\n                      javax.xml.bind:jsr173_api:jar:1.0\n                      javax.activation:activation:jar:1.1\n                      com.sun.xml.bind:jaxb-impl:jar:2.0.5\n+            -->\n             <exclusions>\n                 <exclusion>\n                     <groupId>javax.xml.bind</groupId>\n@@ -184,7 +181,6 @@ tion:=optional,*</Import-Package>\n                     <artifactId>jaxb-impl</artifactId>\n                 </exclusion>\n             </exclusions>\n-            -->\n         </dependency>\n         <!-- Need to manually add back optional openjpa-jdbc depends -->\n         <dependency>\n@@ -240,5 +236,18 @@ tion:=optional,*</Import-Package>\n             <artifactId>openjpa-slice</artifactId>\n             <version>${pom.version}</version>\n         </dependency>\n+        <!-- for osgi bundle activator code -->\n+        <dependency>\n+            <groupId>org.apache.felix</groupId>\n+            <artifactId>org.osgi.core</artifactId>\n+            <version>1.4.0</version>\n+            <scope>provided</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.apache.felix</groupId>\n+                    <artifactId>org.osgi.foundation</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n     </dependencies>\n </project>"},{"sha":"5555338ac53867d76f19742ae359f8fb220cdd36","filename":"openjpa/src/main/appended-resources/META-INF/NOTICE.vm","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa/src/main/appended-resources/META-INF/NOTICE.vm","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa/src/main/appended-resources/META-INF/NOTICE.vm","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/src/main/appended-resources/META-INF/NOTICE.vm?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -1,4 +1,6 @@\n \n+Apache, the Apache feather logo and OpenJPA are trademarks of The Apache Software Foundation.\n+\n OpenJPA includes software developed by the SERP project\n Copyright (c) 2002-2006, A. Abram White. All rights reserved.\n "},{"sha":"1ab99effe953bfa63475197a6b3795f769182308","filename":"openjpa/src/main/java/org/apache/openjpa/osgi/PersistenceActivator.java","status":"renamed","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa/src/main/java/org/apache/openjpa/osgi/PersistenceActivator.java","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/openjpa/src/main/java/org/apache/openjpa/osgi/PersistenceActivator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/src/main/java/org/apache/openjpa/osgi/PersistenceActivator.java?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.persistence.PersistenceProviderImpl;\n import org.osgi.framework.BundleActivator;\n import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n \n \n /**\n@@ -31,28 +32,31 @@\n  * @version $Rev$ $Date$\n  */\n public class PersistenceActivator implements BundleActivator {\n-\n+    // following is so Aries can find and extend us for OSGi RFC 143\n+    public static final String PERSISTENCE_PROVIDER_ARIES = \"javax.persistence.provider\";\n+    // following would be set by Aries to expose their OSGi enabled provider\n     public static final String PERSISTENCE_PROVIDER = PersistenceProvider.class.getName();\n     public static final String OSGI_PERSISTENCE_PROVIDER = PersistenceProviderImpl.class.getName();\n-    private static BundleContext ctx = null;\n+    private ServiceRegistration svcReg = null;\n \n     /* (non-Javadoc)\n      * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)\n      */\n-    public void start(BundleContext arg0) throws Exception {\n-        ctx = arg0;\n+    public void start(BundleContext ctx) throws Exception {\n         PersistenceProvider provider = new PersistenceProviderImpl();\n         Hashtable<String, String> props = new Hashtable<String, String>();\n-        props.put(PERSISTENCE_PROVIDER, OSGI_PERSISTENCE_PROVIDER);\n-        ctx.registerService(PERSISTENCE_PROVIDER, provider, props);\n+        props.put(PERSISTENCE_PROVIDER_ARIES, OSGI_PERSISTENCE_PROVIDER);\n+        svcReg = ctx.registerService(PERSISTENCE_PROVIDER, provider, props);\n     }\n \n     /* (non-Javadoc)\n      * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)\n      */\n-    public void stop(BundleContext arg0) throws Exception {\n-        // TODO Auto-generated method stub\n-\n+    public void stop(BundleContext ctx) throws Exception {\n+        if (svcReg != null) {\n+            svcReg.unregister();\n+            svcReg = null;\n+        }\n     }\n \n }","previous_filename":"openjpa-osgi/src/main/java/org/apache/openjpa/osgi/PersistenceActivator.java"},{"sha":"bd3ab8d015be3ade0172cc28076accb95e27b058","filename":"pom.xml","status":"modified","additions":268,"deletions":158,"changes":426,"blob_url":"https://github.com/apache/openjpa/blob/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","patch":"@@ -21,46 +21,75 @@\n     Maven release plugin requires the project tag to be on a single line. \n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n     <parent>\n       <groupId>org.apache</groupId>\n       <artifactId>apache</artifactId>\n       <version>6</version>\n     </parent>\n-    <modelVersion>4.0.0</modelVersion>\n-    <prerequisites>\n-        <maven>2.0.4</maven>\n-    </prerequisites>\n+\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-parent</artifactId>\n     <packaging>pom</packaging>\n     <name>OpenJPA Parent POM</name>\n     <description>Apache OpenJPA implementation of JSR-317 JPA 2.0</description>\n+    <!--\n+        Changing this version needs to also be done in all children poms\n+        See: http://jira.codehaus.org/browse/MNG-624\n+    -->\n+    <version>2.0.0-beta2</version>\n \n     <properties>\n         <openjpa.version>${pom.version}</openjpa.version>\n         <openjpa.loglevel>INFO</openjpa.loglevel>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <checkstyle.config.location>../openjpa-project/checkstyle.xml</checkstyle.config.location>\n+        <!-- the test settings can be overridden my specific profiles -->\n         <test.jvm.maxpermsize>512m</test.jvm.maxpermsize>\n         <test.jvm.maxheapsize>1024m</test.jvm.maxheapsize>\n         <test.jvm.arguments>-Xmx${test.jvm.maxheapsize} -XX:MaxPermSize=${test.jvm.maxpermsize}</test.jvm.arguments>\n-        <!-- the sufire.jvm.args can be overridden my specific profiles -->\n         <surefire.jvm.args>${test.jvm.arguments}</surefire.jvm.args>\n-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-        <checkstyle.config.location>../openjpa-project/checkstyle.xml</checkstyle.config.location>\n-        <derby.version>10.2.2.0</derby.version>\n+        <dbcp.maxActive>10</dbcp.maxActive>\n+        <dbcp.maxIdle>5</dbcp.maxIdle>\n+        <dbcp.minIdle>2</dbcp.minIdle>\n+        <dbcp.maxWait>10000</dbcp.maxWait>\n+        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n+        <derby.locks.waitTimeout>10</derby.locks.waitTimeout>\n+        <derby.locks.deadlockTimeout>5</derby.locks.deadlockTimeout>\n+        <!-- Testcase @AllowFailure options:  ignore = silently skip test,\n+             log = execute test and log results but don't fail the test,\n+             anything else allows the test to execute normally\n+        -->\n+        <tests.openjpa.allowfailure>ignore</tests.openjpa.allowfailure>\n+        <!-- common JDBC driver versions -->\n+        <derby.version>10.5.3.0_1</derby.version>\n         <hsqldb.version>1.8.0.10</hsqldb.version>\n+        <mysql.version>5.1.12</mysql.version>\n     </properties>\n \n-    <!--\n-        Changing this version needs to also be done in all children poms\n-        See: http://jira.codehaus.org/browse/MNG-624\n-    -->\n-    <version>2.0.0-SNAPSHOT</version>\n+    <licenses>\n+        <license>\n+            <name>Apache Software License 2.0</name>\n+            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n+            <distribution>repo</distribution>\n+        </license>\n+    </licenses>\n+\n+    <organization>\n+        <name>Apache Software Foundation</name>\n+        <url>http://www.apache.org</url>\n+    </organization>\n+\n     <url>http://openjpa.apache.org</url>\n+\n     <issueManagement>\n         <system>jira</system>\n         <url>http://issues.apache.org/jira/browse/OPENJPA</url>\n     </issueManagement>\n+\n     <inceptionYear>2006</inceptionYear>\n+\n     <mailingLists>\n         <mailingList>\n             <name>OpenJPA Developer List</name>\n@@ -84,17 +113,29 @@\n             <archive>http://mail-archives.apache.org/mod_mbox/openjpa-commits/</archive>\n         </mailingList>\n     </mailingLists>\n-    <licenses>\n-        <license>\n-            <name>Apache Software License 2.0</name>\n-            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n-            <distribution>repo</distribution>\n-        </license>\n-    </licenses>\n-    <organization>\n-        <name>Apache Software Foundation</name>\n-        <url>http://www.apache.org</url>\n-    </organization>\n+\n+    <distributionManagement>\n+      <repository>\n+        <id>local-repository</id>\n+        <url>scp://people.apache.org/home/${user.name}/public_html/openjpa/${pom.version}/staging-repo</url>\n+      </repository>\n+      <snapshotRepository>\n+        <id>local-repository</id>\n+        <url>scp://people.apache.org/home/${user.name}/public_html/openjpa/${pom.version}/staging-repo</url>\n+        <uniqueVersion>false</uniqueVersion>\n+      </snapshotRepository>\n+      <site>\n+        <id>people.apache.org</id>\n+        <url>scp://people.apache.org/home/${user.name}/public_html/openjpa/${pom.version}/staging-site</url>\n+      </site>\n+    </distributionManagement>\n+\n+    <scm>\n+        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta2</connection>\n+        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta2</developerConnection>\n+        <url>http://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta2</url>\n+    </scm>\n+\n     <modules>\n         <module>openjpa-lib</module>\n         <module>openjpa-kernel</module>\n@@ -105,115 +146,13 @@\n         <module>openjpa-xmlstore</module>\n         <module>openjpa-slice</module>\n         <module>openjpa</module>\n-        <!-- <module>openjpa-osgi</module> -->\n         <module>openjpa-project</module>\n         <module>openjpa-examples</module>\n         <module>openjpa-integration</module>\n         <module>openjpa-all</module>\n     </modules>\n \n     <profiles>\n-        <!-- =============== -->\n-        <!--  Test Profiles  -->\n-        <!-- =============== -->\n-        <!-- Default profile for testing with an embedded Apache Derby DB -->\n-        <profile>\n-            <!--\n-                Optionally, you can override the following properties:\n-                    -Dderby.version=10.2.2.0\n-            -->\n-            <id>test-derby</id>\n-            <activation>\n-                <activeByDefault>true</activeByDefault>\n-            <property>\n-                <name>test-derby</name>\n-            </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derby</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n-                <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n-                <connection.username />\n-                <connection.password />\n-            </properties>\n-        </profile>\n-        <!-- Profile for testing with an In-Memory Apache Derby DB -->\n-        <profile>\n-            <!--\n-                Optionally, you can override the following properties:\n-                    -Dderby.version=10.5.3.0_1\n-            -->\n-            <id>test-derbymem</id>\n-            <activation>\n-                <property>\n-                    <name>test-derbymem</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derby</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <derby.version>10.5.3.0_1</derby.version>\n-                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n-                <connection.url>jdbc:derby:memory:openjpa-derby-inmem-database;create=true</connection.url>\n-                <connection.username />\n-                <connection.password />\n-            </properties>\n-        </profile>\n-        <!-- Profile for testing with Apache Derby DB network server -->\n-        <profile>\n-            <!--\n-                Example Derby Network Server profile.\n-                You must manually start a Derby network server instance and\n-                also set the following properties:\n-                    -Dopenjpa.derbynet.url=jdbc:derby://<HOST>:<PORT>/<DBNAME>;\\\n-                        create=true\n-\n-                Optionally, you can override the following properties:\n-                    -Dopenjpa.derbynet.driver=org.apache.derby.jdbc.ClientXADataSource\n-                    -Dopenjpa.derbynet.username=\n-                    -Dopenjpa.derbynet.password=\n-                    -Dderby.version=10.2.2.0\n-            -->\n-            <id>test-derbynet</id>\n-            <activation>\n-                <property>\n-                    <name>test-derbynet</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derbyclient</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <openjpa.derbynet.url>jdbc:derby://localhost:1527/openjpa20;create=true;traceDirectory=target;traceFile=derby.log</openjpa.derbynet.url>\n-                <openjpa.derbynet.driver>org.apache.derby.jdbc.ClientDriver</openjpa.derbynet.driver>\n-                <!-- Note: commons-dbcp requires dummy values for uid/pwd -->\n-                <openjpa.derbynet.username>uid</openjpa.derbynet.username>\n-                <openjpa.derbynet.password>pwd</openjpa.derbynet.password>\n-                <connection.driver.name>${openjpa.derbynet.driver}</connection.driver.name>\n-                <connection.url>${openjpa.derbynet.url}</connection.url>\n-                <connection.username>${openjpa.derbynet.username}</connection.username>\n-                <connection.password>${openjpa.derbynet.password}</connection.password>\n-            </properties>\n-        </profile>\n-\n \n         <!-- ================ -->\n         <!--  Build Profiles  -->\n@@ -285,7 +224,7 @@\n                                     <maxmemory>512m</maxmemory>\n                                     <links>\n                                         <link>http://java.sun.com/j2se/1.5.0/docs/api</link>\n-                                        <link>http://java.sun.com/javaee/5/docs/api</link>\n+                                        <link>http://java.sun.com/javaee/6/docs/api</link>\n                                         <link>http://jakarta.apache.org/commons/collections/api-release</link>\n                                     </links>\n                                 </configuration>\n@@ -374,6 +313,32 @@\n             </build>\n         </profile>\n \n+        <profile>\n+            <id>sign-release</id>\n+            <activation>\n+                <property>\n+                    <name>sign-release</name>\n+                </property>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-gpg-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>sign-artifacts</id>\n+                                <phase>verify</phase>\n+                                <goals>\n+                                    <goal>sign</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+\n         <!--\n             Generate the documentation using the YDoc UML generation plugin.\n             Assumes you have the YDoc libraries locally, as well as a valid\n@@ -429,7 +394,7 @@\n                                     <maxmemory>512m</maxmemory>\n                                     <links>\n                                         <link>http://java.sun.com/j2se/1.5.0/docs/api</link>\n-                                        <link>http://java.sun.com/javaee/5/docs/api</link>\n+                                        <link>http://java.sun.com/javaee/6/docs/api</link>\n                                         <link>http://jakarta.apache.org/commons/collections/api-release</link>\n                                     </links>\n                                 </configuration>\n@@ -516,6 +481,19 @@\n             </build>\n         </profile>\n \n+        <!-- =============== -->\n+        <!--  Test Profiles  -->\n+        <!-- =============== -->\n+        <profile>\n+            <id>debug</id>\n+            <activation>\n+                <activeByDefault>false</activeByDefault>\n+            </activation>\n+            <properties>\n+                <test.jvm.arguments>-Xmx${test.jvm.maxheapsize} -XX:MaxPermSize=${test.jvm.maxpermsize} -agentlib:jdwp=transport=dt_socket,server=y,address=8000</test.jvm.arguments>\n+            </properties>\n+        </profile>\n+\n         <profile>\n             <id>enable-security</id>\n             <activation>\n@@ -546,24 +524,173 @@\n                        <configuration>\n                            <argLine>${surefire.jvm.args}</argLine>\n                            <includes>\n-                               <include></include>\n+                               <include />\n                            </includes>\n                        </configuration>\n                    </plugin>\n                 </plugins>\n             </build>\n         </profile>\n \n+        <!-- Use this profile to build/execute the junits w/ a 1.5 JDK\n+             Note: You must also specific a DB test profile, like test-derby\n+             and provide -Djava5.home=<path to 1.5 JDK, like /opt/jdk1.5.0_22>\n+        -->\n         <profile>\n-            <id>debug</id>\n+            <id>test-java5</id>\n             <activation>\n                 <activeByDefault>false</activeByDefault>\n             </activation>\n             <properties>\n-                <test.jvm.arguments>-Xmx${test.jvm.maxheapsize} -XX:MaxPermSize=${test.jvm.maxpermsize} -agentlib:jdwp=transport=dt_socket,server=y,address=8000</test.jvm.arguments>\n+                <java5.home>\"java5.home - Must be user supplied\"</java5.home>\n+            </properties>\n+            <build>\n+                <pluginManagement>\n+                    <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>1.5</source>\n+                        <target>1.5</target>\n+                        <excludes>\n+                            <exclude>none</exclude>\n+                        </excludes>\n+                        <testExcludes>\n+                            <exclude>**</exclude>\n+                        </testExcludes>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>compile-java5</id>\n+                            <configuration>\n+                                <fork>true</fork>\n+                                <executable>${java5.home}/bin/javac</executable>\n+                                <compilerVersion>1.5</compilerVersion>\n+                                <maxmem>${test.jvm.maxheapsize}</maxmem>\n+                                <excludes>\n+                                    <exclude>**</exclude>\n+                                </excludes>\n+                                <testExcludes>\n+                                    <exclude>none</exclude>\n+                                </testExcludes>\n+                            </configuration>\n+                            <goals>\n+                                <goal>testCompile</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                        </plugin>\n+                        <plugin>\n+                            <groupId>org.apache.maven.plugins</groupId>\n+                            <artifactId>maven-surefire-plugin</artifactId>\n+                            <configuration>\n+                                <jvm>${java5.home}/bin/java</jvm>\n+                            </configuration>\n+                        </plugin>\n+                    </plugins>\n+                </pluginManagement>\n+            </build>\n+        </profile>\n+\n+        <!-- Default profile for testing with an embedded Apache Derby DB -->\n+        <profile>\n+            <!--\n+                Optionally, you can override the following properties:\n+                    -Dderby.version=10.2.2.0\n+            -->\n+            <id>test-derby</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            <property>\n+                <name>test-derby</name>\n+            </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.apache.derby</groupId>\n+                    <artifactId>derby</artifactId>\n+                    <version>${derby.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n+                <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n+                <connection.username />\n+                <connection.password />\n             </properties>\n         </profile>\n \n+        <!-- Profile for testing with an In-Memory Apache Derby DB -->\n+        <profile>\n+            <!--\n+                Optionally, you can override the following properties:\n+                    -Dderby.version=10.5.3.0_1\n+            -->\n+            <id>test-derbymem</id>\n+            <activation>\n+                <property>\n+                    <name>test-derbymem</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.apache.derby</groupId>\n+                    <artifactId>derby</artifactId>\n+                    <version>${derby.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n+                <connection.url>jdbc:derby:memory:openjpa-derby-inmem-database;create=true</connection.url>\n+                <connection.username />\n+                <connection.password />\n+            </properties>\n+        </profile>\n+\n+        <!-- Profile for testing with Apache Derby DB network server -->\n+        <profile>\n+            <!--\n+                Example Derby Network Server profile.\n+                You must manually start a Derby network server instance and\n+                also set the following properties:\n+                    -Dopenjpa.derbynet.url=jdbc:derby://<HOST>:<PORT>/<DBNAME>;\\\n+                        create=true\n+\n+                Optionally, you can override the following properties:\n+                    -Dopenjpa.derbynet.driver=org.apache.derby.jdbc.ClientXADataSource\n+                    -Dopenjpa.derbynet.username=\n+                    -Dopenjpa.derbynet.password=\n+                    -Dderby.version=10.2.2.0\n+            -->\n+            <id>test-derbynet</id>\n+            <activation>\n+                <property>\n+                    <name>test-derbynet</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.apache.derby</groupId>\n+                    <artifactId>derbyclient</artifactId>\n+                    <version>${derby.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <openjpa.derbynet.url>jdbc:derby://localhost:1527/openjpa20;create=true;traceDirectory=target;traceFile=derby.log</openjpa.derbynet.url>\n+                <openjpa.derbynet.driver>org.apache.derby.jdbc.ClientDriver</openjpa.derbynet.driver>\n+                <!-- Note: commons-dbcp requires dummy values for uid/pwd -->\n+                <openjpa.derbynet.username>uid</openjpa.derbynet.username>\n+                <openjpa.derbynet.password>pwd</openjpa.derbynet.password>\n+                <connection.driver.name>${openjpa.derbynet.driver}</connection.driver.name>\n+                <connection.url>${openjpa.derbynet.url}</connection.url>\n+                <connection.username>${openjpa.derbynet.username}</connection.username>\n+                <connection.password>${openjpa.derbynet.password}</connection.password>\n+            </properties>\n+        </profile>\n     </profiles>\n \n     <!-- default versions for dependencies that child modules may include -->\n@@ -612,7 +739,7 @@\n             <dependency>\n                 <groupId>org.apache.geronimo.specs</groupId>\n                 <artifactId>geronimo-validation_1.0_spec</artifactId>\n-                <version>1.0-SNAPSHOT</version>\n+                <version>1.0</version>\n             </dependency>            \n             <dependency>\n                 <groupId>org.apache.derby</groupId>\n@@ -682,7 +809,7 @@\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-compiler-plugin</artifactId>\n-                    <version>2.0.2</version>\n+                    <version>2.1</version>\n                     <configuration>\n                         <source>1.5</source>\n                         <target>1.5</target>\n@@ -802,7 +929,7 @@\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-release-plugin</artifactId>\n-                    <version>2.0-beta-7</version>\n+                    <version>2.0-beta-9</version>\n                 </plugin>\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n@@ -870,6 +997,7 @@\n                 </plugin>\n             </plugins>\n         </pluginManagement>\n+\n         <plugins>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n@@ -925,10 +1053,10 @@\n                         <configuration>\n                             <rules>\n                                 <requireMavenVersion>\n-                                    <version>[2.0.5,)</version>\n+                                    <version>[2.0.9,)</version>\n                                 </requireMavenVersion>\n                                 <requireJavaVersion>\n-                                    <version>[1.5,)</version>\n+                                    <version>[1.6,)</version>\n                                 </requireJavaVersion>\n                             </rules>\n                         </configuration>\n@@ -949,6 +1077,8 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <!-- this has to be done in each module so we don't generate\n+                 tests.jar artifacts that fail the IANAL check\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-jar-plugin</artifactId>\n@@ -962,7 +1092,8 @@\n                     </execution>\n                 </executions>\n             </plugin>\n-\t    </plugins>\n+            -->\n+        </plugins>\n     </build>\n \n     <reporting>\n@@ -1004,25 +1135,4 @@\n         </plugins>\n     </reporting>\n \n-    <distributionManagement>\n-      <repository>\n-        <id>local-repository</id>\n-        <url>scp://people.apache.org/home/${user.name}/public_html/openjpa/${pom.version}/staging-repo</url>\n-      </repository>\n-      <snapshotRepository>\n-        <id>local-repository</id>\n-        <url>scp://people.apache.org/home/${user.name}/public_html/openjpa/${pom.version}/staging-repo</url>\n-        <uniqueVersion>false</uniqueVersion>\n-      </snapshotRepository>\n-      <site>\n-        <id>people.apache.org</id>\n-        <url>scp://people.apache.org/home/${user.name}/public_html/openjpa/${pom.version}/staging-site</url>\n-      </site>\n-    </distributionManagement>\n-\n-    <scm>\n-        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/trunk</connection>\n-        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/trunk</developerConnection>\n-        <url>http://svn.apache.org/repos/asf/openjpa/trunk</url>\n-    </scm>\n </project>"}]}

