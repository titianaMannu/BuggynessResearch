{"url":"https://api.github.com/repos/apache/openjpa/compare/2.0.0-beta2...2.0.0-beta3","html_url":"https://github.com/apache/openjpa/compare/2.0.0-beta2...2.0.0-beta3","permalink_url":"https://github.com/apache/openjpa/compare/apache:99ec183...apache:3a9579f","diff_url":"https://github.com/apache/openjpa/compare/2.0.0-beta2...2.0.0-beta3.diff","patch_url":"https://github.com/apache/openjpa/compare/2.0.0-beta2...2.0.0-beta3.patch","base_commit":{"sha":"99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5ZWMxODNlZTZjZDA1NGEyOWQ3ZGJmNWYyYjUzZDYzNTE5N2M3Zjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:46Z"},"message":"[maven-scm] copy for tag 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta2@915978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"940d40b9afe52947f3a16c39ea89411c8602ba3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/940d40b9afe52947f3a16c39ea89411c8602ba3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","html_url":"https://github.com/apache/openjpa/commit/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99ec183ee6cd054a29d7dbf5f2b53d635197c7f7/comments","author":null,"committer":null,"parents":[{"sha":"099d18901e5dd164c189f8b9538c9e80d3923569","url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569","html_url":"https://github.com/apache/openjpa/commit/099d18901e5dd164c189f8b9538c9e80d3923569"}]},"merge_base_commit":{"sha":"099d18901e5dd164c189f8b9538c9e80d3923569","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5OWQxODkwMWU1ZGQxNjRjMTg5ZjhiOTUzOGM5ZTgwZDM5MjM1Njk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:42Z"},"message":"[maven-release-plugin] prepare release 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"940d40b9afe52947f3a16c39ea89411c8602ba3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/940d40b9afe52947f3a16c39ea89411c8602ba3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/099d18901e5dd164c189f8b9538c9e80d3923569","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569","html_url":"https://github.com/apache/openjpa/commit/099d18901e5dd164c189f8b9538c9e80d3923569","comments_url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569/comments","author":null,"committer":null,"parents":[{"sha":"6d53d755f78770a2d801ca1d4cc7de849be6238f","url":"https://api.github.com/repos/apache/openjpa/commits/6d53d755f78770a2d801ca1d4cc7de849be6238f","html_url":"https://github.com/apache/openjpa/commit/6d53d755f78770a2d801ca1d4cc7de849be6238f"}]},"status":"diverged","ahead_by":196,"behind_by":1,"total_commits":196,"commits":[{"sha":"0befad70511584e667396bf1f9d34d8c7de0f436","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiZWZhZDcwNTExNTg0ZTY2NzM5NmJmMWY5ZDM0ZDhjN2RlMGY0MzY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T21:04:54Z"},"message":"[maven-release-plugin] prepare for next development iteration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915979 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3287bd238ba32dfadcc644d5a033fa2d373b074c","url":"https://api.github.com/repos/apache/openjpa/git/trees/3287bd238ba32dfadcc644d5a033fa2d373b074c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0befad70511584e667396bf1f9d34d8c7de0f436","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0befad70511584e667396bf1f9d34d8c7de0f436","html_url":"https://github.com/apache/openjpa/commit/0befad70511584e667396bf1f9d34d8c7de0f436","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0befad70511584e667396bf1f9d34d8c7de0f436/comments","author":null,"committer":null,"parents":[{"sha":"099d18901e5dd164c189f8b9538c9e80d3923569","url":"https://api.github.com/repos/apache/openjpa/commits/099d18901e5dd164c189f8b9538c9e80d3923569","html_url":"https://github.com/apache/openjpa/commit/099d18901e5dd164c189f8b9538c9e80d3923569"}]},{"sha":"c9e2d17fd561f17e996e993c46682200b4b4cda9","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5ZTJkMTdmZDU2MWYxN2U5OTZlOTkzYzQ2NjgyMjAwYjRiNGNkYTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T22:33:31Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-24T22:33:31Z"},"message":"make sure maven-checkstyle-plugin-2.2 is used for site generation, as the latest 2.5 has problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916009 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5159b2dcdc16bd4e77174337a708fc71f2a340a","url":"https://api.github.com/repos/apache/openjpa/git/trees/a5159b2dcdc16bd4e77174337a708fc71f2a340a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c9e2d17fd561f17e996e993c46682200b4b4cda9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c9e2d17fd561f17e996e993c46682200b4b4cda9","html_url":"https://github.com/apache/openjpa/commit/c9e2d17fd561f17e996e993c46682200b4b4cda9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c9e2d17fd561f17e996e993c46682200b4b4cda9/comments","author":null,"committer":null,"parents":[{"sha":"0befad70511584e667396bf1f9d34d8c7de0f436","url":"https://api.github.com/repos/apache/openjpa/commits/0befad70511584e667396bf1f9d34d8c7de0f436","html_url":"https://github.com/apache/openjpa/commit/0befad70511584e667396bf1f9d34d8c7de0f436"}]},{"sha":"be33af366ccef84a8767ceee03e99b171fc9ccff","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlMzNhZjM2NmNjZWY4NGE4NzY3Y2VlZTAzZTk5YjE3MWZjOWNjZmY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-25T00:11:33Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-25T00:11:33Z"},"message":"OPENJPA-1531: Adding support for a interval style syntax in the openjpa.DataCache.EvictionSchedule property. Added code changes, test case, and doc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916052 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bba4348c47442911eb577710a9a0b12a5812a49e","url":"https://api.github.com/repos/apache/openjpa/git/trees/bba4348c47442911eb577710a9a0b12a5812a49e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be33af366ccef84a8767ceee03e99b171fc9ccff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be33af366ccef84a8767ceee03e99b171fc9ccff","html_url":"https://github.com/apache/openjpa/commit/be33af366ccef84a8767ceee03e99b171fc9ccff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be33af366ccef84a8767ceee03e99b171fc9ccff/comments","author":null,"committer":null,"parents":[{"sha":"c9e2d17fd561f17e996e993c46682200b4b4cda9","url":"https://api.github.com/repos/apache/openjpa/commits/c9e2d17fd561f17e996e993c46682200b4b4cda9","html_url":"https://github.com/apache/openjpa/commit/c9e2d17fd561f17e996e993c46682200b4b4cda9"}]},{"sha":"ea49b4cc6abcbf3cb38468a01df4187151fa5498","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhNDliNGNjNmFiY2JmM2NiMzg0NjhhMDFkZjQxODcxNTFmYTU0OTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-25T03:33:00Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-25T03:33:00Z"},"message":"OPENJPA-1536: fix the where clause in sql generation problem when join table strategy is used in toOne eager fetch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916106 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"014272607b2649b2573567388459fab37f62db8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/014272607b2649b2573567388459fab37f62db8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea49b4cc6abcbf3cb38468a01df4187151fa5498","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea49b4cc6abcbf3cb38468a01df4187151fa5498","html_url":"https://github.com/apache/openjpa/commit/ea49b4cc6abcbf3cb38468a01df4187151fa5498","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea49b4cc6abcbf3cb38468a01df4187151fa5498/comments","author":null,"committer":null,"parents":[{"sha":"be33af366ccef84a8767ceee03e99b171fc9ccff","url":"https://api.github.com/repos/apache/openjpa/commits/be33af366ccef84a8767ceee03e99b171fc9ccff","html_url":"https://github.com/apache/openjpa/commit/be33af366ccef84a8767ceee03e99b171fc9ccff"}]},{"sha":"daae61a6f50a98dddaf649d919d2a46e55567802","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhYWU2MWE2ZjUwYTk4ZGRkYWY2NDlkOTE5ZDJhNDZlNTU1Njc4MDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T16:28:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T16:28:54Z"},"message":"OPENJPA-1535 Inconsistency in exceptions thrown from MetaDataRepository.resolve().  Patch contributed by Hiroki Tateno.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916338 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb5096eef64b27569733f2793c2a18fcf941a494","url":"https://api.github.com/repos/apache/openjpa/git/trees/cb5096eef64b27569733f2793c2a18fcf941a494"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/daae61a6f50a98dddaf649d919d2a46e55567802","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/daae61a6f50a98dddaf649d919d2a46e55567802","html_url":"https://github.com/apache/openjpa/commit/daae61a6f50a98dddaf649d919d2a46e55567802","comments_url":"https://api.github.com/repos/apache/openjpa/commits/daae61a6f50a98dddaf649d919d2a46e55567802/comments","author":null,"committer":null,"parents":[{"sha":"ea49b4cc6abcbf3cb38468a01df4187151fa5498","url":"https://api.github.com/repos/apache/openjpa/commits/ea49b4cc6abcbf3cb38468a01df4187151fa5498","html_url":"https://github.com/apache/openjpa/commit/ea49b4cc6abcbf3cb38468a01df4187151fa5498"}]},{"sha":"8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmMzIwNzFhOGJjYjk1YjY4ZTBjN2M5MzMxNGMwYzhkOWRiYjFiYzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T16:50:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T16:50:33Z"},"message":"upgrade to latest maven-release-plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916344 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"964ed88b3ddf053a3fef298c1cca816b4b3c3c16","url":"https://api.github.com/repos/apache/openjpa/git/trees/964ed88b3ddf053a3fef298c1cca816b4b3c3c16"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2","html_url":"https://github.com/apache/openjpa/commit/8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2/comments","author":null,"committer":null,"parents":[{"sha":"daae61a6f50a98dddaf649d919d2a46e55567802","url":"https://api.github.com/repos/apache/openjpa/commits/daae61a6f50a98dddaf649d919d2a46e55567802","html_url":"https://github.com/apache/openjpa/commit/daae61a6f50a98dddaf649d919d2a46e55567802"}]},{"sha":"7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiMWVlMGNiY2MzMjliNGNkMmQ5MmEzYWI5NDJhMTNiN2RlMzVkMDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T18:10:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T18:10:37Z"},"message":"update several maven plugins to the latest released levels\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916384 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46721319f3a8bcce45c7ebcd86ddc2a8ec001c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/46721319f3a8bcce45c7ebcd86ddc2a8ec001c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00","html_url":"https://github.com/apache/openjpa/commit/7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00/comments","author":null,"committer":null,"parents":[{"sha":"8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2","url":"https://api.github.com/repos/apache/openjpa/commits/8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2","html_url":"https://github.com/apache/openjpa/commit/8f32071a8bcb95b68e0c7c93314c0c8d9dbb1bc2"}]},{"sha":"767f670490e9d73ab8b6ca0c21a3b9d9f4d398af","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc2N2Y2NzA0OTBlOWQ3M2FiOGI2Y2EwYzIxYTNiOWQ5ZjRkMzk4YWY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-25T18:32:35Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-25T18:32:35Z"},"message":"OPENJPA-1539: Allow DataCacheManagerImpl.isCachable(ClassMetaData meta) to cache the cacheability for each given type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916388 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6389043e1c5a17060e4858bae885b28a404857e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/6389043e1c5a17060e4858bae885b28a404857e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/767f670490e9d73ab8b6ca0c21a3b9d9f4d398af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/767f670490e9d73ab8b6ca0c21a3b9d9f4d398af","html_url":"https://github.com/apache/openjpa/commit/767f670490e9d73ab8b6ca0c21a3b9d9f4d398af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/767f670490e9d73ab8b6ca0c21a3b9d9f4d398af/comments","author":null,"committer":null,"parents":[{"sha":"7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00","url":"https://api.github.com/repos/apache/openjpa/commits/7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00","html_url":"https://github.com/apache/openjpa/commit/7b1ee0cbcc329b4cd2d92a3ab942a13b7de35d00"}]},{"sha":"9a4fe698c2a83698c301e0fe7635898c8b41a7a0","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhNGZlNjk4YzJhODM2OThjMzAxZTBmZTc2MzU4OThjOGI0MWE3YTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T21:47:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T21:47:10Z"},"message":"show OPENJPA-1350 as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6aa2634e67de3ac2e746d1f0192527f224e5f640","url":"https://api.github.com/repos/apache/openjpa/git/trees/6aa2634e67de3ac2e746d1f0192527f224e5f640"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a4fe698c2a83698c301e0fe7635898c8b41a7a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a4fe698c2a83698c301e0fe7635898c8b41a7a0","html_url":"https://github.com/apache/openjpa/commit/9a4fe698c2a83698c301e0fe7635898c8b41a7a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a4fe698c2a83698c301e0fe7635898c8b41a7a0/comments","author":null,"committer":null,"parents":[{"sha":"767f670490e9d73ab8b6ca0c21a3b9d9f4d398af","url":"https://api.github.com/repos/apache/openjpa/commits/767f670490e9d73ab8b6ca0c21a3b9d9f4d398af","html_url":"https://github.com/apache/openjpa/commit/767f670490e9d73ab8b6ca0c21a3b9d9f4d398af"}]},{"sha":"06d3e4e65d355589e258f00e3dd995606f1863b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2ZDNlNGU2NWQzNTU1ODllMjU4ZjAwZTNkZDk5NTYwNmYxODYzYjA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T22:08:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-25T22:08:44Z"},"message":"OPENJPA-855 Adding additional JPQL Index tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"220155ebb9a27a7bea96c74c93b07dcc7847b909","url":"https://api.github.com/repos/apache/openjpa/git/trees/220155ebb9a27a7bea96c74c93b07dcc7847b909"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/06d3e4e65d355589e258f00e3dd995606f1863b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/06d3e4e65d355589e258f00e3dd995606f1863b0","html_url":"https://github.com/apache/openjpa/commit/06d3e4e65d355589e258f00e3dd995606f1863b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/06d3e4e65d355589e258f00e3dd995606f1863b0/comments","author":null,"committer":null,"parents":[{"sha":"9a4fe698c2a83698c301e0fe7635898c8b41a7a0","url":"https://api.github.com/repos/apache/openjpa/commits/9a4fe698c2a83698c301e0fe7635898c8b41a7a0","html_url":"https://github.com/apache/openjpa/commit/9a4fe698c2a83698c301e0fe7635898c8b41a7a0"}]},{"sha":"eca02573ba17e8e09bd0cf7120b87becd6f2646f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjYTAyNTczYmExN2U4ZTA5YmQwY2Y3MTIwYjg3YmVjZDZmMjY0NmY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-26T15:23:26Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-26T15:23:26Z"},"message":"OPENJPA-1542: Adding support for openjpa.DataCache Types and ExcludedTypes configuration back into trunk. Also updating TestCacheExclusions. No doc changes required as the user manual is up to date.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"540ac61b510b35d5a7df09b6e63bf6529fd68e22","url":"https://api.github.com/repos/apache/openjpa/git/trees/540ac61b510b35d5a7df09b6e63bf6529fd68e22"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f","html_url":"https://github.com/apache/openjpa/commit/eca02573ba17e8e09bd0cf7120b87becd6f2646f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f/comments","author":null,"committer":null,"parents":[{"sha":"06d3e4e65d355589e258f00e3dd995606f1863b0","url":"https://api.github.com/repos/apache/openjpa/commits/06d3e4e65d355589e258f00e3dd995606f1863b0","html_url":"https://github.com/apache/openjpa/commit/06d3e4e65d355589e258f00e3dd995606f1863b0"}]},{"sha":"32fe994aeafe6fb785db3703d5305ddaedf22247","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyZmU5OTRhZWFmZTZmYjc4NWRiMzcwM2Q1MzA1ZGRhZWRmMjIyNDc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T16:38:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T16:38:33Z"},"message":"upgrade to latest released agimatec-validation artifacts\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916746 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a3f80d605574970caf893e90f96a19ae67d6362","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a3f80d605574970caf893e90f96a19ae67d6362"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/32fe994aeafe6fb785db3703d5305ddaedf22247","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/32fe994aeafe6fb785db3703d5305ddaedf22247","html_url":"https://github.com/apache/openjpa/commit/32fe994aeafe6fb785db3703d5305ddaedf22247","comments_url":"https://api.github.com/repos/apache/openjpa/commits/32fe994aeafe6fb785db3703d5305ddaedf22247/comments","author":null,"committer":null,"parents":[{"sha":"eca02573ba17e8e09bd0cf7120b87becd6f2646f","url":"https://api.github.com/repos/apache/openjpa/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f","html_url":"https://github.com/apache/openjpa/commit/eca02573ba17e8e09bd0cf7120b87becd6f2646f"}]},{"sha":"4cb276067a472a4ff08636c208fff523bd38dced","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjYjI3NjA2N2E0NzJhNGZmMDg2MzZjMjA4ZmZmNTIzYmQzOGRjZWQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T17:03:25Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T17:03:25Z"},"message":"OPENJPA-1538 Move hard coded text in OpenJPAVersion.java to localizer.properties.  Patch contributed by Cathy Nordstrom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916757 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dbaa06a60ef1d959c90d6e076ab2278fb4faf728","url":"https://api.github.com/repos/apache/openjpa/git/trees/dbaa06a60ef1d959c90d6e076ab2278fb4faf728"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4cb276067a472a4ff08636c208fff523bd38dced","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4cb276067a472a4ff08636c208fff523bd38dced","html_url":"https://github.com/apache/openjpa/commit/4cb276067a472a4ff08636c208fff523bd38dced","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4cb276067a472a4ff08636c208fff523bd38dced/comments","author":null,"committer":null,"parents":[{"sha":"32fe994aeafe6fb785db3703d5305ddaedf22247","url":"https://api.github.com/repos/apache/openjpa/commits/32fe994aeafe6fb785db3703d5305ddaedf22247","html_url":"https://github.com/apache/openjpa/commit/32fe994aeafe6fb785db3703d5305ddaedf22247"}]},{"sha":"d96883f5029fdca609a5871e1641433a01ec72e3","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5Njg4M2Y1MDI5ZmRjYTYwOWE1ODcxZTE2NDE0MzNhMDFlYzcyZTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T17:04:35Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T17:04:35Z"},"message":"OPENJPA-1538 Minor grammar fixes in messages.  Patch contributed by Cathy Nordstrom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916759 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f3e4eae49c92506abcf48bb14e18defe0a5e6a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f3e4eae49c92506abcf48bb14e18defe0a5e6a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d96883f5029fdca609a5871e1641433a01ec72e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d96883f5029fdca609a5871e1641433a01ec72e3","html_url":"https://github.com/apache/openjpa/commit/d96883f5029fdca609a5871e1641433a01ec72e3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d96883f5029fdca609a5871e1641433a01ec72e3/comments","author":null,"committer":null,"parents":[{"sha":"4cb276067a472a4ff08636c208fff523bd38dced","url":"https://api.github.com/repos/apache/openjpa/commits/4cb276067a472a4ff08636c208fff523bd38dced","html_url":"https://github.com/apache/openjpa/commit/4cb276067a472a4ff08636c208fff523bd38dced"}]},{"sha":"ad4168b8d44ab037d3c29fe5598c895a73b693d2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkNDE2OGI4ZDQ0YWIwMzdkM2MyOWZlNTU5OGM4OTVhNzNiNjkzZDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T23:16:13Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T23:16:13Z"},"message":"OPENJPA-855 Add additional O2M and Element collection tests for annotated and XML mapped entities\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916855 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cca0dfdf581f58c0813b2cf179eab858c24b3d79","url":"https://api.github.com/repos/apache/openjpa/git/trees/cca0dfdf581f58c0813b2cf179eab858c24b3d79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2","html_url":"https://github.com/apache/openjpa/commit/ad4168b8d44ab037d3c29fe5598c895a73b693d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2/comments","author":null,"committer":null,"parents":[{"sha":"d96883f5029fdca609a5871e1641433a01ec72e3","url":"https://api.github.com/repos/apache/openjpa/commits/d96883f5029fdca609a5871e1641433a01ec72e3","html_url":"https://github.com/apache/openjpa/commit/d96883f5029fdca609a5871e1641433a01ec72e3"}]},{"sha":"4d25d3fa214849ebce96db0fdaf8646070d7e505","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMjVkM2ZhMjE0ODQ5ZWJjZTk2ZGIwZmRhZjg2NDYwNzBkN2U1MDU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T16:08:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T16:08:10Z"},"message":"OPENJPA-855 proper XML entity cleanup between test runs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f8b965c26ecd1bb4971cd5091f42d98612bbf64","url":"https://api.github.com/repos/apache/openjpa/git/trees/0f8b965c26ecd1bb4971cd5091f42d98612bbf64"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d25d3fa214849ebce96db0fdaf8646070d7e505","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d25d3fa214849ebce96db0fdaf8646070d7e505","html_url":"https://github.com/apache/openjpa/commit/4d25d3fa214849ebce96db0fdaf8646070d7e505","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d25d3fa214849ebce96db0fdaf8646070d7e505/comments","author":null,"committer":null,"parents":[{"sha":"ad4168b8d44ab037d3c29fe5598c895a73b693d2","url":"https://api.github.com/repos/apache/openjpa/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2","html_url":"https://github.com/apache/openjpa/commit/ad4168b8d44ab037d3c29fe5598c895a73b693d2"}]},{"sha":"42769bd9d801d129fbeda514ea32efbcafbcdab7","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyNzY5YmQ5ZDgwMWQxMjlmYmVkYTUxNGVhMzJlZmJjYWZiY2RhYjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T16:24:31Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T16:24:31Z"},"message":"OPENJPA-1544 Remove WebSphere version number from org/apache/ee/localizer.properties.  Patch contributed by Cathy Nordstrom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917572 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41160b9257573260f7073e060a2177eedbfb4c79","url":"https://api.github.com/repos/apache/openjpa/git/trees/41160b9257573260f7073e060a2177eedbfb4c79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/42769bd9d801d129fbeda514ea32efbcafbcdab7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/42769bd9d801d129fbeda514ea32efbcafbcdab7","html_url":"https://github.com/apache/openjpa/commit/42769bd9d801d129fbeda514ea32efbcafbcdab7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/42769bd9d801d129fbeda514ea32efbcafbcdab7/comments","author":null,"committer":null,"parents":[{"sha":"4d25d3fa214849ebce96db0fdaf8646070d7e505","url":"https://api.github.com/repos/apache/openjpa/commits/4d25d3fa214849ebce96db0fdaf8646070d7e505","html_url":"https://github.com/apache/openjpa/commit/4d25d3fa214849ebce96db0fdaf8646070d7e505"}]},{"sha":"c1a32728724dec004e04aad8d7896e87508e1bf0","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxYTMyNzI4NzI0ZGVjMDA0ZTA0YWFkOGQ3ODk2ZTg3NTA4ZTFiZjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-01T19:12:21Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-01T19:12:21Z"},"message":"OPENJPA-1543: Remove fragmented messages. Change to TRACE level logging.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917656 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ceae8ca2173750cc1d2e0e9af9d78e78a51f0f0e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ceae8ca2173750cc1d2e0e9af9d78e78a51f0f0e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1a32728724dec004e04aad8d7896e87508e1bf0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1a32728724dec004e04aad8d7896e87508e1bf0","html_url":"https://github.com/apache/openjpa/commit/c1a32728724dec004e04aad8d7896e87508e1bf0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1a32728724dec004e04aad8d7896e87508e1bf0/comments","author":null,"committer":null,"parents":[{"sha":"42769bd9d801d129fbeda514ea32efbcafbcdab7","url":"https://api.github.com/repos/apache/openjpa/commits/42769bd9d801d129fbeda514ea32efbcafbcdab7","html_url":"https://github.com/apache/openjpa/commit/42769bd9d801d129fbeda514ea32efbcafbcdab7"}]},{"sha":"11149ec5fba76796f2d3d9a2a8d26d7782d74a99","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMTQ5ZWM1ZmJhNzY3OTZmMmQzZDlhMmE4ZDI2ZDc3ODJkNzRhOTk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-01T19:16:22Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-01T19:16:22Z"},"message":"OPENJPA-1543: Remove fragmented messages. Change to TRACE level logging.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae8ce733855c5aca7c0f0128a4b4e6a147524d11","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae8ce733855c5aca7c0f0128a4b4e6a147524d11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","html_url":"https://github.com/apache/openjpa/commit/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99/comments","author":null,"committer":null,"parents":[{"sha":"c1a32728724dec004e04aad8d7896e87508e1bf0","url":"https://api.github.com/repos/apache/openjpa/commits/c1a32728724dec004e04aad8d7896e87508e1bf0","html_url":"https://github.com/apache/openjpa/commit/c1a32728724dec004e04aad8d7896e87508e1bf0"}]},{"sha":"18a1a04c773dd5c3e2288173f64f58f822cefb50","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4YTFhMDRjNzczZGQ1YzNlMjI4ODE3M2Y2NGY1OGY4MjJjZWZiNTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T21:03:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T21:03:26Z"},"message":"OPENJPA-855 Initial JPQLIndex M2M tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917716 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a99d1018487897b3dad3ae8c27c7391398baa9ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/a99d1018487897b3dad3ae8c27c7391398baa9ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50","html_url":"https://github.com/apache/openjpa/commit/18a1a04c773dd5c3e2288173f64f58f822cefb50","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50/comments","author":null,"committer":null,"parents":[{"sha":"11149ec5fba76796f2d3d9a2a8d26d7782d74a99","url":"https://api.github.com/repos/apache/openjpa/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","html_url":"https://github.com/apache/openjpa/commit/11149ec5fba76796f2d3d9a2a8d26d7782d74a99"}]},{"sha":"208f5388ce42e99b77e0cec560ac141680a56ee3","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwOGY1Mzg4Y2U0MmU5OWI3N2UwY2VjNTYwYWMxNDE2ODBhNTZlZTM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-01T21:29:01Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-01T21:29:01Z"},"message":"OPENJPA-1540 Modified Informix dictionary to detect non-delimited identifier case for the Informix driver.  Also added missing method override.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917727 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9fa3a034634f87a95da46abac3f5fe27d23e6e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9fa3a034634f87a95da46abac3f5fe27d23e6e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/208f5388ce42e99b77e0cec560ac141680a56ee3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/208f5388ce42e99b77e0cec560ac141680a56ee3","html_url":"https://github.com/apache/openjpa/commit/208f5388ce42e99b77e0cec560ac141680a56ee3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/208f5388ce42e99b77e0cec560ac141680a56ee3/comments","author":null,"committer":null,"parents":[{"sha":"18a1a04c773dd5c3e2288173f64f58f822cefb50","url":"https://api.github.com/repos/apache/openjpa/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50","html_url":"https://github.com/apache/openjpa/commit/18a1a04c773dd5c3e2288173f64f58f822cefb50"}]},{"sha":"2abde241c030c87fc187adc7dabe2728257d479e","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhYmRlMjQxYzAzMGM4N2ZjMTg3YWRjN2RhYmUyNzI4MjU3ZDQ3OWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T22:15:18Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T22:15:18Z"},"message":"OPENJPA-855 Final JPQL Index M2M test updates\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917754 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4437981500f97d952b541fb695b9aa24efa3e110","url":"https://api.github.com/repos/apache/openjpa/git/trees/4437981500f97d952b541fb695b9aa24efa3e110"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2abde241c030c87fc187adc7dabe2728257d479e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2abde241c030c87fc187adc7dabe2728257d479e","html_url":"https://github.com/apache/openjpa/commit/2abde241c030c87fc187adc7dabe2728257d479e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2abde241c030c87fc187adc7dabe2728257d479e/comments","author":null,"committer":null,"parents":[{"sha":"208f5388ce42e99b77e0cec560ac141680a56ee3","url":"https://api.github.com/repos/apache/openjpa/commits/208f5388ce42e99b77e0cec560ac141680a56ee3","html_url":"https://github.com/apache/openjpa/commit/208f5388ce42e99b77e0cec560ac141680a56ee3"}]},{"sha":"06e6582ab859de863a192f05665d59dfb6256448","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2ZTY1ODJhYjg1OWRlODYzYTE5MmYwNTY2NWQ1OWRmYjYyNTY0NDg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-01T23:46:33Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-01T23:46:33Z"},"message":"OPENJPA-1500: Remove WriteBehind variable declarations in OpenJPAConfigImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917803 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57e5214c275aae552376852f71c23ab799f4a2a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/57e5214c275aae552376852f71c23ab799f4a2a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/06e6582ab859de863a192f05665d59dfb6256448","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/06e6582ab859de863a192f05665d59dfb6256448","html_url":"https://github.com/apache/openjpa/commit/06e6582ab859de863a192f05665d59dfb6256448","comments_url":"https://api.github.com/repos/apache/openjpa/commits/06e6582ab859de863a192f05665d59dfb6256448/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2abde241c030c87fc187adc7dabe2728257d479e","url":"https://api.github.com/repos/apache/openjpa/commits/2abde241c030c87fc187adc7dabe2728257d479e","html_url":"https://github.com/apache/openjpa/commit/2abde241c030c87fc187adc7dabe2728257d479e"}]},{"sha":"3aea82e40c85ff6d653095a797b00a189681d64f","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhZWE4MmU0MGM4NWZmNmQ2NTMwOTVhNzk3YjAwYTE4OTY4MWQ2NGY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-02T15:17:18Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-02T15:17:18Z"},"message":"OPENJPA-1546 OpenJPA doesn't work as internal JPA inside web applicaion in JBoss AS due to PersistenceMetaDataFactory trying to parse directories as unparsed XML files.  Original patch contributed by Dmitri Babaev.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918070 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1016a304f6ee94206c375720caff08bddb4e0711","url":"https://api.github.com/repos/apache/openjpa/git/trees/1016a304f6ee94206c375720caff08bddb4e0711"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3aea82e40c85ff6d653095a797b00a189681d64f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3aea82e40c85ff6d653095a797b00a189681d64f","html_url":"https://github.com/apache/openjpa/commit/3aea82e40c85ff6d653095a797b00a189681d64f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3aea82e40c85ff6d653095a797b00a189681d64f/comments","author":null,"committer":null,"parents":[{"sha":"06e6582ab859de863a192f05665d59dfb6256448","url":"https://api.github.com/repos/apache/openjpa/commits/06e6582ab859de863a192f05665d59dfb6256448","html_url":"https://github.com/apache/openjpa/commit/06e6582ab859de863a192f05665d59dfb6256448"}]},{"sha":"a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1MTVhNzFmZWM0ZDliMDgzMDYxZDNjZDBjMGUwZjkwNjdmMmUxN2E=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T20:04:42Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T20:04:42Z"},"message":"OPENJPA-1548: Refactored ClassMetaData and cached hashCode() to improve performance.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918167 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21333cc6622cdb3a36aaa1f70fcb4e779040c405","url":"https://api.github.com/repos/apache/openjpa/git/trees/21333cc6622cdb3a36aaa1f70fcb4e779040c405"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","html_url":"https://github.com/apache/openjpa/commit/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a/comments","author":null,"committer":null,"parents":[{"sha":"3aea82e40c85ff6d653095a797b00a189681d64f","url":"https://api.github.com/repos/apache/openjpa/commits/3aea82e40c85ff6d653095a797b00a189681d64f","html_url":"https://github.com/apache/openjpa/commit/3aea82e40c85ff6d653095a797b00a189681d64f"}]},{"sha":"8248d81a683ff3a23cccfee3394e5784bdf14760","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyNDhkODFhNjgzZmYzYTIzY2NjZmVlMzM5NGU1Nzg0YmRmMTQ3NjA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-02T21:24:01Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-02T21:24:01Z"},"message":"OPENJPA-1547: fix subquery syntax error for NOT IN (subquery with MEMBER OF)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918188 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4ea029d539549c6ea73df4f68870107aaae5327","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4ea029d539549c6ea73df4f68870107aaae5327"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8248d81a683ff3a23cccfee3394e5784bdf14760","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8248d81a683ff3a23cccfee3394e5784bdf14760","html_url":"https://github.com/apache/openjpa/commit/8248d81a683ff3a23cccfee3394e5784bdf14760","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8248d81a683ff3a23cccfee3394e5784bdf14760/comments","author":null,"committer":null,"parents":[{"sha":"a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","url":"https://api.github.com/repos/apache/openjpa/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","html_url":"https://github.com/apache/openjpa/commit/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a"}]},{"sha":"64be0455c3a675b20662303b832d6e6efa25fb97","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0YmUwNDU1YzNhNjc1YjIwNjYyMzAzYjgzMmQ2ZTZlZmEyNWZiOTc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T23:09:13Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T23:09:13Z"},"message":"OPENJPA-1549: Optimize StateManagerImpl.proxyFields(..).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918245 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab24580eb5ce27003061b4f3ff712162342449bd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab24580eb5ce27003061b4f3ff712162342449bd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/64be0455c3a675b20662303b832d6e6efa25fb97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/64be0455c3a675b20662303b832d6e6efa25fb97","html_url":"https://github.com/apache/openjpa/commit/64be0455c3a675b20662303b832d6e6efa25fb97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/64be0455c3a675b20662303b832d6e6efa25fb97/comments","author":null,"committer":null,"parents":[{"sha":"8248d81a683ff3a23cccfee3394e5784bdf14760","url":"https://api.github.com/repos/apache/openjpa/commits/8248d81a683ff3a23cccfee3394e5784bdf14760","html_url":"https://github.com/apache/openjpa/commit/8248d81a683ff3a23cccfee3394e5784bdf14760"}]},{"sha":"6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkNjFjNTYyZjViNzUyZjViMWRhZDJmOGQ3M2QyMWY5MDlhZTljOGQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-03T01:33:05Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-03T01:33:05Z"},"message":"add OPENJPA-1506 as fixed in beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918298 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"606e8eaa97c4912c42999e6e6123572da7519cd3","url":"https://api.github.com/repos/apache/openjpa/git/trees/606e8eaa97c4912c42999e6e6123572da7519cd3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d","html_url":"https://github.com/apache/openjpa/commit/6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d/comments","author":null,"committer":null,"parents":[{"sha":"64be0455c3a675b20662303b832d6e6efa25fb97","url":"https://api.github.com/repos/apache/openjpa/commits/64be0455c3a675b20662303b832d6e6efa25fb97","html_url":"https://github.com/apache/openjpa/commit/64be0455c3a675b20662303b832d6e6efa25fb97"}]},{"sha":"e9f305f700478876aa71dcda3f9163a74c981c02","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5ZjMwNWY3MDA0Nzg4NzZhYTcxZGNkYTNmOTE2M2E3NGM5ODFjMDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-03T18:09:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-03T18:09:44Z"},"message":"OPENJPA-1155 add as resolved in M3 section of changes/release notes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918606 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"003203e6970449592a6b78d0dcd955701be4ac6a","url":"https://api.github.com/repos/apache/openjpa/git/trees/003203e6970449592a6b78d0dcd955701be4ac6a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e9f305f700478876aa71dcda3f9163a74c981c02","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e9f305f700478876aa71dcda3f9163a74c981c02","html_url":"https://github.com/apache/openjpa/commit/e9f305f700478876aa71dcda3f9163a74c981c02","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e9f305f700478876aa71dcda3f9163a74c981c02/comments","author":null,"committer":null,"parents":[{"sha":"6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d","url":"https://api.github.com/repos/apache/openjpa/commits/6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d","html_url":"https://github.com/apache/openjpa/commit/6d61c562f5b752f5b1dad2f8d73d21f909ae9c8d"}]},{"sha":"76d184c106b6e4e191549412f0d7513b82b950da","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc2ZDE4NGMxMDZiNmU0ZTE5MTU0OTQxMmYwZDc1MTNiODJiOTUwZGE=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-03T19:20:57Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-03T19:20:57Z"},"message":"OPENJPA-1545: Adding new faster way to auto detach the entire persistence context. Committing code changes, test, and doc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918643 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd49f4faebd041021b1512c8e65232e905c81320","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd49f4faebd041021b1512c8e65232e905c81320"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/76d184c106b6e4e191549412f0d7513b82b950da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/76d184c106b6e4e191549412f0d7513b82b950da","html_url":"https://github.com/apache/openjpa/commit/76d184c106b6e4e191549412f0d7513b82b950da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/76d184c106b6e4e191549412f0d7513b82b950da/comments","author":null,"committer":null,"parents":[{"sha":"e9f305f700478876aa71dcda3f9163a74c981c02","url":"https://api.github.com/repos/apache/openjpa/commits/e9f305f700478876aa71dcda3f9163a74c981c02","html_url":"https://github.com/apache/openjpa/commit/e9f305f700478876aa71dcda3f9163a74c981c02"}]},{"sha":"e71cd295fcb912db12fa9d51e3a451fc2ffa2859","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3MWNkMjk1ZmNiOTEyZGIxMmZhOWQ1MWUzYTQ1MWZjMmZmYTI4NTk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-03T22:50:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-03T22:50:55Z"},"message":"OPENJPA-1503: Throw persistence exception not illegalargument exception as per spec when fails to unwrap()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918748 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae1ef697911a8260ccbe886329433841d6a4c8e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae1ef697911a8260ccbe886329433841d6a4c8e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e71cd295fcb912db12fa9d51e3a451fc2ffa2859","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e71cd295fcb912db12fa9d51e3a451fc2ffa2859","html_url":"https://github.com/apache/openjpa/commit/e71cd295fcb912db12fa9d51e3a451fc2ffa2859","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e71cd295fcb912db12fa9d51e3a451fc2ffa2859/comments","author":null,"committer":null,"parents":[{"sha":"76d184c106b6e4e191549412f0d7513b82b950da","url":"https://api.github.com/repos/apache/openjpa/commits/76d184c106b6e4e191549412f0d7513b82b950da","html_url":"https://github.com/apache/openjpa/commit/76d184c106b6e4e191549412f0d7513b82b950da"}]},{"sha":"0bd96d988008081c0ee99df148cfd0f29a9668d1","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiZDk2ZDk4ODAwODA4MWMwZWU5OWRmMTQ4Y2ZkMGYyOWE5NjY4ZDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-04T01:15:25Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-04T01:15:25Z"},"message":"OPENJPA-1142 update changes/release notes as this being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe4f5aadf16df8bf5d6cc85454f135837fb36b83","url":"https://api.github.com/repos/apache/openjpa/git/trees/fe4f5aadf16df8bf5d6cc85454f135837fb36b83"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0bd96d988008081c0ee99df148cfd0f29a9668d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0bd96d988008081c0ee99df148cfd0f29a9668d1","html_url":"https://github.com/apache/openjpa/commit/0bd96d988008081c0ee99df148cfd0f29a9668d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0bd96d988008081c0ee99df148cfd0f29a9668d1/comments","author":null,"committer":null,"parents":[{"sha":"e71cd295fcb912db12fa9d51e3a451fc2ffa2859","url":"https://api.github.com/repos/apache/openjpa/commits/e71cd295fcb912db12fa9d51e3a451fc2ffa2859","html_url":"https://github.com/apache/openjpa/commit/e71cd295fcb912db12fa9d51e3a451fc2ffa2859"}]},{"sha":"73d4992a2f9898a84a252d258e0ef176b939964b","node_id":"MDY6Q29tbWl0MjA2MzY0OjczZDQ5OTJhMmY5ODk4YTg0YTI1MmQyNThlMGVmMTc2YjkzOTk2NGI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T16:32:37Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T16:32:37Z"},"message":"OPENJPA-1545: Refactored detach code out of BrokerImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919475 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b1b3fcb56eb7de37dbc9091188eff2d41a2d710","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b1b3fcb56eb7de37dbc9091188eff2d41a2d710"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/73d4992a2f9898a84a252d258e0ef176b939964b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/73d4992a2f9898a84a252d258e0ef176b939964b","html_url":"https://github.com/apache/openjpa/commit/73d4992a2f9898a84a252d258e0ef176b939964b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/73d4992a2f9898a84a252d258e0ef176b939964b/comments","author":null,"committer":null,"parents":[{"sha":"0bd96d988008081c0ee99df148cfd0f29a9668d1","url":"https://api.github.com/repos/apache/openjpa/commits/0bd96d988008081c0ee99df148cfd0f29a9668d1","html_url":"https://github.com/apache/openjpa/commit/0bd96d988008081c0ee99df148cfd0f29a9668d1"}]},{"sha":"a1ad33d72a0e8f68e514ae2af34258703e9313f8","node_id":"MDY6Q29tbWl0MjA2MzY0OmExYWQzM2Q3MmEwZThmNjhlNTE0YWUyYWYzNDI1ODcwM2U5MzEzZjg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T16:54:43Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T16:54:43Z"},"message":"OPENJPA-1545: Make new instance var transient in BrokerImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919491 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ad1c6a09a23e94a82a2e774c1e506907349e784","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ad1c6a09a23e94a82a2e774c1e506907349e784"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a1ad33d72a0e8f68e514ae2af34258703e9313f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a1ad33d72a0e8f68e514ae2af34258703e9313f8","html_url":"https://github.com/apache/openjpa/commit/a1ad33d72a0e8f68e514ae2af34258703e9313f8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a1ad33d72a0e8f68e514ae2af34258703e9313f8/comments","author":null,"committer":null,"parents":[{"sha":"73d4992a2f9898a84a252d258e0ef176b939964b","url":"https://api.github.com/repos/apache/openjpa/commits/73d4992a2f9898a84a252d258e0ef176b939964b","html_url":"https://github.com/apache/openjpa/commit/73d4992a2f9898a84a252d258e0ef176b939964b"}]},{"sha":"1950c467f79c218b83fd62af903def3b7983a0a8","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5NTBjNDY3Zjc5YzIxOGI4M2ZkNjJhZjkwM2RlZjNiNzk4M2EwYTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-05T17:06:02Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-05T17:06:02Z"},"message":"toString() returns a JPQL-like query string, if possible. Otherwise Object.toString()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919501 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4f20583d0286f99d9ef2d6efb4da8527abe50eb","url":"https://api.github.com/repos/apache/openjpa/git/trees/a4f20583d0286f99d9ef2d6efb4da8527abe50eb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1950c467f79c218b83fd62af903def3b7983a0a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1950c467f79c218b83fd62af903def3b7983a0a8","html_url":"https://github.com/apache/openjpa/commit/1950c467f79c218b83fd62af903def3b7983a0a8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1950c467f79c218b83fd62af903def3b7983a0a8/comments","author":null,"committer":null,"parents":[{"sha":"a1ad33d72a0e8f68e514ae2af34258703e9313f8","url":"https://api.github.com/repos/apache/openjpa/commits/a1ad33d72a0e8f68e514ae2af34258703e9313f8","html_url":"https://github.com/apache/openjpa/commit/a1ad33d72a0e8f68e514ae2af34258703e9313f8"}]},{"sha":"a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3ZDYxM2YzYmZjYmM4YWM4MWVjZWJiYjJlYjRlZjgyNmZiNTAwNDU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-05T17:06:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-05T17:06:29Z"},"message":"Categorize one-to-one correctly\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919502 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1412d54a85aae4bb0006522bdb630da6db94ab7a","url":"https://api.github.com/repos/apache/openjpa/git/trees/1412d54a85aae4bb0006522bdb630da6db94ab7a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","html_url":"https://github.com/apache/openjpa/commit/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045/comments","author":null,"committer":null,"parents":[{"sha":"1950c467f79c218b83fd62af903def3b7983a0a8","url":"https://api.github.com/repos/apache/openjpa/commits/1950c467f79c218b83fd62af903def3b7983a0a8","html_url":"https://github.com/apache/openjpa/commit/1950c467f79c218b83fd62af903def3b7983a0a8"}]},{"sha":"4dc0267629dc422f7cd7b955b139073a6166a5d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkYzAyNjc2MjlkYzQyMmY3Y2Q3Yjk1NWIxMzkwNzNhNjE2NmE1ZDc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-05T19:35:53Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-05T19:35:53Z"},"message":"OPENJPA-1551: \nStoring connectionFactoryName in BrokerImpl - this factory will be used at JDBCStore creation time to override the value from the configuration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6df79339aef41c712d04ff6a2b9e8f2f66409852","url":"https://api.github.com/repos/apache/openjpa/git/trees/6df79339aef41c712d04ff6a2b9e8f2f66409852"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7","html_url":"https://github.com/apache/openjpa/commit/4dc0267629dc422f7cd7b955b139073a6166a5d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","url":"https://api.github.com/repos/apache/openjpa/commits/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","html_url":"https://github.com/apache/openjpa/commit/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045"}]},{"sha":"b074cd80c86dbebfaad5795a1ee81569a3c23b24","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwNzRjZDgwYzg2ZGJlYmZhYWQ1Nzk1YTFlZTgxNTY5YTNjMjNiMjQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-05T20:25:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-05T20:25:16Z"},"message":"OPENJPA-1551:\nAdd apache headers to new files\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919589 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3dcfd747450f6ea9755f709c8c12395df4e8ea71","url":"https://api.github.com/repos/apache/openjpa/git/trees/3dcfd747450f6ea9755f709c8c12395df4e8ea71"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b074cd80c86dbebfaad5795a1ee81569a3c23b24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b074cd80c86dbebfaad5795a1ee81569a3c23b24","html_url":"https://github.com/apache/openjpa/commit/b074cd80c86dbebfaad5795a1ee81569a3c23b24","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b074cd80c86dbebfaad5795a1ee81569a3c23b24/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4dc0267629dc422f7cd7b955b139073a6166a5d7","url":"https://api.github.com/repos/apache/openjpa/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7","html_url":"https://github.com/apache/openjpa/commit/4dc0267629dc422f7cd7b955b139073a6166a5d7"}]},{"sha":"b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwZWVmZTZlYTgwNmRkOWNhNTY4MWZmMzc4MzY3N2VkZjliMWIzN2M=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T22:38:59Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T22:38:59Z"},"message":"OPENJPA-1545: Refectored code. Fixed bug where unloaded fields were being loaded due to detach.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed24e309bcfba5a541d8e2c290eba77d19c60dc4","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed24e309bcfba5a541d8e2c290eba77d19c60dc4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","html_url":"https://github.com/apache/openjpa/commit/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/comments","author":null,"committer":null,"parents":[{"sha":"b074cd80c86dbebfaad5795a1ee81569a3c23b24","url":"https://api.github.com/repos/apache/openjpa/commits/b074cd80c86dbebfaad5795a1ee81569a3c23b24","html_url":"https://github.com/apache/openjpa/commit/b074cd80c86dbebfaad5795a1ee81569a3c23b24"}]},{"sha":"bb538f49f9478e4aef3029fda91940c5f849b2ff","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiNTM4ZjQ5Zjk0NzhlNGFlZjMwMjlmZGE5MTk0MGM1Zjg0OWIyZmY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-05T22:55:05Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-05T22:55:05Z"},"message":"OPENJPA-1545 Fix checkstyle failure due to line too long (124 chars)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"14c022475baf6f0885d6b9d6ebf4745bb66ee817","url":"https://api.github.com/repos/apache/openjpa/git/trees/14c022475baf6f0885d6b9d6ebf4745bb66ee817"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb538f49f9478e4aef3029fda91940c5f849b2ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb538f49f9478e4aef3029fda91940c5f849b2ff","html_url":"https://github.com/apache/openjpa/commit/bb538f49f9478e4aef3029fda91940c5f849b2ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb538f49f9478e4aef3029fda91940c5f849b2ff/comments","author":null,"committer":null,"parents":[{"sha":"b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","url":"https://api.github.com/repos/apache/openjpa/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","html_url":"https://github.com/apache/openjpa/commit/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c"}]},{"sha":"b9a230567ec725cd06f5c0db326572907f42ea52","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5YTIzMDU2N2VjNzI1Y2QwNmY1YzBkYjMyNjU3MjkwN2Y0MmVhNTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-06T03:26:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-06T03:26:24Z"},"message":"OPENJPA-1097 Detachment processing of our proxied mutable types (Date, Timestamp, etc) needs to be consistent as EM.clear() was not unproxying JavaTypes.OBJECT fields but detach()/detachAll() were.  Thanks to Rick Curtis for the DetachManager changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919696 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f0fd11d958f8f0387169741f9d47a4f7c71aac0d","url":"https://api.github.com/repos/apache/openjpa/git/trees/f0fd11d958f8f0387169741f9d47a4f7c71aac0d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b9a230567ec725cd06f5c0db326572907f42ea52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b9a230567ec725cd06f5c0db326572907f42ea52","html_url":"https://github.com/apache/openjpa/commit/b9a230567ec725cd06f5c0db326572907f42ea52","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b9a230567ec725cd06f5c0db326572907f42ea52/comments","author":null,"committer":null,"parents":[{"sha":"bb538f49f9478e4aef3029fda91940c5f849b2ff","url":"https://api.github.com/repos/apache/openjpa/commits/bb538f49f9478e4aef3029fda91940c5f849b2ff","html_url":"https://github.com/apache/openjpa/commit/bb538f49f9478e4aef3029fda91940c5f849b2ff"}]},{"sha":"b01f5718f9ee88246f3f771c7b63306802732ce7","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwMWY1NzE4ZjllZTg4MjQ2ZjNmNzcxYzdiNjMzMDY4MDI3MzJjZTc=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-07T13:15:17Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-07T13:15:17Z"},"message":"OPENJPA-1510: Move map related sections into 7.8 Maps section - they were out of context.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919984 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f654ebf3d496401497ec2e4a68cb7e4aed6a0335","url":"https://api.github.com/repos/apache/openjpa/git/trees/f654ebf3d496401497ec2e4a68cb7e4aed6a0335"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b01f5718f9ee88246f3f771c7b63306802732ce7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b01f5718f9ee88246f3f771c7b63306802732ce7","html_url":"https://github.com/apache/openjpa/commit/b01f5718f9ee88246f3f771c7b63306802732ce7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b01f5718f9ee88246f3f771c7b63306802732ce7/comments","author":null,"committer":null,"parents":[{"sha":"b9a230567ec725cd06f5c0db326572907f42ea52","url":"https://api.github.com/repos/apache/openjpa/commits/b9a230567ec725cd06f5c0db326572907f42ea52","html_url":"https://github.com/apache/openjpa/commit/b9a230567ec725cd06f5c0db326572907f42ea52"}]},{"sha":"1c992feeb723b6e1b4464f7bdbf1a1961583124f","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjOTkyZmVlYjcyM2I2ZTFiNDQ2NGY3YmRiZjFhMTk2MTU4MzEyNGY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-07T16:16:06Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-07T16:16:06Z"},"message":"OPENJPA-1552 Add proper QueryImpl creation in EntityManagerImpl subclass.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c55f7f4d7a977ad2cfa0b18560c8ffac13b3e33b","url":"https://api.github.com/repos/apache/openjpa/git/trees/c55f7f4d7a977ad2cfa0b18560c8ffac13b3e33b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c992feeb723b6e1b4464f7bdbf1a1961583124f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c992feeb723b6e1b4464f7bdbf1a1961583124f","html_url":"https://github.com/apache/openjpa/commit/1c992feeb723b6e1b4464f7bdbf1a1961583124f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c992feeb723b6e1b4464f7bdbf1a1961583124f/comments","author":null,"committer":null,"parents":[{"sha":"b01f5718f9ee88246f3f771c7b63306802732ce7","url":"https://api.github.com/repos/apache/openjpa/commits/b01f5718f9ee88246f3f771c7b63306802732ce7","html_url":"https://github.com/apache/openjpa/commit/b01f5718f9ee88246f3f771c7b63306802732ce7"}]},{"sha":"04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0YjVlNzdjOWU2NWU4YzY4OWEzZGQzYWIyNWE4MWJmMmQwMTFjMTc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-07T16:37:50Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-07T16:37:50Z"},"message":"Removed un-used import.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b813c4339cc73c8395fb472c5b780374939aea92","url":"https://api.github.com/repos/apache/openjpa/git/trees/b813c4339cc73c8395fb472c5b780374939aea92"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17","html_url":"https://github.com/apache/openjpa/commit/04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17/comments","author":null,"committer":null,"parents":[{"sha":"1c992feeb723b6e1b4464f7bdbf1a1961583124f","url":"https://api.github.com/repos/apache/openjpa/commits/1c992feeb723b6e1b4464f7bdbf1a1961583124f","html_url":"https://github.com/apache/openjpa/commit/1c992feeb723b6e1b4464f7bdbf1a1961583124f"}]},{"sha":"88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4ZjExNjhiODFmMTBiM2E1ZDhjZmUwYjBlZjFjYWY2MmY0OWY0ZGE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T13:23:57Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T13:23:57Z"},"message":"OPENJPA-1517 Correctly show this as fixed in Beta2 in the Changes/Release Notes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920314 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"939aaa2b1f81b52d964f031604b642261d01978f","url":"https://api.github.com/repos/apache/openjpa/git/trees/939aaa2b1f81b52d964f031604b642261d01978f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da","html_url":"https://github.com/apache/openjpa/commit/88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da/comments","author":null,"committer":null,"parents":[{"sha":"04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17","url":"https://api.github.com/repos/apache/openjpa/commits/04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17","html_url":"https://github.com/apache/openjpa/commit/04b5e77c9e65e8c689a3dd3ab25a81bf2d011c17"}]},{"sha":"b59c7577416a0da6e0b450d8f9b8d7c965875488","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1OWM3NTc3NDE2YTBkYTZlMGI0NTBkOGY5YjhkN2M5NjU4NzU0ODg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T13:26:16Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T13:26:16Z"},"message":"OPENJPA-1496 Show as being fixed in Beta2 in Changes/Release Notes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920316 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c6f3cecbe8c2fae287ee50a91c7c19cf8a59d6e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/c6f3cecbe8c2fae287ee50a91c7c19cf8a59d6e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b59c7577416a0da6e0b450d8f9b8d7c965875488","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b59c7577416a0da6e0b450d8f9b8d7c965875488","html_url":"https://github.com/apache/openjpa/commit/b59c7577416a0da6e0b450d8f9b8d7c965875488","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b59c7577416a0da6e0b450d8f9b8d7c965875488/comments","author":null,"committer":null,"parents":[{"sha":"88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da","url":"https://api.github.com/repos/apache/openjpa/commits/88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da","html_url":"https://github.com/apache/openjpa/commit/88f1168b81f10b3a5d8cfe0b0ef1caf62f49f4da"}]},{"sha":"d5fb93d98fb9f896dc50178b81defc64c546e56f","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1ZmI5M2Q5OGZiOWY4OTZkYzUwMTc4YjgxZGVmYzY0YzU0NmU1NmY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T13:31:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T13:31:08Z"},"message":"OPENJPA-1483 Show as being fixed in Beta2 in Changes/Release Notes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920317 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e0ece7b3737675a467e750b8c8e03f7a103a5a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/2e0ece7b3737675a467e750b8c8e03f7a103a5a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d5fb93d98fb9f896dc50178b81defc64c546e56f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d5fb93d98fb9f896dc50178b81defc64c546e56f","html_url":"https://github.com/apache/openjpa/commit/d5fb93d98fb9f896dc50178b81defc64c546e56f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d5fb93d98fb9f896dc50178b81defc64c546e56f/comments","author":null,"committer":null,"parents":[{"sha":"b59c7577416a0da6e0b450d8f9b8d7c965875488","url":"https://api.github.com/repos/apache/openjpa/commits/b59c7577416a0da6e0b450d8f9b8d7c965875488","html_url":"https://github.com/apache/openjpa/commit/b59c7577416a0da6e0b450d8f9b8d7c965875488"}]},{"sha":"7a8052cd73010994913a7649a7f3db9ad4aadd2c","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhODA1MmNkNzMwMTA5OTQ5MTNhNzY0OWE3ZjNkYjlhZDRhYWRkMmM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T17:04:48Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T17:04:48Z"},"message":"OPENJPA-5 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920402 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d8193c05cd8ff03edb52c7ac8f2a45fca9345a6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d8193c05cd8ff03edb52c7ac8f2a45fca9345a6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7a8052cd73010994913a7649a7f3db9ad4aadd2c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7a8052cd73010994913a7649a7f3db9ad4aadd2c","html_url":"https://github.com/apache/openjpa/commit/7a8052cd73010994913a7649a7f3db9ad4aadd2c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7a8052cd73010994913a7649a7f3db9ad4aadd2c/comments","author":null,"committer":null,"parents":[{"sha":"d5fb93d98fb9f896dc50178b81defc64c546e56f","url":"https://api.github.com/repos/apache/openjpa/commits/d5fb93d98fb9f896dc50178b81defc64c546e56f","html_url":"https://github.com/apache/openjpa/commit/d5fb93d98fb9f896dc50178b81defc64c546e56f"}]},{"sha":"4b3d520ee9c59831beb199ff429d5783dffd6ce2","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiM2Q1MjBlZTljNTk4MzFiZWIxOTlmZjQyOWQ1NzgzZGZmZDZjZTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T17:07:32Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T17:07:32Z"},"message":"OPENJPA-1492 Change access on ReverseMappingTool#getAnnotationsForMeta(Object) to public.  Request from Laird Nelson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920404 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70823991d40725d9b8531ec5b382a6187a60307b","url":"https://api.github.com/repos/apache/openjpa/git/trees/70823991d40725d9b8531ec5b382a6187a60307b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b3d520ee9c59831beb199ff429d5783dffd6ce2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b3d520ee9c59831beb199ff429d5783dffd6ce2","html_url":"https://github.com/apache/openjpa/commit/4b3d520ee9c59831beb199ff429d5783dffd6ce2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b3d520ee9c59831beb199ff429d5783dffd6ce2/comments","author":null,"committer":null,"parents":[{"sha":"7a8052cd73010994913a7649a7f3db9ad4aadd2c","url":"https://api.github.com/repos/apache/openjpa/commits/7a8052cd73010994913a7649a7f3db9ad4aadd2c","html_url":"https://github.com/apache/openjpa/commit/7a8052cd73010994913a7649a7f3db9ad4aadd2c"}]},{"sha":"045eb544de1a22761d7aa35b9da7571be21bc37e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0NWViNTQ0ZGUxYTIyNzYxZDdhYTM1YjlkYTc1NzFiZTIxYmMzN2U=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T18:26:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T18:26:20Z"},"message":"OPENJPA-1121 add ref to JIRA\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920434 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8cadb01651ab0c1ca4dab788a2513499eeed5e3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/8cadb01651ab0c1ca4dab788a2513499eeed5e3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/045eb544de1a22761d7aa35b9da7571be21bc37e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/045eb544de1a22761d7aa35b9da7571be21bc37e","html_url":"https://github.com/apache/openjpa/commit/045eb544de1a22761d7aa35b9da7571be21bc37e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/045eb544de1a22761d7aa35b9da7571be21bc37e/comments","author":null,"committer":null,"parents":[{"sha":"4b3d520ee9c59831beb199ff429d5783dffd6ce2","url":"https://api.github.com/repos/apache/openjpa/commits/4b3d520ee9c59831beb199ff429d5783dffd6ce2","html_url":"https://github.com/apache/openjpa/commit/4b3d520ee9c59831beb199ff429d5783dffd6ce2"}]},{"sha":"97cd88adc357a99b97c27d0074a8fec46adee7a5","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3Y2Q4OGFkYzM1N2E5OWI5N2MyN2QwMDc0YThmZWM0NmFkZWU3YTU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T18:28:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T18:28:33Z"},"message":"OPENJPA-1121 Update Changes/ReleaseNotes to say this was fixed in 2.0.0 M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920435 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ada19691e283f56a98517257a75a97c037dc11e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/ada19691e283f56a98517257a75a97c037dc11e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/97cd88adc357a99b97c27d0074a8fec46adee7a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/97cd88adc357a99b97c27d0074a8fec46adee7a5","html_url":"https://github.com/apache/openjpa/commit/97cd88adc357a99b97c27d0074a8fec46adee7a5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/97cd88adc357a99b97c27d0074a8fec46adee7a5/comments","author":null,"committer":null,"parents":[{"sha":"045eb544de1a22761d7aa35b9da7571be21bc37e","url":"https://api.github.com/repos/apache/openjpa/commits/045eb544de1a22761d7aa35b9da7571be21bc37e","html_url":"https://github.com/apache/openjpa/commit/045eb544de1a22761d7aa35b9da7571be21bc37e"}]},{"sha":"14996dfd406d3f59d6d106ca9f89faf753b18eea","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0OTk2ZGZkNDA2ZDNmNTlkNmQxMDZjYTlmODlmYWY3NTNiMThlZWE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T19:20:32Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T19:20:32Z"},"message":"OPENJPA-1360 ReverseMappingTool omits nullable, length, etc. when ClassMapping.setEmbedded(true) is called\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2b83db5d351ea5f4925b189e97fcbb8251f69b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2b83db5d351ea5f4925b189e97fcbb8251f69b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/14996dfd406d3f59d6d106ca9f89faf753b18eea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/14996dfd406d3f59d6d106ca9f89faf753b18eea","html_url":"https://github.com/apache/openjpa/commit/14996dfd406d3f59d6d106ca9f89faf753b18eea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/14996dfd406d3f59d6d106ca9f89faf753b18eea/comments","author":null,"committer":null,"parents":[{"sha":"97cd88adc357a99b97c27d0074a8fec46adee7a5","url":"https://api.github.com/repos/apache/openjpa/commits/97cd88adc357a99b97c27d0074a8fec46adee7a5","html_url":"https://github.com/apache/openjpa/commit/97cd88adc357a99b97c27d0074a8fec46adee7a5"}]},{"sha":"1873fcd3685125c77025e0015ea0dbfbc4fc2818","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4NzNmY2QzNjg1MTI1Yzc3MDI1ZTAwMTVlYTBkYmZiYzRmYzI4MTg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T19:35:47Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T19:35:47Z"},"message":"OPENJPA-740 In MySQLDictionary use LONGBLOB, MEDIUMBLOB, TINYBLOB based on the column size, instead of always using BLOB which can only hold 64KB.  Patch contributed by Simone Gianni.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01227ab67c049792e06eccba916db69ca53e73f7","url":"https://api.github.com/repos/apache/openjpa/git/trees/01227ab67c049792e06eccba916db69ca53e73f7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1873fcd3685125c77025e0015ea0dbfbc4fc2818","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1873fcd3685125c77025e0015ea0dbfbc4fc2818","html_url":"https://github.com/apache/openjpa/commit/1873fcd3685125c77025e0015ea0dbfbc4fc2818","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1873fcd3685125c77025e0015ea0dbfbc4fc2818/comments","author":null,"committer":null,"parents":[{"sha":"14996dfd406d3f59d6d106ca9f89faf753b18eea","url":"https://api.github.com/repos/apache/openjpa/commits/14996dfd406d3f59d6d106ca9f89faf753b18eea","html_url":"https://github.com/apache/openjpa/commit/14996dfd406d3f59d6d106ca9f89faf753b18eea"}]},{"sha":"82694335ddfd450d60b34744a5345bebd99d992e","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyNjk0MzM1ZGRmZDQ1MGQ2MGIzNDc0NGE1MzQ1YmViZDk5ZDk5MmU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T20:23:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T20:23:03Z"},"message":"OPENJPA-740 Handle case where size is unkown by defaulting back to old value (64KB)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"77b96bc038445e3e9f306f8e709f68e0a4e50d1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/77b96bc038445e3e9f306f8e709f68e0a4e50d1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82694335ddfd450d60b34744a5345bebd99d992e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82694335ddfd450d60b34744a5345bebd99d992e","html_url":"https://github.com/apache/openjpa/commit/82694335ddfd450d60b34744a5345bebd99d992e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82694335ddfd450d60b34744a5345bebd99d992e/comments","author":null,"committer":null,"parents":[{"sha":"1873fcd3685125c77025e0015ea0dbfbc4fc2818","url":"https://api.github.com/repos/apache/openjpa/commits/1873fcd3685125c77025e0015ea0dbfbc4fc2818","html_url":"https://github.com/apache/openjpa/commit/1873fcd3685125c77025e0015ea0dbfbc4fc2818"}]},{"sha":"62092d763ad8d63b7e1b5d45c04d607632986c5b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyMDkyZDc2M2FkOGQ2M2I3ZTFiNWQ0NWMwNGQ2MDc2MzI5ODZjNWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-08T20:43:37Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-08T20:43:37Z"},"message":"OPENJPA-1118:\nRemove Numbers.valueOf() - prefer autoboxing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"552d4f7926c3ea2006c65b05556400c87e608f57","url":"https://api.github.com/repos/apache/openjpa/git/trees/552d4f7926c3ea2006c65b05556400c87e608f57"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b","html_url":"https://github.com/apache/openjpa/commit/62092d763ad8d63b7e1b5d45c04d607632986c5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"82694335ddfd450d60b34744a5345bebd99d992e","url":"https://api.github.com/repos/apache/openjpa/commits/82694335ddfd450d60b34744a5345bebd99d992e","html_url":"https://github.com/apache/openjpa/commit/82694335ddfd450d60b34744a5345bebd99d992e"}]},{"sha":"c58af533fb565d92f7a514749d05a957b6530fc5","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1OGFmNTMzZmI1NjVkOTJmN2E1MTQ3NDlkMDVhOTU3YjY1MzBmYzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-08T22:07:27Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-08T22:07:27Z"},"message":"OPENJPA-1178: \nRemove uneeded imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920540 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c1980d2634cfa70dbeae7601eb891805125766cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/c1980d2634cfa70dbeae7601eb891805125766cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c58af533fb565d92f7a514749d05a957b6530fc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c58af533fb565d92f7a514749d05a957b6530fc5","html_url":"https://github.com/apache/openjpa/commit/c58af533fb565d92f7a514749d05a957b6530fc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c58af533fb565d92f7a514749d05a957b6530fc5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"62092d763ad8d63b7e1b5d45c04d607632986c5b","url":"https://api.github.com/repos/apache/openjpa/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b","html_url":"https://github.com/apache/openjpa/commit/62092d763ad8d63b7e1b5d45c04d607632986c5b"}]},{"sha":"dbe6745966ccd57b016ce50743abe43d918a83b9","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiZTY3NDU5NjZjY2Q1N2IwMTZjZTUwNzQzYWJlNDNkOTE4YTgzYjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T22:48:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-08T22:48:24Z"},"message":"OPENJPA-1524 Update JNDI lookup to find TransactionManager when running in Apache Aries.  Still need to implement a better solution for non-Aries based OSGi environments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920553 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a707559db8fb35c5823b1243f9315e5fa2b4db0e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a707559db8fb35c5823b1243f9315e5fa2b4db0e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dbe6745966ccd57b016ce50743abe43d918a83b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dbe6745966ccd57b016ce50743abe43d918a83b9","html_url":"https://github.com/apache/openjpa/commit/dbe6745966ccd57b016ce50743abe43d918a83b9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dbe6745966ccd57b016ce50743abe43d918a83b9/comments","author":null,"committer":null,"parents":[{"sha":"c58af533fb565d92f7a514749d05a957b6530fc5","url":"https://api.github.com/repos/apache/openjpa/commits/c58af533fb565d92f7a514749d05a957b6530fc5","html_url":"https://github.com/apache/openjpa/commit/c58af533fb565d92f7a514749d05a957b6530fc5"}]},{"sha":"ce0886e110de5e2a772dd4d33f5f328aa4bcaba4","node_id":"MDY6Q29tbWl0MjA2MzY0OmNlMDg4NmUxMTBkZTVlMmE3NzJkZDRkMzNmNWYzMjhhYTRiY2FiYTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:32:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:32:46Z"},"message":"OPENJPA-1101 Remove unused/outdated/incomplete OSGi integration tests, as this is being handled by Apache Aries for now\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920894 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae36df3c875afc2ae4766a21332502b744580fdd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae36df3c875afc2ae4766a21332502b744580fdd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ce0886e110de5e2a772dd4d33f5f328aa4bcaba4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ce0886e110de5e2a772dd4d33f5f328aa4bcaba4","html_url":"https://github.com/apache/openjpa/commit/ce0886e110de5e2a772dd4d33f5f328aa4bcaba4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ce0886e110de5e2a772dd4d33f5f328aa4bcaba4/comments","author":null,"committer":null,"parents":[{"sha":"dbe6745966ccd57b016ce50743abe43d918a83b9","url":"https://api.github.com/repos/apache/openjpa/commits/dbe6745966ccd57b016ce50743abe43d918a83b9","html_url":"https://github.com/apache/openjpa/commit/dbe6745966ccd57b016ce50743abe43d918a83b9"}]},{"sha":"4190dcc04aa2b7b6d03638ccdf44c4ff36e03293","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxOTBkY2MwNGFhMmI3YjZkMDM2MzhjY2RmNDRjNGZmMzZlMDMyOTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:38:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:38:10Z"},"message":"OPENJPA-1020 Update in Changes/ReleaseNotes to show as fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d12db262c5c530e4e8de8e005d039563c68be5a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/d12db262c5c530e4e8de8e005d039563c68be5a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4190dcc04aa2b7b6d03638ccdf44c4ff36e03293","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4190dcc04aa2b7b6d03638ccdf44c4ff36e03293","html_url":"https://github.com/apache/openjpa/commit/4190dcc04aa2b7b6d03638ccdf44c4ff36e03293","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4190dcc04aa2b7b6d03638ccdf44c4ff36e03293/comments","author":null,"committer":null,"parents":[{"sha":"ce0886e110de5e2a772dd4d33f5f328aa4bcaba4","url":"https://api.github.com/repos/apache/openjpa/commits/ce0886e110de5e2a772dd4d33f5f328aa4bcaba4","html_url":"https://github.com/apache/openjpa/commit/ce0886e110de5e2a772dd4d33f5f328aa4bcaba4"}]},{"sha":"4cc1f6478e6dd6d130ab3b2471918e386d0ac864","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjYzFmNjQ3OGU2ZGQ2ZDEzMGFiM2IyNDcxOTE4ZTM4NmQwYWM4NjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:49:27Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:49:27Z"},"message":"OPENJPA-1432 Show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920903 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee332804b4b277cf22feebc3ca994f905f4364ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee332804b4b277cf22feebc3ca994f905f4364ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4cc1f6478e6dd6d130ab3b2471918e386d0ac864","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4cc1f6478e6dd6d130ab3b2471918e386d0ac864","html_url":"https://github.com/apache/openjpa/commit/4cc1f6478e6dd6d130ab3b2471918e386d0ac864","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4cc1f6478e6dd6d130ab3b2471918e386d0ac864/comments","author":null,"committer":null,"parents":[{"sha":"4190dcc04aa2b7b6d03638ccdf44c4ff36e03293","url":"https://api.github.com/repos/apache/openjpa/commits/4190dcc04aa2b7b6d03638ccdf44c4ff36e03293","html_url":"https://github.com/apache/openjpa/commit/4190dcc04aa2b7b6d03638ccdf44c4ff36e03293"}]},{"sha":"4c2f53856e7d886d7fd75baf4ac8887b0a520359","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjMmY1Mzg1NmU3ZDg4NmQ3ZmQ3NWJhZjRhYzg4ODdiMGE1MjAzNTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:58:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T14:58:46Z"},"message":"OPENJPA-1460 Show as being fixed in 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920906 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e75610df20e35708a793466c981eeb38aef2c5c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/e75610df20e35708a793466c981eeb38aef2c5c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c2f53856e7d886d7fd75baf4ac8887b0a520359","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c2f53856e7d886d7fd75baf4ac8887b0a520359","html_url":"https://github.com/apache/openjpa/commit/4c2f53856e7d886d7fd75baf4ac8887b0a520359","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c2f53856e7d886d7fd75baf4ac8887b0a520359/comments","author":null,"committer":null,"parents":[{"sha":"4cc1f6478e6dd6d130ab3b2471918e386d0ac864","url":"https://api.github.com/repos/apache/openjpa/commits/4cc1f6478e6dd6d130ab3b2471918e386d0ac864","html_url":"https://github.com/apache/openjpa/commit/4cc1f6478e6dd6d130ab3b2471918e386d0ac864"}]},{"sha":"65b496cd9858d1d65147a4d023d83dbe0d2e541d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1YjQ5NmNkOTg1OGQxZDY1MTQ3YTRkMDIzZDgzZGJlMGQyZTU0MWQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:06:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:06:09Z"},"message":"OPENJPA-1258 Show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920913 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b6e415091b11d25b64a8e9f84757095efce4fa0c","url":"https://api.github.com/repos/apache/openjpa/git/trees/b6e415091b11d25b64a8e9f84757095efce4fa0c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/65b496cd9858d1d65147a4d023d83dbe0d2e541d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/65b496cd9858d1d65147a4d023d83dbe0d2e541d","html_url":"https://github.com/apache/openjpa/commit/65b496cd9858d1d65147a4d023d83dbe0d2e541d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/65b496cd9858d1d65147a4d023d83dbe0d2e541d/comments","author":null,"committer":null,"parents":[{"sha":"4c2f53856e7d886d7fd75baf4ac8887b0a520359","url":"https://api.github.com/repos/apache/openjpa/commits/4c2f53856e7d886d7fd75baf4ac8887b0a520359","html_url":"https://github.com/apache/openjpa/commit/4c2f53856e7d886d7fd75baf4ac8887b0a520359"}]},{"sha":"f50f847e97433bc508b5eff7c8e65e036a3ab354","node_id":"MDY6Q29tbWl0MjA2MzY0OmY1MGY4NDdlOTc0MzNiYzUwOGI1ZWZmN2M4ZTY1ZTAzNmEzYWIzNTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:29:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:29:02Z"},"message":"OPENJPA-1518 Show as being fixed in 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920923 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ebf84f3524cc4ed999a81a839d6cf6e4837e1f45","url":"https://api.github.com/repos/apache/openjpa/git/trees/ebf84f3524cc4ed999a81a839d6cf6e4837e1f45"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f50f847e97433bc508b5eff7c8e65e036a3ab354","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f50f847e97433bc508b5eff7c8e65e036a3ab354","html_url":"https://github.com/apache/openjpa/commit/f50f847e97433bc508b5eff7c8e65e036a3ab354","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f50f847e97433bc508b5eff7c8e65e036a3ab354/comments","author":null,"committer":null,"parents":[{"sha":"65b496cd9858d1d65147a4d023d83dbe0d2e541d","url":"https://api.github.com/repos/apache/openjpa/commits/65b496cd9858d1d65147a4d023d83dbe0d2e541d","html_url":"https://github.com/apache/openjpa/commit/65b496cd9858d1d65147a4d023d83dbe0d2e541d"}]},{"sha":"1446c7148e4a597da6aa84760ab50ddf4f3686de","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0NDZjNzE0OGU0YTU5N2RhNmFhODQ3NjBhYjUwZGRmNGYzNjg2ZGU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:31:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:31:10Z"},"message":"OPENJPA-924 Show as being fixed in 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920924 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0529fca746be333eb135f5415e9165914a27b518","url":"https://api.github.com/repos/apache/openjpa/git/trees/0529fca746be333eb135f5415e9165914a27b518"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1446c7148e4a597da6aa84760ab50ddf4f3686de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1446c7148e4a597da6aa84760ab50ddf4f3686de","html_url":"https://github.com/apache/openjpa/commit/1446c7148e4a597da6aa84760ab50ddf4f3686de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1446c7148e4a597da6aa84760ab50ddf4f3686de/comments","author":null,"committer":null,"parents":[{"sha":"f50f847e97433bc508b5eff7c8e65e036a3ab354","url":"https://api.github.com/repos/apache/openjpa/commits/f50f847e97433bc508b5eff7c8e65e036a3ab354","html_url":"https://github.com/apache/openjpa/commit/f50f847e97433bc508b5eff7c8e65e036a3ab354"}]},{"sha":"9b578759ab89e9cf4a17ea78269b6eb9f58a0d94","node_id":"MDY6Q29tbWl0MjA2MzY0OjliNTc4NzU5YWI4OWU5Y2Y0YTE3ZWE3ODI2OWI2ZWI5ZjU4YTBkOTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:46:45Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:46:45Z"},"message":"OPENJPA-1494 Show as being fixed in 2.0.0-beta2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f8db7160ba9e7e368d08a2941c4beea71a1caa5","url":"https://api.github.com/repos/apache/openjpa/git/trees/0f8db7160ba9e7e368d08a2941c4beea71a1caa5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b578759ab89e9cf4a17ea78269b6eb9f58a0d94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b578759ab89e9cf4a17ea78269b6eb9f58a0d94","html_url":"https://github.com/apache/openjpa/commit/9b578759ab89e9cf4a17ea78269b6eb9f58a0d94","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b578759ab89e9cf4a17ea78269b6eb9f58a0d94/comments","author":null,"committer":null,"parents":[{"sha":"1446c7148e4a597da6aa84760ab50ddf4f3686de","url":"https://api.github.com/repos/apache/openjpa/commits/1446c7148e4a597da6aa84760ab50ddf4f3686de","html_url":"https://github.com/apache/openjpa/commit/1446c7148e4a597da6aa84760ab50ddf4f3686de"}]},{"sha":"2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlZDBjYTM2MjFkMWMwMzBmZWE0NGZmMDY1NmI1NGViNGEzZjc4ZWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:50:43Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:50:43Z"},"message":"OPENJPA-1405 Show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920933 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"edc21239ecd8066acd8ef90bb4870eb37e18d0ae","url":"https://api.github.com/repos/apache/openjpa/git/trees/edc21239ecd8066acd8ef90bb4870eb37e18d0ae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee","html_url":"https://github.com/apache/openjpa/commit/2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee/comments","author":null,"committer":null,"parents":[{"sha":"9b578759ab89e9cf4a17ea78269b6eb9f58a0d94","url":"https://api.github.com/repos/apache/openjpa/commits/9b578759ab89e9cf4a17ea78269b6eb9f58a0d94","html_url":"https://github.com/apache/openjpa/commit/9b578759ab89e9cf4a17ea78269b6eb9f58a0d94"}]},{"sha":"33ffb3f8c7fa4790b6f8e29127314ba379e2d94f","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzZmZiM2Y4YzdmYTQ3OTBiNmY4ZTI5MTI3MzE0YmEzNzllMmQ5NGY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:52:05Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:52:05Z"},"message":"OPENJPA-1383 Show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920934 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"181cf5eed395d9616480ab6dae181551635e5656","url":"https://api.github.com/repos/apache/openjpa/git/trees/181cf5eed395d9616480ab6dae181551635e5656"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/33ffb3f8c7fa4790b6f8e29127314ba379e2d94f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/33ffb3f8c7fa4790b6f8e29127314ba379e2d94f","html_url":"https://github.com/apache/openjpa/commit/33ffb3f8c7fa4790b6f8e29127314ba379e2d94f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/33ffb3f8c7fa4790b6f8e29127314ba379e2d94f/comments","author":null,"committer":null,"parents":[{"sha":"2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee","url":"https://api.github.com/repos/apache/openjpa/commits/2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee","html_url":"https://github.com/apache/openjpa/commit/2ed0ca3621d1c030fea44ff0656b54eb4a3f78ee"}]},{"sha":"2e9c54f6f67ab38129bfb14b082742c06f439049","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlOWM1NGY2ZjY3YWIzODEyOWJmYjE0YjA4Mjc0MmMwNmY0MzkwNDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:53:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:53:33Z"},"message":"OPENJPA-1345 Show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920937 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acbfa8b61d12c2de9b54e8af804d61b7ceeaec21","url":"https://api.github.com/repos/apache/openjpa/git/trees/acbfa8b61d12c2de9b54e8af804d61b7ceeaec21"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2e9c54f6f67ab38129bfb14b082742c06f439049","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2e9c54f6f67ab38129bfb14b082742c06f439049","html_url":"https://github.com/apache/openjpa/commit/2e9c54f6f67ab38129bfb14b082742c06f439049","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2e9c54f6f67ab38129bfb14b082742c06f439049/comments","author":null,"committer":null,"parents":[{"sha":"33ffb3f8c7fa4790b6f8e29127314ba379e2d94f","url":"https://api.github.com/repos/apache/openjpa/commits/33ffb3f8c7fa4790b6f8e29127314ba379e2d94f","html_url":"https://github.com/apache/openjpa/commit/33ffb3f8c7fa4790b6f8e29127314ba379e2d94f"}]},{"sha":"5d7e949803352c5977a3cc1ea1a9abd99bad6bde","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkN2U5NDk4MDMzNTJjNTk3N2EzY2MxZWExYTlhYmQ5OWJhZDZiZGU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:55:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:55:12Z"},"message":"OPENJPA-1232 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920940 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"415f3342905fe165fa588b1e2f18089f7186be05","url":"https://api.github.com/repos/apache/openjpa/git/trees/415f3342905fe165fa588b1e2f18089f7186be05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d7e949803352c5977a3cc1ea1a9abd99bad6bde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d7e949803352c5977a3cc1ea1a9abd99bad6bde","html_url":"https://github.com/apache/openjpa/commit/5d7e949803352c5977a3cc1ea1a9abd99bad6bde","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d7e949803352c5977a3cc1ea1a9abd99bad6bde/comments","author":null,"committer":null,"parents":[{"sha":"2e9c54f6f67ab38129bfb14b082742c06f439049","url":"https://api.github.com/repos/apache/openjpa/commits/2e9c54f6f67ab38129bfb14b082742c06f439049","html_url":"https://github.com/apache/openjpa/commit/2e9c54f6f67ab38129bfb14b082742c06f439049"}]},{"sha":"0f62a7de1b9c4fe0085fdf526c1920400e44127f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmNjJhN2RlMWI5YzRmZTAwODVmZGY1MjZjMTkyMDQwMGU0NDEyN2Y=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:56:52Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T15:56:52Z"},"message":"OPENJPA-1211 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920943 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fbb77220dd9c1b3ab96292f1d072098fce011e57","url":"https://api.github.com/repos/apache/openjpa/git/trees/fbb77220dd9c1b3ab96292f1d072098fce011e57"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f62a7de1b9c4fe0085fdf526c1920400e44127f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f62a7de1b9c4fe0085fdf526c1920400e44127f","html_url":"https://github.com/apache/openjpa/commit/0f62a7de1b9c4fe0085fdf526c1920400e44127f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f62a7de1b9c4fe0085fdf526c1920400e44127f/comments","author":null,"committer":null,"parents":[{"sha":"5d7e949803352c5977a3cc1ea1a9abd99bad6bde","url":"https://api.github.com/repos/apache/openjpa/commits/5d7e949803352c5977a3cc1ea1a9abd99bad6bde","html_url":"https://github.com/apache/openjpa/commit/5d7e949803352c5977a3cc1ea1a9abd99bad6bde"}]},{"sha":"17652a870b6f082cbe7980fd50c57670aec397cf","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3NjUyYTg3MGI2ZjA4MmNiZTc5ODBmZDUwYzU3NjcwYWVjMzk3Y2Y=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2010-03-09T16:48:50Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2010-03-09T16:48:50Z"},"message":"OPENJPA-1530 change TYPE to ENGINE in DDL for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920979 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c93cd62b93a7cbec1cc466b3b7feecdcb32f5739","url":"https://api.github.com/repos/apache/openjpa/git/trees/c93cd62b93a7cbec1cc466b3b7feecdcb32f5739"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/17652a870b6f082cbe7980fd50c57670aec397cf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/17652a870b6f082cbe7980fd50c57670aec397cf","html_url":"https://github.com/apache/openjpa/commit/17652a870b6f082cbe7980fd50c57670aec397cf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/17652a870b6f082cbe7980fd50c57670aec397cf/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f62a7de1b9c4fe0085fdf526c1920400e44127f","url":"https://api.github.com/repos/apache/openjpa/commits/0f62a7de1b9c4fe0085fdf526c1920400e44127f","html_url":"https://github.com/apache/openjpa/commit/0f62a7de1b9c4fe0085fdf526c1920400e44127f"}]},{"sha":"5cb14fe384cf59d2612817ec4c3f1c62e17dd611","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjYjE0ZmUzODRjZjU5ZDI2MTI4MTdlYzRjM2YxYzYyZTE3ZGQ2MTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-09T16:54:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-09T16:54:55Z"},"message":"OPENJPA-1053:: unwrap() query failure to throw correct exception and  set rollback\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920981 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd88946cc994782b8a9b46f2c657c444b8e0576c","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd88946cc994782b8a9b46f2c657c444b8e0576c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","html_url":"https://github.com/apache/openjpa/commit/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611/comments","author":null,"committer":null,"parents":[{"sha":"17652a870b6f082cbe7980fd50c57670aec397cf","url":"https://api.github.com/repos/apache/openjpa/commits/17652a870b6f082cbe7980fd50c57670aec397cf","html_url":"https://github.com/apache/openjpa/commit/17652a870b6f082cbe7980fd50c57670aec397cf"}]},{"sha":"1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhMTJiMzkzZGY0ZmMwOGY2YWU4ZDZjNmU5ZDMyY2JkZTJiMDRlODg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:14:17Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:14:17Z"},"message":"OPENJPA-1202 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89672ccae50b0f039bdf464b1d1f8ba2f71c6c15","url":"https://api.github.com/repos/apache/openjpa/git/trees/89672ccae50b0f039bdf464b1d1f8ba2f71c6c15"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88","html_url":"https://github.com/apache/openjpa/commit/1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88/comments","author":null,"committer":null,"parents":[{"sha":"5cb14fe384cf59d2612817ec4c3f1c62e17dd611","url":"https://api.github.com/repos/apache/openjpa/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","html_url":"https://github.com/apache/openjpa/commit/5cb14fe384cf59d2612817ec4c3f1c62e17dd611"}]},{"sha":"0829f46fb379bf6748637389aaaa1d9b6c286a90","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4MjlmNDZmYjM3OWJmNjc0ODYzNzM4OWFhYWExZDliNmMyODZhOTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:15:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:15:42Z"},"message":"OPENJPA-1194 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920988 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca80d5e62ba5d433794477391adc3b15e955db3f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ca80d5e62ba5d433794477391adc3b15e955db3f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0829f46fb379bf6748637389aaaa1d9b6c286a90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0829f46fb379bf6748637389aaaa1d9b6c286a90","html_url":"https://github.com/apache/openjpa/commit/0829f46fb379bf6748637389aaaa1d9b6c286a90","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0829f46fb379bf6748637389aaaa1d9b6c286a90/comments","author":null,"committer":null,"parents":[{"sha":"1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88","url":"https://api.github.com/repos/apache/openjpa/commits/1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88","html_url":"https://github.com/apache/openjpa/commit/1a12b393df4fc08f6ae8d6c6e9d32cbde2b04e88"}]},{"sha":"47453d205e71cb2ba3f6ca74fd2ea9bec5e35245","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3NDUzZDIwNWU3MWNiMmJhM2Y2Y2E3NGZkMmVhOWJlYzVlMzUyNDU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:16:50Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:16:50Z"},"message":"OPENJPA-1191 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920989 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2197ffa5958862e8f0003318e892ab8cb07369a","url":"https://api.github.com/repos/apache/openjpa/git/trees/f2197ffa5958862e8f0003318e892ab8cb07369a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/47453d205e71cb2ba3f6ca74fd2ea9bec5e35245","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/47453d205e71cb2ba3f6ca74fd2ea9bec5e35245","html_url":"https://github.com/apache/openjpa/commit/47453d205e71cb2ba3f6ca74fd2ea9bec5e35245","comments_url":"https://api.github.com/repos/apache/openjpa/commits/47453d205e71cb2ba3f6ca74fd2ea9bec5e35245/comments","author":null,"committer":null,"parents":[{"sha":"0829f46fb379bf6748637389aaaa1d9b6c286a90","url":"https://api.github.com/repos/apache/openjpa/commits/0829f46fb379bf6748637389aaaa1d9b6c286a90","html_url":"https://github.com/apache/openjpa/commit/0829f46fb379bf6748637389aaaa1d9b6c286a90"}]},{"sha":"2b811429d596b1358921a542a71c1927c7317ecf","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiODExNDI5ZDU5NmIxMzU4OTIxYTU0MmE3MWMxOTI3YzczMTdlY2Y=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:18:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:18:24Z"},"message":"OPENJPA-1152 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920990 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7d983314db4488c6f6841043bacd42582849949","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7d983314db4488c6f6841043bacd42582849949"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2b811429d596b1358921a542a71c1927c7317ecf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2b811429d596b1358921a542a71c1927c7317ecf","html_url":"https://github.com/apache/openjpa/commit/2b811429d596b1358921a542a71c1927c7317ecf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2b811429d596b1358921a542a71c1927c7317ecf/comments","author":null,"committer":null,"parents":[{"sha":"47453d205e71cb2ba3f6ca74fd2ea9bec5e35245","url":"https://api.github.com/repos/apache/openjpa/commits/47453d205e71cb2ba3f6ca74fd2ea9bec5e35245","html_url":"https://github.com/apache/openjpa/commit/47453d205e71cb2ba3f6ca74fd2ea9bec5e35245"}]},{"sha":"8e4fa80e8022e776ad071f66c6f5ea2984de6333","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlNGZhODBlODAyMmU3NzZhZDA3MWY2NmM2ZjVlYTI5ODRkZTYzMzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:23:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:23:03Z"},"message":"OPENJPA-1105 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920992 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"05e3f12d78692492d5359ed080a879d3afc35b03","url":"https://api.github.com/repos/apache/openjpa/git/trees/05e3f12d78692492d5359ed080a879d3afc35b03"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8e4fa80e8022e776ad071f66c6f5ea2984de6333","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8e4fa80e8022e776ad071f66c6f5ea2984de6333","html_url":"https://github.com/apache/openjpa/commit/8e4fa80e8022e776ad071f66c6f5ea2984de6333","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8e4fa80e8022e776ad071f66c6f5ea2984de6333/comments","author":null,"committer":null,"parents":[{"sha":"2b811429d596b1358921a542a71c1927c7317ecf","url":"https://api.github.com/repos/apache/openjpa/commits/2b811429d596b1358921a542a71c1927c7317ecf","html_url":"https://github.com/apache/openjpa/commit/2b811429d596b1358921a542a71c1927c7317ecf"}]},{"sha":"e2ba35c93ae5bc017dea8b4164eee74cb33e7b52","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyYmEzNWM5M2FlNWJjMDE3ZGVhOGI0MTY0ZWVlNzRjYjMzZTdiNTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:24:36Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:24:36Z"},"message":"OPENJPA-1112 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920994 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5bd6ad93e9d820a54f72c5992968342b98a6568","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5bd6ad93e9d820a54f72c5992968342b98a6568"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e2ba35c93ae5bc017dea8b4164eee74cb33e7b52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e2ba35c93ae5bc017dea8b4164eee74cb33e7b52","html_url":"https://github.com/apache/openjpa/commit/e2ba35c93ae5bc017dea8b4164eee74cb33e7b52","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e2ba35c93ae5bc017dea8b4164eee74cb33e7b52/comments","author":null,"committer":null,"parents":[{"sha":"8e4fa80e8022e776ad071f66c6f5ea2984de6333","url":"https://api.github.com/repos/apache/openjpa/commits/8e4fa80e8022e776ad071f66c6f5ea2984de6333","html_url":"https://github.com/apache/openjpa/commit/8e4fa80e8022e776ad071f66c6f5ea2984de6333"}]},{"sha":"6c8a69cc9a4ed0a63e98312eb772af9349795a0a","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjOGE2OWNjOWE0ZWQwYTYzZTk4MzEyZWI3NzJhZjkzNDk3OTVhMGE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:29:28Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:29:28Z"},"message":"OPENJPA-1079 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920996 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6433704b6b2758ad09dbd0cb24724cd8d25e8a6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6433704b6b2758ad09dbd0cb24724cd8d25e8a6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6c8a69cc9a4ed0a63e98312eb772af9349795a0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6c8a69cc9a4ed0a63e98312eb772af9349795a0a","html_url":"https://github.com/apache/openjpa/commit/6c8a69cc9a4ed0a63e98312eb772af9349795a0a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6c8a69cc9a4ed0a63e98312eb772af9349795a0a/comments","author":null,"committer":null,"parents":[{"sha":"e2ba35c93ae5bc017dea8b4164eee74cb33e7b52","url":"https://api.github.com/repos/apache/openjpa/commits/e2ba35c93ae5bc017dea8b4164eee74cb33e7b52","html_url":"https://github.com/apache/openjpa/commit/e2ba35c93ae5bc017dea8b4164eee74cb33e7b52"}]},{"sha":"719777606602967a4767dfa549a0df08f3c3bb48","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxOTc3NzYwNjYwMjk2N2E0NzY3ZGZhNTQ5YTBkZjA4ZjNjM2JiNDg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:30:56Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:30:56Z"},"message":"OPENJPA-1070 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920998 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13bd9270ca5619733bd94fc2aa2c7ebc841c50cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/13bd9270ca5619733bd94fc2aa2c7ebc841c50cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/719777606602967a4767dfa549a0df08f3c3bb48","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/719777606602967a4767dfa549a0df08f3c3bb48","html_url":"https://github.com/apache/openjpa/commit/719777606602967a4767dfa549a0df08f3c3bb48","comments_url":"https://api.github.com/repos/apache/openjpa/commits/719777606602967a4767dfa549a0df08f3c3bb48/comments","author":null,"committer":null,"parents":[{"sha":"6c8a69cc9a4ed0a63e98312eb772af9349795a0a","url":"https://api.github.com/repos/apache/openjpa/commits/6c8a69cc9a4ed0a63e98312eb772af9349795a0a","html_url":"https://github.com/apache/openjpa/commit/6c8a69cc9a4ed0a63e98312eb772af9349795a0a"}]},{"sha":"4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiYTA2YjRmZDc0NDU0YjMwNmJiYmI4ZWFiOGNiM2U2ZWVkNmEzYTc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:33:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:33:08Z"},"message":"OPENJPA-1040 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920999 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1ee0da441106fc1068e9f3147543eb99ac709adb","url":"https://api.github.com/repos/apache/openjpa/git/trees/1ee0da441106fc1068e9f3147543eb99ac709adb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7","html_url":"https://github.com/apache/openjpa/commit/4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7/comments","author":null,"committer":null,"parents":[{"sha":"719777606602967a4767dfa549a0df08f3c3bb48","url":"https://api.github.com/repos/apache/openjpa/commits/719777606602967a4767dfa549a0df08f3c3bb48","html_url":"https://github.com/apache/openjpa/commit/719777606602967a4767dfa549a0df08f3c3bb48"}]},{"sha":"ec5d3f555a832417cc72236d5163c2f306232e64","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjNWQzZjU1NWE4MzI0MTdjYzcyMjM2ZDUxNjNjMmYzMDYyMzJlNjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:34:51Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:34:51Z"},"message":"OPENJPA-1016 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a0410865aeefc823bd65c00a34d4112073a0b3ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/a0410865aeefc823bd65c00a34d4112073a0b3ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec5d3f555a832417cc72236d5163c2f306232e64","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec5d3f555a832417cc72236d5163c2f306232e64","html_url":"https://github.com/apache/openjpa/commit/ec5d3f555a832417cc72236d5163c2f306232e64","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec5d3f555a832417cc72236d5163c2f306232e64/comments","author":null,"committer":null,"parents":[{"sha":"4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7","url":"https://api.github.com/repos/apache/openjpa/commits/4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7","html_url":"https://github.com/apache/openjpa/commit/4ba06b4fd74454b306bbbb8eab8cb3e6eed6a3a7"}]},{"sha":"4092ab72c410bc386a11f5f6d299be3fc57ef5ba","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwOTJhYjcyYzQxMGJjMzg2YTExZjVmNmQyOTliZTNmYzU3ZWY1YmE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:43:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:43:42Z"},"message":"OPENJPA-985 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921004 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf530f4c69e6000263726115beaac4bad8461edb","url":"https://api.github.com/repos/apache/openjpa/git/trees/cf530f4c69e6000263726115beaac4bad8461edb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4092ab72c410bc386a11f5f6d299be3fc57ef5ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4092ab72c410bc386a11f5f6d299be3fc57ef5ba","html_url":"https://github.com/apache/openjpa/commit/4092ab72c410bc386a11f5f6d299be3fc57ef5ba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4092ab72c410bc386a11f5f6d299be3fc57ef5ba/comments","author":null,"committer":null,"parents":[{"sha":"ec5d3f555a832417cc72236d5163c2f306232e64","url":"https://api.github.com/repos/apache/openjpa/commits/ec5d3f555a832417cc72236d5163c2f306232e64","html_url":"https://github.com/apache/openjpa/commit/ec5d3f555a832417cc72236d5163c2f306232e64"}]},{"sha":"307b9860f99efa6249fe43cefcbb2f7da5927b98","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwN2I5ODYwZjk5ZWZhNjI0OWZlNDNjZWZjYmIyZjdkYTU5MjdiOTg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:45:51Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:45:51Z"},"message":"OPENJPA-981 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef048ab4db3266a9109c69f59e18b06b75c8ab30","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef048ab4db3266a9109c69f59e18b06b75c8ab30"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/307b9860f99efa6249fe43cefcbb2f7da5927b98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/307b9860f99efa6249fe43cefcbb2f7da5927b98","html_url":"https://github.com/apache/openjpa/commit/307b9860f99efa6249fe43cefcbb2f7da5927b98","comments_url":"https://api.github.com/repos/apache/openjpa/commits/307b9860f99efa6249fe43cefcbb2f7da5927b98/comments","author":null,"committer":null,"parents":[{"sha":"4092ab72c410bc386a11f5f6d299be3fc57ef5ba","url":"https://api.github.com/repos/apache/openjpa/commits/4092ab72c410bc386a11f5f6d299be3fc57ef5ba","html_url":"https://github.com/apache/openjpa/commit/4092ab72c410bc386a11f5f6d299be3fc57ef5ba"}]},{"sha":"470eb431c39f35fbd56c1838280cbc05aa8ad37f","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3MGViNDMxYzM5ZjM1ZmJkNTZjMTgzODI4MGNiYzA1YWE4YWQzN2Y=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:47:41Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:47:41Z"},"message":"OPENJPA-962 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921008 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c04660830d3ab685209a3300fbd1fefaee6284f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/c04660830d3ab685209a3300fbd1fefaee6284f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/470eb431c39f35fbd56c1838280cbc05aa8ad37f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/470eb431c39f35fbd56c1838280cbc05aa8ad37f","html_url":"https://github.com/apache/openjpa/commit/470eb431c39f35fbd56c1838280cbc05aa8ad37f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/470eb431c39f35fbd56c1838280cbc05aa8ad37f/comments","author":null,"committer":null,"parents":[{"sha":"307b9860f99efa6249fe43cefcbb2f7da5927b98","url":"https://api.github.com/repos/apache/openjpa/commits/307b9860f99efa6249fe43cefcbb2f7da5927b98","html_url":"https://github.com/apache/openjpa/commit/307b9860f99efa6249fe43cefcbb2f7da5927b98"}]},{"sha":"9a9e0e7f39e1c025001582121b5d75ac51185ce0","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhOWUwZTdmMzllMWMwMjUwMDE1ODIxMjFiNWQ3NWFjNTExODVjZTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:49:06Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:49:06Z"},"message":"OPENJPA-959 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921009 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"429ce0618093e0786bda861d385a11a54c77bbac","url":"https://api.github.com/repos/apache/openjpa/git/trees/429ce0618093e0786bda861d385a11a54c77bbac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a9e0e7f39e1c025001582121b5d75ac51185ce0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a9e0e7f39e1c025001582121b5d75ac51185ce0","html_url":"https://github.com/apache/openjpa/commit/9a9e0e7f39e1c025001582121b5d75ac51185ce0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a9e0e7f39e1c025001582121b5d75ac51185ce0/comments","author":null,"committer":null,"parents":[{"sha":"470eb431c39f35fbd56c1838280cbc05aa8ad37f","url":"https://api.github.com/repos/apache/openjpa/commits/470eb431c39f35fbd56c1838280cbc05aa8ad37f","html_url":"https://github.com/apache/openjpa/commit/470eb431c39f35fbd56c1838280cbc05aa8ad37f"}]},{"sha":"1580b38bee30b04c282e224d2a19d7739cc3e174","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1ODBiMzhiZWUzMGIwNGMyODJlMjI0ZDJhMTlkNzczOWNjM2UxNzQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:50:58Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:50:58Z"},"message":"OPENJPA-845 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921010 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b17e977f55faccb0b7ae3e20837fb4d82ac2184","url":"https://api.github.com/repos/apache/openjpa/git/trees/1b17e977f55faccb0b7ae3e20837fb4d82ac2184"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1580b38bee30b04c282e224d2a19d7739cc3e174","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1580b38bee30b04c282e224d2a19d7739cc3e174","html_url":"https://github.com/apache/openjpa/commit/1580b38bee30b04c282e224d2a19d7739cc3e174","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1580b38bee30b04c282e224d2a19d7739cc3e174/comments","author":null,"committer":null,"parents":[{"sha":"9a9e0e7f39e1c025001582121b5d75ac51185ce0","url":"https://api.github.com/repos/apache/openjpa/commits/9a9e0e7f39e1c025001582121b5d75ac51185ce0","html_url":"https://github.com/apache/openjpa/commit/9a9e0e7f39e1c025001582121b5d75ac51185ce0"}]},{"sha":"92d7ab6ddd745727f0ac38dcae7652c35bdc2b50","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyZDdhYjZkZGQ3NDU3MjdmMGFjMzhkY2FlNzY1MmMzNWJkYzJiNTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:52:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:52:38Z"},"message":"OPENJPA-841 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921012 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"500948a444e063c8d2a281e0904dc3eec4c597c3","url":"https://api.github.com/repos/apache/openjpa/git/trees/500948a444e063c8d2a281e0904dc3eec4c597c3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/92d7ab6ddd745727f0ac38dcae7652c35bdc2b50","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/92d7ab6ddd745727f0ac38dcae7652c35bdc2b50","html_url":"https://github.com/apache/openjpa/commit/92d7ab6ddd745727f0ac38dcae7652c35bdc2b50","comments_url":"https://api.github.com/repos/apache/openjpa/commits/92d7ab6ddd745727f0ac38dcae7652c35bdc2b50/comments","author":null,"committer":null,"parents":[{"sha":"1580b38bee30b04c282e224d2a19d7739cc3e174","url":"https://api.github.com/repos/apache/openjpa/commits/1580b38bee30b04c282e224d2a19d7739cc3e174","html_url":"https://github.com/apache/openjpa/commit/1580b38bee30b04c282e224d2a19d7739cc3e174"}]},{"sha":"7a34bebe02cf5670074f4963af2dd3e7c1d0514f","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhMzRiZWJlMDJjZjU2NzAwNzRmNDk2M2FmMmRkM2U3YzFkMDUxNGY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:53:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:53:42Z"},"message":"OPENJPA-825 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921013 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c2fce99dbae309c7e2afd3034b65db738f75b57d","url":"https://api.github.com/repos/apache/openjpa/git/trees/c2fce99dbae309c7e2afd3034b65db738f75b57d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7a34bebe02cf5670074f4963af2dd3e7c1d0514f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7a34bebe02cf5670074f4963af2dd3e7c1d0514f","html_url":"https://github.com/apache/openjpa/commit/7a34bebe02cf5670074f4963af2dd3e7c1d0514f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7a34bebe02cf5670074f4963af2dd3e7c1d0514f/comments","author":null,"committer":null,"parents":[{"sha":"92d7ab6ddd745727f0ac38dcae7652c35bdc2b50","url":"https://api.github.com/repos/apache/openjpa/commits/92d7ab6ddd745727f0ac38dcae7652c35bdc2b50","html_url":"https://github.com/apache/openjpa/commit/92d7ab6ddd745727f0ac38dcae7652c35bdc2b50"}]},{"sha":"a70226302e20f3194ce4f2d7666fbda68c260b32","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3MDIyNjMwMmUyMGYzMTk0Y2U0ZjJkNzY2NmZiZGE2OGMyNjBiMzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:55:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T17:55:49Z"},"message":"OPENJPA-824 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921015 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5179456bb27b82fb2dd0ad6b2dd848372a72b3f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/5179456bb27b82fb2dd0ad6b2dd848372a72b3f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a70226302e20f3194ce4f2d7666fbda68c260b32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a70226302e20f3194ce4f2d7666fbda68c260b32","html_url":"https://github.com/apache/openjpa/commit/a70226302e20f3194ce4f2d7666fbda68c260b32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a70226302e20f3194ce4f2d7666fbda68c260b32/comments","author":null,"committer":null,"parents":[{"sha":"7a34bebe02cf5670074f4963af2dd3e7c1d0514f","url":"https://api.github.com/repos/apache/openjpa/commits/7a34bebe02cf5670074f4963af2dd3e7c1d0514f","html_url":"https://github.com/apache/openjpa/commit/7a34bebe02cf5670074f4963af2dd3e7c1d0514f"}]},{"sha":"cfc51799bff6344ab4aff29efff0e09fe75cc849","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmYzUxNzk5YmZmNjM0NGFiNGFmZjI5ZWZmZjBlMDlmZTc1Y2M4NDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:00:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:00:29Z"},"message":"OPENJPA-821 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921016 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"11a6849482e55ba80f97fa8eafd0462e9e3e8098","url":"https://api.github.com/repos/apache/openjpa/git/trees/11a6849482e55ba80f97fa8eafd0462e9e3e8098"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cfc51799bff6344ab4aff29efff0e09fe75cc849","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cfc51799bff6344ab4aff29efff0e09fe75cc849","html_url":"https://github.com/apache/openjpa/commit/cfc51799bff6344ab4aff29efff0e09fe75cc849","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cfc51799bff6344ab4aff29efff0e09fe75cc849/comments","author":null,"committer":null,"parents":[{"sha":"a70226302e20f3194ce4f2d7666fbda68c260b32","url":"https://api.github.com/repos/apache/openjpa/commits/a70226302e20f3194ce4f2d7666fbda68c260b32","html_url":"https://github.com/apache/openjpa/commit/a70226302e20f3194ce4f2d7666fbda68c260b32"}]},{"sha":"1104ca0fd94988a2160eae77037994d956fdf5f4","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMDRjYTBmZDk0OTg4YTIxNjBlYWU3NzAzNzk5NGQ5NTZmZGY1ZjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:01:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:01:37Z"},"message":"OPENJPA-812 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921018 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c090b27603a0f2d7d72015312910d07a0a25dd7c","url":"https://api.github.com/repos/apache/openjpa/git/trees/c090b27603a0f2d7d72015312910d07a0a25dd7c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1104ca0fd94988a2160eae77037994d956fdf5f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1104ca0fd94988a2160eae77037994d956fdf5f4","html_url":"https://github.com/apache/openjpa/commit/1104ca0fd94988a2160eae77037994d956fdf5f4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1104ca0fd94988a2160eae77037994d956fdf5f4/comments","author":null,"committer":null,"parents":[{"sha":"cfc51799bff6344ab4aff29efff0e09fe75cc849","url":"https://api.github.com/repos/apache/openjpa/commits/cfc51799bff6344ab4aff29efff0e09fe75cc849","html_url":"https://github.com/apache/openjpa/commit/cfc51799bff6344ab4aff29efff0e09fe75cc849"}]},{"sha":"a10f53323f6b0012f963ba02fcf8f602869c4acc","node_id":"MDY6Q29tbWl0MjA2MzY0OmExMGY1MzMyM2Y2YjAwMTJmOTYzYmEwMmZjZjhmNjAyODY5YzRhY2M=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:03:02Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:03:02Z"},"message":"OPENJPA-806 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921019 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b67911e1b7cf9a111783c5dc910d8b18bf9614b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b67911e1b7cf9a111783c5dc910d8b18bf9614b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a10f53323f6b0012f963ba02fcf8f602869c4acc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a10f53323f6b0012f963ba02fcf8f602869c4acc","html_url":"https://github.com/apache/openjpa/commit/a10f53323f6b0012f963ba02fcf8f602869c4acc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a10f53323f6b0012f963ba02fcf8f602869c4acc/comments","author":null,"committer":null,"parents":[{"sha":"1104ca0fd94988a2160eae77037994d956fdf5f4","url":"https://api.github.com/repos/apache/openjpa/commits/1104ca0fd94988a2160eae77037994d956fdf5f4","html_url":"https://github.com/apache/openjpa/commit/1104ca0fd94988a2160eae77037994d956fdf5f4"}]},{"sha":"5a014cc6cdfa5475f4869e2cb3b2a2046f6151af","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMDE0Y2M2Y2RmYTU0NzVmNDg2OWUyY2IzYjJhMjA0NmY2MTUxYWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:04:16Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:04:16Z"},"message":"OPENJPA-802 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921020 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4cc8c50b1514d31c8ffbf349abfccb60791626f","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4cc8c50b1514d31c8ffbf349abfccb60791626f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a014cc6cdfa5475f4869e2cb3b2a2046f6151af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a014cc6cdfa5475f4869e2cb3b2a2046f6151af","html_url":"https://github.com/apache/openjpa/commit/5a014cc6cdfa5475f4869e2cb3b2a2046f6151af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a014cc6cdfa5475f4869e2cb3b2a2046f6151af/comments","author":null,"committer":null,"parents":[{"sha":"a10f53323f6b0012f963ba02fcf8f602869c4acc","url":"https://api.github.com/repos/apache/openjpa/commits/a10f53323f6b0012f963ba02fcf8f602869c4acc","html_url":"https://github.com/apache/openjpa/commit/a10f53323f6b0012f963ba02fcf8f602869c4acc"}]},{"sha":"1623f149725b954b779415274b6a4ed1c5b9d8c3","node_id":"MDY6Q29tbWl0MjA2MzY0OjE2MjNmMTQ5NzI1Yjk1NGI3Nzk0MTUyNzRiNmE0ZWQxYzViOWQ4YzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:05:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:05:26Z"},"message":"OPENJPA-801 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921021 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6bd81923b0121e92f73f3e2681dc47aacc387d8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/6bd81923b0121e92f73f3e2681dc47aacc387d8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1623f149725b954b779415274b6a4ed1c5b9d8c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1623f149725b954b779415274b6a4ed1c5b9d8c3","html_url":"https://github.com/apache/openjpa/commit/1623f149725b954b779415274b6a4ed1c5b9d8c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1623f149725b954b779415274b6a4ed1c5b9d8c3/comments","author":null,"committer":null,"parents":[{"sha":"5a014cc6cdfa5475f4869e2cb3b2a2046f6151af","url":"https://api.github.com/repos/apache/openjpa/commits/5a014cc6cdfa5475f4869e2cb3b2a2046f6151af","html_url":"https://github.com/apache/openjpa/commit/5a014cc6cdfa5475f4869e2cb3b2a2046f6151af"}]},{"sha":"e1e697da054a9ff342b720541ee3b414109861c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxZTY5N2RhMDU0YTlmZjM0MmI3MjA1NDFlZTNiNDE0MTA5ODYxYzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:06:35Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:06:35Z"},"message":"OPENJPA-799 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921022 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dc3d54eab2cc7bd25b6f3aea6eaa947230e335b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/dc3d54eab2cc7bd25b6f3aea6eaa947230e335b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e1e697da054a9ff342b720541ee3b414109861c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e1e697da054a9ff342b720541ee3b414109861c3","html_url":"https://github.com/apache/openjpa/commit/e1e697da054a9ff342b720541ee3b414109861c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e1e697da054a9ff342b720541ee3b414109861c3/comments","author":null,"committer":null,"parents":[{"sha":"1623f149725b954b779415274b6a4ed1c5b9d8c3","url":"https://api.github.com/repos/apache/openjpa/commits/1623f149725b954b779415274b6a4ed1c5b9d8c3","html_url":"https://github.com/apache/openjpa/commit/1623f149725b954b779415274b6a4ed1c5b9d8c3"}]},{"sha":"ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmNmU5ZDhjZjE4Y2I2MzBmZDc5ZGJmMjc3YjlkYWNjZTY4OGZiOGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:16:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:16:38Z"},"message":"OPENJPA-798 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921030 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac944f6b654b40c7c2dca3bbd7700ea088182f9e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac944f6b654b40c7c2dca3bbd7700ea088182f9e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b","html_url":"https://github.com/apache/openjpa/commit/ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b/comments","author":null,"committer":null,"parents":[{"sha":"e1e697da054a9ff342b720541ee3b414109861c3","url":"https://api.github.com/repos/apache/openjpa/commits/e1e697da054a9ff342b720541ee3b414109861c3","html_url":"https://github.com/apache/openjpa/commit/e1e697da054a9ff342b720541ee3b414109861c3"}]},{"sha":"4d33d1bcc864e8e08aeca6df8c3e765955feaf8e","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMzNkMWJjYzg2NGU4ZTA4YWVjYTZkZjhjM2U3NjU5NTVmZWFmOGU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:18:07Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:18:07Z"},"message":"OPENJPA-794 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921032 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22afd84952082126e135366306571b482ea4e40b","url":"https://api.github.com/repos/apache/openjpa/git/trees/22afd84952082126e135366306571b482ea4e40b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d33d1bcc864e8e08aeca6df8c3e765955feaf8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d33d1bcc864e8e08aeca6df8c3e765955feaf8e","html_url":"https://github.com/apache/openjpa/commit/4d33d1bcc864e8e08aeca6df8c3e765955feaf8e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d33d1bcc864e8e08aeca6df8c3e765955feaf8e/comments","author":null,"committer":null,"parents":[{"sha":"ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b","url":"https://api.github.com/repos/apache/openjpa/commits/ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b","html_url":"https://github.com/apache/openjpa/commit/ef6e9d8cf18cb630fd79dbf277b9dacce688fb8b"}]},{"sha":"3067690ac6738c4defd9055523139bc1a797ba7b","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwNjc2OTBhYzY3MzhjNGRlZmQ5MDU1NTIzMTM5YmMxYTc5N2JhN2I=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:19:40Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:19:40Z"},"message":"OPENJPA-766 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921035 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ef562fc07f8638f2a06c8f52994392bf329e796","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ef562fc07f8638f2a06c8f52994392bf329e796"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3067690ac6738c4defd9055523139bc1a797ba7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3067690ac6738c4defd9055523139bc1a797ba7b","html_url":"https://github.com/apache/openjpa/commit/3067690ac6738c4defd9055523139bc1a797ba7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3067690ac6738c4defd9055523139bc1a797ba7b/comments","author":null,"committer":null,"parents":[{"sha":"4d33d1bcc864e8e08aeca6df8c3e765955feaf8e","url":"https://api.github.com/repos/apache/openjpa/commits/4d33d1bcc864e8e08aeca6df8c3e765955feaf8e","html_url":"https://github.com/apache/openjpa/commit/4d33d1bcc864e8e08aeca6df8c3e765955feaf8e"}]},{"sha":"50458736d8d3bf2e3af73112cc37761c1e6bb6e4","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwNDU4NzM2ZDhkM2JmMmUzYWY3MzExMmNjMzc3NjFjMWU2YmI2ZTQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:20:53Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:20:53Z"},"message":"OPENJPA-760 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8b82ccfb820efb91d20bb2ac809f916b442d58c9","url":"https://api.github.com/repos/apache/openjpa/git/trees/8b82ccfb820efb91d20bb2ac809f916b442d58c9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/50458736d8d3bf2e3af73112cc37761c1e6bb6e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/50458736d8d3bf2e3af73112cc37761c1e6bb6e4","html_url":"https://github.com/apache/openjpa/commit/50458736d8d3bf2e3af73112cc37761c1e6bb6e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/50458736d8d3bf2e3af73112cc37761c1e6bb6e4/comments","author":null,"committer":null,"parents":[{"sha":"3067690ac6738c4defd9055523139bc1a797ba7b","url":"https://api.github.com/repos/apache/openjpa/commits/3067690ac6738c4defd9055523139bc1a797ba7b","html_url":"https://github.com/apache/openjpa/commit/3067690ac6738c4defd9055523139bc1a797ba7b"}]},{"sha":"3fe201a5425f43b293b42a5bdd28678957582e21","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmZTIwMWE1NDI1ZjQzYjI5M2I0MmE1YmRkMjg2Nzg5NTc1ODJlMjE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:22:47Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:22:47Z"},"message":"OPENJPA-699 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"888f97cb4cecc39ea8645e25936b391bd87f96ed","url":"https://api.github.com/repos/apache/openjpa/git/trees/888f97cb4cecc39ea8645e25936b391bd87f96ed"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3fe201a5425f43b293b42a5bdd28678957582e21","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3fe201a5425f43b293b42a5bdd28678957582e21","html_url":"https://github.com/apache/openjpa/commit/3fe201a5425f43b293b42a5bdd28678957582e21","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3fe201a5425f43b293b42a5bdd28678957582e21/comments","author":null,"committer":null,"parents":[{"sha":"50458736d8d3bf2e3af73112cc37761c1e6bb6e4","url":"https://api.github.com/repos/apache/openjpa/commits/50458736d8d3bf2e3af73112cc37761c1e6bb6e4","html_url":"https://github.com/apache/openjpa/commit/50458736d8d3bf2e3af73112cc37761c1e6bb6e4"}]},{"sha":"8599f5290a6a5b9e83c275cdf8b97fce881d7072","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1OTlmNTI5MGE2YTViOWU4M2MyNzVjZGY4Yjk3ZmNlODgxZDcwNzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:23:47Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:23:47Z"},"message":"OPENJPA-677 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921039 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee39cd5d6b28bd67fc643db1b47016c5f69e48e1","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee39cd5d6b28bd67fc643db1b47016c5f69e48e1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8599f5290a6a5b9e83c275cdf8b97fce881d7072","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8599f5290a6a5b9e83c275cdf8b97fce881d7072","html_url":"https://github.com/apache/openjpa/commit/8599f5290a6a5b9e83c275cdf8b97fce881d7072","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8599f5290a6a5b9e83c275cdf8b97fce881d7072/comments","author":null,"committer":null,"parents":[{"sha":"3fe201a5425f43b293b42a5bdd28678957582e21","url":"https://api.github.com/repos/apache/openjpa/commits/3fe201a5425f43b293b42a5bdd28678957582e21","html_url":"https://github.com/apache/openjpa/commit/3fe201a5425f43b293b42a5bdd28678957582e21"}]},{"sha":"a140e82bcf4f625fc9cb13ce98568217ef0f1042","node_id":"MDY6Q29tbWl0MjA2MzY0OmExNDBlODJiY2Y0ZjYyNWZjOWNiMTNjZTk4NTY4MjE3ZWYwZjEwNDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:24:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:24:46Z"},"message":"OPENJPA-662 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921040 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dec300c22b6555638367116939c83751c21e9ec4","url":"https://api.github.com/repos/apache/openjpa/git/trees/dec300c22b6555638367116939c83751c21e9ec4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a140e82bcf4f625fc9cb13ce98568217ef0f1042","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a140e82bcf4f625fc9cb13ce98568217ef0f1042","html_url":"https://github.com/apache/openjpa/commit/a140e82bcf4f625fc9cb13ce98568217ef0f1042","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a140e82bcf4f625fc9cb13ce98568217ef0f1042/comments","author":null,"committer":null,"parents":[{"sha":"8599f5290a6a5b9e83c275cdf8b97fce881d7072","url":"https://api.github.com/repos/apache/openjpa/commits/8599f5290a6a5b9e83c275cdf8b97fce881d7072","html_url":"https://github.com/apache/openjpa/commit/8599f5290a6a5b9e83c275cdf8b97fce881d7072"}]},{"sha":"8c8cd98a655144d072b6849eb42108435a3ebed8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjOGNkOThhNjU1MTQ0ZDA3MmI2ODQ5ZWI0MjEwODQzNWEzZWJlZDg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:25:40Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T18:25:40Z"},"message":"OPENJPA-645 Show as being fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921042 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b637d6593b87da9d25e3457f9167892f8e8bea7","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b637d6593b87da9d25e3457f9167892f8e8bea7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c8cd98a655144d072b6849eb42108435a3ebed8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c8cd98a655144d072b6849eb42108435a3ebed8","html_url":"https://github.com/apache/openjpa/commit/8c8cd98a655144d072b6849eb42108435a3ebed8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c8cd98a655144d072b6849eb42108435a3ebed8/comments","author":null,"committer":null,"parents":[{"sha":"a140e82bcf4f625fc9cb13ce98568217ef0f1042","url":"https://api.github.com/repos/apache/openjpa/commits/a140e82bcf4f625fc9cb13ce98568217ef0f1042","html_url":"https://github.com/apache/openjpa/commit/a140e82bcf4f625fc9cb13ce98568217ef0f1042"}]},{"sha":"695bd9c4bf3b1e71db0da472d351a8d5806d5529","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5NWJkOWM0YmYzYjFlNzFkYjBkYTQ3MmQzNTFhOGQ1ODA2ZDU1Mjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T22:29:18Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T22:29:18Z"},"message":"OPENJPA-1550 When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.  Original patch contributed by Heath Thomann.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921174 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d02b3939f0589a42333f255deae9462c8d50ad07","url":"https://api.github.com/repos/apache/openjpa/git/trees/d02b3939f0589a42333f255deae9462c8d50ad07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/695bd9c4bf3b1e71db0da472d351a8d5806d5529","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/695bd9c4bf3b1e71db0da472d351a8d5806d5529","html_url":"https://github.com/apache/openjpa/commit/695bd9c4bf3b1e71db0da472d351a8d5806d5529","comments_url":"https://api.github.com/repos/apache/openjpa/commits/695bd9c4bf3b1e71db0da472d351a8d5806d5529/comments","author":null,"committer":null,"parents":[{"sha":"8c8cd98a655144d072b6849eb42108435a3ebed8","url":"https://api.github.com/repos/apache/openjpa/commits/8c8cd98a655144d072b6849eb42108435a3ebed8","html_url":"https://github.com/apache/openjpa/commit/8c8cd98a655144d072b6849eb42108435a3ebed8"}]},{"sha":"f82184314ec6a914ce5ca9c3b8fbfa9cab31e276","node_id":"MDY6Q29tbWl0MjA2MzY0OmY4MjE4NDMxNGVjNmE5MTRjZTVjYTljM2I4ZmJmYTljYWIzMWUyNzY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T22:34:06Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-09T22:34:06Z"},"message":"OPENJPA-1550 Fix comment\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921177 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"619e33bce57adfa51e96793bfc4c4fe86265b01e","url":"https://api.github.com/repos/apache/openjpa/git/trees/619e33bce57adfa51e96793bfc4c4fe86265b01e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f82184314ec6a914ce5ca9c3b8fbfa9cab31e276","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f82184314ec6a914ce5ca9c3b8fbfa9cab31e276","html_url":"https://github.com/apache/openjpa/commit/f82184314ec6a914ce5ca9c3b8fbfa9cab31e276","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f82184314ec6a914ce5ca9c3b8fbfa9cab31e276/comments","author":null,"committer":null,"parents":[{"sha":"695bd9c4bf3b1e71db0da472d351a8d5806d5529","url":"https://api.github.com/repos/apache/openjpa/commits/695bd9c4bf3b1e71db0da472d351a8d5806d5529","html_url":"https://github.com/apache/openjpa/commit/695bd9c4bf3b1e71db0da472d351a8d5806d5529"}]},{"sha":"137ad1bacc9ae57248e0339dd4252b3efc833fca","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzN2FkMWJhY2M5YWU1NzI0OGUwMzM5ZGQ0MjUyYjNlZmM4MzNmY2E=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-10T15:47:00Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-10T15:47:00Z"},"message":"OPENJPA-1559: Make DataCacheManager initialization thread safe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921410 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d6213dad0c8dca0cb4d18bc529f8117860736de8","url":"https://api.github.com/repos/apache/openjpa/git/trees/d6213dad0c8dca0cb4d18bc529f8117860736de8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/137ad1bacc9ae57248e0339dd4252b3efc833fca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/137ad1bacc9ae57248e0339dd4252b3efc833fca","html_url":"https://github.com/apache/openjpa/commit/137ad1bacc9ae57248e0339dd4252b3efc833fca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/137ad1bacc9ae57248e0339dd4252b3efc833fca/comments","author":null,"committer":null,"parents":[{"sha":"f82184314ec6a914ce5ca9c3b8fbfa9cab31e276","url":"https://api.github.com/repos/apache/openjpa/commits/f82184314ec6a914ce5ca9c3b8fbfa9cab31e276","html_url":"https://github.com/apache/openjpa/commit/f82184314ec6a914ce5ca9c3b8fbfa9cab31e276"}]},{"sha":"2798b0dd7304466fea04bff576188ea23ef7e05b","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3OThiMGRkNzMwNDQ2NmZlYTA0YmZmNTc2MTg4ZWEyM2VmN2UwNWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T16:29:02Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T16:29:02Z"},"message":"OPENJPA-1556: fix @Strategy inside Embeddable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921436 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47aec75e0b31d2db8c684fd320f15f7137ed045d","url":"https://api.github.com/repos/apache/openjpa/git/trees/47aec75e0b31d2db8c684fd320f15f7137ed045d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2798b0dd7304466fea04bff576188ea23ef7e05b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2798b0dd7304466fea04bff576188ea23ef7e05b","html_url":"https://github.com/apache/openjpa/commit/2798b0dd7304466fea04bff576188ea23ef7e05b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2798b0dd7304466fea04bff576188ea23ef7e05b/comments","author":null,"committer":null,"parents":[{"sha":"137ad1bacc9ae57248e0339dd4252b3efc833fca","url":"https://api.github.com/repos/apache/openjpa/commits/137ad1bacc9ae57248e0339dd4252b3efc833fca","html_url":"https://github.com/apache/openjpa/commit/137ad1bacc9ae57248e0339dd4252b3efc833fca"}]},{"sha":"f69da242687ffaeec7840c587f6f658e2f3cb283","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2OWRhMjQyNjg3ZmZhZWVjNzg0MGM1ODdmNmY2NThlMmYzY2IyODM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T20:05:09Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T20:05:09Z"},"message":"OPENJPA-1505: allow duplicate entity listeners to be configurable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921538 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41593fb9e3aedc975eaeb24ca57de2667668556d","url":"https://api.github.com/repos/apache/openjpa/git/trees/41593fb9e3aedc975eaeb24ca57de2667668556d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f69da242687ffaeec7840c587f6f658e2f3cb283","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f69da242687ffaeec7840c587f6f658e2f3cb283","html_url":"https://github.com/apache/openjpa/commit/f69da242687ffaeec7840c587f6f658e2f3cb283","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f69da242687ffaeec7840c587f6f658e2f3cb283/comments","author":null,"committer":null,"parents":[{"sha":"2798b0dd7304466fea04bff576188ea23ef7e05b","url":"https://api.github.com/repos/apache/openjpa/commits/2798b0dd7304466fea04bff576188ea23ef7e05b","html_url":"https://github.com/apache/openjpa/commit/2798b0dd7304466fea04bff576188ea23ef7e05b"}]},{"sha":"6234dbddfcb8b17ed3f50221517d5c3823097a5e","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyMzRkYmRkZmNiOGIxN2VkM2Y1MDIyMTUxN2Q1YzM4MjMwOTdhNWU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-10T20:22:57Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-10T20:22:57Z"},"message":"OPENJPA-1560 Committing JDBC escape sequence tests contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921550 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13df006a49719c377d03c801ceab82d5b32cade5","url":"https://api.github.com/repos/apache/openjpa/git/trees/13df006a49719c377d03c801ceab82d5b32cade5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6234dbddfcb8b17ed3f50221517d5c3823097a5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6234dbddfcb8b17ed3f50221517d5c3823097a5e","html_url":"https://github.com/apache/openjpa/commit/6234dbddfcb8b17ed3f50221517d5c3823097a5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6234dbddfcb8b17ed3f50221517d5c3823097a5e/comments","author":null,"committer":null,"parents":[{"sha":"f69da242687ffaeec7840c587f6f658e2f3cb283","url":"https://api.github.com/repos/apache/openjpa/commits/f69da242687ffaeec7840c587f6f658e2f3cb283","html_url":"https://github.com/apache/openjpa/commit/f69da242687ffaeec7840c587f6f658e2f3cb283"}]},{"sha":"dd210a2831e005f3f51ec85b00ae56699ecde27a","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkMjEwYTI4MzFlMDA1ZjNmNTFlYzg1YjAwYWU1NjY5OWVjZGUyN2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-10T23:19:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-10T23:19:25Z"},"message":"OPENJPA-1558:\nCheck whether the result type is in the same entity hierarchy before using discriminator value when loading a relationship.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921620 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9fea33ac10f32d5efb5bc86d6ace9acfe811993f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9fea33ac10f32d5efb5bc86d6ace9acfe811993f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a","html_url":"https://github.com/apache/openjpa/commit/dd210a2831e005f3f51ec85b00ae56699ecde27a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6234dbddfcb8b17ed3f50221517d5c3823097a5e","url":"https://api.github.com/repos/apache/openjpa/commits/6234dbddfcb8b17ed3f50221517d5c3823097a5e","html_url":"https://github.com/apache/openjpa/commit/6234dbddfcb8b17ed3f50221517d5c3823097a5e"}]},{"sha":"0c65e3c409fe83da4d6c91c6512307c2206047d8","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjNjVlM2M0MDlmZTgzZGE0ZDZjOTFjNjUxMjMwN2MyMjA2MDQ3ZDg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-11T14:25:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-11T14:25:49Z"},"message":"OPENJPA-680 Show as fixed in 2.0.0-M1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921868 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"03770d36f2fad14efa234f0ec9d7646ee77b0e32","url":"https://api.github.com/repos/apache/openjpa/git/trees/03770d36f2fad14efa234f0ec9d7646ee77b0e32"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c65e3c409fe83da4d6c91c6512307c2206047d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c65e3c409fe83da4d6c91c6512307c2206047d8","html_url":"https://github.com/apache/openjpa/commit/0c65e3c409fe83da4d6c91c6512307c2206047d8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c65e3c409fe83da4d6c91c6512307c2206047d8/comments","author":null,"committer":null,"parents":[{"sha":"dd210a2831e005f3f51ec85b00ae56699ecde27a","url":"https://api.github.com/repos/apache/openjpa/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a","html_url":"https://github.com/apache/openjpa/commit/dd210a2831e005f3f51ec85b00ae56699ecde27a"}]},{"sha":"f0f89c7e0ed53647ae08b425f10e68536d4ba0ab","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwZjg5YzdlMGVkNTM2NDdhZTA4YjQyNWYxMGU2ODUzNmQ0YmEwYWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T02:25:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T02:25:52Z"},"message":"OPENJPA-1561: Cache criteria query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922119 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22d6cf689ddcabf5197977b9a3885edd6da6b954","url":"https://api.github.com/repos/apache/openjpa/git/trees/22d6cf689ddcabf5197977b9a3885edd6da6b954"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f0f89c7e0ed53647ae08b425f10e68536d4ba0ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f0f89c7e0ed53647ae08b425f10e68536d4ba0ab","html_url":"https://github.com/apache/openjpa/commit/f0f89c7e0ed53647ae08b425f10e68536d4ba0ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f0f89c7e0ed53647ae08b425f10e68536d4ba0ab/comments","author":null,"committer":null,"parents":[{"sha":"0c65e3c409fe83da4d6c91c6512307c2206047d8","url":"https://api.github.com/repos/apache/openjpa/commits/0c65e3c409fe83da4d6c91c6512307c2206047d8","html_url":"https://github.com/apache/openjpa/commit/0c65e3c409fe83da4d6c91c6512307c2206047d8"}]},{"sha":"572d5934274a7f8961e12e3372f5f10f8cdff9d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjU3MmQ1OTM0Mjc0YTdmODk2MWUxMmUzMzcyZjVmMTBmOGNkZmY5ZDU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T02:35:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T02:35:03Z"},"message":"OPENJPA-1561: Cache criteria query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c04f454cb83d7eddf485accab862004df58da09","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c04f454cb83d7eddf485accab862004df58da09"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/572d5934274a7f8961e12e3372f5f10f8cdff9d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/572d5934274a7f8961e12e3372f5f10f8cdff9d5","html_url":"https://github.com/apache/openjpa/commit/572d5934274a7f8961e12e3372f5f10f8cdff9d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/572d5934274a7f8961e12e3372f5f10f8cdff9d5/comments","author":null,"committer":null,"parents":[{"sha":"f0f89c7e0ed53647ae08b425f10e68536d4ba0ab","url":"https://api.github.com/repos/apache/openjpa/commits/f0f89c7e0ed53647ae08b425f10e68536d4ba0ab","html_url":"https://github.com/apache/openjpa/commit/f0f89c7e0ed53647ae08b425f10e68536d4ba0ab"}]},{"sha":"4be5a5a194e541059709c9efcdd07c26990ab673","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZTVhNWExOTRlNTQxMDU5NzA5YzllZmNkZDA3YzI2OTkwYWI2NzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:08:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:08:16Z"},"message":"OPENJPA-1565: Raise correct time out exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922288 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fae1ab27c00bf99b19a08103855e6bc3a347ec83","url":"https://api.github.com/repos/apache/openjpa/git/trees/fae1ab27c00bf99b19a08103855e6bc3a347ec83"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4be5a5a194e541059709c9efcdd07c26990ab673","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4be5a5a194e541059709c9efcdd07c26990ab673","html_url":"https://github.com/apache/openjpa/commit/4be5a5a194e541059709c9efcdd07c26990ab673","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4be5a5a194e541059709c9efcdd07c26990ab673/comments","author":null,"committer":null,"parents":[{"sha":"572d5934274a7f8961e12e3372f5f10f8cdff9d5","url":"https://api.github.com/repos/apache/openjpa/commits/572d5934274a7f8961e12e3372f5f10f8cdff9d5","html_url":"https://github.com/apache/openjpa/commit/572d5934274a7f8961e12e3372f5f10f8cdff9d5"}]},{"sha":"f04031edc128146bb7cfa52e072affb904930a43","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwNDAzMWVkYzEyODE0NmJiN2NmYTUyZTA3MmFmZmI5MDQ5MzBhNDM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:17:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:17:58Z"},"message":"OPENJPA-1565: Raise correct timeout exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922290 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ab306c46af6bf5fc60f7ad73d30f6f79ce3383a","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ab306c46af6bf5fc60f7ad73d30f6f79ce3383a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f04031edc128146bb7cfa52e072affb904930a43","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f04031edc128146bb7cfa52e072affb904930a43","html_url":"https://github.com/apache/openjpa/commit/f04031edc128146bb7cfa52e072affb904930a43","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f04031edc128146bb7cfa52e072affb904930a43/comments","author":null,"committer":null,"parents":[{"sha":"4be5a5a194e541059709c9efcdd07c26990ab673","url":"https://api.github.com/repos/apache/openjpa/commits/4be5a5a194e541059709c9efcdd07c26990ab673","html_url":"https://github.com/apache/openjpa/commit/4be5a5a194e541059709c9efcdd07c26990ab673"}]},{"sha":"732ff354b38ef9335d4ccffc40eedc1a909059bd","node_id":"MDY6Q29tbWl0MjA2MzY0OjczMmZmMzU0YjM4ZWY5MzM1ZDRjY2ZmYzQwZWVkYzFhOTA5MDU5YmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T16:14:47Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T16:14:47Z"},"message":"OPENJPA-1566: Allow access to keys of the statistics.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922311 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"78fd47834a0cc16119b78988ae3d8b2a5f1fd625","url":"https://api.github.com/repos/apache/openjpa/git/trees/78fd47834a0cc16119b78988ae3d8b2a5f1fd625"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/732ff354b38ef9335d4ccffc40eedc1a909059bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/732ff354b38ef9335d4ccffc40eedc1a909059bd","html_url":"https://github.com/apache/openjpa/commit/732ff354b38ef9335d4ccffc40eedc1a909059bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/732ff354b38ef9335d4ccffc40eedc1a909059bd/comments","author":null,"committer":null,"parents":[{"sha":"f04031edc128146bb7cfa52e072affb904930a43","url":"https://api.github.com/repos/apache/openjpa/commits/f04031edc128146bb7cfa52e072affb904930a43","html_url":"https://github.com/apache/openjpa/commit/f04031edc128146bb7cfa52e072affb904930a43"}]},{"sha":"5fec1aaaa6f37977e631aa1382892a2d1de62d36","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmZWMxYWFhYTZmMzc5NzdlNjMxYWExMzgyODkyYTJkMWRlNjJkMzY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T16:15:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T16:15:31Z"},"message":"Print unenhanced classes one per line for better readability.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922312 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a7be3c444ad792bf7ee60046ec8d0be73913df1","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a7be3c444ad792bf7ee60046ec8d0be73913df1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5fec1aaaa6f37977e631aa1382892a2d1de62d36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5fec1aaaa6f37977e631aa1382892a2d1de62d36","html_url":"https://github.com/apache/openjpa/commit/5fec1aaaa6f37977e631aa1382892a2d1de62d36","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5fec1aaaa6f37977e631aa1382892a2d1de62d36/comments","author":null,"committer":null,"parents":[{"sha":"732ff354b38ef9335d4ccffc40eedc1a909059bd","url":"https://api.github.com/repos/apache/openjpa/commits/732ff354b38ef9335d4ccffc40eedc1a909059bd","html_url":"https://github.com/apache/openjpa/commit/732ff354b38ef9335d4ccffc40eedc1a909059bd"}]},{"sha":"36b9628948cb746696204447d467105a3a67f0bd","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2Yjk2Mjg5NDhjYjc0NjY5NjIwNDQ0N2Q0NjcxMDVhM2E2N2YwYmQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-12T17:14:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-12T17:14:03Z"},"message":"only create source jars for individual artifacts when -Prelease is used.  the maven-shade-plugin will still create source jars in all build profiles for openjpa and openjpa-all jars.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922351 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6c08d4c3b7b38a5be247a49628d054bd7a6a9c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/a6c08d4c3b7b38a5be247a49628d054bd7a6a9c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/36b9628948cb746696204447d467105a3a67f0bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/36b9628948cb746696204447d467105a3a67f0bd","html_url":"https://github.com/apache/openjpa/commit/36b9628948cb746696204447d467105a3a67f0bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/36b9628948cb746696204447d467105a3a67f0bd/comments","author":null,"committer":null,"parents":[{"sha":"5fec1aaaa6f37977e631aa1382892a2d1de62d36","url":"https://api.github.com/repos/apache/openjpa/commits/5fec1aaaa6f37977e631aa1382892a2d1de62d36","html_url":"https://github.com/apache/openjpa/commit/5fec1aaaa6f37977e631aa1382892a2d1de62d36"}]},{"sha":"6503eabef5327eaf3c20965d75ad086c3c4480dd","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1MDNlYWJlZjUzMjdlYWYzYzIwOTY1ZDc1YWQwODZjM2M0NDgwZGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-12T17:17:23Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-12T17:17:23Z"},"message":"OPENJPA-1550: When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.\navoid NullPointerException for JDBC provider using PureQUery APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922355 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a2ea46a66fdb221bf671e6a4cb00ed8a0b0d1f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/1a2ea46a66fdb221bf671e6a4cb00ed8a0b0d1f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6503eabef5327eaf3c20965d75ad086c3c4480dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6503eabef5327eaf3c20965d75ad086c3c4480dd","html_url":"https://github.com/apache/openjpa/commit/6503eabef5327eaf3c20965d75ad086c3c4480dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6503eabef5327eaf3c20965d75ad086c3c4480dd/comments","author":null,"committer":null,"parents":[{"sha":"36b9628948cb746696204447d467105a3a67f0bd","url":"https://api.github.com/repos/apache/openjpa/commits/36b9628948cb746696204447d467105a3a67f0bd","html_url":"https://github.com/apache/openjpa/commit/36b9628948cb746696204447d467105a3a67f0bd"}]},{"sha":"7c748e62df7235c4030e9b936759b0108ddc5c81","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjNzQ4ZTYyZGY3MjM1YzQwMzBlOWI5MzY3NTliMDEwOGRkYzVjODE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-12T19:05:30Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-12T19:05:30Z"},"message":"OPENJPA-1491 When used in an OSGi environment with Apache Aries, the org.apache.openjpa.kernel.Bootstrap should use the OpenJPA bundle classloader instead of the application bundle classloader to instatiate a BrokerFactory.  Also moved our BundleActivator from the openjpa module to openjpa-persistence module with a BundleUtils wrapper to remove direct OSGi class refs, so the BundleContext in it could be accessed by PersistenceProviderImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922397 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08f448087f141e5f7db17907742da02b2bab0e64","url":"https://api.github.com/repos/apache/openjpa/git/trees/08f448087f141e5f7db17907742da02b2bab0e64"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7c748e62df7235c4030e9b936759b0108ddc5c81","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7c748e62df7235c4030e9b936759b0108ddc5c81","html_url":"https://github.com/apache/openjpa/commit/7c748e62df7235c4030e9b936759b0108ddc5c81","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7c748e62df7235c4030e9b936759b0108ddc5c81/comments","author":null,"committer":null,"parents":[{"sha":"6503eabef5327eaf3c20965d75ad086c3c4480dd","url":"https://api.github.com/repos/apache/openjpa/commits/6503eabef5327eaf3c20965d75ad086c3c4480dd","html_url":"https://github.com/apache/openjpa/commit/6503eabef5327eaf3c20965d75ad086c3c4480dd"}]},{"sha":"e2df6f49e485380d9b462b486242205fec61a052","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyZGY2ZjQ5ZTQ4NTM4MGQ5YjQ2MmI0ODYyNDIyMDVmZWM2MWEwNTI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-12T19:18:07Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-12T19:18:07Z"},"message":"OPENJPA-1568: Make createConnectionFactory() in JDBCConfigurationImpl public\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922399 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57466d5736cdf9d45551db917dc0b2cb369a0e03","url":"https://api.github.com/repos/apache/openjpa/git/trees/57466d5736cdf9d45551db917dc0b2cb369a0e03"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e2df6f49e485380d9b462b486242205fec61a052","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e2df6f49e485380d9b462b486242205fec61a052","html_url":"https://github.com/apache/openjpa/commit/e2df6f49e485380d9b462b486242205fec61a052","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e2df6f49e485380d9b462b486242205fec61a052/comments","author":null,"committer":null,"parents":[{"sha":"7c748e62df7235c4030e9b936759b0108ddc5c81","url":"https://api.github.com/repos/apache/openjpa/commits/7c748e62df7235c4030e9b936759b0108ddc5c81","html_url":"https://github.com/apache/openjpa/commit/7c748e62df7235c4030e9b936759b0108ddc5c81"}]},{"sha":"8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmNDViNWJmMGIyMGMxZTM3MTg3NGRlZmQwYjljMjBiNmMwZjU4ZmE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-12T22:31:45Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-12T22:31:45Z"},"message":"OPENJPA-1568: Make createConnectionFactory() in JDBCConfigurationImpl public\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922441 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d465cfabbab03b6c04060dbf3ddd49309b16d7a","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d465cfabbab03b6c04060dbf3ddd49309b16d7a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa","html_url":"https://github.com/apache/openjpa/commit/8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa/comments","author":null,"committer":null,"parents":[{"sha":"e2df6f49e485380d9b462b486242205fec61a052","url":"https://api.github.com/repos/apache/openjpa/commits/e2df6f49e485380d9b462b486242205fec61a052","html_url":"https://github.com/apache/openjpa/commit/e2df6f49e485380d9b462b486242205fec61a052"}]},{"sha":"d69fb9a65af2ef739981033a7e755f6b6bde7e2f","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ2OWZiOWE2NWFmMmVmNzM5OTgxMDMzYTdlNzU1ZjZiNmJkZTdlMmY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-13T23:14:35Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-13T23:14:35Z"},"message":"OPENJPA-1570: fix @Strategy inside MappedSuper class\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922688 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0343c3d4103d640cedd8c91ae3c9d93f13781fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/b0343c3d4103d640cedd8c91ae3c9d93f13781fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d69fb9a65af2ef739981033a7e755f6b6bde7e2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d69fb9a65af2ef739981033a7e755f6b6bde7e2f","html_url":"https://github.com/apache/openjpa/commit/d69fb9a65af2ef739981033a7e755f6b6bde7e2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d69fb9a65af2ef739981033a7e755f6b6bde7e2f/comments","author":null,"committer":null,"parents":[{"sha":"8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa","url":"https://api.github.com/repos/apache/openjpa/commits/8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa","html_url":"https://github.com/apache/openjpa/commit/8f45b5bf0b20c1e371874defd0b9c20b6c0f58fa"}]},{"sha":"8f236c2aeb8ccdda45cb28505c81fa311c96541e","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmMjM2YzJhZWI4Y2NkZGE0NWNiMjg1MDVjODFmYTMxMWM5NjU0MWU=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-14T19:41:06Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-14T19:41:06Z"},"message":"OPENJPA-1510: Correct broken links in Configuring Savepoints section, remove OracleSavepointManager description since it does not exist in OpenJPA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922933 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2ab84cac23b735dcfb7f4a7b1731b4c2fa02413","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2ab84cac23b735dcfb7f4a7b1731b4c2fa02413"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f236c2aeb8ccdda45cb28505c81fa311c96541e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f236c2aeb8ccdda45cb28505c81fa311c96541e","html_url":"https://github.com/apache/openjpa/commit/8f236c2aeb8ccdda45cb28505c81fa311c96541e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f236c2aeb8ccdda45cb28505c81fa311c96541e/comments","author":null,"committer":null,"parents":[{"sha":"d69fb9a65af2ef739981033a7e755f6b6bde7e2f","url":"https://api.github.com/repos/apache/openjpa/commits/d69fb9a65af2ef739981033a7e755f6b6bde7e2f","html_url":"https://github.com/apache/openjpa/commit/d69fb9a65af2ef739981033a7e755f6b6bde7e2f"}]},{"sha":"f05db496429bd707bca88ba53758c7028913da90","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwNWRiNDk2NDI5YmQ3MDdiY2E4OGJhNTM3NThjNzAyODkxM2RhOTA=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-14T20:24:36Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-14T20:24:36Z"},"message":"OPENJPA-1510: Correct broken links, remove link to non-existing locally mirrored JPA spec.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922946 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f761b69d0ca1a0de7d61de3f36e666286b8f803","url":"https://api.github.com/repos/apache/openjpa/git/trees/2f761b69d0ca1a0de7d61de3f36e666286b8f803"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f05db496429bd707bca88ba53758c7028913da90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f05db496429bd707bca88ba53758c7028913da90","html_url":"https://github.com/apache/openjpa/commit/f05db496429bd707bca88ba53758c7028913da90","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f05db496429bd707bca88ba53758c7028913da90/comments","author":null,"committer":null,"parents":[{"sha":"8f236c2aeb8ccdda45cb28505c81fa311c96541e","url":"https://api.github.com/repos/apache/openjpa/commits/8f236c2aeb8ccdda45cb28505c81fa311c96541e","html_url":"https://github.com/apache/openjpa/commit/8f236c2aeb8ccdda45cb28505c81fa311c96541e"}]},{"sha":"971c1fb5d42ce68ad69ae62498925d7ff5f99b2a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3MWMxZmI1ZDQyY2U2OGFkNjlhZTYyNDk4OTI1ZDdmZjVmOTliMmE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-15T13:42:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-15T13:42:26Z"},"message":"OPENJPA-991 Remove from release notes as being fixed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923222 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89abf90f7ad137f38f38e50fc316e95341beae9b","url":"https://api.github.com/repos/apache/openjpa/git/trees/89abf90f7ad137f38f38e50fc316e95341beae9b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/971c1fb5d42ce68ad69ae62498925d7ff5f99b2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/971c1fb5d42ce68ad69ae62498925d7ff5f99b2a","html_url":"https://github.com/apache/openjpa/commit/971c1fb5d42ce68ad69ae62498925d7ff5f99b2a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/971c1fb5d42ce68ad69ae62498925d7ff5f99b2a/comments","author":null,"committer":null,"parents":[{"sha":"f05db496429bd707bca88ba53758c7028913da90","url":"https://api.github.com/repos/apache/openjpa/commits/f05db496429bd707bca88ba53758c7028913da90","html_url":"https://github.com/apache/openjpa/commit/f05db496429bd707bca88ba53758c7028913da90"}]},{"sha":"b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5ZDgzYWUzM2E5YTdkMGVmNTc4MDA0NWQ2M2ZlMDhiY2ZkNjdkMjk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-15T16:21:52Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-15T16:21:52Z"},"message":"Add clarification contributed by Thomas Rowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f249a62d1c0067fa2c5a250e939c18c6feb5e6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2f249a62d1c0067fa2c5a250e939c18c6feb5e6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","html_url":"https://github.com/apache/openjpa/commit/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29/comments","author":null,"committer":null,"parents":[{"sha":"971c1fb5d42ce68ad69ae62498925d7ff5f99b2a","url":"https://api.github.com/repos/apache/openjpa/commits/971c1fb5d42ce68ad69ae62498925d7ff5f99b2a","html_url":"https://github.com/apache/openjpa/commit/971c1fb5d42ce68ad69ae62498925d7ff5f99b2a"}]},{"sha":"d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxYjBkMGZkNmQzNzZhMzgxYTBlN2I2ZmQwZjg3YjUyMjJhODZjNjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:07:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:07:14Z"},"message":"OPENJPA-1575: Detect parametrized fields in a query expression to exclude queries from cache that use parameters for externized fields. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923441 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28775f8d3a7cf7b75ce7332384473fa9fe2e4e75","url":"https://api.github.com/repos/apache/openjpa/git/trees/28775f8d3a7cf7b75ce7332384473fa9fe2e4e75"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","html_url":"https://github.com/apache/openjpa/commit/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/comments","author":null,"committer":null,"parents":[{"sha":"b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","url":"https://api.github.com/repos/apache/openjpa/commits/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","html_url":"https://github.com/apache/openjpa/commit/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29"}]},{"sha":"efa6e5428e6354c83825cb038dd1cf9ecfd8364f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmYTZlNTQyOGU2MzU0YzgzODI1Y2IwMzhkZDFjZjllY2ZkODM2NGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:08:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:08:16Z"},"message":"OPENJPA-1575: Tests to detect parameterized fields in a query expression to exclude queries from cache that use parameters for externalized fields. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"787a49cce157d0a680f119e959c158dec8604d90","url":"https://api.github.com/repos/apache/openjpa/git/trees/787a49cce157d0a680f119e959c158dec8604d90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","html_url":"https://github.com/apache/openjpa/commit/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/comments","author":null,"committer":null,"parents":[{"sha":"d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","url":"https://api.github.com/repos/apache/openjpa/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","html_url":"https://github.com/apache/openjpa/commit/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69"}]},{"sha":"9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMDliYzM3MjhlMWY1N2ViYjI3ZjdjOTk5NWVhMmIzYjFjNjRhNzk=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-15T22:24:53Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-15T22:24:53Z"},"message":"OPENJPA-1510: Correct broken and outdated links, make 'Ant' consistent in case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e311fe0436e7783e1024c54a61d255a676fb8e43","url":"https://api.github.com/repos/apache/openjpa/git/trees/e311fe0436e7783e1024c54a61d255a676fb8e43"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","html_url":"https://github.com/apache/openjpa/commit/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79/comments","author":null,"committer":null,"parents":[{"sha":"efa6e5428e6354c83825cb038dd1cf9ecfd8364f","url":"https://api.github.com/repos/apache/openjpa/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","html_url":"https://github.com/apache/openjpa/commit/efa6e5428e6354c83825cb038dd1cf9ecfd8364f"}]},{"sha":"a5ca9aae2d5160fb463bd7a619e999732d222f31","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1Y2E5YWFlMmQ1MTYwZmI0NjNiZDdhNjE5ZTk5OTczMmQyMjJmMzE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-16T06:11:18Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-16T06:11:18Z"},"message":"OPENJPA-1573: Incorrect SQL for HAVING = entity variable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923589 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"257e5c1ed1c9e53e048f18b92231c0a47da65a4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/257e5c1ed1c9e53e048f18b92231c0a47da65a4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31","html_url":"https://github.com/apache/openjpa/commit/a5ca9aae2d5160fb463bd7a619e999732d222f31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31/comments","author":null,"committer":null,"parents":[{"sha":"9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","url":"https://api.github.com/repos/apache/openjpa/commits/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","html_url":"https://github.com/apache/openjpa/commit/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79"}]},{"sha":"b85c4e30fa0b03bc6c717e0370917662d9d64b5d","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4NWM0ZTMwZmEwYjAzYmM2YzcxN2UwMzcwOTE3NjYyZDlkNjRiNWQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T14:06:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T14:06:38Z"},"message":"OPENJPA-1411 Include DayTrader test case in OpenJPA.  Note: this is not pulled into the normal builds, as the openjpa-maven-plugin-1.1-SNAPSHOT has not been released.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923745 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d75c0359301a52914091db3e25206e8063877650","url":"https://api.github.com/repos/apache/openjpa/git/trees/d75c0359301a52914091db3e25206e8063877650"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","html_url":"https://github.com/apache/openjpa/commit/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/comments","author":null,"committer":null,"parents":[{"sha":"a5ca9aae2d5160fb463bd7a619e999732d222f31","url":"https://api.github.com/repos/apache/openjpa/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31","html_url":"https://github.com/apache/openjpa/commit/a5ca9aae2d5160fb463bd7a619e999732d222f31"}]},{"sha":"8a1e0307f242cc5b035db140c36ac134008a8aab","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhMWUwMzA3ZjI0MmNjNWIwMzVkYjE0MGMzNmFjMTM0MDA4YThhYWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T14:15:45Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T14:15:45Z"},"message":"OPENJPA-935 Show as being fixed in 2.0.0-M2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923748 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"078a1d846063e4ba8beb17fa6e6782a2c0cb746e","url":"https://api.github.com/repos/apache/openjpa/git/trees/078a1d846063e4ba8beb17fa6e6782a2c0cb746e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a1e0307f242cc5b035db140c36ac134008a8aab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a1e0307f242cc5b035db140c36ac134008a8aab","html_url":"https://github.com/apache/openjpa/commit/8a1e0307f242cc5b035db140c36ac134008a8aab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a1e0307f242cc5b035db140c36ac134008a8aab/comments","author":null,"committer":null,"parents":[{"sha":"b85c4e30fa0b03bc6c717e0370917662d9d64b5d","url":"https://api.github.com/repos/apache/openjpa/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","html_url":"https://github.com/apache/openjpa/commit/b85c4e30fa0b03bc6c717e0370917662d9d64b5d"}]},{"sha":"845f9b50187f2a14ceb3826561945edb8742988e","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0NWY5YjUwMTg3ZjJhMTRjZWIzODI2NTYxOTQ1ZWRiODc0Mjk4OGU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T14:30:53Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T14:30:53Z"},"message":"OPENJPA-1578: Set CacheMode properties properly\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923755 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f66878106a4732fa242293ba88a64229bcebcff","url":"https://api.github.com/repos/apache/openjpa/git/trees/3f66878106a4732fa242293ba88a64229bcebcff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/845f9b50187f2a14ceb3826561945edb8742988e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/845f9b50187f2a14ceb3826561945edb8742988e","html_url":"https://github.com/apache/openjpa/commit/845f9b50187f2a14ceb3826561945edb8742988e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/845f9b50187f2a14ceb3826561945edb8742988e/comments","author":null,"committer":null,"parents":[{"sha":"8a1e0307f242cc5b035db140c36ac134008a8aab","url":"https://api.github.com/repos/apache/openjpa/commits/8a1e0307f242cc5b035db140c36ac134008a8aab","html_url":"https://github.com/apache/openjpa/commit/8a1e0307f242cc5b035db140c36ac134008a8aab"}]},{"sha":"6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkODdiYmRiYjBkMzU3MWNmMGUyOGY3NzI3M2IxYWFiMGNjNzlhMmQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-16T16:32:14Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-16T16:32:14Z"},"message":"OPENJPA-1562 Committing code and test updates contributed by Dianne Richards.  Refresh after remove was not throwing exception dictated by spec.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923849 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"105289a063ba55faae078c301d41b2acb0b13571","url":"https://api.github.com/repos/apache/openjpa/git/trees/105289a063ba55faae078c301d41b2acb0b13571"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","html_url":"https://github.com/apache/openjpa/commit/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/comments","author":null,"committer":null,"parents":[{"sha":"845f9b50187f2a14ceb3826561945edb8742988e","url":"https://api.github.com/repos/apache/openjpa/commits/845f9b50187f2a14ceb3826561945edb8742988e","html_url":"https://github.com/apache/openjpa/commit/845f9b50187f2a14ceb3826561945edb8742988e"}]},{"sha":"f3b00d780109213bcef19166ae5d1894cab84c9f","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzYjAwZDc4MDEwOTIxM2JjZWYxOTE2NmFlNWQxODk0Y2FiODRjOWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T16:47:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T16:47:15Z"},"message":"OPENJPA-1565: Raise correct Query/LockTimeout exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923864 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec3ff0c5ebca78776e1af631da2ba00d6a1038ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec3ff0c5ebca78776e1af631da2ba00d6a1038ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f3b00d780109213bcef19166ae5d1894cab84c9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f3b00d780109213bcef19166ae5d1894cab84c9f","html_url":"https://github.com/apache/openjpa/commit/f3b00d780109213bcef19166ae5d1894cab84c9f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f3b00d780109213bcef19166ae5d1894cab84c9f/comments","author":null,"committer":null,"parents":[{"sha":"6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","url":"https://api.github.com/repos/apache/openjpa/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","html_url":"https://github.com/apache/openjpa/commit/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d"}]},{"sha":"a99ea6218f5898e37e8a6965f812976bd3362b7e","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5OWVhNjIxOGY1ODk4ZTM3ZThhNjk2NWY4MTI5NzZiZDMzNjJiN2U=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T17:09:45Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T17:09:45Z"},"message":"OPENJPA-1097 Revert previous DetachManager and TestProxyCollection changes in r919696.  New code changes Proxies to always remove  classes on serialization if the entity is detachable and one of our Proxy subclasses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5a9fcb66d6ee4e253a478625fa7f4197eae523f","url":"https://api.github.com/repos/apache/openjpa/git/trees/a5a9fcb66d6ee4e253a478625fa7f4197eae523f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e","html_url":"https://github.com/apache/openjpa/commit/a99ea6218f5898e37e8a6965f812976bd3362b7e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e/comments","author":null,"committer":null,"parents":[{"sha":"f3b00d780109213bcef19166ae5d1894cab84c9f","url":"https://api.github.com/repos/apache/openjpa/commits/f3b00d780109213bcef19166ae5d1894cab84c9f","html_url":"https://github.com/apache/openjpa/commit/f3b00d780109213bcef19166ae5d1894cab84c9f"}]},{"sha":"992ba73a7156efe8349639adcec7e714b359b99a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5MmJhNzNhNzE1NmVmZTgzNDk2MzlhZGNlYzdlNzE0YjM1OWI5OWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T18:39:02Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T18:39:02Z"},"message":"OPENJPA-1565: Raise correct Query/LockTimeout exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923928 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f96b17c830b52dfb8eb15f22e9f61f2f37d99417","url":"https://api.github.com/repos/apache/openjpa/git/trees/f96b17c830b52dfb8eb15f22e9f61f2f37d99417"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/992ba73a7156efe8349639adcec7e714b359b99a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/992ba73a7156efe8349639adcec7e714b359b99a","html_url":"https://github.com/apache/openjpa/commit/992ba73a7156efe8349639adcec7e714b359b99a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/992ba73a7156efe8349639adcec7e714b359b99a/comments","author":null,"committer":null,"parents":[{"sha":"a99ea6218f5898e37e8a6965f812976bd3362b7e","url":"https://api.github.com/repos/apache/openjpa/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e","html_url":"https://github.com/apache/openjpa/commit/a99ea6218f5898e37e8a6965f812976bd3362b7e"}]},{"sha":"c618b4692d777a239bbf5e3788175b3f9acf0e02","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2MThiNDY5MmQ3NzdhMjM5YmJmNWUzNzg4MTc1YjNmOWFjZjBlMDI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-16T18:44:11Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-16T18:44:11Z"},"message":"OPENJPA-1557: \nUse openjpa.Log to control build logging instead of openjpa.loglevel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923929 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46b591f9c2dcf3d98a0244a634dab86676919a5b","url":"https://api.github.com/repos/apache/openjpa/git/trees/46b591f9c2dcf3d98a0244a634dab86676919a5b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c618b4692d777a239bbf5e3788175b3f9acf0e02","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c618b4692d777a239bbf5e3788175b3f9acf0e02","html_url":"https://github.com/apache/openjpa/commit/c618b4692d777a239bbf5e3788175b3f9acf0e02","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c618b4692d777a239bbf5e3788175b3f9acf0e02/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"992ba73a7156efe8349639adcec7e714b359b99a","url":"https://api.github.com/repos/apache/openjpa/commits/992ba73a7156efe8349639adcec7e714b359b99a","html_url":"https://github.com/apache/openjpa/commit/992ba73a7156efe8349639adcec7e714b359b99a"}]},{"sha":"8dc74c1e5972eeb1673b9767f0e93f0d8576649a","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkYzc0YzFlNTk3MmVlYjE2NzNiOTc2N2YwZTkzZjBkODU3NjY0OWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T18:58:37Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T18:58:37Z"},"message":"Do not repeat class name in stringfied object id\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923938 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"91d5aaf4d0fec98309d267810ecb8401f306d81d","url":"https://api.github.com/repos/apache/openjpa/git/trees/91d5aaf4d0fec98309d267810ecb8401f306d81d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8dc74c1e5972eeb1673b9767f0e93f0d8576649a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8dc74c1e5972eeb1673b9767f0e93f0d8576649a","html_url":"https://github.com/apache/openjpa/commit/8dc74c1e5972eeb1673b9767f0e93f0d8576649a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8dc74c1e5972eeb1673b9767f0e93f0d8576649a/comments","author":null,"committer":null,"parents":[{"sha":"c618b4692d777a239bbf5e3788175b3f9acf0e02","url":"https://api.github.com/repos/apache/openjpa/commits/c618b4692d777a239bbf5e3788175b3f9acf0e02","html_url":"https://github.com/apache/openjpa/commit/c618b4692d777a239bbf5e3788175b3f9acf0e02"}]},{"sha":"0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmNTUwOGU2ODA0ZGI2ZmIxZThlZTMwODdkZDBkYzQxYTQ4ZTZhNGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T19:10:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T19:10:49Z"},"message":"Better diagnostic messages on why a query can not be cached\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923940 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ad01f2d264a88a579708a57bad63f09e4d29a19","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ad01f2d264a88a579708a57bad63f09e4d29a19"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","html_url":"https://github.com/apache/openjpa/commit/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f/comments","author":null,"committer":null,"parents":[{"sha":"8dc74c1e5972eeb1673b9767f0e93f0d8576649a","url":"https://api.github.com/repos/apache/openjpa/commits/8dc74c1e5972eeb1673b9767f0e93f0d8576649a","html_url":"https://github.com/apache/openjpa/commit/8dc74c1e5972eeb1673b9767f0e93f0d8576649a"}]},{"sha":"e56be85085acfc32977ddd3dc1bbb63c2f7ebd71","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1NmJlODUwODVhY2ZjMzI5NzdkZGQzZGMxYmJiNjNjMmY3ZWJkNzE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T20:08:28Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T20:08:28Z"},"message":"OPENJPA-1097 Remove duplicate code in DetachManager and cleanup comments/traces in tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923958 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed7db500010bb6a7b8fa52b08528b5571202768e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed7db500010bb6a7b8fa52b08528b5571202768e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e56be85085acfc32977ddd3dc1bbb63c2f7ebd71","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e56be85085acfc32977ddd3dc1bbb63c2f7ebd71","html_url":"https://github.com/apache/openjpa/commit/e56be85085acfc32977ddd3dc1bbb63c2f7ebd71","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e56be85085acfc32977ddd3dc1bbb63c2f7ebd71/comments","author":null,"committer":null,"parents":[{"sha":"0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","url":"https://api.github.com/repos/apache/openjpa/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","html_url":"https://github.com/apache/openjpa/commit/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f"}]},{"sha":"db7390af622f9ac2efa56dc31f03e57904aeaa9b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiNzM5MGFmNjIyZjlhYzJlZmE1NmRjMzFmMDNlNTc5MDRhZWFhOWI=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T21:21:34Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T21:21:34Z"},"message":"OPENJPA-1510: Update JPA Resources section with JEE 6 links.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b05e11e37a5bcb2037d4b374d7ef70478b633939","url":"https://api.github.com/repos/apache/openjpa/git/trees/b05e11e37a5bcb2037d4b374d7ef70478b633939"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/db7390af622f9ac2efa56dc31f03e57904aeaa9b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/db7390af622f9ac2efa56dc31f03e57904aeaa9b","html_url":"https://github.com/apache/openjpa/commit/db7390af622f9ac2efa56dc31f03e57904aeaa9b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/db7390af622f9ac2efa56dc31f03e57904aeaa9b/comments","author":null,"committer":null,"parents":[{"sha":"e56be85085acfc32977ddd3dc1bbb63c2f7ebd71","url":"https://api.github.com/repos/apache/openjpa/commits/e56be85085acfc32977ddd3dc1bbb63c2f7ebd71","html_url":"https://github.com/apache/openjpa/commit/e56be85085acfc32977ddd3dc1bbb63c2f7ebd71"}]},{"sha":"6bc5ff8d3ca092a8e590915f56d47d84576020d1","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiYzVmZjhkM2NhMDkyYThlNTkwOTE1ZjU2ZDQ3ZDg0NTc2MDIwZDE=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T21:41:34Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T21:41:34Z"},"message":"OPENJPA-1510: Typographical changes to Encryption Provider section.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924002 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"965e15d075f62b50dcf6a3084a108b5b4ce26b6d","url":"https://api.github.com/repos/apache/openjpa/git/trees/965e15d075f62b50dcf6a3084a108b5b4ce26b6d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6bc5ff8d3ca092a8e590915f56d47d84576020d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6bc5ff8d3ca092a8e590915f56d47d84576020d1","html_url":"https://github.com/apache/openjpa/commit/6bc5ff8d3ca092a8e590915f56d47d84576020d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6bc5ff8d3ca092a8e590915f56d47d84576020d1/comments","author":null,"committer":null,"parents":[{"sha":"db7390af622f9ac2efa56dc31f03e57904aeaa9b","url":"https://api.github.com/repos/apache/openjpa/commits/db7390af622f9ac2efa56dc31f03e57904aeaa9b","html_url":"https://github.com/apache/openjpa/commit/db7390af622f9ac2efa56dc31f03e57904aeaa9b"}]},{"sha":"4bff5d71e8219ea5f94437d146294130d86fa270","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZmY1ZDcxZTgyMTllYTVmOTQ0MzdkMTQ2Mjk0MTMwZDg2ZmEyNzA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T21:50:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T21:50:15Z"},"message":"OPENJPA-1097 Merge in test updates from 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924005 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6dc1784b1c3c41a77481c4e8fe5bb757e7bb0bf2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6dc1784b1c3c41a77481c4e8fe5bb757e7bb0bf2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4bff5d71e8219ea5f94437d146294130d86fa270","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4bff5d71e8219ea5f94437d146294130d86fa270","html_url":"https://github.com/apache/openjpa/commit/4bff5d71e8219ea5f94437d146294130d86fa270","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4bff5d71e8219ea5f94437d146294130d86fa270/comments","author":null,"committer":null,"parents":[{"sha":"6bc5ff8d3ca092a8e590915f56d47d84576020d1","url":"https://api.github.com/repos/apache/openjpa/commits/6bc5ff8d3ca092a8e590915f56d47d84576020d1","html_url":"https://github.com/apache/openjpa/commit/6bc5ff8d3ca092a8e590915f56d47d84576020d1"}]},{"sha":"d386fa80679a41fad7b7cf5b6396f465d4d59ec5","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzODZmYTgwNjc5YTQxZmFkN2I3Y2Y1YjYzOTZmNDY1ZDRkNTllYzU=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T21:54:59Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T21:54:59Z"},"message":"OPENJPA-1510: Remove JDK 1.5 reference from Reverse Mapping section - this level of JDK is now a must to run OpenJPA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924007 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ce04b17b14f704c6f6221b74cd813af9f384a310","url":"https://api.github.com/repos/apache/openjpa/git/trees/ce04b17b14f704c6f6221b74cd813af9f384a310"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d386fa80679a41fad7b7cf5b6396f465d4d59ec5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d386fa80679a41fad7b7cf5b6396f465d4d59ec5","html_url":"https://github.com/apache/openjpa/commit/d386fa80679a41fad7b7cf5b6396f465d4d59ec5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d386fa80679a41fad7b7cf5b6396f465d4d59ec5/comments","author":null,"committer":null,"parents":[{"sha":"4bff5d71e8219ea5f94437d146294130d86fa270","url":"https://api.github.com/repos/apache/openjpa/commits/4bff5d71e8219ea5f94437d146294130d86fa270","html_url":"https://github.com/apache/openjpa/commit/4bff5d71e8219ea5f94437d146294130d86fa270"}]},{"sha":"3b15fe9e2d66895dbdb2d722ebcae175b98817c2","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMTVmZTllMmQ2Njg5NWRiZGIyZDcyMmViY2FlMTc1Yjk4ODE3YzI=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T22:20:51Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-16T22:20:51Z"},"message":"OPENJPA-1510: Remove JDK 1.4 references from Apache Commons Logging section.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec59bdd18ae7a7bd6ee689f0bb65fcc02d92266a","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec59bdd18ae7a7bd6ee689f0bb65fcc02d92266a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b15fe9e2d66895dbdb2d722ebcae175b98817c2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b15fe9e2d66895dbdb2d722ebcae175b98817c2","html_url":"https://github.com/apache/openjpa/commit/3b15fe9e2d66895dbdb2d722ebcae175b98817c2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b15fe9e2d66895dbdb2d722ebcae175b98817c2/comments","author":null,"committer":null,"parents":[{"sha":"d386fa80679a41fad7b7cf5b6396f465d4d59ec5","url":"https://api.github.com/repos/apache/openjpa/commits/d386fa80679a41fad7b7cf5b6396f465d4d59ec5","html_url":"https://github.com/apache/openjpa/commit/d386fa80679a41fad7b7cf5b6396f465d4d59ec5"}]},{"sha":"41ce320cc0436552a0d90dd53ba8e875680e5225","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxY2UzMjBjYzA0MzY1NTJhMGQ5MGRkNTNiYThlODc1NjgwZTUyMjU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-16T23:41:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-16T23:41:36Z"},"message":"OPENJPA-1577: disable query cache when user-defined field strategy is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924055 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b25927d1c512f8884ee142856c83fb7e7cdf3c3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b25927d1c512f8884ee142856c83fb7e7cdf3c3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/41ce320cc0436552a0d90dd53ba8e875680e5225","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/41ce320cc0436552a0d90dd53ba8e875680e5225","html_url":"https://github.com/apache/openjpa/commit/41ce320cc0436552a0d90dd53ba8e875680e5225","comments_url":"https://api.github.com/repos/apache/openjpa/commits/41ce320cc0436552a0d90dd53ba8e875680e5225/comments","author":null,"committer":null,"parents":[{"sha":"3b15fe9e2d66895dbdb2d722ebcae175b98817c2","url":"https://api.github.com/repos/apache/openjpa/commits/3b15fe9e2d66895dbdb2d722ebcae175b98817c2","html_url":"https://github.com/apache/openjpa/commit/3b15fe9e2d66895dbdb2d722ebcae175b98817c2"}]},{"sha":"65385662b08df5d7fafc7819514c99a4b6b907a9","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1Mzg1NjYyYjA4ZGY1ZDdmYWZjNzgxOTUxNGM5OWE0YjZiOTA3YTk=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-17T17:57:18Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-17T17:57:18Z"},"message":"OPENJPA-1579 Committing test code for Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924391 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"005c9c4a0e7fa7a4a53c60200e568da2f4a67e57","url":"https://api.github.com/repos/apache/openjpa/git/trees/005c9c4a0e7fa7a4a53c60200e568da2f4a67e57"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/65385662b08df5d7fafc7819514c99a4b6b907a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/65385662b08df5d7fafc7819514c99a4b6b907a9","html_url":"https://github.com/apache/openjpa/commit/65385662b08df5d7fafc7819514c99a4b6b907a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/65385662b08df5d7fafc7819514c99a4b6b907a9/comments","author":null,"committer":null,"parents":[{"sha":"41ce320cc0436552a0d90dd53ba8e875680e5225","url":"https://api.github.com/repos/apache/openjpa/commits/41ce320cc0436552a0d90dd53ba8e875680e5225","html_url":"https://github.com/apache/openjpa/commit/41ce320cc0436552a0d90dd53ba8e875680e5225"}]},{"sha":"04bb0664750212b332720e87b5f273310a8ed1f6","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0YmIwNjY0NzUwMjEyYjMzMjcyMGU4N2I1ZjI3MzMxMGE4ZWQxZjY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-17T17:58:40Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-17T17:58:40Z"},"message":"OPENJPA-1410 Disable loading of dynamic enhancement agent if OpenJPA is not loaded with the system classloader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924395 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1aaeb8f5506468abb841c46d7165ea62245ac86b","url":"https://api.github.com/repos/apache/openjpa/git/trees/1aaeb8f5506468abb841c46d7165ea62245ac86b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04bb0664750212b332720e87b5f273310a8ed1f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04bb0664750212b332720e87b5f273310a8ed1f6","html_url":"https://github.com/apache/openjpa/commit/04bb0664750212b332720e87b5f273310a8ed1f6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04bb0664750212b332720e87b5f273310a8ed1f6/comments","author":null,"committer":null,"parents":[{"sha":"65385662b08df5d7fafc7819514c99a4b6b907a9","url":"https://api.github.com/repos/apache/openjpa/commits/65385662b08df5d7fafc7819514c99a4b6b907a9","html_url":"https://github.com/apache/openjpa/commit/65385662b08df5d7fafc7819514c99a4b6b907a9"}]},{"sha":"63079316a001a44538183c03e657f7da5324d7c0","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzMDc5MzE2YTAwMWE0NDUzODE4M2MwM2U2NTdmN2RhNTMyNGQ3YzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-17T22:11:02Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-17T22:11:02Z"},"message":"THrow IllegalArg exception on null argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"824550484d56b10dba1db23fa28f7559e8b27f19","url":"https://api.github.com/repos/apache/openjpa/git/trees/824550484d56b10dba1db23fa28f7559e8b27f19"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63079316a001a44538183c03e657f7da5324d7c0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63079316a001a44538183c03e657f7da5324d7c0","html_url":"https://github.com/apache/openjpa/commit/63079316a001a44538183c03e657f7da5324d7c0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63079316a001a44538183c03e657f7da5324d7c0/comments","author":null,"committer":null,"parents":[{"sha":"04bb0664750212b332720e87b5f273310a8ed1f6","url":"https://api.github.com/repos/apache/openjpa/commits/04bb0664750212b332720e87b5f273310a8ed1f6","html_url":"https://github.com/apache/openjpa/commit/04bb0664750212b332720e87b5f273310a8ed1f6"}]},{"sha":"976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3NjUwOGVlZDI0YWVkN2RmZGJiOWI0ODk0Y2IzYmRjNmY5MzhlOGU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-17T23:15:34Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-17T23:15:34Z"},"message":"Raise correct exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924551 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dc3b1fd80bbf2b9f59675adb45a527b844758d4b","url":"https://api.github.com/repos/apache/openjpa/git/trees/dc3b1fd80bbf2b9f59675adb45a527b844758d4b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","html_url":"https://github.com/apache/openjpa/commit/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e/comments","author":null,"committer":null,"parents":[{"sha":"63079316a001a44538183c03e657f7da5324d7c0","url":"https://api.github.com/repos/apache/openjpa/commits/63079316a001a44538183c03e657f7da5324d7c0","html_url":"https://github.com/apache/openjpa/commit/63079316a001a44538183c03e657f7da5324d7c0"}]},{"sha":"1b20902b507ca7e7209132297266968a92e0d472","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiMjA5MDJiNTA3Y2E3ZTcyMDkxMzIyOTcyNjY5NjhhOTJlMGQ0NzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T03:42:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T03:42:50Z"},"message":"OPENJPA-1565,OPENJPA-1578:\nModify tests to raise correct lock/query exception\nFill in details in exception\nUse retreive mode while initializing not store mode \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924626 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d83b262e909bb2e80910d7d4dca62463d7e78b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d83b262e909bb2e80910d7d4dca62463d7e78b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b20902b507ca7e7209132297266968a92e0d472","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b20902b507ca7e7209132297266968a92e0d472","html_url":"https://github.com/apache/openjpa/commit/1b20902b507ca7e7209132297266968a92e0d472","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b20902b507ca7e7209132297266968a92e0d472/comments","author":null,"committer":null,"parents":[{"sha":"976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","url":"https://api.github.com/repos/apache/openjpa/commits/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","html_url":"https://github.com/apache/openjpa/commit/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e"}]},{"sha":"2ebb6e475a803d4661c6182eb6722451bd63e966","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlYmI2ZTQ3NWE4MDNkNDY2MWM2MTgyZWI2NzIyNDUxYmQ2M2U5NjY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T04:38:57Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T04:38:57Z"},"message":"Better error message for multi-valued object path traversal\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924633 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63ac918d1afec7e7f843d8727f996152609a37da","url":"https://api.github.com/repos/apache/openjpa/git/trees/63ac918d1afec7e7f843d8727f996152609a37da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ebb6e475a803d4661c6182eb6722451bd63e966","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ebb6e475a803d4661c6182eb6722451bd63e966","html_url":"https://github.com/apache/openjpa/commit/2ebb6e475a803d4661c6182eb6722451bd63e966","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ebb6e475a803d4661c6182eb6722451bd63e966/comments","author":null,"committer":null,"parents":[{"sha":"1b20902b507ca7e7209132297266968a92e0d472","url":"https://api.github.com/repos/apache/openjpa/commits/1b20902b507ca7e7209132297266968a92e0d472","html_url":"https://github.com/apache/openjpa/commit/1b20902b507ca7e7209132297266968a92e0d472"}]},{"sha":"cb895a2b25db52ebe4527a8845cf5a973dd9d54b","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiODk1YTJiMjVkYjUyZWJlNDUyN2E4ODQ1Y2Y1YTk3M2RkOWQ1NGI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T05:26:36Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T05:26:36Z"},"message":"OPENJPA-1565: Oracle exception code 72000 is not fatal\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924638 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"277b7616c16144e570e381e673f4ae8d7620b3ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/277b7616c16144e570e381e673f4ae8d7620b3ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb895a2b25db52ebe4527a8845cf5a973dd9d54b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb895a2b25db52ebe4527a8845cf5a973dd9d54b","html_url":"https://github.com/apache/openjpa/commit/cb895a2b25db52ebe4527a8845cf5a973dd9d54b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb895a2b25db52ebe4527a8845cf5a973dd9d54b/comments","author":null,"committer":null,"parents":[{"sha":"2ebb6e475a803d4661c6182eb6722451bd63e966","url":"https://api.github.com/repos/apache/openjpa/commits/2ebb6e475a803d4661c6182eb6722451bd63e966","html_url":"https://github.com/apache/openjpa/commit/2ebb6e475a803d4661c6182eb6722451bd63e966"}]},{"sha":"4f11cba18a9009cb6e187df080358c3758c5006b","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmMTFjYmExOGE5MDA5Y2I2ZTE4N2RmMDgwMzU4YzM3NThjNTAwNmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T05:54:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T05:54:26Z"},"message":"OPENJPA-1565: Some MySQL drivers return 0 error code for timeout exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924651 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"371caea81dcdbd60f39e589fb815c9262c278cdc","url":"https://api.github.com/repos/apache/openjpa/git/trees/371caea81dcdbd60f39e589fb815c9262c278cdc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4f11cba18a9009cb6e187df080358c3758c5006b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4f11cba18a9009cb6e187df080358c3758c5006b","html_url":"https://github.com/apache/openjpa/commit/4f11cba18a9009cb6e187df080358c3758c5006b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4f11cba18a9009cb6e187df080358c3758c5006b/comments","author":null,"committer":null,"parents":[{"sha":"cb895a2b25db52ebe4527a8845cf5a973dd9d54b","url":"https://api.github.com/repos/apache/openjpa/commits/cb895a2b25db52ebe4527a8845cf5a973dd9d54b","html_url":"https://github.com/apache/openjpa/commit/cb895a2b25db52ebe4527a8845cf5a973dd9d54b"}]},{"sha":"081baaa8568eb6a3514bcb7fbc87cab21be5be23","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4MWJhYWE4NTY4ZWI2YTM1MTRiY2I3ZmJjODdjYWIyMWJlNWJlMjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T15:42:54Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T15:42:54Z"},"message":"Disable timeout tests on Oracle and DB2 till we know the reason\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924867 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c7746a3fe283002eaadef66c75ddadec7f949f12","url":"https://api.github.com/repos/apache/openjpa/git/trees/c7746a3fe283002eaadef66c75ddadec7f949f12"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/081baaa8568eb6a3514bcb7fbc87cab21be5be23","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/081baaa8568eb6a3514bcb7fbc87cab21be5be23","html_url":"https://github.com/apache/openjpa/commit/081baaa8568eb6a3514bcb7fbc87cab21be5be23","comments_url":"https://api.github.com/repos/apache/openjpa/commits/081baaa8568eb6a3514bcb7fbc87cab21be5be23/comments","author":null,"committer":null,"parents":[{"sha":"4f11cba18a9009cb6e187df080358c3758c5006b","url":"https://api.github.com/repos/apache/openjpa/commits/4f11cba18a9009cb6e187df080358c3758c5006b","html_url":"https://github.com/apache/openjpa/commit/4f11cba18a9009cb6e187df080358c3758c5006b"}]},{"sha":"bd9b59c90f575b71a7167b48fadfb35ffa61449a","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkOWI1OWM5MGY1NzViNzFhNzE2N2I0OGZhZGZiMzVmZmE2MTQ0OWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-18T15:44:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-18T15:44:25Z"},"message":"OPENJPA-1581:\nmake assertOpen public and call assertOpen before returning JPA cache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924868 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ea791c4ac83c178e303f4bf9de7c9843026c4ef","url":"https://api.github.com/repos/apache/openjpa/git/trees/3ea791c4ac83c178e303f4bf9de7c9843026c4ef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd9b59c90f575b71a7167b48fadfb35ffa61449a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd9b59c90f575b71a7167b48fadfb35ffa61449a","html_url":"https://github.com/apache/openjpa/commit/bd9b59c90f575b71a7167b48fadfb35ffa61449a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd9b59c90f575b71a7167b48fadfb35ffa61449a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"081baaa8568eb6a3514bcb7fbc87cab21be5be23","url":"https://api.github.com/repos/apache/openjpa/commits/081baaa8568eb6a3514bcb7fbc87cab21be5be23","html_url":"https://github.com/apache/openjpa/commit/081baaa8568eb6a3514bcb7fbc87cab21be5be23"}]},{"sha":"8c1175054f028ef00d219c054b66fd6634eca020","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMTE3NTA1NGYwMjhlZjAwZDIxOWMwNTRiNjZmZDY2MzRlY2EwMjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T18:32:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T18:32:19Z"},"message":"OPENJPA-1583: Timestamp version field in bulk update\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924938 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d24edb9176aadc364bb3255a5622c7868b82cbe5","url":"https://api.github.com/repos/apache/openjpa/git/trees/d24edb9176aadc364bb3255a5622c7868b82cbe5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c1175054f028ef00d219c054b66fd6634eca020","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c1175054f028ef00d219c054b66fd6634eca020","html_url":"https://github.com/apache/openjpa/commit/8c1175054f028ef00d219c054b66fd6634eca020","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c1175054f028ef00d219c054b66fd6634eca020/comments","author":null,"committer":null,"parents":[{"sha":"bd9b59c90f575b71a7167b48fadfb35ffa61449a","url":"https://api.github.com/repos/apache/openjpa/commits/bd9b59c90f575b71a7167b48fadfb35ffa61449a","html_url":"https://github.com/apache/openjpa/commit/bd9b59c90f575b71a7167b48fadfb35ffa61449a"}]},{"sha":"c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","node_id":"MDY6Q29tbWl0MjA2MzY0OmM4NjRmNWRmYzAyNGQwMTA1MmQ1OWYwZjZmOWZkMWFiNWMwYzI3MTA=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-18T21:39:29Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-18T21:39:29Z"},"message":"OPENJPA-1583  Fix table name collision caused by having multiple TimestampedEntity entities.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925009 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79ed268b894cf8cb6556e2fdea779a7f4ca3818e","url":"https://api.github.com/repos/apache/openjpa/git/trees/79ed268b894cf8cb6556e2fdea779a7f4ca3818e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","html_url":"https://github.com/apache/openjpa/commit/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710/comments","author":null,"committer":null,"parents":[{"sha":"8c1175054f028ef00d219c054b66fd6634eca020","url":"https://api.github.com/repos/apache/openjpa/commits/8c1175054f028ef00d219c054b66fd6634eca020","html_url":"https://github.com/apache/openjpa/commit/8c1175054f028ef00d219c054b66fd6634eca020"}]},{"sha":"15c64cb8f4db54346a10cc5c9183b3343db5c0b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1YzY0Y2I4ZjRkYjU0MzQ2YTEwY2M1YzkxODNiMzM0M2RiNWMwYjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T23:01:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T23:01:30Z"},"message":"OPENJPA-1584: Reparameterization when main and subquery using share query parameters in same or different declaration order\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925036 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"72a4c5c634ab28320b393bd039357456c59bd81b","url":"https://api.github.com/repos/apache/openjpa/git/trees/72a4c5c634ab28320b393bd039357456c59bd81b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","html_url":"https://github.com/apache/openjpa/commit/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/comments","author":null,"committer":null,"parents":[{"sha":"c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","url":"https://api.github.com/repos/apache/openjpa/commits/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","html_url":"https://github.com/apache/openjpa/commit/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710"}]},{"sha":"13e3c48caea0c7c8125b72f398f6443ce231902f","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzZTNjNDhjYWVhMGM3YzgxMjViNzJmMzk4ZjY0NDNjZTIzMTkwMmY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-18T23:52:33Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-18T23:52:33Z"},"message":"OPENJPA-1580: disable query cache when pagination is involved.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925048 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bbaf0d2912949079c31b44dc160a00efd23d05c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8bbaf0d2912949079c31b44dc160a00efd23d05c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13e3c48caea0c7c8125b72f398f6443ce231902f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13e3c48caea0c7c8125b72f398f6443ce231902f","html_url":"https://github.com/apache/openjpa/commit/13e3c48caea0c7c8125b72f398f6443ce231902f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13e3c48caea0c7c8125b72f398f6443ce231902f/comments","author":null,"committer":null,"parents":[{"sha":"15c64cb8f4db54346a10cc5c9183b3343db5c0b5","url":"https://api.github.com/repos/apache/openjpa/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","html_url":"https://github.com/apache/openjpa/commit/15c64cb8f4db54346a10cc5c9183b3343db5c0b5"}]},{"sha":"73b7d4748b0e5d914cbe53ade826630a4b7fc650","node_id":"MDY6Q29tbWl0MjA2MzY0OjczYjdkNDc0OGIwZTVkOTE0Y2JlNTNhZGU4MjY2MzBhNGI3ZmM2NTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-19T16:05:36Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-19T16:05:36Z"},"message":"OPENJPA-1491: Add OpenJPA-OSGi package description.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925293 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa2f92cb2c6551c2835b6bd66bf52e3b9d58ff13","url":"https://api.github.com/repos/apache/openjpa/git/trees/fa2f92cb2c6551c2835b6bd66bf52e3b9d58ff13"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/73b7d4748b0e5d914cbe53ade826630a4b7fc650","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/73b7d4748b0e5d914cbe53ade826630a4b7fc650","html_url":"https://github.com/apache/openjpa/commit/73b7d4748b0e5d914cbe53ade826630a4b7fc650","comments_url":"https://api.github.com/repos/apache/openjpa/commits/73b7d4748b0e5d914cbe53ade826630a4b7fc650/comments","author":null,"committer":null,"parents":[{"sha":"13e3c48caea0c7c8125b72f398f6443ce231902f","url":"https://api.github.com/repos/apache/openjpa/commits/13e3c48caea0c7c8125b72f398f6443ce231902f","html_url":"https://github.com/apache/openjpa/commit/13e3c48caea0c7c8125b72f398f6443ce231902f"}]},{"sha":"9f326c0f8bd5a8007b8f10bc17ee10db438ca615","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmMzI2YzBmOGJkNWE4MDA3YjhmMTBiYzE3ZWUxMGRiNDM4Y2E2MTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-19T17:08:13Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-19T17:08:13Z"},"message":"Correct expected value for  paging query and disable (temporariliy) subquery + constant literals case\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"181b8ebb484fdb3f1488ff4b6636af3683bbae77","url":"https://api.github.com/repos/apache/openjpa/git/trees/181b8ebb484fdb3f1488ff4b6636af3683bbae77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f326c0f8bd5a8007b8f10bc17ee10db438ca615","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f326c0f8bd5a8007b8f10bc17ee10db438ca615","html_url":"https://github.com/apache/openjpa/commit/9f326c0f8bd5a8007b8f10bc17ee10db438ca615","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f326c0f8bd5a8007b8f10bc17ee10db438ca615/comments","author":null,"committer":null,"parents":[{"sha":"73b7d4748b0e5d914cbe53ade826630a4b7fc650","url":"https://api.github.com/repos/apache/openjpa/commits/73b7d4748b0e5d914cbe53ade826630a4b7fc650","html_url":"https://github.com/apache/openjpa/commit/73b7d4748b0e5d914cbe53ade826630a4b7fc650"}]},{"sha":"4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmOWRlOGUzNjBjOGZjYjJkZGE5MTAwYzAxYjI3NjFhM2VjMjFmNWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-19T20:51:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-19T20:51:20Z"},"message":"OPENJPA-1097 Use DetachedStateField to determine when to keep  in the serialized entities or not\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925416 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ff7d2773f038b7dc7094e33f9fac21e68a8e27eb","url":"https://api.github.com/repos/apache/openjpa/git/trees/ff7d2773f038b7dc7094e33f9fac21e68a8e27eb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c","html_url":"https://github.com/apache/openjpa/commit/4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c/comments","author":null,"committer":null,"parents":[{"sha":"9f326c0f8bd5a8007b8f10bc17ee10db438ca615","url":"https://api.github.com/repos/apache/openjpa/commits/9f326c0f8bd5a8007b8f10bc17ee10db438ca615","html_url":"https://github.com/apache/openjpa/commit/9f326c0f8bd5a8007b8f10bc17ee10db438ca615"}]},{"sha":"e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2ZmM2ZmFiMGE0ZjQ1YzgxZGI1ZmZjOGUyYzNiY2Y3NmUxNDc4ZWU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-19T21:31:17Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-19T21:31:17Z"},"message":"OPENJPA-1583 - fix intermittent failures in timestamp version assertion.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925438 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e8e85255712ce12245710e0f212c4c4c9ba3eed","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e8e85255712ce12245710e0f212c4c4c9ba3eed"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee","html_url":"https://github.com/apache/openjpa/commit/e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee/comments","author":null,"committer":null,"parents":[{"sha":"4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c","url":"https://api.github.com/repos/apache/openjpa/commits/4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c","html_url":"https://github.com/apache/openjpa/commit/4f9de8e360c8fcb2dda9100c01b2761a3ec21f5c"}]},{"sha":"1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOWQ4MDAwM2EyZWY3MWNkYmE4ZDQ5ZjYzZjhlY2YxMTNmZDk0MzU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-19T21:55:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-19T21:55:44Z"},"message":"Allow user to set the cache mode enum values on EntityManager.setProperty() by String\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925451 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9d89b169b16447584da9c36d9414d5a0b05fce0","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9d89b169b16447584da9c36d9414d5a0b05fce0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","html_url":"https://github.com/apache/openjpa/commit/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435/comments","author":null,"committer":null,"parents":[{"sha":"e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee","url":"https://api.github.com/repos/apache/openjpa/commits/e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee","html_url":"https://github.com/apache/openjpa/commit/e6fc6fab0a4f45c81db5ffc8e2c3bcf76e1478ee"}]},{"sha":"148db96a8cea463537ffa4a530694e45de5820bf","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0OGRiOTZhOGNlYTQ2MzUzN2ZmYTRhNTMwNjk0ZTQ1ZGU1ODIwYmY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-20T04:11:05Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-20T04:11:05Z"},"message":"OPENJPA-1585: Additional trace helps users to relate query or entity actions to SQL pushdowns\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925540 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec0b11aec866ae6baaa776598bd28190aff62d0d","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec0b11aec866ae6baaa776598bd28190aff62d0d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/148db96a8cea463537ffa4a530694e45de5820bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/148db96a8cea463537ffa4a530694e45de5820bf","html_url":"https://github.com/apache/openjpa/commit/148db96a8cea463537ffa4a530694e45de5820bf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/148db96a8cea463537ffa4a530694e45de5820bf/comments","author":null,"committer":null,"parents":[{"sha":"1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","url":"https://api.github.com/repos/apache/openjpa/commits/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","html_url":"https://github.com/apache/openjpa/commit/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435"}]},{"sha":"43c4cff942f56fafcfeda67d7a0a25349066b90c","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzYzRjZmY5NDJmNTZmYWZjZmVkYTY3ZDdhMGEyNTM0OTA2NmI5MGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-03-21T00:19:27Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-03-21T00:19:27Z"},"message":"OPENJPA-1588.  Removed the processing of the CacheStoreMode property from the convertToKernelValue method.  Also, corrected the spelling of this method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925703 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d506645635a90e239613feaf5047650da2cbf235","url":"https://api.github.com/repos/apache/openjpa/git/trees/d506645635a90e239613feaf5047650da2cbf235"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/43c4cff942f56fafcfeda67d7a0a25349066b90c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/43c4cff942f56fafcfeda67d7a0a25349066b90c","html_url":"https://github.com/apache/openjpa/commit/43c4cff942f56fafcfeda67d7a0a25349066b90c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/43c4cff942f56fafcfeda67d7a0a25349066b90c/comments","author":null,"committer":null,"parents":[{"sha":"148db96a8cea463537ffa4a530694e45de5820bf","url":"https://api.github.com/repos/apache/openjpa/commits/148db96a8cea463537ffa4a530694e45de5820bf","html_url":"https://github.com/apache/openjpa/commit/148db96a8cea463537ffa4a530694e45de5820bf"}]},{"sha":"da262a651acda143a47b9eb77ee43bc85aa10699","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhMjYyYTY1MWFjZGExNDNhNDdiOWViNzdlZTQzYmM4NWFhMTA2OTk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-21T17:58:09Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-21T17:58:09Z"},"message":"OPENJPA-1585: Additional trace helps users to relate query or entity actions to SQL pushdowns\nupdate Reference Guide for SQLDiag logging channel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925847 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e25547ae71c3ea4068dc78daf672010d5075cf7","url":"https://api.github.com/repos/apache/openjpa/git/trees/6e25547ae71c3ea4068dc78daf672010d5075cf7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/da262a651acda143a47b9eb77ee43bc85aa10699","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/da262a651acda143a47b9eb77ee43bc85aa10699","html_url":"https://github.com/apache/openjpa/commit/da262a651acda143a47b9eb77ee43bc85aa10699","comments_url":"https://api.github.com/repos/apache/openjpa/commits/da262a651acda143a47b9eb77ee43bc85aa10699/comments","author":null,"committer":null,"parents":[{"sha":"43c4cff942f56fafcfeda67d7a0a25349066b90c","url":"https://api.github.com/repos/apache/openjpa/commits/43c4cff942f56fafcfeda67d7a0a25349066b90c","html_url":"https://github.com/apache/openjpa/commit/43c4cff942f56fafcfeda67d7a0a25349066b90c"}]},{"sha":"c20a4ef30344f65b02a4b64be39cc303a07b0b5c","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyMGE0ZWYzMDM0NGY2NWIwMmE0YjY0YmUzOWNjMzAzYTA3YjBiNWM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-21T22:13:22Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-21T22:13:22Z"},"message":"OPENJPA-1545: Only detach StateManagers that aren't already detached.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a44208f49fc581d62dfd67038769d42da51c2b1b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a44208f49fc581d62dfd67038769d42da51c2b1b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c20a4ef30344f65b02a4b64be39cc303a07b0b5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c20a4ef30344f65b02a4b64be39cc303a07b0b5c","html_url":"https://github.com/apache/openjpa/commit/c20a4ef30344f65b02a4b64be39cc303a07b0b5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c20a4ef30344f65b02a4b64be39cc303a07b0b5c/comments","author":null,"committer":null,"parents":[{"sha":"da262a651acda143a47b9eb77ee43bc85aa10699","url":"https://api.github.com/repos/apache/openjpa/commits/da262a651acda143a47b9eb77ee43bc85aa10699","html_url":"https://github.com/apache/openjpa/commit/da262a651acda143a47b9eb77ee43bc85aa10699"}]},{"sha":"773eefc3135294aa18d1122483e8a1d1b82f0c53","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3M2VlZmMzMTM1Mjk0YWExOGQxMTIyNDgzZThhMWQxYjgyZjBjNTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T14:25:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T14:25:22Z"},"message":"OPENJPA-1097 Cleanup imports and add more comments on the before/after behavior of writeReplace().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926104 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e0ff526f424e9d65df8c936a0e830f220eaa6fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e0ff526f424e9d65df8c936a0e830f220eaa6fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/773eefc3135294aa18d1122483e8a1d1b82f0c53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/773eefc3135294aa18d1122483e8a1d1b82f0c53","html_url":"https://github.com/apache/openjpa/commit/773eefc3135294aa18d1122483e8a1d1b82f0c53","comments_url":"https://api.github.com/repos/apache/openjpa/commits/773eefc3135294aa18d1122483e8a1d1b82f0c53/comments","author":null,"committer":null,"parents":[{"sha":"c20a4ef30344f65b02a4b64be39cc303a07b0b5c","url":"https://api.github.com/repos/apache/openjpa/commits/c20a4ef30344f65b02a4b64be39cc303a07b0b5c","html_url":"https://github.com/apache/openjpa/commit/c20a4ef30344f65b02a4b64be39cc303a07b0b5c"}]},{"sha":"7c613e69d1b26903589801c66be412014e740627","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjNjEzZTY5ZDFiMjY5MDM1ODk4MDFjNjZiZTQxMjAxNGU3NDA2Mjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T15:20:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T15:20:38Z"},"message":"OPENJPA-1406 Split up DetachedStateField into two sections\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bbf68a4e94fbd424e3e604c49b9dc560adfaa66","url":"https://api.github.com/repos/apache/openjpa/git/trees/8bbf68a4e94fbd424e3e604c49b9dc560adfaa66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7c613e69d1b26903589801c66be412014e740627","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7c613e69d1b26903589801c66be412014e740627","html_url":"https://github.com/apache/openjpa/commit/7c613e69d1b26903589801c66be412014e740627","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7c613e69d1b26903589801c66be412014e740627/comments","author":null,"committer":null,"parents":[{"sha":"773eefc3135294aa18d1122483e8a1d1b82f0c53","url":"https://api.github.com/repos/apache/openjpa/commits/773eefc3135294aa18d1122483e8a1d1b82f0c53","html_url":"https://github.com/apache/openjpa/commit/773eefc3135294aa18d1122483e8a1d1b82f0c53"}]},{"sha":"28d495e14b0bf223709c6c999132237cbc6b3c05","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4ZDQ5NWUxNGIwYmYyMjM3MDljNmM5OTkxMzIyMzdjYmM2YjNjMDU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T16:26:51Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T16:26:51Z"},"message":"OPENJPA-1097 Add some doc details on how the serialization of proxies works and new behavior of using DetachedStateField to ensure proxies are removed when it is set to transient or false.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926160 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b86fec3d406f0f8d14638af7ffbcc3eb3d416313","url":"https://api.github.com/repos/apache/openjpa/git/trees/b86fec3d406f0f8d14638af7ffbcc3eb3d416313"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28d495e14b0bf223709c6c999132237cbc6b3c05","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28d495e14b0bf223709c6c999132237cbc6b3c05","html_url":"https://github.com/apache/openjpa/commit/28d495e14b0bf223709c6c999132237cbc6b3c05","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28d495e14b0bf223709c6c999132237cbc6b3c05/comments","author":null,"committer":null,"parents":[{"sha":"7c613e69d1b26903589801c66be412014e740627","url":"https://api.github.com/repos/apache/openjpa/commits/7c613e69d1b26903589801c66be412014e740627","html_url":"https://github.com/apache/openjpa/commit/7c613e69d1b26903589801c66be412014e740627"}]},{"sha":"72d0c20634f3be0c5e033416435aa0d2bdfa9137","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZDBjMjA2MzRmM2JlMGM1ZTAzMzQxNjQzNWFhMGQyYmRmYTkxMzc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T16:48:49Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T16:48:49Z"},"message":"OPENJPA-1591: Make AttachManager a public class to allow for code outside of org.apache.openjpa.kernel to access it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926178 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a13fb48fa67335931a0b86e210f241387133ea2e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a13fb48fa67335931a0b86e210f241387133ea2e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72d0c20634f3be0c5e033416435aa0d2bdfa9137","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72d0c20634f3be0c5e033416435aa0d2bdfa9137","html_url":"https://github.com/apache/openjpa/commit/72d0c20634f3be0c5e033416435aa0d2bdfa9137","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72d0c20634f3be0c5e033416435aa0d2bdfa9137/comments","author":null,"committer":null,"parents":[{"sha":"28d495e14b0bf223709c6c999132237cbc6b3c05","url":"https://api.github.com/repos/apache/openjpa/commits/28d495e14b0bf223709c6c999132237cbc6b3c05","html_url":"https://github.com/apache/openjpa/commit/28d495e14b0bf223709c6c999132237cbc6b3c05"}]},{"sha":"87ea1de7c25579249ae3c8ac0b9985b39a88515b","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3ZWExZGU3YzI1NTc5MjQ5YWUzYzhhYzBiOTk4NWIzOWE4ODUxNWI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T16:50:48Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T16:50:48Z"},"message":"OPENJPA-1591: Add PersistenceCapeable setter to StateManagerImpl to allow for greater extensibility.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926180 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"91f8204f38143be28e47d7bdef28f8ab57e2d4b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/91f8204f38143be28e47d7bdef28f8ab57e2d4b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/87ea1de7c25579249ae3c8ac0b9985b39a88515b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/87ea1de7c25579249ae3c8ac0b9985b39a88515b","html_url":"https://github.com/apache/openjpa/commit/87ea1de7c25579249ae3c8ac0b9985b39a88515b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/87ea1de7c25579249ae3c8ac0b9985b39a88515b/comments","author":null,"committer":null,"parents":[{"sha":"72d0c20634f3be0c5e033416435aa0d2bdfa9137","url":"https://api.github.com/repos/apache/openjpa/commits/72d0c20634f3be0c5e033416435aa0d2bdfa9137","html_url":"https://github.com/apache/openjpa/commit/72d0c20634f3be0c5e033416435aa0d2bdfa9137"}]},{"sha":"201d680a0db05dacef0c9d8635e9eb6cfe546c59","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwMWQ2ODBhMGRiMDVkYWNlZjBjOWQ4NjM1ZTllYjZjZmU1NDZjNTk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-22T16:52:39Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-22T16:52:39Z"},"message":"OPENJPA-1586 - Commit test case contribution by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926181 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a37122f148c24042011e8ac8ac9061d2a5598b24","url":"https://api.github.com/repos/apache/openjpa/git/trees/a37122f148c24042011e8ac8ac9061d2a5598b24"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59","html_url":"https://github.com/apache/openjpa/commit/201d680a0db05dacef0c9d8635e9eb6cfe546c59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59/comments","author":null,"committer":null,"parents":[{"sha":"87ea1de7c25579249ae3c8ac0b9985b39a88515b","url":"https://api.github.com/repos/apache/openjpa/commits/87ea1de7c25579249ae3c8ac0b9985b39a88515b","html_url":"https://github.com/apache/openjpa/commit/87ea1de7c25579249ae3c8ac0b9985b39a88515b"}]},{"sha":"94a1323dfb8852fb8bfcc7dcde9a029e579b0872","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0YTEzMjNkZmI4ODUyZmI4YmZjYzdkY2RlOWEwMjllNTc5YjA4NzI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T17:03:17Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T17:03:17Z"},"message":"OPENJPA-1406 Replace tabs with spaces and fix identing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c1c9f05349605e1b4739c88c4f67ae8c690397f","url":"https://api.github.com/repos/apache/openjpa/git/trees/7c1c9f05349605e1b4739c88c4f67ae8c690397f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94a1323dfb8852fb8bfcc7dcde9a029e579b0872","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94a1323dfb8852fb8bfcc7dcde9a029e579b0872","html_url":"https://github.com/apache/openjpa/commit/94a1323dfb8852fb8bfcc7dcde9a029e579b0872","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94a1323dfb8852fb8bfcc7dcde9a029e579b0872/comments","author":null,"committer":null,"parents":[{"sha":"201d680a0db05dacef0c9d8635e9eb6cfe546c59","url":"https://api.github.com/repos/apache/openjpa/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59","html_url":"https://github.com/apache/openjpa/commit/201d680a0db05dacef0c9d8635e9eb6cfe546c59"}]},{"sha":"86546e1e12ef3eea9bb9bf50ead0a575e299aa44","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2NTQ2ZTFlMTJlZjNlZWE5YmI5YmY1MGVhZDBhNTc1ZTI5OWFhNDQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T17:58:56Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T17:58:56Z"},"message":"OPENJPA-1097 Add a note in the Migration Considerations doc about the 'fixed' serialization behavior and how DetachedStateField can be used to modify the behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926225 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef44c0235b3efe0cf2335a37e073bb74fd33709e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef44c0235b3efe0cf2335a37e073bb74fd33709e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/86546e1e12ef3eea9bb9bf50ead0a575e299aa44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/86546e1e12ef3eea9bb9bf50ead0a575e299aa44","html_url":"https://github.com/apache/openjpa/commit/86546e1e12ef3eea9bb9bf50ead0a575e299aa44","comments_url":"https://api.github.com/repos/apache/openjpa/commits/86546e1e12ef3eea9bb9bf50ead0a575e299aa44/comments","author":null,"committer":null,"parents":[{"sha":"94a1323dfb8852fb8bfcc7dcde9a029e579b0872","url":"https://api.github.com/repos/apache/openjpa/commits/94a1323dfb8852fb8bfcc7dcde9a029e579b0872","html_url":"https://github.com/apache/openjpa/commit/94a1323dfb8852fb8bfcc7dcde9a029e579b0872"}]},{"sha":"1c0abb52070ad23a1092603ad97f8a18bc0ffce3","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjMGFiYjUyMDcwYWQyM2ExMDkyNjAzYWQ5N2Y4YTE4YmMwZmZjZTM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T18:29:15Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T18:29:15Z"},"message":"OPENJPA-1591: Refactor/rename DataCacheScheduler to allow for greater extensibility.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926249 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97637cdf80dd6c009d6edef9136cdaca037c96c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/97637cdf80dd6c009d6edef9136cdaca037c96c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","html_url":"https://github.com/apache/openjpa/commit/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/comments","author":null,"committer":null,"parents":[{"sha":"86546e1e12ef3eea9bb9bf50ead0a575e299aa44","url":"https://api.github.com/repos/apache/openjpa/commits/86546e1e12ef3eea9bb9bf50ead0a575e299aa44","html_url":"https://github.com/apache/openjpa/commit/86546e1e12ef3eea9bb9bf50ead0a575e299aa44"}]},{"sha":"148522b8654af8288e9d8c569e887fedaac563dd","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0ODUyMmI4NjU0YWY4Mjg4ZTlkOGM1NjllODg3ZmVkYWFjNTYzZGQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T19:44:58Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T19:44:58Z"},"message":"OPENJPA-1411 Switch back to antrun since openjpa-maven-plugin-1.1 hasn't been released yet.  Also, these tests are not included in the normal builds.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926287 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"619106278b744d43eed78cde0cdbf523ff575cef","url":"https://api.github.com/repos/apache/openjpa/git/trees/619106278b744d43eed78cde0cdbf523ff575cef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/148522b8654af8288e9d8c569e887fedaac563dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/148522b8654af8288e9d8c569e887fedaac563dd","html_url":"https://github.com/apache/openjpa/commit/148522b8654af8288e9d8c569e887fedaac563dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/148522b8654af8288e9d8c569e887fedaac563dd/comments","author":null,"committer":null,"parents":[{"sha":"1c0abb52070ad23a1092603ad97f8a18bc0ffce3","url":"https://api.github.com/repos/apache/openjpa/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","html_url":"https://github.com/apache/openjpa/commit/1c0abb52070ad23a1092603ad97f8a18bc0ffce3"}]},{"sha":"db10ada93e4990c41c7f6704c2d40c3cffbd97a6","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiMTBhZGE5M2U0OTkwYzQxYzdmNjcwNGMyZDQwYzNjZmZiZDk3YTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T21:53:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-22T21:53:37Z"},"message":"OPENJPA-1406 Remove pointers to JIRAs, but leave as comments in the source.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f123c93e5bb95460b2aaf1981a9a891f1d4941a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/f123c93e5bb95460b2aaf1981a9a891f1d4941a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/db10ada93e4990c41c7f6704c2d40c3cffbd97a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/db10ada93e4990c41c7f6704c2d40c3cffbd97a6","html_url":"https://github.com/apache/openjpa/commit/db10ada93e4990c41c7f6704c2d40c3cffbd97a6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/db10ada93e4990c41c7f6704c2d40c3cffbd97a6/comments","author":null,"committer":null,"parents":[{"sha":"148522b8654af8288e9d8c569e887fedaac563dd","url":"https://api.github.com/repos/apache/openjpa/commits/148522b8654af8288e9d8c569e887fedaac563dd","html_url":"https://github.com/apache/openjpa/commit/148522b8654af8288e9d8c569e887fedaac563dd"}]},{"sha":"a7c0b3e918f34cf715d70a095db781ab15b9a55e","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3YzBiM2U5MThmMzRjZjcxNWQ3MGEwOTVkYjc4MWFiMTViOWE1NWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T01:27:28Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T01:27:28Z"},"message":"OPENJPA-1074 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926422 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b25e77ebe6cbe1aa393c38e775ecfc7cdf8a097e","url":"https://api.github.com/repos/apache/openjpa/git/trees/b25e77ebe6cbe1aa393c38e775ecfc7cdf8a097e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a7c0b3e918f34cf715d70a095db781ab15b9a55e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a7c0b3e918f34cf715d70a095db781ab15b9a55e","html_url":"https://github.com/apache/openjpa/commit/a7c0b3e918f34cf715d70a095db781ab15b9a55e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a7c0b3e918f34cf715d70a095db781ab15b9a55e/comments","author":null,"committer":null,"parents":[{"sha":"db10ada93e4990c41c7f6704c2d40c3cffbd97a6","url":"https://api.github.com/repos/apache/openjpa/commits/db10ada93e4990c41c7f6704c2d40c3cffbd97a6","html_url":"https://github.com/apache/openjpa/commit/db10ada93e4990c41c7f6704c2d40c3cffbd97a6"}]},{"sha":"73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d","node_id":"MDY6Q29tbWl0MjA2MzY0OjczZjFhMDg2OWVhMjdmMmE3YTdmZmU5YTg3YjJkOTdhZTkxY2NmNWQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T01:29:41Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T01:29:41Z"},"message":"OPENJPA-1205 Show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926423 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d34d45cfaa6c997009ed6c51a37c8f7e1b8d4f8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d34d45cfaa6c997009ed6c51a37c8f7e1b8d4f8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d","html_url":"https://github.com/apache/openjpa/commit/73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d/comments","author":null,"committer":null,"parents":[{"sha":"a7c0b3e918f34cf715d70a095db781ab15b9a55e","url":"https://api.github.com/repos/apache/openjpa/commits/a7c0b3e918f34cf715d70a095db781ab15b9a55e","html_url":"https://github.com/apache/openjpa/commit/a7c0b3e918f34cf715d70a095db781ab15b9a55e"}]},{"sha":"676a2f74f6d47b501f6e8e16d5d08d5696162d0c","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3NmEyZjc0ZjZkNDdiNTAxZjZlOGUxNmQ1ZDA4ZDU2OTYxNjJkMGM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T02:27:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T02:27:29Z"},"message":"[maven-release-plugin] prepare branch 2.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926434 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acd7ef3422ab12146f2d2ccabf1e31250e5eb9aa","url":"https://api.github.com/repos/apache/openjpa/git/trees/acd7ef3422ab12146f2d2ccabf1e31250e5eb9aa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/676a2f74f6d47b501f6e8e16d5d08d5696162d0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/676a2f74f6d47b501f6e8e16d5d08d5696162d0c","html_url":"https://github.com/apache/openjpa/commit/676a2f74f6d47b501f6e8e16d5d08d5696162d0c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/676a2f74f6d47b501f6e8e16d5d08d5696162d0c/comments","author":null,"committer":null,"parents":[{"sha":"73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d","url":"https://api.github.com/repos/apache/openjpa/commits/73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d","html_url":"https://github.com/apache/openjpa/commit/73f1a0869ea27f2a7a7ffe9a87b2d97ae91ccf5d"}]},{"sha":"80ca1e76d054d443e9d95810428ee470c8b1dd56","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwY2ExZTc2ZDA1NGQ0NDNlOWQ5NTgxMDQyOGVlNDcwYzhiMWRkNTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T02:27:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T02:27:33Z"},"message":"[maven-release-plugin]  copy for branch 2.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926435 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acd7ef3422ab12146f2d2ccabf1e31250e5eb9aa","url":"https://api.github.com/repos/apache/openjpa/git/trees/acd7ef3422ab12146f2d2ccabf1e31250e5eb9aa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80ca1e76d054d443e9d95810428ee470c8b1dd56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80ca1e76d054d443e9d95810428ee470c8b1dd56","html_url":"https://github.com/apache/openjpa/commit/80ca1e76d054d443e9d95810428ee470c8b1dd56","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80ca1e76d054d443e9d95810428ee470c8b1dd56/comments","author":null,"committer":null,"parents":[{"sha":"676a2f74f6d47b501f6e8e16d5d08d5696162d0c","url":"https://api.github.com/repos/apache/openjpa/commits/676a2f74f6d47b501f6e8e16d5d08d5696162d0c","html_url":"https://github.com/apache/openjpa/commit/676a2f74f6d47b501f6e8e16d5d08d5696162d0c"}]},{"sha":"bdfd3867a2783fe67544e218ee21a0db704ceef7","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkZmQzODY3YTI3ODNmZTY3NTQ0ZTIxOGVlMjFhMGRiNzA0Y2VlZjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T14:56:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T14:56:55Z"},"message":"OPENJPA-1411 Enable daytrader tests, now that openjpa-maven-plugin-1.1 is released\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926603 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"000c4675d9b5ce68af156ceb66a45947d268f552","url":"https://api.github.com/repos/apache/openjpa/git/trees/000c4675d9b5ce68af156ceb66a45947d268f552"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bdfd3867a2783fe67544e218ee21a0db704ceef7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bdfd3867a2783fe67544e218ee21a0db704ceef7","html_url":"https://github.com/apache/openjpa/commit/bdfd3867a2783fe67544e218ee21a0db704ceef7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bdfd3867a2783fe67544e218ee21a0db704ceef7/comments","author":null,"committer":null,"parents":[{"sha":"80ca1e76d054d443e9d95810428ee470c8b1dd56","url":"https://api.github.com/repos/apache/openjpa/commits/80ca1e76d054d443e9d95810428ee470c8b1dd56","html_url":"https://github.com/apache/openjpa/commit/80ca1e76d054d443e9d95810428ee470c8b1dd56"}]},{"sha":"00934104b355916d092edb1d8482bf504c0f9ece","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwOTM0MTA0YjM1NTkxNmQwOTJlZGIxZDg0ODJiZjUwNGMwZjllY2U=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T14:59:56Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T14:59:56Z"},"message":"fix source jar generation in preparation for a 2.0.0-beta3 release, as we need maven-source-plugin in the default build instead of the release profile. Developers can still turn off source jar generation for local builds by setting -DcreateSource=none and -DcreateSources=false\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926605 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e20a41f653e41eb1140562f9af690888d2e14afd","url":"https://api.github.com/repos/apache/openjpa/git/trees/e20a41f653e41eb1140562f9af690888d2e14afd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/00934104b355916d092edb1d8482bf504c0f9ece","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/00934104b355916d092edb1d8482bf504c0f9ece","html_url":"https://github.com/apache/openjpa/commit/00934104b355916d092edb1d8482bf504c0f9ece","comments_url":"https://api.github.com/repos/apache/openjpa/commits/00934104b355916d092edb1d8482bf504c0f9ece/comments","author":null,"committer":null,"parents":[{"sha":"bdfd3867a2783fe67544e218ee21a0db704ceef7","url":"https://api.github.com/repos/apache/openjpa/commits/bdfd3867a2783fe67544e218ee21a0db704ceef7","html_url":"https://github.com/apache/openjpa/commit/bdfd3867a2783fe67544e218ee21a0db704ceef7"}]},{"sha":"a471f07d997dce11389df2728045e70316539a22","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0NzFmMDdkOTk3ZGNlMTEzODlkZjI3MjgwNDVlNzAzMTY1MzlhMjI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T18:15:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T18:15:37Z"},"message":"OPENJPA-1557 remove old openjpa.loglevel property\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926696 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"abbad7ca9c76d15dbb1cc0dbac1193af92802ded","url":"https://api.github.com/repos/apache/openjpa/git/trees/abbad7ca9c76d15dbb1cc0dbac1193af92802ded"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a471f07d997dce11389df2728045e70316539a22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a471f07d997dce11389df2728045e70316539a22","html_url":"https://github.com/apache/openjpa/commit/a471f07d997dce11389df2728045e70316539a22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a471f07d997dce11389df2728045e70316539a22/comments","author":null,"committer":null,"parents":[{"sha":"00934104b355916d092edb1d8482bf504c0f9ece","url":"https://api.github.com/repos/apache/openjpa/commits/00934104b355916d092edb1d8482bf504c0f9ece","html_url":"https://github.com/apache/openjpa/commit/00934104b355916d092edb1d8482bf504c0f9ece"}]},{"sha":"e373482239aa7df4912dacc69301b348319a3825","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzNzM0ODIyMzlhYTdkZjQ5MTJkYWNjNjkzMDFiMzQ4MzE5YTM4MjU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T18:47:58Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T18:47:58Z"},"message":"update release notes for beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926719 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55a190bb090c8ebf42d295e8f2f4efe71f2b9505","url":"https://api.github.com/repos/apache/openjpa/git/trees/55a190bb090c8ebf42d295e8f2f4efe71f2b9505"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e373482239aa7df4912dacc69301b348319a3825","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e373482239aa7df4912dacc69301b348319a3825","html_url":"https://github.com/apache/openjpa/commit/e373482239aa7df4912dacc69301b348319a3825","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e373482239aa7df4912dacc69301b348319a3825/comments","author":null,"committer":null,"parents":[{"sha":"a471f07d997dce11389df2728045e70316539a22","url":"https://api.github.com/repos/apache/openjpa/commits/a471f07d997dce11389df2728045e70316539a22","html_url":"https://github.com/apache/openjpa/commit/a471f07d997dce11389df2728045e70316539a22"}]},{"sha":"d4b77d61a4102895b0b16de7665096e6aec5283d","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0Yjc3ZDYxYTQxMDI4OTViMGIxNmRlNzY2NTA5NmU2YWVjNTI4M2Q=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T18:51:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T18:51:12Z"},"message":"OPENJPA-1585 merge doc typo fix from trunk r926699\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926723 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57932092f872c6e8c2b9d2291a06709cd184340b","url":"https://api.github.com/repos/apache/openjpa/git/trees/57932092f872c6e8c2b9d2291a06709cd184340b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d4b77d61a4102895b0b16de7665096e6aec5283d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d4b77d61a4102895b0b16de7665096e6aec5283d","html_url":"https://github.com/apache/openjpa/commit/d4b77d61a4102895b0b16de7665096e6aec5283d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d4b77d61a4102895b0b16de7665096e6aec5283d/comments","author":null,"committer":null,"parents":[{"sha":"e373482239aa7df4912dacc69301b348319a3825","url":"https://api.github.com/repos/apache/openjpa/commits/e373482239aa7df4912dacc69301b348319a3825","html_url":"https://github.com/apache/openjpa/commit/e373482239aa7df4912dacc69301b348319a3825"}]},{"sha":"ff857f1cc550f50a24bdabb3c590c5fe757333e3","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmODU3ZjFjYzU1MGY1MGEyNGJkYWJiM2M1OTBjNWZlNzU3MzMzZTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T19:00:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T19:00:49Z"},"message":"OPENJPA-1466 show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"194af61eedf7c67e90faa5fc08fad3f14b0256cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/194af61eedf7c67e90faa5fc08fad3f14b0256cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff857f1cc550f50a24bdabb3c590c5fe757333e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff857f1cc550f50a24bdabb3c590c5fe757333e3","html_url":"https://github.com/apache/openjpa/commit/ff857f1cc550f50a24bdabb3c590c5fe757333e3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff857f1cc550f50a24bdabb3c590c5fe757333e3/comments","author":null,"committer":null,"parents":[{"sha":"d4b77d61a4102895b0b16de7665096e6aec5283d","url":"https://api.github.com/repos/apache/openjpa/commits/d4b77d61a4102895b0b16de7665096e6aec5283d","html_url":"https://github.com/apache/openjpa/commit/d4b77d61a4102895b0b16de7665096e6aec5283d"}]},{"sha":"9eb0175249040873a2679ddd8c50c653c472347b","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYjAxNzUyNDkwNDA4NzNhMjY3OWRkZDhjNTBjNjUzYzQ3MjM0N2I=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T20:03:21Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T20:03:21Z"},"message":"OPENJPA-1596 Index name too long for DB2 zOS\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926758 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19f2c7f2afa1fbb9ea31ca9a022dd874ce911dca","url":"https://api.github.com/repos/apache/openjpa/git/trees/19f2c7f2afa1fbb9ea31ca9a022dd874ce911dca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9eb0175249040873a2679ddd8c50c653c472347b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9eb0175249040873a2679ddd8c50c653c472347b","html_url":"https://github.com/apache/openjpa/commit/9eb0175249040873a2679ddd8c50c653c472347b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9eb0175249040873a2679ddd8c50c653c472347b/comments","author":null,"committer":null,"parents":[{"sha":"ff857f1cc550f50a24bdabb3c590c5fe757333e3","url":"https://api.github.com/repos/apache/openjpa/commits/ff857f1cc550f50a24bdabb3c590c5fe757333e3","html_url":"https://github.com/apache/openjpa/commit/ff857f1cc550f50a24bdabb3c590c5fe757333e3"}]},{"sha":"78020af127749a051ef78ae68aa18a5a7eebada6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4MDIwYWYxMjc3NDlhMDUxZWY3OGFlNjhhYTE4YTVhN2VlYmFkYTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:15Z"},"message":"[maven-release-plugin] prepare release 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926796 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"639546aecb573e6e8c465e1d7d4f1e79e3959aa6","url":"https://api.github.com/repos/apache/openjpa/git/trees/639546aecb573e6e8c465e1d7d4f1e79e3959aa6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78020af127749a051ef78ae68aa18a5a7eebada6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6","html_url":"https://github.com/apache/openjpa/commit/78020af127749a051ef78ae68aa18a5a7eebada6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6/comments","author":null,"committer":null,"parents":[{"sha":"9eb0175249040873a2679ddd8c50c653c472347b","url":"https://api.github.com/repos/apache/openjpa/commits/9eb0175249040873a2679ddd8c50c653c472347b","html_url":"https://github.com/apache/openjpa/commit/9eb0175249040873a2679ddd8c50c653c472347b"}]},{"sha":"3a9579f475ab4ea3cf3eafb794439a96abfa3fae","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhOTU3OWY0NzVhYjRlYTNjZjNlYWZiNzk0NDM5YTk2YWJmYTNmYWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:19Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:19Z"},"message":"[maven-release-plugin]  copy for tag 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta3@926797 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"639546aecb573e6e8c465e1d7d4f1e79e3959aa6","url":"https://api.github.com/repos/apache/openjpa/git/trees/639546aecb573e6e8c465e1d7d4f1e79e3959aa6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a9579f475ab4ea3cf3eafb794439a96abfa3fae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a9579f475ab4ea3cf3eafb794439a96abfa3fae","html_url":"https://github.com/apache/openjpa/commit/3a9579f475ab4ea3cf3eafb794439a96abfa3fae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/comments","author":null,"committer":null,"parents":[{"sha":"78020af127749a051ef78ae68aa18a5a7eebada6","url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6","html_url":"https://github.com/apache/openjpa/commit/78020af127749a051ef78ae68aa18a5a7eebada6"}]}],"files":[{"sha":"cf9b09eb83c4207ecae116ae455936b1e2b85801","filename":"openjpa-all/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <build>\n@@ -60,7 +60,7 @@\n                         </goals>\n                         <configuration>\n                             <createDependencyReducedPom>true</createDependencyReducedPom>\n-                            <createSourcesJar>true</createSourcesJar>\n+                            <createSourcesJar>${createSources}</createSourcesJar>\n                             <keepDependenciesWithProvidedScope>true</keepDependenciesWithProvidedScope>\n                             <promoteTransitiveDependencies>true</promoteTransitiveDependencies>\n                             <!-- "},{"sha":"1d67e0661b3f41f52e67c2c5d3cebc1f87a30a10","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -32,7 +32,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"042abc8c3d396ea3c96500fe1f16ed8b59eb33d0","filename":"openjpa-integration/daytrader/pom.xml","status":"added","additions":215,"deletions":0,"changes":215,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,215 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-integration</artifactId>\n+        <version>2.0.0-beta3</version>\n+    </parent>\n+\n+    <artifactId>openjpa-integration-daytrader</artifactId>\n+    <packaging>jar</packaging>\n+    <name>OpenJPA Integration Tests - Daytrader</name>\n+    <description>OpenJPA Integration Tests - Daytrader</description>\n+\n+    <properties>\n+        <daytrader.version>2.2-SNAPSHOT</daytrader.version>\n+        <dbcp.maxActive>10</dbcp.maxActive>\n+        <dbcp.maxIdle>5</dbcp.maxIdle>\n+        <dbcp.minIdle>2</dbcp.minIdle>\n+        <dbcp.maxWait>10000</dbcp.maxWait>\n+        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa</artifactId>\n+            <version>${pom.version}</version>\n+        </dependency>\n+        <!-- Maybe one day we can used published artifacts for this...\n+        <dependency>\n+            <groupId>org.apache.geronimo.daytrader.modules</groupId>\n+            <artifactId>daytrader-web</artifactId>\n+            <version>${daytrader.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.daytrader.modules</groupId>\n+            <artifactId>daytrader-entities</artifactId>\n+            <version>${daytrader.version}</version>\n+        </dependency>\n+        -->\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-persistence-jdbc</artifactId>\n+            <version>${pom.version}</version>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-dbcp</groupId>\n+            <artifactId>commons-dbcp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-logging</groupId>\n+            <artifactId>commons-logging</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.derby</groupId>\n+            <artifactId>derby</artifactId>\n+            <version>${derby.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>jakarta-regexp</groupId>\n+            <artifactId>jakarta-regexp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <!-- old way of using antrun to enhance classes\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>test-compile</phase>\n+                        <configuration>\n+                            <tasks>                           \n+                                <ant antfile=\"src/main/ant/enhancer.xml\" target=\"enhance\" inheritRefs=\"true\">\n+                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\n+                                    <property name=\"test\" value=\"${test}\" />\n+                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n+                                    <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n+                                    <property name=\"openjpa.Log\" value=\"${openjpa.Log}\" />\n+                                    <property name=\"build.enhance\" value=\"${build.enhance}\" />\n+                                </ant>\n+                            </tasks>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            -->\n+\n+            <!-- new way of using openjpa-maven-plugin to enhance classes -->\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>openjpa-maven-plugin</artifactId>\n+                <version>1.1</version>\n+                <configuration>\n+                    <includes>org/apache/openjpa/integration/daytrader/*Bean.class</includes>\n+                    <excludes>org/apache/openjpa/persistence/**/*.class</excludes>\n+                    <addDefaultConstructor>true</addDefaultConstructor>\n+                    <enforcePropertyRestrictions>true</enforcePropertyRestrictions>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>enhancer</id>\n+                        <phase>process-test-classes</phase>\n+                        <goals>\n+                            <goal>test-enhance</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.apache.openjpa</groupId>\n+                        <artifactId>openjpa</artifactId>\n+                        <version>${pom.version}</version>\n+                    </dependency>\n+                </dependencies>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <argLine>${test.jvm.arguments}</argLine>\n+                    <excludes>\n+                        <!-- exclude classes that end with 'Test'; these \n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*Test.java</exclude>\n+\n+                        <!-- exclude classes that include a $; inner classes\n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*$*.class</exclude>\n+                        <exclude>org/apache/openjpa/**/*.*.class</exclude>\n+                    </excludes>\n+                    <systemProperties>\n+                        <property>\n+                            <name>openjpa.Log</name>\n+                            <value>${openjpa.Log}</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.DynamicEnhancementAgent</name>\n+                            <value>false</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.ConnectionDriverName</name>\n+                            <value>org.apache.commons.dbcp.BasicDataSource</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.stream.error.file</name>\n+                            <value>target/derby.log</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.locks.deadlockTimeout</name>\n+                            <value>5</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.locks.waitTimeout</name>\n+                            <value>6</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.ConnectionProperties</name>\n+                            <value>DriverClassName=${connection.driver.name},Url=${connection.url},Username=${connection.username},Password=${connection.password},${dbcp.args}</value>\n+                        </property>\n+                    </systemProperties>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"},{"sha":"d80d9bece3608aefa7924a11c6094147e0fe7db2","filename":"openjpa-integration/daytrader/src/main/ant/enhancer.xml","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/main/ant/enhancer.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -72,14 +72,14 @@\n         </taskdef>\n \n         <fileset id=\"enhance.path.ref\"\n-                 dir=\"${project.build.outputDirectory}\">\n-            <include name=\"**/*.class\" />\n+                 dir=\"${project.build.testOutputDirectory}\">\n+            <include name=\"**/daytrader/*.class\" />\n             <exclude name=\"**/Test*.class\" />\n         </fileset>\n         <openjpac>\n             <classpath refid=\"cp\" />\n             <fileset refid=\"enhance.path.ref\" />\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n     </target>\n </project>","previous_filename":"openjpa-integration/osgi-itests/src/main/ant/enhancer.xml"},{"sha":"48dd1cc5cd97a358ce683eae46547405a230c671","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,319 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+//import org.apache.geronimo.samples.daytrader.util.Log;\n+//import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"accountejb\")\n+@Table(name = \"accountejb\")\n+@NamedQueries( {\n+        @NamedQuery(name = \"accountejb.findByCreationdate\", query = \"SELECT a FROM accountejb a WHERE a.creationDate = :creationdate\"),\n+        @NamedQuery(name = \"accountejb.findByOpenbalance\", query = \"SELECT a FROM accountejb a WHERE a.openBalance = :openbalance\"),\n+        @NamedQuery(name = \"accountejb.findByLogoutcount\", query = \"SELECT a FROM accountejb a WHERE a.logoutCount = :logoutcount\"),\n+        @NamedQuery(name = \"accountejb.findByBalance\", query = \"SELECT a FROM accountejb a WHERE a.balance = :balance\"),\n+        @NamedQuery(name = \"accountejb.findByAccountid\", query = \"SELECT a FROM accountejb a WHERE a.accountID = :accountid\"),\n+        @NamedQuery(name = \"accountejb.findByAccountid_eager\", query = \"SELECT a FROM accountejb a LEFT JOIN FETCH a.profile WHERE a.accountID = :accountid\"),\n+        @NamedQuery(name = \"accountejb.findByAccountid_eagerholdings\", query = \"SELECT a FROM accountejb a LEFT JOIN FETCH a.holdings WHERE a.accountID = :accountid\"),\n+        @NamedQuery(name = \"accountejb.findByLastlogin\", query = \"SELECT a FROM accountejb a WHERE a.lastLogin = :lastlogin\"),\n+        @NamedQuery(name = \"accountejb.findByLogincount\", query = \"SELECT a FROM accountejb a WHERE a.loginCount = :logincount\")\n+    })\n+public class AccountDataBean implements Serializable {\n+\n+    private static final long serialVersionUID = -7478907635822129745L;\n+\n+    /* Accessor methods for persistent fields */\n+    @TableGenerator(\n+            name=\"accountIdGen\",\n+            table=\"KEYGENEJB\",\n+            pkColumnName=\"KEYNAME\",\n+            valueColumnName=\"KEYVAL\",\n+            pkColumnValue=\"account\",\n+            allocationSize=1000)\n+    \n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"accountIdGen\")\n+    @Column(name = \"ACCOUNTID\", nullable = false)\n+    private Integer accountID;              /* accountID */\n+    \n+    @Column(name = \"LOGINCOUNT\", nullable = false)\n+    private int loginCount;                 /* loginCount */\n+    \n+    @Column(name = \"LOGOUTCOUNT\", nullable = false)\n+    private int logoutCount;                /* logoutCount */\n+    \n+    @Column(name = \"LASTLOGIN\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date lastLogin;                 /* lastLogin Date */\n+    \n+    @Column(name = \"CREATIONDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date creationDate;              /* creationDate */\n+    \n+    @Column(name = \"BALANCE\")\n+    private BigDecimal balance;             /* balance */\n+    \n+    @Column(name = \"OPENBALANCE\")\n+    private BigDecimal openBalance;         /* open balance */\n+    \n+    @OneToMany(mappedBy = \"account\", fetch=FetchType.LAZY)\n+    private Collection<OrderDataBean> orders;\n+    \n+    @OneToMany(mappedBy = \"account\", fetch=FetchType.LAZY)\n+    private Collection<HoldingDataBean> holdings;\n+    \n+    @OneToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"PROFILE_USERID\")\n+    private AccountProfileDataBean profile;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    /* Accessor methods for relationship fields are only included for the AccountProfile profileID */\n+    @Transient\n+    private String profileID;\n+\n+    public AccountDataBean() {\n+    }\n+\n+    public AccountDataBean(Integer accountID,\n+            int loginCount,\n+            int logoutCount,\n+            Date lastLogin,\n+            Date creationDate,\n+            BigDecimal balance,\n+            BigDecimal openBalance,\n+            String profileID) {\n+        setAccountID(accountID);\n+        setLoginCount(loginCount);\n+        setLogoutCount(logoutCount);\n+        setLastLogin(lastLogin);\n+        setCreationDate(creationDate);\n+        setBalance(balance);\n+        setOpenBalance(openBalance);\n+        setProfileID(profileID);\n+    }\n+\n+    public AccountDataBean(int loginCount,\n+            int logoutCount,\n+            Date lastLogin,\n+            Date creationDate,\n+            BigDecimal balance,\n+            BigDecimal openBalance,\n+            String profileID) {\n+        setLoginCount(loginCount);\n+        setLogoutCount(logoutCount);\n+        setLastLogin(lastLogin);\n+        setCreationDate(creationDate);\n+        setBalance(balance);\n+        setOpenBalance(openBalance);\n+        setProfileID(profileID);\n+    }\n+\n+    public static AccountDataBean getRandomInstance() {\n+        return new AccountDataBean(new Integer(TradeConfig.rndInt(100000)), //accountID\n+                TradeConfig.rndInt(10000), //loginCount\n+                TradeConfig.rndInt(10000), //logoutCount\n+                new java.util.Date(), //lastLogin\n+                new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //creationDate\n+                TradeConfig.rndBigDecimal(1000000.0f), //balance\n+                TradeConfig.rndBigDecimal(1000000.0f), //openBalance\n+                TradeConfig.rndUserID() //profileID\n+        );\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tAccount Data for account: \" + getAccountID()\n+                + \"\\n\\t\\t   loginCount:\" + getLoginCount()\n+                + \"\\n\\t\\t  logoutCount:\" + getLogoutCount()\n+                + \"\\n\\t\\t    lastLogin:\" + getLastLogin()\n+                + \"\\n\\t\\t creationDate:\" + getCreationDate()\n+                + \"\\n\\t\\t      balance:\" + getBalance()\n+                + \"\\n\\t\\t  openBalance:\" + getOpenBalance()\n+                + \"\\n\\t\\t    profileID:\" + getProfileID()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Account Data for account: <B>\" + getAccountID() + \"</B>\"\n+                + \"<LI>   loginCount:\" + getLoginCount() + \"</LI>\"\n+                + \"<LI>  logoutCount:\" + getLogoutCount() + \"</LI>\"\n+                + \"<LI>    lastLogin:\" + getLastLogin() + \"</LI>\"\n+                + \"<LI> creationDate:\" + getCreationDate() + \"</LI>\"\n+                + \"<LI>      balance:\" + getBalance() + \"</LI>\"\n+                + \"<LI>  openBalance:\" + getOpenBalance() + \"</LI>\"\n+                + \"<LI>    profileID:\" + getProfileID() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public Integer getAccountID() {\n+        return accountID;\n+    }\n+\n+    public void setAccountID(Integer accountID) {\n+        this.accountID = accountID;\n+    }\n+\n+    public int getLoginCount() {\n+        return loginCount;\n+    }\n+\n+    public void setLoginCount(int loginCount) {\n+        this.loginCount = loginCount;\n+    }\n+\n+    public int getLogoutCount() {\n+        return logoutCount;\n+    }\n+\n+    public void setLogoutCount(int logoutCount) {\n+        this.logoutCount = logoutCount;\n+    }\n+\n+    public Date getLastLogin() {\n+        return lastLogin;\n+    }\n+\n+    public void setLastLogin(Date lastLogin) {\n+        this.lastLogin = lastLogin;\n+    }\n+\n+    public Date getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public void setCreationDate(Date creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public BigDecimal getBalance() {\n+        return balance;\n+    }\n+\n+    public void setBalance(BigDecimal balance) {\n+        this.balance = balance;\n+    }\n+\n+    public BigDecimal getOpenBalance() {\n+        return openBalance;\n+    }\n+\n+    public void setOpenBalance(BigDecimal openBalance) {\n+        this.openBalance = openBalance;\n+    }\n+\n+    public String getProfileID() {\n+        return profileID;\n+    }\n+\n+    public void setProfileID(String profileID) {\n+        this.profileID = profileID;\n+    }\n+\n+    /* Disabled for D185273\n+     public String getUserID() {\n+         return getProfileID();\n+     }\n+     */\n+\n+    public Collection<OrderDataBean> getOrders() {\n+        return orders;\n+    }\n+\n+    public void setOrders(Collection<OrderDataBean> orders) {\n+        this.orders = orders;\n+    }\n+    \n+    public Collection<HoldingDataBean> getHoldings() {\n+        return holdings;\n+    }\n+\n+    public void setHoldings(Collection<HoldingDataBean> holdings) {\n+        this.holdings = holdings;\n+    }\n+\n+    public AccountProfileDataBean getProfile() {\n+        return profile;\n+    }\n+\n+    public void setProfile(AccountProfileDataBean profile) {\n+        this.profile = profile;\n+    }\n+\n+    public void login(String password) {\n+        AccountProfileDataBean profile = getProfile();\n+        if ((profile == null) || (profile.getPassword().equals(password) == false)) {\n+            String error = \"AccountBean:Login failure for account: \" + getAccountID() +\n+                    ((profile == null) ? \"null AccountProfile\" :\n+                            \"\\n\\tIncorrect password-->\" + profile.getUserID() + \":\" + profile.getPassword());\n+            throw new RuntimeException(error);\n+            \n+        }\n+\n+        setLastLogin(new Timestamp(System.currentTimeMillis()));\n+        setLoginCount(getLoginCount() + 1);\n+    }\n+\n+    public void logout() {\n+        setLogoutCount(getLogoutCount() + 1);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.accountID != null ? this.accountID.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof AccountDataBean)) {\n+            return false;\n+        }\n+        AccountDataBean other = (AccountDataBean)object;\n+        if (this.accountID != other.accountID && (this.accountID == null || !this.accountID.equals(other.accountID))) return false;\n+        return true;\n+    }\n+}"},{"sha":"cb008fc9f6fcd76602f10706228779ecca523c65","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,197 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"accountprofileejb\")\n+@Table(name = \"accountprofileejb\")\n+@NamedQueries( {\n+        @NamedQuery(name = \"accountprofileejb.findByAddress\", query = \"SELECT a FROM accountprofileejb a WHERE a.address = :address\"),\n+        @NamedQuery(name = \"accountprofileejb.findByPasswd\", query = \"SELECT a FROM accountprofileejb a WHERE a.passwd = :passwd\"),\n+        @NamedQuery(name = \"accountprofileejb.findByUserid\", query = \"SELECT a FROM accountprofileejb a WHERE a.userID = :userid\"),\n+        @NamedQuery(name = \"accountprofileejb.findByEmail\", query = \"SELECT a FROM accountprofileejb a WHERE a.email = :email\"),\n+        @NamedQuery(name = \"accountprofileejb.findByCreditcard\", query = \"SELECT a FROM accountprofileejb a WHERE a.creditCard = :creditcard\"),\n+        @NamedQuery(name = \"accountprofileejb.findByFullname\", query = \"SELECT a FROM accountprofileejb a WHERE a.fullName = :fullname\")\n+    })\n+public class AccountProfileDataBean implements java.io.Serializable {\n+\n+    private static final long serialVersionUID = 4243248264186612106L;\n+\n+    /* Accessor methods for persistent fields */\n+\n+    @Id\n+    @Column(name = \"USERID\", nullable = false)\n+    private String userID;              /* userID */\n+    \n+    @Column(name = \"PASSWD\")\n+    private String passwd;              /* password */\n+    \n+    @Column(name = \"FULLNAME\")\n+    private String fullName;            /* fullName */\n+    \n+    @Column(name = \"ADDRESS\")\n+    private String address;             /* address */\n+    \n+    @Column(name = \"EMAIL\")\n+    private String email;               /* email */\n+    \n+    @Column(name = \"CREDITCARD\")\n+    private String creditCard;          /* creditCard */\n+    \n+    @OneToOne(mappedBy=\"profile\", fetch=FetchType.LAZY)\n+    private AccountDataBean account;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    public AccountProfileDataBean() {\n+    }\n+\n+    public AccountProfileDataBean(String userID,\n+            String password,\n+            String fullName,\n+            String address,\n+            String email,\n+            String creditCard) {\n+        setUserID(userID);\n+        setPassword(password);\n+        setFullName(fullName);\n+        setAddress(address);\n+        setEmail(email);\n+        setCreditCard(creditCard);\n+    }\n+\n+    public static AccountProfileDataBean getRandomInstance() {\n+        return new AccountProfileDataBean(\n+                TradeConfig.rndUserID(),                        // userID\n+                TradeConfig.rndUserID(),                        // passwd\n+                TradeConfig.rndFullName(),                      // fullname\n+                TradeConfig.rndAddress(),                       // address\n+                TradeConfig.rndEmail(TradeConfig.rndUserID()),  //email\n+                TradeConfig.rndCreditCard()                     // creditCard\n+        );\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tAccount Profile Data for userID:\" + getUserID()\n+                + \"\\n\\t\\t   passwd:\" + getPassword()\n+                + \"\\n\\t\\t   fullName:\" + getFullName()\n+                + \"\\n\\t\\t    address:\" + getAddress()\n+                + \"\\n\\t\\t      email:\" + getEmail()\n+                + \"\\n\\t\\t creditCard:\" + getCreditCard()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Account Profile Data for userID: <B>\" + getUserID() + \"</B>\"\n+                + \"<LI>   passwd:\" + getPassword() + \"</LI>\"\n+                + \"<LI>   fullName:\" + getFullName() + \"</LI>\"\n+                + \"<LI>    address:\" + getAddress() + \"</LI>\"\n+                + \"<LI>      email:\" + getEmail() + \"</LI>\"\n+                + \"<LI> creditCard:\" + getCreditCard() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public String getUserID() {\n+        return userID;\n+    }\n+\n+    public void setUserID(String userID) {\n+        this.userID = userID;\n+    }\n+\n+    public String getPassword() {\n+        return passwd;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.passwd = password;\n+    }\n+\n+    public String getFullName() {\n+        return fullName;\n+    }\n+\n+    public void setFullName(String fullName) {\n+        this.fullName = fullName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getCreditCard() {\n+        return creditCard;\n+    }\n+\n+    public void setCreditCard(String creditCard) {\n+        this.creditCard = creditCard;\n+    }\n+\n+    public AccountDataBean getAccount() {\n+        return account;\n+    }\n+\n+    public void setAccount(AccountDataBean account) {\n+        this.account = account;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.userID != null ? this.userID.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof AccountProfileDataBean)) {\n+            return false;\n+        }\n+        AccountProfileDataBean other = (AccountProfileDataBean)object;\n+        if (this.userID != other.userID && (this.userID == null || !this.userID.equals(other.userID))) return false;\n+        return true;\n+    }\n+}"},{"sha":"ca066c72324c30a050a3073e4877505090e4d33d","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java","status":"added","additions":234,"deletions":0,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,234 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"holdingejb\")\n+@Table(name = \"holdingejb\")\n+@NamedQueries( {\n+        @NamedQuery(name = \"holdingejb.findByPurchaseprice\", query = \"SELECT h FROM holdingejb h WHERE h.purchasePrice = :purchaseprice\"),\n+        @NamedQuery(name = \"holdingejb.findByHoldingid\", query = \"SELECT h FROM holdingejb h WHERE h.holdingID = :holdingid\"),\n+        @NamedQuery(name = \"holdingejb.findByQuantity\", query = \"SELECT h FROM holdingejb h WHERE h.quantity = :quantity\"),\n+        @NamedQuery(name = \"holdingejb.findByPurchasedate\", query = \"SELECT h FROM holdingejb h WHERE h.purchaseDate = :purchasedate\"),\n+        @NamedQuery(name = \"holdingejb.holdingsByUserID\", query = \"SELECT h FROM holdingejb h where h.account.profile.userID = :userID\")\n+    })\n+public class HoldingDataBean implements Serializable {\n+\n+    private static final long serialVersionUID = 4779293652434823280L;\n+\n+    /* persistent/relationship fields */\n+\n+    @TableGenerator(\n+            name=\"holdingIdGen\",\n+            table=\"KEYGENEJB\",\n+            pkColumnName=\"KEYNAME\",\n+            valueColumnName=\"KEYVAL\",\n+            pkColumnValue=\"holding\",\n+            allocationSize=1000)\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"holdingIdGen\")\n+    @Column(name = \"HOLDINGID\", nullable = false)\n+    private Integer holdingID;              /* holdingID */\n+    \n+    @Column(name = \"QUANTITY\", nullable = false)\n+    private double quantity;                /* quantity */\n+    \n+    @Column(name = \"PURCHASEPRICE\")\n+    private BigDecimal purchasePrice;       /* purchasePrice */\n+    \n+    @Column(name = \"PURCHASEDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date purchaseDate;              /* purchaseDate */\n+    \n+    @Transient\n+    private String quoteID;                 /* Holding(*)  ---> Quote(1) */\n+    \n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"ACCOUNT_ACCOUNTID\")\n+    private AccountDataBean account;\n+    \n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name = \"QUOTE_SYMBOL\")\n+    private QuoteDataBean quote;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    public HoldingDataBean() {\n+    }\n+\n+    public HoldingDataBean(Integer holdingID,\n+            double quantity,\n+            BigDecimal purchasePrice,\n+            Date purchaseDate,\n+            String quoteID) {\n+        setHoldingID(holdingID);\n+        setQuantity(quantity);\n+        setPurchasePrice(purchasePrice);\n+        setPurchaseDate(purchaseDate);\n+        setQuoteID(quoteID);\n+    }\n+\n+    public HoldingDataBean(double quantity,\n+            BigDecimal purchasePrice,\n+            Date purchaseDate,\n+            AccountDataBean account,\n+            QuoteDataBean quote) {\n+        setQuantity(quantity);\n+        setPurchasePrice(purchasePrice);\n+        setPurchaseDate(purchaseDate);\n+        setAccount(account);\n+        setQuote(quote);\n+    }\n+\n+    public static HoldingDataBean getRandomInstance() {\n+        return new HoldingDataBean(\n+                new Integer(TradeConfig.rndInt(100000)),     //holdingID\n+                TradeConfig.rndQuantity(),                     //quantity\n+                TradeConfig.rndBigDecimal(1000.0f),             //purchasePrice\n+                new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //purchaseDate\n+                TradeConfig.rndSymbol()                        // symbol\n+        );\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tHolding Data for holding: \" + getHoldingID()\n+                + \"\\n\\t\\t      quantity:\" + getQuantity()\n+                + \"\\n\\t\\t purchasePrice:\" + getPurchasePrice()\n+                + \"\\n\\t\\t  purchaseDate:\" + getPurchaseDate()\n+                + \"\\n\\t\\t       quoteID:\" + getQuoteID()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Holding Data for holding: \" + getHoldingID() + \"</B>\"\n+                + \"<LI>      quantity:\" + getQuantity() + \"</LI>\"\n+                + \"<LI> purchasePrice:\" + getPurchasePrice() + \"</LI>\"\n+                + \"<LI>  purchaseDate:\" + getPurchaseDate() + \"</LI>\"\n+                + \"<LI>       quoteID:\" + getQuoteID() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public Integer getHoldingID() {\n+        return holdingID;\n+    }\n+\n+    public void setHoldingID(Integer holdingID) {\n+        this.holdingID = holdingID;\n+    }\n+\n+    public double getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(double quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public BigDecimal getPurchasePrice() {\n+        return purchasePrice;\n+    }\n+\n+    public void setPurchasePrice(BigDecimal purchasePrice) {\n+        this.purchasePrice = purchasePrice;\n+    }\n+\n+    public Date getPurchaseDate() {\n+        return purchaseDate;\n+    }\n+\n+    public void setPurchaseDate(Date purchaseDate) {\n+        this.purchaseDate = purchaseDate;\n+    }\n+\n+    public String getQuoteID() {\n+        if (quote != null) {\n+            return quote.getSymbol();\n+        }\n+        return quoteID;\n+    }\n+\n+    public void setQuoteID(String quoteID) {\n+        this.quoteID = quoteID;\n+    }\n+\n+    public AccountDataBean getAccount() {\n+        return account;\n+    }\n+\n+    public void setAccount(AccountDataBean account) {\n+        this.account = account;\n+    }\n+\n+    /* Disabled for D185273\n+     public String getSymbol() {\n+         return getQuoteID();\n+     }\n+     */\n+    \n+    public QuoteDataBean getQuote() {\n+        return quote;\n+    }\n+\n+    public void setQuote(QuoteDataBean quote) {\n+        this.quote = quote;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.holdingID != null ? this.holdingID.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof HoldingDataBean)) {\n+            return false;\n+        }\n+        HoldingDataBean other = (HoldingDataBean) object;\n+        if (this.holdingID != other.holdingID && (this.holdingID == null || !this.holdingID.equals(other.holdingID))) return false;\n+        return true;\n+    }\n+}"},{"sha":"51b5bdc5261ce4ba7f69316e66a59aed609b374c","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java","status":"added","additions":249,"deletions":0,"changes":249,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,249 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.Iterator;\n+\n+// import org.apache.geronimo.samples.daytrader.beans.QuoteDataBean;\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+public class MarketSummaryDataBean implements Serializable\n+{\n+\n+\tprivate static final long serialVersionUID = -2753373502228082501L;\n+\t\n+    private BigDecimal \tTSIA;\t\t\t/* Trade Stock Index Average */\n+\tprivate BigDecimal \topenTSIA;\t\t/* Trade Stock Index Average at the open */\t\n+\tprivate double  \tvolume; \t\t/* volume of shares traded */\n+\tprivate Collection \ttopGainers;\t\t/* Collection of top gaining stocks */\n+\tprivate Collection \ttopLosers;\t\t/* Collection of top losing stocks */\t\n+\t//FUTURE private Collection \ttopVolume;\t\t/* Collection of top stocks by volume */\t\t\n+\tprivate Date\t\t\tsummaryDate;   /* Date this summary was taken */\n+\t\n+\t//cache the gainPercent once computed for this bean\n+\tprivate BigDecimal  gainPercent=null;\n+\n+\tpublic MarketSummaryDataBean(){ }\n+\tpublic MarketSummaryDataBean(BigDecimal TSIA,\n+\t\t\t\t\t\t\tBigDecimal  openTSIA,\n+\t\t\t\t\t\t\tdouble\t\tvolume,\n+\t\t\t\t\t\t\tCollection \ttopGainers,\n+\t\t\t\t\t\t\tCollection \ttopLosers//, Collection topVolume\n+\t\t\t\t\t\t\t)\n+\t{\n+\t\tsetTSIA(TSIA);\n+\t\tsetOpenTSIA(openTSIA);\n+\t\tsetVolume(volume);\n+\t\tsetTopGainers(topGainers);\n+\t\tsetTopLosers(topLosers);\n+\t\tsetSummaryDate(new java.sql.Date(System.currentTimeMillis()));\n+\t\tgainPercent = computeGainPercent(getTSIA(), getOpenTSIA());\n+\t\t\n+\t}\n+\t\n+\tpublic static MarketSummaryDataBean getRandomInstance() {\n+\t\tCollection gain = new ArrayList();\n+\t\tCollection lose = new ArrayList();\n+\t\t\n+\t\tfor (int ii = 0; ii < 5; ii++) {\n+\t\t\tQuoteDataBean quote1 = QuoteDataBean.getRandomInstance();\n+\t\t\tQuoteDataBean quote2 = QuoteDataBean.getRandomInstance();\n+\t\t\t\n+\t\t\tgain.add(quote1);\n+\t\t\tlose.add(quote2);\n+\t\t}\n+\t\t\n+\t\treturn new MarketSummaryDataBean(\n+\t\t\tTradeConfig.rndBigDecimal(1000000.0f),\n+\t\t\tTradeConfig.rndBigDecimal(1000000.0f),\n+\t\t\tTradeConfig.rndQuantity(),\n+\t\t\tgain,\n+\t\t\tlose\n+\t\t);\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\tString ret = \"\\n\\tMarket Summary at: \" + getSummaryDate()\n+\t\t\t+ \"\\n\\t\\t        TSIA:\" + getTSIA()\n+\t\t\t+ \"\\n\\t\\t    openTSIA:\" + getOpenTSIA()\n+\t\t\t+ \"\\n\\t\\t        gain:\" + getGainPercent()\n+\t\t\t+ \"\\n\\t\\t      volume:\" + getVolume()\n+\t\t\t;\n+\n+\t\tif ( (getTopGainers()==null) || (getTopLosers()==null) )\n+\t\t\treturn ret;\n+\t\tret += \"\\n\\t\\t   Current Top Gainers:\";\n+\t\tIterator it = getTopGainers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"\\n\\t\\t\\t\"  + quoteData.toString() );\n+\t\t}\n+\t\tret += \"\\n\\t\\t   Current Top Losers:\";\n+\t\tit = getTopLosers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"\\n\\t\\t\\t\"  + quoteData.toString() );\n+\t\t}\n+\t\treturn ret;\t\t\n+\t}\n+\tpublic String toHTML()\n+\t{\n+\t\tString ret = \"<BR>Market Summary at: \" + getSummaryDate()\n+\t\t\t+ \"<LI>        TSIA:\" + getTSIA() + \"</LI>\"\n+\t\t\t+ \"<LI>    openTSIA:\" + getOpenTSIA() + \"</LI>\"\n+\t\t\t+ \"<LI>      volume:\" + getVolume() + \"</LI>\"\n+\t\t\t;\n+\t\tif ( (getTopGainers()==null) || (getTopLosers()==null) )\n+\t\t\treturn ret;\n+\t\tret += \"<BR> Current Top Gainers:\";\n+\t\tIterator it = getTopGainers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"<LI>\"  + quoteData.toString()  + \"</LI>\" );\n+\t\t}\n+\t\tret += \"<BR>   Current Top Losers:\";\n+\t\tit = getTopLosers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"<LI>\"  + quoteData.toString()  + \"</LI>\" );\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\tpublic void print()\n+\t{\n+\t\t// Log.log( this.toString() );\n+\t}\t\n+\t\n+\tpublic BigDecimal getGainPercent()\n+\t{\n+\t\tif ( gainPercent == null )\n+\t\t\tgainPercent = computeGainPercent(getTSIA(), getOpenTSIA());\n+\t\treturn gainPercent;\n+\t}\n+\n+\n+\t/**\n+\t * Gets the tSIA\n+\t * @return Returns a BigDecimal\n+\t */\n+\tpublic BigDecimal getTSIA() {\n+\t\treturn TSIA;\n+\t}\n+\t/**\n+\t * Sets the tSIA\n+\t * @param tSIA The tSIA to set\n+\t */\n+\tpublic void setTSIA(BigDecimal tSIA) {\n+\t\tTSIA = tSIA;\n+\t}\n+\n+\t/**\n+\t * Gets the openTSIA\n+\t * @return Returns a BigDecimal\n+\t */\n+\tpublic BigDecimal getOpenTSIA() {\n+\t\treturn openTSIA;\n+\t}\n+\t/**\n+\t * Sets the openTSIA\n+\t * @param openTSIA The openTSIA to set\n+\t */\n+\tpublic void setOpenTSIA(BigDecimal openTSIA) {\n+\t\tthis.openTSIA = openTSIA;\n+\t}\n+\n+\t/**\n+\t * Gets the volume\n+\t * @return Returns a BigDecimal\n+\t */\n+\tpublic double getVolume() {\n+\t\treturn volume;\n+\t}\n+\t/**\n+\t * Sets the volume\n+\t * @param volume The volume to set\n+\t */\n+\tpublic void setVolume(double volume) {\n+\t\tthis.volume = volume;\n+\t}\n+\n+\t/**\n+\t * Gets the topGainers\n+\t * @return Returns a Collection\n+\t */\n+\tpublic Collection getTopGainers() {\n+\t\treturn topGainers;\n+\t}\n+\t/**\n+\t * Sets the topGainers\n+\t * @param topGainers The topGainers to set\n+\t */\n+\tpublic void setTopGainers(Collection topGainers) {\n+\t\tthis.topGainers = topGainers;\n+\t}\n+\n+\t/**\n+\t * Gets the topLosers\n+\t * @return Returns a Collection\n+\t */\n+\tpublic Collection getTopLosers() {\n+\t\treturn topLosers;\n+\t}\n+\t/**\n+\t * Sets the topLosers\n+\t * @param topLosers The topLosers to set\n+\t */\n+\tpublic void setTopLosers(Collection topLosers) {\n+\t\tthis.topLosers = topLosers;\n+\t}\n+\n+\t/**\n+\t * Gets the summaryDate\n+\t * @return Returns a Date\n+\t */\n+\tpublic Date getSummaryDate() {\n+\t\treturn summaryDate;\n+\t}\n+\t/**\n+\t * Sets the summaryDate\n+\t * @param summaryDate The summaryDate to set\n+\t */\n+\tpublic void setSummaryDate(Date summaryDate) {\n+\t\tthis.summaryDate = summaryDate;\n+\t}\n+\n+\t// from FinancialUtils\n+    private BigDecimal computeGainPercent(BigDecimal currentBalance, BigDecimal openBalance)\n+    {\n+        if (openBalance.doubleValue() == 0.0) return (new BigDecimal(0.00)).setScale(2);\n+        BigDecimal gainPercent = currentBalance.divide(openBalance, BigDecimal.ROUND_HALF_UP)\n+            .subtract((new BigDecimal(1.00)).setScale(2)).multiply((new BigDecimal(100.00)).setScale(2));\n+        return gainPercent;\n+    }\n+\n+}"},{"sha":"d29f60bffdf07c123c6259fd1b410613dc673aea","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java","status":"added","additions":380,"deletions":0,"changes":380,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,380 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name=\"orderejb\")\n+@Table(name = \"orderejb\")\n+@NamedQueries( {\n+    @NamedQuery(name = \"orderejb.findByOrderfee\", query = \"SELECT o FROM orderejb o WHERE o.orderFee = :orderfee\"),\n+    @NamedQuery(name = \"orderejb.findByCompletiondate\", query = \"SELECT o FROM orderejb o WHERE o.completionDate = :completiondate\"),\n+    @NamedQuery(name = \"orderejb.findByOrdertype\", query = \"SELECT o FROM orderejb o WHERE o.orderType = :ordertype\"),\n+    @NamedQuery(name = \"orderejb.findByOrderstatus\", query = \"SELECT o FROM orderejb o WHERE o.orderStatus = :orderstatus\"),\n+    @NamedQuery(name = \"orderejb.findByPrice\", query = \"SELECT o FROM orderejb o WHERE o.price = :price\"),\n+    @NamedQuery(name = \"orderejb.findByQuantity\", query = \"SELECT o FROM orderejb o WHERE o.quantity = :quantity\"),\n+    @NamedQuery(name = \"orderejb.findByOpendate\", query = \"SELECT o FROM orderejb o WHERE o.openDate = :opendate\"),\n+    @NamedQuery(name = \"orderejb.findByOrderid\", query = \"SELECT o FROM orderejb o WHERE o.orderID = :orderid\"),\n+    @NamedQuery(name = \"orderejb.findByAccountAccountid\", query = \"SELECT o FROM orderejb o WHERE o.account.accountID = :accountAccountid\"),\n+    @NamedQuery(name = \"orderejb.findByQuoteSymbol\", query = \"SELECT o FROM orderejb o WHERE o.quote.symbol = :quoteSymbol\"),\n+    // Never used query related to FK constraint on holdingejb. the FK constraint will cause EJB3 runtime mode failure. So comment it.\n+    //@NamedQuery(name = \"orderejb.findByHoldingHoldingid\", query = \"SELECT o FROM orderejb o WHERE o.holding.holdingID = :holdingHoldingid\"),\n+    @NamedQuery(name = \"orderejb.closedOrders\", query = \"SELECT o FROM orderejb o WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID\"),\n+    @NamedQuery(name = \"orderejb.completeClosedOrders\", query = \"UPDATE orderejb o SET o.orderStatus = 'completed' WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID\")\n+})\n+public class OrderDataBean implements Serializable\n+{\n+\n+    private static final long serialVersionUID = 7374883697399608766L;\n+\n+    @TableGenerator(\n+            name=\"orderIdGen\",\n+            table=\"KEYGENEJB\",\n+            pkColumnName=\"KEYNAME\",\n+            valueColumnName=\"KEYVAL\",\n+            pkColumnValue=\"order\",\n+            allocationSize=1000)\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"orderIdGen\")\n+    @Column(name = \"ORDERID\", nullable = false)        \n+    private Integer orderID;            /* orderID */\n+    \n+    @Column(name = \"ORDERTYPE\")\n+    private String orderType;           /* orderType (buy, sell, etc.) */\n+    \n+    @Column(name = \"ORDERSTATUS\")\n+    private String orderStatus;         /* orderStatus (open, processing, completed, closed, cancelled) */\n+    \n+    @Column(name = \"OPENDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date openDate;              /* openDate (when the order was entered) */\n+    \n+    @Column(name = \"COMPLETIONDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date completionDate;\t\t/* completionDate */\n+    \n+    @Column(name = \"QUANTITY\", nullable = false)\n+    private double quantity;\t\t\t/* quantity */\n+    \n+    @Column(name = \"PRICE\")\n+    private BigDecimal price;\t\t\t\t/* price */\n+    \n+    @Column(name = \"ORDERFEE\")\n+    private BigDecimal orderFee;\t\t\t/* price */\n+    \n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"ACCOUNT_ACCOUNTID\")\n+    private AccountDataBean account;\n+    \n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"QUOTE_SYMBOL\")\n+    private QuoteDataBean quote;\n+    \n+    // Cause sell operation failed, see JIRA DAYTRADER-63 for details.\n+    //@OneToOne(fetch=FetchType.LAZY)\n+    //@JoinColumn(name = \"HOLDING_HOLDINGID\")\n+    // Cause sell operation failed, see JIRA DAYTRADER-63 for details.\n+    @Transient    \n+    private HoldingDataBean holding;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    /* Fields for relationship fields are not kept in the Data Bean */\n+    @Transient\n+    private String symbol;\n+\n+    public OrderDataBean() {        \n+    }\n+\n+    public OrderDataBean(Integer orderID,\n+                            String orderType,\n+                            String orderStatus,\n+                            Date openDate,\n+                            Date completionDate,\n+                            double quantity,\n+                            BigDecimal price,\n+                            BigDecimal orderFee,\n+                            String symbol\n+                            ) {\n+        setOrderID(orderID);\n+        setOrderType(orderType);\n+        setOrderStatus(orderStatus);\n+        setOpenDate(openDate);\n+        setCompletionDate(completionDate);\n+        setQuantity(quantity);\n+        setPrice(price);\n+        setOrderFee(orderFee);\n+        setSymbol(symbol);\n+    }\n+    \n+    public OrderDataBean(String orderType,\n+            String orderStatus,\n+            Date openDate,\n+            Date completionDate,\n+            double quantity,\n+            BigDecimal price,\n+            BigDecimal orderFee,\n+            AccountDataBean account,\n+            QuoteDataBean quote, HoldingDataBean holding) {\n+        setOrderType(orderType);\n+        setOrderStatus(orderStatus);\n+        setOpenDate(openDate);\n+        setCompletionDate(completionDate);\n+        setQuantity(quantity);\n+        setPrice(price);\n+        setOrderFee(orderFee);\n+        setAccount(account);\n+        setQuote(quote);\n+        setHolding(holding);\n+    }\n+\n+    public static OrderDataBean getRandomInstance() {\n+        return new OrderDataBean(\n+            new Integer(TradeConfig.rndInt(100000)),\n+            TradeConfig.rndBoolean() ? \"buy\" : \"sell\",\n+            \"open\",\n+            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),\n+            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),\n+            TradeConfig.rndQuantity(),\n+            TradeConfig.rndBigDecimal(1000.0f),\n+            TradeConfig.rndBigDecimal(1000.0f),\n+            TradeConfig.rndSymbol()\n+        );\n+    }\n+\n+    public String toString()\n+    {\n+        return \"Order \" + getOrderID()\n+                + \"\\n\\t      orderType: \" + getOrderType()\n+                + \"\\n\\t    orderStatus: \" +\tgetOrderStatus()\n+                + \"\\n\\t       openDate: \" +\tgetOpenDate()\n+                + \"\\n\\t completionDate: \" +\tgetCompletionDate()\n+                + \"\\n\\t       quantity: \" +\tgetQuantity()\n+                + \"\\n\\t          price: \" +\tgetPrice()\n+                + \"\\n\\t       orderFee: \" +\tgetOrderFee()\n+                + \"\\n\\t         symbol: \" +\tgetSymbol()\n+                ;\n+    }\n+    public String toHTML()\n+    {\n+        return \"<BR>Order <B>\" + getOrderID() + \"</B>\"\n+                + \"<LI>      orderType: \" + getOrderType() + \"</LI>\"\n+                + \"<LI>    orderStatus: \" +\tgetOrderStatus() + \"</LI>\"\n+                + \"<LI>       openDate: \" +\tgetOpenDate() + \"</LI>\"\n+                + \"<LI> completionDate: \" +\tgetCompletionDate() + \"</LI>\"\n+                + \"<LI>       quantity: \" +\tgetQuantity() + \"</LI>\"\n+                + \"<LI>          price: \" +\tgetPrice() + \"</LI>\"\n+                + \"<LI>       orderFee: \" +\tgetOrderFee() + \"</LI>\"\n+                + \"<LI>         symbol: \" +\tgetSymbol() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print()\n+    {\n+        // Log.log( this.toString() );\n+    }\n+\n+    public Integer getOrderID() {\n+        return orderID;\n+    }\n+\n+    public void setOrderID(Integer orderID) {\n+        this.orderID = orderID;\n+    }\n+\n+    public String getOrderType() {\n+        return orderType;\n+    }\n+\n+    public void setOrderType(String orderType) {\n+        this.orderType = orderType;\n+    }\n+\n+    public String getOrderStatus() {\n+        return orderStatus;\n+    }\n+\n+    public void setOrderStatus(String orderStatus) {\n+        this.orderStatus = orderStatus;\n+    }\n+\n+    public Date getOpenDate() {\n+        return openDate;\n+    }\n+\n+    public void setOpenDate(Date openDate) {\n+        this.openDate = openDate;\n+    }\n+\n+    public Date getCompletionDate() {\n+        return completionDate;\n+    }\n+\n+    public void setCompletionDate(Date completionDate) {\n+        this.completionDate = completionDate;\n+    }\n+\n+    public double getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(double quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public BigDecimal getOrderFee() {\n+        return orderFee;\n+    }\n+\n+    public void setOrderFee(BigDecimal orderFee) {\n+        this.orderFee = orderFee;\n+    }\n+\n+    public String getSymbol() {\n+        if (quote != null) {\n+            return quote.getSymbol();\n+        }\n+        return symbol;\n+    }\n+\n+    public void setSymbol(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public AccountDataBean getAccount() {\n+        return account;\n+    }\n+\n+    public void setAccount(AccountDataBean account) {\n+        this.account = account;\n+    }\n+\n+    public QuoteDataBean getQuote() {\n+        return quote;\n+    }\n+\n+    public void setQuote(QuoteDataBean quote) {\n+        this.quote = quote;\n+    }\n+\n+    public HoldingDataBean getHolding() {\n+        return holding;\n+    }\n+\n+    public void setHolding(HoldingDataBean holding) {\n+        this.holding = holding;\n+    }\n+\n+    public boolean isBuy()\n+    {\n+    \tString orderType = getOrderType();\n+    \tif ( orderType.compareToIgnoreCase(\"buy\") == 0 )\n+    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isSell()\n+    {\n+    \tString orderType = getOrderType();\n+    \tif ( orderType.compareToIgnoreCase(\"sell\") == 0 )\n+    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isOpen()\n+    {\n+    \tString orderStatus = getOrderStatus();\n+    \tif ( (orderStatus.compareToIgnoreCase(\"open\") == 0) ||\n+\t         (orderStatus.compareToIgnoreCase(\"processing\") == 0) )\n+\t    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isCompleted()\n+    {\n+    \tString orderStatus = getOrderStatus();\n+    \tif ( (orderStatus.compareToIgnoreCase(\"completed\") == 0) ||\n+\t         (orderStatus.compareToIgnoreCase(\"alertcompleted\") == 0)    ||\n+\t         (orderStatus.compareToIgnoreCase(\"cancelled\") == 0) )\n+\t    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isCancelled()\n+    {\n+    \tString orderStatus = getOrderStatus();\n+    \tif (orderStatus.compareToIgnoreCase(\"cancelled\") == 0)\n+\t    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+\n+\tpublic void cancel()\n+\t{\n+\t\tsetOrderStatus(\"cancelled\");\n+\t}\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.orderID != null ? this.orderID.hashCode() : 0);\n+        return hash;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof OrderDataBean)) {\n+            return false;\n+        }\n+        OrderDataBean other = (OrderDataBean)object;\n+        if (this.orderID != other.orderID && (this.orderID == null || !this.orderID.equals(other.orderID))) return false;\n+        return true;\n+    }\n+}\n+"},{"sha":"6807f6fff81ebd57bccde70bf5f5ae27f8c11169","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java","status":"added","additions":236,"deletions":0,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,236 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"quoteejb\")\n+@Table(name = \"quoteejb\")\n+@NamedQueries({\n+    @NamedQuery(name = \"quoteejb.allQuotes\",query = \"SELECT q FROM quoteejb q\"),\n+//    @NamedQuery(name = \"quoteejb.quotesByChange\",query = \"SELECT q FROM quoteejb q WHERE q.symbol LIKE 's:1__' ORDER BY q.change1 DESC\"),\n+    @NamedQuery(name = \"quoteejb.quotesByChange\",query = \"SELECT q FROM quoteejb q WHERE q.symbol LIKE 's:1__' ORDER BY q.change1 \"),\n+    @NamedQuery(name = \"quoteejb.findByLow\", query = \"SELECT q FROM quoteejb q WHERE q.low = :low\"),\n+    @NamedQuery(name = \"quoteejb.findByOpen1\", query = \"SELECT q FROM quoteejb q WHERE q.open1 = :open1\"),\n+    @NamedQuery(name = \"quoteejb.findByVolume\", query = \"SELECT q FROM quoteejb q WHERE q.volume = :volume\"),\n+    @NamedQuery(name = \"quoteejb.findByPrice\", query = \"SELECT q FROM quoteejb q WHERE q.price = :price\"),\n+    @NamedQuery(name = \"quoteejb.findByHigh\", query = \"SELECT q FROM quoteejb q WHERE q.high = :high\"),\n+    @NamedQuery(name = \"quoteejb.findByCompanyname\", query = \"SELECT q FROM quoteejb q WHERE q.companyName = :companyname\"),\n+    @NamedQuery(name = \"quoteejb.findBySymbol\", query = \"SELECT q FROM quoteejb q WHERE q.symbol = :symbol\"),\n+    @NamedQuery(name = \"quoteejb.findByChange1\", query = \"SELECT q FROM quoteejb q WHERE q.change1 = :change1\")\n+})\n+@NamedNativeQueries({\n+    // @NamedNativeQuery(name=\"quoteejb.quoteForUpdate\", query=\"select * from quoteejb q where q.symbol=? for update\",resultClass=org.apache.geronimo.samples.daytrader.beans.QuoteDataBean.class)\n+    @NamedNativeQuery(name=\"quoteejb.quoteForUpdate\", query=\"select * from quoteejb q where q.symbol=? for update\",resultClass=org.apache.openjpa.integration.daytrader.QuoteDataBean.class)\n+})\n+public class QuoteDataBean implements Serializable {\n+\n+    private static final long serialVersionUID = 124109406376061341L;\n+\n+    /* Accessor methods for persistent fields */\n+\n+    @Id\n+    @Column(name = \"SYMBOL\", nullable = false)\n+    private String symbol;          /* symbol */\n+    \n+    @Column(name = \"COMPANYNAME\")\n+    private String companyName;     /* companyName */\n+    \n+    @Column(name = \"VOLUME\", nullable = false)\n+    private double volume;          /* volume */\n+    \n+    @Column(name = \"PRICE\")\n+    private BigDecimal price;       /* price */\n+    \n+    @Column(name = \"OPEN1\")\n+    private BigDecimal open1;       /* open1 price */\n+    \n+    @Column(name = \"LOW\")\n+    private BigDecimal low;         /* low price */\n+    \n+    @Column(name = \"HIGH\")\n+    private BigDecimal high;        /* high price */\n+    \n+    @Column(name = \"CHANGE1\", nullable = false)\n+    private double change1;         /* price change */\n+    \n+    /* @OneToMany(mappedBy = \"quote\")\n+    private Collection<OrderDataBean> orders;\n+    */\n+    \n+//    @Version\n+//    private Integer optLock;\n+\n+    /* Accessor methods for relationship fields are not kept in the DataBean */\n+    \n+    public QuoteDataBean() {\n+    }\n+\n+    public QuoteDataBean(String symbol, String companyName, double volume,\n+            BigDecimal price, BigDecimal open, BigDecimal low,\n+            BigDecimal high, double change) {\n+        setSymbol(symbol);\n+        setCompanyName(companyName);\n+        setVolume(volume);\n+        setPrice(price);\n+        setOpen(open);\n+        setLow(low);\n+        setHigh(high);\n+        setChange(change);\n+    }\n+\n+    public static QuoteDataBean getRandomInstance() {\n+        return new QuoteDataBean(\n+                TradeConfig.rndSymbol(),                 //symbol\n+                TradeConfig.rndSymbol() + \" Incorporated\",         //Company Name\n+                TradeConfig.rndFloat(100000),            //volume\n+                TradeConfig.rndBigDecimal(1000.0f),     //price\n+                TradeConfig.rndBigDecimal(1000.0f),     //open1\n+                TradeConfig.rndBigDecimal(1000.0f),     //low\n+                TradeConfig.rndBigDecimal(1000.0f),     //high\n+                TradeConfig.rndFloat(100000)            //volume\n+        );\n+    }\n+\n+    //Create a \"zero\" value quoteDataBean for the given symbol\n+    public QuoteDataBean(String symbol) {\n+        setSymbol(symbol);\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tQuote Data for: \" + getSymbol()\n+                + \"\\n\\t\\t companyName: \" + getCompanyName()\n+                + \"\\n\\t\\t      volume: \" + getVolume()\n+                + \"\\n\\t\\t       price: \" + getPrice()\n+                + \"\\n\\t\\t        open1: \" + getOpen()\n+                + \"\\n\\t\\t         low: \" + getLow()\n+                + \"\\n\\t\\t        high: \" + getHigh()\n+                + \"\\n\\t\\t      change1: \" + getChange()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Quote Data for: \" + getSymbol()\n+                + \"<LI> companyName: \" + getCompanyName() + \"</LI>\"\n+                + \"<LI>      volume: \" + getVolume() + \"</LI>\"\n+                + \"<LI>       price: \" + getPrice() + \"</LI>\"\n+                + \"<LI>        open1: \" + getOpen() + \"</LI>\"\n+                + \"<LI>         low: \" + getLow() + \"</LI>\"\n+                + \"<LI>        high: \" + getHigh() + \"</LI>\"\n+                + \"<LI>      change1: \" + getChange() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    public void setSymbol(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public String getCompanyName() {\n+        return companyName;\n+    }\n+\n+    public void setCompanyName(String companyName) {\n+        this.companyName = companyName;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public BigDecimal getOpen() {\n+        return open1;\n+    }\n+\n+    public void setOpen(BigDecimal open) {\n+        this.open1 = open;\n+    }\n+\n+    public BigDecimal getLow() {\n+        return low;\n+    }\n+\n+    public void setLow(BigDecimal low) {\n+        this.low = low;\n+    }\n+\n+    public BigDecimal getHigh() {\n+        return high;\n+    }\n+\n+    public void setHigh(BigDecimal high) {\n+        this.high = high;\n+    }\n+\n+    public double getChange() {\n+        return change1;\n+    }\n+\n+    public void setChange(double change) {\n+        this.change1 = change;\n+    }\n+\n+    public double getVolume() {\n+        return volume;\n+    }\n+\n+    public void setVolume(double volume) {\n+        this.volume = volume;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.symbol != null ? this.symbol.hashCode() : 0);\n+        return hash;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof QuoteDataBean)) {\n+            return false;\n+        }\n+        QuoteDataBean other = (QuoteDataBean)object;\n+        if (this.symbol != other.symbol && (this.symbol == null || !this.symbol.equals(other.symbol))) return false;\n+        return true;\n+    }\n+}"},{"sha":"d7b047827a29b37dc9620f123ea3a08040030d01","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java","status":"added","additions":430,"deletions":0,"changes":430,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,430 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+// import org.apache.geronimo.samples.daytrader.beans.AccountDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.AccountProfileDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.HoldingDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.OrderDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.QuoteDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.FinancialUtils;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+// import org.apache.geronimo.samples.daytrader.web.TradeBuildDB;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Uses Daytrader to stress test OpenJPA.\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TestDaytrader extends SingleEMFTestCase {\n+\n+    OpenJPAEntityManagerFactorySPI emf = null;\n+    //private TradeJPADirect trade = null;\n+    \n+    @Override\n+    public void setUp() {\n+        super.setUp(DROP_TABLES, AccountDataBean.class,\n+            AccountProfileDataBean.class, HoldingDataBean.class,\n+            OrderDataBean.class, QuoteDataBean.class);\n+        if (emf == null) {\n+            emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory(\n+                \"daytrader\", \"persistence.xml\");\n+            assertNotNull(emf);\n+        }\n+        //trade = new TradeJPADirect((EntityManagerFactory)emf);\n+    }\n+    \n+    /**\n+     * Scenario being tested:\n+     * @throws Exception \n+     *   \n+     */\n+    public void newtestTradeBuildDB() throws Exception {\n+        getLog().info(\"testTradeBuildDB() started\");\n+        assertNotNull(emf);\n+        TradeBuildDB tradeDB = new TradeBuildDB(getLog(), emf);\n+        getLog().info(\"testTradeBuildDB() completed\");\n+    }\n+\n+    public void testTradeBuildDB() {\n+        getLog().info(\"testTradeBuildDB() started\");\n+        getLog().info(\"testTradeBuildDB() createQuotes(\" + TradeConfig.getMAX_QUOTES() + \")\");\n+        createQuotes(TradeConfig.getMAX_QUOTES());\n+        getLog().info(\"testTradeBuildDB() createAccounts(\" + TradeConfig.getMAX_USERS() + \")\");\n+        createAccounts(TradeConfig.getMAX_USERS()); // with 10 holdings each\n+        getLog().info(\"testTradeBuildDB() completed\");\n+    }\n+\n+    // from TradeBuildDB.TradeBuildDB()\n+    private void createQuotes(int num) {\n+        int errorCount = 0;\n+        String symbol, companyName;\n+        TradeConfig.setMAX_QUOTES(num);\n+        for (int i = 0; i < num; i++) {\n+            symbol = \"s:\" + i;\n+            companyName = \"S\" + i + \" Incorporated\";\n+            try {\n+                QuoteDataBean quoteData = createQuote(symbol, companyName,\n+                    new java.math.BigDecimal(TradeConfig.rndPrice()));\n+            } catch (Exception e) {\n+                if (errorCount++ >= 10) {\n+                    getLog().error(\"createQuotes - aborting after 10 create quote errors\", e);\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+    }\n+    \n+    // from TradeJPADirect.createQuote()\n+    private QuoteDataBean createQuote(String symbol, String companyName, BigDecimal price) {\n+        EntityManager entityManager = emf.createEntityManager();\n+        QuoteDataBean quote = new QuoteDataBean(symbol, companyName, 0, price, price, price, price, 0);\n+        try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(quote);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            getLog().error(\"createQuote - rollback - exception creating Quote\", e);\n+            entityManager.getTransaction().rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            entityManager.close();\n+        }\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"createQuote-->\" + quote);\n+        return quote;\n+    }\n+\n+    // from TradeBuildDB.TradeBuildDB()\n+    private void createAccounts(int num) {\n+        TradeConfig.setMAX_USERS(num);\n+        for (int i = 0; i < num; i++) {\n+            String userID = \"uid:\" + i;\n+            String fullname = TradeConfig.rndFullName();\n+            String email = TradeConfig.rndEmail(userID);\n+            String address = TradeConfig.rndAddress();\n+            String creditcard = TradeConfig.rndCreditCard();\n+            double initialBalance = (double) (TradeConfig.rndInt(100000)) + 200000;\n+            if (i == 0) {\n+                initialBalance = 1000000; // uid:0 starts with a cool million.\n+            }\n+            \n+            AccountDataBean accountData = register(userID, \"xxx\", fullname, address,\n+                email, creditcard, new BigDecimal(initialBalance));\n+\n+            String results, symbol;\n+            if (accountData != null) {\n+                // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2\n+                // int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1);\n+                int holdings = TradeConfig.getMAX_HOLDINGS();\n+                double quantity = 0;\n+                OrderDataBean orderData;\n+                for (int j = 0; j < holdings; j++) {\n+                    symbol = TradeConfig.rndSymbol();\n+                    quantity = TradeConfig.rndQuantity();\n+                    orderData = buy(userID, symbol, quantity, TradeConfig.orderProcessingMode);\n+                }\n+                if (getLog().isTraceEnabled())\n+                    getLog().trace(\"createAccounts - created \" + holdings + \" for userID=\" + userID);\n+            } else {\n+                throw new RuntimeException(\"createAccounts - userID=\" + userID + \" already registered.\");\n+            }\n+        }\n+    }\n+    \n+    // from TradeJPADirect.register()\n+    private AccountDataBean register(String userID, String password, String fullname, \n+        String address, String email, String creditcard, BigDecimal openBalance) {\n+        AccountDataBean account = null;\n+        AccountProfileDataBean profile = null;\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        // assume that profile with the desired userID doeesn't already exist\n+        profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);\n+        account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);\n+        profile.setAccount(account);\n+        account.setProfile(profile);\n+        try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(profile);\n+            entityManager.persist(account);\n+            entityManager.getTransaction().commit();\n+        } catch (Exception e) {\n+            getLog().error(\"createQuote - rollback - exception creating Quote\", e);\n+            entityManager.getTransaction().rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            entityManager.close();\n+        }\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"register-->\" + account);\n+        return account;\n+    }\n+\n+    private OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) {\n+        OrderDataBean order = null;\n+        BigDecimal total;\n+        EntityManager entityManager = emf.createEntityManager();\n+        assertNotNull(entityManager);\n+\n+        try {\n+            if (getLog().isTraceEnabled())\n+                getLog().trace(\"buy-->userID=\" + userID);\n+\n+            entityManager.getTransaction().begin();\n+\n+            AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+            assertNotNull(profile);\n+            AccountDataBean account = profile.getAccount();\n+            assertNotNull(account);\n+\n+            QuoteDataBean quote = entityManager.find(QuoteDataBean.class, symbol);\n+            assertNotNull(quote);\n+\n+            HoldingDataBean holding = null; // The holding will be created by this buy order\n+\n+            order = createOrder(account, quote, holding, \"buy\", quantity, entityManager);\n+            assertNotNull(order);\n+\n+            // order = createOrder(account, quote, holding, \"buy\", quantity);\n+            // UPDATE - account should be credited during completeOrder\n+\n+            BigDecimal price = quote.getPrice();\n+            BigDecimal orderFee = order.getOrderFee();\n+            BigDecimal balance = account.getBalance();\n+            total = (new BigDecimal(quantity).multiply(price)).add(orderFee);\n+            account.setBalance(balance.subtract(total));\n+\n+            // commit the transaction before calling completeOrder\n+            entityManager.getTransaction().commit();\n+\n+            // if (orderProcessingMode == TradeConfig.SYNCH)\n+            completeOrder(order.getOrderID(), false);\n+        } catch (Exception e) {\n+            getLog().error(\"buy(\" + userID + \",\" + symbol + \",\" + quantity + \") --> failed\", e);\n+            // On exception - cancel the order\n+            // TODO figure out how to do this with JPA\n+            if (order != null)\n+                order.cancel();\n+\n+            entityManager.getTransaction().rollback();\n+            entityManager.close();\n+            entityManager = null;\n+\n+            // throw new EJBException(e);\n+            throw new RuntimeException(e);\n+        }\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+\n+        // after the purchase or sell of a stock, update the stocks volume and price\n+        updateQuotePriceVolume(symbol, TradeConfig.getRandomPriceChangeFactor(), quantity);\n+\n+        return order;\n+    }\n+\n+    private OrderDataBean createOrder(AccountDataBean account,\n+            QuoteDataBean quote, HoldingDataBean holding, String orderType,\n+            double quantity, EntityManager entityManager) {\n+        OrderDataBean order;\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"createOrder(orderID=\" + \" account=\"\n+                + ((account == null) ? null : account.getAccountID())\n+                + \" quote=\" + ((quote == null) ? null : quote.getSymbol())\n+                + \" orderType=\" + orderType + \" quantity=\" + quantity);\n+        try {\n+            order = new OrderDataBean(orderType, \n+                \"open\", \n+                new Timestamp(System.currentTimeMillis()), \n+                null, \n+                quantity, \n+                // quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND),\n+                quote.getPrice().setScale(2, BigDecimal.ROUND_HALF_UP),\n+                TradeConfig.getOrderFee(orderType), \n+                account, \n+                quote, \n+                holding);\n+            entityManager.persist(order);\n+        } catch (Exception e) {\n+            getLog().error(\"createOrder - failed to create Order\", e);\n+            throw new RuntimeException(\"createOrder - failed to create Order\", e);\n+        }\n+        return order;\n+    }\n+\n+    private OrderDataBean completeOrder(Integer orderID, boolean twoPhase) throws Exception {\n+        EntityManager entityManager = emf.createEntityManager();\n+        OrderDataBean order = null;\n+\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"completeOrder - orderID=\" + orderID + \" twoPhase=\" + twoPhase);\n+\n+        order = entityManager.find(OrderDataBean.class, orderID);\n+        assertNotNull(order);\n+        order.getQuote();\n+        if (order == null) {\n+            getLog().error(\"completeOrder - Unable to find Order \" + orderID + \" FBPK returned \" + order);\n+            return null;\n+        }\n+        if (order.isCompleted()) {\n+            throw new RuntimeException(\"completeOrder - attempt to complete Order that is already completed\\n\" + order);\n+        }\n+        AccountDataBean account = order.getAccount();\n+        assertNotNull(account);\n+        QuoteDataBean quote = order.getQuote();\n+        assertNotNull(quote);\n+        HoldingDataBean holding = order.getHolding();\n+        BigDecimal price = order.getPrice();\n+        double quantity = order.getQuantity();\n+\n+        String userID = account.getProfile().getUserID();\n+        assertNotNull(userID);\n+\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"completeOrder--> Completing Order \"\n+                      + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                      + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                      + quote + \"\\n\\t Holding info: \" + holding);\n+\n+        HoldingDataBean newHolding = null;\n+        if (order.isBuy()) {\n+            newHolding = createHolding(account, quote, quantity, price, entityManager);\n+            assertNotNull(newHolding);\n+        }\n+        try {\n+            entityManager.getTransaction().begin();\n+            if (newHolding != null) {\n+                order.setHolding(newHolding);\n+            }\n+            if (order.isSell()) {\n+                if (holding == null) {\n+                    getLog().error(\"completeOrder - error \" + order.getOrderID() + \" holding already sold\");\n+                    order.cancel();\n+                    entityManager.getTransaction().commit();\n+                    return order;\n+                }\n+                else {\n+                    entityManager.remove(holding);\n+                    order.setHolding(null);\n+                }\n+            }\n+            order.setOrderStatus(\"closed\");\n+            order.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));\n+            if (getLog().isTraceEnabled())\n+                getLog().trace(\"completeOrder--> Completed Order \"\n+                          + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                          + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                          + quote + \"\\n\\t Holding info: \" + holding);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            getLog().error(e);\n+            entityManager.getTransaction().rollback();\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+        return order;\n+    }\n+\n+    private HoldingDataBean createHolding(AccountDataBean account,\n+            QuoteDataBean quote, double quantity, BigDecimal purchasePrice,\n+            EntityManager entityManager) throws Exception {\n+\n+        HoldingDataBean newHolding = new HoldingDataBean(quantity,\n+            purchasePrice, new Timestamp(System.currentTimeMillis()),\n+            account, quote);\n+        assertNotNull(newHolding);\n+        try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(newHolding);\n+            entityManager.getTransaction().commit();\n+        } catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        }\n+        return newHolding;\n+    }\n+\n+    public QuoteDataBean updateQuotePriceVolume(String symbol, BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getUpdateQuotePrices())\n+            return new QuoteDataBean();\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"updateQuote - symbol=\" + symbol + \" changeFactor=\" + changeFactor);\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        QuoteDataBean quote = null;\n+        if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {\n+            quote = entityManager.find(QuoteDataBean.class, symbol);\n+        } else if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {\n+            Query q = entityManager.createNamedQuery(\"quoteejb.quoteForUpdate\");\n+            q.setParameter(1, symbol);\n+            quote = (QuoteDataBean) q.getSingleResult();\n+        }\n+        BigDecimal oldPrice = quote.getPrice();\n+        if (quote.getPrice().equals(TradeConfig.PENNY_STOCK_PRICE)) {\n+            changeFactor = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;\n+        }\n+        BigDecimal newPrice = changeFactor.multiply(oldPrice).setScale(2, BigDecimal.ROUND_HALF_UP);\n+\n+        try {\n+            quote.setPrice(newPrice);\n+            quote.setVolume(quote.getVolume() + sharesTraded);\n+            quote.setChange((newPrice.subtract(quote.getOpen()).doubleValue()));\n+\n+            entityManager.getTransaction().begin();\n+            entityManager.merge(quote);\n+            entityManager.getTransaction().commit();\n+        } catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+        this.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);\n+        return quote;\n+    }\n+    \n+    private void publishQuotePriceChange(QuoteDataBean quote, BigDecimal oldPrice, \n+            BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getPublishQuotePriceChange())\n+            return;\n+        getLog().error(\"publishQuotePriceChange - is not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\"publishQuotePriceChange - is not implemented for this runtime mode\");\n+    }\n+\n+}"},{"sha":"2bf3fff90537f4812ec22226d7974bfc71857f32","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,131 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.lib.log.Log;\n+\n+// import org.apache.geronimo.samples.daytrader.core.*;\n+// import org.apache.geronimo.samples.daytrader.core.direct.*;\n+// import org.apache.geronimo.samples.daytrader.beans.*;\n+// import org.apache.geronimo.samples.daytrader.util.*;\n+\n+/**\n+ * TradeBuildDB uses operations provided by the TradeApplication to \n+ *   (a) create the Database tables \n+ *   (b) populate a DayTrader database without creating the tables. \n+ * Specifically, a new DayTrader User population is created using\n+ * UserIDs of the form \"uid:xxx\" where xxx is a sequential number \n+ * (e.g. uid:0, uid:1, etc.). New stocks are also created of the form \"s:xxx\",\n+ * again where xxx represents sequential numbers (e.g. s:1, s:2, etc.)\n+ */\n+public class TradeBuildDB {\n+\n+    private TradeConfig tCfg = new TradeConfig();\n+    private TradeJPADirect trade = null;\n+    private Log log = null;\n+\n+    /**\n+     * Re-create the DayTrader db tables and populate them OR just populate a \n+     * DayTrader DB, logging to the provided output stream\n+     */\n+    public TradeBuildDB(Log log, EntityManagerFactory emf) throws Exception {\n+        this.log = log;\n+        // update config\n+        tCfg.setRunTimeMode(TradeConfig.JPA);\n+        tCfg.setLog(log);\n+        \n+        // always use TradeJPADirect mode\n+        trade = new TradeJPADirect(log, emf);\n+\n+        // removed - createDBTables\n+\n+        // removed - Attempt to delete all of the Trade users and Trade Quotes first\n+        \n+        // create MAX_QUOTES\n+        createQuotes();\n+\n+        // create MAX_USERS\n+        createAccounts();\n+    }\n+\n+    private void createQuotes() {\n+        int errorCount = 0;\n+        String symbol, companyName;\n+        log.info(\"TradeBuildDB.createQuotes(\" + TradeConfig.getMAX_QUOTES() + \")\");\n+        for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) {\n+            symbol = \"s:\" + i;\n+            companyName = \"S\" + i + \" Incorporated\";\n+            try {\n+                QuoteDataBean quoteData = trade.createQuote(symbol, companyName,\n+                    new java.math.BigDecimal(TradeConfig.rndPrice()));\n+            } catch (Exception e) {\n+                if (errorCount++ >= 10) {\n+                    log.error(\"createQuotes - aborting after 10 create quote errors\", e);\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+    }\n+    \n+    private void createAccounts() {\n+        log.info(\"TradeBuildDB.createAccounts(\" + TradeConfig.getMAX_USERS() + \")\");\n+        for (int i = 0; i < TradeConfig.getMAX_USERS(); i++) {\n+            String userID = \"uid:\" + i;\n+            String fullname = TradeConfig.rndFullName();\n+            String email = TradeConfig.rndEmail(userID);\n+            String address = TradeConfig.rndAddress();\n+            String creditcard = TradeConfig.rndCreditCard();\n+            double initialBalance = (double) (TradeConfig.rndInt(100000)) + 200000;\n+            if (i == 0) {\n+                initialBalance = 1000000; // uid:0 starts with a cool million.\n+            }\n+            \n+            AccountDataBean accountData = trade.register(userID, \"xxx\", fullname, address,\n+                email, creditcard, new BigDecimal(initialBalance));\n+\n+            String symbol;\n+            if (accountData != null) {\n+                // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2\n+                // int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1);\n+                int holdings = TradeConfig.getMAX_HOLDINGS();\n+                double quantity = 0;\n+                OrderDataBean orderData = null;\n+                for (int j = 0; j < holdings; j++) {\n+                    symbol = TradeConfig.rndSymbol();\n+                    quantity = TradeConfig.rndQuantity();\n+                    orderData = trade.buy(userID, symbol, quantity, TradeConfig.orderProcessingMode);\n+                }\n+                if (log.isTraceEnabled()) {\n+                    log.trace(\"createAccounts - created \" + holdings + \" for userID=\" + userID + \" order=\" + orderData);\n+                }\n+            } else {\n+                throw new RuntimeException(\"createAccounts - userID=\" + userID + \" already registered.\");\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"99654e66fd5cc43d7af13c10b70502772695e1ec","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java","status":"added","additions":914,"deletions":0,"changes":914,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,914 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+import org.apache.openjpa.lib.log.Log;\n+\n+\n+/**\n+ * TradeConfig is a JavaBean holding all configuration and runtime parameters for the Trade application\n+ * TradeConfig sets runtime parameters such as the RunTimeMode (EJB3, DIRECT, SESSION3, JDBC, JPA)\n+ *\n+ */\n+\n+public class TradeConfig {\n+\n+    // added by OpenJPA\n+    public static Log log = null;\n+    \n+    /* Trade Runtime Configuration Parameters */\n+    public static final int UNKNOWN = -1;\n+\n+    /* Trade Runtime Mode parameters */\n+    public static String[] runTimeModeNames = {\"Full EJB3\", \"Direct (JDBC)\", \"Session (EJB3) To Direct\", \"Web JDBC\", \"Web JPA\"};\n+    public static final int EJB3 = 0;\n+    public static final int DIRECT = 1;\n+    public static final int SESSION3 = 2;\n+    public static final int JDBC = 3;\n+    public static final int JPA = 4;\n+    public static int runTimeMode = JPA;\n+\t\n+    /* Trade JPA Layer parameters */\n+\tpublic static String[] jpaLayerNames = {\"OpenJPA\", \"Hibernate\"};\n+\tpublic static final int OPENJPA = 0;\n+\tpublic static final int HIBERNATE = 1;\n+\tpublic static int jpaLayer = OPENJPA;\n+\n+\tpublic static String[] orderProcessingModeNames =\n+\t\t{ \"Synchronous\", \"Asynchronous_2-Phase\" };\n+\tpublic static final int SYNCH = 0;\n+\tpublic static final int ASYNCH_2PHASE = 1;\n+\tpublic static int orderProcessingMode = SYNCH;\n+\n+\tpublic static String[] accessModeNames = { \"Standard\", \"WebServices\" };\n+\tpublic static final int STANDARD = 0;\n+\tpublic static final int WEBSERVICES = 1;\n+\tprivate static int accessMode = STANDARD;\n+\n+\t/* Trade Scenario Workload parameters */\n+\tpublic static String[] workloadMixNames = { \"Standard\", \"High-Volume\", };\n+\tpublic final static int SCENARIOMIX_STANDARD = 0;\n+\tpublic final static int SCENARIOMIX_HIGHVOLUME = 1;\n+\tpublic static int workloadMix = SCENARIOMIX_STANDARD;\n+\n+\t/* Trade Web Interface parameters */\n+\tpublic static String[] webInterfaceNames = { \"JSP\", \"JSP-Images\" };\n+\tpublic static final int JSP = 0;\n+\tpublic static final int JSP_Images = 1;\n+\tpublic static int webInterface = JSP;\n+\n+\t/* Trade Caching Type parameters */\n+\tpublic static String[] cachingTypeNames = { \"DistributedMap\", \"Command Caching\", \"No Caching\" };\n+\tpublic static final int DISTRIBUTEDMAP = 0;\n+\tpublic static final int COMMAND_CACHING = 1;\n+\tpublic static final int NO_CACHING = 2;\n+\tpublic static int cachingType = NO_CACHING;\n+\t\n+\t/* Trade Database Scaling parameters*/\n+\tprivate static int MAX_USERS = 500;\n+\tprivate static int MAX_QUOTES = 1000;\n+\n+\t/* Trade Database specific paramters */\n+\tpublic static String JDBC_UID = null;\n+\tpublic static String JDBC_PWD = null;\n+\tpublic static String DS_NAME = \"java:comp/env/jdbc/TradeDataSource\";\n+\n+\t/*Trade SOAP specific parameters */\n+\tprivate static String SoapURL =\n+\t\t\"http://localhost:8080/daytrader/services/TradeWSServices\";\n+\n+\t/*Trade XA Datasource specific parameters */\n+\tpublic static boolean JDBCDriverNeedsGlobalTransaction = false;\n+\n+\t/* Trade Config Miscellaneous itmes */\n+\tpublic static String DATASOURCE = \"java:comp/env/jdbc/TradeDataSource\";\n+\tpublic static int KEYBLOCKSIZE = 1000;\n+\tpublic static int QUOTES_PER_PAGE = 10;\n+\tpublic static boolean RND_USER = true;\n+\t//public static int\t\tRND_SEED = 0;\n+\tprivate static int MAX_HOLDINGS = 10;\n+\tprivate static int count = 0;\n+\tprivate static Object userID_count_semaphore = new Object();\n+\tprivate static int userID_count = 0;\n+\tprivate static String hostName = null;\n+\tprivate static Random r0 = new Random(System.currentTimeMillis());\n+\t//private static Random r1 = new Random(RND_SEED);\n+\tprivate static Random randomNumberGenerator = r0;\n+\tpublic static final String newUserPrefix = \"ru:\";\n+\tpublic static final int verifyPercent = 5;\n+\tprivate static boolean trace = false;\n+\tprivate static boolean actionTrace = false;\n+\tprivate static boolean updateQuotePrices = true;\n+\tprivate static int primIterations = 1;\n+\tprivate static boolean longRun = true;\n+\tprivate static boolean publishQuotePriceChange = false;\n+\t\n+\t/**\n+\t *   -1 means every operation\n+\t *    0 means never perform a market summary\n+\t *  > 0 means number of seconds between summaries.  These will be\n+\t *      synchronized so only one transaction in this period will create a summary and \n+\t *      will cache its results.\n+\t */\n+\tprivate static int  marketSummaryInterval = 20;\n+\n+\t/*\n+\t * Penny stocks is a problem where the random price change factor gets a stock\n+\t * down to $.01.  In this case trade jumpstarts the price back to $6.00 to\n+\t * keep the math interesting.\n+\t */\n+\tpublic static BigDecimal PENNY_STOCK_PRICE;\n+\tpublic static BigDecimal PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;\n+\tstatic {\n+\t\tPENNY_STOCK_PRICE = new BigDecimal(0.01);\n+\t\tPENNY_STOCK_PRICE =\n+\t\t\tPENNY_STOCK_PRICE.setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t\tPENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER = new BigDecimal(600.0);\n+\t\tPENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER.setScale(\n+\t\t\t2,\n+\t\t\tBigDecimal.ROUND_HALF_UP);\n+\t}\n+\n+\t/* CJB (DAYTRADER-25) - Also need to impose a ceiling on the quote price to ensure\n+\t * prevent account and holding balances from exceeding the databases decimal precision.\n+\t * At some point, this maximum value can be used to trigger a stock split.\n+\t */\n+\n+\tpublic static BigDecimal MAXIMUM_STOCK_PRICE;\n+\tpublic static BigDecimal MAXIMUM_STOCK_SPLIT_MULTIPLIER;\n+\tstatic {\n+\t\tMAXIMUM_STOCK_PRICE = new BigDecimal(400);\n+\t\tMAXIMUM_STOCK_PRICE.setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t\tMAXIMUM_STOCK_SPLIT_MULTIPLIER = new BigDecimal(0.5);\n+\t\tMAXIMUM_STOCK_SPLIT_MULTIPLIER.setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t}\n+\n+\t/* Trade Scenario actions mixes. Each of the array rows represents a specific Trade Scenario Mix. \n+\t   The columns give the percentages for each action in the column header. Note: \"login\" is always 0. \n+\t   logout represents both login and logout (because each logout operation will cause a new login when\n+\t   the user context attempts the next action.\n+\t */\n+\t/* Trade Scenario Workload parameters */\n+\tpublic final static int HOME_OP = 0;\n+\tpublic final static int QUOTE_OP = 1;\n+\tpublic final static int LOGIN_OP = 2;\n+\tpublic final static int LOGOUT_OP = 3;\n+\tpublic final static int REGISTER_OP = 4;\n+\tpublic final static int ACCOUNT_OP = 5;\n+\tpublic final static int PORTFOLIO_OP = 6;\n+\tpublic final static int BUY_OP = 7;\n+\tpublic final static int SELL_OP = 8;\n+\tpublic final static int UPDATEACCOUNT_OP = 9;\n+\n+\tprivate static int scenarioMixes[][] = {\n+\t\t//\th\tq\tl\to\tr\ta\tp\tb\ts\tu\n+\t\t{ 20, 40, 0, 4, 2, 10, 12, 4, 4, 4 }, //STANDARD\n+\t\t{\n+\t\t\t20, 40, 0, 4, 2, 7, 7, 7, 7, 6 }, //High Volume\n+\t};\n+\tprivate static char actions[] =\n+\t\t{ 'h', 'q', 'l', 'o', 'r', 'a', 'p', 'b', 's', 'u' };\n+\tprivate static int sellDeficit = 0;\n+\t//Tracks the number of buys over sell when a users portfolio is empty\n+\t// Used to maintain the correct ratio of buys/sells\n+\n+\t/* JSP pages for all Trade Actions */\n+\n+\tpublic final static int WELCOME_PAGE = 0;\n+\tpublic final static int REGISTER_PAGE = 1;\n+\tpublic final static int PORTFOLIO_PAGE = 2;\n+\tpublic final static int QUOTE_PAGE = 3;\n+\tpublic final static int HOME_PAGE = 4;\n+\tpublic final static int ACCOUNT_PAGE = 5;\n+\tpublic final static int ORDER_PAGE = 6;\n+\tpublic final static int CONFIG_PAGE = 7;\n+\tpublic final static int STATS_PAGE = 8;\n+\n+\t//FUTURE Add XML/XSL View\n+\tpublic static String webUI[][] =\n+\t\t{\n+\t\t\t{\n+\t\t\t\t\"/welcome.jsp\",\n+\t\t\t\t\"/register.jsp\",\n+\t\t\t\t\"/portfolio.jsp\",\n+\t\t\t\t\"/quote.jsp\",\n+\t\t\t\t\"/tradehome.jsp\",\n+\t\t\t\t\"/account.jsp\",\n+\t\t\t\t\"/order.jsp\",\n+\t\t\t\t\"/config.jsp\",\n+\t\t\t\t\"/runStats.jsp\" },\n+\t\t//JSP Interface\n+\t\t{\n+\t\t\t\"/welcomeImg.jsp\",\n+\t\t\t\t\"/registerImg.jsp\",\n+\t\t\t\t\"/portfolioImg.jsp\",\n+\t\t\t\t\"/quoteImg.jsp\",\n+\t\t\t\t\"/tradehomeImg.jsp\",\n+\t\t\t\t\"/accountImg.jsp\",\n+\t\t\t\t\"/orderImg.jsp\",\n+\t\t\t\t\"/config.jsp\",\n+\t\t\t\t\"/runStats.jsp\" },\n+\t\t//JSP Interface\t\n+\t};\n+\n+\t// These are the property settings the VAJ access beans look for.\t\n+\tprivate static final String NAMESERVICE_TYPE_PROPERTY =\n+\t\t\"java.naming.factory.initial\";\n+\tprivate static final String NAMESERVICE_PROVIDER_URL_PROPERTY =\n+\t\t\"java.naming.provider.url\";\n+\n+\t// FUTURE:\n+\t// If a \"trade2.properties\" property file is supplied, reset the default values \n+\t// to match those specified in the file. This provides a persistent runtime \n+\t// property mechanism during server startup\n+\n+\t/**\n+\t * Return the hostname for this system\n+\t * Creation date: (2/16/2000 9:02:25 PM)\n+\t */\n+\n+\tprivate static String getHostname() {\n+\t\ttry {\n+\t\t\tif (hostName == null) {\n+\t\t\t\thostName = java.net.InetAddress.getLocalHost().getHostName();\n+\t\t\t\t//Strip of fully qualifed domain if necessary\n+\t\t\t\ttry {\n+\t\t\t\t\thostName = hostName.substring(0, hostName.indexOf('.'));\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tlog.error(\n+\t\t\t\t\"Exception getting local host name using 'localhost' - \",\n+\t\t\t\te);\n+\t\t\thostName = \"localhost\";\n+\t\t}\n+\t\treturn hostName;\n+\t}\n+\n+\t/**\n+\t * Return a Trade UI Web page based on the current configuration\n+\t * This may return a JSP page or a Servlet page \n+\t * Creation date: (3/14/2000 9:08:34 PM)\n+\t */\n+\n+\tpublic static String getPage(int pageNumber) {\n+\t\treturn webUI[webInterface][pageNumber];\n+\t}\n+\n+\t/**\n+\t * Return the list of run time mode names\n+\t * Creation date: (3/8/2000 5:58:34 PM)\n+\t * @return java.lang.String[]\n+\t */\n+\tpublic static java.lang.String[] getRunTimeModeNames() {\n+\t\treturn runTimeModeNames;\n+\t}\n+\n+\tprivate static int scenarioCount = 0;\n+\n+\t/**\n+\t * Return a Trade Scenario Operation based on the setting of the current mix (TradeScenarioMix)\n+\t * Creation date: (2/10/2000 9:08:34 PM)\n+\t */\n+\n+\tpublic static char getScenarioAction(boolean newUser) {\n+\t\tint r = rndInt(100); //0 to 99 = 100\n+\t\tint i = 0;\n+\t\tint sum = scenarioMixes[workloadMix][i];\n+\t\twhile (sum <= r) {\n+\t\t\ti++;\n+\t\t\tsum += scenarioMixes[workloadMix][i];\n+\t\t}\n+\n+\t\tincrementScenarioCount();\n+\n+\t\t/* In TradeScenarioServlet, if a sell action is selected, but the users portfolio is empty,\n+\t\t * a buy is executed instead and sellDefecit is incremented. This allows the number of buy/sell\n+\t\t * operations to stay in sync w/ the given Trade mix.\n+\t\t */\n+\n+\t\tif ((!newUser) && (actions[i] == 'b')) {\n+\t\t\tsynchronized (TradeConfig.class) {\n+\t\t\t\tif (sellDeficit > 0) {\n+\t\t\t\t\tsellDeficit--;\n+\t\t\t\t\treturn 's';\n+\t\t\t\t\t//Special case for TradeScenarioServlet to note this is a buy switched to a sell to fix sellDeficit\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn actions[i];\n+\t}\n+\n+\tpublic static String getUserID() {\n+\t\tString userID;\n+\t\tif (RND_USER) {\n+\t\t\tuserID = rndUserID();\n+\t\t} else {\n+\t\t\tuserID = nextUserID();\n+\t\t}\n+\t\treturn userID;\n+\t}\n+\tprivate static final BigDecimal orderFee = new BigDecimal(\"24.95\");\n+\tprivate static final BigDecimal cashFee = new BigDecimal(\"0.0\");\n+\tpublic static BigDecimal getOrderFee(String orderType) {\n+\t\tif ((orderType.compareToIgnoreCase(\"BUY\") == 0)\n+\t\t\t|| (orderType.compareToIgnoreCase(\"SELL\") == 0))\n+\t\t\treturn orderFee;\n+\n+\t\treturn cashFee;\n+\n+\t}\n+\n+\t/**\n+\t * Increment the sell deficit counter\n+\t * Creation date: (6/21/2000 11:33:45 AM)\n+\t */\n+\tpublic synchronized static void incrementSellDeficit() {\n+\t\tsellDeficit++;\n+\t}\n+\n+\tpublic static String nextUserID() {\n+\t\tString userID;\n+\t\tsynchronized (userID_count_semaphore) {\n+\t\t\tuserID = \"uid:\" + userID_count;\n+\t\t\tuserID_count++;\n+\t\t\tif (userID_count % MAX_USERS == 0) {\n+\t\t\t\tuserID_count = 0;\n+\t\t\t}\n+\t\t}\n+\t\treturn userID;\n+\t}\n+\tpublic static double random() {\n+\t\treturn randomNumberGenerator.nextDouble();\n+\t}\n+\tpublic static String rndAddress() {\n+\t\treturn rndInt(1000) + \" Oak St.\";\n+\t}\n+\tpublic static String rndBalance() {\n+\t\t//Give all new users a cool mill in which to trade\n+\t\treturn \"1000000\";\n+\t}\n+\tpublic static String rndCreditCard() {\n+\t\treturn rndInt(100)\n+\t\t\t+ \"-\"\n+\t\t\t+ rndInt(1000)\n+\t\t\t+ \"-\"\n+\t\t\t+ rndInt(1000)\n+\t\t\t+ \"-\"\n+\t\t\t+ rndInt(1000);\n+\t}\n+\tpublic static String rndEmail(String userID) {\n+\t\treturn userID + \"@\" + rndInt(100) + \".com\";\n+\t}\n+\tpublic static String rndFullName() {\n+\t\treturn \"first:\" + rndInt(1000) + \" last:\" + rndInt(5000);\n+\t}\n+\tpublic static int rndInt(int i) {\n+\t\treturn (new Float(random() * i)).intValue();\n+\t}\n+\tpublic static float rndFloat(int i) {\n+\t\treturn (new Float(random() * i)).floatValue();\n+\t}\n+\tpublic static BigDecimal rndBigDecimal(float f) {\n+\t\treturn (new BigDecimal(random() * f)).setScale(\n+\t\t\t2,\n+\t\t\tBigDecimal.ROUND_HALF_UP);\n+\t}\n+\n+\tpublic static boolean rndBoolean() {\n+\t\treturn randomNumberGenerator.nextBoolean();\n+\t}\n+\n+\t/**\n+\t * Returns a new Trade user\n+\t * Creation date: (2/16/2000 8:50:35 PM)\n+\t */\n+\tpublic synchronized static String rndNewUserID() {\n+\n+\t\treturn newUserPrefix\n+\t\t\t+ getHostname()\n+\t\t\t+ System.currentTimeMillis()\n+\t\t\t+ count++;\n+\t}\n+\n+\tpublic static float rndPrice() {\n+\t\treturn ((new Integer(rndInt(200))).floatValue()) + 1.0f;\n+\t}\n+\tprivate final static BigDecimal ONE = new BigDecimal(1.0);\n+\tpublic static BigDecimal getRandomPriceChangeFactor() {\n+\t\t// CJB (DAYTRADER-25) - Vary change factor between 1.2 and 0.8\n+\t\tdouble percentGain = rndFloat(1) * 0.2;\n+\t\tif (random() < .5)\n+\t\t\tpercentGain *= -1;\n+\t\tpercentGain += 1;\n+\n+\t\t// change factor is between +/- 20%\n+\t\tBigDecimal percentGainBD =\n+\t\t\t(new BigDecimal(percentGain)).setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t\tif (percentGainBD.doubleValue() <= 0.0)\n+\t\t\tpercentGainBD = ONE;\n+\n+\t\treturn percentGainBD;\n+\t}\n+\n+\tpublic static float rndQuantity() {\n+\t\treturn ((new Integer(rndInt(200))).floatValue()) + 1.0f;\n+\t}\n+\n+\tpublic static String rndSymbol() {\n+\t\treturn \"s:\" + rndInt(MAX_QUOTES - 1);\n+\t}\n+\tpublic static String rndSymbols() {\n+\n+\t\tString symbols = \"\";\n+\t\tint num_symbols = rndInt(QUOTES_PER_PAGE);\n+\n+\t\tfor (int i = 0; i <= num_symbols; i++) {\n+\t\t\tsymbols += \"s:\" + rndInt(MAX_QUOTES - 1);\n+\t\t\tif (i < num_symbols)\n+\t\t\t\tsymbols += \",\";\n+\t\t}\n+\t\treturn symbols;\n+\t}\n+\n+\tpublic static String rndUserID() {\n+\t\tString nextUser = getNextUserIDFromDeck();\n+\t\tif (log.isTraceEnabled())\n+\t\t\tlog.trace(\"TradeConfig:rndUserID -- new trader = \" + nextUser);\n+\n+\t\treturn nextUser;\n+\t}\n+\n+\tprivate static synchronized String getNextUserIDFromDeck() {\n+\t\tint numUsers = getMAX_USERS();\n+\t\tif (deck == null) {\n+\t\t\tdeck = new ArrayList(numUsers);\n+\t\t\tfor (int i = 0; i < numUsers; i++)\n+\t\t\t\tdeck.add(i, new Integer(i));\n+\t\t\tjava.util.Collections.shuffle(deck, r0);\n+\t\t}\n+\t\tif (card >= numUsers)\n+\t\t\tcard = 0;\n+\t\treturn \"uid:\" + deck.get(card++);\n+\n+\t}\n+\n+\t//Trade implements a card deck approach to selecting \n+\t// users for trading with tradescenarioservlet\n+\tprivate static ArrayList deck = null;\n+\tprivate static int card = 0;\n+\n+\t/**\n+\t * Set the list of run time mode names\n+\t * Creation date: (3/8/2000 5:58:34 PM)\n+\t * @param newRunTimeModeNames java.lang.String[]\n+\t */\n+\tpublic static void setRunTimeModeNames(\n+\t\tjava.lang.String[] newRunTimeModeNames) {\n+\t\trunTimeModeNames = newRunTimeModeNames;\n+\t}\n+\t/**\n+\t * This is a convenience method for servlets to set Trade configuration parameters\n+\t * from servlet initialization parameters. The servlet provides the init param and its\n+\t * value as strings. This method then parses the parameter, converts the value to the\n+\t * correct type and sets the corresponding TradeConfig parameter to the converted value\n+\t * \n+\t */\n+\tpublic static void setConfigParam(String parm, String value) {\n+\t    if (log.isTraceEnabled())\n+\t        log.trace(\"TradeConfig setting parameter: \" + parm + \"=\" + value);\n+\t\t// Compare the parm value to valid TradeConfig parameters that can be set\n+\t\t// by servlet initialization\n+\n+\t\t// First check the proposed new parm and value - if empty or null ignore it\n+\t\tif (parm == null)\n+\t\t\treturn;\n+\t\tparm = parm.trim();\n+\t\tif (parm.length() <= 0)\n+\t\t\treturn;\n+\t\tif (value == null)\n+\t\t\treturn;\n+\t\tvalue = value.trim();\n+\n+\t\tif (parm.equalsIgnoreCase(\"runTimeMode\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < runTimeModeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(runTimeModeNames[i])) {\n+\t\t\t\t\t\tsetRunTimeMode(i);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t//>>rjm\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set runtimemode to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ runTimeModeNames[getRunTimeMode()],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"orderProcessingMode\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < orderProcessingModeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(orderProcessingModeNames[i])) {\n+\t\t\t\t\t\torderProcessingMode = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set orderProcessingMode to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ orderProcessingModeNames[orderProcessingMode],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"accessMode\")) {\t\t\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < accessModeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(accessModeNames[i])) {\n+\t\t\t\t\t\taccessMode = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set accessMode to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ accessModeNames[accessMode],\n+\t\t\t\t\te);\n+\t\t\t}\n+\t\t} else if (parm.equalsIgnoreCase(\"webServicesEndpoint\")) {\n+\t\t\ttry {\n+\t\t\t\tsetSoapURL(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting web services endpoint\",\n+\t\t\t\t\te);\n+\t\t\t} //On error, revert to saved\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"workloadMix\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < workloadMixNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(workloadMixNames[i])) {\n+\t\t\t\t\t\tworkloadMix = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set workloadMix to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ workloadMixNames[workloadMix],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"WebInterface\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < webInterfaceNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(webInterfaceNames[i])) {\n+\t\t\t\t\t\twebInterface = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set WebInterface to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ webInterfaceNames[webInterface],\n+\t\t\t\t\te);\n+\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"CachingType\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < cachingTypeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(cachingTypeNames[i])) {\n+\t\t\t\t\t\tcachingType = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set CachingType to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ cachingTypeNames[cachingType],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"maxUsers\")) {\n+\t\t\ttry {\n+\t\t\t\tMAX_USERS = Integer.parseInt(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting maxusers, error parsing string to int:\"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"revering to current value: \"\n+\t\t\t\t\t\t+ MAX_USERS,\n+\t\t\t\t\te);\n+\t\t\t} //On error, revert to saved\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"maxQuotes\")) {\n+\t\t\ttry {\n+\t\t\t\tMAX_QUOTES = Integer.parseInt(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t//>>rjm\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(...) minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting max_quotes, error parsing string to int \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ MAX_QUOTES,\n+\t\t\t\t\te);\n+\t\t\t\t//<<rjm\n+\t\t\t} //On error, revert to saved\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"primIterations\")) {\n+\t\t\ttry {\n+\t\t\t\tprimIterations = Integer.parseInt(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting primIterations, error parsing string to int:\"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"revering to current value: \"\n+\t\t\t\t\t\t+ primIterations,\n+\t\t\t\t\te);\n+\t\t\t} //On error, revert to saved\n+\t\t}\t\t\n+\t}\n+\n+\t/**\n+\t * Gets the orderProcessingModeNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getOrderProcessingModeNames() {\n+\t\treturn orderProcessingModeNames;\n+\t}\n+\n+\t/**\n+\t * Gets the workloadMixNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getWorkloadMixNames() {\n+\t\treturn workloadMixNames;\n+\t}\n+\n+\t/**\n+\t * Gets the webInterfaceNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getWebInterfaceNames() {\n+\t\treturn webInterfaceNames;\n+\t}\n+\n+\t/**\n+\t * Gets the webInterfaceNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getCachingTypeNames() {\n+\t\treturn cachingTypeNames;\n+\t}\n+\n+\t/**\n+\t * Gets the scenarioMixes\n+\t * @return Returns a int[][]\n+\t */\n+\tpublic static int[][] getScenarioMixes() {\n+\t\treturn scenarioMixes;\n+\t}\n+\n+\t/**\n+\t * Gets the trace\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getTrace() {\n+\t\treturn trace;\n+\t}\n+\t/**\n+\t * Sets the trace\n+\t * @param trace The trace to set\n+\t */\n+\tpublic static void setTrace(boolean traceValue) {\n+\t\ttrace = traceValue;\n+\t}\n+\n+\t/**\n+\t * Gets the mAX_USERS.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getMAX_USERS() {\n+\t\treturn MAX_USERS;\n+\t}\n+\n+\t/**\n+\t * Sets the mAX_USERS.\n+\t * @param mAX_USERS The mAX_USERS to set\n+\t */\n+\tpublic static void setMAX_USERS(int mAX_USERS) {\n+\t\tMAX_USERS = mAX_USERS;\n+\t\tdeck = null; // reset the card deck for selecting users\n+\t}\n+\n+\t/**\n+\t * Gets the mAX_QUOTES.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getMAX_QUOTES() {\n+\t\treturn MAX_QUOTES;\n+\t}\n+\n+\t/**\n+\t * Sets the mAX_QUOTES.\n+\t * @param mAX_QUOTES The mAX_QUOTES to set\n+\t */\n+\tpublic static void setMAX_QUOTES(int mAX_QUOTES) {\n+\t\tMAX_QUOTES = mAX_QUOTES;\n+\t}\n+\n+\t/**\n+\t * Gets the mAX_HOLDINGS.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getMAX_HOLDINGS() {\n+\t\treturn MAX_HOLDINGS;\n+\t}\n+\n+\t/**\n+\t * Sets the mAX_HOLDINGS.\n+\t * @param mAX_HOLDINGS The mAX_HOLDINGS to set\n+\t */\n+\tpublic static void setMAX_HOLDINGS(int mAX_HOLDINGS) {\n+\t\tMAX_HOLDINGS = mAX_HOLDINGS;\n+\t}\n+\n+\t/**\n+\t * Gets the actionTrace.\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getActionTrace() {\n+\t\treturn actionTrace;\n+\t}\n+\n+\t/**\n+\t * Sets the actionTrace.\n+\t * @param actionTrace The actionTrace to set\n+\t */\n+\tpublic static void setActionTrace(boolean actionTrace) {\n+\t\tTradeConfig.actionTrace = actionTrace;\n+\t}\n+\n+\t/**\n+\t * Gets the scenarioCount.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getScenarioCount() {\n+\t\treturn scenarioCount;\n+\t}\n+\n+\t/**\n+\t * Sets the scenarioCount.\n+\t * @param scenarioCount The scenarioCount to set\n+\t */\n+\tpublic static void setScenarioCount(int scenarioCount) {\n+\t\tTradeConfig.scenarioCount = scenarioCount;\n+\t}\n+\n+\tpublic static synchronized void incrementScenarioCount() {\n+\t\tscenarioCount++;\n+\t}\n+\n+\t/**\n+\t * Gets the jdbc driver needs global transaction\n+\t * Some XA Drivers require a global transaction to be started\n+\t * for all SQL calls.  To work around this, set this to true\n+\t * to cause the direct mode to start a user transaction.\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getJDBCDriverNeedsGlobalTransaction() {\n+\t\treturn JDBCDriverNeedsGlobalTransaction;\n+\t}\n+\n+\t/**\n+\t * Sets the jdbc driver needs global transaction\n+         * @param JDBCDriverNeedsGlobalTransactionVal the value\n+\t */\n+\tpublic static void setJDBCDriverNeedsGlobalTransaction(boolean JDBCDriverNeedsGlobalTransactionVal) {\n+\t\tJDBCDriverNeedsGlobalTransaction = JDBCDriverNeedsGlobalTransactionVal;\n+\t}\n+\n+\t/**\n+\t * Gets the updateQuotePrices.\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getUpdateQuotePrices() {\n+\t\treturn updateQuotePrices;\n+\t}\n+\n+\t/**\n+\t * Sets the updateQuotePrices.\n+\t * @param updateQuotePrices The updateQuotePrices to set\n+\t */\n+\tpublic static void setUpdateQuotePrices(boolean updateQuotePrices) {\n+\t\tTradeConfig.updateQuotePrices = updateQuotePrices;\n+\t}\n+\t\n+\tpublic static String getSoapURL() {\n+\t\treturn SoapURL;\n+\t}\n+\t\n+\tpublic static void setSoapURL(String value) {\n+\t\tSoapURL = value;\n+//\t\tTradeWebSoapProxy.updateServicePort();\n+\t}\n+\t\n+\tpublic static int getAccessMode() {\n+\t\treturn accessMode;\n+\t}\n+\t\n+\tpublic static void setAccessMode(int value) {\n+\t\taccessMode = value;\n+//\t\tTradeWebSoapProxy.updateServicePort();\n+\t}\n+\n+    public static int getRunTimeMode() {\n+        return runTimeMode;\n+    }\n+    \n+    public static void setRunTimeMode(int value) {\n+        runTimeMode = value;\n+    }\n+\n+\tpublic static int getPrimIterations() {\n+\t\treturn primIterations;\n+\t}\n+\t\n+\tpublic static void setPrimIterations(int iter) {\n+\t\tprimIterations = iter;\n+\t}\t\n+\n+    public static boolean getLongRun() {\n+        return longRun;\n+    }\n+\n+    public static void setLongRun(boolean longRun) {\n+        TradeConfig.longRun = longRun;\n+    }\n+\n+    public static void setPublishQuotePriceChange(boolean publishQuotePriceChange) {\n+        TradeConfig.publishQuotePriceChange = publishQuotePriceChange;\n+    }\n+    \n+    public static boolean getPublishQuotePriceChange() {\n+        return publishQuotePriceChange;\n+    }\n+\n+    public static void setMarketSummaryInterval(int seconds) {\n+        TradeConfig.marketSummaryInterval = seconds;\n+    }\n+    \n+    public static  int getMarketSummaryInterval() {\n+        return TradeConfig.marketSummaryInterval;\n+    }\n+    \n+    /**\n+\t * Return the list of JPA Layer names\n+\t * Creation date: (01/10/2009)\n+\t * @return java.lang.String[]\n+\t */\n+\tpublic static java.lang.String[] getJPALayerNames() {\n+\t\treturn jpaLayerNames;\n+    }\n+\n+\t// added by OpenJPA\n+\tpublic static void setLog(Log log) {\n+\t    TradeConfig.log = log;\n+\t}\n+}"},{"sha":"f6ddf0ad25b28270f68acd5c50cc032d40eda4c3","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java","status":"added","additions":1026,"deletions":0,"changes":1026,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,1026 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.PersistenceUnit;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.lib.log.Log;\n+\n+// import org.apache.geronimo.samples.daytrader.beans.AccountDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.AccountProfileDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.HoldingDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.OrderDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.QuoteDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.FinancialUtils;\n+// import org.apache.geronimo.samples.daytrader.core.MarketSummaryDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.RunStatsDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.TradeDBServices;\n+// import org.apache.geronimo.samples.daytrader.core.TradeServices;\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+/**\n+ * TradeJPADirect uses JPA to implement the business methods of the Trade online\n+ * broker application. These business methods represent the features and\n+ * operations that can be performed by customers of the brokerage such as login,\n+ * logout, get a stock quote, buy or sell a stock, etc. and are specified in the\n+ * {@link org.apache.geronimo.samples.daytrader.TradeServices} interface\n+ * \n+ * Note: In order for this class to be thread-safe, a new TradeJPA must be\n+ * created for each call to a method from the TradeInterface interface.\n+ * Otherwise, pooled connections may not be released.\n+ * \n+ * @see org.apache.geronimo.samples.daytrader.TradeServices\n+ * \n+ */\n+\n+// public class TradeJPADirect implements TradeServices, TradeDBServices {\n+public class TradeJPADirect {\n+\n+    @PersistenceUnit(unitName=\"daytrader\")\n+    private static EntityManagerFactory emf;\n+\n+    private static BigDecimal ZERO = new BigDecimal(0.0);\n+\n+    private static boolean initialized = false;\n+\n+    private static Log log = null;\n+    \n+\n+    // constructor for OpenJPA junit tests\n+    public TradeJPADirect(Log log, EntityManagerFactory emf) {\n+        this.log = log;\n+        this.emf = emf;\n+        if (initialized == false)\n+            init();\n+    }\n+    \n+    public static synchronized void init() {\n+        if (initialized)\n+            return;\n+        //if (Log.isTraceEnabled())\n+        //    Log.trace(\"TradeJPADirect:init -- *** initializing\");\n+\n+        TradeConfig.setPublishQuotePriceChange(false);\n+\n+        //if (Log.isTraceEnabled())\n+        //    Log.trace(\"TradeJPADirect:init -- +++ initialized\");\n+\n+        initialized = true;\n+    }\n+\n+    public static void destroy() {\n+        try {\n+            if (!initialized)\n+                return;\n+            log.trace(\"TradeJPADirect:destroy\");\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:destroy\", e);\n+        }\n+\n+    }\n+\n+    public MarketSummaryDataBean getMarketSummary() {\n+        MarketSummaryDataBean marketSummaryData;\n+\n+        /*\n+         * Creating entiManager\n+         */\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        try {\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:getMarketSummary -- getting market summary\");\n+\n+            // Find Trade Stock Index Quotes (Top 100 quotes)\n+            // ordered by their change in value\n+            Collection<QuoteDataBean> quotes;\n+\n+            Query query = entityManager.createNamedQuery(\"quoteejb.quotesByChange\");\n+            quotes = query.getResultList();\n+\n+            QuoteDataBean[] quoteArray = (QuoteDataBean[]) quotes.toArray(new QuoteDataBean[quotes.size()]);\n+            ArrayList<QuoteDataBean> topGainers = new ArrayList<QuoteDataBean>(\n+                                                                              5);\n+            ArrayList<QuoteDataBean> topLosers = new ArrayList<QuoteDataBean>(5);\n+            // BigDecimal TSIA = FinancialUtils.ZERO;\n+            BigDecimal TSIA = (new BigDecimal(0.00)).setScale(2);\n+            // BigDecimal openTSIA = FinancialUtils.ZERO;\n+            BigDecimal openTSIA = (new BigDecimal(0.00)).setScale(2);\n+            double totalVolume = 0.0;\n+\n+            if (quoteArray.length > 5) {\n+                for (int i = 0; i < 5; i++)\n+                    topGainers.add(quoteArray[i]);\n+                for (int i = quoteArray.length - 1; i >= quoteArray.length - 5; i--)\n+                    topLosers.add(quoteArray[i]);\n+\n+                for (QuoteDataBean quote : quoteArray) {\n+                    BigDecimal price = quote.getPrice();\n+                    BigDecimal open = quote.getOpen();\n+                    double volume = quote.getVolume();\n+                    TSIA = TSIA.add(price);\n+                    openTSIA = openTSIA.add(open);\n+                    totalVolume += volume;\n+                }\n+                TSIA = TSIA.divide(new BigDecimal(quoteArray.length),\n+                    // FinancialUtils.ROUND);\n+                    BigDecimal.ROUND_HALF_UP);\n+                openTSIA = openTSIA.divide(new BigDecimal(quoteArray.length),\n+                    // FinancialUtils.ROUND);\n+                    BigDecimal.ROUND_HALF_UP);\n+            }\n+\n+            marketSummaryData = new MarketSummaryDataBean(TSIA, openTSIA,\n+                                                          totalVolume, topGainers, topLosers);\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:getMarketSummary\", e);\n+            throw new RuntimeException(\"TradeJPADirect:getMarketSummary -- error \", e);\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        return marketSummaryData;\n+    }\n+\n+    public OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) {\n+        OrderDataBean order = null;\n+        BigDecimal total;\n+        /*\n+         * creating entitymanager\n+         */\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        try {\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:buy - userID=\" + userID + \" symbol=\" + symbol + \" quantity=\" + quantity);\n+\n+            entityManager.getTransaction().begin();\n+\n+            AccountProfileDataBean profile = entityManager.find(\n+                                                               AccountProfileDataBean.class, userID);\n+            AccountDataBean account = profile.getAccount();\n+\n+            QuoteDataBean quote = entityManager.find(QuoteDataBean.class,\n+                                                     symbol);\n+\n+            HoldingDataBean holding = null; // The holding will be created by this buy order\n+\n+            order = createOrder(account, quote, holding, \"buy\", quantity, entityManager);\n+\n+            // order = createOrder(account, quote, holding, \"buy\", quantity);\n+            // UPDATE - account should be credited during completeOrder\n+\n+            BigDecimal price = quote.getPrice();\n+            BigDecimal orderFee = order.getOrderFee();\n+            BigDecimal balance = account.getBalance();\n+            total = (new BigDecimal(quantity).multiply(price)).add(orderFee);\n+            account.setBalance(balance.subtract(total));\n+\n+            // commit the transaction before calling completeOrder\n+            entityManager.getTransaction().commit();\n+\n+            if (orderProcessingMode == TradeConfig.SYNCH)\n+                completeOrder(order.getOrderID(), false);\n+            else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)\n+                queueOrder(order.getOrderID(), true);\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:buy(\" + userID + \",\" + symbol + \",\" + quantity + \") --> failed\", e);\n+            /* On exception - cancel the order */\n+            // TODO figure out how to do this with JPA\n+            if (order != null)\n+                order.cancel();\n+\n+            entityManager.getTransaction().rollback();\n+\n+            // throw new EJBException(e);\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+\n+        }\n+\n+        // after the purchase or sell of a stock, update the stocks volume and\n+        // price\n+        updateQuotePriceVolume(symbol, TradeConfig.getRandomPriceChangeFactor(), quantity);\n+\n+        return order;\n+    }\n+\n+    public OrderDataBean sell(String userID, Integer holdingID,\n+                              int orderProcessingMode) {\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        OrderDataBean order = null;\n+        BigDecimal total;\n+        try {\n+            entityManager.getTransaction().begin();\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:sell - userID=\" + userID + \" holding=\" + holdingID);\n+\n+            AccountProfileDataBean profile = entityManager.find(\n+                                                               AccountProfileDataBean.class, userID);\n+\n+            AccountDataBean account = profile.getAccount();\n+            HoldingDataBean holding = entityManager.find(HoldingDataBean.class,\n+                                                         holdingID);\n+\n+            if (holding == null) {\n+                log.error(\"TradeJPADirect:sell User \" + userID\n+                          + \" attempted to sell holding \" + holdingID\n+                          + \" which has already been sold\");\n+\n+                OrderDataBean orderData = new OrderDataBean();\n+                orderData.setOrderStatus(\"cancelled\");\n+\n+                entityManager.persist(orderData);\n+                entityManager.getTransaction().commit();\n+                return orderData;\n+            }\n+\n+            QuoteDataBean quote = holding.getQuote();\n+            double quantity = holding.getQuantity();\n+\n+            order = createOrder(account, quote, holding, \"sell\", quantity,\n+                                entityManager);\n+            // UPDATE the holding purchase data to signify this holding is\n+            // \"inflight\" to be sold\n+            // -- could add a new holdingStatus attribute to holdingEJB\n+            holding.setPurchaseDate(new java.sql.Timestamp(0));\n+\n+            // UPDATE - account should be credited during completeOrder\n+            BigDecimal price = quote.getPrice();\n+            BigDecimal orderFee = order.getOrderFee();\n+            BigDecimal balance = account.getBalance();\n+            total = (new BigDecimal(quantity).multiply(price)).subtract(orderFee);\n+\n+            account.setBalance(balance.add(total));\n+\n+            // commit the transaction before calling completeOrder\n+            entityManager.getTransaction().commit();\n+\n+            if (orderProcessingMode == TradeConfig.SYNCH)\n+                completeOrder(order.getOrderID(), false);\n+            else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)\n+                queueOrder(order.getOrderID(), true);\n+\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:sell(\" + userID + \",\" + holdingID + \") --> failed\", e);\n+            // TODO figure out JPA cancel\n+            if (order != null)\n+                order.cancel();\n+\n+            entityManager.getTransaction().rollback();\n+\n+            throw new RuntimeException(\"TradeJPADirect:sell(\" + userID + \",\" + holdingID + \")\", e);\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+        if (!(order.getOrderStatus().equalsIgnoreCase(\"cancelled\")))\n+            //after the purchase or sell of a stock, update the stocks volume and price\n+            updateQuotePriceVolume(order.getSymbol(), TradeConfig.getRandomPriceChangeFactor(), order.getQuantity());\n+\n+        return order;\n+    }\n+\n+    public void queueOrder(Integer orderID, boolean twoPhase) {\n+        log\n+        .error(\"TradeJPADirect:queueOrder() not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\n+                                               \"TradeJPADirect:queueOrder() not implemented for this runtime mode\");\n+    }\n+\n+    public OrderDataBean completeOrder(Integer orderID, boolean twoPhase)\n+    throws Exception {\n+        EntityManager entityManager = emf.createEntityManager();\n+        OrderDataBean order = null;\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:completeOrder - orderId=\" + orderID + \" twoPhase=\" + twoPhase);\n+\n+        order = entityManager.find(OrderDataBean.class, orderID);\n+        order.getQuote();\n+\n+        if (order == null) {\n+            log.error(\"TradeJPADirect:completeOrder -- Unable to find Order \" + orderID + \" FBPK returned \" + order);\n+            return null;\n+        }\n+\n+        if (order.isCompleted()) {\n+            throw new RuntimeException(\"Error: attempt to complete Order that is already completed\\n\" + order);\n+        }\n+\n+        AccountDataBean account = order.getAccount();\n+        QuoteDataBean quote = order.getQuote();\n+        HoldingDataBean holding = order.getHolding();\n+        BigDecimal price = order.getPrice();\n+        double quantity = order.getQuantity();\n+\n+        String userID = account.getProfile().getUserID();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:completeOrder--> Completing Order \"\n+                      + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                      + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                      + quote + \"\\n\\t Holding info: \" + holding);\n+\n+        HoldingDataBean newHolding = null;\n+        if (order.isBuy()) {\n+            /*\n+             * Complete a Buy operation - create a new Holding for the Account -\n+             * deduct the Order cost from the Account balance\n+             */\n+\n+            newHolding = createHolding(account, quote, quantity, price, entityManager);\n+        }\n+\n+        try {\n+            entityManager.getTransaction().begin();\n+\n+            if (newHolding != null) {\n+                order.setHolding(newHolding);\n+            }\n+\n+            if (order.isSell()) {\n+                /*\n+                 * Complete a Sell operation - remove the Holding from the Account -\n+                 * deposit the Order proceeds to the Account balance\n+                 */\n+                if (holding == null) {\n+                    log.error(\"TradeJPADirect:completeOrder -- Unable to sell order \" + order.getOrderID() + \" holding already sold\");\n+                    order.cancel();\n+                    entityManager.getTransaction().commit();\n+                    return order;\n+                }\n+                else {\n+                    entityManager.remove(holding);\n+                    order.setHolding(null);\n+                }\n+            }\n+\n+            order.setOrderStatus(\"closed\");\n+\n+            order.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));\n+\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:completeOrder--> Completed Order \"\n+                          + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                          + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                          + quote + \"\\n\\t Holding info: \" + holding);\n+\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            e.printStackTrace();\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+        return order;\n+    }\n+\n+    public void cancelOrder(Integer orderID, boolean twoPhase) {\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:cancelOrder - orderId=\" + orderID + \" twoPhase=\" + twoPhase);\n+\n+        OrderDataBean order = entityManager.find(OrderDataBean.class, orderID);\n+        /*\n+         * managed transaction\n+         */\n+        try {\n+            entityManager.getTransaction().begin();\n+            order.cancel();\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+    }\n+\n+    public void orderCompleted(String userID, Integer orderID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeAction:orderCompleted - userID=\" + userID + \" orderID=\" + orderID);\n+    }\n+\n+    public Collection<OrderDataBean> getOrders(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getOrders - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+        AccountProfileDataBean profile = entityManager.find(\n+                                                           AccountProfileDataBean.class, userID);\n+        AccountDataBean account = profile.getAccount();\n+        entityManager.close();\n+        return account.getOrders();\n+    }\n+\n+    public Collection<OrderDataBean> getClosedOrders(String userID) {\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getClosedOrders - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        try {\n+\n+            // Get the primary keys for all the closed Orders for this\n+            // account.\n+            /*\n+             * managed transaction\n+             */\n+            entityManager.getTransaction().begin();\n+            Query query = entityManager\n+                          .createNamedQuery(\"orderejb.closedOrders\");\n+            query.setParameter(\"userID\", userID);\n+\n+            entityManager.getTransaction().commit();\n+            Collection results = query.getResultList();\n+            Iterator itr = results.iterator();\n+            // entityManager.joinTransaction();\n+            // Spin through the orders to populate the lazy quote fields\n+            while (itr.hasNext()) {\n+                OrderDataBean thisOrder = (OrderDataBean) itr.next();\n+                thisOrder.getQuote();\n+            }\n+\n+            if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {\n+                Query updateStatus = entityManager\n+                                     .createNamedQuery(\"orderejb.completeClosedOrders\");\n+                /*\n+                 * managed transaction\n+                 */\n+                try {\n+                    entityManager.getTransaction().begin();\n+                    updateStatus.setParameter(\"userID\", userID);\n+\n+                    updateStatus.executeUpdate();\n+                    entityManager.getTransaction().commit();\n+                }\n+                catch (Exception e) {\n+                    entityManager.getTransaction().rollback();\n+                    entityManager.close();\n+                    entityManager = null;\n+                }\n+            }\n+            else if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {\n+                /*\n+                 * Add logic to do update orders operation, because JBoss5'\n+                 * Hibernate 3.3.1GA DB2Dialect and MySQL5Dialect do not work\n+                 * with annotated query \"orderejb.completeClosedOrders\" defined\n+                 * in OrderDatabean\n+                 */\n+                Query findaccountid = entityManager\n+                                      .createNativeQuery(\n+                                                        \"select \"\n+                                                        + \"a.ACCOUNTID, \"\n+                                                        + \"a.LOGINCOUNT, \"\n+                                                        + \"a.LOGOUTCOUNT, \"\n+                                                        + \"a.LASTLOGIN, \"\n+                                                        + \"a.CREATIONDATE, \"\n+                                                        + \"a.BALANCE, \"\n+                                                        + \"a.OPENBALANCE, \"\n+                                                        + \"a.PROFILE_USERID \"\n+                                                        + \"from accountejb a where a.profile_userid = ?\",\n+                                                        // org.apache.geronimo.samples.daytrader.beans.AccountDataBean.class);\n+                                                        org.apache.openjpa.integration.daytrader.AccountDataBean.class);\n+                findaccountid.setParameter(1, userID);\n+                AccountDataBean account = (AccountDataBean) findaccountid.getSingleResult();\n+                Integer accountid = account.getAccountID();\n+                Query updateStatus = entityManager.createNativeQuery(\"UPDATE orderejb o SET o.orderStatus = 'completed' WHERE \"\n+                                                                     + \"o.orderStatus = 'closed' AND o.ACCOUNT_ACCOUNTID  = ?\");\n+                updateStatus.setParameter(1, accountid.intValue());\n+                updateStatus.executeUpdate();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+            return results;\n+        } catch (Exception e) {\n+            log.error(\"TradeJPADirect.getClosedOrders\", e);\n+            entityManager.close();\n+            entityManager = null;\n+            throw new RuntimeException(\"TradeJPADirect.getClosedOrders - error\", e);\n+\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+    }\n+\n+    public QuoteDataBean createQuote(String symbol, String companyName,\n+                                     BigDecimal price) {\n+        EntityManager entityManager = emf.createEntityManager();\n+        try {\n+            QuoteDataBean quote = new QuoteDataBean(symbol, companyName, 0, price, price, price, price, 0);\n+            /*\n+             * managed transaction\n+             */\n+            try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(quote);\n+            entityManager.getTransaction().commit();\n+            }\n+            catch (Exception e) {\n+                entityManager.getTransaction().rollback();\n+            }\n+\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:createQuote-->\" + quote);\n+\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+            return quote;\n+        } catch (Exception e) {\n+            log.error(\"TradeJPADirect:createQuote -- exception creating Quote\", e);\n+            entityManager.close();\n+            entityManager = null;\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+    }\n+\n+    public QuoteDataBean getQuote(String symbol) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getQuote - symbol=\" + symbol);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        QuoteDataBean qdb = entityManager.find(QuoteDataBean.class, symbol);\n+\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+        return qdb;\n+    }\n+\n+    public Collection<QuoteDataBean> getAllQuotes() {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getAllQuotes\");\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        Query query = entityManager.createNamedQuery(\"quoteejb.allQuotes\");\n+\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+\n+        }\n+        return query.getResultList();\n+    }\n+\n+    public QuoteDataBean updateQuotePriceVolume(String symbol,\n+                                                BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getUpdateQuotePrices())\n+            return new QuoteDataBean();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:updateQuote - symbol=\" + symbol + \"changeFactor=\" + changeFactor);\n+\n+        /*\n+         * Add logic to determine JPA layer, because JBoss5' Hibernate 3.3.1GA\n+         * DB2Dialect and MySQL5Dialect do not work with annotated query\n+         * \"quoteejb.quoteForUpdate\" defined in QuoteDatabean\n+         */\n+        EntityManager entityManager = emf.createEntityManager();\n+        QuoteDataBean quote = null;\n+        if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {\n+            quote = entityManager.find(QuoteDataBean.class, symbol);\n+        } else if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {\n+  \n+            Query q = entityManager.createNamedQuery(\"quoteejb.quoteForUpdate\");\n+            q.setParameter(1, symbol);\n+  \n+            quote = (QuoteDataBean) q.getSingleResult();\n+        }\n+\n+        BigDecimal oldPrice = quote.getPrice();\n+\n+        if (quote.getPrice().equals(TradeConfig.PENNY_STOCK_PRICE)) {\n+            changeFactor = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;\n+        }\n+\n+        BigDecimal newPrice = changeFactor.multiply(oldPrice).setScale(2, BigDecimal.ROUND_HALF_UP);\n+\n+        /*\n+         * managed transaction\n+         */\n+\n+        try {\n+\n+            quote.setPrice(newPrice);\n+            quote.setVolume(quote.getVolume() + sharesTraded);\n+            quote.setChange((newPrice.subtract(quote.getOpen()).doubleValue()));\n+\n+            entityManager.getTransaction().begin();\n+            entityManager.merge(quote);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+        this.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);\n+\n+        return quote;\n+    }\n+\n+    public Collection<HoldingDataBean> getHoldings(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getHoldings - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+        /*\n+         * managed transaction\n+         */\n+        entityManager.getTransaction().begin();\n+\n+        Query query = entityManager.createNamedQuery(\"holdingejb.holdingsByUserID\");\n+        query.setParameter(\"userID\", userID);\n+\n+        entityManager.getTransaction().commit();\n+        Collection<HoldingDataBean> holdings = query.getResultList();\n+        /*\n+         * Inflate the lazy data memebers\n+         */\n+        Iterator itr = holdings.iterator();\n+        while (itr.hasNext()) {\n+            ((HoldingDataBean) itr.next()).getQuote();\n+        }\n+\n+        entityManager.close();\n+        entityManager = null;\n+        return holdings;\n+    }\n+\n+    public HoldingDataBean getHolding(Integer holdingID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getHolding - holdingID=\" + holdingID);\n+        HoldingDataBean holding;\n+        EntityManager entityManager = emf.createEntityManager();\n+        holding = entityManager.find(HoldingDataBean.class, holdingID);\n+        entityManager.close();\n+        return holding;\n+    }\n+\n+    public AccountDataBean getAccountData(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getAccountData - userID=\" + userID);\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+        /*\n+         * Inflate the lazy data memebers\n+         */\n+        AccountDataBean account = profile.getAccount();\n+        account.getProfile();\n+\n+        // Added to populate transient field for account\n+        account.setProfileID(profile.getUserID());\n+        entityManager.close();\n+        entityManager = null;\n+\n+        return account;\n+    }\n+\n+    public AccountProfileDataBean getAccountProfileData(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getProfileData - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean apb = entityManager.find(AccountProfileDataBean.class, userID);\n+        entityManager.close();\n+        entityManager = null;\n+        return apb;\n+    }\n+\n+    public AccountProfileDataBean updateAccountProfile(AccountProfileDataBean profileData) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:updateAccountProfileData - profileData=\" + profileData);\n+        /*\n+         * // Retrieve the previous account profile in order to get account\n+         * data... hook it into new object AccountProfileDataBean temp =\n+         * entityManager.find(AccountProfileDataBean.class,\n+         * profileData.getUserID()); // In order for the object to merge\n+         * correctly, the account has to be hooked into the temp object... // -\n+         * may need to reverse this and obtain the full object first\n+         * \n+         * profileData.setAccount(temp.getAccount());\n+         * \n+         * //TODO this might not be correct temp =\n+         * entityManager.merge(profileData); //System.out.println(temp);\n+         */\n+\n+        AccountProfileDataBean temp = entityManager.find(AccountProfileDataBean.class, profileData.getUserID());\n+        temp.setAddress(profileData.getAddress());\n+        temp.setPassword(profileData.getPassword());\n+        temp.setFullName(profileData.getFullName());\n+        temp.setCreditCard(profileData.getCreditCard());\n+        temp.setEmail(profileData.getEmail());\n+        /*\n+         * Managed Transaction\n+         */\n+        try {\n+\n+            entityManager.getTransaction().begin();\n+            entityManager.merge(temp);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        return temp;\n+    }\n+\n+    public AccountDataBean login(String userID, String password)\n+    throws Exception {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+\n+        if (profile == null) {\n+            throw new RuntimeException(\"No such user: \" + userID);\n+        }\n+        /*\n+         * Managed Transaction\n+         */\n+        entityManager.getTransaction().begin();\n+        entityManager.merge(profile);\n+\n+        AccountDataBean account = profile.getAccount();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:login - userID=\" + userID + \" password=\" + password);\n+\n+        account.login(password);\n+        entityManager.getTransaction().commit();\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:login(\" + userID + \",\" + password + \") success\" + account);\n+        entityManager.close();\n+        return account;\n+    }\n+\n+    public void logout(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:logout - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+        AccountDataBean account = profile.getAccount();\n+\n+        /*\n+         * Managed Transaction\n+         */\n+        try {\n+            entityManager.getTransaction().begin();\n+            account.logout();\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:logout(\" + userID + \") success\");\n+    }\n+\n+    public AccountDataBean register(String userID, String password, String fullname, \n+                                    String address, String email, String creditcard,\n+                                    BigDecimal openBalance) {\n+        AccountDataBean account = null;\n+        AccountProfileDataBean profile = null;\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        if (log.isTraceEnabled()) {\n+            // Log.trace(\"TradeJPADirect:register\", userID, password, fullname, address, email, creditcard, openBalance);\n+            log.trace(\"TradeJPADirect:register - userID=\" + userID);\n+        }\n+        \n+        // Check to see if a profile with the desired userID already exists\n+\n+        profile = entityManager.find(AccountProfileDataBean.class, userID);\n+\n+        if (profile != null) {\n+            log.error(\"Failed to register new Account - AccountProfile with userID(\" + userID + \") already exists\");\n+            return null;\n+        }\n+        else {\n+        \tprofile = new AccountProfileDataBean(userID, password, fullname,\n+                                                 address, email, creditcard);\n+            account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);\n+            profile.setAccount(account);\n+            account.setProfile(profile);\n+            /*\n+             * managed Transaction\n+             */\n+            try {\n+                entityManager.getTransaction().begin();\n+                entityManager.persist(profile);\n+                entityManager.persist(account);\n+                entityManager.getTransaction().commit();\n+            }\n+            catch (Exception e) {\n+                entityManager.getTransaction().rollback();\n+            } finally {\n+                entityManager.close();\n+            }\n+\n+        }\n+\n+        return account;\n+    }\n+\n+    // @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)\n+    //public RunStatsDataBean resetTrade(boolean deleteAll) throws Exception {\n+    public void resetTrade(boolean deleteAll) throws Exception {\n+        // return(new TradeJDBCDirect(false)).resetTrade(deleteAll);\n+        new RuntimeException(\"TradeJPADirect:resetTrade - not implemented in JPA mode\");\n+    }\n+\n+    /*\n+     * NO LONGER USE\n+     */\n+\n+    private void publishQuotePriceChange(QuoteDataBean quote,\n+                                         BigDecimal oldPrice, BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getPublishQuotePriceChange())\n+            return;\n+        log.error(\"TradeJPADirect:publishQuotePriceChange - is not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\"TradeJPADirect:publishQuotePriceChange - is not implemented for this runtime mode\");\n+    }\n+\n+    /*\n+     * new Method() that takes EntityManager as a parameter\n+     */\n+    private OrderDataBean createOrder(AccountDataBean account,\n+                                      QuoteDataBean quote, HoldingDataBean holding, String orderType,\n+                                      double quantity, EntityManager entityManager) {\n+        OrderDataBean order;\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:createOrder(orderID=\" + \" account=\"\n+                      + ((account == null) ? null : account.getAccountID())\n+                      + \" quote=\" + ((quote == null) ? null : quote.getSymbol())\n+                      + \" orderType=\" + orderType + \" quantity=\" + quantity);\n+        try {\n+            order = new OrderDataBean(orderType, \n+                                      \"open\", \n+                                      new Timestamp(System.currentTimeMillis()), \n+                                      null, \n+                                      quantity, \n+                                      // quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND),\n+                                      quote.getPrice().setScale(2, BigDecimal.ROUND_HALF_UP),\n+                                      TradeConfig.getOrderFee(orderType), \n+                                      account, \n+                                      quote, \n+                                      holding);\n+                entityManager.persist(order);\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:createOrder -- failed to create Order\", e);\n+            throw new RuntimeException(\"TradeJPADirect:createOrder -- failed to create Order\", e);\n+        }\n+        return order;\n+    }\n+\n+    private HoldingDataBean createHolding(AccountDataBean account,\n+                                          QuoteDataBean quote, double quantity, BigDecimal purchasePrice,\n+                                          EntityManager entityManager) throws Exception {\n+        HoldingDataBean newHolding = new HoldingDataBean(quantity,\n+                                                         purchasePrice, new Timestamp(System.currentTimeMillis()),\n+                                                         account, quote);\n+        try {\n+            /*\n+             * manage transactions\n+             */\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(newHolding);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        return newHolding;\n+    }\n+\n+    public double investmentReturn(double investment, double NetValue)\n+    throws Exception {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:investmentReturn\");\n+\n+        double diff = NetValue - investment;\n+        double ir = diff / investment;\n+        return ir;\n+    }\n+\n+    public QuoteDataBean pingTwoPhase(String symbol) throws Exception {\n+        log\n+        .error(\"TradeJPADirect:pingTwoPhase - is not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\"TradeJPADirect:pingTwoPhase - is not implemented for this runtime mode\");\n+    }\n+\n+    class quotePriceComparator implements java.util.Comparator {\n+        public int compare(Object quote1, Object quote2) {\n+            double change1 = ((QuoteDataBean) quote1).getChange();\n+            double change2 = ((QuoteDataBean) quote2).getChange();\n+            return new Double(change2).compareTo(change1);\n+        }\n+    }\n+\n+    /**\n+     * TradeBuildDB needs this abstracted method\n+     */\n+    public String checkDBProductName() throws Exception {\n+        log.error(\"TradeJPADirect:checkDBProductName - is not implemented in JPA mode\");\n+        // return(new TradeJDBCDirect(false)).checkDBProductName();\n+        new RuntimeException(\"TradeJPADirect:checkDBProductName - is not implemented in JPA mode\");\n+        return null;\n+    }\n+\n+    /**\n+     * TradeBuildDB needs this abstracted method\n+     */\n+    public boolean recreateDBTables(Object[] sqlBuffer, java.io.PrintWriter out)\n+    throws Exception {\n+        log.error(\"TradeJPADirect:recreateDBTables - is not implemented in JPA mode\");\n+        //return(new TradeJDBCDirect(false)).recreateDBTables(sqlBuffer, out);\n+        new RuntimeException(\"TradeJPADirect:recreateDBTables - is not implemented in JPA mode\");\n+        return false;\n+    }\n+\n+    /**\n+     * Get mode - returns the persistence mode (TradeConfig.JPA)\n+     * \n+     * @return int mode\n+     */\n+    public int getMode() {\n+        return TradeConfig.JPA;\n+    }\n+\n+}"},{"sha":"55952057ed1bf2e67d817368015ac5ff4a822194","filename":"openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+\n+    <persistence-unit name=\"daytrader\">\n+        <description>PU for Daytrader tests</description>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <class>org.apache.openjpa.integration.daytrader.AccountDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.AccountProfileDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.HoldingDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.OrderDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.QuoteDataBean</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        \n+        <properties>\n+            <property name=\"openjpa.DynamicEnhancementAgent\" value=\"false\"/>\n+            <property name=\"openjpa.BrokerImpl\" value=\"non-finalizing\" />\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\"/>\n+            <property name=\"openjpa.Sequence\" value=\"table(Table=OPENJPASEQ, Increment=100)\"/>\n+            <!--\n+            <property name=\"openjpa.jdbc.UpdateManager\" value=\"org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager(batchLimit=0)\" /> \n+            <property name=\"openjpa.jdbc.DBDictionary\" value=\"derby\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.ConnectionURL\" value=\"jdbc:derby:tradedb;create=true\"/>\n+            <property name=\"openjpa.ConnectionProperties\" value=\"DriverClassName=org.apache.derby.jdbc.EmbeddedDriver,Url=jdbc:derby:tradedb;create=true,MaxActive=50,MaxWait=10000,Username=,Password=\"/>\n+             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"ForeignKeyDeleteAction=restrict,JoinForeignKeyDeleteAction=restrict\"/>\n+            -->\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"3946fce34322662b70944f12601dfada3dcefcef","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -39,7 +39,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <profiles>"},{"sha":"91654c085912967938b500c7f5be9ddccd7ac24c","filename":"openjpa-integration/osgi-itests/pom.xml","status":"removed","additions":0,"deletions":318,"changes":318,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/pom.xml?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,318 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n-\n-    http://www.apache.org/licenses/LICENSE-2.0\n-\n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.\n--->\n-<!--\n-    Maven release plugin requires the project tag to be on a single line.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-SNAPSHOT</version>\n-    </parent>\n-\n-    <modelVersion>4.0.0</modelVersion>\n-    <artifactId>openjpa-integration-osgi-itests</artifactId>\n-    <version>2.0.0-SNAPSHOT</version>\n-    <packaging>jar</packaging>\n-\n-    <name>OpenJPA Integration Tests - OSGi</name>\n-    <description>OpenJPA Integration Tests - OSGi</description>\n-\n-    <dependencies>\n-        <!--\n-            Note: Scope should be set to test for all depends\n-        -->\n-        <!-- OpenJPA runtime and depends -->\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-osgi</artifactId>\n-            <version>${version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jpa_2.0_spec</artifactId>\n-            <scope>provided</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\n-            <scope>provided</scope>\n-        </dependency>\n-        <!-- Not needed yet...\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-validation_1.0_spec</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        -->\n-        <!-- Note: Overriding parent versions as these have bundle metadata -->\n-        <dependency>\n-            <groupId>commons-collections</groupId>\n-            <artifactId>commons-collections</artifactId>\n-            <version>3.2.1</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-lang</groupId>\n-            <artifactId>commons-lang</artifactId>\n-            <version>2.4</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-pool</groupId>\n-            <artifactId>commons-pool</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <!-- Testcase depends -->\n-        <!--\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-examples</artifactId>\n-            <version>${version}</version>\n-            <scope>test</scope>\n-        </dependency>\n-        -->\n-        <dependency>\n-            <groupId>org.apache.derby</groupId>\n-            <artifactId>derby</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <!-- use the bundlized version of commons-dbcp from servicemix -->\n-        <dependency>\n-            <groupId>org.apache.servicemix.bundles</groupId>\n-            <artifactId>org.apache.servicemix.bundles.commons-dbcp</artifactId>\n-            <version>1.2.2_3</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <!-- Test framework depends -->\n-        <dependency>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n-            <version>4.5</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.exam</groupId>\n-            <artifactId>pax-exam</artifactId>\n-            <version>0.5.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.exam</groupId>\n-            <artifactId>pax-exam-junit</artifactId>\n-            <version>0.5.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.exam</groupId>\n-            <artifactId>pax-exam-container-default</artifactId>\n-            <version>0.5.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.exam</groupId>\n-            <artifactId>pax-exam-junit-extender-impl</artifactId>\n-            <version>0.5.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.logging</groupId>\n-            <artifactId>pax-logging-api</artifactId>\n-            <version>1.3.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.logging</groupId>\n-            <artifactId>pax-logging-service</artifactId>\n-            <version>1.3.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.ops4j.pax.url</groupId>\n-            <artifactId>pax-url-mvn</artifactId>\n-            <version>0.3.3</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.felix</groupId>\n-            <artifactId>org.osgi.core</artifactId>\n-            <version>1.2.0</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <!-- Apache Felix framework -->\n-        <dependency>\n-            <groupId>org.apache.felix</groupId>\n-            <artifactId>org.apache.felix.configadmin</artifactId>\n-            <version>1.0.10</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <!-- Note: This depend has to be after all the rest -->\n-        <dependency>\n-            <groupId>org.apache.felix</groupId>\n-            <artifactId>org.apache.felix.main</artifactId>\n-            <version>1.6.1</version>\n-            <scope>test</scope>\n-        </dependency>\n-    </dependencies>\n-\n-    <repositories>\n-        <repository>\n-            <id>ops4j.releases</id>\n-            <url>http://repository.ops4j.org/maven2</url>\n-        </repository>\n-        <repository>\n-            <id>ops4j.snapshots</id>\n-            <url>http://repository.ops4j.org/mvn-snapshots</url>\n-        </repository>\n-    </repositories>\n-    <pluginRepositories>\n-        <pluginRepository>\n-            <id>ops4j.releases</id>\n-            <url>http://repository.ops4j.org/maven2</url>\n-            <snapshots>\n-                <enabled>true</enabled>\n-            </snapshots>\n-        </pluginRepository>\n-    </pluginRepositories>\n-\n-    <build>\n-        <resources>\n-            <!-- for source jar -->\n-            <resource>\n-                <directory>src/main/resources</directory>\n-            </resource>\n-            <!-- for test jar -->\n-            <resource>\n-                <directory>src/test/resources</directory>\n-            </resource>\n-            <!-- also include license and notice files in all the jars -->\n-            <resource>\n-                <directory>${basedir}/../../openjpa-project/</directory>\n-                <includes>\n-                    <include>NOTICE.txt</include>\n-                    <include>LICENSE.txt</include>\n-                    <include>DISCLAIMER.txt</include>\n-                </includes>\n-                <targetPath>META-INF</targetPath>\n-            </resource>\n-        </resources>\n-\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <phase>process-classes</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <ant antfile=\"src/main/ant/enhancer.xml\" target=\"enhance\" inheritRefs=\"true\">\n-                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\n-                                    <property name=\"test\" value=\"${test}\" />\n-                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n-                                    <property name=\"project.build.outputDirectory\" value=\"${project.build.outputDirectory}\" />\n-                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n-                                    <property name=\"build.enhance\" value=\"${build.enhance}\" />\n-                                </ant>\n-                            </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <configuration>\n-                    <archive>\n-                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n-                    </archive>\n-                </configuration>\n-            </plugin>\n-\n-            <plugin>\n-                <groupId>org.apache.servicemix.tooling</groupId>\n-                <artifactId>depends-maven-plugin</artifactId>\n-                <version>1.1</version>\n-                <executions>\n-                    <execution>\n-                        <id>generate-depends-file</id>\n-                        <goals>\n-                            <goal>generate-depends-file</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-\n-            <plugin>\n-                <groupId>org.apache.felix</groupId>\n-                <artifactId>maven-bundle-plugin</artifactId>\n-                <extensions>true</extensions>\n-                <configuration>\n-                    <instructions>\n-                        <Bundle-Name>${artifactId}</Bundle-Name>\n-                        <Bundle-SymbolicName>${groupId}.${artifactId};singleton=true</Bundle-SymbolicName>\n-                        <Bundle-DocURL>http://openjpa.apache.org/documentation.html</Bundle-DocURL>\n-                        <Bundle-Activator>hellojpa.Main</Bundle-Activator>\n-                        <!-- <Private-Package>hellojpa*,META-INF*</Private-Package> -->\n-                        <Import-Package>org.apache.openjpa.*,*</Import-Package>\n-                        <!-- <Export-Package></Export-Package> -->\n-                        <Require-Bundle>org.apache.geronimo.specs.geronimo-jpa_2.0_spec;bundle-version=\"[1.0.0,2.0.0)\",org.apache.openjpa.openjpa-osgi;bundle-version=\"[2.0.0,3.0.0)\"</Require-Bundle>\n-                        <!-- Eclipse metadata -->\n-                        <Eclipse-Autostart>false</Eclipse-Autostart>\n-                    </instructions>\n-                    <unpackBundle>true</unpackBundle>\n-                </configuration>\n-                <executions>\n-                    <execution>\n-                        <id>bundle-manifest</id>\n-                        <phase>process-classes</phase>\n-                        <goals>\n-                            <goal>manifest</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-surefire-plugin</artifactId>\n-                <configuration>\n-                    <forkMode>pertest</forkMode>\n-                    <argLine>${surefire.jvm.args}</argLine>\n-                    <excludes>\n-                        <!-- exclude everything for now.... -->\n-                        <exclude>org/apache/openjpa/**/Test*.java</exclude>\n-                    </excludes>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-\n-</project>"},{"sha":"c9daaaded78e592c70d620d8d727954b21416114","filename":"openjpa-integration/osgi-itests/readme.txt","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/readme.txt","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/readme.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/readme.txt?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,129 +0,0 @@\n-Setting up Apache Felix Karaf for OpenJPA 2.0.x\n-\n-Installing and running Apache Felix Karaf\n----------------------------------------------------\n-1) Download and extract Apache Felix Karaf 1.0.0 from:\n-\n-   http://www.apache.org/dist/felix/apache-felix-karaf-1.0.0.zip\n-   http://www.apache.org/dist/felix/apache-felix-karaf-1.0.0.tar.gz\n-\n-2) Start Karaf under Java SE 5 or 6:\n- \n-  cd apache-felix-karaf-1.0.0/bin\n-  karaf\n-\n-\n-Installing and running the Felix Web Console and Jetty:\n--------------------------------------------------------\n-1) Install the following bundles:\n-\n-   a) osgi:install http://www.apache.org/dist/felix/org.osgi.compendium-1.4.0.jar\n-   b) osgi:install http://www.apache.org/dist/felix/org.apache.felix.scr-1.0.8.jar\n-   c) osgi:install http://www.apache.org/dist/felix/org.apache.felix.http.jetty-2.0.2.jar\n-   d) osgi:install http://www.apache.org/dist/felix/org.apache.felix.webconsole-2.0.0.jar\n-\n-2) Start the web console:\n-\n-   a) osgi:start <bundle id for org.apache.felix.http.jetty>\n-   b) osgi:start <bundle id for org.apache.felix.webconsole>\n-\n-   Note:  You will have to start the Config, Event and Scr bundles for those\n-     tabs to function in the web console.\n-\n-3) Access the web console in a browser:\n-\n-   http://localhost:8080/system/console\n-   uid = admin\n-   pwd = admin\n-\n-\n-Installing OpenJPA 2.0.x\n---------------------------------------------\n-1) Install the following released prereq bundles:\n-\n-   a) osgi:install http://repo1.maven.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar\n-   b) osgi:install http://repo1.maven.org/maven2/commons-lang/commons-lang/2.4/commons-lang-2.4.jar\n-   c) osgi:install http://repo1.maven.org/maven2/commons-pool/commons-pool/1.5/commons-pool-1.5.jar\n-   d) osgi:install http://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar\n-   e) osgi:install http://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar\n-\n-2) Install the following SNAPSHOT prereq bundles:\n-\n-   a) osgi:install http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/geronimo/specs/geronimo-jpa_2.0_spec/1.0-EA9-SNAPSHOT/geronimo-jpa_2.0_spec-1.0-EA9-SNAPSHOT.jar\n-   b) osgi:install http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/geronimo/specs/geronimo-validation_1.0_spec/1.0-EA6-SNAPSHOT/geronimo-validation_1.0_spec-1.0-EA6-SNAPSHOT.jar\n-\n-3) Install the latest OpenJPA 2.0.0-SNAPSHOT build:\n-\n-  For latest published nightly build of OpenJPA 2.0.0-SNAPSHOT:\n-  a) osgi:install http://people.apache.org/repo/m2-snapshot-repository/org/apache/openjpa/openjpa-osgi/2.0.0-SNAPSHOT/openjpa-osgi-2.0.0-SNAPSHOT.jar\n-\n-  For a locally built OpenJPA trunk (2.0.0-SNAPSHOT):\n-  a) osgi:install file:///<m2_repo>/org/apache/openjpa/openjpa-osgi/2.0.0-SNAPSHOT/openjpa-osgi-2.0.0-SNAPSHOT.jar\n-\n-4) Check the Karaf logfile for any problems:\n-\n-   apache-felix-karaf-1.0.0/data/log/karaf.log \n-\n-\n-Installing an OSGi and/or Blueprint based sample app:\n------------------------------------------------------\n-This step is still a work-in-progress and TBD...\n-\n-1) Build the openjpa-integration/osgi-itests module in trunk (2.0.0-SNAPSHOT)\n-from source.\n-\n-2) Install the bundlized HelloJPA example:\n-\n-   a) osgi:install file:///<m2_repo>/org/apache/openjpa/openjpa-integration-osgi-itests/2.0.0-SNAPSHOT/openjpa-integration-osgi-itests-2.0.0-SNAPSHOT.jar\n-   b) osgi:start <bundle id for geronimo-jpa_2.0_spec>\n-   c) osgi:start <bundle id for openjpa-osgi>\n-   d) osgi:start <bundle id for openjpa-integration-osgi-itests>\n-\n-\n-Note:  At this point the start should fail with one of the following messages:\n-\n-   a) If you are not using a level of OpenJPA and the Geronimo Spec that \n-      supports resolving providers in an OSGi environment -\n-\n-    Bundle start\n-    org.osgi.framework.BundleException: Activator start error in bundle\n-    org.apache.openjpa.openjpa-integration-osgi-itests [45].\n-    . . .\n-    Caused by: javax.persistence.PersistenceException: No persistence providers\n-    available for \"hellojpa\" after trying the following discovered\n-    implementations: NONE\n-\tat javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:189)\n-\tat hellojpa.Main.main(Main.java:38)\n-\tat hellojpa.Main.start(Main.java:81)\n-\tat org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:667)\n-\tat org.apache.felix.framework.Felix.activateBundle(Felix.java:1699)\n-\t... 15 more\n-\n-\n-   b) The latest code, which still has some issues loading in OSGi -\n-\n-    Bundle start\n-    org.osgi.framework.BundleException: Activator start error in bundle\n-    org.apache.openjpa.openjpa-integration-osgi-itests [45].\n-    . . .\n-    Caused by: java.lang.NoSuchMethodError: javax.persistence.spi.PersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode;\n-\tat org.apache.openjpa.persistence.PersistenceUnitInfoImpl.toOpenJPAProperties(PersistenceUnitInfoImpl.java:487)\n-    . . .\n-\tat hellojpa.Main.main(Main.java:38)\n-\tat hellojpa.Main.start(Main.java:81)\n-\tat org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:667)\n-\tat org.apache.felix.framework.Felix.activateBundle(Felix.java:1699)\n-\t... 15 more\n- \n-\n-2) To reinstall the sample app, you'll need to uninstall it first, even if the initial install failed:\n-\n-   a) osgi:uninstall <bundle id for openjpa-integration-osgi-itests>\n-\n-\n-Shutting down Karaf:\n----------------------\n-1) From the Karaf cmdline:\n-\n-   osgi:shutdown\n-"},{"sha":"55dc44947a98143d5935cfee2aa584537548b240","filename":"openjpa-integration/osgi-itests/src/main/java/build.xml","status":"removed","additions":0,"deletions":156,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/main/java/build.xml","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/main/java/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/java/build.xml?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,156 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project default=\"usagewarning\">\n-\n-    <property name=\"parent\" value=\"${basedir}/..\"/>\n-    <property name=\"root\" value=\"${parent}/..\"/>\n-\n-    <!-- database connection properties -->\n-    <property name=\"dbdriver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n-    <property name=\"dburl\"\n-        value=\"jdbc:derby:${basedir}/${example}-database;create=true\"/>\n-    <property name=\"dbuser\" value=\"\"/>\n-    <property name=\"dbpass\" value=\"\"/>\n-\n-\n-    <target name=\"usagewarning\">\n-        <fail>\n-Please traverse to a sub-directory, like hellojpa, and run \"ant\" from there.\n-        </fail>\n-    </target>\n-\n-    <target name=\"init\" depends=\"init:discover, init:windows, init:unix\">\n-    </target>\n-    <target name=\"init:discover\">\n-        <condition property=\"isWindows\">\n-            <os family=\"windows\"/>\n-        </condition>\n-    </target>\n-    <target name=\"init:windows\" if=\"isWindows\">\n-        <property name=\"platform.script.ext\" value=\".bat\"/>\n-    </target>\n-    <target name=\"init:unix\" unless=\"isWindows\">\n-        <property name=\"platform.script.ext\" value=\"\"/>\n-    </target>\n-\n-    <target name=\"all\" depends=\"init\">\n-        <exec dir=\"${basedir}/hellojpa\" executable=\"ant${platform.script.ext}\"/>\n-        <exec dir=\"${basedir}/relations\" executable=\"ant${platform.script.ext}\"/>\n-        <exec dir=\"${basedir}/reversemapping\" executable=\"ant${platform.script.ext}\"/>\n-    </target>\n-\n-    <path id=\"classpath\"\n-        description=\"The classpath to use for compiling and running\">\n-        <pathelement path=\"${parent}\"/>\n-        <!-- we could include the individual jars as below, but lets use the\n-             openjpa-all.jar with Derby instead\n-        <fileset dir=\"${root}\">\n-            <include name=\"**/*.jar\"/>\n-            <exclude name=\"openjpa-all-*.jar\"/>\n-        </fileset>\n-        -->\n-        <fileset dir=\"${root}\">\n-            <include name=\"openjpa-all-*.jar\"/>\n-            <include name=\"lib/derby*.jar\"/>\n-        </fileset>\n-    </path>\n-\n-    <path id=\"javaagent\">\n-        <fileset dir=\"${root}\">\n-            <include name=\"openjpa-*.jar\"/>\n-            <exclude name=\"openjpa-all-*.jar\"/>\n-        </fileset>\n-    </path>\n-    <pathconvert property=\"javaagent\" refid=\"javaagent\"/>\n-\n-    <target name=\"clean\" depends=\"pre-clean\"\n-        description=\"Clean up compiled files and generated database files\">\n-        <delete includeemptydirs=\"yes\">\n-            <fileset dir=\"${basedir}\">\n-                <include name=\"*.class\"/>\n-                <include name=\"*.log\"/>\n-                <include name=\"${example}-database/**/*\"/>\n-                <include name=\"${example}-database\"/>\n-            </fileset>\n-        </delete>\n-    </target>\n-\n-    <!-- this target can be overridden by the sub-build -->\n-    <target name=\"pre-clean\" description=\"Pre-clean phase\">\n-    </target>\n-\n-    <target name=\"compile\" depends=\"pre-compile\"\n-        description=\"Compile the example java files\">\n-        <javac srcdir=\"${parent}\" classpathref=\"classpath\"\n-            debug=\"yes\" includes=\"${example}/**.java\"/>\n-    </target>\n-\n-    <!-- this target can be overridden by the sub-build -->\n-    <target name=\"pre-compile\" description=\"Pre-compilation phase\">\n-    </target>\n-\n-    <target name=\"run\" depends=\"compile\"\n-        description=\"Run the example Main program\">\n-\n-        <java classname=\"${example}.Main\" classpathref=\"classpath\" fork=\"yes\"\n-            failonerror=\"yes\">\n-            <!--\n-                Specifying the openjpa jar as the javaagent argument is\n-                necessary in order for automatic class-enhancement to work.\n-            -->\n-            <jvmarg value=\"-javaagent:${javaagent}\"/>\n-\n-            <!--\n-                Specify the system properties to use when configuring\n-                OpenJPA. Note that these will only be used becuase in the\n-                examples, the call to \"Persistence.createEntityManagerFactory\"\n-                is passed \"System.getProperties()\".\n-            -->\n-\n-            <!--\n-                By default, use the stand-alone Derby database (provided).\n-                This can easily be changes to use your own database's driver,\n-                provided you ensure it is accessible in the classpath.\n-            -->\n-            <sysproperty key=\"openjpa.ConnectionDriverName\"\n-                value=\"${dbdriver}\"/>\n-            <sysproperty key=\"openjpa.ConnectionURL\" value=\"${dburl}\"/>\n-            <sysproperty key=\"openjpa.ConnectionUserName\" value=\"${dbuser}\"/>\n-            <sysproperty key=\"openjpa.ConnectionPassword\" value=\"${dbpass}\"/>\n-\n-            <!--\n-                Tell OpenJPA to automatically create tables in the database\n-                for entities. Note that this should be disabled when\n-                running against a production database, since you probably\n-                don't want to be altering the schema at runtime.\n-            -->\n-            <sysproperty key=\"openjpa.jdbc.SynchronizeMappings\"\n-                value=\"buildSchema\"/>\n-\n-            <!--\n-                Output all the SQL for educational purposes, but set the\n-                general logging level to only show warnings.\n-            -->\n-            <sysproperty key=\"openjpa.Log\"\n-                value=\"DefaultLevel=WARN,SQL=TRACE\"/>\n-        </java>\n-    </target>\n-</project>\n-"},{"sha":"c27cdcf84bfaf66e51c8452fd7b2e5d3b53d60c7","filename":"openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/java/hellojpa/Main.java?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,89 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package hellojpa;\n-\n-import java.util.*;\n-import javax.persistence.*;\n-import org.osgi.framework.BundleActivator;\n-import org.osgi.framework.BundleContext;\n-\n-\n-/** \n- * A very simple, stand-alone program that stores a new entity in the\n- * database and then performs a query to retrieve it.\n- */\n-public class Main implements BundleActivator {\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) {\n-        // Create a new EntityManagerFactory using the System properties.\n-        // The \"hellojpa\" name will be used to configure based on the\n-        // corresponding name in the META-INF/persistence.xml file\n-        EntityManagerFactory factory = Persistence.\n-            createEntityManagerFactory(\"hellojpa\", System.getProperties());\n-\n-        // Create a new EntityManager from the EntityManagerFactory. The\n-        // EntityManager is the main object in the persistence API, and is\n-        // used to create, delete, and query objects, as well as access\n-        // the current transaction\n-        EntityManager em = factory.createEntityManager();\n-\n-        // Begin a new local transaction so that we can persist a new entity\n-        em.getTransaction().begin();\n-\n-        // Create and persist a new Message entity\n-        em.persist(new Message(\"Hello Persistence!\"));\n-\n-        // Commit the transaction, which will cause the entity to\n-        // be stored in the database\n-        em.getTransaction().commit();\n-\n-        // It is always good practice to close the EntityManager so that\n-        // resources are conserved.\n-        em.close();\n-\n-        // Create a fresh, new EntityManager\n-        EntityManager em2 = factory.createEntityManager();\n-\n-        // Perform a simple query for all the Message entities\n-        Query q = em2.createQuery(\"select m from Message m\");\n-\n-        // Go through each of the entities and print out each of their\n-        // messages, as well as the date on which it was created \n-        for (Message m : (List<Message>) q.getResultList()) {\n-            System.out.println(m.getMessage()\n-                + \" (created on: \" + m.getCreated() + \")\"); \n-        }\n-\n-        // Again, it is always good to clean up after ourselves\n-        em2.close();\n-        factory.close();\n-    }\n-\n-    public void start(BundleContext context) {\n-        System.out.println(\"Bundle start\");\n-        main(null);\n-    }\n-\n-    public void stop(BundleContext context) {\n-        System.out.println(\"Bundle stop\");\n-    }\n-\n-}\n-"},{"sha":"bdb1c067f470e61647f5574e3709a1ff2e260f14","filename":"openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/main/resources/META-INF/persistence.xml?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,34 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-    version=\"2.0\">\n-\n-    <persistence-unit name=\"hellojpa\">\n-        <description>PU for hellojpa</description>\n-        <class>hellojpa</class>\n-        <properties>\n-            <property name=\"openjpa.DynamicEnhancementAgent\" \n-                value=\"false\"/> \n-        </properties>\n-    </persistence-unit>\n-\n-</persistence>\n-"},{"sha":"ece1fa5058014101c0db4c790ce3390a42f2c7fa","filename":"openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/AbstractIntegrationTest.java?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,95 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.openjpa.integration.osgi.itests;\n-\n-import org.ops4j.pax.exam.CoreOptions;\n-import org.ops4j.pax.exam.Inject;\n-import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;\n-import org.osgi.framework.Bundle;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.Constants;\n-import org.osgi.framework.Filter;\n-import org.osgi.framework.FrameworkUtil;\n-import org.osgi.framework.InvalidSyntaxException;\n-import org.osgi.util.tracker.ServiceTracker;\n-\n-public abstract class AbstractIntegrationTest {\n-\n-    public static final long DEFAULT_TIMEOUT = 30000;\n-\n-    @Inject\n-    protected BundleContext bundleContext;\n-\n-\n-    protected <T> T getOsgiService(Class<T> type, long timeout) {\n-        return getOsgiService(type, null, timeout);\n-    }\n-\n-    protected <T> T getOsgiService(Class<T> type) {\n-        return getOsgiService(type, null, DEFAULT_TIMEOUT);\n-    }\n-\n-    protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {\n-        ServiceTracker tracker = null;\n-        try {\n-            String flt;\n-            if (filter != null) {\n-                if (filter.startsWith(\"(\")) {\n-                    flt = \"(&(\" + Constants.OBJECTCLASS + \"=\" + type.getName() + \")\" + filter + \")\";\n-                } else {\n-                    flt = \"(&(\" + Constants.OBJECTCLASS + \"=\" + type.getName() + \")(\" + filter + \"))\";\n-                }\n-            } else {\n-                flt = \"(\" + Constants.OBJECTCLASS + \"=\" + type.getName() + \")\";\n-            }\n-            Filter osgiFilter = FrameworkUtil.createFilter(flt);\n-            tracker = new ServiceTracker(bundleContext, osgiFilter, null);\n-            tracker.open();\n-            // Note that the tracker is not closed to keep the reference\n-            // This is buggy, has the service reference may change i think\n-            Object svc = type.cast(tracker.waitForService(timeout));\n-            if (svc == null) {\n-                throw new RuntimeException(\"Gave up waiting for service \" + flt);\n-            }\n-            return type.cast(svc);\n-        } catch (InvalidSyntaxException e) {\n-            throw new IllegalArgumentException(\"Invalid filter\", e);\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    protected Bundle installBundle(String groupId, String artifactId) throws Exception {\n-        MavenArtifactProvisionOption mvnUrl = mavenBundle(groupId, artifactId);\n-        return bundleContext.installBundle(mvnUrl.getURL());\n-    }\n-\n-    protected Bundle getInstalledBundle(String symbolicName) {\n-        for (Bundle b : bundleContext.getBundles()) {\n-            if (symbolicName.equals(b.getSymbolicName())) {\n-                return b;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) {\n-        return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();\n-    }\n-}"},{"sha":"a623fd35e710e0c7fb682d75a8a660d22f0703f1","filename":"openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/test/java/org/apache/openjpa/integration/osgi/itests/TestOpenJPA.java?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,121 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.openjpa.integration.osgi.itests;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import static org.ops4j.pax.exam.CoreOptions.felix;\n-import static org.ops4j.pax.exam.CoreOptions.mavenConfiguration;\n-import static org.ops4j.pax.exam.CoreOptions.options;\n-import static org.ops4j.pax.exam.CoreOptions.systemProperty;\n-import org.ops4j.pax.exam.Option;\n-import org.ops4j.pax.exam.OptionUtils;\n-import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.profile;\n-import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;\n-import org.ops4j.pax.exam.junit.JUnit4TestRunner;\n-import org.osgi.framework.Bundle;\n-\n-\n-@RunWith(JUnit4TestRunner.class)\n-public class TestOpenJPA extends AbstractIntegrationTest {\n-\n-    @Test\n-    public void testExamples() throws Exception {\n-        System.out.println(\"********** testExamples starting\");\n-        System.out.println(\"***** Checking that openjpa-examples is installed\");\n-        // check for our openjpa-examples via the SymbolicName\n-        Bundle bundle = getInstalledBundle(\"org.apache.openjpa.openjpa-examples\");\n-        assertNotNull(bundle);\n-        System.out.println(\"***** Starting openjpa-examples bundle\");\n-        bundle.start();\n-        System.out.println(\"***** Stopping openjpa-examples bundle\");\n-        bundle.stop();\n-        System.out.println(\"********** testExamples returning\");\n-    }\n-    \n-    @Test\n-    public void testEMF() throws Exception {\n-        System.out.println(\"********** testEMF starting\");\n-        System.out.println(\"***** Creating a EMF\");\n-        EntityManagerFactory emf = Persistence.\n-            createEntityManagerFactory(\"hellojpa\", System.getProperties());\n-        assertNotNull(emf);\n-        System.out.println(\"***** After createEMF\");\n-        //OpenJPAConfiguration conf = emf.getConfiguration();\n-        //System.out.println(\"***** After Config *****\");\n-        //assertNotNull(conf);\n-        System.out.println(\"********** testEMF returning\");\n-    }\n-\n-    @org.ops4j.pax.exam.junit.Configuration\n-    public static Option[] configuration() {\n-        Option[] options = options(\n-            // Log\n-            mavenBundle(\"org.ops4j.pax.logging\", \"pax-logging-api\"),\n-            mavenBundle(\"org.ops4j.pax.logging\", \"pax-logging-service\"),\n-            // Felix Config Admin\n-            mavenBundle(\"org.apache.felix\", \"org.apache.felix.configadmin\"),\n-            // Maven url handler\n-            mavenBundle(\"org.ops4j.pax.url\", \"pax-url-mvn\"),\n-\n-            // this is how you set the default log level when using pax logging\n-            systemProperty(\"org.ops4j.pax.logging.DefaultServiceLog.level\")\n-                .value(\"DEBUG\"),\n-\n-            // OpenJPA runtime depends\n-            mavenBundle(\"org.apache.geronimo.specs\", \"geronimo-jpa_2.0_spec\"),\n-            mavenBundle(\"org.apache.geronimo.specs\",\n-                \"geronimo-validation_1.0_spec\"),\n-            //mavenBundle(\"org.apache.geronimo.specs\", \"geronimo-jms_1.1_spec\"),\n-            //mavenBundle(\"org.apache.geronimo.specs\", \"geronimo-jta_1.1_spec\"),\n-            mavenBundle(\"commons-collections\", \"commons-collections\"),\n-            mavenBundle(\"commons-lang\", \"commons-lang\"),\n-            mavenBundle(\"commons-pool\", \"commons-pool\"),\n-            mavenBundle(\"org.apache.openjpa\", \"openjpa\"),\n-            \n-            // Testcase depends\n-            mavenBundle(\"org.apache.derby\", \"derby\"),\n-            mavenBundle(\"org.apache.servicemix.bundles\",\n-                \"org.apache.servicemix.bundles.commons-dbcp\"),\n-            mavenBundle(\"org.apache.openjpa\", \"openjpa-examples\"),\n-            //vmOption(\"-Xdebug -Xrunjdwp:transport=dt_socket,\n-            //server=y,suspend=y,address=5005\"),\n-\n-            felix() //, equinox(), knopflerfish()\n-        );\n-\n-        // use config generated by the Maven plugin (until PAXEXAM-62/64 fixed)\n-        if (TestOpenJPA.class.getClassLoader().getResource(\n-                \"META-INF/maven/paxexam-config.args\") != null) {\n-            options = OptionUtils.combine(options, mavenConfiguration());\n-        }\n-\n-        return options;\n-    }\n-}\n-"},{"sha":"6ceab49d4e8360fbfb69154df8327c8ac4289dd2","filename":"openjpa-integration/osgi-itests/src/test/resources/log4j.properties","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-integration/osgi-itests/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/osgi-itests/src/test/resources/log4j.properties?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,33 +0,0 @@\n-################################################################################\n-#\n-#    Licensed to the Apache Software Foundation (ASF) under one or more\n-#    contributor license agreements.  See the NOTICE file distributed with\n-#    this work for additional information regarding copyright ownership.\n-#    The ASF licenses this file to You under the Apache License, Version 2.0\n-#    (the \"License\"); you may not use this file except in compliance with\n-#    the License.  You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#    Unless required by applicable law or agreed to in writing, software\n-#    distributed under the License is distributed on an \"AS IS\" BASIS,\n-#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#    See the License for the specific language governing permissions and\n-#    limitations under the License.\n-#\n-################################################################################\n-\n-# Root logger\n-log4j.rootLogger=DEBUG, stdout\n-\n-# CONSOLE appender not used by default\n-log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n-log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n-log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} | %-5.5p | %-16.16t | %-32.32c{1} | %-32.32C %4L | %m%n\n-\n-# File appender\n-log4j.appender.out=org.apache.log4j.FileAppender\n-log4j.appender.out.layout=org.apache.log4j.PatternLayout\n-log4j.appender.out.layout.ConversionPattern=%d{ABSOLUTE} | %-5.5p | %-16.16t | %-32.32c{1} | %-32.32C %4L | %m%n\n-log4j.appender.out.file=${karaf.base}/data/log/karaf.log\n-log4j.appender.out.append=true"},{"sha":"fc34138617f8039294bf5b880be016790fee2a6c","filename":"openjpa-integration/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,12 +29,12 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n     <modules>\n+        <module>daytrader</module>\n         <module>examples</module>\n         <module>tck</module>\n         <module>validation</module>\n-        <!-- <module>osgi-itests</module> -->\n     </modules>\n </project>"},{"sha":"a5770575e48575b59be11c9852771a90cf3b3c9e","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -70,7 +70,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <profiles>"},{"sha":"0519c03f224c809195e52d72bca5c64e67f42fbf","filename":"openjpa-integration/validation/pom.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/validation/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/validation/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -26,7 +26,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <artifactId>openjpa-integration-validation</artifactId>\n@@ -73,7 +73,7 @@\n                 <dependency>\n                     <groupId>com.agimatec</groupId>\n                     <artifactId>agimatec-jsr303</artifactId>\n-                    <version>0.9.6-SNAPSHOT</version>\n+                    <version>0.9.6</version>\n                     <scope>test</scope>\n                     <exclusions>\n                         <!-- force usage of the geronimo-validation_1.0_spec -->\n@@ -91,7 +91,7 @@\n                 <dependency>\n                     <groupId>com.agimatec</groupId>\n                     <artifactId>agimatec-validation</artifactId>\n-                    <version>0.9.6-SNAPSHOT</version>\n+                    <version>0.9.6</version>\n                     <scope>test</scope>\n                 </dependency>\n                 <dependency>\n@@ -257,7 +257,7 @@\n                                     <property name=\"test\" value=\"${test}\" />\n                                     <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n                                     <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n-                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n+                                    <property name=\"openjpa.Log\" value=\"${openjpa.Log}\" />\n                                     <property name=\"build.enhance\" value=\"${build.enhance}\" />\n                                 </ant>\n                             </tasks>\n@@ -287,7 +287,7 @@\n                     <systemProperties>\n                         <property>\n                             <name>openjpa.Log</name>\n-                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                            <value>${openjpa.Log}</value>\n                         </property>\n                         <property>\n                             <name>openjpa.DynamicEnhancementAgent</name>"},{"sha":"0abe205e6a9fc4a7a19ef2290f94faf40c48ae9c","filename":"openjpa-integration/validation/src/main/ant/enhancer.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/validation/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-integration/validation/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/main/ant/enhancer.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -87,7 +87,7 @@\n         <openjpac>\n             <classpath refid=\"cp\" />\n             <fileset refid=\"enhance.path.ref\" />\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n         <openjpac>\n         \t<!-- enhance XML-defined pc's separately since they use their own mapping file -->\n@@ -97,7 +97,7 @@\n \t\t\t\t<include name=\"**/XMLBase.class\"/>\n \t\t\t\t<include name=\"**/XMLSuper.class\"/>\n             </fileset>\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n     </target>\n </project>"},{"sha":"580c75fafa85a2029587a21aaeb1a81f04e54052","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"931af86c57199d423cbfb81a79193498ac766a38","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -53,6 +53,12 @@\n      */\n     public static final String LOG_SQL = \"openjpa.jdbc.SQL\";\n \n+    /**\n+     * Name of the logger for additional jdbc messages:\n+     * <code>openjpa.jdbc.DIAG</code>.\n+     */\n+    public static final String LOG_DIAG = \"openjpa.jdbc.SQLDiag\";\n+\n     /**\n      * Name of the logger for JDBC-related messages:\n      * <code>openjpa.jdbc.JDBC</code>."},{"sha":"631838af92582235684865285b3c7de27f6b9118","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -821,15 +821,23 @@ public void setConnectionFactory2(Object factory) {\n     /**\n      * Create the connection factory if necessary.\n      */\n-    private DecoratingDataSource createConnectionFactory() {\n+    public DecoratingDataSource createConnectionFactory() {\n         DataSource ds = (DataSource) connectionFactory.get();\n-        if (ds != null)\n+        Log log = getLog(LOG_JDBC);\n+        if (ds != null) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"createConnectionFactory: DataSource:\"+ds);\n+\n             return setupConnectionFactory(ds, false);\n+        }\n \n         ds = (DataSource) super.getConnectionFactory(); // JNDI lookup\n         if (ds == null)\n             ds = DataSourceFactory.newDataSource(this, false);\n \n+        if (log.isTraceEnabled())\n+            log.trace(\"createConnectionFactory: DataSource=\"+ds);\n+\n         return setupConnectionFactory(ds, false);\n     }\n "},{"sha":"c09ce814663a63b7b16251cab405189d0afda098","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"modified","additions":37,"deletions":4,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.jdbc.ReportingSQLException;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.OptimisticException;\n@@ -187,14 +188,46 @@ protected void flushBatch() throws SQLException {\n                     checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n                 }\n             } catch (SQLException se) {\n-                SQLException sqex = se.getNextException();\n-                if (sqex == null)\n-                    sqex = se;\n-                throw SQLExceptions.getStore(sqex, ps, _dict);\n+                //If we look at PreparedStatementManagerImpl.flushAndUpdate (which is the 'non-batch' code path\n+                //similar to this path, or I should say, the path which is taken instead of this path when\n+                //we aren't using batching), we see that the catch block doesn't do a 'se.getNextException'.\n+                //When we do a 'getNextException', the 'next exception' doesn't contain the same message as se.\n+                //That is, 'next exception' contains a subset msg which is contained in se.  For legacy, should\n+                //we continute to use 'sqex' in the 'old path' and use 'se' in the next path/code?????\n+                //SQLException sqex = se.getNextException();\n+                //if (sqex == null)\n+                //    sqex = se;\n+                SQLException sqex = se;\n+                \n+                if (se instanceof ReportingSQLException){\n+                  int index = ((ReportingSQLException) se).getIndexOfFirstFailedObject();\n+\n+                  //if we have only batched one statement, the index should be 0.  As can be seen above,\n+                  //if 'batchSize == 1' a different path is taken (the 'single row' path), and if that row\n+                  //fails, we know that the index is 0 since there is only one row.\n+                  if (batchSize == 1){\n+                      index = 0;\n+                  }\n+                  \n+                  //index should not be less than 0 this path, but if for some reason it is, lets\n+                  //resort to the 'old way' and simply pass the 'ps' as the failed object.\n+                  if (index < 0){ \n+                      throw SQLExceptions.getStore(sqex, ps, _dict);\n+                  }\n+                  else{\n+                      throw SQLExceptions.getStore(sqex, ((RowImpl)(_batchedRows.get(index))).getFailedObject(), _dict);\n+                  }                    \n+                }\n+                else{\n+                    throw SQLExceptions.getStore(sqex, ps, _dict);\n+                }\n             } finally {\n                 _batchedSql = null;\n                 batchedRows.clear();\n                 if (ps != null) {\n+                    //Clear the Params now....should this be done above? No. \n+                    //if JDBC provider using PureQuery, ps is null\n+                    ps.clearParameters();\n                     try {\n                         ps.close();\n                     } catch (SQLException sqex) {"},{"sha":"e9af893e7988c7b98e1e2d0e7900355998283eb4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -41,7 +41,6 @@\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.Id;\n \n-import serp.util.Numbers;\n \n /**\n  * Implements Finder Query identified by ClassMappping for SelectExecutor that \n@@ -124,7 +123,7 @@ public String getQueryString() {\n         for (int i = 0; i < _pkCols.length; i++, count++) {\n             if (pks == null)\n                 val[0] = (oid == null) \n-                    ? null : Numbers.valueOf(((Id) oid).getId());\n+                    ? null : ((Id) oid).getId();\n             else {\n                 val[i] = _joins[i].getJoinValue(pks[_pkIndices[i]], _pkCols[i], \n                     store);"},{"sha":"c77f549ac6c6fe74c0a84a100c35c8f010bf5c28","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":81,"deletions":7,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -35,6 +35,7 @@\n \n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -43,6 +44,7 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.schema.DataSourceFactory;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -67,6 +69,8 @@\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.jdbc.DelegatingStatement;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.LogFactoryImpl.LogImpl;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n@@ -76,6 +80,7 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.ApplicationIds;\n+import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.Id;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -104,6 +109,7 @@\n     private DataSource _ds = null;\n     private RefCountConnection _conn = null;\n     private boolean _active = false;\n+    private Log _log = null;\n \n     // track the pending statements so we can cancel them\n     private Set<Statement> _stmnts = Collections.synchronizedSet(new HashSet<Statement>());\n@@ -141,19 +147,53 @@ public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n         _conf = conf;\n         _dict = _conf.getDBDictionaryInstance();\n         _sql = _conf.getSQLFactoryInstance();\n+        _log = _conf.getLog(JDBCConfiguration.LOG_DIAG);\n \n         LockManager lm = ctx.getLockManager();\n         if (lm instanceof JDBCLockManager)\n             _lm = (JDBCLockManager) lm;\n \n-        if (!ctx.isManaged() && _conf.isConnectionFactoryModeManaged())\n-            _ds = _conf.getDataSource2(ctx);\n-        else\n-            _ds = _conf.getDataSource(ctx);\n+        _ds = getDataSource(ctx);\n \n         if (_conf.getUpdateManagerInstance().orderDirty())\n             ctx.setOrderDirtyObjects(true);\n     }\n+        \n+    private final boolean useConnectionFactory2(StoreContext ctx) { \n+        return (!ctx.isManaged() && _conf.isConnectionFactoryModeManaged());  \n+    }\n+        \n+    private final DataSource getDataSource(StoreContext ctx) {\n+        DataSource ds;\n+\n+        if (useConnectionFactory2(ctx)) {\n+            ds = (DataSource) ctx.getConnectionFactory2();\n+            if (ds != null) {\n+                ds = DataSourceFactory.decorateDataSource(ds, _conf, false);\n+            }\n+            else {\n+                ds = _conf.getDataSource2(ctx);\n+            }\n+        } else {\n+            ds = (DataSource) ctx.getConnectionFactory();\n+            if (ds != null) {\n+                ds = DataSourceFactory.decorateDataSource(ds, _conf, false);   \n+            }\n+            else {\n+                ds = _conf.getDataSource(ctx);\n+            }\n+        }\n+        return ds;\n+    }\n+    \n+    private boolean useContextToGetDataSource(StoreContext ctx) { \n+        // configuration check to enable goes here. \n+        if (StringUtils.isBlank(ctx.getConnectionFactoryName()) \n+                && StringUtils.isBlank(ctx.getConnectionFactory2Name())) {\n+            return false;\n+        }\n+        return true;\n+    }\n \n     public JDBCConfiguration getConfiguration() {\n         return _conf;\n@@ -263,6 +303,9 @@ private boolean exists(ClassMapping mapping, Object oid, Object context) {\n             mapping = mapping.getJoinablePCSuperclassMapping();\n \n         sel.wherePrimaryKey(oid, mapping, this);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"exists: oid=\"+oid+\" \"+mapping.getDescribedType());\n+        }\n         try {\n             return sel.getCount(this) != 0;\n         } catch (SQLException se) {\n@@ -293,7 +336,8 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict, fetch.getReadLockLevel());\n+            throw SQLExceptions.getStore(se, Exceptions.toString(sm.getPersistenceCapable()), \n+                    _dict, fetch.getReadLockLevel());\n         }\n     }\n \n@@ -527,6 +571,9 @@ private Result getInitializeStateResult(OpenJPAStateManager sm,\n             return null;\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n         sel.setExpectedResultCount(1, false);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"getInitializeStateResult: oid=\"+sm.getObjectId()+\" \"+mapping.getDescribedType());\n+        }\n         Result result = sel.execute(this, fetch);\n         cacheFinder(mapping, sel, fetch);\n         return result;\n@@ -578,6 +625,9 @@ private boolean selectPrimaryKey(OpenJPAStateManager sm,\n         Select sel = _sql.newSelect();\n         sel.select(base.getPrimaryKeyColumns());\n         sel.wherePrimaryKey(sm.getObjectId(), base, this);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"selectPrimaryKey: oid=\"+sm.getObjectId()+\" \"+mapping.getDescribedType());\n+        }\n         Result exists = sel.execute(this, fetch);\n         try {\n             if (isEmptyResult(exists))\n@@ -629,6 +679,9 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             if (select(sel, mapping, Select.SUBS_EXACT, sm, fields, jfetch,\n                 EagerFetchModes.EAGER_JOIN, true, false)) {\n                 sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n+                if (_log.isTraceEnabled()) {\n+                    _log.trace(\"load: \"+mapping.getDescribedType()+\" oid: \"+sm.getObjectId()); \n+                }\n                 res = sel.execute(this, jfetch, lockLevel);\n                 try {\n                  \tif (isEmptyResult(res))\n@@ -642,8 +695,13 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             // now allow the fields to load themselves individually too\n             FieldMapping[] fms = mapping.getFieldMappings();\n             for (int i = 0; i < fms.length; i++)\n-                if (fields.get(i) && !sm.getLoaded().get(i))\n+                if (fields.get(i) && !sm.getLoaded().get(i)) {\n+                    if (_log.isTraceEnabled()) {\n+                        _log.trace(\"load field: '\"+ fms[i].getName() + \"' for oid=\"+sm.getObjectId()\n+                            +\" \"+mapping.getDescribedType());\n+                    }\n                     fms[i].load(sm, this, jfetch.traverseJDBC(fms[i]));\n+                }\n             mapping.getVersion().afterLoad(sm, this);\n             return true;\n         } catch (ClassNotFoundException cnfe) {\n@@ -677,6 +735,11 @@ public Collection flush(Collection sms) {\n                 _conn.setReadOnly(false);\n         } catch (SQLException e) {\n         }\n+        if (_log.isTraceEnabled()) {\n+            for (OpenJPAStateManager sm: (Collection<OpenJPAStateManager>)sms) {\n+                _log.trace(\"flush: \"+sm.getPCState().getClass().getName() + \" for oid=\"+sm.getObjectId());\n+            }\n+        }\n         return _conf.getUpdateManagerInstance().flush(sms, this);\n     }\n \n@@ -787,6 +850,10 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n \n                     Select sel = _sql.newSelect();\n                     sel.setLRS(true);\n+                    if (_log.isTraceEnabled()) {\n+                        _log.trace(\"executeExtent: \"+mappings[i].getDescribedType());\n+                        sel.logEagerRelations();\n+                    }\n                     BitSet paged = selectExtent(sel, mappings[i], jfetch,\n                         subclasses);\n                     if (paged == null)\n@@ -921,6 +988,9 @@ public Object find(Object oid, ValueMapping vm,\n         JDBCFetchConfiguration fetch) {\n         if (oid == null)\n             return null;\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"find: oid=\"+oid+\" \"+vm.getDeclaredTypeMapping().getDescribedType());\n+        }\n         Object pc = _ctx.find(oid, fetch, null, null, 0);\n         if (pc == null && vm != null) {\n             OrphanedKeyAction action = _conf.getOrphanedKeyActionInstance();\n@@ -979,9 +1049,13 @@ private BitSet excludeInverseRelation(ClassMapping mapping,\n     private void load(ClassMapping mapping, OpenJPAStateManager sm,\n         JDBCFetchConfiguration fetch, Result res) throws SQLException {\n         FieldMapping eagerToMany = load(mapping, sm, fetch, res, null);\n-        if (eagerToMany != null)\n+        if (eagerToMany != null) {\n+            if (_log.isTraceEnabled()) {\n+                _log.trace(\"Loading eager toMany: \"+eagerToMany.getName()+\" for \"+mapping);\n+            }\n             eagerToMany.loadEagerJoin(sm, this, fetch.traverseJDBC(eagerToMany),\n                 res);\n+        }\n         if (_active && _lm != null && res.isLocking())\n             _lm.loadedForUpdate(sm);\n     }"},{"sha":"34579a22fa38b2311fd36b14a500f1914c32ebc9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -73,7 +73,6 @@\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n-import serp.util.Numbers;\n \n /**\n  * JDBC query implementation.\n@@ -126,7 +125,7 @@ public FilterListener getFilterListener(String tag) {\n     public Object newCompilationKey() {\n         JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx\n             .getFetchConfiguration();\n-        return Numbers.valueOf(fetch.getJoinSyntax());\n+        return fetch.getJoinSyntax();\n     }\n \n     public boolean supportsDataStoreExecution() {\n@@ -541,7 +540,7 @@ private Number executeBulkOperation(ClassMetaData[] metas,\n         }\n \n         localContext.remove();\n-        return Numbers.valueOf(count);\n+        return count;\n     }\n \n     /**"},{"sha":"b1beb7eeeffad6ea4a45de22dbb305d359baa4cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -45,7 +45,6 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n import serp.util.Strings;\n \n ///////////////////////////////////////////////////////////\n@@ -226,7 +225,7 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n         throws SQLException {\n         Connection conn = getConnection(store);\n         try {\n-            return Numbers.valueOf(getSequence(conn));\n+            return getSequence(conn);\n         } finally {\n             closeConnection(conn);\n         }"},{"sha":"5982e03f766e2b9bbd9cd00f9e92d4032fc3f2ad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -31,11 +31,14 @@\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.VersionLockManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.LockException;\n+import org.apache.openjpa.util.StoreException;\n \n /**\n  * Lock manager that uses exclusive database locks.\n@@ -117,8 +120,7 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         JDBCFetchConfiguration fetch = _store.getFetchConfiguration();\n         if (dict.simulateLocking)\n             return;\n-        dict.assertSupport(dict.supportsSelectForUpdate,\n-            \"SupportsSelectForUpdate\");\n+        dict.assertSupport(dict.supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n \n         Object id = sm.getObjectId();\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n@@ -137,7 +139,11 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n                 checkLock(rs, sm, timeout);\n             }\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, dict, level);\n+            LockException e = new LockException(sm.getPersistenceCapable(), timeout, level);\n+            e.setCause(se);\n+            e.setFatal(dict.isFatalException(StoreException.LOCK, se) \n+                    || level >= MixedLockLevels.LOCK_PESSIMISTIC_READ);\n+            throw e;\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}"},{"sha":"3b918ffabf06c382f253e9bbcc6a3872a146314c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -109,8 +109,8 @@ public boolean cache(PreparedQuery q) {\n \t\ttry {\n \t\t\tString id = q.getIdentifier();\n \t\t\tif (isCachable(id) == Boolean.FALSE) {\n-\t\t\t\tif (_log != null && _log.isWarnEnabled())\n-                    _log.warn(_loc.get(\"prepared-query-not-cachable\", id));\n+\t\t\t\tif (_log != null && _log.isTraceEnabled())\n+                    _log.trace(_loc.get(\"prepared-query-not-cachable\", id));\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tExclusion exclusion = getMatchedExclusionPattern(id);\n@@ -143,8 +143,8 @@ public PreparedQuery initialize(String key, Object result) {\n \tpublic boolean invalidate(String id) {\n \t\tlock();\n \t\ttry {\n-\t\t\tif (_log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"prepared-query-invalidate\", id));\n+\t\t\tif (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"prepared-query-invalidate\", id));\n \t\t\treturn _delegate.remove(id) != null;\n \t\t} finally {\n \t\t\tunlock();\n@@ -177,8 +177,8 @@ public PreparedQuery markUncachable(String id, Exclusion exclusion) {\n \t\tlock();\n \t\ttry {\n \t\t\tif (_uncachables.put(id, exclusion) == null) {\n-\t\t\t    if (_log != null && _log.isInfoEnabled()) \n-\t\t\t        _log.info(_loc.get(\"prepared-query-uncache\", id, exclusion));\n+\t\t\t    if (_log != null && _log.isTraceEnabled()) \n+\t\t\t        _log.trace(_loc.get(\"prepared-query-uncache\", id, exclusion));\n \t\t\t}\n \t\t\treturn _delegate.remove(id);\n \t\t} finally {\n@@ -240,8 +240,8 @@ public void removeExclusionPattern(String pattern) {\n             Collection<String> reborns = getMatchedKeys(pattern, _uncachables);\n \t\t\tfor (String rebornKey : reborns) {\n                 _uncachables.remove(rebornKey);\n-\t            if (_log != null && _log.isInfoEnabled())\n-\t                _log.info(_loc.get(\"prepared-query-remove-pattern\", pattern, rebornKey));\n+\t            if (_log != null && _log.isTraceEnabled())\n+\t                _log.trace(_loc.get(\"prepared-query-remove-pattern\", pattern, rebornKey));\n \t\t\t}\n \t\t} finally {\n \t\t\tunlock();\n@@ -342,11 +342,11 @@ public void endConfiguration() {\n         private static String STRONG = _loc.get(\"strong-exclusion\").getMessage();\n         private static String WEAK   = _loc.get(\"weak-exclusion\").getMessage();\n         \n-        public ExclusionPattern(boolean _strong, String _pattern, String _reason) {\n+        public ExclusionPattern(boolean strong, String pattern, String reason) {\n             super();\n-            this._strong = _strong;\n-            this._pattern = _pattern;\n-            this._reason = _reason;\n+            this._strong = strong;\n+            this._pattern = pattern;\n+            this._reason = reason;\n         }\n \n         public String getPattern() {\n@@ -387,7 +387,7 @@ public int hashCode() {\n         \n         public String toString() {\n             StringBuilder buf = new StringBuilder();\n-            buf.append(_strong ? STRONG : WEAK);\n+            buf.append(\" \").append(_strong ? STRONG : WEAK).append(\". \");\n             if (_reason != null)\n                 buf.append(_reason);\n             return buf.toString();"},{"sha":"558e8569e4fbac7165d0f9827242a3a5dc74e9eb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":65,"deletions":7,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.LogicalUnion;\n@@ -45,6 +46,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n@@ -169,13 +171,21 @@ public Exclusion initialize(Object result) {\n         if (selector == null || selector.hasMultipleSelects()\n             || ((selector instanceof Union) \n             && (((Union)selector).getSelects().length != 1)))\n-            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-multi-select\").getMessage());\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-multi-select\", _id).getMessage());\n         select = extractImplementation(selector);\n         if (select == null)\n-            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-select\").getMessage());\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-select\", _id).getMessage());\n         SQLBuffer buffer = selector.getSQL();\n         if (buffer == null)\n-            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\").getMessage());;\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\", _id).getMessage());;\n+        if (isUsingFieldStrategy())\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, \n+                _loc.get(\"exclude-user-strategy\", _id).getMessage());;\n+                \n+        if (isPaginated())\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, \n+                _loc.get(\"exclude-pagination\", _id).getMessage());;\n+\n         setTargetQuery(buffer.getSQL());\n         setParameters(buffer.getParameters());\n         setUserParameterPositions(buffer.getUserParameters());\n@@ -193,15 +203,20 @@ public Exclusion initialize(Object result) {\n      */\n     private Object[] extractSelectExecutor(Object result) {\n         if (result instanceof ResultList == false)\n-            return new Object[]{null, _loc.get(\"exclude-not-result\")};\n+            return new Object[]{null, _loc.get(\"exclude-not-result\", _id)};\n         Object userObject = ((ResultList<?>)result).getUserObject();\n         if (userObject == null || !userObject.getClass().isArray() || ((Object[])userObject).length != 2)\n-            return new Object[]{null, _loc.get(\"exclude-no-user-object\")};\n+            return new Object[]{null, _loc.get(\"exclude-no-user-object\", _id)};\n         Object provider = ((Object[])userObject)[0];\n         Object executor = ((Object[])userObject)[1];\n         if (executor instanceof StoreQuery.Executor == false)\n-            return new Object[]{null, _loc.get(\"exclude-not-executor\")};\n+            return new Object[]{null, _loc.get(\"exclude-not-executor\", _id)};\n         _exps = ((StoreQuery.Executor)executor).getQueryExpressions();\n+        for (int i = 0; i < _exps.length; i++) {\n+            if (isUsingExternalizedParameter(_exps[i])) {\n+                return new Object[]{null, _loc.get(\"exclude-externalized-param\", _id)};\n+            }\n+        }\n         if (_exps[0].projections.length == 0) {\n             _projTypes = StoreQuery.EMPTY_CLASSES;\n         } else {\n@@ -219,7 +234,7 @@ public Exclusion initialize(Object result) {\n         if (provider instanceof SelectResultObjectProvider) {\n             return new Object[]{((SelectResultObjectProvider)provider).getSelect(), null};\n         } \n-        return new Object[]{null, _loc.get(\"exclude-not-select-rop\", provider)};\n+        return new Object[]{null, _loc.get(\"exclude-not-select-rop\", _id, provider.getClass().getName())};\n     }\n     \n     private SelectImpl extractImplementation(SelectExecutor selector) {\n@@ -235,6 +250,49 @@ private SelectImpl extractImplementation(SelectExecutor selector) {\n         return null;\n     }\n     \n+    private boolean isUsingExternalizedParameter(QueryExpressions exp) {\n+        if (exp == null)\n+            return false;\n+        List<FieldMetaData> fmds = exp.getParameterizedFields();\n+        if (fmds == null || fmds.isEmpty())\n+            return false;\n+        for (FieldMetaData fmd : fmds) {\n+            if (fmd.isExternalized())\n+                return true;\n+        }\n+        return false;\n+    }\n+    \n+    private boolean isPaginated() {\n+        if (select instanceof SelectImpl) {\n+            if (((SelectImpl)select).getStartIndex() != 0 || \n+                ((SelectImpl)select).getEndIndex() != Long.MAX_VALUE)\n+                return true;\n+        }\n+        return false;\n+    }        \n+    private boolean isUsingFieldStrategy() {\n+        for (int i = 0; i < _exps.length; i++) {\n+            if (isUsingFieldStrategy(_exps[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean isUsingFieldStrategy(QueryExpressions exp) {\n+        if (exp == null)\n+            return false;\n+        List<FieldMetaData> fmds = exp.getParameterizedFields();\n+        if (fmds == null || fmds.isEmpty())\n+            return false;\n+        for (FieldMetaData fmd : fmds) {\n+            if (((FieldMapping)fmd).getMappingInfo().getStrategy() != null)\n+                return true;\n+        }\n+        return false;\n+    }\n+    \n     /**\n      * Merge the given user parameters with its own parameter. The given map\n      * must be compatible with the user parameters extracted during "},{"sha":"fb18c5df800ee4c932cfb1c4390c46d09a86983b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,7 +29,6 @@\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n-import serp.util.Numbers;\n \n /**\n  * Provides all column data in a {@link ResultSet}.\n@@ -84,14 +83,14 @@ public void open() {\n     public Object getResultObject()\n         throws SQLException {\n         if (_cols == 1) {\n-            Object val = _res.getObject(Numbers.valueOf(1),\n+            Object val = _res.getObject(1,\n                 JavaSQLTypes.JDBC_DEFAULT, null);\n             return (_packer == null) ? val : _packer.pack(val);\n         }\n \n         Object[] vals = new Object[_cols];\n         for (int i = 0; i < vals.length; i++)\n-            vals[i] = _res.getObject(Numbers.valueOf(i + 1),\n+            vals[i] = _res.getObject(i + 1,\n                 JavaSQLTypes.JDBC_DEFAULT, null);\n         return (_packer == null) ? vals : _packer.pack(vals);\n     }"},{"sha":"c19c6b4c30c1edc997c4efc3e23c5f887d1fb233","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -48,7 +48,6 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n \n /**\n  * A SQL query.\n@@ -168,7 +167,7 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n                 \n                 int count = executeUpdate(store, conn, stmnt, buf);  \n               \n-                return Numbers.valueOf(count);\n+                return count;\n             } catch (SQLException se) {\n                 throw SQLExceptions.getStore(se, dict);\n             } finally {"},{"sha":"a48a6ca9bb5e754175e6dae74e89ef3cb5ba1871","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -58,7 +58,6 @@\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n \n ////////////////////////////////////////////////////////////\n // NOTE: Do not change property names; see SequenceMetaData\n@@ -301,7 +300,7 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n                 // conflict with uninitialized values\n                 stat.seq = Math.max(stat.seq, 1);\n                 if (stat.seq < stat.max)\n-                    return Numbers.valueOf(stat.seq++);\n+                    return stat.seq++;\n             }\n             allocateSequence(store, mapping, stat, _alloc, true);\n         }\n@@ -375,7 +374,7 @@ protected Column addPrimaryKeyColumn(Table table) {\n      * Return the primary key value for the sequence table for the given class.\n      */\n     protected Object getPrimaryKey(ClassMapping mapping) {\n-        return Numbers.valueOf(0);\n+        return 0;\n     }\n \n     /**\n@@ -595,10 +594,10 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n                         _seqColumn.getTable());\n                 upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n-                    appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n+                    appendValue(cur + inc, _seqColumn).\n                     append(\" WHERE \").append(where).append(\" AND \").\n                     append(_seqColumn).append(\" = \").\n-                    appendValue(Numbers.valueOf(cur), _seqColumn);\n+                    appendValue(cur, _seqColumn);\n \n                 stmnt = prepareStatement(conn, upd);\n                 dict.setTimeouts(stmnt, _conf, true);\n@@ -952,7 +951,7 @@ public void run() throws RuntimeException {\n                 conn = getConnection(_store);\n                 long cur = getSequence(_mapping, conn);\n                 if (cur != -1 ) // USE the constant\n-                    current = Numbers.valueOf(cur);\n+                    current = cur;\n             } catch (SQLException sqle) {\n                 RuntimeException re = new RuntimeException(sqle.getMessage());\n                 re.initCause(sqle);"},{"sha":"429bc4c28bceb0ca52ebfaffcf7a5690165c3305","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -21,7 +21,6 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.sql.Select;\n-import serp.util.Numbers;\n \n /**\n  * Tests whether one value contains another.\n@@ -47,9 +46,9 @@ public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n             // update the count for this path\n             Integer count = (Integer) contains.get(path);\n             if (count == null)\n-                count = Numbers.valueOf(0);\n+                count = 0;\n             else\n-                count = Numbers.valueOf(count.intValue() + 1);\n+                count = count.intValue() + 1;\n             contains.put(path, count);\n \n             sql.setContainsId(count.toString());"},{"sha":"5343345012ccaf139e449e31aa5fa795929e71e9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -34,7 +34,6 @@\n import org.apache.openjpa.util.Id;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.UserException;\n-import serp.util.Numbers;\n \n /**\n  * Select the oid value of an object; typically used in projections.\n@@ -98,7 +97,7 @@ public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state,\n         ClassMapping mapping = _path.getClassMapping(state);\n         if (mapping.getIdentityType() == mapping.ID_DATASTORE) {\n             if (val instanceof Id)\n-                return Numbers.valueOf(((Id) val).getId());\n+                return ((Id) val).getId();\n             return Filters.convert(val, long.class);\n         }\n "},{"sha":"c415417619d6b9f45a1fc2414ec02243231c649a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -163,7 +163,8 @@ public Expression or(Expression exp1, Expression exp2) {\n     }\n \n     public Expression not(Expression exp) {\n-        if (!(exp instanceof IsNotEmptyExpression) &&\n+        if (!(exp instanceof IsNotEmptyExpression) && \n+            !(exp instanceof InSubQExpression) &&\n             HasContainsExpressionVisitor.hasContains(exp))\n             return new NotContainsExpression((Exp) exp);\n         return new NotExpression((Exp) exp);"},{"sha":"2cfe5ab650ad0c7d331a220e4350407657a22991","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -189,6 +189,12 @@ public synchronized void setContainsId(String id) {\n         if (_cid)\n             return;\n \n+        Action last = _actions == null ? null : (Action) _actions.getLast();\n+        if (last != null && last.op == Action.VAR && ((String)last.data).equals(last.var)) {\n+            _cid = true;\n+            return;\n+        }            \n+            \n         // treat it just like a unique variable\n         Action action = new Action();\n         action.op = Action.VAR;"},{"sha":"3f1ae6803dab65d158431a89d7c907b7d0590442","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,7 +29,6 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.XMLMetaData;\n-import serp.util.Numbers;\n \n /**\n  * Test if one string starts with another.\n@@ -167,11 +166,11 @@ public boolean isConstant() {\n         }\n \n         public Object getValue() {\n-            return Numbers.valueOf(0);\n+            return 0;\n         }\n \n         public Object getSQLValue() {\n-            return Numbers.valueOf(0);\n+            return 0;\n         }\n \n         public boolean isPath() {"},{"sha":"77f83d87499cf25b3e0bf4c05f82851266dd411a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -24,7 +24,6 @@\n import java.sql.Timestamp;\n \n import org.apache.openjpa.meta.JavaTypes;\n-import serp.util.Numbers;\n \n /**\n  * Java SQL type constants.\n@@ -104,10 +103,10 @@ public static Object getEmptyValue(int type) {\n                 return ZERO_FLOAT;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                return Numbers.valueOf(0);\n+                return 0;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                return Numbers.valueOf(0L);\n+                return 0L;\n             case JavaTypes.SHORT:\n             case JavaTypes.SHORT_OBJ:\n                 return ZERO_SHORT;\n@@ -145,10 +144,10 @@ public static Object getNonEmptyValue(int type) {\n                 return NONZERO_FLOAT;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                return Numbers.valueOf(1);\n+                return 1;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                return Numbers.valueOf(1L);\n+                return 1L;\n             case JavaTypes.SHORT:\n             case JavaTypes.SHORT_OBJ:\n                 return NONZERO_SHORT;"},{"sha":"028dfdfed1ae9dd81f2c0b0955b5d54da9c85dba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -943,7 +943,7 @@ public void buildAnnotations() {\n     /**\n      * Returns a list of stringified annotations for specified meta.\n      */\n-    protected List getAnnotationsForMeta(Object meta) {\n+    public List getAnnotationsForMeta(Object meta) {\n         if (null == _annos)\n             return null;\n         return (List) _annos.get(meta);"},{"sha":"7995575cc84734ec99480eff73d44ee1f26fc9f8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,6 +22,7 @@\n \n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n@@ -56,7 +57,10 @@ public void installStrategy(ClassMapping cls) {\n     }\n \n     public void installStrategy(FieldMapping field) {\n-        FieldStrategy strategy = repos.namedStrategy(field, true);\n+        FieldStrategy strategy = null;\n+        ClassMapping owner = getOutermostDefiningMapping(field); \n+        if (owner != null && !owner.isEmbeddable() && !owner.isAbstract())\n+            strategy = repos.namedStrategy(field, true);\n         if (strategy == null) {\n             try {\n                 strategy = repos.defaultStrategy(field, true, false);\n@@ -77,6 +81,20 @@ public void installStrategy(FieldMapping field) {\n         }\n         field.setStrategy(strategy, Boolean.FALSE);\n     }\n+    \n+    private ClassMapping getOutermostDefiningMapping(ValueMetaData vm) {\n+        if (vm instanceof FieldMapping) {\n+            ClassMapping owner = ((FieldMapping)vm).getDefiningMapping();\n+            ValueMetaData val = owner.getEmbeddingMetaData();\n+            if (val == null)\n+                return owner; \n+            return getOutermostDefiningMapping(val);\n+        } else if (vm instanceof ValueMappingImpl) {\n+            FieldMapping owner = ((ValueMappingImpl)vm).getFieldMapping();\n+            return getOutermostDefiningMapping(owner);\n+        }\n+        return null;\n+    }\n \n     public void installStrategy(Version version) {\n         VersionStrategy strat = repos.namedStrategy(version);"},{"sha":"710c6e24d5f6bb9b841037e56fa08cb5fbe8aaae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -368,12 +368,12 @@ public String toString() {\n     }\n \n     /**\n-     * @return a Map<Column,String> specifying how to update each version\n+     * @return a Map<Column,Object> specifying how to update each version\n      * column in this instance during a bulk update.\n      *\n      * @since 1.0.0\n      */\n-    public Map getBulkUpdateValues() {\n+    public Map<Column,?> getBulkUpdateValues() {\n         return _strategy.getBulkUpdateValues();\n     }\n }"},{"sha":"47a541140a3054e41fdb9cd3fa6ad5fb8c2668f0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,6 +22,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -77,10 +78,10 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n     public int compareVersion(Object v1, Object v2);\n \n     /**\n-     * @return a Map<Column,String> specifying how to update each version\n+     * @return a Map<Column,Object> specifying how to update each version\n      * column during a bulk update.\n      *\n      * @since 1.0.0\n      */\n-    public Map getBulkUpdateValues();\n+    public Map<Column,? extends Object> getBulkUpdateValues();\n }"},{"sha":"94f284a1a1051c0939cce59d9d547459699e688e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,7 +29,6 @@\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.util.Id;\n-import serp.util.Numbers;\n \n /**\n  * {@link Joinable} for the datastore identity column.\n@@ -61,7 +60,7 @@ public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n         long id = res.getLong(col);\n         if (id == 0 && res.wasNull())\n             return null;\n-        return Numbers.valueOf(id);\n+        return id;\n     }\n \n     public Column[] getColumns() {"},{"sha":"4f5d050f2c617ed029304d508f618385559eb04b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -111,15 +111,26 @@ public boolean select(Select sel, ClassMapping mapping) {\n \n     public Class getClass(JDBCStore store, ClassMapping base, Result res)\n         throws SQLException, ClassNotFoundException {\n-        if (isFinal || !res.contains(disc.getColumns()[0])\n-            || (base.getPCSuperclass() == null\n-            && base.getJoinablePCSubclassMappings().length == 0))\n+        if (isFinal \n+                || !useDiscrimColumn(base, res)\n+                || (base.getPCSuperclass() == null && base.getJoinablePCSubclassMappings().length == 0)) {\n             return base.getDescribedType();\n+        }\n \n-        Object cls =\n-                res.getObject(disc.getColumns()[0], disc.getJavaType(), null);\n+        Object cls = res.getObject(disc.getColumns()[0], disc.getJavaType(), null);\n         return getClass(cls, store);\n     }\n+    \n+    private final boolean useDiscrimColumn(ClassMapping base, Result res) throws SQLException {\n+        if (res.getBaseMapping() != null && base != null) {\n+            // check whether the result type is assignable to the base mapping.\n+            // if not assignable the discriminator value will not be correct.\n+            if (!base.getDescribedType().isAssignableFrom(res.getBaseMapping().getDescribedType())) {\n+                return false;\n+            }\n+        }\n+        return res.contains(disc.getColumns()[0]);\n+    }\n \n     public boolean hasClassConditions(ClassMapping base, boolean subclasses) {\n         // if selecting the first mapped class and all subclasses, no need\n@@ -141,10 +152,10 @@ public SQLBuffer getClassConditions(Select sel, Joins joins,\n         Column col = disc.getColumns()[0];\n         SQLBuffer sql = new SQLBuffer(sel.getConfiguration().\n             getDBDictionaryInstance());\n+        String alias = sel.getColumnAlias(col, joins);\n         boolean outer = joins != null && joins.isOuter();\n         if (outer)\n             sql.append(\"(\");\n-        String alias = sel.getColumnAlias(col, joins);\n         sql.append(alias);\n \n         // if not selecting subclasses, limit to just the given class\n@@ -165,3 +176,4 @@ public SQLBuffer getClassConditions(Select sel, Joins joins,\n         return sql;\n     }\n }\n+"},{"sha":"cf9d125f8f7a4fb08049a3e3606ff12c6e681901","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,7 +23,6 @@\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.meta.JavaTypes;\n \n-import serp.util.Numbers;\n \n /**\n  * Uses multiple version numbers spanning multiple columns for optimistic \n@@ -46,7 +45,7 @@ public void initialize() {\n     \t\tColumn[] cols = vers.getColumns();\n     \t\t_initials = new Number[cols.length];\n     \t\tfor (int i = 0; i < cols.length; i++) {\n-                _initials[i] = nextValue(Numbers.valueOf(0), getJavaType(i));\n+                _initials[i] = nextValue(0, getJavaType(i));\n     \t\t}\n     \t}\n     \tsuper.initialize();"},{"sha":"b7560e89b30b22defec34d5be56557aed65abc1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -24,7 +24,6 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.jdbc.schema.Column;\n-import serp.util.Numbers;\n \n /**\n  * Uses a version number for optimistic versioning.\n@@ -36,13 +35,13 @@\n \n     public static final String ALIAS = \"version-number\";\n \n-    private Number _initial = Numbers.valueOf(1);\n+    private Number _initial = 1;\n \n     /**\n      * Set the initial value for version column. Defaults to 1.\n      */\n     public void setInitialValue(int initial) {\n-        _initial = Numbers.valueOf(initial);\n+        _initial = initial;\n     }\n \n     /**\n@@ -63,12 +62,12 @@ protected int getJavaType() {\n     protected Object nextVersion(Object version) {\n         if (version == null)\n             return _initial;\n-        return Numbers.valueOf(((Number) version).intValue() + 1);\n+        return ((Number) version).intValue() + 1;\n     }\n \n-    public Map getBulkUpdateValues() {\n+    public Map<Column,String> getBulkUpdateValues() {\n         Column[] cols = vers.getColumns();\n-        Map map = new HashMap(cols.length);\n+        Map<Column,String> map = new HashMap<Column,String>(cols.length);\n         for (int i = 0; i < cols.length; i++)\n             map.put(cols[i], cols[i].getName() + \" + 1\");\n         return map;"},{"sha":"46d94180bee5cff6c38bad9bdf790033d017096d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -70,7 +70,6 @@\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.UnsupportedException;\n \n-import serp.util.Numbers;\n \n /**\n  * Mapping for a single-valued relation to another entity.\n@@ -950,7 +949,7 @@ public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n                 col = fk.getColumn(col);   \n             long id = res.getLong(col, joins);\n             if (field.getObjectIdFieldTypeCode() == JavaTypes.LONG)\n-                return Numbers.valueOf(id);\n+                return id;\n             return store.newDataStoreId(id, relmapping, field.getPolymorphic() \n                 != ValueMapping.POLY_FALSE);\n         }"},{"sha":"190488f2d016228c66beb237c45cbb6bda0dd72e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -32,7 +32,6 @@\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.VersionStrategy;\n import org.apache.openjpa.meta.JavaTypes;\n-import serp.util.Numbers;\n \n /**\n  * Represents a database column. Closely aligned with the column\n@@ -425,11 +424,11 @@ public Object getDefault() {\n                 break;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                _default = Numbers.valueOf(Integer.parseInt(_defaultStr));\n+                _default = Integer.parseInt(_defaultStr);\n                 break;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                _default = Numbers.valueOf(Long.parseLong(_defaultStr));\n+                _default = Long.parseLong(_defaultStr);\n                 break;\n             case JavaTypes.NUMBER:\n             case JavaTypes.BIGDECIMAL:"},{"sha":"dc7355dfed4dfe10f4640bc36d6925c1b83ce9e5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -45,7 +45,6 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.GeneralException;\n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -279,7 +278,7 @@ public String readSchemaColumn()\n         DBDictionary dict = _conf.getDBDictionaryInstance();\n         SQLBuffer sel = new SQLBuffer(dict).append(_schemaColumn);\n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n-            appendValue(Numbers.valueOf(1), _pkColumn);\n+            appendValue(1, _pkColumn);\n         SQLBuffer tables = new SQLBuffer(dict).append(_pkColumn.getTable());\n \n         SQLBuffer select = dict.toSelect(sel, null, tables, where, null,"},{"sha":"d5d1a0e0eaece695414f83847e1afdfab4a28115","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -36,7 +36,6 @@\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n \n /**\n  * Custom SAX parser used to parse {@link Schema} objects. The parser\n@@ -410,8 +409,8 @@ private void startSequence(Attributes attrs) {\n         Sequence seq = _schema.addSequence(attrs.getValue(\"name\"));\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            seq.setLineNumber(locator.getLineNumber());\n+            seq.setColNumber(locator.getColumnNumber());\n         }\n         seq.setSource(getSourceFile(), SourceTracker.SRC_XML);\n         try {\n@@ -434,8 +433,8 @@ private void startTable(Attributes attrs) {\n         _table.setSource(getSourceFile(), SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            _table.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            _table.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            _table.setLineNumber(locator.getLineNumber());\n+            _table.setColNumber(locator.getColumnNumber());\n         }\n     }\n "},{"sha":"41c28ad84889004c9fd754546b15a1d21fc6d4d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -912,7 +912,8 @@ public void createIndexIfNecessary(Schema schema, DBIdentifier table,\n             // build the index for the sequence tables\n             // the index name will be the fully qualified table name + _IDX\n             Table tab = schema.getTable(table);\n-            Index idx = tab.addIndex(DBIdentifier.append(tab.getFullIdentifier(), \"IDX\"));\n+            DBIdentifier idxName = DBIdentifier.append(tab.getFullIdentifier(), \"IDX\");\n+            Index idx = tab.addIndex(getValidIndexName(idxName, tab));\n             idx.setUnique(true);\n             idx.addColumn(pkColumn);\n         }\n@@ -923,22 +924,20 @@ String nullSafe(String s) {\n     }\n \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         String errorState = ex.getSQLState();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if (subtype == StoreException.LOCK && errorState.equals(\"57033\")\n-                && ex.getMessage().indexOf(\"80\") != -1) {\n-                recoverable = Boolean.TRUE;\n-            } else if ((subtype == StoreException.QUERY &&\n-                errorState.equals(\"57014\")) &&\n-                (ex.getErrorCode() == -952 || ex.getErrorCode() == -905)) {\n-                recoverable = Boolean.TRUE;\n-            }\n+        int errorCode = ex.getErrorCode();\n+        if (errorCode == -952 && \"57014\".equals(errorState))\n+            return false;\n+        if (subtype == StoreException.LOCK && \"57033\".equals(errorState)\n+            && ex.getMessage().indexOf(\"80\") != -1) {\n+            return false;\n+        } \n+        if ((subtype == StoreException.QUERY && \"57014\".equals(errorState) &&\n+            (errorCode == -952 || errorCode == -905))) {\n+            return false;\n         }\n-        return recoverable;\n+        return super.isFatalException(subtype, ex);\n     }\n     \n     @Override"},{"sha":"d4303b3776d8179510edd95cefd24596c161d21c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":62,"deletions":42,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -110,6 +110,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -125,7 +126,6 @@\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -539,10 +539,10 @@ public Number getNumber(ResultSet rs, int column)\n                     return new Float(getFloat(rs, column));\n                 } catch (Exception e3) {\n                     try {\n-                        return Numbers.valueOf(getLong(rs, column));\n+                        return getLong(rs, column);\n                     } catch (Exception e4) {\n                         try {\n-                            return Numbers.valueOf(getInt(rs, column));\n+                            return getInt(rs, column);\n                         } catch (Exception e5) {\n                         }\n                     }\n@@ -2134,14 +2134,18 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             Path path = (Path) updateParams.keySet().iterator().next();\n             FieldMapping fm = (FieldMapping) path.last();\n             ClassMapping meta = fm.getDeclaringMapping();\n-            Map updates = meta.getVersion().getBulkUpdateValues();\n-            for (Iterator iter = updates.entrySet().iterator();\n-                iter.hasNext(); ) {\n-                Map.Entry e = (Map.Entry) iter.next();\n+            Map<Column,?> updates = meta.getVersion().getBulkUpdateValues();\n+            for (Map.Entry e : updates.entrySet()) {\n                 Column col = (Column) e.getKey();\n-                String val = (String) e.getValue();\n-                sql.append(\", \").append(toDBName(col.getIdentifier()))\n-                    .append(\" = \").append(val);\n+                Object val = e.getValue();\n+                sql.append(\", \").append(toDBName(col.getIdentifier())).append(\" = \");\n+                // Version update value for Numeric version is encoded in a String\n+                // to make SQL such as version = version+1 while Time stamp version is parameterized\n+                if (val instanceof String) {\n+                    sql.append((String)val);\n+                } else {\n+                    sql.appendValue(val);\n+                }\n             }\n         }\n     }\n@@ -4778,10 +4782,9 @@ public void handleWarning(SQLWarning warning)\n      * be determined by the implementation. This may take into account\n      * DB-specific exception information in <code>causes</code>.\n      */\n-    public OpenJPAException newStoreException(String msg, SQLException[] causes,\n-        Object failed) {\n+    public OpenJPAException newStoreException(String msg, SQLException[] causes, Object failed) {\n         if (causes != null && causes.length > 0) {\n-            OpenJPAException ret = narrow(msg, causes[0]);\n+            OpenJPAException ret = narrow(msg, causes[0], failed);\n             ret.setFailedObject(failed).setNestedThrowables(causes);\n             return ret;\n         }\n@@ -4790,36 +4793,29 @@ public OpenJPAException newStoreException(String msg, SQLException[] causes,\n     }\n     \n     /**\n-     * Gets the subtype of StoreException by matching the given SQLException's\n+     * Gets the category of StoreException by matching the given SQLException's\n      * error state code to the list of error codes supplied by the dictionary.\n-     * Returns -1 if no matching code can be found.\n-     */\n-    OpenJPAException narrow(String msg, SQLException ex) {\n-        Boolean recoverable = null;\n-        int errorType = StoreException.GENERAL;\n-        for (Integer type : sqlStateCodes.keySet()) {\n-            Set<String> errorStates = sqlStateCodes.get(type);\n-            if (errorStates != null) {\n-                recoverable = matchErrorState(type, errorStates, ex);\n-                if (recoverable != null) {\n-                    errorType = type;\n-                    break;\n-                }\n-            }\n-        }\n+     * \n+     * @return a StoreException of {@link ExceptionInfo#GENERAL general} category\n+     * if the given SQL Exception can not be further categorized.\n+     * \n+     * @see #matchErrorState(Map, SQLException)\n+     */\n+    OpenJPAException narrow(String msg, SQLException ex, Object failed) {\n+        int errorType = matchErrorState(sqlStateCodes, ex);\n         StoreException storeEx;\n         switch (errorType) {\n         case StoreException.LOCK:\n-            storeEx = new LockException(msg);\n+            storeEx = new LockException(failed);\n             break;\n         case StoreException.OBJECT_EXISTS:\n             storeEx = new ObjectExistsException(msg);\n             break;\n         case StoreException.OBJECT_NOT_FOUND:\n-            storeEx = new ObjectNotFoundException(msg);\n+            storeEx = new ObjectNotFoundException(failed);\n             break;\n         case StoreException.OPTIMISTIC:\n-            storeEx = new OptimisticException(msg);\n+            storeEx = new OptimisticException(failed);\n             break;\n         case StoreException.REFERENTIAL_INTEGRITY:\n             storeEx = new ReferentialIntegrityException(msg);\n@@ -4830,24 +4826,48 @@ OpenJPAException narrow(String msg, SQLException ex) {\n         default:\n             storeEx = new StoreException(msg);\n         }\n-        if (recoverable != null) {\n-            storeEx.setFatal(!recoverable);\n-        }\n+        storeEx.setFatal(isFatalException(errorType, ex));\n         return storeEx;\n     }\n \n     /**\n-     * Determine if the SQLException argument matches any element in the\n-     * errorStates. Dictionary subclass can override this method and extract\n+     * Determine the more appropriate type of store exception by matching the SQL Error State of the\n+     * the given SQLException to the given Error States categorized by error types.\n+     * Dictionary subclass can override this method and extract\n      * SQLException data to figure out if the exception is recoverable.\n      * \n-     * @return null if no match is found or a Boolean value indicates the\n-     * exception is recoverable.\n+     * @param errorStates classification of SQL error states by their specific nature. The keys of the\n+     * map represent one of the constants defined in {@link StoreException}. The value corresponding to\n+     * a key represent the set of SQL Error States representing specific category of database error. \n+     * This supplied map is sourced from <code>sql-error-state-codes.xml</xml> and filtered the\n+     * error states for the current database.\n+     * \n+     * @param ex original SQL Exception as raised by the database driver.\n+     * \n+     * @return A constant indicating the category of error as defined in {@link StoreException}.\n      */\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n         String errorState = ex.getSQLState();\n-        return errorStates.contains(errorState) ? Boolean.FALSE : null;\n+        for (Map.Entry<Integer,Set<String>> states : errorStates.entrySet()) {\n+            if (states.getValue().contains(errorState))\n+                return states.getKey();\n+        }\n+        return StoreException.GENERAL;\n+    }\n+    \n+    /**\n+     * Determine if the given SQL Exception is fatal or recoverable (such as a timeout).\n+     * This implementation always returns true (i.e. all exceptions are fatal).\n+     * The current dictionary implementation can overwrite this method to mark certain\n+     * exception conditions as recoverable error.\n+\n+     * @param subtype A constant indicating the category of error as defined in {@link StoreException}. \n+     * @param ex original SQL Exception as raised by the database driver.\n+     * \n+     * @return false if the error is fatal. \n+     */\n+    public boolean isFatalException(int subtype, SQLException ex) {\n+        return true;\n     }\n     \n     /**"},{"sha":"1a8839f9d5b333212f9fa37fb0d75596d6523965","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -135,27 +135,21 @@ public void closeDataSource(DataSource dataSource) {\n                 DriverManager.getConnection(conf.getConnectionURL()\n                     + \";shutdown=true\");\n             } catch (SQLException e) {\n-                // we actuall expect a SQLException to be thrown here:\n+                // we actually expect a SQLException to be thrown here:\n                 // Derby strangely uses that as a mechanism to report\n                 // a successful shutdown\n             }\n         }\n     }\n     \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n-        String errorState = ex.getSQLState();\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         int errorCode = ex.getErrorCode();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if ((subtype == StoreException.LOCK ||\n-                    subtype == StoreException.QUERY) && errorCode < 30000) {\n-                recoverable = Boolean.TRUE;\n-            }\n+        if ((subtype == StoreException.LOCK ||\n+             subtype == StoreException.QUERY) && errorCode <= 30000) {\n+            return false;\n         }\n-        return recoverable;\n+        return super.isFatalException(subtype, ex);\n     }\n \n }"},{"sha":"2daa460771cafb6118bc024b1f09aa0a2ba61e2d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -25,6 +25,7 @@\n import java.sql.Types;\n import java.text.MessageFormat;\n import java.util.Arrays;\n+import java.util.Map;\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -38,6 +39,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n \n /**\n@@ -482,10 +484,12 @@ protected String appendSize(Column col, String typeName) {\n      * Use error code as SQL state returned by Firebird is ambiguous.\n      */\n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        int errorCode = ex.getErrorCode();\n-        return errorStates.contains(String.valueOf(errorCode)) ? Boolean.FALSE\n-            : null;\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n+        String errorState = \"\"+ex.getErrorCode();\n+        for (Map.Entry<Integer,Set<String>> states : errorStates.entrySet()) {\n+            if (states.getValue().contains(errorState))\n+                return states.getKey();\n+        }\n+        return StoreException.GENERAL;\n     }\n }"},{"sha":"d4cbb8af617caaa476ddd1ee4c6c1fd03e2afb5a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":47,"deletions":21,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,6 +29,7 @@\n import java.util.Collection;\n import java.util.Set;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -167,11 +168,13 @@ public void connectedConfiguration(Connection conn)\n             { \n                 driverVendor = VENDOR_IBM;\n                 useJCC = true;\n-                try {\n-                    if (meta.storesLowerCaseIdentifiers()) \n-                        schemaCase = SCHEMA_CASE_LOWER;\n-                } catch (SQLException e) {}\n-            } else if (\"Informix\".equalsIgnoreCase(driverName))\n+                setIdentifierCase(meta);\n+            } \n+            else if (driverName.equals(\"IBM Informix JDBC Driver for IBM Informix Dynamic Server\")) {\n+                setIdentifierCase(meta);\n+                driverVendor = VENDOR_IBM;\n+            }\n+            else if (\"Informix\".equalsIgnoreCase(driverName))\n                 driverVendor = VENDOR_DATADIRECT;\n             else\n                 driverVendor = VENDOR_OTHER;\n@@ -186,11 +189,40 @@ public void connectedConfiguration(Connection conn)\n                     conn.getTransactionIsolation()}));\n         }\n     }\n+    \n+    private void setIdentifierCase(DatabaseMetaData meta) {\n+        try {\n+            // lower case identifiers is the default for the JCC and newer\n+            // Informix JDBC drivers\n+            if (meta.storesLowerCaseIdentifiers()) { \n+                schemaCase = SCHEMA_CASE_LOWER;\n+            }\n+            else if (meta.storesMixedCaseIdentifiers()) {\n+                schemaCase = SCHEMA_CASE_PRESERVE;\n+            }\n+            // otherwise, use the default (upper)\n+        }\n+        catch (SQLException e) {\n+            getLog().warn(\"cannot-determine-identifier-base-case\");\n+            if (getLog().isTraceEnabled()) {\n+                getLog().trace(e.toString(), e);\n+            }\n+        }\n+    }\n \n     @Override\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n+        return getColumns(meta, DBIdentifier.newCatalog(catalog), \n+            DBIdentifier.newSchema(schemaName),DBIdentifier.newTable(tableName),\n+            DBIdentifier.newColumn(columnName), conn);\n+    }\n+\n+    @Override\n+    public Column[] getColumns(DatabaseMetaData meta, DBIdentifier catalog,\n+        DBIdentifier schemaName, DBIdentifier tableName, DBIdentifier columnName, Connection conn)\n+        throws SQLException {\n         Column[] cols = super.getColumns(meta, catalog, schemaName, tableName,\n             columnName, conn);\n \n@@ -345,23 +377,17 @@ public String getSchemaCase(){\n     }\n         \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n-        String errorState = ex.getSQLState();\n-        if (errorStates.contains(errorState)) {\n-            // SQL State of IX000 is a general purpose Informix error code\n-            // category, so only return Boolean.TRUE if we match SQL Codes\n-            // recoverable = Boolean.FALSE;\n-            if (subtype == StoreException.LOCK &&\n-                ex.getErrorCode() == -154) {\n-                recoverable = Boolean.TRUE;\n-            } else if (subtype == StoreException.QUERY &&\n-                ex.getErrorCode() == -213) {\n-                recoverable = Boolean.TRUE;\n-            }\n+    public boolean isFatalException(int subtype, SQLException ex) {\n+        \n+        // SQL State of IX000 is a general purpose Informix error code\n+        // category, so only return Boolean.TRUE if we match SQL Codes\n+        // recoverable = Boolean.FALSE;\n+        if ((subtype == StoreException.LOCK && ex.getErrorCode() == -154) \n+          ||(subtype == StoreException.QUERY && ex.getErrorCode() == -213)) {\n+            return false;\n         }\n-        return recoverable;\n+        \n+        return super.isFatalException(subtype, ex);\n     }\n }\n "},{"sha":"d612f8e87a62cd161990c069c239c322a24a3965","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -901,6 +901,10 @@ public Context ctx() {\n         public void setSchemaAlias(String schemaAlias) {\n             sel.setSchemaAlias(schemaAlias);\n         }\n+\n+        public void logEagerRelations() {\n+            sel.logEagerRelations();            \n+        }\n     }\n \n     /**"},{"sha":"6efadb88bae3db50e8f59a4acc03eff4be34d7e0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":41,"deletions":1,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.util.StoreException;\n \n /**\n  * Dictionary for MySQL.\n@@ -75,6 +76,10 @@\n      */\n     public boolean optimizeMultiTableDeletes = false;\n \n+    public static final String tinyBlobTypeName = \"TINYBLOB\";\n+    public static final String mediumBlobTypeName = \"MEDIUMBLOB\";\n+    public static final String longBlobTypeName = \"LONGBLOB\";\n+\n     public MySQLDictionary() {\n         platform = \"MySQL\";\n         validationSQL = \"SELECT NOW()\";\n@@ -232,7 +237,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n     public String[] getCreateTableSQL(Table table) {\n         String[] sql = super.getCreateTableSQL(table);\n         if (!StringUtils.isEmpty(tableType))\n-            sql[0] = sql[0] + \" TYPE = \" + tableType;\n+            sql[0] = sql[0] + \" ENGINE = \" + tableType;\n         return sql;\n     }\n \n@@ -416,4 +421,39 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n         }\n         return result;\n     }\n+    \n+    @Override\n+    public boolean isFatalException(int subtype, SQLException ex) {\n+        if ((subtype == StoreException.LOCK  && ex.getErrorCode() == 1205)\n+          ||(subtype == StoreException.QUERY && ex.getErrorCode() == 1317)) {\n+            return false;\n+        }\n+        if (ex.getErrorCode() == 0 && ex.getSQLState() == null)\n+            return false;\n+        return super.isFatalException(subtype, ex);\n+    }\n+\n+    /**\n+     * OPENJPA-740 Special case for MySql special column types,\n+     * like LONGTEXT, LONGBLOG etc..\n+     * @see org.apache.openjpa.jdbc.sql.DBDictionary#getTypeName(org.apache.openjpa.jdbc.schema.Column)\n+     */\n+    @Override\n+    public String getTypeName(Column col) {\n+        if (col.getType() == Types.BLOB) {\n+            if (col.getSize() == 0)   // unknown size\n+                return blobTypeName;  // return old default of 64KB\n+            else if (col.getSize() <= 255)\n+                return tinyBlobTypeName;\n+            else if (col.getSize() <= 65535)\n+                return blobTypeName;  // old default of 64KB\n+            else if (col.getSize() <= 16777215)\n+                return mediumBlobTypeName;\n+            else\n+                return longBlobTypeName;\n+        } else {\n+            return super.getTypeName(col);\n+        }\n+    }\n }\n+"},{"sha":"53ab8bbecc0577cfdd15a1297e7a488a47d6c4e1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -60,7 +60,6 @@\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n \n /**\n  * Dictionary for Oracle.\n@@ -1006,7 +1005,7 @@ public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n     public Object getGeneratedKey(Column col, Connection conn)\n         throws SQLException {\n         if (!useTriggersForAutoAssign)\n-            return Numbers.valueOf(0L);\n+            return 0L;\n \n         // if we simulate auto-assigned columns using triggers and\n         // sequences, then return the current value of the sequence\n@@ -1023,7 +1022,7 @@ else if (seq == null)\n             setTimeouts(stmnt, conf, false);\n             rs = stmnt.executeQuery();\n             rs.next();\n-            return Numbers.valueOf(rs.getLong(1));\n+            return rs.getLong(1);\n         } finally {\n             if (rs != null)\n                 try { rs.close(); } catch (SQLException se) {}\n@@ -1129,7 +1128,7 @@ private static void invokePutLobMethod(Method method, Object target,\n         Object data)\n         throws SQLException {\n         try {\n-            method.invoke(target, new Object[]{ Numbers.valueOf(1L), data });\n+            method.invoke(target, new Object[]{ 1L, data });\n         } catch (InvocationTargetException ite) {\n             Throwable t = ite.getTargetException();\n             if (t instanceof SQLException)\n@@ -1260,25 +1259,20 @@ public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n     }\n     \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         String errorState = ex.getSQLState();\n         int errorCode = ex.getErrorCode();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if ((subtype == StoreException.LOCK)\n-                && ((errorState.equals(\"61000\") && (errorCode == 54 ||\n-                     errorCode == 60 || errorCode == 4020 ||\n-                     errorCode == 4021 || errorCode == 4022))\n-                    || (errorState.equals(\"42000\") && errorCode == 2049))) {\n-                recoverable = Boolean.TRUE;\n-            } else if (subtype == StoreException.QUERY &&\n-                errorState.equals(\"72000\") && errorCode == 1013) {\n-                recoverable = Boolean.TRUE;\n-            }\n+        if ((subtype == StoreException.LOCK)\n+            && ((\"61000\".equals(errorState) && (errorCode == 54 ||\n+                 errorCode == 60 || errorCode == 4020 ||\n+                 errorCode == 4021 || errorCode == 4022))\n+                || (\"42000\".equals(errorState) && errorCode == 2049))) {\n+            return false;\n+        } \n+        if (\"72000\".equals(errorState) && errorCode == 1013) {\n+            return false;\n         }\n-        return recoverable;\n+        return super.isFatalException(subtype, ex);\n     }\n     \n     @Override"},{"sha":"69974ecafee65f11e1c600a994fbf23c8ee8a6d5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -44,7 +44,6 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.meta.JavaTypes;\n \n-import serp.util.Numbers;\n \n /**\n  * Base {@link Result} implementation wrapped around a result set.\n@@ -387,11 +386,11 @@ protected Object getObjectInternal(Object obj, int metaTypeCode,\n                 break;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                val = Numbers.valueOf(getIntInternal(obj, joins));\n+                val = getIntInternal(obj, joins);\n                 break;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                val = Numbers.valueOf(getLongInternal(obj, joins));\n+                val = getLongInternal(obj, joins);\n                 break;\n             case JavaTypes.SHORT:\n             case JavaTypes.SHORT_OBJ:\n@@ -495,7 +494,7 @@ protected Object translate(Object obj, Joins joins)\n         throws SQLException {\n         if (obj instanceof Number)\n             return obj;\n-        return Numbers.valueOf(findObject(obj, joins));\n+        return findObject(obj, joins);\n     }\n \n     /**"},{"sha":"4a88315d74fa82fe2805d15ead6c3c704b48769e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -45,7 +45,6 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n-import serp.util.Numbers;\n \n /**\n  * Basic {@link Row} implementation.\n@@ -440,12 +439,12 @@ public void setFloat(Column col, float val)\n \n     public void setInt(Column col, int val)\n         throws SQLException {\n-        setObject(col, Numbers.valueOf(val), JavaTypes.INT, false);\n+        setObject(col, val, JavaTypes.INT, false);\n     }\n \n     public void setLong(Column col, long val)\n         throws SQLException {\n-        setObject(col, Numbers.valueOf(val), JavaTypes.LONG, false);\n+        setObject(col, val, JavaTypes.LONG, false);\n     }\n \n     public void setLocale(Column col, Locale val)\n@@ -607,12 +606,12 @@ public void whereFloat(Column col, float val)\n \n     public void whereInt(Column col, int val)\n         throws SQLException {\n-        whereObject(col, Numbers.valueOf(val), JavaTypes.INT);\n+        whereObject(col, val, JavaTypes.INT);\n     }\n \n     public void whereLong(Column col, long val)\n         throws SQLException {\n-        whereObject(col, Numbers.valueOf(val), JavaTypes.LONG);\n+        whereObject(col, val, JavaTypes.LONG);\n     }\n \n     public void whereLocale(Column col, Locale val)"},{"sha":"1b3a99b329ec3ffe3d7061c316d4b4a5b8e7f508","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":27,"deletions":28,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -38,7 +38,6 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.kernel.exps.Parameter;\n \n-import serp.util.Numbers;\n \n /**\n  * Buffer for SQL statements that can be used to create\n@@ -157,30 +156,30 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n-        if (buf._userIndex != null) {\n-            if (_userIndex == null)\n-                _userIndex = new ArrayList();\n-            for (int i = 0; i < buf._userIndex.size(); i+=2) {\n-                int newIndex = ((Integer)buf._userIndex.get(i)).intValue() \n-                    + paramIndex;\n-                Object userParam = buf._userIndex.get(i+1);\n-                _userIndex.add(newIndex);\n-                _userIndex.add(userParam);\n-            }\n-        } else { \n-            if (_userIndex != null) {\n-                List userIndex = new ArrayList();\n-                for (int i = 0; i < _userIndex.size(); i+=2) {\n-                    int oldIndex = ((Integer)_userIndex.get(i)).intValue();\n-                    Object userParam = _userIndex.get(i+1);\n-                    if (oldIndex >= paramIndex) \n-                        userIndex.add(oldIndex + paramIndex);\n-                    else \n-                        userIndex.add(oldIndex);\n-                    userIndex.add(userParam);\n-                }\n-                _userIndex = userIndex;\n+        \n+        // adding user parameters from another buffer to this buffer\n+        // this buffer's user parameter index gets modified\n+        if (buf._userIndex == null && this._userIndex == null) {\n+            // do nothing\n+        } else if (buf._userIndex != null && this._userIndex == null) {\n+            // copy the other buffers data\n+            this._userIndex = new ArrayList(buf._userIndex);\n+        } else if (buf._userIndex == null && this._userIndex != null) {\n+            // nothing to add from the other buffer\n+        } else { // both has data. \n+            // modify this buffer's user parameter index\n+            int otherSize = buf._userIndex.size()/2;\n+            for (int i = 0; i < _userIndex.size(); i+=2) {\n+                int newIndex = ((Integer)_userIndex.get(i)).intValue() + otherSize;\n+                _userIndex.set(i, newIndex);\n             }\n+            // append the other buffer's user parameters to this one\n+            for (int i = 0; i < buf._userIndex.size(); i+=2) {\n+                Object otherIndex = buf._userIndex.get(i);\n+                Object otherParam = buf._userIndex.get(i+1);\n+                _userIndex.add(otherIndex);\n+                _userIndex.add(otherParam);\n+            }            \n         }\n     }\n     \n@@ -388,28 +387,28 @@ public SQLBuffer appendValue(float f, Column col) {\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(int i) {\n-        return appendValue(i, null);\n+        return appendValue(Integer.valueOf(i), null);\n     }\n \n     /**\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(int i, Column col) {\n-        return appendValue(Numbers.valueOf(i), col);\n+        return appendValue(Integer.valueOf(i), col);\n     }\n \n     /**\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(long l) {\n-        return appendValue(l, null);\n+        return appendValue(Long.valueOf(l), null);\n     }\n \n     /**\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(long l, Column col) {\n-        return appendValue(Numbers.valueOf(l), col);\n+        return appendValue(Long.valueOf(l), col);\n     }\n \n     /**"},{"sha":"06bfdd8bb2b8ea2cb31842189c5fb81f447c123c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -129,8 +129,7 @@ public static OpenJPAException getStore(String msg, SQLException se,\n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */\n-    public static OpenJPAException getStore(String msg, SQLException se,\n-        Object failed, DBDictionary dict, int level) {\n+    public static OpenJPAException getStore(String msg, SQLException se, Object failed, DBDictionary dict, int level) {\n         if (msg == null)\n             msg = se.getClass().getName();\n         SQLException[] ses = getSQLExceptions(se);"},{"sha":"0adfc04de0e0fd8fd2e585e7c01b3422b7ebceab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -281,20 +281,12 @@ public void setSupportsXMLColumn(boolean b) {\n     }\n     \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n+    public boolean isFatalException(int subtype,  SQLException ex) {\n         String errorState = ex.getSQLState();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if (subtype == StoreException.LOCK && errorState.equals(\"1222\")) {\n-                recoverable = Boolean.TRUE;\n-            } else if (subtype == StoreException.QUERY &&\n-                errorState.equals(\"HY008\")) {\n-                recoverable = Boolean.TRUE;\n-            }\n-        }\n-        return recoverable;\n+        if ((subtype == StoreException.LOCK  || subtype == StoreException.QUERY)\n+          &&(\"1222\".equals(errorState) || \"HY008\".equals(errorState)))\n+         return false;\n+        return super.isFatalException(subtype, ex);\n     }\n \n     /**"},{"sha":"4f0674356238839e56ed8388410e544afcbbf19e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -733,4 +733,8 @@ public SelectExecutor eagerClone(FieldMapping key, int eagerType,\n      */\n     public boolean getHasSubselect();\n    \n+    /**\n+     * Extended trace that logs eager relations\n+     */\n+    public void logEagerRelations();\n }"},{"sha":"d4e67a17c90d535617f7cdd83ce3e89ac9bfeef0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -61,7 +61,6 @@\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.Id;\n import org.apache.openjpa.util.InternalException;\n-import serp.util.Numbers;\n \n /**\n  * Standard {@link Select} implementation. Usage note: though this class\n@@ -378,6 +377,7 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n                 forUpdate = lm.selectForUpdate(this, lockLevel);\n         }\n \n+        logEagerRelations();\n         SQLBuffer sql = toSelect(forUpdate, fetch);\n         boolean isLRS = isLRS();\n         int rsType = (isLRS && supportsRandomAccess(forUpdate))\n@@ -1261,7 +1261,7 @@ List getOrderedIndexes() {\n             return null;\n         List idxs = new ArrayList(_ordered.size());\n         for (int i = 0; i < _ordered.size(); i++)\n-            idxs.add(Numbers.valueOf(_selects.indexOf(_ordered.get(i))));\n+            idxs.add(_selects.indexOf(_ordered.get(i)));\n         return idxs;\n     }\n \n@@ -1362,7 +1362,7 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n         for (int i = 0; i < toCols.length; i++, count++) {\n             if (pks == null)\n                 val = (oid == null) ? null :\n-                        Numbers.valueOf(((Id) oid).getId());\n+                        ((Id) oid).getId();\n             else {\n                 // must be app identity; use pk index to get correct pk value\n                 join = mapping.assertJoinable(toCols[i]);\n@@ -1769,6 +1769,13 @@ public Map getEagerMap() {\n         return _eager;\n     }\n \n+    public void logEagerRelations() {\n+        if (_eagerKeys != null) {\n+            _conf.getLog(JDBCConfiguration.LOG_DIAG).trace(\n+                \"Eager relations: \"+_eagerKeys);\n+        }\n+    }\n+\n     public SelectExecutor getEager(FieldMapping key) {\n         if (_eager == null || !_eagerKeys.contains(key))\n             return null;\n@@ -2015,7 +2022,7 @@ private int getTableIndex(Table table, PathJoins pj, boolean create) {\n             return -1;\n \n         // not found; create alias\n-        i = Numbers.valueOf(aliasSize(null));\n+        i = aliasSize(null);\n //        System.out.println(\"GetTableIndex\\t\"+\n //                ((_parent != null) ? \"Sub\" :\"\") +\n //                \" created alias: \"+\n@@ -2077,7 +2084,7 @@ private Integer getAlias(Table table, Object key) {\n     }\n \n     private int createAlias(Table table, Object key) {\n-        Integer i = Numbers.valueOf(ctx().nextAlias());\n+        Integer i = ctx().nextAlias();\n //        System.out.println(\"\\t\"+\n //                ((_parent != null) ? \"Sub\" :\"\") +\n //                \"Query created alias: \"+ "},{"sha":"5bb99f68a6e8c03380a31175ed03dc69bc875e15","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":22,"deletions":14,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -149,17 +149,25 @@ bad-lrs-size: Invalid LRS size. Valid values are \\\n     \"unknown\"(0), \"last\"(1) or \"query\"(2). Specified value: {0}.\n bad-join-syntax: Invalid join syntax. Valid values are \\\n     \"sql92\"(0), \"tradition\"(1) or \"database\"(2). Specified value: {0}.\n-exclude-multi-select: because this query generates multiple SQL statements. \\\n-\tA query can be cached only when it corresponds to a single SQL statement.  \n-exclude-not-result: because this query returns a single value rather than \\\n-\ta list. A query that returns single value can not be cached. \n-exclude-no-user-object: because post-execution data can not be extracted \\\n-    from this query.\n-exclude-no-sql: because target SQL statement can not be extracted \\\n-    from this query.\n-exclude-no-select: because internal select instance can not be extracted \\\n-    from this query.\n-exclude-not-select-rop: because the query result is not obtained by executing \\\n-\ta select statement. This can happen if the query was evaluated in-memory. \\\n-\tThe result was provided by an instance of {0}.  \n-exclude-not-executor: because this query was not executed on a data store.    \n+exclude-multi-select: Query \"{0}\" is not cached because it generates multiple \\\n+    SQL statements. A query can be cached only when it corresponds to a single \\\n+    SQL statement.  \n+exclude-not-result: Query \"{0}\" is not cached because it returns a single value \\\n+    rather than a list. A query that returns single value can not be cached. \n+exclude-no-user-object: Query \"{0}\" is not cached because post-execution data \\\n+    can not be extracted from this query.\n+exclude-no-sql: Query \"{0}\" is not cached because SQL statement can not be \\\n+    extracted from this query.\n+exclude-no-select: Query \"{0}\" is not cached because the internal select \\\n+    can not be extracted from this query.\n+exclude-not-select-rop: Query \"{0}\" is not cached because its result \\\n+    is not obtained by executing a select statement. This can happen \\\n+    if the query was evaluated in-memory. The result was provided by {1}.  \n+exclude-not-executor: Query \"{0}\" is not cached because it was not executed on a \\\n+    data store.    \n+exclude-externalized-param: Query \"{0}\" is not cached because some parameterized \\\n+    field values are externalized.  \n+exclude-user-strategy: This query \"{0}\" is not cached because some parameterized \\\n+    field value depends on user-defined field strategy.        \n+exclude-pagination: This query \"{0}\" involves pagination and is not cached.\n+      \n\\ No newline at end of file"},{"sha":"de0ace73d0ff689fe68c0566898f289784250851","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -204,4 +204,6 @@ cannot-determine-identifier-case: Unable to determine the case to use for delimi\n     identifiers.  The default value of \"preserve\" will be used.\n unknown-delim-support: Unable to determine whether delimited identifiers are supported. \\\n     The use of delimiters will not be supported.\n-can_not_get_current_schema: Unable to get current schema. SQLException message is \"{0}\".\n\\ No newline at end of file\n+can_not_get_current_schema: Unable to get current schema. SQLException message is \"{0}\".\n+cannot-determine-identifier-base-case: Unable to determine the case to use for \\\n+    identifiers.  The default value of \"{0}\" will be used."},{"sha":"72da6d2e83dba16b4622cc1326b8fbbaa1471a71","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -29,7 +29,7 @@\n <sql-state-codes>\n \n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.DB2Dictionary\">\n-\t\t<lock>40001,57033,57011</lock>\n+\t\t<lock>40001,57033,57011,57014</lock>\n \t\t<referential-integrity>23502,42912,23001,23504,23511,23512,23513,23515,23520</referential-integrity>\n \t\t<object-exists>23505</object-exists>\n \t\t<object-not-found></object-not-found>\n@@ -155,12 +155,12 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.MySQLDictionary\">\n-\t\t<lock>1205,1213</lock>\n+\t\t<lock>41000</lock>\n \t\t<referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\n \t\t<object-exists>23000</object-exists>\n \t\t<object-not-found></object-not-found>\n-\t\t<optimistic>41000</optimistic>\n-\t\t<query></query>\n+\t\t<optimistic></optimistic>\n+\t\t<query>70100</query>\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">"},{"sha":"9941075c45de89bf964b0c102b247ac70e4d4ae7","filename":"openjpa-kernel/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"8f6f196309b07edecd9dda3755bbd4c99c94d267","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -28,6 +28,7 @@\n public class CallbackOptions implements Serializable {\n     private boolean _isPostPersistCallbackImmediate = false;\n     private boolean _allowsMultipleMethodsForSameCallback = false;\n+    private boolean _allowsDuplicateListener = true;\n     \n     /**\n      * Affirms if the post-persist callback is invoked as soon as a new instance\n@@ -64,4 +65,22 @@ public boolean getAllowsMultipleMethodsForSameCallback() {\n     public void setAllowsMultipleMethodsForSameCallback(boolean flag) {\n         _allowsMultipleMethodsForSameCallback = flag;\n     }\n+\n+    /** \n+     * Flags if duplicate listeners are allowed to handle the same \n+     * callback event.\n+     * Defaults to true.\n+     */\n+    public boolean getAllowsDuplicateListener() {\n+        return _allowsDuplicateListener;\n+    }\n+    \n+    /** \n+     * Flags if duplicate listeners are allowed to handle the same \n+     * callback event.\n+     */\n+    public void setAllowsDuplicateListener(boolean flag) {\n+        _allowsDuplicateListener = flag;\n+    }\n+\n }"},{"sha":"be1352060f3fa6aaa240b1e2a65d5dc17ae1d275","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -33,6 +33,8 @@\n     private boolean _transient = true;\n     private boolean _manager = true;\n     private boolean _access = true;\n+    \n+    private boolean _liteAutoDetach = false;\n \n     /**\n      * The {@link DetachState} constant.\n@@ -124,6 +126,22 @@ public boolean getAccessUnloaded() {\n     public void setAccessUnloaded(boolean val) {\n         _access = val;\n     }\n+    \n+    /**\n+     * Whether to use lite detachment when auto detaching. This setting only applies when\n+     * DetachState is set to loaded.\n+     */\n+    public void setLiteAutoDetach(boolean b) {\n+        _liteAutoDetach = b;\n+    }\n+\n+    /**\n+     * Whether to use lite detachment when auto detaching. This setting only applies when\n+     * DetachState is set to loaded.\n+     */\n+    public boolean getLiteAutoDetach() {\n+        return (getDetachState() & DETACH_LOADED) == 1 && _liteAutoDetach;\n+    }\n \n     /**\n      * Detach loaded state."},{"sha":"2387fbbf2631d05d0385d8bd55a4c3cb43f88420","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -165,9 +165,6 @@\n     public StringValue validationGroupPrePersist;\n     public StringValue validationGroupPreUpdate;\n     public StringValue validationGroupPreRemove;\n-    public ObjectValue writeBehindCachePlugin;\n-    public ObjectValue writeBehindCacheManagerPlugin;\n-    public ObjectValue writeBehindCallbackPlugin;\n     public StringValue dataCacheMode; \n     public BooleanValue dynamicEnhancementAgent;\n     \n@@ -682,13 +679,24 @@ public void setDataCacheManager(DataCacheManager dcm) {\n         dataCacheManagerPlugin.set(dcm);\n     }\n \n+    // This boolean is used for double checked locking. We want to minimize the amount of time that\n+    // we're locking here.\n+    private boolean dataCacheManagerInitialized = false;\n     public DataCacheManager getDataCacheManagerInstance() {\n-        DataCacheManager dcm = (DataCacheManager) dataCacheManagerPlugin.get();\n-        if (dcm == null) {\n-            dcm =  (DataCacheManager) dataCacheManagerPlugin.instantiate(DataCacheManager.class, this);\n-            dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n+        if (dataCacheManagerInitialized == false) {\n+            synchronized (this) {\n+                if (dataCacheManagerInitialized == false) {\n+                    DataCacheManager dcm = (DataCacheManager) dataCacheManagerPlugin.get();\n+                    if (dcm == null) {\n+                        dcm = (DataCacheManager) dataCacheManagerPlugin.instantiate(DataCacheManager.class, this);\n+                        dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n+                    }\n+                    dataCacheManagerInitialized = true;\n+                    return dcm;\n+                }\n+            }\n         }\n-        return dcm;\n+        return (DataCacheManager) dataCacheManagerPlugin.get();\n     }\n \n     public void setDataCache(String dataCache) {"},{"sha":"57afbd5377b298934f12bb09f43163751d927a1a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -25,6 +25,7 @@\n import java.util.StringTokenizer;\n \n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * This class contains version information for OpenJPA. It uses\n@@ -35,6 +36,8 @@\n  */\n public class OpenJPAVersion {\n \n+    private static final Localizer _loc = Localizer.forPackage(OpenJPAVersion.class);\n+\n     public static final String VERSION_NUMBER;\n     public static final String VERSION_ID;\n     public static final String VENDOR_NAME = \"OpenJPA\";\n@@ -128,9 +131,9 @@ public void appendOpenJPABanner(StringBuilder buf) {\n         buf.append(VENDOR_NAME).append(\" \");\n         buf.append(VERSION_NUMBER);\n         buf.append(\"\\n\");\n-        buf.append(\"version id: \").append(VERSION_ID);\n+        buf.append(_loc.get(\"version-id\")).append(\": \").append(VERSION_ID);\n         buf.append(\"\\n\");\n-        buf.append(\"Apache svn revision: \").append(REVISION_NUMBER);\n+        buf.append(_loc.get(\"openjpa-revision\")).append(\": \").append(REVISION_NUMBER);\n         buf.append(\"\\n\");\n     }\n "},{"sha":"aa2985adcbdb2b88a8125ed2cf4be5b7de0ee229","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":51,"deletions":2,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -19,10 +19,12 @@\n package org.apache.openjpa.datacache;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -37,6 +39,10 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n+import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.OpenJPAException;\n+\n+import serp.util.Strings;\n \n /**\n  * Abstract {@link DataCache} implementation that provides various\n@@ -70,6 +76,8 @@\n     private String _name = null;\n     private boolean _closed = false;\n     private String _schedule = null;\n+    protected Set<String> _includedTypes = new HashSet<String>();\n+    protected Set<String> _excludedTypes = new HashSet<String>();\n \n     public String getName() {\n         return _name;\n@@ -94,13 +102,29 @@ public String getEvictionSchedule() {\n     public void setEvictionSchedule(String s) {\n         _schedule = s;\n     }\n-\n+    \n     public void initialize(DataCacheManager manager) {\n         if (_schedule != null && !\"\".equals(_schedule)) {\n-            DataCacheScheduler scheduler = manager.getDataCacheScheduler();\n+            ClearableScheduler scheduler = manager.getClearableScheduler();\n             if (scheduler != null)\n                 scheduler.scheduleEviction(this, _schedule);\n         }\n+        // Cast here rather than add to the interface because this is a hack to support an older way of configuring\n+        if(manager instanceof DataCacheManagerImpl){\n+            List<String> invalidConfigured = new ArrayList<String>();\n+            // assert that things are configured properly\n+            if(_includedTypes!=null){\n+                for(String s : _includedTypes){\n+                    if(_excludedTypes.contains(s)){\n+                        invalidConfigured.add(s);\n+                    }\n+                }\n+                if (invalidConfigured.size() > 0) {\n+                    throw new GeneralException(s_loc.get(\"invalid-types-excluded-types\", invalidConfigured.toString()));\n+                }\n+            }\n+            ((DataCacheManagerImpl)manager).setTypes(_includedTypes, _excludedTypes);\n+        }\n     }\n \n     public void commit(Collection<DataCachePCData> additions, Collection<DataCachePCData> newUpdates,\n@@ -500,4 +524,29 @@ protected void fireEvent(Object event, Object listener) {\n \t\t}\n \t}\n     \n+    public Set<String> getTypes() {\n+        return _includedTypes;\n+    }\n+\n+    public Set<String> getExcludedTypes() {\n+        return _excludedTypes;\n+    }\n+\n+    public void setTypes(Set<String> types) {\n+        _includedTypes = types;\n+    }\n+\n+    public void setTypes(String types) {\n+        _includedTypes =\n+            StringUtils.isEmpty(types) ? null : new HashSet<String>(Arrays.asList(Strings.split(types, \";\", 0)));\n+    }\n+\n+    public void setExcludedTypes(Set<String> types) {\n+        _excludedTypes = types;\n+    }\n+\n+    public void setExcludedTypes(String types) {\n+        _excludedTypes =\n+            StringUtils.isEmpty(types) ? null : new HashSet<String>(Arrays.asList(Strings.split(types, \";\", 0)));\n+    }\n }"},{"sha":"82e343b6e26f6b5bd516a9cb780be9119e4847f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java","status":"renamed","additions":68,"deletions":45,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -21,56 +21,57 @@\n import java.security.AccessController;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n-import java.util.Iterator;\n import java.util.Map;\n import java.util.StringTokenizer;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Clearable;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n-import java.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.UserException;\n+\n import serp.util.Strings;\n \n /**\n- * Cron-style cache eviction. Understands schedules based on cron format:\n- * <code>minute hour mday month wday</code>\n+ * Cron-style clearable eviction. Understands schedules based on cron format:\n+ * <li><code>minute hour mday month wday</code></li>\n+ * <li><code>+minute</code></li>\n  * For example:\n  * <code>15,30 6,19 2,10 1 2 </code>\n  * Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n  * of January when its a Monday.\n  *\n- * @author Steve Kim\n  */\n-public class DataCacheScheduler\n-    implements Runnable {\n+public class ClearableScheduler implements Runnable {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (DataCacheScheduler.class);\n+    private static final Localizer _loc = Localizer.forPackage(ClearableScheduler.class);\n \n-    private Map _caches = new ConcurrentHashMap();\n+    private Map<Clearable,Schedule> _clearables = new ConcurrentHashMap<Clearable,Schedule>();\n     private boolean _stop = false;\n-    private int _interval = 2;\n+    private int _interval = 1;\n     private Log _log;\n     private Thread _thread;\n \n-    public DataCacheScheduler(OpenJPAConfiguration conf) {\n+    public ClearableScheduler(OpenJPAConfiguration conf) {\n         _log = conf.getLogFactory().getLog(OpenJPAConfiguration.LOG_DATACACHE);\n     }\n \n     /**\n-     * The interval time in minutes between cache checks. Defaults to 2.\n+     * The interval time in minutes between scheduler checks. Defaults to 1.\n      */\n     public int getInterval() {\n         return _interval;\n     }\n \n     /**\n-     * The interval time in minutes between cache checks. Defaults to 2.\n+     * The interval time in minutes between scheduler checks. Defaults to 1.\n      */\n     public void setInterval(int interval) {\n         _interval = interval;\n@@ -88,15 +89,15 @@ private boolean isStopped() {\n     }\n \n     /**\n-     * Schedule the given cache for eviction. Starts the scheduling thread\n+     * Schedule the given Clearable for clear to be called. Starts the scheduling thread\n      * if not started.\n      */\n-    public synchronized void scheduleEviction(DataCache cache, String times) {\n+    public synchronized void scheduleEviction(Clearable clearable, String times) {\n         if (times == null)\n             return;\n \n         Schedule schedule = new Schedule(times);\n-        _caches.put(cache, schedule);\n+        _clearables.put(clearable, schedule);\n         _stop = false;\n         if (_thread == null) {\n             _thread =\n@@ -110,11 +111,11 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n     }\n \n     /**\n-     * Remove the given cache from scheduling.\n+     * Remove the given Clearable from scheduling.\n      */\n-    public synchronized void removeFromSchedule(DataCache cache) {\n-        _caches.remove(cache);\n-        if (_caches.size() == 0)\n+    public synchronized void removeFromSchedule(Clearable clearable) {\n+        _clearables.remove(clearable);\n+        if (_clearables.size() == 0)\n             stop();\n     }\n \n@@ -129,18 +130,13 @@ public void run() {\n                 Thread.sleep(_interval * 60 * 1000);\n \n                 Date now = new Date();\n-                DataCache cache;\n-                Schedule schedule;\n-                Map.Entry entry;\n-                for (Iterator i = _caches.entrySet().iterator(); i.hasNext();) {\n-                    entry = (Map.Entry) i.next();\n-                    cache = (DataCache) entry.getKey();\n-                    schedule = (Schedule) entry.getValue();\n+                for(Entry<Clearable, Schedule> entry : _clearables.entrySet()){\n+                    Clearable clearable = entry.getKey();\n+                    Schedule schedule = entry.getValue();\n                     if (schedule.matches(lastRun, now)) {\n                         if (_log.isTraceEnabled())\n-                            _log.trace(_loc.get(\"scheduler-clear\",\n-                                cache.getName(), fom.format(now)));\n-                        evict(cache);\n+                            _log.trace(_loc.get(\"scheduler-clear\", clearable, fom.format(now)));\n+                        evict(clearable);\n                     }\n                 }\n                 lastRun = now;\n@@ -157,7 +153,7 @@ public void run() {\n         }\n     }\n \n-    protected void evict(DataCache cache) {\n+    protected void evict(Clearable cache) {\n         cache.clear();\n     }\n \n@@ -181,19 +177,46 @@ protected void evict(DataCache cache) {\n         final int[] min;\n \n         public Schedule(String date) {\n-            StringTokenizer token = new StringTokenizer(date, \" \\t\");\n-            if (token.countTokens() != 5)\n-                throw new UserException(_loc.get(\"bad-count\", date)).\n-                    setFatal(true);\n-            try {\n-                min = parse(token.nextToken(), 0, 60);\n-                hour = parse(token.nextToken(), 0, 24);\n-                dayOfMonth = parse(token.nextToken(), 1, 31);\n-                month = parse(token.nextToken(), 1, 13);\n-                dayOfWeek = parse(token.nextToken(), 1, 8);\n-            } catch (Throwable t) {\n-                throw new UserException(_loc.get(\"bad-schedule\", date), t).\n-                    setFatal(true);\n+            int[] tmin = null;\n+            if (date.startsWith(\"+\")) {\n+                Calendar cal = Calendar.getInstance();\n+                int interval = Integer.parseInt(date.substring(1));\n+                int currMin = cal.get(Calendar.MINUTE);\n+                \n+                tmin = new int[60/interval];\n+                for(int i = 0; i<tmin.length;i++){\n+                    int temp;\n+                    if(i==0){\n+                        temp=currMin+interval;\n+                    }else{\n+                        temp=tmin[i-1]+interval;\n+                    }\n+                    if(temp >= 60 ){\n+                        temp -= 60;\n+                    }\n+                    tmin[i]=temp;\n+                }\n+                Arrays.sort(tmin);\n+\n+                min = tmin;\n+                hour = WILDCARD;\n+                dayOfMonth = WILDCARD;\n+                month = WILDCARD;\n+                dayOfWeek = WILDCARD;\n+            }else{\n+            \n+                StringTokenizer token = new StringTokenizer(date, \" \\t\");\n+                if (token.countTokens() != 5)\n+                    throw new UserException(_loc.get(\"bad-count\", date)).setFatal(true);\n+                try {\n+                    min = parse(token.nextToken(), 0, 60);\n+                    hour = parse(token.nextToken(), 0, 24);\n+                    dayOfMonth = parse(token.nextToken(), 1, 31);\n+                    month = parse(token.nextToken(), 1, 13);\n+                    dayOfWeek = parse(token.nextToken(), 1, 8);\n+                } catch (Throwable t) {\n+                    throw new UserException(_loc.get(\"bad-schedule\", date), t).setFatal(true);\n+                }\n             }\n         }\n ","previous_filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java"},{"sha":"f9fc48db80b02295f330f0f83397be0000dc597d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.lib.util.Clearable;\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n@@ -40,7 +41,7 @@\n  * @author Pinaki Poddar\n  */\n public interface DataCache\n-    extends Closeable {\n+    extends Closeable, Clearable {\n \n     /**\n      * The name of the default data cache: <code>default</code>"},{"sha":"1eed5c181e783ff68818181be015c0770e980708","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -77,7 +77,7 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\n     /**\n      * Return the runnable which schedules evictions.\n      */\n-    public DataCacheScheduler getDataCacheScheduler();\n+    public ClearableScheduler getClearableScheduler();\n     \n     /**\n      * Select the cache where the given managed proxy instance should be cached."},{"sha":"99a2100d663fafed8f5f20ee1432f6f550420992","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":38,"deletions":14,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -18,25 +18,20 @@\n  */\n package org.apache.openjpa.datacache;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PCDataGenerator;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ObjectValue;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.ImplHelper;\n \n-import serp.util.Strings;\n-\n /**\n- * Default data cache manager provides handle to utilities {@linkplain PCDataGenerator}, {@linkplain DataCacheScheduler}\n+ * Default data cache manager provides handle to utilities {@linkplain PCDataGenerator}, {@linkplain ClearableScheduler}\n  * and {@linkplain CacheDistributionPolicy} for the cache operation. This implementation also determines whether a\n  * managed type is eligible to cache.\n  * \n@@ -51,9 +46,15 @@\n     private DataCache _cache = null;\n     private QueryCache _queryCache = null;\n     private DataCachePCDataGenerator _pcGenerator = null;\n-    private DataCacheScheduler _scheduler = null;\n+    private ClearableScheduler _scheduler = null;\n     private CacheDistributionPolicy _policy = new DefaultCacheDistributionPolicy();\n-\n+    private Map<ClassMetaData,Boolean> _cacheable = new HashMap<ClassMetaData, Boolean>();\n+    \n+    // Properties that are configured via openjpa.DataCache but need to be used here. This is here to support the 1.2\n+    // way of doing things with openjpa.DataCache(Types=x;y;z,ExcludedTypes=a)\n+    private Set<String> _includedTypes;\n+    private Set<String> _excludedTypes;\n+    \n     public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectValue queryCache) {\n         _conf = conf;\n         _cache = (DataCache) dataCache.instantiate(DataCache.class, conf);\n@@ -63,7 +64,7 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectV\n         // create helpers before initializing caches\n         if (conf.getDynamicDataStructs())\n             _pcGenerator = new DataCachePCDataGenerator(conf);\n-        _scheduler = new DataCacheScheduler(conf);\n+        _scheduler = new ClearableScheduler(conf);\n         \n         _policy = conf.getCacheDistributionPolicyInstance();\n \n@@ -103,7 +104,7 @@ public DataCachePCDataGenerator getPCDataGenerator() {\n         return _pcGenerator;\n     }\n \n-    public DataCacheScheduler getDataCacheScheduler() {\n+    public ClearableScheduler getClearableScheduler() {\n         return _scheduler;\n     }\n \n@@ -137,13 +138,23 @@ public CacheDistributionPolicy getDistributionPolicy() {\n      * Affirms if the given type is eligible for cache.\n      */\n     public boolean isCachable(ClassMetaData meta) {\n+        Boolean res = _cacheable.get(meta);\n+        if(res != null){\n+            return res;\n+        }\n+\n         Boolean isCachable = isCacheableByMode(meta);\n         if (isCachable == null) {\n            isCachable = isCacheableByType(meta);\n         }\n+        _cacheable.put(meta, isCachable);\n         return isCachable;\n     }\n     \n+    public void setTypes(Set<String> includedTypes, Set<String> excludedTypes){\n+        _includedTypes = includedTypes;\n+        _excludedTypes = excludedTypes;\n+    }\n     /**\n      * Affirms the given class is eligible to be cached according to the cache mode\n      * and the cache enable flag on the given metadata.\n@@ -164,11 +175,24 @@ private Boolean isCacheableByMode(ClassMetaData meta) {\n     }\n     \n     /**\n-     * Is the given type cacheable by @DataCache annotation.\n+     * Is the given type cacheable by @DataCache annotation or openjpa.DataCache(Types/ExcludedTypes)\n      *  \n      * @see ClassMetaData#getDataCacheName()\n      */\n-    private Boolean isCacheableByType(ClassMetaData meta) {\n+    private Boolean isCacheableByType(ClassMetaData meta) { \n+        if (_includedTypes != null && _includedTypes.size() > 0) {\n+            return _includedTypes.contains(meta.getDescribedType().getName());\n+        }\n+        if (_excludedTypes != null && _excludedTypes.size() > 0) {\n+            if (_excludedTypes.contains(meta.getDescribedType().getName())) {\n+                return false;\n+            } else {\n+                // Case where Types is not set, and ExcludedTypes only has a sub set of all\n+                // Entities.\n+                return true;\n+            }\n+        }\n+        // Check for @DataCache annotations\n         return meta.getDataCacheName() != null;\n     }\n }"},{"sha":"039b965df88d7eba5e83b7b3f8d59426a41f08cf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -326,7 +326,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n         boolean fromDatabase; \n         DataCache cache = _mgr.selectCache(sm);\n         DataCachePCData data = null;\n-        boolean updateCache = _ctx.getFetchConfiguration().getCacheStoreMode() != DataCacheStoreMode.BYPASS \n+        boolean updateCache = _ctx.getFetchConfiguration().getCacheRetrieveMode() != DataCacheRetrieveMode.BYPASS\n                             && _ctx.getPopulateDataCache();\n         if (cache == null || sm.isEmbedded() \n             || _ctx.getFetchConfiguration().getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS"},{"sha":"c013c0d7680aa224223d82ce144c11101df45bbe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -51,7 +51,6 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.ObjectNotFoundException;\n \n-import serp.util.Numbers;\n \n /**\n  * A {@link StoreQuery} implementation that caches the OIDs involved in\n@@ -593,7 +592,7 @@ private void checkFinished(Object obj, boolean result) {\n             synchronized (this) {\n                 if (_maintainCache) {\n                     if (result) {\n-                        Integer index = Numbers.valueOf(_pos);\n+                        Integer index = _pos;\n                         if (!_data.containsKey(index)) {\n                             Object cached;\n                             if (obj == null)"},{"sha":"4e10490553b5218fb4aea1b80849cdcd94926f5d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -57,12 +57,13 @@\n \n     private static final String [] JNDI_LOCS = new String []{\n         \"javax.transaction.TransactionManager\", // weblogic\n-        \"java:/TransactionManager\", // jboss & jrun\n+        \"java:/TransactionManager\", // jboss, jrun, Geronimo\n         \"java:/DefaultDomain/TransactionManager\", // jrun too\n         \"java:comp/pm/TransactionManager\", // orion & oracle\n         \"java:comp/TransactionManager\", // generic\n         \"java:appserver/TransactionManager\", // GlassFish\n         \"java:pm/TransactionManager\", // borland\n+        \"aries:services/javax.transaction.TransactionManager\", // Apache Aries\n     };\n     private static final String [] METHODS = new String[]{\n         \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp"},{"sha":"2a0d0cce627980ef19434af2f8cfc827e43a85bc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -79,8 +79,7 @@ public static synchronized void setDynamicallyInstallAgent(boolean val) {\n      * @return null if Instrumentation can not be obtained, or if any \n      * Exceptions are encountered.\n      */\n-    public static synchronized Instrumentation \n-        getInstrumentation(final Log log) {\n+    public static synchronized Instrumentation getInstrumentation(final Log log) {\n         if (_inst != null || !_dynamicallyInstall)\n             return _inst;\n \n@@ -90,6 +89,18 @@ public static synchronized void setDynamicallyInstallAgent(boolean val) {\n \n         AccessController.doPrivileged(new PrivilegedAction<Object>() {\n             public Object run() {\n+                // Dynamic agent enhancement should only occur when the OpenJPA library is \n+                // loaded using the system class loader.  Otherwise, the OpenJPA\n+                // library may get loaded by separate, disjunct loaders, leading to linkage issues.\n+                try {\n+                    if (!InstrumentationFactory.class.getClassLoader().equals(\n+                        ClassLoader.getSystemClassLoader())) {\n+                        return null;\n+                    }\n+                } catch (Throwable t) {\n+                    return null;\n+                }\n+                \n                 // If we can't find the tools.jar, we can't load the agent.\n                 File toolsJar = findToolsJar(log);\n                 if (toolsJar == null) {"},{"sha":"89630dcc2ed96880caf74f22f1c436a3015727ab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.GeneratedClasses;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n@@ -108,23 +109,22 @@\n                             + unenhanced.toString());\n                     }\n                 }\n-                Message msg = _loc.get(\"runtime-optimization-disabled\",\n-                    unenhanced);\n-                if (conf.getRuntimeUnenhancedClassesConstant()\n-                    == RuntimeUnenhancedClassesModes.WARN)\n+                Message msg = _loc.get(\"runtime-optimization-disabled\", Exceptions.toClassNames(unenhanced));\n+                if (conf.getRuntimeUnenhancedClassesConstant() == RuntimeUnenhancedClassesModes.WARN) {\n                     log.warn(msg);\n-                else\n+                } else {\n                     throw new UserException(msg);\n+                }\n             }\n             return null;\n         }\n \n         boolean redefine = ClassRedefiner.canRedefineClasses(log);\n-        if (redefine)\n+        if (redefine) {\n             log.info(_loc.get(\"enhance-and-subclass-and-redef-start\", classes));\n-        else\n+        } else {\n             log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",  classes));\n-\n+        }\n         final Map<Class<?>, byte[]> map = new HashMap<Class<?>, byte[]>();\n         final List<Class<?>> subs = new ArrayList<Class<?>>(classes.size());\n         final List<Class<?>> ints = new ArrayList<Class<?>>(classes.size());\n@@ -171,7 +171,8 @@ public void write(BCClass bc) throws IOException {\n         }\n \n         if (unspecified != null && !unspecified.isEmpty())\n-            throw new UserException(_loc.get(\"unspecified-unenhanced-types\", classes, unspecified));\n+            throw new UserException(_loc.get(\"unspecified-unenhanced-types\", Exceptions.toClassNames(classes), \n+                    unspecified));\n \n         ClassRedefiner.redefineClasses(conf, map);\n         for (Class<?> cls : map.keySet()) {\n@@ -289,7 +290,7 @@ else if (JavaVersions.VERSION >= 5) {\n         }\n     }\n \n-    private static void debugBytecodes(BCClass bc) throws IOException {\n+    public static void debugBytecodes(BCClass bc) throws IOException {\n         // Write the bytecodes to disk for debugging purposes.\n         if (\"true\".equals(System.getProperty(\n             ManagedClassSubclasser.class.getName() + \".dumpBytecodes\")))"},{"sha":"62b317fe33a4376ecb292031884c1578719c47ce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -101,7 +101,6 @@\n import serp.bytecode.Project;\n import serp.bytecode.TableSwitchInstruction;\n import serp.bytecode.ClassInstruction;\n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -2930,8 +2929,8 @@ private void addSerializationCode() {\n         if (field == null) {\n             Long uid = null;\n             try {\n-                uid = Numbers.valueOf(ObjectStreamClass.lookup\n-                    (_meta.getDescribedType()).getSerialVersionUID());\n+                uid = ObjectStreamClass.lookup\n+                    (_meta.getDescribedType()).getSerialVersionUID();\n             } catch (Throwable t) {\n                 // last-chance catch for bug #283 (which can happen\n                 // in a variety of ClassLoading environments)"},{"sha":"9622ce67321aaa32e762c0e3ee18c690e0d8e6c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -183,6 +183,11 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n     }\n     \n     public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting) {\n+        return newBroker(user, pass, managed, connRetainMode, findExisting, \"\", \"\");\n+    }\n+\n+    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting,\n+        String cf1Name, String cf2Name) {\n         try {\n             assertOpen();\n             makeReadOnly();\n@@ -192,6 +197,8 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n                 broker = findBroker(user, pass, managed);\n             if (broker == null) {\n                 broker = newBrokerImpl(user, pass);\n+                broker.setConnectionFactoryName(cf1Name);\n+                broker.setConnectionFactory2Name(cf2Name);\n                 initializeBroker(managed, connRetainMode, broker, false);\n             }\n             return broker;\n@@ -649,7 +656,7 @@ protected Object getFactoryInitializationBanner() {\n      * Throw an exception if the factory is closed.  The exact message and\n      * content of the exception varies whether TRACE is enabled or not.\n      */\n-    private void assertOpen() {\n+    public void assertOpen() {\n         if (_closed) {\n             if (_closedException == null)  // TRACE not enabled\n                 throw new InvalidStateException(_loc"},{"sha":"3d1d73986f9f80c932f9a6564137696878059e68","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -48,7 +48,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class AttachManager {\n+public class AttachManager {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (AttachManager.class);"},{"sha":"ceb44a1bccc3018bc09a310a2682195a0d35af67","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -74,6 +74,29 @@\n      */\n     public Broker newBroker(String user, String pass, boolean managed,\n         int connRetainMode, boolean findExisting);\n+    \n+    /**\n+     * Return a new broker using the supplied\n+     * <ul>\n+     * <li>credentials</li>\n+     * <li>transaction management mode</li>\n+     * <li>connectionRetainMode</li>\n+     * <li>connectionFactories</li>\n+     * </ul>\n+     * \n+     * @param user  Username to use when obtaining a connection. Will be ignored if a connection factory is \n+     *     obtained from JNDI.\n+     * @param pass  Password to use when obtaining a connection. Will be ignored if a connection factory is \n+     *     obtained from JNDI.\n+     * @param managed Whether managed transactions will be used by this Broker\n+     * @param connRetainMode {@link ConnectionRetainMode}\n+     * @param findExisting Whether the internal pool of brokers should be used. \n+     * @param cfName  JTA ConnectionFactory to use\n+     * @param cf2Name  Non-JTA ConnectionFactory to use. \n+     * @return A Broker which matches the provided criteria.\n+     */\n+    public Broker newBroker(String user, String pass, boolean managed,\n+        int connRetainMode, boolean findExisting, String cfName, String cf2Name);\n \n     /**\n      * Register a listener for lifecycle-related events on the specified\n@@ -127,4 +150,10 @@ public Broker newBroker(String user, String pass, boolean managed,\n      * Release the internal lock.\n      */\n     public void unlock ();\n+    \n+    /**\n+     * assert that this broker is open. If the broker has been closed an IllegalStateException will be thrown\n+     * with information on when the broker was closed. \n+     */\n+    public void assertOpen(); \n }"},{"sha":"391051211e233d9e748e1ccefc8ec0d11b86da00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":88,"deletions":1,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -47,6 +47,7 @@\n import org.apache.commons.collections.map.IdentityMap;\n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.commons.collections.set.MapBackedSet;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCache;\n@@ -60,6 +61,7 @@\n import org.apache.openjpa.event.TransactionEvent;\n import org.apache.openjpa.event.TransactionEventManager;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n+import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -68,6 +70,7 @@\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -85,6 +88,7 @@\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -142,6 +146,9 @@\n     private static final int FLAG_TRANS_ENDING = 2 << 11;\n \n     private static final Object[] EMPTY_OBJECTS = new Object[0];\n+    \n+    private String _connectionFactoryName = \"\";\n+    private String _connectionFactory2Name = \"\";\n \n     private static final Localizer _loc =\n         Localizer.forPackage(BrokerImpl.class);\n@@ -245,6 +252,8 @@\n     private LifecycleEventManager _lifeEventManager = null;\n     private int _lifeCallbackMode = 0;\n \n+    private transient DetachManagerLite _dmLite = new DetachManagerLite();\n+    \n     private transient boolean _initializeWasInvoked = false;\n     private transient boolean _fromWriteBehindCallback = false;\n     private LinkedList<FetchConfiguration> _fcs;\n@@ -3305,14 +3314,18 @@ public void detachAll(OpCallbacks call, boolean flush) {\n     }\n \n     private void detachAllInternal(OpCallbacks call) {\n+        if(_conf.getDetachStateInstance().getLiteAutoDetach() == true){\n+            detachAllInternalLite();\n+            return;\n+        }\n         Collection<StateManagerImpl> states = getManagedStates();\n         StateManagerImpl sm;\n         for (Iterator<StateManagerImpl> itr = states.iterator(); itr.hasNext();) {\n             sm = itr.next();\n             if (!sm.isPersistent())\n                 itr.remove();\n             else if (!sm.getMetaData().isDetachable()) {\n-                sm.release(true);\n+                sm.release(true); \n                 itr.remove();\n             }\n         }\n@@ -3334,6 +3347,24 @@ else if (!sm.getMetaData().isDetachable()) {\n         }\n     }\n \n+    private void detachAllInternalLite() {\n+        ManagedCache old = _cache;\n+        _cache = new ManagedCache(this);\n+        // TODO : should I call clear on old cache first? perhaps a memory leak?\n+        Collection<StateManagerImpl> states = old.copy();\n+        \n+        // Clear out all persistence context caches.        \n+        if (_transCache != null) {\n+            _transCache.clear();\n+        }\n+        if (_transAdditions != null) {\n+            _transAdditions.clear();\n+        }\n+        if (_dmLite == null) {\n+            _dmLite = new DetachManagerLite();\n+        }\n+        _dmLite.detachAll(states);\n+    }\n     public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         if (obj == null)\n             return null;\n@@ -4946,4 +4977,60 @@ public void setCacheFinderQuery(boolean flag) {\n     public boolean isFromWriteBehindCallback() {\n         return _fromWriteBehindCallback;\n     }\n+\n+    /**\n+     * Return the 'JTA' connectionFactoryName\n+     */\n+    public String getConnectionFactoryName() {\n+        return _connectionFactoryName;\n+    }\n+\n+    /**\n+     * Set the 'JTA' ConnectionFactoryName. Input will be trimmed to null before being stored. \n+     */\n+    public void setConnectionFactoryName(String connectionFactoryName) {\n+        this._connectionFactoryName = StringUtils.trimToNull(connectionFactoryName);\n+    }\n+\n+    /**\n+     * Return the 'NonJTA' ConnectionFactoryName.\n+     */\n+    public String getConnectionFactory2Name() {\n+        return _connectionFactory2Name;\n+    }\n+\n+    /**\n+     * Set the 'NonJTA' ConnectionFactoryName. Input will be trimmed to null before being stored. \n+     */\n+    public void setConnectionFactory2Name(String connectionFactory2Name) {\n+        this._connectionFactory2Name = StringUtils.trimToNull(connectionFactory2Name);\n+    }\n+    \n+    /**\n+     * Return the 'JTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the JTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory() {\n+        if(StringUtils.isNotBlank(_connectionFactoryName)) { \n+            return Configurations.lookup(_connectionFactoryName, \"openjpa.ConnectionFactory\", _log );\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n+    \n+    /**\n+     * Return the 'NonJTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the NonJTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory2() { \n+        if(StringUtils.isNotBlank(_connectionFactory2Name)) { \n+            return  Configurations.lookup(_connectionFactory2Name, \"openjpa.ConnectionFactory2\", _log);\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n }"},{"sha":"82f0394562a083d997188d664ab6044e70457986","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":74,"deletions":29,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -30,6 +30,8 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n ///////////////////////////////////////////////////////////////\n@@ -103,6 +105,25 @@ public boolean equals(Object other) {\n     protected RuntimeException translate(RuntimeException re) {\n         return (_trans == null) ? re : _trans.translate(re);\n     }\n+    \n+    /**\n+     * Translate the exception with the failed object.\n+     * \n+     * @param re exception raised by the delegate.\n+     * @param failed the context that failed.\n+     * \n+     * @return the translated exception. If the given input exception had not set \n+     * the failed instance, then sets the given instance as the failed context.\n+     */\n+    protected RuntimeException translate(RuntimeException re, Object failed) {\n+        if (re instanceof OpenJPAException) {\n+            Object o = ((OpenJPAException) re).getFailedObject();\n+            if (o == null || \"null\".equals(o)) {\n+                ((OpenJPAException) re).setFailedObject(Exceptions.toString(failed));\n+            }\n+        }\n+        return (_trans == null) ? re : _trans.translate(re);\n+    }\n \n     public Broker getBroker() {\n         return this;\n@@ -200,7 +221,7 @@ public Object find(Object oid, boolean validate, FindCallbacks call) {\n         try {\n             return _broker.find(oid, validate, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oid);\n         }\n     }\n \n@@ -209,15 +230,15 @@ public Object find(Object oid, boolean validate, FindCallbacks call) {\n         try {\n             return _broker.findAll(oids, validate, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oids);\n         }\n     }\n \n     public Object findCached(Object oid, FindCallbacks call) {\n         try {\n             return _broker.findCached(oid, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oid);\n         }\n     }\n \n@@ -226,7 +247,7 @@ public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         try {\n             return _broker.find(oid, fetch, exclude, edata, flags);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oid);\n         }\n     }\n \n@@ -235,7 +256,7 @@ public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         try {\n             return _broker.findAll(oids, fetch, exclude, edata, flags);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oids);\n         }\n     }\n \n@@ -1071,63 +1092,63 @@ public void delete(Object obj, OpCallbacks call) {\n         try {\n             _broker.delete(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void deleteAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.deleteAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void release(Object obj, OpCallbacks call) {\n         try {\n             _broker.release(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void releaseAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.releaseAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void refresh(Object obj, OpCallbacks call) {\n         try {\n             _broker.refresh(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void refreshAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.refreshAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void evict(Object obj, OpCallbacks call) {\n         try {\n             _broker.evict(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void evictAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.evictAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1143,23 +1164,23 @@ public void evictAll(Extent extent, OpCallbacks call) {\n         try {\n             _broker.evictAll(extent, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, extent.getElementType());\n         }\n     }\n \n     public Object detach(Object obj, OpCallbacks call) {\n         try {\n             return _broker.detach(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public Object[] detachAll(Collection objs, OpCallbacks call) {\n         try {\n             return _broker.detachAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1183,7 +1204,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         try {\n             return _broker.attach(obj, copyNew, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n@@ -1192,7 +1213,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         try {\n             return _broker.attachAll(objs, copyNew, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1201,7 +1222,7 @@ public void transactional(Object pc, boolean updateVersion, OpCallbacks\n         try {\n             _broker.transactional(pc, updateVersion, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, pc);\n         }\n     }\n \n@@ -1210,47 +1231,47 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n         try {\n             _broker.transactionalAll(objs, updateVersion, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void nontransactional(Object pc, OpCallbacks call) {\n         try {\n             _broker.nontransactional(pc, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, pc);\n         }\n     }\n \n     public void nontransactionalAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.nontransactionalAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public Extent newExtent(Class cls, boolean subs) {\n         try {\n             return _broker.newExtent(cls, subs);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, cls);\n         }\n     }\n \n     public Query newQuery(String language, Class cls, Object query) {\n         try {\n             return _broker.newQuery(language, cls, query);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, query);\n         }\n     }\n \n     public Query newQuery(String language, Object query) {\n         try {\n             return _broker.newQuery(language, query);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, query);\n         }\n     }\n \n@@ -1274,15 +1295,15 @@ public void lock(Object obj, int level, int timeout, OpCallbacks call) {\n         try {\n             _broker.lock(obj, level, timeout, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void lock(Object obj, OpCallbacks call) {\n         try {\n             _broker.lock(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n@@ -1291,15 +1312,15 @@ public void lockAll(Collection objs, int level, int timeout,\n         try {\n             _broker.lockAll(objs, level, timeout, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void lockAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.lockAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1418,4 +1439,28 @@ public boolean getCachePreparedQuery() {\n     public void setCachePreparedQuery(boolean flag) {\n         _broker.setCachePreparedQuery(flag);\n     }\n+    \n+    public String getConnectionFactoryName() {\n+        return _broker.getConnectionFactoryName();\n+    }\n+\n+    public void setConnectionFactoryName(String connectionFactoryName) {\n+        _broker.setConnectionFactoryName(connectionFactoryName);\n+    }\n+\n+    public String getConnectionFactory2Name() {\n+        return _broker.getConnectionFactory2Name();\n+    }\n+\n+    public void setConnectionFactory2Name(String connectionFactory2Name) {\n+        _broker.setConnectionFactory2Name(connectionFactory2Name);\n+    }\n+    \n+    public Object getConnectionFactory() {\n+        return _broker.getConnectionFactory();\n+    }\n+\n+    public Object getConnectionFactory2() {\n+        return _broker.getConnectionFactory2();\n+    }\n }"},{"sha":"a0f18466797989b15a3191134c540603024c7b73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -148,9 +148,13 @@ public Broker newBroker() {\n \n     public Broker newBroker(String user, String pass, boolean managed,\n         int connRetainMode, boolean findExisting) {\n+        return newBroker(user, pass, managed, connRetainMode, findExisting, \"\", \"\");\n+    }\n+    public Broker newBroker(String user, String pass, boolean managed,\n+        int connRetainMode, boolean findExisting, String cfName, String cf2Name) {\n         try {\n             return _factory.newBroker(user, pass, managed, connRetainMode,\n-                findExisting);\n+                findExisting, cfName, cf2Name);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n@@ -219,4 +223,12 @@ public void unlock() {\n             throw translate(re);\n \t\t}\n \t}\n+    \n+    public void assertOpen() {\n+        try {\n+            _factory.assertOpen();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"b309ab908cc34c604c31f8ac5a609ee7d563d3c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -476,8 +476,7 @@ private Object detachInternal(Object toDetach) {\n             _fullFM.reproxy(detSM);\n             _fullFM.setStateManager(null);\n         } else {\n-            InstanceDetachFieldManager fm = new InstanceDetachFieldManager\n-                (detachedPC, detSM);\n+            InstanceDetachFieldManager fm = new InstanceDetachFieldManager(detachedPC, detSM);\n             fm.setStateManager(sm);\n             fm.detachFields(fields);\n         }\n@@ -548,28 +547,26 @@ public void detachVersion() {\n          * Unproxies second class object fields.\n          */\n         public void reproxy(DetachedStateManager dsm) {\n-            FieldMetaData[] fmds = sm.getMetaData().getFields();\n-            for (int i = 0; i < fmds.length; i++) {\n-                switch (fmds[i].getDeclaredTypeCode()) {\n+            for (FieldMetaData fmd : sm.getMetaData().getProxyFields()) {\n+                switch (fmd.getDeclaredTypeCode()) {\n                 case JavaTypes.COLLECTION:\n                 case JavaTypes.MAP:\n                     // lrs proxies not detached\n-                    if (fmds[i].isLRS()) {\n+                    if (fmd.isLRS()) {\n                         objval = null;\n-                        sm.replaceField(getDetachedPersistenceCapable(), \n-                            this, i);\n+                        sm.replaceField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                         break;\n                     }\n                     // no break\n                 case JavaTypes.CALENDAR:\n                 case JavaTypes.DATE:\n                 case JavaTypes.OBJECT:\n-                    sm.provideField(getDetachedPersistenceCapable(), this, i);\n+                    sm.provideField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                     if (objval instanceof Proxy) {\n                         Proxy proxy = (Proxy) objval;\n                         if (proxy.getChangeTracker() != null)\n                             proxy.getChangeTracker().stopTracking();\n-                        proxy.setOwner(dsm, (dsm == null) ? -1 : i);\n+                        proxy.setOwner(dsm, (dsm == null) ? -1 : fmd.getIndex());\n                     }\n                 }\n             }\n@@ -711,8 +708,10 @@ public void storeObjectField(int field, Object curVal) {\n          * Set the owner of the field's proxy to the detached state manager.\n          */\n         private Object reproxy(Object obj, int field) {\n-            if (obj != null && _detSM != null && obj instanceof Proxy)\n+            if (obj != null && _detSM != null && obj instanceof Proxy) {\n                 ((Proxy) obj).setOwner(_detSM, field);\n+                return ((Proxy) obj).copy(obj); \n+            }\n             return obj;\n         }\n "},{"sha":"839952c5162f6e8bee1a9e8a30ca27cc3b166d2c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import java.util.BitSet;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.util.Proxy;\n+\n+/**\n+ * \n+ *\n+ */\n+public class DetachManagerLite {\n+    public DetachManagerLite() {\n+    }\n+\n+    /**\n+     * This method will detach all provided StateManagers in place.\n+     * \n+     * @param states\n+     *            The StateManagers to be detached.\n+     */\n+    public void detachAll(Collection<StateManagerImpl> states) {\n+        TransferFieldManager fm = new TransferFieldManager();\n+        for (StateManagerImpl sm : states) {\n+            ClassMetaData cmd = sm.getMetaData();\n+            if (sm.isPersistent() && cmd.isDetachable()) {\n+                PersistenceCapable pc = sm.getPersistenceCapable();\n+                if(pc.pcIsDetached() == false){\n+                    // Detach proxy fields.\n+                    BitSet loaded = sm.getLoaded();\n+                    for (FieldMetaData fmd : cmd.getProxyFields()) {\n+                        if (loaded.get(fmd.getIndex())) {\n+                            detachProxyField(fmd, pc, sm, fm);\n+                        }\n+                    }\n+                    pc.pcReplaceStateManager(null);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Detach the provided proxy field.\n+     * \n+     * @param fmd\n+     *            The field to be detached.\n+     * @param pc\n+     *            The PersistenceCapable that the field belongs to.\n+     * @param sm\n+     *            The StateManagerImpl that the PersistenceCapable belongs to.\n+     */\n+    private void detachProxyField(FieldMetaData fmd, PersistenceCapable pc,\n+            StateManagerImpl sm, TransferFieldManager fm) {\n+        int fieldIndex = fmd.getIndex();\n+        if (fmd.isLRS() == true) {\n+            // need to null out LRS fields.\n+            nullField(fieldIndex, pc, sm, fm);\n+        } else {\n+            Object o = sm.fetchObject(fieldIndex);\n+            if (o instanceof Proxy) {\n+                // Get unproxied object and replace\n+                Proxy proxy = (Proxy) o;\n+                Object unproxied = proxy.copy(proxy);\n+                fm.storeObjectField(fieldIndex, unproxied);\n+                sm.replaceField(pc, fm, fieldIndex);\n+                fm.clear();\n+                // clean up old proxy\n+                proxy.setOwner(null, -1);\n+                if (proxy.getChangeTracker() != null) {\n+                    proxy.getChangeTracker().stopTracking();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Private worker method that replaces the value at fieldIndex in sm with null.\n+     * \n+     * @param fieldIndex\n+     *            The index of the field to be nulled out.\n+     * @param pc\n+     *            The PersistenceCapable that the field belongs to.\n+     * @param sm\n+     *            The StateManagerImpl that the PersistenceCapable belongs to.\n+     */\n+    private void nullField(int fieldIndex, PersistenceCapable pc, StateManagerImpl sm, TransferFieldManager fm) {\n+        fm.storeObjectField(fieldIndex, null);\n+        sm.replaceField(pc, fm, fieldIndex);\n+        fm.clear();\n+    }\n+}"},{"sha":"58178371cec8111c59918c6c7b14153cefcf61c1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -32,7 +32,6 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.ImplHelper;\n-import serp.util.Numbers;\n \n /**\n  * Implementation of {@link OpenJPAStateManager} designed to retrieve\n@@ -318,9 +317,9 @@ private Object fetchField(FieldManager fm, int field) {\n             case JavaTypes.FLOAT:\n                 return new Float(fm.fetchFloatField(field));\n             case JavaTypes.INT:\n-                return Numbers.valueOf(fm.fetchIntField(field));\n+                return fm.fetchIntField(field);\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(fm.fetchLongField(field));\n+                return fm.fetchLongField(field);\n             case JavaTypes.SHORT:\n                 return new Short(fm.fetchShortField(field));\n             default:"},{"sha":"8bea486fdd0efcb88e61444c681e47aa3b269a9d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -228,6 +228,8 @@ public void copy(FetchConfiguration fetch) {\n         addFetchGroups(fetch.getFetchGroups());\n         clearFields();\n         copyHints(fetch);\n+        setCacheRetrieveMode(fetch.getCacheRetrieveMode());\n+        setCacheStoreMode(fetch.getCacheStoreMode());\n         addFields(fetch.getFields());\n \n         // don't use setters because require active transaction\n@@ -719,13 +721,14 @@ public void setHint(String key, Object value, Object original) {\n                 } else if (\"setWriteLockLevel\".equals(methodName) && !isActiveTransaction()) {\n                     _state.writeLockLevel = (Integer)value;\n                 } else {\n-                    setter.invoke(this, value);\n+                    setter.invoke(this, Filters.convertToMatchMethodArgument(value, setter));\n                 }\n             } catch (Exception e) {\n-                if (e instanceof IllegalArgumentException)\n-                    throw (IllegalArgumentException)e;\n-                throw new IllegalArgumentException(_loc.get(\"bad-hint-value\", key, toString(value), \n-                        toString(original)).getMessage(), e);\n+                String message = _loc.get(\"bad-hint-value\", key, toString(value), toString(original)).getMessage();\n+                if (e instanceof IllegalArgumentException) {\n+                    throw new IllegalArgumentException(message);\n+                }\n+                throw new IllegalArgumentException(message, e);\n             }\n         }\n         addHint(key, original);"},{"sha":"e00aa4b2de9515081cf3d7aac7d7975906ea61cb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":48,"deletions":15,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -41,7 +41,6 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -246,11 +245,30 @@ public static boolean canConvert(Class<?> c1, Class<?> c2, boolean strict) {\n             return true;\n         return false;\n     }\n+    \n+    /**\n+     * Convert the given value to match the given (presumably a setter) method argument type.\n+     *  \n+     * @param o given value\n+     * @param method a presumably setter method \n+     * \n+     * @return the same value if the method does not have one and only one input argument.\n+     */\n+    public static Object convertToMatchMethodArgument(Object o, Method method) {\n+        if (method == null || method.getParameterTypes().length != 1) {\n+            return o;\n+        }\n+        return convert(o, method.getParameterTypes()[0], true);\n+    }\n \n+    public static Object convert(Object o, Class<?> type) {\n+        return convert(o, type, false);\n+    }\n+    \n     /**\n      * Convert the given value to the given type.\n      */\n-    public static Object convert(Object o, Class<?> type) {\n+    public static Object convert(Object o, Class<?> type, boolean strictNumericConversion) {\n         if (o == null)\n             return null;\n         if (o.getClass() == type)\n@@ -291,10 +309,11 @@ else if (type == Character.class) {\n                 return ((Calendar) o).getTime();\n             } else if (Number.class.isAssignableFrom(type)) {\n                 Integer i = null;\n-                if (o instanceof Character)\n-                    i = Numbers.valueOf(((Character) o).charValue());\n+                if (o instanceof Character) {\n+                    i = Integer.valueOf((Character)o);\n+                }\n                 else if (o instanceof String && ((String) o).length() == 1)\n-                    i = Numbers.valueOf(((String) o).charAt(0));\n+                    i = Integer.valueOf(((String)o));\n \n                 if (i != null) {\n                     if (type == Integer.class)\n@@ -315,14 +334,14 @@ else if (o instanceof String && ((String) o).length() == 1)\n             throw new ClassCastException(_loc.get(\"cant-convert\", o,\n                 o.getClass(), type).getMessage());\n \n-        if (type == Integer.class) {\n-            return Numbers.valueOf(((Number) o).intValue());\n-        } else if (type == Float.class) {\n+        if (type == Integer.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n+            return ((Number) o).intValue();\n+        } else if (type == Float.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return new Float(((Number) o).floatValue());\n         } else if (type == Double.class) {\n             return new Double(((Number) o).doubleValue());\n-        } else if (type == Long.class) {\n-            return Numbers.valueOf(((Number) o).longValue());\n+        } else if (type == Long.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n+            return ((Number) o).longValue();\n         } else if (type == BigDecimal.class) {\n             // the BigDecimal constructor doesn't handle the\n             // \"NaN\" string version of Double.NaN and Float.NaN, nor\n@@ -339,14 +358,28 @@ else if (o instanceof String && ((String) o).length() == 1)\n             return new BigDecimal(o.toString());\n         } else if (type == BigInteger.class) {\n             return new BigInteger(o.toString());\n-        } else if (type == Short.class) {\n+        } else if (type == Short.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return new Short(((Number) o).shortValue());\n-        } else if (type == Byte.class) {\n+        } else if (type == Byte.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return new Byte(((Number) o).byteValue());\n+        } else if (!strictNumericConversion) {\n+            return ((Number) o).intValue();\n         } else {\n-            return Numbers.valueOf(((Number) o).intValue());\n+            throw new ClassCastException(_loc.get(\"cant-convert\", o, o.getClass(), type).getMessage());\n         }\n     }\n+    \n+    private static boolean allowNumericConversion(Class<?> actual, Class<?> target, boolean strict) {\n+        if (!strict || actual == target)\n+            return true;\n+        if (actual == Byte.class)    return false;\n+        if (actual == Double.class)  return target == Float.class;\n+        if (actual == Float.class)   return target == Double.class;\n+        if (actual == Integer.class) return target == Long.class || target == Short.class;\n+        if (actual == Long.class)    return target == Integer.class || target == Short.class;\n+        if (actual == Short.class)   return target == Long.class || target == Integer.class;\n+        return false;\n+    }\n \n     /**\n      * Add the given values.\n@@ -452,7 +485,7 @@ private static Object op(int n1, int n2, int op) {\n             default:\n                 throw new InternalException();\n         }\n-        return Numbers.valueOf(tot);\n+        return tot;\n     }\n \n     /**\n@@ -533,7 +566,7 @@ private static Object op(long n1, long n2, int op) {\n             default:\n                 throw new InternalException();\n         }\n-        return Numbers.valueOf(tot);\n+        return tot;\n     }\n \n     /**"},{"sha":"d136089dd8199130263bb48b023c35898561ded5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -37,7 +37,6 @@\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.ImplHelper;\n-import serp.util.Numbers;\n \n /**\n  * State manager used to access state of embedded object id primary key fields.\n@@ -472,15 +471,15 @@ public void storeChar(int field, char extVal) {\n     }\n \n     public void storeInt(int field, int extVal) {\n-        setValue(field, Numbers.valueOf(extVal), true);\n+        setValue(field, extVal, true);\n     }\n \n     public void storeShort(int field, short extVal) {\n         setValue(field, new Short(extVal), true);\n     }\n \n     public void storeLong(int field, long extVal) {\n-        setValue(field, Numbers.valueOf(extVal), true);\n+        setValue(field, extVal, true);\n     }\n \n     public void storeFloat(int field, float extVal) {\n@@ -674,9 +673,9 @@ private Object getDefaultValue(int field) {\n             case JavaTypes.FLOAT:\n                 return ZERO_FLOAT;\n             case JavaTypes.INT:\n-                return Numbers.valueOf(0);\n+                return 0;\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(0L);\n+                return 0L;\n             case JavaTypes.SHORT:\n                 return ZERO_SHORT;\n             default:"},{"sha":"811cb9019011c28cd2f376abd91cd99e2fcc996b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.kernel.exps.Val;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.EagerResultList;\n+import org.apache.openjpa.lib.rop.ListResultList;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n@@ -66,7 +67,6 @@\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -1033,7 +1033,7 @@ public Number deleteInMemory(StoreQuery q, StoreQuery.Executor executor,\n             int size = 0;\n             for (Iterator i = ((Collection) o).iterator(); i.hasNext(); size++)\n                 _broker.delete(i.next(), null);\n-            return Numbers.valueOf(size);\n+            return size;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n@@ -1064,7 +1064,7 @@ public Number updateInMemory(StoreQuery q, StoreQuery.Executor executor,\n             int size = 0;\n             for (Iterator i = ((Collection) o).iterator(); i.hasNext(); size++)\n                 updateInMemory(i.next(), params, q);\n-            return Numbers.valueOf(size);\n+            return size;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n@@ -1241,10 +1241,17 @@ protected Object toResult(StoreQuery q, StoreQuery.Executor ex,\n         boolean detach = (_broker.getAutoDetach() &\n             AutoDetach.DETACH_NONTXREAD) > 0 && !_broker.isActive();\n         boolean lrs = range.lrs && !ex.isAggregate(q) && !ex.hasGrouping(q);\n-        ResultList<?> res = (!detach && lrs) ? _fc.newResultList(rop)\n-            : new EagerResultList(rop);\n-        res.setUserObject(new Object[]{rop,ex});\n-        _resultLists.add(decorateResultList(res));\n+        ResultList<?> res = new ListResultList(Collections.emptyList());\n+        try {\n+            res = (!detach && lrs) ? _fc.newResultList(rop) : new EagerResultList(rop);\n+            res.setUserObject(new Object[]{rop,ex});\n+            _resultLists.add(decorateResultList(res));\n+        } catch (OpenJPAException e) {\n+            if (e.getFailedObject() == null) {\n+                e.setFailedObject(getQueryString());\n+            }\n+            throw e;\n+        }\n         return res;\n     }\n \n@@ -1759,7 +1766,7 @@ protected void assertParameters(StoreQuery q, StoreQuery.Executor ex, Map params\n         for (Object expected : paramTypes.keySet()) {\n             if (!params.containsKey(expected))\n             throw new UserException(_loc.get(\"unbound-params\",\n-                expected, params.keySet()));\n+                expected, paramTypes.keySet()));\n         }\n \n         Iterator<Map.Entry<Object, Class<?>>> itr = paramTypes.entrySet().iterator();\n@@ -1909,14 +1916,14 @@ public Number executeDelete(StoreQuery q, Object[] params) {\n             long num = 0;\n             for (int i = 0; i < _executors.length; i++)\n                 num += _executors[i].executeDelete(q, params).longValue();\n-            return Numbers.valueOf(num);\n+            return num;\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n             long num = 0;\n             for (int i = 0; i < _executors.length; i++)\n                 num += _executors[i].executeUpdate(q, params).longValue();\n-            return Numbers.valueOf(num);\n+            return num;\n         }\n \n         public String[] getDataStoreActions(StoreQuery q, Object[] params,"},{"sha":"be0306d6cc262c7eb9235bd0faa3a8809df3b2ac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,6 +23,7 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Records query execution statistics.\n@@ -38,6 +39,11 @@\n  * \n  */\n public interface QueryStatistics<T> extends Serializable {\n+    \n+    /**\n+     *  Gets all the identifier keys for the cached queries.\n+     */\n+    public Set<T> keys();\n \t\n \t/**\n \t * Record that the given query has been executed. \n@@ -126,6 +132,10 @@\n \t\tprivate Map<T, long[]> astats = new HashMap<T, long[]>();\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = start;\n+\t\t\n+\t\tpublic Set<T> keys() {\n+\t\t    return stats.keySet();\n+\t\t}\n \n \t\tpublic long getExecutionCount() {\n \t\t\treturn stat[READ];\n@@ -205,6 +215,8 @@ private void addSample(Map<T, long[]> target, T query, int i) {\n \t\t}\n \t\t\n \t\tpublic void recordExecution(T query) {\n+\t\t    if (query == null)\n+\t\t        return;\n \t\t    boolean cached = (astats.containsKey(query));\n \t\t\taddSample(query, READ);\n \t\t\tif (cached)"},{"sha":"bb2869075f5d9255558cf420dd86d1da4f8aee02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":18,"deletions":13,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -68,7 +68,6 @@\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n-import serp.util.Numbers;\n \n /**\n  * Implementation of the {@link OpenJPAStateManager} interface for use\n@@ -857,9 +856,9 @@ public Object fetchField(int field, boolean transitions) {\n             case JavaTypes.FLOAT:\n                 return new Float(fetchFloatField(field));\n             case JavaTypes.INT:\n-                return Numbers.valueOf(fetchIntField(field));\n+                return fetchIntField(field);\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(fetchLongField(field));\n+                return fetchLongField(field);\n             case JavaTypes.SHORT:\n                 return new Short(fetchShortField(field));\n             default:\n@@ -988,9 +987,9 @@ private static Object fetchField(FieldManager fm, FieldMetaData fmd) {\n             case JavaTypes.FLOAT:\n                 return new Float(fm.fetchFloatField(field));\n             case JavaTypes.INT:\n-                return Numbers.valueOf(fm.fetchIntField(field));\n+                return fm.fetchIntField(field);\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(fm.fetchLongField(field));\n+                return fm.fetchLongField(field);\n             case JavaTypes.SHORT:\n                 return new Short(fm.fetchShortField(field));\n             case JavaTypes.STRING:\n@@ -2529,7 +2528,7 @@ public void storeInt(int field, int externalVal) {\n         if (!fmd.isExternalized())\n             storeIntField(field, externalVal);\n         else\n-            storeField(field, fmd.getFieldValue(Numbers.valueOf(externalVal),\n+            storeField(field, fmd.getFieldValue(externalVal,\n                 _broker));\n     }\n \n@@ -2550,7 +2549,7 @@ public void storeLong(int field, long externalVal) {\n         if (!fmd.isExternalized())\n             storeLongField(field, externalVal);\n         else\n-            storeField(field, fmd.getFieldValue(Numbers.valueOf(externalVal),\n+            storeField(field, fmd.getFieldValue(externalVal,\n                 _broker));\n     }\n \n@@ -2890,13 +2889,15 @@ void proxyFields(boolean reset, boolean replaceNull) {\n \n         lock();\n         try {\n-            for (int i = 0, len = _loaded.length(); i < len; i++) {\n-                if (_loaded.get(i)) {\n-                    provideField(_pc, _single, i);\n-                    if (_single.proxy(reset, replaceNull))\n-                        replaceField(_pc, _single, i);\n-                    else\n+            for (FieldMetaData fmd : _meta.getProxyFields()) {\n+                int index = fmd.getIndex();\n+                if (_loaded.get(index)) {\n+                    provideField(_pc, _single, index);\n+                    if (_single.proxy(reset, replaceNull)) {\n+                        replaceField(_pc, _single, index);\n+                    } else {\n                         _single.clear();\n+                    }\n                 }\n             }\n         } finally {\n@@ -3380,4 +3381,8 @@ PersistenceCapable readPC(ObjectInputStream in)\n     public boolean requiresFetch(FieldMetaData fmd) {\n         return (_broker.getFetchConfiguration().requiresFetch(fmd) != FetchConfiguration.FETCH_NONE);\n     }\n+    \n+    public void setPc(PersistenceCapable pc) {\n+        _pc = pc;\n+    }\n }"},{"sha":"0fd5167102d88a9c44434197e39746dd1d23ab1b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -456,4 +456,38 @@ public OpenJPAStateManager embed(Object obj, Object id,\n \t * Releases the internal lock.\n \t */\n \tpublic void unlock ();\n+\n+    /**\n+     * Return the 'JTA' connectionFactoryName\n+     */\n+    public String getConnectionFactoryName();\n+\n+    /**\n+     * Set the 'JTA' ConnectionFactoryName.\n+     */\n+    public void setConnectionFactoryName(String connectionFactoryName);\n+\n+    /**\n+     * Return the 'NonJTA' ConnectionFactoryName.\n+     */\n+    public String getConnectionFactory2Name();\n+\n+    /**\n+     * Set the 'NonJTA' ConnectionFactoryName. \n+     */\n+    public void setConnectionFactory2Name(String connectionFactory2Name);\n+\n+    /**\n+     * Return the 'JTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the JTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory();\n+\n+    /**\n+     * Return the 'NonJTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the NonJTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory2();\n }"},{"sha":"67a7521f8375631ccb3cab60fae0feeb016efcda","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.kernel;\n \n import org.apache.openjpa.meta.ClassMetaData;\n-import serp.util.Numbers;\n \n ////////////////////////////////////////////////////////////\n // NOTE: Do not change property names; see SequenceMetaData \n@@ -52,11 +51,11 @@ public void setIncrement(int increment) {\n \n     public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n         _id += _increment;\n-        return Numbers.valueOf(_id);\n+        return _id;\n     }\n \n     public synchronized Object current(StoreContext ctx, ClassMetaData meta) {\n-        return Numbers.valueOf(_id);\n+        return _id;\n     }\n \n     public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {"},{"sha":"becb970a5a467b1cfedb7739ec9a38baef58c703","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.openjpa.kernel;\n \n-import serp.util.Numbers;\n \n /**\n  * {@link LockManager} implementation that provides support\n@@ -50,7 +49,7 @@ public int getLockLevel(OpenJPAStateManager sm) {\n      * to store something else as the lock.\n      */\n     protected void setLockLevel(OpenJPAStateManager sm, int level) {\n-        sm.setLock(Numbers.valueOf(level));\n+        sm.setLock(level);\n     }\n \n     /**"},{"sha":"98455751d09b47c7dcac5a1bda8cb784580bcb7a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,7 +22,6 @@\n import java.math.BigInteger;\n \n import org.apache.openjpa.kernel.Filters;\n-import serp.util.Numbers;\n \n /**\n  * Take the absolute value of a number.\n@@ -52,19 +51,19 @@ protected Class getType(Class c) {\n     protected Object operate(Object o, Class c) {\n         c = Filters.wrap(c);\n         if (c == Integer.class)\n-            return Numbers.valueOf(Math.abs(((Number) o).intValue()));\n+            return Math.abs(((Number) o).intValue());\n         if (c == Float.class)\n             return new Float(Math.abs(((Number) o).floatValue()));\n         if (c == Double.class)\n             return new Double(Math.abs(((Number) o).doubleValue()));\n         if (c == Long.class)\n-            return Numbers.valueOf(Math.abs(((Number) o).longValue()));\n+            return Math.abs(((Number) o).longValue());\n         if (c == BigDecimal.class)\n             return ((BigDecimal) o).abs();\n         if (c == BigInteger.class)\n             return ((BigInteger) o).abs();\n \n         // default to int\n-        return Numbers.valueOf(Math.abs(((Number) o).intValue()));\n+        return Math.abs(((Number) o).intValue());\n     }\n }"},{"sha":"470e7745a267fb4c5e7a35dfb18facbad4320ab3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -288,6 +288,9 @@ protected Value traversePath(Path path, String field, boolean pcOnly,\n         if (fmd == null) {\n             Object val = traverseStaticField(meta.getDescribedType(), field);\n             if (val == null) {\n+                if (isMultiValuedTraversalAttempt(path, field)) {\n+                    throw parseException(EX_USER, \"multi-valued-travesal\", new Object[]{field, path.last()}, null);\n+                }\n             \tString[] all = meta.getFieldNames();\n             \tClass<?> cls = meta.getDescribedType();\n                 throw parseException(EX_USER, \"no-field\",\n@@ -333,6 +336,15 @@ protected Object traverseStaticField(Class<?> cls, String field) {\n             return null;\n         }\n     }\n+    \n+    private boolean isMultiValuedTraversalAttempt(Path path, String field) {\n+        if (path == null) return false;\n+        if (path.last() == null) return false;\n+        if (path.last().getElement() == null) return false;\n+        if (path.last().getElement().getDeclaredTypeMetaData() == null) return false;\n+        if (path.last().getElement().getDeclaredTypeMetaData().getField(field) == null) return false;\n+        return true;\n+    }\n \n     /**\n      * Returns the type of the named variable if it has been declared."},{"sha":"665c0be55c3b227fd75db1051a33610f3749b7a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,7 +22,6 @@\n import java.util.Iterator;\n \n import org.apache.openjpa.kernel.Filters;\n-import serp.util.Numbers;\n \n /**\n  * Average values.\n@@ -47,7 +46,7 @@ protected Object operate(Collection os, Class c) {\n         if (os.isEmpty())\n             return null;\n \n-        Object sum = Filters.convert(Numbers.valueOf(0), c);\n+        Object sum = Filters.convert(0, c);\n         Object cur;\n         int size = 0;\n         for (Iterator itr = os.iterator(); itr.hasNext();) {\n@@ -60,6 +59,6 @@ protected Object operate(Collection os, Class c) {\n         }\n         if (size == 0)\n             return null;\n-        return Filters.divide(sum, c, Numbers.valueOf(size), int.class);\n+        return Filters.divide(sum, c, size, int.class);\n     }\n }"},{"sha":"e99863dec8ecf7d2a82e2b3f835e398c9603ab98","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n-import serp.util.Numbers;\n \n /**\n  * Count non-null values.\n@@ -47,6 +46,6 @@ protected Object operate(Collection os, Class c) {\n         for (Iterator itr = os.iterator(); itr.hasNext();)\n             if (itr.next() != null)\n                 count++;\n-        return Numbers.valueOf(count);\n+        return count;\n     }\n }"},{"sha":"76e789fc565e45f29df4581ef16616fcdff393a0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.kernel.StoreContext;\n-import serp.util.Numbers;\n \n /**\n  * Find the index of one string within another.\n@@ -59,7 +58,7 @@ protected Object eval(Object candidate, Object orig,\n                 ((Number) args[1]).intValue());\n         } else\n             idx = str.toString().indexOf(arg.toString());\n-        return Numbers.valueOf(idx);\n+        return idx;\n     }\n \n     public void acceptVisit(ExpressionVisitor visitor) {"},{"sha":"560c6f9ed5df184ff8b1ebcdbe5d1714260457c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":46,"deletions":2,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -19,12 +19,13 @@\n package org.apache.openjpa.kernel.exps;\n \n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Stack;\n \n-import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.ResultShape;\n import org.apache.openjpa.kernel.StoreQuery;\n@@ -48,7 +49,7 @@\n     public static final int DISTINCT_TRUE = 2 << 1;\n     public static final int DISTINCT_FALSE = 2 << 2;\n     public static final Value[] EMPTY_VALUES = new Value[0];\n-\n+    \n     /**\n      * Map of {@link FieldMetaData},{@link Value} for update statements.\n      */\n@@ -109,6 +110,15 @@ public boolean isAggregate() {\n     public boolean isDistinct() {\n         return distinct != DISTINCT_FALSE;\n     }\n+    \n+    /**\n+     * Gets the fields that are bound to parameters.\n+     * \n+     * @return empty if the query has no filtering condition or no parameters.\n+     */\n+    public List<FieldMetaData> getParameterizedFields() {\n+        return ParameterExpressionVisitor.collectParameterizedFields(filter);\n+    }\n \n     /**\n      * Add an update.\n@@ -155,4 +165,38 @@ public void exit(Value val) {\n                 _sub = null;\n         }\n     }\n+    \n+    /**\n+     * Visits the expression tree to find the parameter nodes.\n+     * @author Pinaki Poddar\n+     *\n+     */\n+    private static class ParameterExpressionVisitor extends AbstractExpressionVisitor {\n+        private FieldMetaData _parameterized;\n+        private List<FieldMetaData> _collected = new ArrayList<FieldMetaData>();\n+        /**\n+         * Enters the current node.\n+         */\n+        public void enter(Value val) {\n+            if (val instanceof Parameter) {\n+                if (_parameterized != null) {\n+                    _collected.add(_parameterized);\n+                } \n+            } else if (val instanceof Path) {\n+                _parameterized = ((Path)val).last();\n+            } else {\n+                _parameterized = null;\n+            }\n+        }\n+        \n+        public static List<FieldMetaData> collectParameterizedFields(Expression e) {\n+            if (e == null) {\n+                return Collections.emptyList();\n+            }\n+            ParameterExpressionVisitor visitor = new ParameterExpressionVisitor();\n+            e.acceptVisit(visitor);\n+            return visitor._collected;\n+        }\n+        \n+    }\n }"},{"sha":"4d15df21162525b0218edf66bcfae5e7d8e17d68","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import serp.util.Numbers;\n \n /**\n  * Returns the count of a collection.\n@@ -41,9 +40,9 @@ protected Class getType(Class c) {\n \n     protected Object operate(Object o, Class c) {\n         if (o instanceof Collection)\n-            return Numbers.valueOf(((Collection) o).size());\n+            return ((Collection) o).size();\n         if (o instanceof Map)\n-            return Numbers.valueOf(((Map) o).size());\n-        return (o == null) ? Numbers.valueOf(0) : Numbers.valueOf(1);\n+            return ((Map) o).size();\n+        return (o == null) ? 0 : 1;\n     }\n }"},{"sha":"11924c435fb7d51ac740ce4c950ff2f4204f4c61","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.kernel.StoreContext;\n-import serp.util.Numbers;\n \n /**\n  * Returns the number of characters in the String.\n@@ -53,9 +52,9 @@ protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object eval = _val.eval(candidate, orig, ctx, params);\n         if (eval == null)\n-            return Numbers.valueOf(0);\n+            return 0;\n \n-        return Numbers.valueOf(eval.toString().length());\n+        return eval.toString().length();\n     }\n \n     public void acceptVisit(ExpressionVisitor visitor) {"},{"sha":"c9ca5c539213f8ca2fd7109ddfc3e016b7ccb049","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,7 +22,6 @@\n import java.util.Iterator;\n \n import org.apache.openjpa.kernel.Filters;\n-import serp.util.Numbers;\n \n /**\n  * Sum values.\n@@ -53,7 +52,7 @@ protected Object operate(Collection os, Class c) {\n             return null;\n \n         Class type = getType(c);\n-        Object sum = Filters.convert(Numbers.valueOf(0), type);\n+        Object sum = Filters.convert(0, type);\n         Object cur;\n         for (Iterator itr = os.iterator(); itr.hasNext();) {\n             cur = itr.next();"},{"sha":"b23b924da7204edc41ffcd26b184719283f39787","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Type.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Type.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Type.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Type.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,7 +23,6 @@\n \n import org.apache.openjpa.kernel.StoreContext;\n \n-import serp.util.Numbers;\n \n /**\n  * Returns the entity type."},{"sha":"1344e5d5f1057d586dacdd220925c337514950c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -68,7 +68,6 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n \n /**\n  * Builder for JPQL expressions. This class takes the query parsed\n@@ -1320,9 +1319,9 @@ else if (node.getChildCount() == 2\n                     locateFromIndex == null ? locatePath\n                         : factory.newArgumentList(locatePath,\n                         factory.subtract(locateFromIndex,\n-                            factory.newLiteral(Numbers.valueOf(1),\n+                            factory.newLiteral(1,\n                                 Literal.TYPE_NUMBER)))),\n-                    factory.newLiteral(Numbers.valueOf(1),\n+                    factory.newLiteral(1,\n                         Literal.TYPE_NUMBER));\n \n             case JJTAGGREGATE:\n@@ -1443,11 +1442,11 @@ public static Value convertSubstringArguments(ExpressionFactory factory,\n             }\n         } else {\n             start = factory.subtract(val2, factory.newLiteral\n-                (Numbers.valueOf(1), Literal.TYPE_NUMBER));\n+                (1, Literal.TYPE_NUMBER));\n             if (val3 != null)\n             end = factory.add(val3,\n                 (factory.subtract(val2, factory.newLiteral\n-                    (Numbers.valueOf(1), Literal.TYPE_NUMBER))));\n+                    (1, Literal.TYPE_NUMBER))));\n         }\n         if (val3 != null)\n             return factory.substring(val1, factory.newArgumentList(start, end));"},{"sha":"5933c4a97aab5fc6afd0179437236b8644e69fc6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":78,"deletions":10,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,11 +23,14 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n+import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Calendar;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -64,6 +67,7 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.ShortId;\n import org.apache.openjpa.util.StringId;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -152,6 +156,7 @@\n     private int _resMode = MODE_NONE;\n \n     private Class<?> _type = Object.class;\n+    private int _hashCode = Object.class.getName().hashCode();\n     private final Map<String,FieldMetaData> _fieldMap = new TreeMap<String,FieldMetaData>();\n     private Map<String,FieldMetaData> _supFieldMap = null;\n     private boolean _defSupFields = false;\n@@ -206,6 +211,8 @@\n     private FieldMetaData[] _definedFields = null;\n     private FieldMetaData[] _listingFields = null;\n     private FieldMetaData[] _allListingFields = null;\n+    private FieldMetaData[] _allProxyFields = null;\n+    private FieldMetaData[] _allLrsFields = null;\n     private FetchGroup[] _fgs = null;\n     private FetchGroup[] _customFGs = null;\n     private boolean _intercepting = false;\n@@ -265,6 +272,7 @@ protected void setDescribedType(Class<?> type) {\n             (type.getSuperclass().getName()))\n             throw new MetaDataException(_loc.get(\"enum\", type));\n         _type = type;\n+        _hashCode = _type.getName().hashCode();\n         if (PersistenceCapable.class.isAssignableFrom(type))\n             setIntercepting(true);\n     }\n@@ -974,6 +982,59 @@ public boolean isAccessibleField(String field) {\n         return false;\n     }\n \n+    /**\n+     * Return all fields that are types that need to be wrappered by a proxy.\n+     * The types that need to be proxied are:\n+     * <p>\n+     *  <li>org.apache.openjpa.meta.JavaTypes.CALENDAR\n+     *  <li>org.apache.openjpa.meta.JavaTypes.COLLECTION\n+     *  <li>org.apache.openjpa.meta.JavaTypes.DATE\n+     *  <li>org.apache.openjpa.meta.JavaTypes.MAP\n+     *  <li>org.apache.openjpa.meta.JavaTypes.OBJECT\n+     */\n+    public FieldMetaData[] getProxyFields() {\n+        if (_allProxyFields == null) {\n+            // Make sure _allFields has been initialized\n+            if (_allFields == null) {\n+                getFields();\n+            }\n+            List<FieldMetaData> res = new ArrayList<FieldMetaData>();\n+            for (FieldMetaData fmd : _allFields) {\n+                switch (fmd.getDeclaredTypeCode()) {\n+                    case JavaTypes.CALENDAR:\n+                    case JavaTypes.COLLECTION:\n+                    case JavaTypes.DATE:\n+                    case JavaTypes.MAP:\n+                    case JavaTypes.OBJECT:\n+                        res.add(fmd);\n+                        break;\n+                }\n+            }\n+            _allProxyFields = res.toArray(new FieldMetaData[res.size()]);\n+        }\n+        return _allProxyFields;\n+    }\n+    \n+    /**\n+     * Return all large result set fields. Will never return null.\n+     */\n+    public FieldMetaData[] getLrsFields() {\n+        if (_allLrsFields == null) {\n+            // Make sure _allFields has been initialized\n+            if (_allFields == null) {\n+                getFields();\n+            }\n+            List<FieldMetaData> res = new ArrayList<FieldMetaData>();\n+            for (FieldMetaData fmd : _allFields) {\n+                if(fmd.isLRS()==true){\n+                    res.add(fmd);\n+                }\n+            }\n+            _allLrsFields = res.toArray(new FieldMetaData[res.size()]);\n+        }\n+        return _allLrsFields;\n+    }\n+    \n     /**\n      * Return all field metadata, including superclass fields.\n      */\n@@ -1116,22 +1177,24 @@ protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n      * Return the version field for this class, if any.\n      */\n     public FieldMetaData getVersionField() {\n+        if (_allFields == null) {\n+            getFields();\n+        }\n         if (_versionIdx == Integer.MIN_VALUE) {\n-            FieldMetaData[] fields = getFields();\n             int idx = -1;\n-            for (int i = 0; i < fields.length; i++) {\n-                if (fields[i].isVersion()) {\n+            for (int i = 0; i < _allFields.length; i++) {\n+                if (_allFields[i].isVersion()) {\n                     if (idx != -1)\n-                        throw new MetaDataException(_loc.get\n-                            (\"mult-vers-fields\", this, fields[idx], fields[i]));\n+                        throw new MetaDataException(_loc.get(\"mult-vers-fields\", this, _allFields[idx], _allFields[i]));\n                     idx = i;\n                 }\n             }\n             _versionIdx = idx;\n         }\n         if (_versionIdx == -1)\n             return null;\n-        return getFields()[_versionIdx];\n+\n+        return _allFields[_versionIdx];\n     }\n \n     /**\n@@ -1141,10 +1204,12 @@ public FieldMetaData getVersionField() {\n      * @return the field's metadata, or null if not found\n      */\n     public FieldMetaData getField(int index) {\n-        FieldMetaData[] fields = getFields();\n-        if (index < 0 || index >= fields.length)\n+        if(_allFields == null){\n+            getFields();\n+        }\n+        if (index < 0 || index >= _allFields.length)\n             return null;\n-        return fields[index];\n+        return _allFields[index];\n     }\n \n     /**\n@@ -1218,6 +1283,7 @@ public FieldMetaData addDeclaredField(String name, Class<?> type) {\n         FieldMetaData fmd = _repos.newFieldMetaData(name, type, this);\n         clearFieldCache();\n         _fieldMap.put(name, fmd);\n+\n         return fmd;\n     }\n \n@@ -1597,6 +1663,8 @@ protected void clearAllFieldCache() {\n         _allFields = null;\n         _allDFGFields = null;\n         _allPKFields = null;\n+        _allProxyFields = null;\n+        _allLrsFields = null;\n         _definedFields = null;\n         _listingFields = null;\n         _allListingFields = null;\n@@ -1646,7 +1714,7 @@ private void cacheFields() {\n     }\n \n     public int hashCode() {\n-        return _type.getName().hashCode();\n+        return _hashCode;\n     }\n \n     public boolean equals(Object other) {"},{"sha":"ba2645f447fa78081744fca71f992afcc9fb3014","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -32,7 +32,6 @@\n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.MetaDataException;\n-import serp.util.Numbers;\n \n /**\n  * Captures fetch group metadata.\n@@ -229,10 +228,10 @@ public void setRecursionDepth(FieldMetaData fm, int depth) {\n             throw new UnsupportedOperationException();\n         if (depth < -1)\n             throw new MetaDataException(_loc.get(\"invalid-fg-depth\", _name, fm, \n-                Numbers.valueOf(depth)));\n+                depth));\n         if (_depths == null)\n             _depths = new HashMap();\n-        _depths.put(fm, Numbers.valueOf(depth));\n+        _depths.put(fm, depth);\n     }\n \n     /**"},{"sha":"14be496455aa1f17fba8d042390b5d84d39edd65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -40,7 +40,6 @@\n import org.apache.openjpa.lib.meta.CFMetaDataParser;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.MetaDataException;\n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -90,27 +89,27 @@\n     private static final Map<Class<?>, Integer> _typeCodes = new HashMap<Class<?>, Integer>();\n \n     static {\n-        _typeCodes.put(String.class, Numbers.valueOf(STRING));\n-        _typeCodes.put(Boolean.class, Numbers.valueOf(BOOLEAN_OBJ));\n-        _typeCodes.put(Byte.class, Numbers.valueOf(BYTE_OBJ));\n-        _typeCodes.put(Character.class, Numbers.valueOf(CHAR_OBJ));\n-        _typeCodes.put(Double.class, Numbers.valueOf(DOUBLE_OBJ));\n-        _typeCodes.put(Float.class, Numbers.valueOf(FLOAT_OBJ));\n-        _typeCodes.put(Integer.class, Numbers.valueOf(INT_OBJ));\n-        _typeCodes.put(Long.class, Numbers.valueOf(LONG_OBJ));\n-        _typeCodes.put(Short.class, Numbers.valueOf(SHORT_OBJ));\n-        _typeCodes.put(Date.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(java.sql.Date.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(java.sql.Timestamp.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(java.sql.Time.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(BigInteger.class, Numbers.valueOf(BIGINTEGER));\n-        _typeCodes.put(BigDecimal.class, Numbers.valueOf(BIGDECIMAL));\n-        _typeCodes.put(Number.class, Numbers.valueOf(NUMBER));\n-        _typeCodes.put(Locale.class, Numbers.valueOf(LOCALE));\n-        _typeCodes.put(Object.class, Numbers.valueOf(OBJECT));\n-        _typeCodes.put(PersistenceCapable.class, Numbers.valueOf(PC_UNTYPED));\n-        _typeCodes.put(Properties.class, Numbers.valueOf(MAP));\n-        _typeCodes.put(Calendar.class, Numbers.valueOf(CALENDAR));\n+        _typeCodes.put(String.class, STRING);\n+        _typeCodes.put(Boolean.class, BOOLEAN_OBJ);\n+        _typeCodes.put(Byte.class, BYTE_OBJ);\n+        _typeCodes.put(Character.class, CHAR_OBJ);\n+        _typeCodes.put(Double.class, DOUBLE_OBJ);\n+        _typeCodes.put(Float.class, FLOAT_OBJ);\n+        _typeCodes.put(Integer.class, INT_OBJ);\n+        _typeCodes.put(Long.class, LONG_OBJ);\n+        _typeCodes.put(Short.class, SHORT_OBJ);\n+        _typeCodes.put(Date.class, DATE);\n+        _typeCodes.put(java.sql.Date.class, DATE);\n+        _typeCodes.put(java.sql.Timestamp.class, DATE);\n+        _typeCodes.put(java.sql.Time.class, DATE);\n+        _typeCodes.put(BigInteger.class, BIGINTEGER);\n+        _typeCodes.put(BigDecimal.class, BIGDECIMAL);\n+        _typeCodes.put(Number.class, NUMBER);\n+        _typeCodes.put(Locale.class, LOCALE);\n+        _typeCodes.put(Object.class, OBJECT);\n+        _typeCodes.put(PersistenceCapable.class, PC_UNTYPED);\n+        _typeCodes.put(Properties.class, MAP);\n+        _typeCodes.put(Calendar.class, CALENDAR);\n     }\n \n     /**\n@@ -316,7 +315,7 @@ public static Object convert(Object val, int typeCode) {\n                 if (val instanceof Integer)\n                     return val;\n                 if (val instanceof Number)\n-                    return Numbers.valueOf(((Number) val).intValue());\n+                    return ((Number) val).intValue();\n                 // no break\n             case INT:\n                 if (val instanceof String)\n@@ -326,7 +325,7 @@ public static Object convert(Object val, int typeCode) {\n                 if (val instanceof Long)\n                     return val;\n                 if (val instanceof Number)\n-                    return Numbers.valueOf(((Number) val).longValue());\n+                    return ((Number) val).longValue();\n                 // no break\n             case LONG:\n                 if (val instanceof String)"},{"sha":"9260d6ae7d5d933031e8a31132319413aee7510b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -631,14 +631,18 @@ private void resolve(ClassMetaData meta) {\n                 err &= resolveMapping(resolved.get(i));\n \n         // throw errors encountered\n+        // OPENJPA-1535 Always throw a MetaDataException because callers\n+        // of loadRegisteredClassMetaData expect only MetaDataException\n+        // to be thrown.\n         if (err && !_errs.isEmpty()) {\n             RuntimeException re;\n-            if (_errs.size() == 1)\n+            if ((_errs.size() == 1) && (_errs.get(0) instanceof MetaDataException)) {\n                 re = _errs.get(0);\n-            else\n-                re =\n-                    new MetaDataException(_loc.get(\"resolve-errs\")).setNestedThrowables((Throwable[]) _errs\n-                        .toArray(new Exception[_errs.size()]));\n+            } else {\n+                re = new MetaDataException(_loc.get(\"resolve-errs\"))\n+                    .setNestedThrowables((Throwable[]) _errs\n+                    .toArray(new Exception[_errs.size()]));\n+            }\n             _errs.clear();\n             throw re;\n         }"},{"sha":"18fa7d91f7eb59023eea8bc4b630fc4cb1392c49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,7 +23,6 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.StringDistance;\n import org.apache.openjpa.util.MetaDataException;\n-import serp.util.Numbers;\n \n /**\n  * Strategies for persistent value generation.\n@@ -85,22 +84,22 @@\n     private static final TreeBidiMap _map = new TreeBidiMap();\n \n     static {\n-        _map.put(\"none\", Numbers.valueOf(NONE));\n-        _map.put(\"native\", Numbers.valueOf(NATIVE));\n-        _map.put(\"sequence\", Numbers.valueOf(SEQUENCE));\n-        _map.put(\"autoassign\", Numbers.valueOf(AUTOASSIGN));\n-        _map.put(\"increment\", Numbers.valueOf(INCREMENT));\n-        _map.put(\"uuid-string\", Numbers.valueOf(UUID_STRING));\n-        _map.put(\"uuid-hex\", Numbers.valueOf(UUID_HEX));\n-        _map.put(\"uuid-type4-string\", Numbers.valueOf(UUID_TYPE4_STRING));\n-        _map.put(\"uuid-type4-hex\", Numbers.valueOf(UUID_TYPE4_HEX));\n+        _map.put(\"none\", NONE);\n+        _map.put(\"native\", NATIVE);\n+        _map.put(\"sequence\", SEQUENCE);\n+        _map.put(\"autoassign\", AUTOASSIGN);\n+        _map.put(\"increment\", INCREMENT);\n+        _map.put(\"uuid-string\", UUID_STRING);\n+        _map.put(\"uuid-hex\", UUID_HEX);\n+        _map.put(\"uuid-type4-string\", UUID_TYPE4_STRING);\n+        _map.put(\"uuid-type4-hex\", UUID_TYPE4_HEX);\n     }\n \n     /**\n      * Convert the given strategy to a name.\n      */\n     public static String getName(int strategy) {\n-        Object code = Numbers.valueOf(strategy);\n+        Object code = strategy;\n         String name = (String) _map.getKey(code);\n         if (name != null)\n             return name;"},{"sha":"f0b2df39cd5ab660e7da784873ffab4b6ba59d22","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -41,7 +41,6 @@\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n-import serp.util.Numbers;\n \n /**\n  * Utility class for manipulating application object ids.\n@@ -609,11 +608,11 @@ public void storeShortField(int field, short val) {\n         }\n \n         public void storeIntField(int field, int val) {\n-            store(Numbers.valueOf(val));\n+            store(val);\n         }\n \n         public void storeLongField(int field, long val) {\n-            store(Numbers.valueOf(val));\n+            store(val);\n         }\n \n         public void storeFloatField(int field, float val) {"},{"sha":"554ead6cc2e1c10667aeacfc0217b6ca105b2c29","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -91,7 +91,13 @@ public static String toString(Object ob) {\n         if (oid != null) {\n             if (oid instanceof Id)\n                 return oid.toString();\n-            return ob.getClass().getName() + \"-\" + oid.toString();\n+            String oidString = oid.toString();\n+            // some oids stringify their class names. Some do not.\n+            if (oidString.indexOf(ob.getClass().getName()) == -1) {\n+                return ob.getClass().getName() + \"-\" + oidString;\n+            } else {\n+                return oidString;\n+            }\n         }\n \n         if (ImplHelper.isManagedType(null, ob.getClass())) {\n@@ -272,4 +278,13 @@ public static String toClassName(Class<?> cls) {\n             return toClassName(cls.getComponentType())+\"[]\";\n         return cls.getName();\n     }\n+    \n+    public static String toClassNames(Collection<? extends Class<?>> classes) {\n+        if (classes == null) return \"\";\n+        StringBuilder buffer = new StringBuilder();\n+        for (Class<?> cls : classes) {\n+            buffer.append(\"\\r\\n\").append(toClassName(cls));\n+        }\n+        return buffer.toString();\n+    }\n }"},{"sha":"eaa94b7a8e399d3e7ab204695d10d3ab28e1124f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,7 +23,6 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n-import serp.util.Numbers;\n \n /**\n  * Datastore identity type. Implementations may choose to use this type,\n@@ -143,7 +142,7 @@ public long getId() {\n     }\n \n     public Object getIdObject() {\n-        return Numbers.valueOf(_id);\n+        return _id;\n     }\n \n     protected int idHash() {"},{"sha":"e5c3f77bff4ea22c7d182f41246d118700cb723d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.openjpa.util;\n \n-import serp.util.Numbers;\n \n /**\n  * {@link OpenJPAId} subclass appropriate for int fields.\n@@ -52,7 +51,7 @@ public int getId() {\n     }\n \n     public Object getIdObject() {\n-        return Numbers.valueOf(key);\n+        return key;\n     }\n \n     public String toString() {"},{"sha":"13044a4e2b07a1b2417c4f70b00abee3f54122d1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -30,13 +30,13 @@\n  * @author Marc Prud'hommeaux\n  * @since 0.3.1\n  */\n+@SuppressWarnings(\"serial\")\n public class LockException\n     extends StoreException {\n \n-    private static final transient Localizer _loc = Localizer.forPackage\n-        (LockException.class);\n+    private static final transient Localizer _loc = Localizer.forPackage(LockException.class);\n \n-    private int timeout = -1;\n+    private int timeout   = -1;\n     private int lockLevel = -1;\n     \n     public LockException(Object failed) {\n@@ -49,10 +49,10 @@ public LockException(Object failed, int timeout) {\n     }\n     \n     public LockException(Object failed, int timeout, int lockLevel) {\n-        super(_loc.get(\"lock-timeout\", Exceptions.toString(failed),\n-            String.valueOf(timeout)));\n+        super(_loc.get(\"lock-timeout\", Exceptions.toString(failed), String.valueOf(timeout)));\n         setFailedObject(failed);\n         setTimeout(timeout);\n+        setLockLevel(lockLevel);\n     }\n \n     public int getSubtype() {\n@@ -86,8 +86,7 @@ public String toString() {\n         String str = super.toString();\n         if (timeout < 0)\n             return str;\n-        return str + Exceptions.SEP + \"Timeout: \" + timeout + \", LockLevel\"\n-            + lockLevel;\n+        return str + Exceptions.SEP + \"Timeout: \" + timeout + \", LockLevel\" + lockLevel;\n     }\n \n     private void writeObject(ObjectOutputStream out)"},{"sha":"6e61b96903b0dfe4c917ceafe70b81afec56ae90","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.openjpa.util;\n \n-import serp.util.Numbers;\n \n /**\n  * {@link OpenJPAId} subclass appropriate for long fields.\n@@ -52,7 +51,7 @@ public long getId() {\n     }\n \n     public Object getIdObject() {\n-        return Numbers.valueOf(key);\n+        return key;\n     }\n \n     protected int idHash() {"},{"sha":"8cec3afebb0c177c6bd46cb64f485a3f14c091b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -35,6 +35,7 @@\n  * @author Abe White\n  * @since 0.4.0\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class OpenJPAException\n     extends RuntimeException\n     implements Serializable, ExceptionInfo {"},{"sha":"70f020a9f41a3cd06f8ddfb3dfa0943d6bc76c70","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":45,"deletions":3,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n  * Utility methods for managing proxies.\n@@ -80,10 +81,51 @@ public static void removed(Proxy proxy, Object removed, boolean key) {\n      * Used by proxy types to serialize non-proxy versions.\n      */\n     public static Object writeReplace(Proxy proxy, boolean detachable) {\n-        if (detachable && (proxy == null || proxy.getOwner() == null \n-            || proxy.getOwner().isDetached()))\n+        /* OPENJPA-1097 Remove $proxy classes during serialization based on:\n+         *   1) No Proxy, then return as-is\n+         *   2) Runtime created proxy (!detachable), then unproxy\n+         *   3) No StateManager (DetachedStateField==false), then return as-is\n+         *   4) If detached, then unproxy\n+         *   5) If ClassMetaData exists and DetachedStateField != TRUE\n+         *      (default of DetachedStateField==transient), then unproxy\n+         *   6) Else, return as-is\n+         * \n+         * Original code -\n+         *   1) Runtime created proxy (!detachable), then unproxy\n+         *   2) No Proxy, then return as-is\n+         *   3) No StateManager (DetachedStateField==false), then return as-is\n+         *   4) If detached, then return as-is <--- ERROR as EM.clear() marks\n+         *      entity as detached but doesn't remove any $proxy usage\n+         *   5) Else, unproxy\n+         * \n+         *  if (detachable && (proxy == null || proxy.getOwner() == null \n+         *      || proxy.getOwner().isDetached()))\n+         *      return proxy;\n+         *\n+         */\n+        if (proxy == null) {\n             return proxy;\n-        return proxy.copy(proxy);\n+        } else if (!detachable) {\n+            // OPENJPA-1571 - using our runtime generated proxies, so remove any $proxy\n+            return proxy.copy(proxy);\n+        } else if (proxy.getOwner() == null) {\n+            // no StateManager (DetachedStateField==false), so no $proxy to remove\n+            return proxy;\n+        } else if (proxy.getOwner().isDetached()) {\n+            // already detached, so remove any $proxy\n+            return proxy.copy(proxy);\n+        } else {\n+            // using a StateManager, so determine what DetachedState is being used\n+            OpenJPAStateManager sm = proxy.getOwner();  // !null checked for above\n+            ClassMetaData meta = sm.getMetaData();      // if null, no proxies?\n+            if ((meta != null) && (!Boolean.TRUE.equals(meta.usesDetachedState()))) {\n+                // configured to use transient (null) or no (FALSE) StateManger, so remove any $proxy\n+                return proxy.copy(proxy);\n+            } else {\n+                // DetachedStateField==true, which means to keep the SM and $proxy in the serialized objects\n+                return proxy;\n+            }\n+        }\n     }\n }\n "},{"sha":"8830df583b3f0276302f89e73a9d126cd22fccdc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -26,6 +26,7 @@\n  * @author Marc Prud'hommeaux\n  * @since 0.2.5\n  */\n+@SuppressWarnings(\"serial\")\n public class StoreException\n     extends OpenJPAException {\n "},{"sha":"860efbecf371f15c17fe7e586380b3e993d82cae","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -632,3 +632,5 @@ class-not-found: Can not set \"{0}\", which requires class \"{1}\".\n invalid-config-object: Invalid object provided in configuration property \\\n         \"{0}\".  Expected type was \"{1}\".\n \n+version-id: version id\n+openjpa-revision: Apache svn revision"},{"sha":"23c040a0c18cc444925d3235b9f6bb20dfb19f60","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -63,12 +63,12 @@ query-cache-key-removed: Key \"{0}\" has been removed from the query cache.\n reg-mbean: Registered MBean ({0}).\n cant-reg-mbean: Unable to register Datastore Cache {0} MBean.\n query-cache-name:  Query Cache\n-scheduler-start: Starting cache scheduler thread \"{0}\"...\n-scheduler-name: OpenJPA Cache Scheduler\n-scheduler-interval: Cache schedule thread will check every \"{0}\" min.\n-scheduler-clear: Scheduled cache eviction at time \"{1}\" for cache:\"{0}\"\n-scheduler-stop: Stopping scheduled cache eviction thread.\n-scheduler-fail: Cache scheduler thread unexpectedly interrupted. Stopping \\\n+scheduler-start: Starting clearable scheduler thread \"{0}\"...\n+scheduler-name: OpenJPA Clearable Scheduler\n+scheduler-interval: Clearable schedule thread will check every \"{0}\" min.\n+scheduler-clear: Scheduled clearable eviction at time \"{1}\" for clearable:\"{0}\"\n+scheduler-stop: Stopping scheduled clearable eviction thread.\n+scheduler-fail: Clearable scheduler thread unexpectedly interrupted. Stopping \\\n \tscheduler.\n bad-schedule: Invalid schedule string: \"{0}\"\n not-number: Token \"{0}\" is not a valid number or wildcard (*) for schedule.\n@@ -112,4 +112,6 @@ partition-cache-duplicate-partition: You have specified duplicate name \"{0}\" for\n partition-cache-default-partition: You have specified name \"{0}\" for a \\\n     partition in the configuration \"{0}\". The partition name matches the default \\\n     name reserved by OpenJPA for internal use and hence can not be used.\n+invalid-types-excluded-types: Failed to configure openjpa.DataCache Types, ExcludedTypes. \\\n+\tTypes \"{0}\" were found in both lists, but can only appear one of the lists.    \n \t\n\\ No newline at end of file"},{"sha":"deaee6a69da7978de30dcac33a62c551b933ca20","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -27,14 +27,13 @@ was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\n \tWebSphere does not support direct manipulation of managed transactions.\n was-transaction-id-exception: Unable to determine identity of the current \\\n \tWebSphere managed transaction. Please ensure that your are running the \\\n-\tapplication from within WebSphere Application Server (version 5.0.2 or \\ \n-\tnewer).\n+\tapplication from within WebSphere Application Server.\n was-reflection-exception: An error occurred reflecting WebSphere proprietary \\\n \tinterfaces. Please ensure that you are running the application from within \\\n-\tWebSphere Application Server (version 5.0.2 or newer).\n+\tWebSphere Application Server.\n was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\n \tservice. Please ensure that you are running the application from within \\\n-\tWebSphere Application Server (version 5.0.2 or newer).\n+\tWebSphere Application Server.\n tm-unavailable: Unable to obtain a TransactionManager using {0}. \n tsr-cannot-suspend: The Transaction Synchronization Registry can not suspend \\\n \tthe current transaction. "},{"sha":"6f224da48cdc806d7998db4e37b973c40ca8dcea","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -30,6 +30,9 @@ cant-resolve-type: The entity \"{0}\" cannot be resolved; please ensure that \\\n not-identifer: The specified node (\"{0}\") is not a valid identifier.\n no-field: No field named \"{0}\" in \"{1}\". Did you mean \"{2}\"? Expected one of \\\n \tthe available field names in \"{3}\": \"{4}\".\n+multi-valued-travesal: Attempt to navigate to relation field \"{0}\" via multi-valued \\\n+\tassociation \"{1}\". JPQL does not allow traversal through multi-valued \\\n+\trelation path. Try join instead.   \t\n unaccessible-field: The field named \"{1}\" in class \"{0}\" could not be accessed.\n multi-children: Expression \"{0}\" does not allow multiple children (\"{1}\").\n no-children: Expression \"{0}\" requires at least one child."},{"sha":"ebd9d38e11cf288b31989c95e664711824c15a02","filename":"openjpa-lib/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"6a9516449d1e3d7e347aba5867da89dd6ffd16e8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -37,7 +37,6 @@\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n import org.apache.openjpa.lib.util.Localizer;\n \n-import serp.util.Numbers;\n \n /**\n  * Wrapper around an existing connection. Subclasses can override the\n@@ -372,7 +371,7 @@ public void setHoldability(int holdability) throws SQLException {\n         if (m == null)\n             m = createJDBC3Method(SET_HOLDABILITY, \"setHoldability\",\n                 new Class[]{ int.class });\n-        invokeJDBC3(m, new Object[]{ Numbers.valueOf(holdability) });\n+        invokeJDBC3(m, new Object[]{ holdability });\n     }\n \n     public int getHoldability() throws SQLException {\n@@ -439,9 +438,9 @@ protected Statement createStatement(int resultSetType,\n                 m = createJDBC3Method(CREATE_STATEMENT, \"createStatement\",\n                     new Class[]{ int.class, int.class, int.class });\n             stmnt = (Statement) invokeJDBC3(m, new Object[]{\n-                Numbers.valueOf(resultSetType),\n-                Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability) });\n+                resultSetType,\n+                resultSetConcurrency,\n+                resultSetHoldability });\n         }\n         if (wrap)\n             stmnt = DelegatingStatement.newInstance(stmnt, this);\n@@ -470,9 +469,9 @@ protected PreparedStatement prepareStatement(String sql,\n                     new Class[]{ String.class, int.class, int.class,\n                         int.class });\n             stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n-                Numbers.valueOf(resultSetType),\n-                Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability) });\n+                resultSetType,\n+                resultSetConcurrency,\n+                resultSetHoldability });\n         }\n         if (wrap)\n             stmnt = DelegatingPreparedStatement.newInstance(stmnt, this);\n@@ -501,9 +500,9 @@ protected CallableStatement prepareCall(String sql, int resultSetType,\n                     new Class[]{ String.class, int.class, int.class,\n                         int.class });\n             stmnt = (CallableStatement) invokeJDBC3(m, new Object[]{ sql,\n-                Numbers.valueOf(resultSetType),\n-                Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability) });\n+                resultSetType,\n+                resultSetConcurrency,\n+                resultSetHoldability });\n         }\n         if (wrap)\n             stmnt = DelegatingCallableStatement.newInstance(stmnt, this);\n@@ -527,7 +526,7 @@ protected PreparedStatement prepareStatement(String sql,\n                 m = createJDBC3Method(PREPARE_WITH_KEYS, \"prepareStatement\",\n                     new Class[]{ String.class, int.class });\n             stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n-                Numbers.valueOf(autoGeneratedKeys) });\n+                autoGeneratedKeys });\n         }\n         if (wrap)\n             stmnt = DelegatingPreparedStatement.newInstance(stmnt, this);"},{"sha":"a6985e6e7bf8733888033fd3491647dc3d4c10e5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":79,"deletions":29,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -85,7 +85,7 @@\n     private static final int WARN_THROW = 5;\n     private static final int WARN_HANDLE = 6;\n     private static final String[] WARNING_ACTIONS = new String[7];\n-\n+    \n     static {\n         WARNING_ACTIONS[WARN_IGNORE] = \"ignore\";\n         WARNING_ACTIONS[WARN_LOG_TRACE] = \"trace\";\n@@ -229,29 +229,36 @@ private LoggingConnection newLoggingConnection(Connection conn)\n         return ConcreteClassGenerator.newInstance(loggingConnectionImpl, LoggingConnectionDecorator.this, conn);\n     }\n \n-\n-    /**\n-     * Include SQL in exception.\n-     */\n     private SQLException wrap(SQLException sqle, Statement stmnt) {\n-        if (sqle instanceof ReportingSQLException)\n-            return (ReportingSQLException) sqle;\n-        return new ReportingSQLException(sqle, stmnt, null);\n+        return wrap(sqle, stmnt, null, -1);\n     }\n \n-    /**\n-     * Include SQL in exception.\n-     */\n     private SQLException wrap(SQLException sqle, String sql) {\n-        if (sqle instanceof ReportingSQLException)\n-            return (ReportingSQLException) sqle;\n-        return new ReportingSQLException(sqle, null, sql);\n+        return wrap(sqle, null, sql, -1);\n     }\n     \n     private SQLException wrap(SQLException sqle, Statement stmnt, String sql) {\n-        if (sqle instanceof ReportingSQLException)\n-            return (ReportingSQLException) sqle;\n-        return new ReportingSQLException(sqle, stmnt, sql);\n+        return wrap(sqle, stmnt, sql, -1);\n+    }\n+\n+    private SQLException wrap(SQLException sqle, Statement stmnt, int indexOfFailedBatchObject) {\n+        return wrap(sqle, stmnt, null, -1);\n+    }\n+\n+    /**\n+     * Include SQL in exception.\n+     */\n+    private SQLException wrap(SQLException sqle, Statement stmnt, String sql, int indexOfFailedBatchObject) {\n+        ReportingSQLException toReturn = null;\n+\n+        if (sqle instanceof ReportingSQLException) {\n+            toReturn = (ReportingSQLException) sqle;\n+        } else {\n+            toReturn = new ReportingSQLException(sqle, stmnt, sql);\n+        }\n+\n+        toReturn.setIndexOfFirstFailedObject(indexOfFailedBatchObject);\n+        return toReturn;\n     }\n \n     /**\n@@ -972,6 +979,9 @@ public boolean execute(String sql) throws SQLException {\n             private final String _sql;\n             private List<String> _params = null;\n             private List<List<String>> _paramBatch = null;\n+            // When batching is used, this variable contains the index into the\n+            // last successfully executed batched statement.\n+            int batchedRowsBaseIndex = 0;\n \n             public LoggingPreparedStatement(PreparedStatement stmnt, String sql)\n                 throws SQLException {\n@@ -1076,11 +1086,29 @@ public int executeUpdate() throws SQLException {\n             }\n \n             public int[] executeBatch() throws SQLException {\n+                int indexOfFirstFailedObject = -1;\n+\n                 logBatchSQL(this);\n                 long start = System.currentTimeMillis();\n                 SQLException err = null;\n                 try {\n-                    return super.executeBatch();\n+                    int[] toReturn = super.executeBatch();\n+                    //executeBatch is called any time the number of batched statements\n+                    //is equal to, or less than, batchLimit.  In the 'catch' block below,\n+                    //the logic seeks to find an index based on the current executeBatch\n+                    //results.  This is fine when executeBatch is only called once, but\n+                    //if executeBatch is called many times, the _paramsBatch will continue\n+                    //to grow, as such, to index into _paramsBatch, we need to take into\n+                    //account the number of times executeBatch is called in or der to\n+                    //correctly index into _paramsBatch.  To that end, each time executeBatch\n+                    //is called, lets get the size of _paramBatch.  This will effectively\n+                    //tell us the index of the last successfully executed batch statement.\n+                    //If an exception is caused, then we know that _paramBatch.size was\n+                    //the index of the LAST row to successfully execute.\n+                    if (_paramBatch != null){\n+                        batchedRowsBaseIndex = _paramBatch.size();            \n+                    }\n+                    return toReturn;\n                 } catch (SQLException se) {\n                     // if the exception is a BatchUpdateException, and\n                     // we are tracking parameters, then set the current\n@@ -1093,28 +1121,43 @@ public int executeUpdate() throws SQLException {\n                             getUpdateCounts();\n                         if (count != null && count.length <= _paramBatch.size())\n                         {\n-                            int index = -1;\n                             for (int i = 0; i < count.length; i++) {\n                                 // -3 is Statement.STATEMENT_FAILED, but is\n                                 // only available in JDK 1.4+\n                                 if (count[i] == Statement.EXECUTE_FAILED) {\n-                                    index = i;\n+                                    indexOfFirstFailedObject = i;\n                                     break;\n                                 }\n                             }\n \n                             // no -3 element: it may be that the server stopped\n                             // processing, so the size of the count will be\n                             // the index\n-                            if (index == -1)\n-                                index = count.length + 1;\n+                            //See the Javadoc for 'getUpdateCounts'; a provider\n+                            //may stop processing when the first failure occurs,\n+                            //as such, it may only return 'UpdateCounts' for the\n+                            //first few which pass.  As such, the failed\n+                            //index is 'count.length', NOT count.length+1.  That\n+                            //is, if the provider ONLY returns the first few that\n+                            //passes (i.e. say an array of [1,1] is returned) then\n+                            //length is 2, and since _paramBatch starts at 0, we\n+                            //don't want to use length+1 as that will give us the\n+                            //wrong index.\n+                            if (indexOfFirstFailedObject == -1){\n+                                indexOfFirstFailedObject = count.length;\n+                            }\n+\n+                            //Finally, whatever the index is at this point, add batchedRowsBaseIndex\n+                            //to it to get the final index.  Recall, we need to start our index from the\n+                            //last batch which successfully executed.\n+                            indexOfFirstFailedObject += batchedRowsBaseIndex;\n \n                             // set the current params to the saved values\n-                            if (index < _paramBatch.size())\n-                                _params = (List<String>) _paramBatch.get(index);\n+                            if (indexOfFirstFailedObject < _paramBatch.size())\n+                                _params = (List) _paramBatch.get(indexOfFirstFailedObject);\n                         }\n                     }\n-                    err = wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this, indexOfFirstFailedObject);\n                     throw err;\n                 } finally {\n                     logTime(start);\n@@ -1366,10 +1409,17 @@ protected void appendInfo(StringBuffer buf) {\n             }\n \n             private void clearLogParameters(boolean batch) {\n-                if (_params != null)\n-                    _params.clear();\n-                if (batch && _paramBatch != null)\n-                    _paramBatch.clear();\n+                //Made !batch...we only want to clear if\n+                //we are NOT using batching.  If we clear now,\n+                //the _params will not be displayed in the resultant\n+                //exception message.  But when should we 'clear' them???\n+                if (!batch){                    \n+                    if (_params != null)\n+                        _params.clear();\n+                    \n+                    if (_paramBatch != null)\n+                        _paramBatch.clear();                \n+                }\n             }\n \n             private boolean shouldTrackParameters() {"},{"sha":"e63ad76648ccac1560cfeb049beb7257e6c0a32c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -34,7 +34,10 @@\n     private final transient Statement _stmnt;\n     private final SQLException _sqle;\n     private final String       _sql;\n-    \n+    // When batching is used, and an object/row in the batch causes an\n+    // exception, this variable will hold the index of the first failing object.\n+    private int indexOfFirstFailedObject=-1;\n+\n     /**\n      * Supply original exception and non-null Statement and/or SQL string.\n      */\n@@ -74,7 +77,15 @@ public int getErrorCode() {\n     public Statement getStatement() {\n         return _stmnt;\n     }\n+    \n+    public int getIndexOfFirstFailedObject(){\n+        return indexOfFirstFailedObject;\n+    }\n \n+    public void setIndexOfFirstFailedObject(int index){    \n+        indexOfFirstFailedObject=index;\n+    }\n+    \n     private static String getExceptionMessage(SQLException sqle,\n         Statement stmnt, String sql) {\n         try {"},{"sha":"e450e2e9b0fc4890c1554bd38b7663b44d376916","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -25,7 +25,6 @@\n import java.util.Iterator;\n import java.util.Map;\n \n-import serp.util.Numbers;\n \n /**\n  * Random-access result list implementation. It maintains a map\n@@ -98,7 +97,7 @@ protected Object getInternal(int index) {\n             return _full[index];\n         }\n \n-        Integer i = Numbers.valueOf(index);\n+        Integer i = index;\n         Object ret = _rows.get(i);\n         if (ret != null) {\n             if (ret instanceof Null)"},{"sha":"1653373020a596ec7809c9c0f0961e09681f5cdf","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+/**\n+ * Generic interface for components that can be cleared so that helpers can treat them in a generic\n+ * way.\n+ */\n+public interface Clearable {\n+\n+    public void clear();\n+\n+}"},{"sha":"a5679e844d8aaa118bfc91615e076c2a8e3dbac5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -79,7 +79,7 @@ protected Class loadClass(String name, boolean resolve)\n                             getClass().getClassLoader());\n                     return frameworkClass;\n                 } catch (ClassNotFoundException e) {\n-                    // continue, as it must be a user-defined class\n+                    // OPENJPA-1121 continue, as it must be a user-defined class\n                 }\n             }\n "},{"sha":"d25106ff28b2de8c24659df0a530946ab7ee6128","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,7 +22,6 @@\n \n import org.xml.sax.Locator;\n import org.apache.openjpa.lib.util.Localizer;\n-import serp.util.Numbers;\n \n /**\n  * @author Stephen Kim\n@@ -53,8 +52,8 @@ public String getLocation(String format) {\n             return _loc.get(\"no-locator\").getMessage();\n         }\n         return MessageFormat.format(format, new Object []{\n-            Numbers.valueOf(_locator.getLineNumber()),\n-            Numbers.valueOf(_locator.getColumnNumber()), _locator.getPublicId(),\n+            _locator.getLineNumber(),\n+            _locator.getColumnNumber(), _locator.getPublicId(),\n             _locator.getSystemId() });\n     }\n "},{"sha":"b5a71e3a255976969787b56bc9fa1d52462c758c","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -27,7 +27,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <groupId>org.apache.openjpa</groupId>\n@@ -61,7 +61,7 @@\n                     <systemProperties>\n                         <property>\n                             <name>openjpa.Log</name>\n-                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                            <value>${openjpa.Log}</value>\n                         </property>\n                         <property>\n                             <name>openjpa.ConnectionDriverName</name>\n@@ -712,6 +712,12 @@\n             <artifactId>jaxb-impl</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>simple-jndi</groupId>\n+            <artifactId>simple-jndi</artifactId>\n+            <version>0.11.4</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>\n@@ -728,7 +734,7 @@\n                                     <property name=\"test\" value=\"${test}\" />\n                                     <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n                                     <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n-                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n+                                    <property name=\"openjpa.Log\" value=\"${openjpa.Log}\" />\n                                     <property name=\"build.enhance\" value=\"${build.enhance}\" />\n                                 </ant>\n                             </tasks>\n@@ -809,7 +815,6 @@\n                         <exclude>org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/datacache/TestFlushDataCache.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java</exclude>\n@@ -965,7 +970,7 @@\n                     <systemProperties>\n                         <property>\n                             <name>openjpa.Log</name>\n-                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                            <value>${openjpa.Log}</value>\n                         </property>\n                         <property>\n                             <name>openjpa.DynamicEnhancementAgent</name>"},{"sha":"badba7efd3fac415b927dd5728fdc7c5a6bc6822","filename":"openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -84,7 +84,7 @@\n         <openjpac>\n             <classpath refid=\"cp\" />\n             <fileset refid=\"enhance.path.ref\" />\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n         <!--  Set detach state for serialization tests -->\n         <openjpac>\n@@ -97,7 +97,7 @@\n \t\t\t\t<exclude name=\"**/persistence/delimited/identifiers/xml/*.class\"/>\n                 <exclude name=\"**/Test*.class\" />\n             </fileset>\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n \t\t<!-- Enhance with private persistent properties compatibility option -->\n         <openjpac>\n@@ -106,7 +106,7 @@\n             <fileset dir=\"${project.build.testOutputDirectory}\">\n \t\t\t\t<include name=\"**/persistence/property/AccessModsEntity.class\"/>\n             </fileset>\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n \t\t<!-- Enhance delimited identifiers XML-based entities separately -->\n         <openjpac>\n@@ -116,7 +116,7 @@\n \t\t\t\t<include name=\"**/persistence/delimited/identifiers/xml/*.class\"/>\n \t\t\t\t<exclude name=\"**/persistence/delimited/identifiers/xml/Test*.class\"/>\n             </fileset>\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\"/>\n         </openjpac>\n     </target>\n </project>"},{"sha":"4cc09b1ec20490df2381f6a3c04bc3ef542b3593","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -71,7 +71,6 @@\n import org.xml.sax.SAXException;\n \n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n-import serp.util.Numbers;\n /**\n  * Custom SAX parser used by the system to parse persistence mapping files.\n  *\n@@ -477,8 +476,8 @@ private boolean startTableGenerator(Attributes attrs) {\n         seq.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            seq.setLineNumber(locator.getLineNumber());\n+            seq.setColNumber(locator.getColumnNumber());\n         }\n         pushElement(seq);\n         return true;\n@@ -1091,8 +1090,8 @@ private boolean startSQLResultSetMapping(Attributes attrs) {\n         result.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            result.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            result.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            result.setLineNumber(locator.getLineNumber());\n+            result.setColNumber(locator.getColumnNumber());\n         }\n         pushElement(result);\n         return true;"},{"sha":"268e62d005a76fd590b149a47b202daeb1a73801","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","status":"modified","additions":38,"deletions":5,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.util.Map;\n import java.util.Properties;\n \n import javax.persistence.EntityManager;\n@@ -70,24 +71,56 @@ public void testValidEntityManagerUnwrap() {\n     }\n     \n     /**\n-     * Tests a EntityManager can be unwrapped as an instance of a series of \n-     * class or interface. \n+     * Tests a EntityManager can not be unwrapped as Object class, null or an interface. \n+     * And each such failure raises a Persistence Exception and causes an active transaction\n+     * to rollback.\n      */\n     public void testInvalidEntityManagerUnwrap() {\n         EntityManager em = emf.createEntityManager();\n         \n         Class<?>[] invalidCasts = new Class[] {\n             Object.class,\n             Properties.class,\n+            Map.class, \n             null,\n         };\n         for (Class<?> c : invalidCasts) {\n             try {\n+                em.getTransaction().begin();\n                 em.unwrap(c);\n-                fail(\"Expected to fail to unwarp with \" + c);\n-            } catch (Exception e) {\n+                fail(\"Expected to fail to unwarp with invalid \" + c);\n+            } catch (PersistenceException e) {\n+                EntityTransaction txn = em.getTransaction();\n+                assertTrue(txn.getRollbackOnly());\n+                txn.rollback();\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Tests a Query can not be unwrapped as Object class, null or an interface. \n+     * And each such failure raises a Persistence Exception and causes an active transaction\n+     * to rollback.\n+     */\n+    public void testInvalidQueryUnwrap() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        Class<?>[] invalidCasts = new Class[] {\n+            Object.class,\n+            Properties.class,\n+            Map.class, \n+            null,\n+        };\n+        for (Class<?> c : invalidCasts) {\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createQuery(QueryLanguages.LANG_SQL,\"\");\n+                query.unwrap(c);\n+                fail(\"Expected to fail to unwarp with invalid \" + c);\n+            } catch (PersistenceException e) {\n                 EntityTransaction txn = em.getTransaction();\n-                assertFalse(txn.isActive());\n+                assertTrue(txn.getRollbackOnly());\n+                txn.rollback();\n             }\n         }\n     }"},{"sha":"c4db8f726e9183d158d1bccf3e485a2a3b12b064","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.EntityListeners;\n+\n+@Entity\n+@EntityListeners(value = {ListenerImpl.class, ListenerImpl.class})\n+public class DuplicateListenerEntity implements ListenerTestEntity {\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private int value;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"45e42cf2a754bd8db8d04e84c769cdcf875731ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","status":"modified","additions":36,"deletions":9,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,6 +23,10 @@\n \n public class TestEntityListeners extends SingleEMFTestCase {\n \n+    private static final int ENTITY_LISTENER_ENTITY = 1;\n+    private static final int GLOBAL_LISTENER_ENTITY = 2;\n+    private static final int DUPLICATE_LISTENER_ENTITY = 3;\n+    \n     public void setUp() {\n         setUp(CLEAR_TABLES);\n         ListenerImpl.prePersistCount = 0;\n@@ -40,22 +44,38 @@ protected String getPersistenceUnitName() {\n     }\n \n     public void testEntityListeners() {\n-        helper(true);\n+        helper(ENTITY_LISTENER_ENTITY);\n     }\n \n     public void testGlobalListeners() {\n-        helper(false);\n+        helper(GLOBAL_LISTENER_ENTITY);\n+    }\n+    \n+    public void testDuplicateListeners() {\n+        super.setUp(CLEAR_TABLES, DuplicateListenerEntity.class, \n+            \"openjpa.Callbacks\", \"AllowsDuplicateListener=false\");\n+        assertFalse(emf.getConfiguration().getCallbackOptionsInstance()\n+            .getAllowsDuplicateListener());\n+        helper(DUPLICATE_LISTENER_ENTITY);\n     }\n \n-    public void helper(boolean entityListeners) {\n+    public void helper(int entityListeners) {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         try {\n             em.getTransaction().begin();\n-            ListenerTestEntity o;\n-            if (entityListeners)\n+            ListenerTestEntity o = null;\n+            switch (entityListeners) {\n+            case ENTITY_LISTENER_ENTITY:\n                 o = new EntityListenerEntity();\n-            else\n+                break;\n+            case GLOBAL_LISTENER_ENTITY:\n                 o = new GlobalListenerEntity();\n+                break;\n+            case DUPLICATE_LISTENER_ENTITY:\n+                o = new DuplicateListenerEntity();\n+                break;\n+                \n+            }\n             em.persist(o);\n \n             assertStatus(1, 0, 0, 0, 0, 0, 0);\n@@ -68,11 +88,18 @@ public void helper(boolean entityListeners) {\n \n             em = emf.createEntityManager();\n             em.getTransaction().begin();\n-            if (entityListeners)\n+            switch (entityListeners) {\n+            case ENTITY_LISTENER_ENTITY:\n                 o = em.find(EntityListenerEntity.class, id);\n-            else\n+                break;\n+            case GLOBAL_LISTENER_ENTITY:\n                 o = em.find(GlobalListenerEntity.class, id);\n-\n+                break;\n+            case DUPLICATE_LISTENER_ENTITY:\n+                o = em.find(DuplicateListenerEntity.class, id);\n+                break;\n+                \n+            }\n             assertNotNull(o);\n             assertStatus(1, 1, 0, 0, 0, 0, 1);\n "},{"sha":"fe466605a62782c24f09cab2743aa135553ea04f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","status":"renamed","additions":36,"deletions":35,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -16,57 +16,58 @@\n  * specific language governing permissions and limitations\n  * under the License.    \n  */\n-package hellojpa;\n+ package org.apache.openjpa.persistence.conf;\n \n-import java.util.*;\n-import javax.persistence.*;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n \n-\n-/** \n- * A very simple persistent entity that holds a \"message\", has a\n- * \"created\" field that is initialized to the time at which the\n- * object was created, and an id field that is initialized to the\n- * current time.\n- */\n-@Entity\n-public class Message {\n+// override defaults to attempt to prevent collisions.\n+@Entity(name=\"confPerson\")\n+@Table(name=\"CONF_PERSON\")\n+public class Person {\n+    \n     @Id\n-    private long id = System.currentTimeMillis();\n-\n-    @Basic\n-    private String message;\n-\n-    @Basic\n-    private Date created = new Date();\n+    private int id;\n \n-    public Message() {\n+    @Version\n+    private int version;\n+    \n+    @Column(length=16)\n+    private String name;\n+    \n+    public Person() { \n+        super();\n     }\n-\n-    public Message(String msg) {\n-        message = msg;\n+   \n+    public Person(int id) { \n+        super();\n+        setId(id);\n     }\n \n-    public void setId(long val) {\n-        id = val;\n+    public int getId() {\n+        return id;\n     }\n \n-    public long getId() {\n-        return id;\n+    public void setId(int id) {\n+        this.id = id;\n     }\n \n-    public void setMessage(String msg) {\n-        message = msg;\n+    public int getVersion() {\n+        return version;\n     }\n \n-    public String getMessage() {\n-        return message;\n+    public void setVersion(int version) {\n+        this.version = version;\n     }\n \n-    public void setCreated(Date date) {\n-        created = date;\n+    public String getName() {\n+        return name;\n     }\n \n-    public Date getCreated() {\n-        return created;\n+    public void setName(String name) {\n+        this.name = name;\n     }\n }","previous_filename":"openjpa-integration/osgi-itests/src/main/java/hellojpa/Message.java"},{"sha":"aa8944fa6d67b85b363447709e46a96656b30721","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.conf;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestSwitchConnection extends AbstractPersistenceTestCase {\n+    private String defaultJndiName = \"jdbc/mocked\";\n+    private String[] jndiNames = { \"jdbc/mocked1\" };\n+    \n+    protected void initEMF(String cfName) { \n+        EntityManagerFactory emf = getEmf(\"openjpa.ConnectionFactoryName\", cfName);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from confPerson\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        emf.close();\n+    }\n+    \n+    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue) { \n+        // null out the driver to prevent system properties from taking effect.\n+        // do not set connectionFactoryModeManaged - or connectionFactory2 will be used. \n+        return createEMF(\n+            \"openjpa.ConnectionDriverName\", \"\", \n+            cfPropertyName, cfPropertyValue,\n+            Person.class); \n+    }\n+    \n+    protected EntityManager getEm(EntityManagerFactory emf, String name, String value) {\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(name, value);\n+        return emf.createEntityManager(props);\n+    }\n+    \n+    protected void createTables() { \n+        // create an EMF for each database;\n+        initEMF(defaultJndiName);\n+        initEMF(jndiNames[0]);\n+    }\n+    \n+    public void testConnectionFactoryName() { \n+        // split out so that we can try javax.persistence.jtaDataSource in the future. \n+        overridePropertyOnEM(\"openjpa.ConnectionFactoryName\", jndiNames[0]);\n+    }\n+\n+    public void overridePropertyOnEM(String name, String value) {\n+        // TODO Disable for non derby. \n+        createTables();\n+        \n+        // use the default JndiName for the base EntityManagerFactory\n+        EntityManagerFactory emf = getEmf(name, defaultJndiName);\n+        assertNotNull(emf);\n+\n+        EntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        EntityManager em1 = getEm(emf, name, value); \n+        assertNotNull(em1);\n+\n+        // 'prove' that we're using a different database by inserting the same row\n+        em.getTransaction().begin();\n+        em.persist(new Person(1));\n+        em.getTransaction().commit();\n+\n+        em1.getTransaction().begin();\n+        em1.persist(new Person(1));\n+        em1.getTransaction().commit();\n+\n+        em.clear();\n+        em1.clear();\n+\n+        // sanity test, make sure inserting the same row again fails.\n+        \n+        em.getTransaction().begin();\n+        em.persist(new Person(1));\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"Should not be able to commit the same row a second time\");\n+        } catch (RollbackException rbe) {\n+            assertTrue(rbe.getCause() instanceof EntityExistsException);\n+            // expected\n+        }\n+\n+        em1.getTransaction().begin();\n+        em1.persist(new Person(1));\n+        try {\n+            em1.getTransaction().commit();\n+            fail(\"Should not be able to commit the same row a second time\");\n+        } catch (RollbackException rbe) {\n+            assertTrue(rbe.getCause() instanceof EntityExistsException);\n+            // expected\n+        }\n+        \n+        em.close();\n+        em1.close();\n+        emf.close();\n+    }\n+}"},{"sha":"ba77009d301a7499d958aab728bdd17490bef500","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -35,8 +35,6 @@\n import javax.persistence.criteria.Subquery;\n \n import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n-import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.QueryDecorator;\n-import org.apache.openjpa.persistence.embed.Division;\n \n /**\n  * Tests type-strict version of Criteria API.\n@@ -658,17 +656,16 @@ public void testExist1b() {\n         String jpql = \"select c from Customer c left join c.orders o where exists\"\n             + \" (select o2 from c.orders o2 where o2 = o)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n-            + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, \"\n-            + \"t5.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n+        String expectedSQL = \"SELECT t0.id, t0.accountNum, t4.id, t4.city, t4.country, t4.county, \"\n+            + \"t4.state, t4.street, t5.userid, t5.DTYPE, t5.age, t5.compName, t5.creditRating, t5.name, \"\n+            + \"t4.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n             + \"t0.name, t0.status \"\n             + \"FROM CR_CUST t0 \"\n             + \"LEFT OUTER JOIN CR_ODR t1 ON t0.id = t1.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ODR t2 ON t0.id = t2.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ADDR t5 ON t0.ADDRESS_ID = t5.id \"\n-            + \"LEFT OUTER JOIN CompUser t6 ON t5.id = t6.ADD_ID WHERE (EXISTS (\"\n-            + \"SELECT t4.id FROM CR_ODR t3, CR_ODR t4 WHERE (t2.id = t4.id AND t3.id = t4.id) \"\n-            + \"AND (t0.id = t3.CUSTOMER_ID)))\";\n+            + \"LEFT OUTER JOIN CR_ADDR t4 ON t0.ADDRESS_ID = t4.id \"\n+            + \"LEFT OUTER JOIN CompUser t5 ON t4.id = t5.ADD_ID WHERE (EXISTS (\" \n+            + \"SELECT t3.id FROM CR_ODR t2, CR_ODR t3 WHERE (t1.id = t3.id AND t2.id = t3.id) \"\n+            + \"AND (t0.id = t2.CUSTOMER_ID)))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -711,17 +708,16 @@ public void testNotExist1a() {\n         String jpql = \"select c from Customer c left join c.orders o where not exists\"\n             + \" (select o2 from c.orders o2 where o2 = o)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n-            + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, \"\n-            + \"t5.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n+        String expectedSQL = \"SELECT t0.id, t0.accountNum, t4.id, t4.city, t4.country, t4.county, \"\n+            + \"t4.state, t4.street, t5.userid, t5.DTYPE, t5.age, t5.compName, t5.creditRating, t5.name, \"\n+            + \"t4.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n             + \"t0.name, t0.status \"\n             + \"FROM CR_CUST t0 \"\n             + \"LEFT OUTER JOIN CR_ODR t1 ON t0.id = t1.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ODR t2 ON t0.id = t2.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ADDR t5 ON t0.ADDRESS_ID = t5.id \"\n-            + \"LEFT OUTER JOIN CompUser t6 ON t5.id = t6.ADD_ID WHERE (NOT (EXISTS (\"\n-            + \"SELECT t4.id FROM CR_ODR t3, CR_ODR t4 WHERE (t2.id = t4.id AND t3.id = t4.id) \"\n-            + \"AND (t0.id = t3.CUSTOMER_ID))))\";\n+            + \"LEFT OUTER JOIN CR_ADDR t4 ON t0.ADDRESS_ID = t4.id \"\n+            + \"LEFT OUTER JOIN CompUser t5 ON t4.id = t5.ADD_ID WHERE (NOT (EXISTS (\"\n+            + \"SELECT t3.id FROM CR_ODR t2, CR_ODR t3 WHERE (t1.id = t3.id AND t2.id = t3.id) \"\n+            + \"AND (t0.id = t2.CUSTOMER_ID))))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);\n "},{"sha":"a19e1a1e91c366277d76a019176e42534f30dd99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -1085,9 +1085,8 @@ public void testKeys8() {\n     public void testValues1() {\n         String sql = \"SELECT t0.name, t2.id, t2.label FROM CR_ITEM t0 \"\n             + \"INNER JOIN CR_ITEM_photos t1 ON t0.id = t1.ITEM_ID \"\n-            + \"INNER JOIN CR_ITEM_photos t3 ON t0.id = t3.ITEM_ID \"\n-            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE \" + \n-            \"((t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ?) \"\n+            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE \" +\n+            \"((t1.VALUE_ID = ? OR t1.VALUE_ID = ? OR t1.VALUE_ID = ? OR t1.VALUE_ID = ? OR t1.VALUE_ID = ?) \"\n             + \"AND 0 < (SELECT COUNT(*) FROM CR_ITEM_photos WHERE CR_ITEM_photos.ITEM_ID = t0.id))\";\n \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n@@ -1167,10 +1166,9 @@ public void testValues5() {\n             + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE \"\n             + \"(0 = (SELECT COUNT(*) FROM CR_ITEM_photos t3 WHERE \"\n             + \"(t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ?) \"\n-            + \"AND (t0.id = t3.ITEM_ID) AND t0.id = t3.ITEM_ID) \"\n+            + \"AND t0.id = t1.ITEM_ID) \"\n             + \"AND 0 < (SELECT COUNT(*) FROM CR_ITEM_photos WHERE CR_ITEM_photos.ITEM_ID = t0.id))\";\n         \n-        \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Item> item = q.from(Item.class);\n         MapJoin<Item, String, Photo> photo = item.join(Item_.photos);"},{"sha":"97f42ca36ee6b48ea9abbab9e87cee75d4f864f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -164,18 +164,23 @@ public void testExcludeOrdersAndPurchases() {\n     }\n \n     public void testIncludePurchaseItemExcludePurchase() {\n+        try{\n         getEntityManagerFactoryCacheSettings(new Class[] { Purchase.class,\n             Item.class }, new Class[] { Purchase.class });\n         populate();\n+            fail(\"Shouldn't be able to create an EMF with an entity in both Types and ExcludedTypes\");\n         StoreCache cache = emf.getStoreCache();\n         assertCacheContents(cache, false, false, true);\n+        }catch(Exception e){\n+            //expected\n+        }\n     }\n \n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n         Class<?>[] includedTypes, Class<?>[] excludedTypes) {\n         StringBuilder includes = new StringBuilder();\n         if (includedTypes != null && includedTypes.length > 0) {\n-            includes.append(\"IncludedTypes=\");\n+            includes.append(\"Types=\");\n             for (Class<?> c : includedTypes) {\n                 includes.append(c.getName());\n                 includes.append(_tSep);\n@@ -193,7 +198,7 @@ public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n         }\n         StringBuilder dataCacheSettings = new StringBuilder();\n         boolean hasIncludeOrExclude = includes.length() > 0 || excludes.length() > 0;\n-        dataCacheSettings.append(hasIncludeOrExclude ? \"type-based(\" : \"default\");\n+        dataCacheSettings.append(\"true\" + (hasIncludeOrExclude ? \"(\" : \"\"));\n         if (hasIncludeOrExclude) {\n             dataCacheSettings.append(includes);\n             if (includes.length() > 0 && excludes.length() > 0) \n@@ -202,8 +207,7 @@ public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n             dataCacheSettings.append(\")\");\n         }\n         Map<String, String> props = new HashMap<String, String>();\n-        props.put(\"openjpa.CacheDistributionPolicy\", dataCacheSettings.toString());\n-        props.put(\"openjpa.DataCache\", \"true\");\n+        props.put(\"openjpa.DataCache\", dataCacheSettings.toString());\n         props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n         props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\"\n             + Item.class.getName() + _tSep + Purchase.class.getName() + _tSep"},{"sha":"4709bc2dfefb9c75674792f0ab8f67471e24669c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.datacache.ConcurrentDataCache;\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.ClearableScheduler;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestClearableScheduler extends SingleEMFTestCase {\n+\n+    private static String getMinutesString() {\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = 0; i < 60; i++) {\n+            if (i % 2 == 0)\n+                buf.append(i).append(',');\n+        }\n+        return buf.toString();\n+    }\n+\n+    public void setUp() {\n+        setUp(\n+            \"openjpa.DataCache\", \"true(EvictionSchedule=+1)\"\n+            , \"openjpa.QueryCache\", \"true\"\n+            ,\"openjpa.RemoteCommitProvider\", \"sjvm\"\n+            ,ScheduledEviction.class, CLEAR_TABLES\n+            );\n+    }\n+\n+    public void testBasic() throws Exception {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        OpenJPAConfiguration conf = ((OpenJPAEntityManagerSPI) em).getConfiguration();\n+        ClearableScheduler scheduler = new ClearableScheduler(conf);\n+        // Make the scheduler run every 1 minute\n+        scheduler.setInterval(1);\n+        DummyCache cache1 = new DummyCache();\n+        DummyCache cache2 = new DummyCache();\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int currMin = cal.get(Calendar.MINUTE);\n+        int plusOne = currMin+1;\n+        int plusTwo = plusOne+1;\n+        if(plusOne>=60){\n+            plusOne-=60;\n+        }\n+        if(plusTwo>=60){\n+            plusTwo-=60;\n+        }\n+        // Schedule eviction to happen the next two minutes\n+        scheduler.scheduleEviction(cache2, plusOne+\",\"+plusTwo+\" * * * *\");\n+\n+        // Schedule eviction to happen every mintue on cache 1\n+        scheduler.scheduleEviction(cache1, (\"+1\"));\n+        \n+        Thread.currentThread().sleep(61000);\n+        assertEquals(1,cache1.getClearCount());\n+        assertEquals(1,cache2.getClearCount());\n+        \n+        Thread.currentThread().sleep(60000);\n+        assertEquals(2,cache1.getClearCount());\n+        assertEquals(2,cache2.getClearCount());\n+        \n+        Thread.currentThread().sleep(60000);\n+        assertEquals(3,cache1.getClearCount());\n+        assertEquals(2,cache2.getClearCount());\n+    }\n+    \n+    public void testMultithreadedInitialization() throws Exception {\n+        final OpenJPAConfiguration conf =  emf.getConfiguration();\n+        final List<DataCacheManager> dcms = new ArrayList<DataCacheManager>();\n+        Runnable r = new Runnable(){\n+            public void run() {\n+                dcms.add(conf.getDataCacheManagerInstance());\n+            }\n+        };\n+        List<Thread> workers = new ArrayList<Thread>();\n+        for(int i = 0;i<20;i++){\n+            workers.add(new Thread(r));\n+        }\n+        for(Thread t : workers){\n+            t.start();\n+        }\n+        for(Thread t : workers){\n+            t.join();\n+        }\n+        DataCacheManager prev = dcms.get(0);\n+        for(DataCacheManager dcm : dcms){\n+            assertTrue(prev == dcm);\n+            prev = dcm;\n+        }\n+\n+    }\n+\n+    /**\n+     * Pass in 4 out of 5 tokens.\n+     */\n+    // private void doTest(String valid, String invalid) throws Exception {\n+    //\n+    // OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory) getEmf();\n+    // OpenJPAConfiguration conf = ((OpenJPAEntityManagerFactorySPI)\n+    // OpenJPAPersistence.cast(emf)).getConfiguration();\n+    //\n+    // DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n+    // scheduler.setInterval(1);\n+    //\n+    // Calendar cal = Calendar.getInstance();\n+    // cal.setTime(new Date());\n+    // String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\n+    // DummyCache validCache = new DummyCache();\n+    // scheduler.scheduleEviction(validCache, sched + valid);\n+    // DummyCache invalidCache = new DummyCache();\n+    // scheduler.scheduleEviction(invalidCache, sched + invalid);\n+    // Thread thread = new Thread(scheduler);\n+    // thread.setDaemon(true);\n+    // thread.start();\n+    // // test that it did not run yet...\n+    // Thread.currentThread().sleep(70 * 1000); // 70 seconds\n+    // scheduler.stop();\n+    // // assertEquals(2, validCache.clearCount);\n+    // assertTrue(\"Wrong invocation count: \" + validCache.clearCount, validCache.clearCount == 1\n+    // || validCache.clearCount == 2);\n+    // assertEquals(0, invalidCache.clearCount);\n+    // }\n+    private class DummyCache extends ConcurrentDataCache {\n+\n+        int clearCount = 0;\n+\n+        public synchronized int getClearCount(){\n+            return clearCount;\n+        }\n+        public synchronized void clear() {\n+            clearCount++;\n+        }\n+    }\n+}"},{"sha":"04ac62b55646fc82197626ff103bbf69a86e66fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","status":"removed","additions":0,"deletions":228,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/099d18901e5dd164c189f8b9538c9e80d3923569/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java?ref=099d18901e5dd164c189f8b9538c9e80d3923569","patch":"@@ -1,228 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.persistence.datacache;\n-\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-\n-import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.datacache.DataCache;\n-import org.apache.openjpa.datacache.DataCacheScheduler;\n-import org.apache.openjpa.datacache.ConcurrentDataCache;\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.util.Id;\n-\n-public class TestDataCacheScheduler\n-    extends AbstractTestCase {\n-\n-    private static final String MINUTES = getMinutes();\n-\n-    public TestDataCacheScheduler(String str) {\n-        super(str, \"datacachecactusapp\");\n-    }\n-\n-    private static String getMinutes() {\n-        StringBuffer buf = new StringBuffer();\n-        for (int i = 0; i < 60; i++) {\n-            if (i % 2 == 0)\n-                buf.append(i).append(',');\n-        }\n-        return buf.toString();\n-    }\n-\n-    public void setUp() {\n-        deleteAll(ScheduledEviction.class);\n-    }\n-\n-    public void testRuntime()\n-        throws Exception {\n-        String sched = MINUTES + \" * * * *\";\n-        Map propsMap = new HashMap();\n-        propsMap.put(\"openjpa.DataCache\", \"true(EvictionSchedule=\\\"\" + sched\n-                + \"\\\")\");\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n-        OpenJPAEntityManagerFactory emf =\n-            (OpenJPAEntityManagerFactory) getEmf(propsMap);\n-\n-        ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n-            .getConfiguration().getDataCacheManagerInstance()\n-            .getDataCacheScheduler().setInterval(1);\n-        DataCache cache = JPAFacadeHelper.getMetaData(emf,\n-            ScheduledEviction.class).getDataCache();\n-\n-        OpenJPAEntityManager em = (OpenJPAEntityManager) emf\n-            .createEntityManager();\n-        startTx(em);\n-        ScheduledEviction pc = new ScheduledEviction(\"Foo\");\n-        em.persist(pc);\n-        Object oid = em.getObjectId(pc);\n-        Object oidwithclass = new Id(ScheduledEviction.class, oid.toString());\n-        endTx(em);\n-        endEm(em);\n-\n-        cache.clear();// clear and wait until next run.\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        if (cal.get(Calendar.MINUTE) % 2 == 0)\n-            Thread.currentThread().sleep\n-                ((60 - cal.get(Calendar.SECOND)) * 1000);\n-        cal.setTime(new Date());\n-        assertTrue(cal.get(Calendar.MINUTE) % 2 == 1);\n-        em = (OpenJPAEntityManager) emf.createEntityManager();\n-        em.find(ScheduledEviction.class, oid);\n-        endEm(em);\n-        assertTrue(cache.contains(oidwithclass));\n-\n-        Thread.currentThread().sleep(130 * 1000);\n-        assertFalse(cache.contains(oidwithclass));\n-        emf.close();\n-    }\n-\n-    /**\n-     * too slow ! *\n-     */\n-    //FIXME Seetha Sep 26,2006\n-    /*public void XXXtestRunnable()\n-        throws Exception {\n-        KodoPersistenceManager pm = getPM();\n-        OpenJPAConfiguration conf = pm.getConfiguration();\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n-        scheduler.setInterval(1);\n-\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        int minute = (cal.get(Calendar.MINUTE) + 2) % 60;\n-        StringBuffer sched = new StringBuffer();\n-        sched.append(minute).append(' ');\n-        sched.append(\"* \");\n-        sched.append(\"* \");\n-        sched.append(\"* \");\n-        sched.append(\"* \");\n-        DummyCache cache = new DummyCache();\n-        scheduler.scheduleEviction(cache, sched.toString());\n-\n-        Thread thread = new Thread(scheduler);\n-        thread.setDaemon(true);\n-        thread.start();\n-        // test that it did not run yet...\n-        Thread.currentThread().sleep(90 * 1000); // 90 seconds\n-        assertEquals(0, cache.clearCount);\n-        // test that it ran...\n-        Thread.currentThread().sleep(45 * 1000); // 45 seconds\n-        assertEquals(1, cache.clearCount);\n-        // test that it wasn't too eager\n-        Thread.currentThread().sleep(50 * 1000); // 90 seconds\n-        assertEquals(1, cache.clearCount);\n-        scheduler.stop();\n-    }*/\n-\n-    /**\n-     * too slow *\n-     */\n-    /* public void XXXtestMonth()\n-        throws Exception {\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        int month = cal.get(Calendar.MONTH);\n-        int month2 = month + 1;\n-        if (month2 > 12)\n-            month2 = 1;\n-        doTest(\"* * \" + month + \" *\", \"* * \" + month2 + \" *\");\n-    }*/\n-\n-    /**\n-     * too slow *\n-     */\n-    /* public void XXXtestDayOfMonth()\n-        throws Exception {\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        int dom = cal.get(Calendar.DAY_OF_MONTH);\n-        doTest(\"* \" + dom + \" * *\", \"* \" + (dom % 12 + 1) + \" * *\");\n-    }*/\n-    public void testDayOfWeek()\n-        throws Exception {\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        int day = cal.get(Calendar.DAY_OF_WEEK);\n-        doTest(\"* * * \" + day, \"* * * \" + (day % 7 + 1));\n-    }\n-\n-    public void testHour()\n-        throws Exception {\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        int hour = cal.get(Calendar.HOUR_OF_DAY);\n-        doTest(hour + \" * * *\", ((hour + 1) % 24) + \" * * *\");\n-    }\n-\n-    /**\n-     * Pass in 4 out of 5 tokens.\n-     */\n-    private void doTest(String valid, String invalid)\n-        throws Exception {\n-\n-        OpenJPAEntityManagerFactory emf =\n-            (OpenJPAEntityManagerFactory) getEmf();\n-        OpenJPAConfiguration conf =\n-            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n-                .getConfiguration();\n-\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n-        scheduler.setInterval(1);\n-\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Date());\n-        String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\n-        DummyCache validCache = new DummyCache();\n-        scheduler.scheduleEviction(validCache, sched + valid);\n-        DummyCache invalidCache = new DummyCache();\n-        scheduler.scheduleEviction(invalidCache, sched + invalid);\n-        Thread thread = new Thread(scheduler);\n-        thread.setDaemon(true);\n-        thread.start();\n-        // test that it did not run yet...\n-        Thread.currentThread().sleep(70 * 1000); // 70 seconds\n-        scheduler.stop();\n-//        assertEquals(2, validCache.clearCount);\n-        assertTrue(\"Wrong invocation count: \" + validCache.clearCount,\n-            validCache.clearCount == 1 || validCache.clearCount == 2);\n-        assertEquals(0, invalidCache.clearCount);\n-    }\n-\n-    private class DummyCache extends ConcurrentDataCache {\n-\n-        int clearCount = 0;\n-\n-        public void clear() {\n-            clearCount++;\n-        }\n-    }\n-}"},{"sha":"5d79d02506d6dbd217d95d524a24a8901cdf0fd2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -271,6 +271,28 @@ public void testEvictNonEntity() {\n             // expected exception\n         }\n     }\n+    \n+    public void testIllegalStateExceptionAfterClose() { \n+        emf.close();\n+        try {\n+            emf.getCache();\n+            fail(\"Expected IllegalStateException\");\n+        }\n+        catch(IllegalStateException ise) {\n+            // expected\n+        }\n+    }\n+    public void testIllegalStateExceptionGetAfterClose() {\n+        emf.getCache();  // populate the EntityManagerFactoryImpl's wrapper for the StoreCache.\n+        emf.close();\n+        try {\n+            emf.getCache();\n+            fail(\"Expected IllegalStateException\");\n+        }\n+        catch(IllegalStateException ise) {\n+            // expected\n+        }\n+    }\n \n     /**\n      * Convenience method. Asserts that the class & primary key do exist in the cache"},{"sha":"b71144740e712211b1562c1540bc974a88a1c893","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detach;\n+\n+import java.io.Serializable;\n+import java.sql.Date;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Table(name=\"Entity20_detach\")\n+public class Entity20 implements Serializable {\n+    \n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    private Integer id;\n+    \n+    @Column(name = \"sqldate\" ) \n+    @Temporal(TemporalType.DATE) \n+    private Date sqlDate; \n+\n+    @Column(name = \"sqltime\") \n+    @Temporal(TemporalType.TIME)\n+    private Time sqlTime; \n+\n+    @Column(name = \"sqltimestamp\") \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Timestamp sqlTimestamp; \n+\n+    private String name;\n+\n+    public Entity20() {\n+    }\n+    \n+    public Entity20(int id) {\n+        this.id = new Integer(id);\n+        this.name = this.id.toString();\n+        Long time = System.currentTimeMillis();\n+        this.sqlTime = new Time(time);\n+        this.sqlDate = new Date(time);\n+        this.sqlTimestamp = new Timestamp(time);\n+    }\n+    \n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setDate(Date d) {\n+        sqlDate = d;\n+    }\n+    \n+    public Date getDate() {\n+        return sqlDate;\n+    }\n+    \n+    public void setTime(Time t) {\n+        sqlTime = t;\n+    }\n+    \n+    public Time getTime() {\n+        return sqlTime;\n+    }\n+    \n+    public void setTimestamp(Timestamp t) {\n+        sqlTimestamp = t;\n+    }\n+    \n+    public Timestamp getTimestamp() {\n+        return sqlTimestamp;\n+    }\n+}"},{"sha":"b2faf88d8d90561bec7d2fc612f5795ac3b3e17b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","status":"added","additions":292,"deletions":0,"changes":292,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,292 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detach;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachNoProxy extends SingleEMFTestCase {\n+    \n+    private static final int numEntities = 3;\n+    private static final String PROXY = new String(\"$proxy\");\n+    private Log log;\n+    \n+    public void setUp() {\n+        setUp(DROP_TABLES, Entity20.class);\n+        log = emf.getConfiguration().getLog(\"test\");\n+        \n+        // check and set Compatibility values to new 2.0 values\n+        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n+        assertNotNull(compat);\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Before set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"Before set, CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"Before set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+        compat.setFlushBeforeDetach(false);\n+        compat.setCopyOnDetach(false);\n+        compat.setCascadeWithDetach(false);\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"After set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"After set, CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"After set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+        createEntities(numEntities);\n+    }\n+    \n+    private void createEntities(int count) {\n+        Entity20 e20 = null;\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        for (int i=0; i<count; i++) {\n+            e20 = new Entity20(i);\n+            em.persist(e20);\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+    /* \n+     * Verify that an in-place detached entity does not use the proxy classes.\n+     */\n+    public void testDetach() {\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetach() *****\");\n+        Integer id = new Integer(0);\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        em.clear();\n+        Entity20 e20 = em.find(Entity20.class, id);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after find\");\n+        assertTrue(em.contains(e20));\n+        assertFalse(em.isDetached(e20));\n+        verifySerializable(e20, true, false);\n+        \n+        // new openjpa-2.0.0 behavior, where detach() doesn't return updated entity, but does it in-place\n+        em.detach(e20);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after detach\");\n+        // in-place updated entity should not have any proxy classes and should be detached\n+        assertFalse(em.contains(e20));\n+        assertTrue(em.isDetached(e20));\n+        verifySerializable(e20, false, false);\n+               \n+        em.close();\n+    }\n+\n+    /* \n+     * Verify that a detachCopy() returned entity does not contain any proxy classes.\n+     */\n+    public void testDetachCopy() {\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetachCopy() *****\");\n+        Integer id = new Integer(0);\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.clear();\n+\n+        Entity20 e20 = em.find(Entity20.class, id);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after find\");\n+        assertTrue(em.contains(e20));\n+        assertFalse(em.isDetached(e20));\n+        verifySerializable(e20, true, false);\n+        \n+        // Test new detachCopy() method added in 2.0.0\n+        Entity20 e20copy = em.detachCopy(e20);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after detachCopy\");\n+        // verify e20 is same as above\n+        assertTrue(em.contains(e20));\n+        assertFalse(em.isDetached(e20));\n+        verifySerializable(e20, true, false);\n+        // verify copy does not have any proxy classes (in-place updated) is detached\n+        assertFalse(em.contains(e20copy));\n+        assertTrue(em.isDetached(e20copy));\n+        verifySerializable(e20copy, false, false);\n+        \n+        em.close();\n+    }\n+\n+    /*\n+     * Verify that in-place detachAll entities do not use the proxy classes.\n+     */\n+    public void testDetachAll() {\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetachAll() *****\");\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n+            verifySerializable(e20, true, false);            \n+        }\n+\n+        // new openjpa-2.0.0 behavior, where detachAll() updates entities in-place\n+        // ArrayList<Entity20> e20ListCopy = new ArrayList<Entity20>(em.detachAll(e20List));\n+        // em.detachAll(e20List);   // for some reason calling with Collection causes a NPE, so use Object[] instead\n+        em.detachAll(e20List.get(0), e20List.get(1), e20List.get(2));\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after EM.detachAll() verify e20List(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            // entity should not have any proxy classes (in-place updated) and is detached\n+            assertFalse(em.contains(e20));\n+            assertTrue(em.isDetached(e20));\n+            verifySerializable(e20, false, false);\n+        }\n+\n+        em.close();\n+    }\n+\n+    /*\n+     * Verify that after EM.clear() entities still contain proxy classes.\n+     */\n+    public void testClear() {\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testClear() *****\");\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n+            verifySerializable(e20, true, false);            \n+        }\n+\n+        em.clear();\n+\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            assertFalse(em.contains(e20));\n+            assertTrue(em.isDetached(e20));\n+            // entity should still have proxy classes and is detached,\n+            // Old 1.2.x Behavior -\n+            //   the $proxy classes are not removed during serialization\n+            // verifySerializable(e20, true, true);\n+            // OPENJPA-1097 New behavior - $proxy classes are removed\n+            verifySerializable(e20, true, false);\n+        }\n+\n+        em.close();\n+    }\n+\n+    /**\n+     * Test that the entity is/is not using our $proxy classes before\n+     * and after serialization.\n+     *\n+     * @param e20 Entity to test.\n+     * @param usesProxyBefore verify that the entity uses the $proxy classes\n+     *        before serialization if true and does not if false.\n+     * @param usesProxyAfter verify that the entity uses the $proxy classes\n+     *        after serialization if true and does not if false.\n+     */\n+    private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n+            boolean usesProxyAfter) {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = null;\n+        byte[] e20bytes = null;\n+        \n+        if (log.isTraceEnabled())\n+            log.trace(\"verifySerializable() - before serialize\");\n+        verifyEntities(e20, usesProxyBefore);\n+\n+        // first serialize\n+        try {\n+            oos = new ObjectOutputStream(baos);\n+            oos.writeObject(e20);\n+            e20bytes = baos.toByteArray();\n+        } catch (IOException e) {\n+            fail(e.toString());\n+        } finally {\n+            try {\n+                if (oos != null)\n+                    oos.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+        \n+        // then deserialize and assert no $proxy classes exist\n+        ByteArrayInputStream bais = new ByteArrayInputStream(e20bytes);\n+        ObjectInputStream ois = null;\n+        Entity20 e20new = null;\n+        try {\n+            ois = new ObjectInputStream(bais);\n+            e20new = (Entity20) ois.readObject();\n+            if (log.isTraceEnabled())\n+                log.trace(\"verifySerializable() - after deserialize\");\n+            verifyEntities(e20new, usesProxyAfter);\n+        } catch (IOException e) {\n+            fail(e.toString());\n+        } catch (ClassNotFoundException e) {\n+            fail(e.toString());\n+        } finally {\n+            try {\n+                if (ois != null)\n+                    ois.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+\n+    }\n+\n+    private void verifyEntities(Entity20 e20, boolean usesProxy) {\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"verifyEntities() - asserting expected proxy usage is \" + usesProxy);\n+            printClassNames(e20);\n+        }\n+        assertTrue(\"Expected sqlDate endsWith($proxy) to return \" + usesProxy,\n+            usesProxy == e20.getDate().getClass().getCanonicalName().endsWith(PROXY));\n+        assertTrue(\"Expected sqlTime endsWith($proxy) to return \" + usesProxy,\n+            usesProxy == e20.getTime().getClass().getCanonicalName().endsWith(PROXY));\n+        assertTrue(\"Expected sqlTimestamp endsWith($proxy) to return \" + usesProxy,\n+            usesProxy == e20.getTimestamp().getClass().getCanonicalName().endsWith(PROXY));\n+        \n+    }\n+    \n+    private void printClassNames(Entity20 e20) {\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n+            log.trace(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n+            log.trace(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n+        }\n+    }\n+}"},{"sha":"e568f436bc883a6790e9ad3bd2fe5f1fbbea4f6d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -51,8 +51,8 @@\n  *\n  */\n public class TestDetach extends SingleEMFTestCase {\n-    private OpenJPAEntityManager em;\n-    private DMCustomer root;\n+    OpenJPAEntityManager em;\n+    DMCustomer root;\n     \n     public void setUp() {\n         super.setUp(DMCustomer.class, DMCustomerInventory.class, DMItem.class,"},{"sha":"99dc6d5c3b3c81011bdd50af5519f55201d685d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomer;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomerInventory;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMItem;\n+\n+public class TestDetachLite extends TestDetach {\n+    public void setUp() {\n+        super.setUp(\n+            \"openjpa.DetachState\", \"loaded(LiteAutoDetach=true)\", \n+            DMCustomer.class, DMCustomerInventory.class, DMItem.class, \n+            CLEAR_TABLES\n+            );\n+\n+        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n+        compat.setCopyOnDetach(false);\n+        compat.setFlushBeforeDetach(false);\n+        em = emf.createEntityManager();\n+        root = createData();\n+    }\n+\n+    public void testCloseDetach() {\n+        root = em.merge(root);\n+        PersistenceCapable pc = (PersistenceCapable) root;\n+        assertFalse(pc.pcIsDetached());\n+        em.close();\n+        assertTrue(pc.pcIsDetached());\n+        // Make sure everything is detached and we can still use the Entity\n+        for (DMCustomerInventory c : root.getCustomerInventories()) {\n+            pc = (PersistenceCapable) c;\n+            assertTrue(pc.pcIsDetached());\n+            pc = (PersistenceCapable) c.getItem();\n+            assertTrue(pc.pcIsDetached());\n+\n+        }\n+    }\n+}"},{"sha":"b46deb4ce3badc5cc071d09bcefb6fe3f7fc7308","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n \n @Entity \n public class DMCustomer {\n@@ -35,6 +36,8 @@\n     private String firstName;    \n     private String lastName;    \n \n+    @Version int version;\n+    \n     @OneToMany(mappedBy=\"customer\", \n             fetch=FetchType.EAGER,\n             cascade=CascadeType.ALL)"},{"sha":"cb3dd8c58d10a9c685b00cc7555b21b061659ff9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n \n @Entity\n public class DMCustomerInventory  {\n@@ -37,6 +38,8 @@\n     @ManyToOne(cascade=MERGE)\n     @JoinColumn(name=\"CI_CUSTOMERID\")\n     private DMCustomer customer;\n+    \n+    @Version int version;\n \n     public DMCustomerInventory() {\n     }"},{"sha":"ba22b9d553c878e0d0c56bb52c2600bb8752c643","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -20,12 +20,15 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Version;\n \n @Entity\n public class DMItem {\n     private static long idCounter = System.currentTimeMillis();\t\n     @Id private long id = idCounter++;\n \n+    @Version int version;\n+    \n     private String name;\n     private double price;\n "},{"sha":"f0b2036b628f97f1e30c1db5bf7311f7a81c61f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity(name=\"D_F_Employee\")\n+@Table(name=\"D_F_EMPLOYEE\")\n+@DiscriminatorValue(value=\"E\")\n+public class Employee extends Person {\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    private Manager manager;\n+\n+    public Manager getManager() {\n+        return manager;\n+    }\n+\n+    public void setManager(Manager manager) {\n+        this.manager = manager;\n+    } \n+\n+}"},{"sha":"ddc48738849b011aa89f86503f2f3f12ba96101f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity(name=\"D_F_Manager\")\n+@Table(name=\"D_F_MANAGER\")\n+@DiscriminatorValue(value=\"M\")\n+public class Manager extends Person {\n+    @OneToMany(fetch=FetchType.LAZY,mappedBy=\"manager\")\n+    Collection<Employee> employees;\n+\n+    public Collection<Employee> getEmployees() {\n+        return employees;\n+    }\n+\n+    public void setEmployees(Collection<Employee> employees) {\n+        this.employees = employees;\n+    }\n+}"},{"sha":"defe5af1028a3cbb1d46f6b7bd1c5714a156a774","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+\n+@Entity(name=\"D_F_Person\")\n+@Table(name=\"D_F_PERSON\")\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@DiscriminatorValue(value=\"P\")\n+public abstract class Person {\n+    @Id\n+    private int id;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"16dfe8bfab54410a8d002017fb3f6bc7932ed291","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestLazyFetch extends PersistenceTestCase {\n+    private static int N_EMPS = 3;\n+\n+    public EntityManagerFactory newEmf() {\n+        EntityManagerFactory emf = createEMF(Person.class, Employee.class, Manager.class);\n+        assertNotNull(\"Unable to create EntityManagerFactory\", emf);\n+        return emf;\n+    }\n+\n+    public void setUp() {\n+        EntityManagerFactory emf = newEmf();\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        // cleanup from previous execution\n+        tran.begin();\n+        em.createQuery(\"Delete from D_F_Manager\").executeUpdate();\n+        em.createQuery(\"Delete from D_F_Employee\").executeUpdate();\n+        tran.commit();\n+\n+        // populate a small graph.\n+        tran.begin();\n+        Manager m = new Manager();\n+        m.setId(10);\n+        m.setEmployees(new HashSet<Employee>());\n+        em.persist(m);\n+\n+        Employee e;\n+        for (int i = 0; i < N_EMPS; i++) {\n+            e = new Employee();\n+            e.setId(i + 1);\n+            e.setManager(m);\n+            m.getEmployees().add(e);\n+            em.persist(e);\n+        }\n+        tran.commit();\n+\n+        em.close();\n+        emf.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFetchOneSideFirst() {\n+        EntityManagerFactory emf = newEmf();\n+        EntityManager em = emf.createEntityManager();\n+\n+        List<Manager> managers = em.createQuery(\"Select m from D_F_Manager m\").getResultList();\n+        assertEquals(1, managers.size());\n+        Manager m = managers.get(0);\n+        \n+        List<Employee> emps = em.createQuery(\"Select e from D_F_Employee e\").getResultList();\n+        assertEquals(N_EMPS, emps.size());\n+        \n+        for(Employee e : emps) { \n+            assertNotNull(e.getManager());\n+            assertTrue(m.getEmployees().contains(e));\n+            assertEquals(m, e.getManager());\n+        }\n+        em.close();\n+        emf.close();\n+    }   \n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testFetchManySideFirst() {\n+        EntityManagerFactory emf = newEmf();\n+        EntityManager em = emf.createEntityManager();\n+        \n+        List<Employee> emps = em.createQuery(\"Select e from D_F_Employee e\").getResultList();\n+        assertEquals(N_EMPS, emps.size());\n+        \n+        List<Manager> managers = em.createQuery(\"Select m from D_F_Manager m\").getResultList();\n+        assertEquals(1, managers.size());\n+        Manager m = managers.get(0);\n+        \n+        for(Employee e : emps) { \n+            assertNotNull(e.getManager());\n+            assertTrue(m.getEmployees().contains(e));\n+            assertEquals(m, e.getManager());\n+        }\n+        em.close();\n+        emf.close();\n+    }\n+}"},{"sha":"efb20dbdb7b3110bfbefd2e68543dee3913fa0ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -284,6 +284,12 @@ public void createEntityA_Coll_String() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();\n         createEntityA_Coll_String(em, ID);\n+        \n+        EntityB1 b = new EntityB1();\n+        b.setId(ID);\n+        b.setName(\"b\" + ID);\n+        em.persist(b);\n+        \n         tran.begin();\n         em.flush();\n         tran.commit();\n@@ -1329,6 +1335,33 @@ public void queryEntityA_Coll_String() {\n             }\n             em.clear();\n         }\n+        \n+        String[] queryWithParameters = {\n+                \"select b.name from \" + \n+                    \"EntityB1 b \" + \n+                    \"WHERE b.id in \" + \n+                    \"(select a.id FROM EntityA_Coll_String a where ?1 MEMBER OF a.nickNames)\",\n+                \"select b.name from \" + \n+                    \"EntityB1 b \" + \n+                    \"WHERE b.id not in \" + \n+                    \"(select a.id FROM EntityA_Coll_String a where ?1 MEMBER OF a.nickNames)\"\n+        };\n+            \n+        for (int i = 0; i < queryWithParameters.length; i++) {\n+            Query q1 = em.createQuery(queryWithParameters[i]);\n+            q1.setParameter(1, \"nickName_10\");\n+            rs = q1.getResultList();\n+            switch (i) {\n+            case 0:\n+                String obj = (String)rs.get(0);\n+                assertEquals(\"b1\", obj);\n+                break;\n+            case 1:\n+                assertTrue(rs.size() == 0);\n+                break;\n+            }\n+        }        \n+        \n         EntityTransaction tran = em.getTransaction();\n         tran.begin();\n         Query q = em.createQuery(\"select a from EntityA_Coll_String a\");"},{"sha":"10fd508e48af79141f1978541ecb4a2c3b098242","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestJoinTableStrategy.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestJoinTableStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestJoinTableStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestJoinTableStrategy.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.inheritance.entity.Department;\r\n+import org.apache.openjpa.persistence.inheritance.entity.Employee;\r\n+import org.apache.openjpa.persistence.inheritance.entity.FTEmployee;\r\n+import org.apache.openjpa.persistence.inheritance.entity.PTEmployee;\r\n+import org.apache.openjpa.persistence.inheritance.entity.Manager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Originally reported in the context of entities of a inheritance hierarchy with\r\n+ * JOIN_TABLE strategy.\r\n+ * \r\n+ * <A HREF=\"http://issues.apache.org/jira/browse/OPENJPA-1536\">OPENJPA-1536</A>\r\n+ * \r\n+ * @author Jody Grassel\r\n+ * @author Fay Wang\r\n+ * \r\n+ */\r\n+public class TestJoinTableStrategy extends SingleEMFTestCase {\r\n+\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Department.class, Employee.class,\r\n+\t\t\t\tPTEmployee.class, FTEmployee.class, Manager.class);\r\n+\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+        Manager m = new Manager();\r\n+        m.setId(1);\r\n+        m.setFirstName(\"mf1\");\r\n+        m.setLastName(\"ml1\");\r\n+        m.setSalary(1000000);\r\n+        m.setVacationDays(20);\r\n+                \r\n+        Department d = new Department();\r\n+        d.setId(1);\r\n+        d.setDepartmentName(\"d1\");\r\n+        d.setDepartmentManager(m);\r\n+        m.setDepartment(d);\r\n+        \r\n+        Employee e1 = new Employee();\r\n+        e1.setId(2);\r\n+        e1.setFirstName(\"ef1\");\r\n+        e1.setLastName(\"el1\");\r\n+        e1.setDepartment(d);\r\n+        e1.setManager(m);\r\n+        e1.setVacationDays(20);\r\n+        \r\n+        em.persist(m);\r\n+        em.persist(d);\r\n+        em.persist(e1);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void tearDown() {\r\n+\t\t// problem deleting table in MySQL\r\n+\t}\r\n+\r\n+\tpublic void testFindEntity() {\r\n+\t\tEntityManager em1 = emf.createEntityManager();\r\n+        Manager m = em1.find(Manager.class, 1);\r\n+        assertNotNull(m);\r\n+\t\tem1.close();\r\n+\t}\r\n+}\r"},{"sha":"4bf596c4cab94ac25874dd9c09266e7e78062836","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Department.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Department.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Department.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+/**\r\n+ * Test case and domain classes were originally part of the reported issue\r\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-1536\">OPENJPA-1536</A>\r\n+ *  \r\n+ * @author Jody Grassel\r\n+ * @author Fay Wang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"CDepartment\")\r\n+public class Department {\r\n+    @Id\r\n+    private int id;\r\n+    \r\n+    private String departmentName;\r\n+    \r\n+    @ManyToOne\r\n+    private Manager departmentManager;\r\n+    \r\n+    @OneToMany(mappedBy=\"department\")\r\n+    private List<Employee> employeeList;\r\n+\r\n+    public Department() {\r\n+        this.employeeList = new ArrayList<Employee>();\r\n+    }\r\n+    \r\n+    public Department(int id, String departmentName) {\r\n+        this.employeeList = new ArrayList<Employee>();\r\n+        this.id = id;\r\n+        this.departmentName = departmentName;\r\n+    }\r\n+    \r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getDepartmentName() {\r\n+        return departmentName;\r\n+    }\r\n+\r\n+    public void setDepartmentName(String departmentName) {\r\n+        this.departmentName = departmentName;\r\n+    }\r\n+\r\n+    public Manager getDepartmentManager() {\r\n+        return departmentManager;\r\n+    }\r\n+\r\n+    public void setDepartmentManager(Manager departmentManager) {\r\n+        this.departmentManager = departmentManager;\r\n+    }\r\n+\r\n+    public List<Employee> getEmployeeList() {\r\n+        return employeeList;\r\n+    }\r\n+\r\n+\r\n+}\r"},{"sha":"5dc26a726fcc9353b0d8afcfbf205b2f244eeb8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Employee.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Employee.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.DiscriminatorType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Test case and domain classes were originally part of the reported issue\r\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-1536\">OPENJPA-1536</A>\r\n+ *  \r\n+ * @author Jody Grassel\r\n+ * @author Fay Wang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"CEmployee\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@DiscriminatorColumn(name=\"EMP_TYPEL\", discriminatorType=DiscriminatorType.INTEGER)\r\n+public class Employee {\r\n+    \r\n+    @Id\r\n+    private int id;\r\n+    \r\n+    private String lastName;\r\n+    private String firstName;\r\n+\r\n+    private int vacationDays;\r\n+    \r\n+    @ManyToOne\r\n+    private Manager manager;\r\n+    \r\n+    @ManyToOne\r\n+    private Department department;\r\n+    \r\n+    @Version\r\n+    private long version;\r\n+    \r\n+    private transient String str = null;\r\n+    \r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+        str = null;\r\n+    }\r\n+\r\n+    public String getLastName() {\r\n+        return lastName;\r\n+    }\r\n+\r\n+    public void setLastName(String lastName) {\r\n+        this.lastName = lastName;\r\n+        str = null;\r\n+    }\r\n+\r\n+    public String getFirstName() {\r\n+        return firstName;\r\n+    }\r\n+\r\n+    public void setFirstName(String firstName) {\r\n+        this.firstName = firstName;\r\n+        str = null;\r\n+    }\r\n+\r\n+    public int getVacationDays() {\r\n+        return vacationDays;\r\n+    }\r\n+\r\n+    public void setVacationDays(int vacationDays) {\r\n+        this.vacationDays = vacationDays;\r\n+        str = null;\r\n+    }\r\n+\r\n+    public Manager getManager() {\r\n+        return manager;\r\n+    }\r\n+\r\n+    public void setManager(Manager manager) {\r\n+        this.manager = manager;\r\n+        str = null;\r\n+    }\r\n+\r\n+    public Department getDepartment() {\r\n+        return department;\r\n+    }\r\n+\r\n+    public void setDepartment(Department department) {\r\n+        this.department = department;\r\n+        str = null;\r\n+    }\r\n+\r\n+    public long getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+\r\n+}\r"},{"sha":"48202ea9256e6e40797266cff6ba3164d9f39ba2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/FTEmployee.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/FTEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/FTEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/FTEmployee.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Test case and domain classes were originally part of the reported issue\r\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-1536\">OPENJPA-1536</A>\r\n+ *  \r\n+ * @author Jody Grassel\r\n+ * @author Fay Wang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"2\")\r\n+public class FTEmployee extends Employee {\r\n+    private double salary;\r\n+\r\n+    public double getSalary() {\r\n+        return salary;\r\n+    }\r\n+\r\n+    public void setSalary(double salary) {\r\n+        this.salary = salary;\r\n+    }\r\n+\r\n+\r\n+}\r"},{"sha":"4802685d129fb3eba36caf2e6c00bfd44df298a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Manager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Manager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Manager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Manager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+/**\r\n+ * Test case and domain classes were originally part of the reported issue\r\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-1536\">OPENJPA-1536</A>\r\n+ *  \r\n+ * @author Jody Grassel\r\n+ * @author Fay Wang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"3\")\r\n+public class Manager extends FTEmployee {\r\n+    @OneToMany(mappedBy=\"manager\")\r\n+    private List<Employee> managesList;\r\n+\r\n+    public List<Employee> getManagesList() {\r\n+        return managesList;\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        String str = super.toString();\r\n+        return \"Manager \" + str;\r\n+    }\r\n+\r\n+}\r"},{"sha":"f472e0851411af5410c23f266520d43058c3f56d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/PTEmployee.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/PTEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/PTEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/PTEmployee.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Test case and domain classes were originally part of the reported issue\r\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-1536\">OPENJPA-1536</A>\r\n+ *  \r\n+ * @author Jody Grassel\r\n+ * @author Fay Wang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"1\")\r\n+public class PTEmployee extends Employee {\r\n+    private float hourlyWage;\r\n+    \r\n+    public PTEmployee() {\r\n+        super();\r\n+    }\r\n+    \r\n+    public float getHourlyWage() {\r\n+        return hourlyWage;\r\n+    }\r\n+\r\n+    public void setHourlyWage(float hourlyWage) {\r\n+        this.hourlyWage = hourlyWage;\r\n+    }\r\n+\r\n+}\r"},{"sha":"4810ff096b8951dac5d9c4efeb31a8aec8fa33bb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.awt.Point;\n+\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.persistence.Persistent;\n+import org.apache.openjpa.persistence.jdbc.Strategy;\n+\n+\n+/**\n+ * Same as EmbedValue but no blobs for suitable use as key/value/element\n+ * in oracle.\n+ */\n+@Embeddable\n+public class EmbedValue3 {\n+\n+    @Basic\n+    @Column(name = \"EMB_BASIC\")\n+    protected String basic;\n+\n+    @Basic\n+    @Column(name = \"EMB_INTBASIC\")\n+    protected int intBasic;\n+    \n+    @Persistent\n+    @Strategy(\"PointHandler\")\n+    @Column(name=\"my_point\")\n+    private Point point;\n+\n+\n+    public void setBasic(String basic) {\n+        this.basic = basic;\n+    }\n+\n+    public String getBasic() {\n+        return basic;\n+    }\n+\n+    public void setIntBasic(int intBasic) {\n+        this.intBasic = intBasic;\n+    }\n+\n+    public int getIntBasic() {\n+        return intBasic;\n+    }\n+\n+    public Point getPoint() { \n+        return point; \n+    }\n+    \n+    public void setPoint(Point point) { \n+        this.point = point; \n+    }\n+\n+}"},{"sha":"088fe51a3a00253dda81a017b7aca391277b75f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.persistence.CollectionTable;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+\n+\n+@Entity\n+@Table(name = \"NONSTD_ENTITY3\")\n+public class NonstandardMappingEntity3 {\n+    @Id\n+    private long id;\n+    \n+    @ElementCollection(fetch=FetchType.EAGER)\n+    @CollectionTable(name=\"EmbedVal3s\")\n+    private List<EmbedValue3> embedVal3s = new ArrayList<EmbedValue3>();\n+\n+    @Embedded\n+    private EmbedValue3 embedVal3;\n+\n+    public long getId() { \n+        return id; \n+    }\n+    \n+    public void setId(long id) { \n+        this.id = id; \n+    }\n+   \n+    public List<EmbedValue3> getEmbedVal3s() { \n+        return embedVal3s; \n+    }\n+    \n+    public void setEmbedVal3s(List<EmbedValue3> embedVal3s) { \n+        this.embedVal3s = embedVal3s; \n+    }\n+\n+    public EmbedValue3 getEmbedVal3() { \n+        return embedVal3; \n+    }\n+    \n+    public void setEmbedVal3(EmbedValue3 embedVal3) { \n+        this.embedVal3 = embedVal3; \n+    }\n+}"},{"sha":"adf68fd598c9d43083eb40f69ece02c85989bb0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity4.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity4.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity4.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+\r\n+\r\n+@Entity\r\n+@Table(name = \"NONSTD_ENTITY4\")\r\n+public class NonstandardMappingEntity4 extends NonstandardMappingMappedSuper4 {\r\n+    @Id\r\n+    private long id;\r\n+    \r\n+    private String name;\r\n+    \r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+    \r\n+    public void setId(long id) { \r\n+        this.id = id; \r\n+    }\r\n+    \r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+   \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"ede6a8e3606cfd7bdb134b541b722a150089d786","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper4.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper4.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper4.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.awt.Point;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.*;\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+@MappedSuperclass\r\n+public abstract class NonstandardMappingMappedSuper4 {\r\n+\r\n+    @Persistent\r\n+    @Strategy(\"PointHandler\")\r\n+    @Column(name=\"my_point\")\r\n+    private Point point;\r\n+    \r\n+    public Point getPoint() { \r\n+        return point; \r\n+    }\r\n+    \r\n+    public void setPoint(Point point) { \r\n+        this.point = point; \r\n+    }\r\n+   \r\n+}\r"},{"sha":"5effef1cc01e5e7216a3fe0729598af8868981f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -26,7 +26,6 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.meta.JavaTypes;\n-import serp.util.Numbers;\n \n /**\n  * Handler for {@link Point}. This is a sample of how to create custom\n@@ -71,7 +70,7 @@ public Object toDataStoreValue(ValueMapping vm, Object val,\n             return null;\n \n         Point p = (Point) val;\n-        return new Object[]{ Numbers.valueOf(p.x), Numbers.valueOf(p.y) };\n+        return new Object[]{ p.x, p.y };\n     }\n \n     /**"},{"sha":"5f131af61cd32711ffe8aaec2c2ad3321312c4c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":69,"deletions":4,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -21,6 +21,8 @@\n import java.awt.*;\n import java.util.Map;\n \n+import javax.persistence.Query;\n+\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n@@ -45,9 +47,9 @@\n     private DBDictionary _dict;\n \n     public void setUp() {\n-        setUp(NonstandardMappingEntity.class, ExtensionsEntity.class,\n-            NonstandardMappingMappedSuper.class, EmbedValue2.class,\n-            EmbedValue.class,\n+        setUp(NonstandardMappingEntity.class, NonstandardMappingEntity3.class, ExtensionsEntity.class,\n+            NonstandardMappingMappedSuper.class, EmbedValue2.class, EmbedValue3.class,\n+            EmbedValue.class, NonstandardMappingEntity4.class, NonstandardMappingMappedSuper4.class, \n             CLEAR_TABLES, RETAIN_DATA);\n \n         // trigger complete resolution of metadata etc.\n@@ -277,4 +279,67 @@ public void testInsertAndRetrieveEmbeddedCollection() {\n         assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\n         em.close();\n     }\n-}\n+\n+    public void testInsertAndRetrieveEmbeddedObjectWithStrategy() {\n+        NonstandardMappingEntity3 pc = new NonstandardMappingEntity3();\n+        EmbedValue3 embed3 = new EmbedValue3();\n+        embed3.setBasic(\"basic\");\n+        Point point = new Point();\n+        point.setLocation(1, 2);\n+        embed3.setPoint(point);\n+        pc.getEmbedVal3s().add(embed3);\n+        pc.setEmbedVal3(embed3);\n+        pc.setId(1);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        Object pcId = em.getObjectId(pc);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(NonstandardMappingEntity3.class, pcId);\n+        assertEquals(1, pc.getEmbedVal3s().size());\n+        assertEquals(\"basic\", pc.getEmbedVal3s().get(0).getBasic());\n+        assertEquals(1.0, pc.getEmbedVal3s().get(0).getPoint().getX());\n+        assertEquals(2.0, pc.getEmbedVal3s().get(0).getPoint().getY());\n+        assertEquals(1.0, pc.getEmbedVal3().getPoint().getX());\n+        assertEquals(2.0, pc.getEmbedVal3().getPoint().getY());\n+        em.close();\n+    }\n+\n+    public void testInsertAndRetrieveMappedSuperWithStrategy() {\n+        NonstandardMappingEntity4 pc = new NonstandardMappingEntity4();\n+        Point point = new Point();\n+        point.setLocation(1, 2);\n+        pc.setPoint(point);\n+        pc.setId(1);\n+        pc.setName(\"name1\");\n+        \n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        Object pcId = em.getObjectId(pc);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(NonstandardMappingEntity4.class, pcId);\n+        assertEquals(\"name1\", pc.getName());\n+        assertEquals(1.0, pc.getPoint().getX());\n+        assertEquals(2.0, pc.getPoint().getY());\n+        \n+        for (int i = 0; i < 2; i++) {\n+            Query query = em.createQuery(\"select s from NonstandardMappingEntity4 s where s.point = :point\");\n+            query.setParameter(\"point\", new Point(1, 2));\n+            java.util.List<NonstandardMappingEntity4> list = query.getResultList();\n+            for (NonstandardMappingEntity4 pc1 : list) {\n+                assertEquals(1.0, pc1.getPoint().getX());\n+                assertEquals(2.0, pc1.getPoint().getY());\n+            }\n+            em.clear();\n+        }\n+        \n+        em.close();\n+    }}"},{"sha":"a472afa5922b47a8c35b58597afe7a1edb12d14e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","status":"modified","additions":66,"deletions":6,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -45,9 +45,9 @@\n     public int deptId = 1;\n     public int empId = 1;\n \n-    public List rsAllDepartment1 = null;\n-    public List rsAllDepartment2 = null;\n-    public List rsAllDepartment3 = null;\n+    public List<Department1> rsAllDepartment1 = null;\n+    public List<Department2> rsAllDepartment2 = null;\n+    public List<Department3> rsAllDepartment3 = null;\n \n     public void setUp() {\n         super.setUp(DROP_TABLES,\n@@ -65,6 +65,44 @@ public void setUp() {\n         rsAllDepartment3 = getAll(Department3.class);\n     }\n \n+    public void testHavingClauseWithEntityExpression() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        Employee1 e1 = em.find(Employee1.class, 1);\n+        em.clear();\n+        String query = \"select e from Department1 d, \" +\n+            \" in (d.empMap) e \" +\n+            \"group by e \" +\n+            \"having e = ?1\"; \n+        Query q = em.createQuery(query); \n+        q.setParameter(1, e1);\n+        List<Employee1> rs = (List<Employee1>) q.getResultList();\n+        Employee1 e2 = rs.get(0);\n+        assertEquals(e1.getEmpId(), e2.getEmpId());\n+\n+        em.clear();\n+        query = \"select e from Department1 d, \" +\n+            \" in (d.empMap) e \" +\n+            \"group by e \" +\n+            \"having e <> ?1\"; \n+        q = em.createQuery(query); \n+        q.setParameter(1, e1);\n+        rs = (List<Employee1>) q.getResultList();\n+        Employee1 e3 = rs.get(0);\n+        assertNotEquals(e1.getEmpId(), e3.getEmpId());\n+\n+        em.clear();\n+        query = \"select value(e) from Department1 d, \" +\n+            \" in (d.empMap) e \" +\n+            \"group by value(e) \" +\n+            \"having value(e) = ?1\"; \n+        q = em.createQuery(query); \n+        q.setParameter(1, e1);\n+        rs = (List<Employee1>) q.getResultList();\n+        Employee1 e4 = rs.get(0);\n+        assertEquals(e1.getEmpId(), e4.getEmpId());\n+        em.close();\n+    }\n+\n     @AllowFailure\n     public void testQueryInMemoryQualifiedId() throws Exception {\n         queryQualifiedId(true);\n@@ -74,7 +112,7 @@ public void testQueryQualifiedId() throws Exception {\n         queryQualifiedId(false);\n     }\n \n-    public void setCandidate(Query q, Class clz) \n+    public void setCandidate(Query q, Class<?> clz) \n         throws Exception {\n         org.apache.openjpa.persistence.QueryImpl q1 = \n             (org.apache.openjpa.persistence.QueryImpl) q;\n@@ -95,7 +133,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         Query q = em.createQuery(query);\n         if (inMemory) \n             setCandidate(q, Department1.class);\n-        List rs = q.getResultList();\n+        List<?> rs = q.getResultList();\n         Integer d = (Integer) rs.get(0);\n         \n         query = \"select KEY(e) from Department2 d, \" +\n@@ -113,6 +151,28 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n             setCandidate(q, Department3.class);\n         rs = q.getResultList();\n         EmployeeName3 d3 = (EmployeeName3) rs.get(0);\n+        \n+        // Check HAVING clause support for KEY\n+        query = \"select KEY(e) from Department1 d, \" +\n+        \" in (d.empMap) e \" +\n+        \"group by KEY(e) \" +\n+        \"having KEY(e) = 2\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Department1.class);\n+        rs = q.getResultList();\n+        Integer deptId = (Integer) rs.get(0);\n+        assertEquals(\"dept id is not 2\", 2, deptId.intValue());\n+        \n+        query = \"select KEY(e).lName from Department3 d, \" + \"in (d.emps) e \" + \"group by KEY(e).lName \"\n+                + \"having KEY(e).lName like 'l%'\";\n+        q = em.createQuery(query);\n+        if (inMemory)\n+            setCandidate(q, Department1.class);\n+        rs = q.getResultList();\n+        assertEquals(\"number of employees is not equal to numDepartments*numEmployeesPerDept\", numDepartments\n+                * numEmployeesPerDept, rs.size());\n+\n         em.close();\n     }\n \n@@ -141,7 +201,7 @@ public void createObj() {\n     public void createDepartment1(EntityManager em, int id) {\n         Department1 d = new Department1();\n         d.setDeptId(id);\n-        Map empMap = new HashMap();\n+        Map<Integer,Employee1> empMap = new HashMap<Integer,Employee1>();\n         for (int i = 0; i < numEmployeesPerDept; i++) {\n             Employee1 e = createEmployee1(em, empId++);\n             //d.addEmployee1(e);"},{"sha":"046558b06d0bc6349b90f0de0b300a8d9cdda322","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -26,6 +26,8 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n \n+import org.apache.openjpa.persistence.ExternalValues;\n+\n @Entity\n @DiscriminatorValue(\"BOOK\")\n public class Book extends Merchandise {\n@@ -34,8 +36,12 @@\n     @ManyToMany(fetch=FetchType.EAGER)\n     private Set<Author> authors;\n \n+    @ExternalValues({\"SMALL=S\", \"MEDIUM=M\", \"LARGE=L\"})\n+    private String token;\n+    \n     public Book() {\n         this(\"?\");\n+        token = \"MEDIUM\";\n     }\n     \n     public Book(String title) {\n@@ -62,4 +68,12 @@ public void addAuthor(Author a) {\n             a.addBook(this);\n         }\n     }\n+    \n+    public String getToken() {\n+        return token;\n+    }\n+    \n+    public void setToken(String t) {\n+        token = t;\n+    }\n }"},{"sha":"87d77aae68da89f41f947e09f601a604efeb1150","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+/**\n+ * A simple entity for a complex test.\n+ * This entity is used to test complex parameterization and reparametrization of Prepared Queries.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class OrderJPA {\n+    @Id\n+    long OrderId;\n+    int CustomerId;\n+    int DistrictId;\n+    int WarehouseId;\n+    \n+    \n+    public long getOrderId() {\n+        return OrderId;\n+    }\n+    public void setOrderId(long orderId) {\n+        OrderId = orderId;\n+    }\n+    public int getCustomerId() {\n+        return CustomerId;\n+    }\n+    public void setCustomerId(int customerId) {\n+        CustomerId = customerId;\n+    }\n+    public int getDistrictId() {\n+        return DistrictId;\n+    }\n+    public void setDistrictId(int districtId) {\n+        DistrictId = districtId;\n+    }\n+    public int getWarehouseId() {\n+        return WarehouseId;\n+    }\n+    public void setWarehouseId(int warehouseId) {\n+        WarehouseId = warehouseId;\n+    }\n+}"},{"sha":"478c5b9a1aed1cc82adca4503beb561d77400b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.lib.rop.ResultList;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+/**\n+ * Tests that we can detect if a query is using query parameters for fields whose values are externalized.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestExternalizedParameter extends TestCase {\n+    private static String RESOURCE = \"META-INF/persistence.xml\"; \n+    private static String UNIT_NAME = \"PreparedQuery\";\n+    private static EntityManagerFactory emf;\n+    \n+    public void setUp() throws Exception {\n+        if (emf == null) {\n+            Properties config = new Properties();\n+            config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+            config.put(\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n+            config.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n+            config.put(\"openjpa.Log\", \"SQL=WARN\");\n+            emf = OpenJPAPersistence.createEntityManagerFactory(UNIT_NAME, RESOURCE, config);\n+        }\n+    }\n+    \n+    public void testNoFalseAlarmOnExternalizedParameterDetection() {\n+        String jpql = \"select b from Book b where b.title=:title\";\n+        EntityManager em = emf.createEntityManager();\n+        QueryExpressions[] exps = getExpressions(em.createQuery(jpql)\n+                .setParameter(\"title\",\"XYZ\")\n+                .getResultList());\n+        assertNotNull(exps);\n+        \n+        assertFalse(isUsingExternalizedParameter(exps[0]));\n+    }\n+    \n+    public void testCanDetectExternalizedSingleParameterValue() {\n+        String jpql = \"select b from Book b where b.token=:token\";\n+        EntityManager em = emf.createEntityManager();\n+        QueryExpressions[] exps = getExpressions(em.createQuery(jpql)\n+                .setParameter(\"token\",\"MEDIUM\")\n+                .getResultList());\n+        assertNotNull(exps);\n+        \n+        assertTrue(isUsingExternalizedParameter(exps[0]));\n+    }\n+    \n+    public void testCanDetectExternalizedMixedParameterValue() {\n+        String jpql = \"select b from Book b where b.token=:token and b.title = :title\";\n+        EntityManager em = emf.createEntityManager();\n+        QueryExpressions[] exps = getExpressions(em.createQuery(jpql)\n+                .setParameter(\"token\",\"MEDIUM\")\n+                .setParameter(\"token\", \"LARGE\")\n+                .getResultList());\n+        assertNotNull(exps);\n+        \n+        assertTrue(isUsingExternalizedParameter(exps[0]));\n+    }\n+    \n+    public QueryExpressions[] getExpressions(List<?> result) {\n+        Object userObject = ((ResultList<?>)result).getUserObject();\n+        if (userObject == null || !userObject.getClass().isArray() || ((Object[])userObject).length != 2)\n+            return null;\n+        Object executor = ((Object[])userObject)[1];\n+        if (executor instanceof StoreQuery.Executor == false)\n+            return null;\n+        return ((StoreQuery.Executor)executor).getQueryExpressions();\n+    }\n+    \n+    boolean isUsingExternalizedParameter(QueryExpressions exp) {\n+        List<FieldMetaData> fmds = exp.getParameterizedFields();\n+        for (FieldMetaData fmd : fmds) {\n+            if (fmd.isExternalized())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+}"},{"sha":"4eaf391128ba1781dab779aeb907ececaabbeb1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":198,"deletions":4,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -47,6 +47,7 @@\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n import org.apache.openjpa.persistence.jdbc.sqlcache.Employee.Category;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n \n /**\n  * Tests correctness and performance of queries with and without Prepared Query Cacheing.\n@@ -171,8 +172,8 @@ void createTestData() {\n         CD     c1 = new CD(\"CD1\");\n         CD     c2 = new CD(\"CD2\");\n         \n-        b1.setId(id++);\n-        b2.setId(id++);\n+        b1.setId(id++); b1.setTitle(\"title-1\"); b1.setToken(\"LARGE\");\n+        b2.setId(id++); b2.setTitle(\"title-2\"); b2.setToken(\"MEDIUM\");\n         c1.setId(id++);\n         c2.setId(id++);\n         b1.addAuthor(a1);\n@@ -187,7 +188,24 @@ void createTestData() {\n         em.persist(b1); em.persist(b2);\n         em.persist(c1); em.persist(c2);\n \n-\t    em.getTransaction().commit();\n+        id = (int)System.currentTimeMillis();\n+        OrderJPA o1 = new OrderJPA();\n+        o1.setOrderId(id++);\n+        o1.setCustomerId(339);\n+        o1.setDistrictId(3);\n+        o1.setWarehouseId(23);\n+        \n+        OrderJPA o2 = new OrderJPA();\n+        o2.setOrderId(id++);\n+        o2.setCustomerId(2967);\n+        o2.setDistrictId(5);\n+        o2.setWarehouseId(22);\n+        \n+        em.persist(o1);\n+        em.persist(o2);\n+        \n+        \n+        em.getTransaction().commit();\n \t}\n \n \tpublic void tearDown() throws Exception {\n@@ -707,7 +725,8 @@ public void testQueryWithEagerRelationIsNotCached() {\n         assertFalse(book2.getAuthors().isEmpty());\n     }\n \n-    public void testQueryWithUserDefinedAndInternalParamtersInSubquery() {\n+    @AllowFailure(message=\"We have problems with reparametrization of subquery + constant literals\")\n+    public void xtestQueryWithUserDefinedAndInternalParamtersInSubquery() {\n         String jpql = \"Select a From Address a Where Not Exists (\"\n             + \"     Select s.id From Singer As s Where \"\n             + \"        s.address = a  And \"\n@@ -738,6 +757,8 @@ public void testQueryWithUserDefinedAndInternalParamtersInSubquery() {\n         try {\n             List jList1 = jQ1.getResultList();\n         } catch (Exception e) {\n+            System.err.println(jQ1.getParameters());\n+            e.printStackTrace();\n             fail(\"Fail to execute again - Parameters are messed up:\" + e.getMessage());\n         }\n     }\n@@ -807,6 +828,179 @@ public void testMultithreadedAccess() {\n         }\n     }\n     \n+    public void testParameterOnExternalizedFieldIsExcluded() {\n+        String jpql = \"select b from Book b where b.title=:title and b.token=:token\";\n+        Query q1 = em.createQuery(jpql)\n+          .setParameter(\"title\", \"title-1\")\n+          .setParameter(\"token\", \"LARGE\");\n+        // default fetches authors eagerly and thus creates multiple SQL and hence not caches anyway\n+        OpenJPAPersistence.cast(q1).getFetchPlan().removeFetchGroup(\"default\");\n+        assertFalse(q1.getResultList().isEmpty());\n+        assertNotCached(jpql);\n+        Query q2 = em.createQuery(jpql)\n+                     .setParameter(\"title\", \"title-2\")\n+                     .setParameter(\"token\", \"MEDIUM\");\n+       assertFalse(q2.getResultList().isEmpty());\n+    }\n+    \n+    public void testNoParameterOnExternalizedFieldIsIncluded() {\n+        String jpql = \"select b from Book b where b.title=:title\";\n+        Query q1 = em.createQuery(jpql)\n+          .setParameter(\"title\", \"title-1\");\n+        // default fetches authors eagerly and thus creates multiple SQL and hence not caches anyway\n+        OpenJPAPersistence.cast(q1).getFetchPlan().removeFetchGroup(\"default\");\n+        assertFalse(q1.getResultList().isEmpty());\n+        assertCached(jpql);\n+        Query q2 = em.createQuery(jpql)\n+                     .setParameter(\"title\", \"title-2\");\n+       assertFalse(q2.getResultList().isEmpty());\n+    }\n+    \n+    public void testRepeatedParameterInSubqueryInDifferentOrder() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                                   +  \"where ((o1.CustomerId = :customerId) \" \n+                                   +  \"and   (o1.DistrictId = :districtId) \" \n+                                   +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                    +  \"and (o.CustomerId = :customerId) \"\n+                    +  \"and (o.WarehouseId = :warehouseId) \"\n+                    +  \"and (o.DistrictId = :districtId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testRepeatedParameterInSubqueryInSameOrder() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                             +  \"where ((o1.CustomerId = :customerId) \" \n+                             +  \"and   (o1.DistrictId = :districtId) \" \n+                             +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                        +  \"and (o.CustomerId = :customerId) \"\n+                        +  \"and (o.DistrictId = :districtId) \"\n+                        +  \"and (o.WarehouseId = :warehouseId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testPartiallyRepeatedParameterInSubquery() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                             +  \"where ((o1.CustomerId = :customerId) \" \n+                             +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                        +  \"and (o.CustomerId = :customerId) \"\n+                        +  \"and (o.DistrictId = :districtId) \"\n+                        +  \"and (o.WarehouseId = :warehouseId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testPartiallyRepeatedParameterInMainquery() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                             +  \"where ((o1.CustomerId = :customerId) \" \n+                             +  \"and   (o1.DistrictId = :districtId) \" \n+                             +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                        +  \"and (o.CustomerId = :customerId) \"\n+                        +  \"and (o.WarehouseId = :warehouseId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+\n+    public void testRangeIsExcluded() {\n+        List<Company> l = null;\n+\n+        l = getAllCompaniesPaged(0, 1);\n+        assertEquals(1, l.size());\n+        assertEquals(\"BEA\", l.get(0).getName());\n+        \n+        l = getAllCompaniesPaged(1, 1);\n+        assertEquals(1, l.size());\n+        assertEquals(\"IBM\", l.get(0).getName());\n+        \n+        l = getAllCompaniesPaged(2, 1);\n+        assertEquals(1, l.size());\n+        assertEquals(\"acme.org\", l.get(0).getName());\n+    }\n+\n+    public List<Company> getAllCompaniesPaged(int start, int max) {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select p from Company p order by p.name\");\n+        q.setFirstResult(start);\n+        q.setMaxResults(max);\n+        return (List<Company>) q.getResultList();\n+    }\n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();"},{"sha":"4ec37b043861ce8bb4f4050c8d9f93cd8ebe9111","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+/**\n+ * An entity using a Timestamp as Version field.\n+ * \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class NumericVersionedEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@Version\n+\tprivate int version;\n+\t\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic int getVersion() {\n+\t    return version;\n+\t}\n+\n+}"},{"sha":"9c57c00d7493d8f87a612225475cdd7a63ad0cff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests for update on entity that uses a Timestamp as version.\n+ * \n+ * @see <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-1583\">OPENJPA-1583</A>\n+ *     \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestTimestampVersion extends SingleEMFTestCase {\n+\tpublic void setUp() {\n+\t\tsuper.setUp(CLEAR_TABLES, TimestampedEntity.class, NumericVersionedEntity.class);\n+\t}\n+\n+    public void testBulkUpdateOnTimestampedVersion() {\n+        TimestampedEntity pc = new TimestampedEntity();\n+        pc.setName(\"Original\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        \n+        try {\n+            // delay to ensure the new timestamp exceeds the timer's resolution.\n+            Thread.sleep(100);\n+        } catch (InterruptedException e) {\n+        }\n+\n+        em.getTransaction().begin();\n+        Timestamp oldVersion = pc.getVersion();\n+        String jpql = \"UPDATE TimestampedEntity t SET t.name=:newname WHERE t.name=:oldname\";\n+        em.createQuery(jpql)\n+          .setParameter(\"newname\", \"Updated\")\n+          .setParameter(\"oldname\", \"Original\")\n+          .executeUpdate();\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        em.refresh(pc);\n+        Timestamp newVersion = pc.getVersion();\n+        assertTrue(newVersion.after(oldVersion));\n+    }\n+    \n+    public void testBulkUpdateOnNumericVersion() {\n+        NumericVersionedEntity pc = new NumericVersionedEntity();\n+        pc.setName(\"Original\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        int oldVersion = pc.getVersion();\n+        String jpql = \"UPDATE NumericVersionedEntity t SET t.name=:newname WHERE t.name=:oldname\";\n+        em.createQuery(jpql)\n+          .setParameter(\"newname\", \"Updated\")\n+          .setParameter(\"oldname\", \"Original\")\n+          .executeUpdate();\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        em.refresh(pc);\n+        int newVersion = pc.getVersion();\n+        assertEquals(newVersion, oldVersion+1);\n+    }\n+\n+\t\n+}"},{"sha":"599967ddcc306bd00a819622cfe2f64cea519f95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+/**\n+ * An entity using a Timestamp as Version field.\n+ * \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Table(name=\"TSENTITY\")\n+public class TimestampedEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@Version\n+\tprivate Timestamp version;\n+\t\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic Timestamp getVersion() {\n+\t    return version;\n+\t}\n+\n+}"},{"sha":"701be13e2829c3f6346f16cef94336321a2a6a53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.List;\n+\n+public interface IColumnEntity extends INameEntity {\n+\n+    public List<IOrderedEntity> getEntities();\n+\n+    public void setEntities(List<IOrderedEntity> columns);\n+\n+    public void addEntity(IOrderedEntity entity);\n+\n+    public IOrderedEntity removeEntity(IOrderedEntity entity);\n+}"},{"sha":"3beb8577c1cd1eef082233f1f21544896bd7cfdc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/INameEntity.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/INameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/INameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/INameEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+public interface INameEntity {\n+\n+    public int getId();\n+\n+    public void setId(int id);\n+\n+    public String getName();\n+\n+    public void setName(String name);\n+\n+    public String toString();\n+}"},{"sha":"a5a6750989516a8a53221269cbd435489ba2cab1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.List;\n+\n+\n+public interface IOrderedElements {\n+\n+    public int getId();\n+\n+    public void setId(int id);\n+\n+    public List<String> getListElements();\n+\n+    public void setListElements(List<String> elements);\n+\n+    public void addListElements(String element);\n+    \n+    public String removeListElements(int location);\n+    \n+    public void insertListElements(int location, String name);\n+\n+    public String toString();\n+}"},{"sha":"46e16d45502e0338695b2a93dbf663e2e40947ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.List;\n+\n+public interface IOrderedEntity {\n+\n+    public int getId();\n+\n+    public void setId(int id);\n+\n+    public List<INameEntity> getEntities();\n+\n+    public void setEntities(List<INameEntity> entities);\n+\n+    public void addEntity(INameEntity newElement);\n+\n+    public INameEntity removeEntity(int location);\n+    \n+    public void insertEntity(int location, INameEntity entity);\n+\n+    public String toString();\n+}"},{"sha":"cd19a0e7efb31af17b17d3ff9d90b7d4baecbfbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class OrderedElementEntity implements IOrderedElements, java.io.Serializable {\n+\n+    @Id\n+    private int id;\n+\n+    @ElementCollection\n+    @OrderColumn\n+    private List<String> elements;  \n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public List<String> getListElements() {\n+        return elements;\n+    }\n+\n+    public void setListElements(List<String> elements) {\n+        this.elements = elements;\n+    }\n+\n+    public void addListElements(String element) {\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n+        }\n+        elements.add(element);\n+    }\n+    \n+    public String removeListElements(int location) {\n+        String rtnVal = null;\n+        if( elements != null) {\n+            rtnVal = elements.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertListElements(int location, String name) {\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n+        }\n+        elements.add(location, name);\n+    }\n+\n+    public String toString() {\n+        return \"OrderedElementEntity[\" + id + \"]=\" + elements;\n+    }\n+}"},{"sha":"e407bb5a924442035c9a336d61d8584a87fb7800","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class OrderedManyToManyEntity implements IOrderedEntity, java.io.Serializable {\n+\n+    @Id\n+    private int id;\n+\n+    @ManyToMany\n+    @OrderColumn\n+    private List<INameEntity> entities;\n+\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public List<INameEntity> getEntities() {\n+        return entities;\n+    }\n+\n+    public void setEntities(List<INameEntity> entities) {\n+        this.entities = entities;\n+    }\n+\n+    public void addEntity(INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(entity);\n+    }\n+        \n+    public INameEntity removeEntity(int location) {\n+        INameEntity rtnVal = null;\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertEntity(int location, INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(location, entity);\n+    }\n+\n+    public String toString() {\n+        return \"OrderedManyToManyEntity[\" + id + \"]=\" + entities;\n+    }\n+}"},{"sha":"8208ed9b42e05ac815a873beef00c666abd70bf2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class OrderedNameEntity implements IColumnEntity, java.io.Serializable {\n+\n+    @Id\n+    private int id;\n+    \n+    private String name;\n+\n+    @ManyToMany\n+    @OrderColumn\n+    private List <IOrderedEntity> entities;\n+\n+    \n+    public OrderedNameEntity() {\n+    }\n+\n+    public OrderedNameEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return \"OrderedNameEntity[\" + id + \"]=\" + name;\n+    }\n+\n+    public List<IOrderedEntity> getEntities() {\n+        return entities;\n+    }\n+\n+    public void setEntities(List<IOrderedEntity> entities) {\n+        this.entities = entities;\n+    }\n+\n+    public void addEntity(IOrderedEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<IOrderedEntity>();\n+        }\n+        entities.add(entity);\n+    }\n+\n+    public IOrderedEntity removeEntity(IOrderedEntity entity) {\n+        IOrderedEntity rtnVal = null;\n+        if( entities != null) {\n+            if( entities.remove(entity) )\n+                rtnVal = entity;\n+        }\n+        return rtnVal;\n+    }\n+}"},{"sha":"e020f5ec4039202e31fddf33ab54c4158f3132e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class OrderedOneToManyEntity implements IOrderedEntity, java.io.Serializable {\n+\n+    @Id\n+    private int id;\n+\n+    @OneToMany\n+    @OrderColumn\n+    private List<INameEntity> entities;\n+\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public List<INameEntity> getEntities() {\n+        return entities;\n+    }\n+\n+    public void setEntities(List<INameEntity> names) {\n+        this.entities = names;\n+    }\n+\n+    public void addEntity(INameEntity name) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(name);\n+    }\n+        \n+    public INameEntity removeEntity(int location) {\n+        INameEntity rtnVal = null;\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertEntity(int location, INameEntity name) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(location, name);\n+    }\n+\n+    public String toString() {\n+        return \"OrderedOneToManyEntity[\" + id + \"]=\" + entities;\n+    }\n+}"},{"sha":"8894c57a945393776a31af6b3988f1af8e39fe08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/UnorderedNameEntity.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/UnorderedNameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/UnorderedNameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/UnorderedNameEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class UnorderedNameEntity implements INameEntity, java.io.Serializable {\n+\n+    @Id\n+    private int id;\n+    \n+    private String name;\n+\n+    \n+    public UnorderedNameEntity() {\n+    }\n+\n+    public UnorderedNameEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return \"UnorderedNameEntity[\" + id + \"]=\" + name;\n+    }\n+}"},{"sha":"161ac41209ccd34266f3bf9e2047dbbe9967a7d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class XMLOrderedElementEntity implements IOrderedElements, java.io.Serializable {\n+\n+    private int id;\n+\n+    private List<String> elements;  \n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public List<String> getListElements() {\n+        return elements;\n+    }\n+\n+    public void setListElements(List<String> elements) {\n+        this.elements = elements;\n+    }\n+\n+    public void addListElements(String element) {\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n+        }\n+        elements.add(element);\n+    }\n+    \n+    public String removeListElements(int location) {\n+        String rtnVal = null;\n+        if( elements != null) {\n+            rtnVal = elements.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertListElements(int location, String name) {\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n+        }\n+        elements.add(location, name);\n+    }\n+\n+    public String toString() {\n+        return \"XMLOrderedElementEntity[\" + id + \"]=\" + elements;\n+    }\n+}"},{"sha":"8fb4941c5c04b97a4addc6abdc9e46a1178f8884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class XMLOrderedManyToManyEntity implements IOrderedEntity, java.io.Serializable {\n+\n+    private int id;\n+\n+    private List<INameEntity> entities;\n+\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public List<INameEntity> getEntities() {\n+        return entities;\n+    }\n+\n+    public void setEntities(List<INameEntity> entities) {\n+        this.entities = entities;\n+    }\n+\n+    public void addEntity(INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(entity);\n+    }\n+    \n+    public INameEntity removeEntity(int location) {\n+        INameEntity rtnVal = null;\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertEntity(int location, INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(location, entity);\n+    }\n+\n+    public String toString() {\n+        return \"XMLOrderedManyToManyEntity[\" + id + \"]=\" + entities;\n+    }\n+}"},{"sha":"06db2e88465927cbb4d69888f3ed24b89c1b294e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OrderColumn;\n+\n+public class XMLOrderedNameEntity implements INameEntity, java.io.Serializable {\n+\n+    private int id;\n+    \n+    private String name;\n+\n+    @ManyToMany\n+    @OrderColumn\n+    private List <IColumnEntity> columns;\n+\n+\n+    public XMLOrderedNameEntity() {\n+    }\n+\n+    public XMLOrderedNameEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return \"XMLOrderedNameEntity[\" + id + \"]=\" + name;\n+    }\n+    \n+    public List<IColumnEntity> getColumns() {\n+        return columns;\n+    }\n+\n+    public void setColumns(List<IColumnEntity> columns) {\n+        this.columns = columns;\n+    }\n+\n+    public void addColumns(IColumnEntity column) {\n+        if( columns == null) {\n+            columns = new ArrayList<IColumnEntity>();\n+        }\n+        columns.add(column);\n+    }\n+\n+    public IColumnEntity removeColumns(IColumnEntity entity) {\n+        IColumnEntity rtnVal = null;\n+        if( columns != null) {\n+            if( columns.remove(entity) )\n+                rtnVal = entity;\n+        }\n+        return rtnVal;\n+    }\n+}"},{"sha":"634eb2a65a2705c335a2bcf0cfd88a04bf62e795","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class XMLOrderedOneToManyEntity implements IOrderedEntity, java.io.Serializable {\n+\n+    private int id;\n+\n+    private List<INameEntity> entities;\n+\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public List<INameEntity> getEntities() {\n+        return entities;\n+    }\n+\n+    public void setEntities(List<INameEntity> entities) {\n+        this.entities = entities;\n+    }\n+\n+    public void addEntity(INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(entity);\n+    }\n+    \n+    public INameEntity removeEntity(int location) {\n+        INameEntity rtnVal = null;\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertEntity(int location, INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n+        }\n+        entities.add(location, entity);\n+    }\n+\n+    public String toString() {\n+        return \"XMLOrderedOneToManyEntity[\" + id + \"]=\" + entities;\n+    }\n+}"},{"sha":"1aa7e74b57171dbc73563982739a7947ffd5fef5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLUnorderedNameEntity.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLUnorderedNameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLUnorderedNameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLUnorderedNameEntity.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+public class XMLUnorderedNameEntity implements INameEntity, java.io.Serializable {\n+\n+    private int id;\n+    \n+    private String name;\n+\n+    \n+    public XMLUnorderedNameEntity() {\n+    }\n+\n+    public XMLUnorderedNameEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return \"XMLUnorderedNameEntity[\" + id + \"]=\" + name;\n+    }\n+}"},{"sha":"143405192495b89234b76d6945df4a4e2aa573fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","status":"modified","additions":503,"deletions":19,"changes":522,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -18,25 +18,103 @@\n  */\n package org.apache.openjpa.persistence.jpql.expressions;\n \n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.jpql.entities.IColumnEntity;\n+import org.apache.openjpa.persistence.jpql.entities.INameEntity;\n+import org.apache.openjpa.persistence.jpql.entities.IOrderedElements;\n+import org.apache.openjpa.persistence.jpql.entities.IOrderedEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedNameEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedOneToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity;\n import org.apache.openjpa.persistence.proxy.TreeNode;\n+import org.apache.openjpa.persistence.test.JPAEntityClassEnum;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n- * Tests index function\n+ * Test JPQL Index function on O2M, M2M and Element collections using annotations and XML.\n  *  \n- * @author Catalina Wei\n+ * @author Catalina Wei, Albert Lee, Donald Woods\n  */\n public class TestIndex extends SingleEMFTestCase {\n+    \n+    private Log log = null;\n+    \n+    private enum JPQLIndexEntityClasses implements JPAEntityClassEnum {\n+        OrderedElementEntity(OrderedElementEntity.class),\n+        OrderedOneToManyEntity(OrderedOneToManyEntity.class),\n+        OrderedManyToManyEntity(OrderedManyToManyEntity.class),\n+        XMLOrderedElementEntity(XMLOrderedElementEntity.class),\n+        XMLOrderedOneToManyEntity(XMLOrderedOneToManyEntity.class),\n+        XMLOrderedManyToManyEntity(XMLOrderedManyToManyEntity.class),\n+        UnorderedNameEntity(UnorderedNameEntity.class),\n+        XMLUnorderedNameEntity(XMLUnorderedNameEntity.class),\n+        OrderedNameEntity(OrderedNameEntity.class);\n+\n+        private Class<?> clazz;\n+        private String fullEntityName;\n+        private String entityName;\n+\n+        JPQLIndexEntityClasses(Class<?> clazz) {\n+            this.clazz = clazz;\n+            fullEntityName = clazz.getName();\n+            entityName = fullEntityName.substring(getEntityClassName()\n+                .lastIndexOf('.') + 1);\n+        }\n+\n+        public Class<?> getEntityClass() {\n+            return clazz;\n+        }\n+\n+        public String getEntityClassName() {\n+            return fullEntityName;\n+        }\n+\n+        public String getEntityName() {\n+            return entityName;\n+        }\n+    }\n+\n+    private static final String[] Element_Names = { \"A_Element\", \"B_Element\",\n+        \"C_Element\", \"D_Element\", \"E_Element\", \"F_Element\", };\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        // this sets up the testcase code so our EMF is created and cleaned up for us\n+        return \"JPQLIndex\";\n+    }\n+\n+    @Override\n     public void setUp() {\n-        super.setUp(CLEAR_TABLES, TreeNode.class);\n+        super.setUp(CLEAR_TABLES, TreeNode.class, \n+            OrderedElementEntity.class, UnorderedNameEntity.class,\n+            OrderedOneToManyEntity.class, OrderedManyToManyEntity.class,\n+            OrderedNameEntity.class);\n+            // XMLOrderedOneToManyEntity.class, XMLOrderedManyToManyEntity.class,\n+            // XMLOrderedElementEntity.class, XMLUnorderedNameEntity.class,\n+            // XMLOrderedNameEntity.class);\n+\n+        log =  emf.getConfiguration().getLog(\"test\");\n     }\n-    \n-    public void testQueryIndex() {\n-        persistTree();\n+\n+    // original testcase by Catalina\n+    public void testO2MTreeQueryIndex() {\n+        int[] fanOuts = {2,3,4};\n+        createTreeNodeEntities(fanOuts);\n         EntityManager em = emf.createEntityManager();\n         String query = \"SELECT index(c) from TreeNode t, in (t.childern) c\" +\n             \" WHERE index(c) = 2\"; \n@@ -48,26 +126,44 @@ public void testQueryIndex() {\n         em.close();                \n     }\n \n-    public void createTree() {\n-        TreeNode root = new TreeNode();\n-        root.setName(\"0\");\n-        int[] fanOuts = {1,2,3};\n-        root.createTree(fanOuts);\n-        assertArrayEquals(fanOuts, root.getFanOuts());\n+    // Testcases added by Donald with code reused from annonxml tests by Albert\n+    public void testO2MQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedOneToManyEntity, UnorderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedOneToManyEntity, UnorderedNameEntity.class);\n     }\n \n-    public void persistTree() {\n-        int[] fanOuts = {2,3,4};\n-        create(fanOuts);\n+    public void testO2MXMLQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.XMLOrderedOneToManyEntity, XMLUnorderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.XMLOrderedOneToManyEntity, XMLUnorderedNameEntity.class);\n+    }\n+\n+    public void testM2MQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, OrderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, OrderedNameEntity.class);\n+    }\n+\n+    public void testM2MXMLQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, XMLOrderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, XMLOrderedNameEntity.class);\n+    }\n+\n+    public void testElementQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedElementEntity, String.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedElementEntity, String.class);\n+    }\n+\n+    public void testElementXMLQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.XMLOrderedElementEntity, String.class);\n+        verifyEntities(JPQLIndexEntityClasses.XMLOrderedElementEntity, String.class);\n     }\n \n     /**\n-     * Create a uniform tree with given fan out.\n-     * Persist.\n+     * Create and persist a uniform OneToMany tree with given fan out.\n      */\n-    TreeNode create(int[] original) {\n+    private TreeNode createTreeNodeEntities(int[] original) {\n         TreeNode root = new TreeNode();\n         root.createTree(original);\n+        assertArrayEquals(original, root.getFanOuts());\n         \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -81,9 +177,397 @@ TreeNode create(int[] original) {\n     /**\n      *  Asserts the given arrays have exactly same elements at the same index.\n      */\n-    void assertArrayEquals(int[] a, int[] b) {\n+    private void assertArrayEquals(int[] a, int[] b) {\n         assertEquals(a.length, b.length);\n         for (int i = 0; i<a.length; i++)\n             assertEquals(a[i], b[i]);\n     }\n+    \n+    private <C,E> void createEntities(JPQLIndexEntityClasses entityType, Class<E> elementClass)\n+    {\n+        if (IOrderedEntity.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (INameEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test INameEntity modifications on IOrderedEntity.\");\n+                createO2MEntities(entityType, (Class<INameEntity>)elementClass);\n+            } else if (IColumnEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test IColumnEntity modifications on IOrderedEntity.\");\n+                createM2MEntities(entityType, (Class<IColumnEntity>)elementClass);\n+            } else {\n+                fail(\"createEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else if (IOrderedElements.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (String.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test String modifications on IOrderedElements.\");\n+                createOrderedElements(entityType);\n+            } else {\n+                fail(\"createEntities(IOrderedElements) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else {\n+            fail(\"createEntities() - Unexpected entityType=\" + entityType.getEntityName());            \n+        }\n+    }\n+        \n+    private void createO2MEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass =\n+                (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            String elementClassName = elementClass.getName().substring(\n+                elementClass.getName().lastIndexOf('.') + 1);\n+            Integer entityId = 1;\n+            \n+            // create the entity\n+            IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n+            newEntity.setId(entityId);\n+            \n+            // create the elements to add\n+            Constructor<INameEntity> elementConstrctor = elementClass.getConstructor(String.class);\n+            List<INameEntity> newElements = new ArrayList<INameEntity>();\n+            for (int i=0; i<Element_Names.length; i++) {\n+                newElements.add(elementConstrctor.newInstance(Element_Names[i]));\n+            }\n+            \n+            // add the entities\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            for (INameEntity newElement : newElements)\n+            {\n+                em.persist(newElement);\n+                newEntity.addEntity((INameEntity)newElement);\n+            }\n+            em.persist(newEntity);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // verify the entity was stored\n+            IOrderedEntity findEntity = em.find(entityClass, entityId);\n+            assertNotNull(\"Found entity just created\", findEntity);\n+            assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n+            assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                findEntity.getClass().getName());\n+\n+        } catch (Throwable t) {\n+            log.error(t);\n+            throw new RuntimeException(t);\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private void createM2MEntities(JPQLIndexEntityClasses entityType, Class<IColumnEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass =\n+                (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            String elementClassName = elementClass.getName().substring(\n+                elementClass.getName().lastIndexOf('.') + 1);\n+            \n+            // create the EM and transaction\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+\n+            // create and persist the entities\n+            List<IOrderedEntity> newEntities = new ArrayList<IOrderedEntity>();\n+            for (int i=0; i<3; i++) {\n+                IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n+                newEntity.setId(i);\n+                em.persist(newEntity);\n+                newEntities.add(newEntity);\n+            }\n+            \n+            // create and persist the elements\n+            Constructor<IColumnEntity> elementConstrctor = elementClass.getConstructor(String.class);\n+            List<INameEntity> newElements = new ArrayList<INameEntity>();\n+            IColumnEntity newElement;\n+            for (int i=0; i<Element_Names.length; i++) {\n+                newElement = elementConstrctor.newInstance(Element_Names[i]);\n+                // add parent relationships\n+                newElement.setEntities(newEntities);\n+                em.persist(newElement);\n+                newElements.add(newElement);\n+            }\n+            \n+            // update entities with elements\n+            for (IOrderedEntity newEntity : newEntities) {\n+                newEntity.setEntities(newElements);\n+                em.persist(newEntity);\n+            }\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // verify the entities were stored\n+            for (int i=0; i<Element_Names.length; i++) {\n+                IOrderedEntity findEntity = em.find(entityClass, i);\n+                assertNotNull(\"Found entity just created\", findEntity);\n+                assertEquals(\"Verify entity id = \" + i, i, findEntity.getId());\n+                assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                    findEntity.getClass().getName());\n+            }\n+        } catch (Throwable t) {\n+            log.error(t);\n+            throw new RuntimeException(t);\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private void createOrderedElements(JPQLIndexEntityClasses entityType)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedElements> entityClass =\n+                (Class<IOrderedElements>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            Integer entityId = 1;\n+            \n+            IOrderedElements newEntity = (IOrderedElements)constructNewEntityObject(entityType);\n+            newEntity.setId(entityId);\n+            List<String> namesList = new ArrayList<String>();\n+            for (int i=0; i<Element_Names.length; i++) {\n+                namesList.add(Element_Names[i]);\n+            }\n+            newEntity.setListElements(namesList);\n+            // add the entity\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.persist(newEntity);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // verify the entity was stored\n+            log.trace(\"Verifing the entity was stored\");\n+            IOrderedElements findEntity = em.find(entityClass, entityId);\n+            assertNotNull(\"Found entity just created\", findEntity);\n+            assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n+            assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                findEntity.getClass().getName());\n+\n+        } catch (Throwable t) {\n+            log.error(t);\n+            throw new RuntimeException(t);\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private <C,E> void verifyEntities(JPQLIndexEntityClasses entityType, Class<E> elementClass)\n+    {\n+        if (IOrderedEntity.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (INameEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Verify INameEntity modifications on IOrderedEntity.\");\n+                verifyO2MEntities(entityType, (Class<INameEntity>)elementClass);\n+            } else if (IColumnEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Verify IColumnEntity modifications on IOrderedEntity.\");\n+                verifyM2MEntities(entityType, (Class<IColumnEntity>)elementClass);\n+            } else {\n+                fail(\"verifyEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else if (IOrderedElements.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (String.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test String modifications on IOrderedElements.\");\n+                verifyOrderedElements(entityType);\n+            } else {\n+                fail(\"verifyEntities(IOrderedElements) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else {\n+            fail(\"verifyEntities() - Unexpected entityType=\" + entityType.getEntityName());            \n+        }\n+    }\n+    \n+    private <E> void verifyO2MEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            entityClassName = entityClassName.substring(entityClassName.lastIndexOf('.') + 1);\n+\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Query \" + entityClassName + \" and verify 'entities' collection has \"\n+                    + Element_Names.length + \" elements in this order: \"\n+                    + Arrays.toString(Element_Names));\n+            }\n+            \n+            em = emf.createEntityManager();\n+            em.clear();\n+            int idx = 0;\n+            for (String expectedEntityName : Element_Names) {\n+                Query q = em.createQuery(\"select w from \" + entityClassName\n+                    + \" o join o.entities w where index(w) = \" + idx);\n+                List<E> res = (List<E>)q.getResultList();\n+                assertEquals(\"  Verify query returns 1 element for index \" + idx, 1, res.size());\n+                if (res.size() == 1) {\n+                    Object oo = res.get(0);\n+                    assertEquals(\"  Verify element type is \" + elementClass.getName(), elementClass.getName(),\n+                        oo.getClass().getName());\n+                    try {\n+                        String name = (String) elementClass.getMethod(\"getName\").invoke(oo);\n+                        assertEquals(\"  Verify element value is '\"\n+                            + expectedEntityName + \"'\", expectedEntityName, name);\n+                    } catch (Exception e) {\n+                        log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                ++idx;\n+            }\n+        } catch (Exception e) {\n+            log.error(e);\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (em != null) {\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private <E> void verifyM2MEntities(JPQLIndexEntityClasses entityType, Class<IColumnEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            entityClassName = entityClassName.substring(entityClassName.lastIndexOf('.') + 1);\n+            String elementClassName = entityType.getEntityName();\n+            elementClassName = elementClassName.substring(elementClassName.lastIndexOf('.') + 1);\n+\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Query \" + entityClassName + \" and verify 'entities' collection has \"\n+                    + Element_Names.length + \" elements in this order: \"\n+                    + Arrays.toString(Element_Names));\n+            }\n+            \n+            em = emf.createEntityManager();\n+            em.clear();\n+            int idx = 0, idx2 = 0;\n+            for (String expectedEntityName : Element_Names) {\n+                Query q = em.createQuery(\"select w from \" + entityClassName\n+                    + \" o join o.entities w where index(w) = \" + idx);\n+                List<E> res = (List<E>)q.getResultList();\n+                assertEquals(\"  Verify query returns 1 element for index \" + idx, 1, res.size());\n+                if (res.size() == 1) {\n+                    Object oo = res.get(0);\n+                    assertEquals(\"  Verify element type is \" + elementClass.getName(), elementClass.getName(),\n+                        oo.getClass().getName());\n+                    try {\n+                        String name = (String) elementClass.getMethod(\"getName\").invoke(oo);\n+                        assertEquals(\"  Verify element value is '\"\n+                            + expectedEntityName + \"'\", expectedEntityName, name);\n+                        \n+                        if (log.isTraceEnabled()) {\n+                            log.trace(\"Query \" + elementClassName + \" and verify 'entities' collection content\");\n+                        }\n+                        Query q2 = em.createQuery(\"select w from \" + elementClassName\n+                            + \" o join o.entities w where index(w) = \" + idx2);\n+                        List<E> res2 = (List<E>)q.getResultList();\n+                        assertEquals(\"  Verify query returns 1 entity for index \" + idx2, 1, res2.size());\n+                        if (res2.size() == 1) {\n+                            Object oo2 = res2.get(0);\n+                            assertEquals(\"  Verify entity type is \" + entityClass.getName(), entityClass.getName(),\n+                                oo2.getClass().getName());\n+                            try {\n+                                String name2 = (String) entityClass.getMethod(\"getName\").invoke(oo2);\n+                                assertEquals(\"  Verify entity value is '\"\n+                                    + expectedEntityName + \"'\", expectedEntityName, name);\n+                            } catch (Exception e) {\n+                                log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                                throw new RuntimeException(e);\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                ++idx;\n+            }\n+        } catch (Exception e) {\n+            log.error(e);\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (em != null) {\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private <E> void verifyOrderedElements(JPQLIndexEntityClasses entityType)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            entityClassName = entityClassName.substring(entityClassName.lastIndexOf('.') + 1);\n+\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Query \" + entityClassName + \" and verify 'elements' collection has \"\n+                    + Element_Names.length + \" elements in this order: \"\n+                    + Arrays.toString(Element_Names));\n+            }\n+            \n+            em = emf.createEntityManager();\n+            em.clear();\n+            int idx = 0;\n+            for (String expectedEntityName : Element_Names) {\n+                Query q = em.createQuery(\"select w from \" + entityClassName\n+                    + \" o join o.elements w where index(w) = \" + idx);\n+                List<E> res = (List<E>)q.getResultList();\n+                assertEquals(\"  Verify query returns 1 element for index \" + idx, 1, res.size());\n+                if (res.size() == 1) {\n+                    Object oo = res.get(0);\n+                    assertEquals(\"  Verify element type is String\", String.class.getName(),\n+                        oo.getClass().getName());\n+                    String name;\n+                    try {\n+                        name = (String) oo.toString();\n+                        assertEquals(\"  Verify element value is '\"\n+                            + expectedEntityName + \"'\", expectedEntityName, name);\n+                    } catch (Exception e) {\n+                        log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                ++idx;\n+            }\n+        } catch (Exception e) {\n+            log.error(e);\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (em != null) {\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n }"},{"sha":"620fd14abb3c1b91c50de4afbb6e110fe1bfabd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -88,6 +88,17 @@ public void testClassDefaults() {\n         assertTrue(_metaTest1.getRequiresExtent());\n     }\n \n+    public void testGetProxyFields(){\n+        FieldMetaData[] proxies = _metaTest3.getProxyFields();\n+        assertEquals(2, proxies.length);\n+        \n+        proxies = _metaTest1.getProxyFields();\n+        assertEquals(2, proxies.length);\n+        \n+        proxies = _metaTest5.getProxyFields();\n+        assertEquals(0, proxies.length);\n+\n+    }\n     /**\n      * Test non-persistent fields.\n      */"},{"sha":"ff5c8d3a81a6c306eb3a122c6d95ef03de57a4ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -124,10 +124,11 @@ void createModifyAndMerge(int[] original, int[] modifier) {\n \t\tmodified.modify(modifier);\n \t\tem.merge(modified);\n \t\tem.getTransaction().commit();\n+\n \t\tem.clear();\n-\t\t\n+\n \t\tassertProxyCollection(root.getNodes(), false);\n-\t\t\n+\n \t\tverify(root, modifier);\n \t}\n \t\n@@ -181,4 +182,12 @@ void assertProxyCollection(Object o, boolean tracking) {\n \t\t\tassertFalse(tracker.isTracking());\n \t\t}\n \t}\n+\n+\t/**\n+\t * Asserts that the given object is NOT a proxy collection.\n+\t */\n+\tvoid assertNotProxyCollection(Object o) {\n+\t\tassertFalse(o instanceof ProxyCollection);\n+\t}\n }\n+"},{"sha":"30a2e826cd70ce6f73ae89d752780317f369e16b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -73,7 +73,19 @@ public void testJDBCEscape() {\n             List results = q.getResultList();\n             Assert.assertEquals(1, results.size());\n         }\n+        \n+        // Test support in HAVING clause.\n+        String[] havingJpql = {\n+            \"select a from Employee a group by a.hireTime having a.hireTime >= {t '00:00:00'}\",\n+            \"select a from Employee a group by a.hireDate having a.hireDate >= {d '2009-08-25'}\",\n+            \"select a from Employee a group by a.hireTimestamp having a.hireTimestamp >= {d '2009-08-25'}\"\n+        };\n \n+        for (int j = 0; j < havingJpql.length; j++) {\n+            Query q = em.createQuery(havingJpql[j]);\n+            List results = q.getResultList();\n+            Assert.assertEquals(1, results.size());\n+        }\n         em.getTransaction().begin();\n         String update = \"update Employee a set a.hireTimestamp = {ts '2009-08-25 00:00:00.123456'} where a.empId = 1\";\n         Query q = em.createQuery(update);"},{"sha":"79762db9ca721772d343577ee87517ca3eb85874","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.LockTimeoutException;\n+import javax.persistence.PessimisticLockException;\n+import javax.persistence.Query;\n+import javax.persistence.QueryTimeoutException;\n+\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.exception.PObject;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.util.OpenJPAException;\n+\n+/**\n+ * Tests that correct timeout exceptions are being thrown depending on whether it is a query or a lock operation.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestTimeoutException extends SingleEMFTestCase {\n+    private final Class<?> entityClass = PObject.class;\n+\n+    public void setUp() {\n+        setUnsupportedDatabases(OracleDictionary.class, DB2Dictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+        super.setUp(entityClass);\n+    }\n+    \n+    public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntities() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        assertNotSame(em1, em2);\n+        Object oid = createEntity(em1);\n+        \n+        em1.getTransaction().begin();\n+        Object entity = em1.find(entityClass, oid);\n+        assertNotNull(entity);\n+        em1.lock(entity, LockModeType.PESSIMISTIC_WRITE);\n+        \n+        em2.getTransaction().begin();\n+        final Query query = em2.createQuery(\"select p from PObject p\");\n+        query.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n+        long timeout = 1000;\n+        query.setHint(\"javax.persistence.query.timeout\", timeout);\n+        try {\n+            query.getResultList();\n+            fail(\"Expected \" + QueryTimeoutException.class.getName());\n+        } catch (Throwable t) {\n+            assertError(t, QueryTimeoutException.class);\n+        }\n+        \n+        assertTrue(em2.getTransaction().isActive());\n+        em2.getTransaction().rollback();\n+        em1.getTransaction().rollback();\n+    }\n+    \n+    public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n+        EntityManager em1 = emf.createEntityManager();\n+        final EntityManager em2 = emf.createEntityManager();\n+        assertNotSame(em1, em2);\n+        final Object oid = createEntity(em1);\n+        \n+        em1.getTransaction().begin();\n+        final Object entity1 = em1.find(entityClass, oid);\n+        assertNotNull(entity1);\n+        em1.lock(entity1, LockModeType.PESSIMISTIC_WRITE);\n+        \n+        em2.getTransaction().begin();\n+        final Object entity2 = em2.find(entityClass, oid);\n+        final long timeout = 1000;\n+        try {\n+            Map<String,Object> hint = new HashMap<String, Object>();\n+            hint.put(\"javax.persistence.lock.timeout\", timeout);\n+            em2.lock(entity2, LockModeType.PESSIMISTIC_WRITE, hint);\n+            fail(\"Expected \" + PessimisticLockException.class.getName());\n+        } catch (Throwable t) {\n+           assertError(t, PessimisticLockException.class);\n+        }\n+        assertTrue(em2.getTransaction().isActive());\n+        em2.getTransaction().rollback();\n+        \n+        em1.getTransaction().rollback();\n+    }\n+\n+    public void testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        assertNotSame(em1, em2);\n+        Object oid = createEntity(em1);\n+        \n+        em1.getTransaction().begin();\n+        Object entity = em1.find(entityClass, oid);\n+        assertNotNull(entity);\n+        em1.lock(entity, LockModeType.PESSIMISTIC_WRITE);\n+        \n+        em2.getTransaction().begin();\n+        try {\n+            em2.find(entityClass, oid, LockModeType.PESSIMISTIC_WRITE);\n+            fail(\"Expected \" + LockTimeoutException.class.getName());\n+        } catch (Throwable t) {\n+            assertError(t, LockTimeoutException.class);\n+        }\n+        \n+        assertTrue(em2.getTransaction().isActive());\n+        em2.getTransaction().rollback();\n+        em1.getTransaction().rollback();\n+    }\n+    \n+    public Object createEntity(EntityManager em) {\n+        long id = System.nanoTime();\n+        em.getTransaction().begin();\n+        PObject pc = new PObject();\n+        pc.setId(id);\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        return id;\n+    }\n+    \n+    \n+    /**\n+     * Assert that an exception of proper type has been thrown.\n+     * Also checks that that the exception has populated the failed object.\n+     * @param actual exception being thrown\n+     * @param expeceted type of the exception\n+     */\n+    void assertError(Throwable actual, Class<? extends Throwable> expected) {\n+        if (!expected.isAssignableFrom(actual.getClass())) {\n+                actual.printStackTrace();\n+                throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \" + \n+                        expected.getName());\n+        }\n+        Object failed = getFailedObject(actual);\n+        assertNotNull(\"Failed object is null\", failed);\n+        assertNotEquals(\"null\", failed);\n+    } \n+    \n+    Object getFailedObject(Throwable e) {\n+        if (e instanceof LockTimeoutException) {\n+            return ((LockTimeoutException) e).getObject();\n+        }\n+        if (e instanceof PessimisticLockException) {\n+            return ((PessimisticLockException) e).getEntity();\n+        }\n+        if (e instanceof QueryTimeoutException) {\n+            return ((QueryTimeoutException) e).getQuery();\n+        }\n+        if (e instanceof OpenJPAException) {\n+            return ((OpenJPAException) e).getFailedObject();\n+        }\n+        return null;\n+    }\n+    \n+}"},{"sha":"632a32abc0fc02f014f6cd68f33320646bc9199b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -116,6 +116,23 @@ public void testCacheStoreModeSetting() {\n         assertEquals(mode, CacheStoreMode.USE);\n     }\n     \n+    public void testRefreshAfterRemove() {\n+        try {\n+            em.getTransaction().begin();\n+            Item item = new Item();\n+            item.setItemData(\"Test Data\");\n+            em.persist(item);\n+            em.flush();\n+            em.remove(item);\n+            em.flush();\n+            em.refresh(item);\n+            em.getTransaction().commit();\n+            fail(\"Did not catch expected IllegalArgumentException for refresh() of removed entity\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected exception\n+        }\n+    }\n+    \n     \n     void assertCached(Class<?> cls, Object oid) {\n         assertTrue(cls + \":\" + oid + \" should be in L2 cache, but not\", emf.getCache().contains(cls, oid));"},{"sha":"dda04a4eed7a0880f279bfa3cf08a4f0da1aaaa2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"modified","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,6 +23,8 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.sql.SQLException;\n@@ -615,4 +617,49 @@ protected boolean isTestsDisabled() {\n         }\n     }\n \n+    protected Class<?> resolveEntityClass(JPAEntityClassEnum enumerationRef)\n+        throws ClassNotFoundException\n+    {\n+        if (enumerationRef == null)\n+        {\n+            throw new IllegalArgumentException(\"Null value passed into the constructNewEntityObject method.\");\n+        }\n+        String className = enumerationRef.getEntityClassName();\n+        if (className == null)\n+        {\n+            throw new IllegalArgumentException(\"Enumeration toString() method implementation returned a null value.\");\n+        }\n+\n+        return Class.forName(className);\n+    }\n+\n+    protected Object constructNewEntityObject(JPAEntityClassEnum enumerationRef)\n+        throws ClassNotFoundException, SecurityException, NoSuchMethodException,\n+        IllegalArgumentException, InstantiationException,\n+        IllegalAccessException, InvocationTargetException\n+    {\n+        Class<?> classType = resolveEntityClass(enumerationRef);\n+        Class<?> constructorArgSig[] = new Class[] {};\n+        Object constructorArgs[] = new Object[] {};\n+\n+        Constructor<?> classConstructor = classType.getConstructor(constructorArgSig);\n+        Object newEntity = classConstructor.newInstance(constructorArgs);\n+\n+        return newEntity;\n+    }\n+\n+    protected Object constructNewEntityObject(Class<?> entityClass)\n+        throws SecurityException, NoSuchMethodException,\n+        IllegalArgumentException, InstantiationException,\n+        IllegalAccessException, InvocationTargetException\n+    {\n+        Class<?> constructorArgSig[] = new Class[] {};\n+        Object constructorArgs[] = new Object[] {};\n+\n+        Constructor<?> classConstructor = entityClass.getConstructor(constructorArgSig);\n+        Object newEntity = classConstructor.newInstance(constructorArgs);\n+\n+        return newEntity;\n+    }\n+\n }"},{"sha":"62c843dbbc6fd0adf3bcb00d0e70a74267ea5c9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.test;\n+\n+public interface JPAEntityClassEnum {\n+    public String getEntityClassName();\n+    public String getEntityName();\n+}\n+"},{"sha":"87dcb4f3cc66d32a282346060fa475adda12fd12","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -34,6 +34,9 @@\n     <entity class=\"EntityListenerEntity\">\n         <exclude-default-listeners/>\n     </entity>\n+    <entity class=\"DuplicateListenerEntity\">\n+        <exclude-default-listeners/>\n+    </entity>\n     <entity class=\"Message\">\n         <exclude-default-listeners/>\n     </entity>"},{"sha":"6231182dd02ce862555a151af243983fb504ad05","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":33,"deletions":9,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -47,6 +47,7 @@\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/jpql/expressions/orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/inheritance/orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml</mapping-file>\n@@ -99,6 +100,7 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.DuplicateListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n@@ -205,6 +207,7 @@\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Merchandise</class>\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Person</class>\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Singer</class>\n+        <class>org.apache.openjpa.persistence.jdbc.sqlcache.OrderJPA</class>\n \t\t\n \t\t<properties>\n \t\t  <property name=\"openjpa.jdbc.QuerySQLCache\"\n@@ -284,37 +287,58 @@\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-seq-gen-xml\">\n+    <persistence-unit name=\"delimited-identifiers-seq-gen-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-seq-gen-xml-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-inheritance-xml\">\n+    <persistence-unit name=\"delimited-identifiers-inheritance-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-inheritance-xml-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-joins-xml\">\n+    <persistence-unit name=\"delimited-identifiers-joins-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-joins-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-result-set-xml\">\n+    <persistence-unit name=\"delimited-identifiers-result-set-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-result-set-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"JPQLIndex\">\n+        <mapping-file>org/apache/openjpa/persistence/jpql/expressions/orm.xml</mapping-file>\n+\n+        <class>org.apache.openjpa.persistence.proxy.TreeNode</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedOneToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema\" />\n+        </properties>\n+    </persistence-unit>\n+\n </persistence>"},{"sha":"05c5d92354ed6049883af82b02e7060177bdc2eb","filename":"openjpa-persistence-jdbc/src/test/resources/jndi.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/jndi.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/jndi.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/jndi.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.    \n+\n+java.naming.factory.initial=org.osjava.sj.SimpleContextFactory\n+org.osjava.sj.root=src/test/resources/simple-jndi\n+org.osjava.sj.colon.replace=--\n+org.osjava.sj.delimiter=/"},{"sha":"1e04f24cb8484da242adbca81bf19f4bcb813817","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd\" version=\"2.0\">\n+\n+    <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <many-to-many name=\"entities\">\n+                <order-column/>\n+            </many-to-many>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <one-to-many name=\"entities\">\n+                <order-column/>\n+            </one-to-many>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <element-collection name=\"elements\">\n+                <order-column />\n+            </element-collection>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <basic name=\"name\" />\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <basic name=\"name\" />\n+            <many-to-many name=\"columns\">\n+                <order-column/>\n+            </many-to-many>\n+        </attributes>\n+    </entity>\n+\n+</entity-mappings>"},{"sha":"f1da8f977a49a465752d5a6fbb9bdeee397955bd","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+<persistence\n+\txmlns=\"http://java.sun.com/xml/ns/persistence\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n+\tversion=\"2.0\">\n+\n+    <persistence-unit name=\"JPQLIndex\">\n+        <description>PU for JPQL Index testing</description>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <mapping-file>org/apache/openjpa/persistence/jpql/expressions/orm.xml</mapping-file>\n+\n+        <class>org.apache.openjpa.persistence.proxy.TreeNode</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedOneToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\" />\n+            <!-- <property name=\"openjpa.Log\" value=\"SQL=TRACE\"/> -->\n+            <!-- <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/> -->\n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>"},{"sha":"3c6545119edff9d35eae199b1220596ba241468c","filename":"openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+mocked/type=javax.sql.DataSource\n+mocked/driver=org.apache.derby.jdbc.EmbeddedDriver\n+mocked/url=jdbc:derby:target/database/jpa-jndi-database;create=true\n+mocked/user=app\n+mocked/password=app\n+\n+mocked1/type=javax.sql.DataSource\n+mocked1/driver=org.apache.derby.jdbc.EmbeddedDriver\n+mocked1/url=jdbc:derby:target/database/jpa-jndi-database1;create=true\n+mocked1/user=app\n+mocked1/password=app"},{"sha":"b662809540476a5e7d56cff0a2293bdd6a976e5e","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -27,7 +27,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <groupId>org.apache.openjpa</groupId>\n@@ -71,7 +71,7 @@\n                             <systemProperties>\n                                 <property>\n                                     <name>openjpa.Log</name>\n-                                    <value>DefaultLevel=${openjpa.loglevel}</value>\n+                                    <value>${openjpa.Log}</value>\n                                 </property>\n                                 <property>\n                                     <name>openjpa.ConnectionDriverName</name>\n@@ -729,7 +729,7 @@\n                                     <property name=\"test\" value=\"${test}\" />\n                                     <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n                                     <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n-                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n+                                    <property name=\"openjpa.Log\" value=\"${openjpa.Log}\" />\n                                     <property name=\"build.enhance\" value=\"${build.enhance}\" />\n                                 </ant>\n                             </tasks>\n@@ -768,7 +768,7 @@\n                     <systemProperties>\n                         <property>\n                             <name>openjpa.Log</name>\n-                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                            <value>${openjpa.Log}</value>\n                         </property>\n                         <property>\n                             <name>openjpa.DynamicEnhancementAgent</name>"},{"sha":"56593d11f79be9d3c01f144379ad75f5d2b4e6f5","filename":"openjpa-persistence-locking/src/test/ant/enhancer.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/src/test/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/src/test/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/ant/enhancer.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -70,7 +70,7 @@\n         <openjpac>\n             <classpath refid=\"cp\" />\n             <fileset refid=\"enhance.path.ref\" />\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n     </target>\n </project>"},{"sha":"f599e4bf195802f7ae9ed82697fade22363818bd","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -255,28 +255,28 @@ public void testRefreshIllegalArgrumentExceptions() {\n             {Act.Remove},\n \n             {Act.Refresh, 1, LockModeType.NONE },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n       \n             {Act.Refresh, 1, LockModeType.READ },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.WRITE },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.OPTIMISTIC },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.OPTIMISTIC_FORCE_INCREMENT },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_READ },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_WRITE },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n             \n             {Act.RollbackTx},\n         };"},{"sha":"f6d8d5147d513797dc4223a044cbe01bd0572f03","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":209,"deletions":262,"changes":471,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -27,78 +27,58 @@\n import javax.persistence.PessimisticLockException;\n import javax.persistence.Query;\n import javax.persistence.QueryTimeoutException;\n+import javax.persistence.TypedQuery;\n+\n+import junit.framework.AssertionFailedError;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.LockTimeoutException;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.util.OpenJPAException;\n \n /**\n- * Test Pessimistic Lock and exception behavior against EntityManager and Query interface methods.\n+ * Test Pessimistic Lock and exception behavior against EntityManager and Query\n+ * interface methods.\n  */\n public class TestPessimisticLocks extends SQLListenerTestCase {\n \n     private DBDictionary dict = null;\n \n     public void setUp() {\n-        setSupportedDatabases(\n-                org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n-//                org.apache.openjpa.jdbc.sql.OracleDictionary.class,\n-                org.apache.openjpa.jdbc.sql.DB2Dictionary.class);\n-        if (isTestsDisabled()) {\n-            return;\n-        }\n-\n-        setUp(Employee.class, Department.class, \"openjpa.LockManager\", \"mixed\");\n-        String empTable = getMapping(Employee.class).getTable().getFullName();\n-        String deptTable = getMapping(Department.class).getTable().getFullName();\n-\n-        dict= ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+        setUp(CLEAR_TABLES, Employee.class, Department.class, \"openjpa.LockManager\", \"mixed\");\n \n         EntityManager em = null;\n-        try {\n-            em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-\n-            em.createQuery(\"delete from \" + empTable).executeUpdate();\n-            em.createQuery(\"delete from \" + deptTable).executeUpdate();\n-\n-            em.getTransaction().commit();\n-\n-            Employee e1, e2;\n-            Department d1, d2;\n-            d1 = new Department();\n-            d1.setId(10);\n-            d1.setName(\"D10\");\n-\n-            e1 = new Employee();\n-            e1.setId(1);\n-            e1.setDepartment(d1);\n-            e1.setFirstName(\"first.1\");\n-            e1.setLastName(\"last.1\");\n-\n-            d2 = new Department();\n-            d2.setId(20);\n-            d2.setName(\"D20\");\n-\n-            e2 = new Employee();\n-            e2.setId(2);\n-            e2.setDepartment(d2);\n-            e2.setFirstName(\"first.2\");\n-            e2.setLastName(\"last.2\");\n-\n-            em.getTransaction().begin();\n-            em.persist(d1);\n-            em.persist(d2);\n-            em.persist(e1);\n-            em.persist(e2);\n-            em.getTransaction().commit();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        } finally {\n-            if (em != null && em.isOpen()) {\n-                em.close();\n-            }\n-        }\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Employee e1, e2;\n+        Department d1, d2;\n+        d1 = new Department();\n+        d1.setId(10);\n+        d1.setName(\"D10\");\n+\n+        e1 = new Employee();\n+        e1.setId(1);\n+        e1.setDepartment(d1);\n+        e1.setFirstName(\"first.1\");\n+        e1.setLastName(\"last.1\");\n+\n+        d2 = new Department();\n+        d2.setId(20);\n+        d2.setName(\"D20\");\n+\n+        e2 = new Employee();\n+        e2.setId(2);\n+        e2.setDepartment(d2);\n+        e2.setFirstName(\"first.2\");\n+        e2.setLastName(\"last.2\");\n+\n+        em.persist(d1);\n+        em.persist(d2);\n+        em.persist(e1);\n+        em.persist(e2);\n+        em.getTransaction().commit();\n     }\n \n     /*\n@@ -107,78 +87,62 @@ public void setUp() {\n     public void testFindAfterQueryWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        TypedQuery<Employee> query = em1.createQuery(\"select e from Employee e where e.id < 10\", Employee.class)\n+                .setFirstResult(1);\n+        // Lock all selected Employees, skip the first one, i.e should lock\n+        // Employee(2)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        List<Employee> employees = query.getResultList();\n+        assertEquals(\"Expected 1 element with emplyee id=2\", employees.size(), 1);\n+        assertTrue(\"Test Employee first name = 'first.2'\", employees.get(0).getFirstName().equals(\"first.1\")\n+                || employees.get(0).getFirstName().equals(\"first.2\"));\n+\n+        em2.getTransaction().begin();\n+        Map<String, Object> hints = new HashMap<String, Object>();\n+        hints.put(\"javax.persistence.lock.timeout\", 2000);\n+        // find Employee(2) with a lock, should block and expected a\n+        // PessimisticLockException\n         try {\n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e from Employee e where e.id < 10\").setFirstResult(1);\n-            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            List<Employee> q = query.getResultList();\n-            assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n-            assertTrue(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName().equals(\"first.1\")\n-                    || q.get(0).getFirstName().equals(\"first.2\"));\n-\n-            em2.getTransaction().begin();\n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // find Employee(2) with a lock, should block and expected a PessimisticLockException\n-            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, hints);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n-        } catch (QueryTimeoutException e) {            \n-            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n-            // Remove this when the problem is fixed\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (Exception ex) {\n-            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } catch (Throwable e) {\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n-            if( em2.getTransaction().isActive())\n+            if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n \n+        em1.getTransaction().begin();\n+        TypedQuery<Department> query2 = em1.createQuery(\"select e.department from Employee e where e.id < 10\",\n+                Department.class).setFirstResult(1);\n+        // Lock all selected Departments, skip the first one, i.e should\n+        // lock Department(20)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        List<Department> depts = query2.getResultList();\n+        assertEquals(\"Expected 1 element with department id=20\", depts.size(), 1);\n+        assertTrue(\"Test department name = 'D20'\", depts.get(0).getName().equals(\"D10\")\n+                || depts.get(0).getName().equals(\"D20\"));\n+\n+        em2.getTransaction().begin();\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // find Employee(2) with a lock, no block since only department was\n+        // locked\n         try {\n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e.department from Employee e where e.id < 10\").setFirstResult(1);\n-            // Lock all selected Departments, skip the first one, i.e should lock Department(20)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            List<Department> q = query.getResultList();\n-            assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n-            assertTrue(\"Test department name = 'D20'\", q.get(0).getName().equals(\"D10\")\n-                    || q.get(0).getName().equals(\"D20\"));\n-\n-            em2.getTransaction().begin();\n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // find Employee(2) with a lock, no block since only department was locked\n             Employee emp = em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n             assertNotNull(\"Query locks department only, therefore should find Employee.\", emp);\n             assertEquals(\"Test Employee first name = 'first.1'\", emp.getFirstName(), \"first.1\");\n-        } catch (QueryTimeoutException e) {            \n-            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n-            // Remove this when the problem is fixed\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n-            if( em2.getTransaction().isActive())\n+            if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n         em1.close();\n@@ -191,76 +155,59 @@ public void testFindAfterQueryWithPessimisticLocks() {\n     public void testFindAfterQueryOrderByWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        Query query = em1.createQuery(\"select e from Employee e where e.id < 10 order by e.id\").setFirstResult(1);\n+        // Lock all selected Employees, skip the first one, i.e should lock\n+        // Employee(2)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        List<Employee> q = query.getResultList();\n+        assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n+        assertEquals(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName(), \"first.2\");\n+\n+        em2.getTransaction().begin();\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // find Employee(2) with a lock, should block and expected a\n+        // PessimisticLockException\n         try {\n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e from Employee e where e.id < 10 order by e.id\").setFirstResult(1);\n-            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            List<Employee> q = query.getResultList();\n-            assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n-            assertEquals(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName(), \"first.2\");\n-\n-            em2.getTransaction().begin();\n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // find Employee(2) with a lock, should block and expected a PessimisticLockException\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n-        } catch (QueryTimeoutException e) {            \n-            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n-            // Remove this when the problem is fixed\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (Exception ex) {\n-            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } catch (Exception e) {\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n-            if( em2.getTransaction().isActive())\n+            if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n \n+        em1.getTransaction().begin();\n+        query = em1.createQuery(\"select e.department from Employee e where e.id < 10 order by e.department.id\")\n+                .setFirstResult(1);\n+        // Lock all selected Departments, skip the first one, i.e should\n+        // lock Department(20)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        List<Department> result = query.getResultList();\n+        assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n+        assertEquals(\"Test department name = 'D20'\", result.get(0).getName(), \"D20\");\n+\n+        em2.getTransaction().begin();\n+        map.clear();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // find Employee(2) with a lock, no block since only department was\n+        // locked\n         try {\n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n-            // Lock all selected Departments, skip the first one, i.e should lock Department(20)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            List<Department> q = query.getResultList();\n-            assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n-            assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n-\n-            em2.getTransaction().begin();\n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // find Employee(2) with a lock, no block since only department was locked\n             Employee emp = em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n             assertNotNull(\"Query locks department only, therefore should find Employee.\", emp);\n             assertEquals(\"Test Employee first name = 'first.1'\", emp.getFirstName(), \"first.1\");\n-        } catch (QueryTimeoutException e) {            \n-            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n-            // Remove this when the problem is fixed\n-//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n-            if( em2.getTransaction().isActive())\n+            if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n         em1.close();\n@@ -275,71 +222,52 @@ public void testQueryAfterFindWithPessimisticLocks() {\n         EntityManager em2 = emf.createEntityManager();\n         try {\n             em2.getTransaction().begin();\n-            Map<String,Object> map = new HashMap<String,Object>();\n+            Map<String, Object> map = new HashMap<String, Object>();\n             map.put(\"javax.persistence.lock.timeout\", 2000);\n             // Lock Emplyee(1), no department should be locked\n             em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n \n             em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e.department from Employee e where e.id < 10\").setFirstResult(1);\n+            Query query = em1.createQuery(\"select e.department from Employee e where e.id < 10\").setFirstResult(1);\n             query.setLockMode(LockModeType.PESSIMISTIC_READ);\n             query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            // Lock all selected Department but skip the first, i.e. lock Department(20), should query successfully.\n+            // Lock all selected Department but skip the first, i.e. lock\n+            // Department(20), should query successfully.\n             List<Department> q = query.getResultList();\n             assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n             assertTrue(\"Test department name = 'D20'\", q.get(0).getName().equals(\"D10\")\n                     || q.get(0).getName().equals(\"D20\"));\n-        } catch (QueryTimeoutException e) {            \n-            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n-            // Remove this when the problem is fixed\n-//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n             if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n-        \n-        try {\n-            em2.getTransaction().begin();\n \n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // Lock Emplyee(2), no department should be locked\n-            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+        em2.getTransaction().begin();\n \n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e from Employee e where e.id < 10\").setFirstResult(1);\n-            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // Lock Emplyee(2), no department should be locked\n+        em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+\n+        em1.getTransaction().begin();\n+        Query query = em1.createQuery(\"select e from Employee e where e.id < 10\").setFirstResult(1);\n+        // Lock all selected Employees, skip the first one, i.e should lock\n+        // Employee(2)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 1000);\n+        try {\n             List<Employee> q = query.getResultList();\n-            fail(\"Unexcpected find succeeded. Should throw a QueryLockException.\");\n-        } catch (QueryTimeoutException e) {            \n-            // This is the expected exception.\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (Exception ex) {\n-            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (Exception e) {\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n-            if( em2.getTransaction().isActive())\n+            if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n         em1.close();\n@@ -352,75 +280,94 @@ public void testQueryAfterFindWithPessimisticLocks() {\n     public void testQueryOrderByAfterFindWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // Lock Emplyee(1), no department should be locked\n+        em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n+\n+        em1.getTransaction().begin();\n+        Query query = em1.createQuery(\"select e.department from Employee e where e.id < 10 order by e.department.id\")\n+                .setFirstResult(1);\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        // Lock all selected Department but skip the first, i.e. lock\n+        // Department(20), should query successfully.\n         try {\n-            em2.getTransaction().begin();\n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // Lock Emplyee(1), no department should be locked\n-            em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n-\n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            // Lock all selected Department but skip the first, i.e. lock Department(20), should query successfully.\n             List<Department> q = query.getResultList();\n             assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n             assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n-        } catch (QueryTimeoutException e) {            \n-            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n-            // Remove this when the problem is fixed\n-//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n-                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n-            }\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n             if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n-        \n-        try {\n-            em2.getTransaction().begin();\n \n-            Map<String,Object> map = new HashMap<String,Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // Lock Emplyee(2), no department should be locked\n-            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+        em2.getTransaction().begin();\n \n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\n-                    \"select e from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n-            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            List<Employee> q = query.getResultList();\n-            fail(\"Unexcpected find succeeded. Should throw a QueryLockException.\");\n-        } catch (QueryTimeoutException e) {            \n-            // This is the expected exception.\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (PessimisticLockException e) {\n-            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n-        } catch (Exception ex) {\n-            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        map.clear();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // Lock Emplyee(2), no department should be locked\n+        em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+\n+        em1.getTransaction().begin();\n+        query = em1.createQuery(\"select e from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+        // Lock all selected Employees, skip the first one, i.e should lock\n+        // Employee(2)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        try {\n+            List<?> q = query.getResultList();\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (Exception e) {\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n-            if( em1.getTransaction().isActive())\n+            if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n-            if( em2.getTransaction().isActive())\n+            if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n         em1.close();\n         em2.close();\n     }\n+\n+    /**\n+     * Assert that an exception of proper type has been thrown. Also checks that\n+     * that the exception has populated the failed object.\n+     * \n+     * @param actual\n+     *            exception being thrown\n+     * @param expeceted\n+     *            type of the exception\n+     */\n+    void assertError(Throwable actual, Class<? extends Throwable> expected) {\n+        if (!expected.isAssignableFrom(actual.getClass())) {\n+            actual.printStackTrace();\n+            throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \"\n+                    + expected.getName());\n+        }\n+        Object failed = getFailedObject(actual);\n+        assertNotNull(\"Failed object is null\", failed);\n+        assertNotEquals(\"null\", failed);\n+    }\n+\n+    Object getFailedObject(Throwable e) {\n+        if (e instanceof LockTimeoutException) {\n+            return ((LockTimeoutException) e).getObject();\n+        }\n+        if (e instanceof PessimisticLockException) {\n+            return ((PessimisticLockException) e).getEntity();\n+        }\n+        if (e instanceof QueryTimeoutException) {\n+            return ((QueryTimeoutException) e).getQuery();\n+        }\n+        if (e instanceof OpenJPAException) {\n+            return ((OpenJPAException) e).getFailedObject();\n+        }\n+        return null;\n+    }\n+\n }"},{"sha":"cf099302c9434db686282f65a2179cf2604c2295","filename":"openjpa-persistence/pom.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -48,6 +48,13 @@\n             <artifactId>geronimo-validation_1.0_spec</artifactId>\n             <scope>provided</scope>\n         </dependency>        \n+        <!-- for osgi bundle activator code, use same level as Apache Aries -->\n+        <dependency>\n+            <groupId>org.osgi</groupId>\n+            <artifactId>org.osgi.core</artifactId>\n+            <version>4.2.0</version>\n+            <scope>provided</scope>\n+        </dependency>\n     </dependencies>\n     \n     <build>"},{"sha":"ab776e4e40fbdbeb8ca07db6ca09f62af60f92cf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -122,7 +122,6 @@\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Numbers;\n import serp.util.Strings;\n \n /**\n@@ -473,9 +472,9 @@ private int getSourceMode(Package pkg) {\n     private void addSourceMode(Package pkg, int mode) {\n         Integer num = _pkgs.get(pkg);\n         if (num == null)\n-            num = Numbers.valueOf(mode);\n+            num = mode;\n         else\n-            num = Numbers.valueOf(num.intValue() | mode);\n+            num = num.intValue() | mode;\n         _pkgs.put(pkg, num);\n     }\n \n@@ -856,10 +855,20 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n     private Collection<LifecycleCallbacks>[] parseEntityListeners\n         (ClassMetaData meta, EntityListeners listeners) {\n         Class<?>[] classes = listeners.value();\n+        Collection<Class<?>> listenerColl = null;\n         Collection<LifecycleCallbacks>[] parsed = null;\n-        for (Class<?> cls : classes)\n+        for (Class<?> cls : classes) {\n+            if (!_conf.getCallbackOptionsInstance().getAllowsDuplicateListener()) {\n+                if (listenerColl == null)\n+                    listenerColl = new ArrayList<Class<?>>();\n+                if (listenerColl.contains(cls)) \n+                    continue;\n+                listenerColl.add(cls);\n+            }\n+            \n             parsed = parseCallbackMethods(cls, parsed, true, true,\n                 getRepository());\n+        }\n         return parsed;\n     }\n "},{"sha":"d27742eac8e726b7bc03fd09c5613f95c52343d1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -194,12 +194,11 @@ protected boolean isMappingMode() {\n     /**\n      * Convenience method for interpreting {@link #getMode}. Takes into\n      * account whether mapping information is loaded for the given instance.\n+     * OPENJPA-1360 - Allow @Column attributes when meta.isEmbeddedOnly()\n      */\n     protected boolean isMappingMode(ClassMetaData meta) {\n         return isMappingMode() && (meta.getSourceMode()\n             & MetaDataModes.MODE_MAPPING) != 0\n-            && (meta.getEmbeddingMetaData() != null\n-            || !meta.isEmbeddedOnly())\n             && (meta.getEmbeddingMetaData() == null\n             || isMappingMode(meta.getEmbeddingMetaData()));\n     }"},{"sha":"396c0e9ca85baad5aa907c89f7baa4af8e531c44","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -197,7 +197,20 @@ else if (!props.isEmpty())\n             }\n         }\n \n-        Broker broker = _factory.newBroker(user, pass, managed, retainMode, false);\n+        // javax.persistence.jtaDataSource and openjpa.ConnectionFactory name are equivalent.\n+        // prefer javax.persistence for now. \n+        String cfName = (String) Configurations.removeProperty(\"jtaDataSource\", props);  \n+        if(cfName == null) {\n+            cfName = (String) Configurations.removeProperty(\"ConnectionFactoryName\", props);\n+        }\n+        \n+        String cf2Name = (String) Configurations.removeProperty(\"nonJtaDataSource\", props); \n+        \n+        if(cf2Name == null) { \n+            cf2Name = (String) Configurations.removeProperty(\"ConnectionFactory2Name\", props);\n+        }\n+        \n+        Broker broker = _factory.newBroker(user, pass, managed, retainMode, false, cfName, cf2Name);\n             \n         // add autodetach for close and rollback conditions to the configuration\n         broker.setAutoDetach(AutoDetach.DETACH_CLOSE, true);\n@@ -290,6 +303,7 @@ FetchPlan toFetchPlan(Broker broker, FetchConfiguration fetch) {\n \t}\n \n     public Cache getCache() {\n+        _factory.assertOpen();\n         return getStoreCache();\n     }\n "},{"sha":"b71a36d3b80a49603c25b4247c59a63e24c4e1fe","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":43,"deletions":22,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -101,11 +101,15 @@\n \n     private static final Localizer _loc = Localizer.forPackage(EntityManagerImpl.class);\n     private static final Object[] EMPTY_OBJECTS = new Object[0];\n+    \n+    private static final String GET_LOCK_MODE = \"getLockMode\";\n+    private static final String LOCK = \"lock\";\n+    private static final String REFRESH = \"refresh\";\n \n     private DelegatingBroker _broker;\n     private EntityManagerFactoryImpl _emf;\n     private Map<FetchConfiguration,FetchPlan> _plans = new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\n-    private RuntimeExceptionTranslator _ret = PersistenceExceptions.getRollbackTranslator(this);\n+    protected RuntimeExceptionTranslator _ret = PersistenceExceptions.getRollbackTranslator(this);\n \n     public EntityManagerImpl() {\n         // for Externalizable\n@@ -482,6 +486,7 @@ public void setLifecycleListenerCallbackMode(int callbackMode) {\n     @SuppressWarnings(\"unchecked\")\n     public <T> T find(Class<T> cls, Object oid, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n+        configureCurrentCacheModes(getFetchPlan(), properties);\n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n         try {\n             oid = _broker.newObjectId(cls, oid);\n@@ -741,7 +746,7 @@ public void refresh(Object entity, Map<String, Object> properties) {\n \n     public void refresh(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"refresh\", entity);\n+        assertValidAttchedEntity(REFRESH, entity);\n \n         _broker.assertWriteOperation();\n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n@@ -972,7 +977,7 @@ public OpenJPAQuery createQuery(String language, String query) {\n             if (pq != null) {\n                 pq.setInto(q);\n             }\n-            return new QueryImpl(this, _ret, q).setId(qid);\n+            return newQueryImpl(q).setId(qid);\n         } catch (RuntimeException re) {\n             throw PersistenceExceptions.toPersistenceException(re);\n         }\n@@ -983,8 +988,7 @@ public OpenJPAQuery createQuery(Query query) {\n             return createQuery((String) null);\n         assertNotCloseInvoked();\n         org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\n-        return new QueryImpl(this, _ret, _broker.newQuery(q.getLanguage(),\n-            q));\n+        return newQueryImpl(_broker.newQuery(q.getLanguage(), q));\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n@@ -1014,7 +1018,7 @@ public OpenJPAQuery createNamedQuery(String name) {\n                 del.compile();\n             }\n             \n-            OpenJPAQuery q = new QueryImpl(this, _ret, del).setId(qid);\n+            OpenJPAQuery q = newQueryImpl(del).setId(qid);\n             String[] hints = meta.getHintKeys();\n             Object[] values = meta.getHintValues();\n             for (int i = 0; i < hints.length; i++)\n@@ -1040,13 +1044,17 @@ public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n         org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\n             QueryLanguages.LANG_SQL, query);\n         kernelQuery.setResultMapping(null, mappingName);\n-        return new QueryImpl(this, _ret, kernelQuery);\n+        return newQueryImpl(kernelQuery);\n+    }\n+\n+    protected <T> QueryImpl<T> newQueryImpl(org.apache.openjpa.kernel.Query kernelQuery) {\n+        return new QueryImpl<T>(this, _ret, kernelQuery);\n     }\n \n     /**\n      * Validate that the user provided SQL.\n      */\n-    private static void validateSQL(String query) {\n+    protected void validateSQL(String query) {\n         if (StringUtils.trimToNull(query) == null)\n             throw new ArgumentException(_loc.get(\"no-sql\"), null, null, false);\n     }\n@@ -1140,7 +1148,7 @@ public Object getDelegate() {\n     public LockModeType getLockMode(Object entity) {\n         assertNotCloseInvoked();\n         _broker.assertActiveTransaction();\n-        assertValidAttchedEntity(\"getLockMode\", entity);\n+        assertValidAttchedEntity(GET_LOCK_MODE, entity);\n         return MixedLockLevelsHelper.fromLockLevel(\n             _broker.getLockLevel(entity));\n     }\n@@ -1151,13 +1159,13 @@ public void lock(Object entity, LockModeType mode) {\n \n     public void lock(Object entity) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"lock\", entity);\n+        assertValidAttchedEntity(LOCK, entity);\n         _broker.lock(entity, this);\n     }\n \n     public void lock(Object entity, LockModeType mode, int timeout) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"lock\", entity);\n+        assertValidAttchedEntity(LOCK, entity);\n \n         configureCurrentFetchPlan(pushFetchPlan(), null, mode, false);\n         try {\n@@ -1169,9 +1177,9 @@ public void lock(Object entity, LockModeType mode, int timeout) {\n \n     public void lock(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"lock\", entity);\n+        assertValidAttchedEntity(LOCK, entity);\n         _broker.assertActiveTransaction();\n-\n+        configureCurrentCacheModes(getFetchPlan(), properties);\n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, false);\n         try {\n             _broker.lock(entity, MixedLockLevelsHelper.toLockLevel(mode),\n@@ -1325,7 +1333,7 @@ public Object getVersion(Object o) {\n      * closed, it will throw its own more informative exception when we \n      * delegate the pending operation to it.\n      */\n-    void assertNotCloseInvoked() {\n+    protected void assertNotCloseInvoked() {\n         if (!_broker.isClosed() && _broker.isCloseInvoked())\n             throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\n                 null, true);\n@@ -1337,7 +1345,7 @@ void assertNotCloseInvoked() {\n      */\n     void assertValidAttchedEntity(String call, Object entity) {\n         OpenJPAStateManager sm = _broker.getStateManager(entity);\n-        if (sm == null || !sm.isPersistent() || sm.isDetached()) {\n+        if (sm == null || !sm.isPersistent() || sm.isDetached() || (call.equals(REFRESH) && sm.isDeleted())) {\n             throw new IllegalArgumentException(_loc.get(\"invalid_entity_argument\", \n                 call, entity == null ? \"null\" : Exceptions.toString(entity)).getMessage());\n         }\n@@ -1549,6 +1557,8 @@ private Class primitiveType(char type) {\n     }\n \n     public void detach(Object entity) {\n+        if (entity == null)\n+            throw new IllegalArgumentException(_loc.get(\"null-detach\").getMessage());\n         assertNotCloseInvoked();\n         _broker.detach(entity, this);\n     }\n@@ -1562,7 +1572,7 @@ public void detach(Object entity) {\n         \n         org.apache.openjpa.kernel.Query kernelQuery =_broker.newQuery(CriteriaBuilderImpl.LANG_CRITERIA, criteriaQuery);\n         \n-        QueryImpl<T> facadeQuery = new QueryImpl<T>(this, _ret, kernelQuery);\n+        QueryImpl<T> facadeQuery = newQueryImpl(kernelQuery).setId(criteriaQuery.toString());\n         Set<ParameterExpression<?>> params = criteriaQuery.getParameters();\n         \n         for (ParameterExpression<?> param : params) {\n@@ -1634,8 +1644,10 @@ public OpenJPACriteriaBuilder getCriteriaBuilder() {\n         }\n         // Set this transaction to rollback only (as per spec) here because the raised exception \n         // does not go through normal exception translation pathways\n-        RuntimeException ex = new IllegalArgumentException(_loc.get(\"unwrap-em-invalid\", cls).toString());\n-        setRollbackOnly(ex);\n+        RuntimeException ex = new PersistenceException(_loc.get(\"unwrap-em-invalid\", cls).toString(), null, \n+                this, false);\n+        if (isActive())\n+            setRollbackOnly(ex);\n         throw ex;\n     }\n \n@@ -1658,7 +1670,6 @@ RuntimeExceptionTranslator getExceptionTranslator() {\n     private void configureCurrentFetchPlan(FetchPlan fetch, Map<String, Object> properties, \n             LockModeType lock, boolean requiresTxn) {\n         // handle properties in map first\n-        configureCurrentCacheModes(fetch, properties);\n         if (properties != null) {\n             for (Map.Entry<String, Object> entry : properties.entrySet())\n                 fetch.setHint(entry.getKey(), entry.getValue());\n@@ -1675,20 +1686,30 @@ private void configureCurrentFetchPlan(FetchPlan fetch, Map<String, Object> prop\n         }\n     }\n     \n+    /**\n+     * Populate the fetch configuration with specified cache mode properties.\n+     * The cache mode properties modify the fetch configuration and remove those\n+     * properties. This method should be called <em>before</em> the fetch configuration of the current \n+     * context has been pushed.\n+     * @param fetch the fetch configuration of the current context. Not the \n+     * new configuration pushed (and later popped) during a single operation.\n+     * \n+     * @param properties\n+     */\n     private void configureCurrentCacheModes(FetchPlan fetch, Map<String, Object> properties) {\n         if (properties == null)\n             return;\n         CacheRetrieveMode rMode = JPAProperties.getEnumValue(CacheRetrieveMode.class, \n                 JPAProperties.CACHE_RETRIEVE_MODE, properties);\n         if (rMode != null) {\n-            fetch.setCacheRetrieveMode(JPAProperties.convertToKenelValue(DataCacheRetrieveMode.class, \n+            fetch.setCacheRetrieveMode(JPAProperties.convertToKernelValue(DataCacheRetrieveMode.class, \n                     JPAProperties.CACHE_RETRIEVE_MODE, rMode));\n             properties.remove(JPAProperties.CACHE_RETRIEVE_MODE);\n         }\n         CacheStoreMode sMode = JPAProperties.getEnumValue(CacheStoreMode.class, \n                 JPAProperties.CACHE_STORE_MODE, properties);\n         if (sMode != null) {\n-            fetch.setCacheStoreMode(JPAProperties.convertToKenelValue(DataCacheStoreMode.class, \n+            fetch.setCacheStoreMode(JPAProperties.convertToKernelValue(DataCacheStoreMode.class, \n                     JPAProperties.CACHE_STORE_MODE, sMode));\n             properties.remove(JPAProperties.CACHE_STORE_MODE);\n         }\n@@ -1770,7 +1791,7 @@ String getBeanPropertyName(String user) {\n      */\n     Object convertUserValue(String key, Object value, Class<?> targetType) {\n         if (JPAProperties.isValidKey(key)) \n-            return JPAProperties.convertToKenelValue(targetType, key, value);\n+            return JPAProperties.convertToKernelValue(targetType, key, value);\n         if (value instanceof String) {\n             if (\"null\".equals(value)) {\n                 return null;"},{"sha":"1da06aec7784ab831a1cbabc326e1f41979b6c37","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -23,8 +23,10 @@\n \n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.CacheStoreMode;\n+import javax.persistence.SharedCacheMode;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.datacache.DataCacheMode;\n import org.apache.openjpa.kernel.DataCacheRetrieveMode;\n import org.apache.openjpa.kernel.DataCacheStoreMode;\n \n@@ -123,14 +125,14 @@ public static String getBeanProperty(String key) {\n      * \n      * @return the same value if the given key is not a valid JPA property key or the value is null.\n      */\n-    public static <T> T  convertToKenelValue(Class<T> resultType, String key, Object value) {\n+    public static <T> T  convertToKernelValue(Class<T> resultType, String key, Object value) {\n         if (value == null)\n             return null;\n         if (JPAProperties.isValidKey(key)) {\n             // works because enum values are identical String\n-            if (value instanceof CacheRetrieveMode) {\n+            if (value instanceof CacheRetrieveMode || (value instanceof String && CACHE_RETRIEVE_MODE.equals(key))) {\n                 return (T)DataCacheRetrieveMode.valueOf(value.toString().trim().toUpperCase());\n-            } else if (value instanceof CacheStoreMode) {\n+            } else if (value instanceof CacheStoreMode || (value instanceof String && CACHE_STORE_MODE.equals(key))) {\n                 return (T)DataCacheStoreMode.valueOf(value.toString().trim().toUpperCase());\n             }\n         }"},{"sha":"bf729db38a46a8b0eef2bdeada41909baf8459fd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -35,6 +35,7 @@\n  * @since 2.0.0\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class LockTimeoutException\n     extends javax.persistence.LockTimeoutException\n     implements Serializable, ExceptionInfo {\n@@ -43,12 +44,10 @@\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n-    public LockTimeoutException(String msg, Throwable[] nested,\n-        Object failed, boolean fatal) {\n-        super(msg);\n+    public LockTimeoutException(String msg, Throwable[] nested,  Object failed) {\n+        super(msg, nested == null ? null : nested[0], failed);\n         _nested = nested;\n         _failed = failed;\n-        _fatal = fatal;\n     }\n \n     public int getType() {"},{"sha":"cbd8be4ae5ff8b166690193ad6a0f1ea3f281d5d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":27,"deletions":50,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -151,63 +151,40 @@ private static Throwable translateException(Throwable t, boolean checked) {\n      */\n     private static Throwable translateStoreException(OpenJPAException ke) {\n         Exception e;\n+        int subtype = ke.getSubtype();\n+        String msg  = ke.getMessage();\n+        Throwable[] nested = getNestedThrowables(ke);\n+        Object failed = getFailedObject(ke);\n+        boolean fatal = ke.isFatal();\n         Throwable cause = (ke.getNestedThrowables() != null\n                         && ke.getNestedThrowables().length == 1)\n                          ? ke.getNestedThrowables()[0] : null;\n-        if (ke.getSubtype() == StoreException.OBJECT_NOT_FOUND\n-         || cause instanceof ObjectNotFoundException) {\n-                e = new org.apache.openjpa.persistence.EntityNotFoundException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-        } else if (ke.getSubtype() == StoreException.OPTIMISTIC\n-        \t\t|| cause instanceof OptimisticException) {\n-            \te = new org.apache.openjpa.persistence.OptimisticLockException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-        } else if (ke.getSubtype() == StoreException.LOCK\n-                || cause instanceof LockException) {\n-            LockException lockEx = (LockException)\n-                (ke instanceof LockException ? ke : cause);\n-            if (lockEx != null && lockEx.getLockLevel() >=\n-                MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n-                if (!lockEx.isFatal()) {\n-                    e = new org.apache.openjpa.persistence\n-                        .LockTimeoutException(\n-                        ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-                } else {\n-                    e = new org.apache.openjpa.persistence\n-                        .PessimisticLockException(\n-                        ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-                }\n-            } else {\n-                e = new org.apache.openjpa.persistence.OptimisticLockException(\n-                    ke.getMessage(), getNestedThrowables(ke),\n-                    getFailedObject(ke), ke.isFatal());\n-            }\n-        } else if (ke.getSubtype() == StoreException.OBJECT_EXISTS\n-        \t\t|| cause instanceof ObjectExistsException) {\n-                e = new org.apache.openjpa.persistence.EntityExistsException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-        } else if (ke.getSubtype() == StoreException.QUERY\n-                || cause instanceof QueryException) {\n-            QueryException queryEx = (QueryException)\n-                (ke instanceof QueryException ? ke : cause);\n+        if (subtype == StoreException.OBJECT_NOT_FOUND || cause instanceof ObjectNotFoundException) {\n+                e = new org.apache.openjpa.persistence.EntityNotFoundException(msg, nested, failed, fatal);\n+        } else if (subtype == StoreException.OPTIMISTIC\t|| cause instanceof OptimisticException) {\n+            \te = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n+        } else if (subtype == StoreException.LOCK || cause instanceof LockException) {\n+            LockException lockEx = (LockException) (ke instanceof LockException ? ke : cause); \n+            if (lockEx != null && lockEx.getLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) { \n+                if (!lockEx.isFatal()) { \n+                    e = new org.apache.openjpa.persistence.LockTimeoutException(msg, nested, failed); \n+                } else { \n+                    e = new org.apache.openjpa.persistence.PessimisticLockException(msg, nested, failed); \n+                } \n+            } else { \n+                e = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal); \n+            } \n+        } else if (subtype == StoreException.OBJECT_EXISTS || cause instanceof ObjectExistsException) {\n+                e = new org.apache.openjpa.persistence.EntityExistsException(msg, nested, failed, fatal);\n+        } else if (subtype == StoreException.QUERY || cause instanceof QueryException) {\n+            QueryException queryEx = (QueryException) (ke instanceof QueryException ? ke : cause);\n             if (!queryEx.isFatal()) {\n-                e = new org.apache.openjpa.persistence.QueryTimeoutException(\n-                    ke.getMessage(), getNestedThrowables(ke),\n-                    getFailedObject(ke), ke.isFatal());\n+                e = new org.apache.openjpa.persistence.QueryTimeoutException(msg, nested, failed, false);\n             } else {\n-                e = new org.apache.openjpa.persistence.PersistenceException(\n-                    ke.getMessage(), getNestedThrowables(ke),\n-                    getFailedObject(ke), ke.isFatal());\n+                e = new org.apache.openjpa.persistence.PersistenceException(msg, nested, failed, true);\n             }\n         } else {\n-                e = new org.apache.openjpa.persistence.PersistenceException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n+            e = new org.apache.openjpa.persistence.PersistenceException(msg, nested, failed, fatal);\n         }\n         e.setStackTrace(ke.getStackTrace());\n         return e;"},{"sha":"9c7bed23294a35e0db7e54348e595e1cc1800453","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -322,6 +322,12 @@ protected void mapPersistentTypeNames(Object rsrc, String[] names) {\n                 log.trace(\n                     _loc.get(\"map-persistent-types-skipping-non-url\", rsrc));\n             return;\n+        } else if (rsrc.toString().endsWith(\"/\")) {\n+            // OPENJPA-1546 If the rsrc URL is a directory it should not be\n+            // added to the list of the unparsed XML files\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"map-persistent-types-skipping-dir\", rsrc));\n+            return;\n         }\n \n         if (log.isTraceEnabled())\n@@ -331,6 +337,7 @@ protected void mapPersistentTypeNames(Object rsrc, String[] names) {\n         if (_xml == null)\n             _xml = new HashMap<URL, Set<String>>();\n         _xml.put((URL) rsrc, new HashSet<String>(Arrays.asList(names)));\n+\n         if (_unparsed == null)\n             _unparsed = new HashSet<URL>();\n         _unparsed.add((URL) rsrc);"},{"sha":"544d12d89df8352b38a454567ce4efe21da253e8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -50,6 +50,7 @@\n import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.osgi.BundleUtils;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n import org.apache.openjpa.util.ClassResolver;\n \n@@ -179,18 +180,25 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n                 cp.addProperty(\"openjpa.\" + BrokerValue.KEY, getDefaultBrokerAlias());\n             }\n \n-            BrokerFactory factory = getBrokerFactory(cp, poolValue, pui.getClassLoader());\n-            if (transformerException != null) {\n-                Log log = factory.getConfiguration().getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-                if (log.isTraceEnabled()) {\n-                    log.warn(_loc.get(\"transformer-registration-error-ex\", pui), transformerException);\n-                } else {\n-                    log.warn(_loc.get(\"transformer-registration-error\", pui));\n-                }\n+            // OPENJPA-1491 If running under OSGi, use the Bundle's ClassLoader instead of the application one\n+            BrokerFactory factory;\n+            if (BundleUtils.runningUnderOSGi()) {\n+                factory = getBrokerFactory(cp, poolValue, BundleUtils.getBundleClassLoader());\n+            } else {\n+                factory = getBrokerFactory(cp, poolValue, pui.getClassLoader());\n             }\n+\n             OpenJPAConfiguration conf = factory.getConfiguration();\n             setPersistenceEnvironmentInfo(conf, pui);\n             _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+            // now we can log any transformer exceptions from above\n+            if (transformerException != null) {\n+                if (_log.isTraceEnabled()) {\n+                    _log.warn(_loc.get(\"transformer-registration-error-ex\", pui), transformerException);\n+                } else {\n+                    _log.warn(_loc.get(\"transformer-registration-error\", pui));\n+                }\n+            }\n \n             // Create appropriate LifecycleEventManager\n             loadValidator(factory);"},{"sha":"ad67f161b1de47a40195fd4f9b19c521e7bbe435","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -31,24 +31,25 @@\n \n /**\n  * Pessimistic concurrency violation.\n+ * This exception is always fatal in contrast to {@linkplain LockTimeoutException}.\n  *\n  * @since 2.0.0\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class PessimisticLockException\n     extends javax.persistence.PessimisticLockException\n     implements Serializable, ExceptionInfo {\n \n-    private transient boolean _fatal = false;\n+    private transient boolean _fatal = true;\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n-    public PessimisticLockException(String msg, Throwable[] nested,\n-        Object failed, boolean fatal) {\n-        super(msg);\n+    public PessimisticLockException(String msg, Throwable[] nested, Object failed) {\n+        super(msg, nested == null ? null : nested[0], failed);\n         _nested = nested;\n         _failed = failed;\n-        _fatal = fatal;\n+        \n     }\n \n     public int getType() {"},{"sha":"245b28163615f9807d0343438a32ffea7cf5c684","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":25,"deletions":20,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -44,7 +44,6 @@\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.ParameterExpression;\n \n-import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.DelegatingQuery;\n@@ -99,8 +98,7 @@\n \t * @param ret Exception translator for this query\n \t * @param query The underlying \"kernel\" query.\n \t */\n-\tpublic QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n-\t\t\torg.apache.openjpa.kernel.Query query) {\n+\tpublic QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret, org.apache.openjpa.kernel.Query query) {\n \t\t_em = em;\n \t\t_query = new DelegatingQuery(query, ret);\n \t\t_lock = new ReentrantLock();\n@@ -111,8 +109,7 @@ public QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n \t * \n \t * @deprecated\n \t */\n-\tpublic QueryImpl(EntityManagerImpl em,\n-\t        org.apache.openjpa.kernel.Query query) {\n+\tpublic QueryImpl(EntityManagerImpl em, org.apache.openjpa.kernel.Query query) {\n \t\tthis(em, null, query);\n \t}\n \n@@ -151,7 +148,8 @@ public FetchPlan getFetchPlan() {\n \t}\n \n \tpublic String getQueryString() {\n-\t\treturn _query.getQueryString();\n+\t\tString result = _query.getQueryString();\n+\t\treturn result != null ? result : _id;\n \t}\n \n \tpublic boolean getIgnoreChanges() {\n@@ -292,6 +290,8 @@ private Object execute() {\n                 postExecute(result);\n             }\n             return result;\n+\t\t} catch (LockTimeoutException e) {\n+\t\t    throw new QueryTimeoutException(e.getMessage(), new Throwable[]{e}, this);\n \t\t} finally {\n \t\t    unlock();\n \t\t}\n@@ -462,28 +462,28 @@ public boolean equals(Object other) {\n     }\n \n     /**\n-     * Returns the innermost implementation that is an instance of the given \n-     * class. \n+     * Unwraps this receiver to an instance of the given class, if possible.\n      * \n-     * @throws PersistenceException if none in the delegate chain is an \n-     * instance of the given class.\n+     * @exception if the given class is null, generic <code>Object.class</code> or a class\n+     * that is not wrapped by this receiver.  \n      * \n      * @since 2.0.0\n      */\n     public <T> T unwrap(Class<T> cls) {\n-        Object[] delegates = new Object[]{_query.getInnermostDelegate(), \n-            _query.getDelegate(), _query, this};\n-        if (cls == null || cls == Object.class) {\n-            throw new PersistenceException(_loc.get(\"unwrap-em-invalid\", cls)\n-                    .toString(), null, this, false);\n-        }\n+        Object[] delegates = new Object[]{_query.getInnermostDelegate(), _query.getDelegate(), _query, this};\n         for (Object o : delegates) {\n-            if (cls.isInstance(o))\n+            if (cls != null && cls != Object.class && cls.isInstance(o))\n                 return (T)o;\n         }\n-        throw new PersistenceException(_loc.get(\"unwrap-query-invalid\", cls)\n-            .toString(), null, this, false);\n+        // Set this transaction to rollback only (as per spec) here because the raised exception \n+        // does not go through normal exception translation pathways\n+        RuntimeException ex = new PersistenceException(_loc.get(\"unwrap-query-invalid\", cls).toString(), null, \n+                this, false);\n+        if (_em.isActive())\n+            _em.setRollbackOnly(ex);\n+        throw ex;\n     }\n+\n     \n     // =======================================================================\n     // Prepared Query Cache related methods\n@@ -529,7 +529,7 @@ private boolean preExecute(Map params) {\n             }\n             stats.recordExecution(pq.getOriginalQuery());\n         } else {\n-            stats.recordExecution(_query.getQueryString());\n+            stats.recordExecution(getQueryString());\n         }\n         return registered == Boolean.TRUE;\n     }\n@@ -1082,4 +1082,9 @@ void assertValueAssignable(Parameter<?> param, Object v) {\n     }\n     \n     // ================== End of Parameter Processing routines ================================\n+    \n+    public String toString() {\n+        String result = _query.getQueryString(); \n+        return result != null ? result : _id;\n+    }\n }"},{"sha":"bdb77c2bac1730efa9a239aefec30de728b13a1a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -25,6 +25,8 @@\n import java.io.PrintWriter;\n import java.io.Serializable;\n \n+import javax.persistence.Query;\n+\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.StoreException;\n@@ -35,6 +37,7 @@\n  * @since 2.0.0\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class QueryTimeoutException\n     extends javax.persistence.QueryTimeoutException\n     implements Serializable, ExceptionInfo {\n@@ -43,9 +46,12 @@\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n-    public QueryTimeoutException(String msg, Throwable[] nested,\n-        Object failed, boolean fatal) {\n-        super(msg);\n+    public QueryTimeoutException(String msg, Throwable[] nested, Object failed) {\n+        this(msg, nested, failed, false);\n+    }\n+    \n+    public QueryTimeoutException(String msg, Throwable[] nested, Object failed, boolean fatal) {\n+        super(msg, nested == null ? null : nested[0], failed instanceof Query ? (Query)failed : null);\n         _nested = nested;\n         _failed = failed;\n         _fatal = fatal;"},{"sha":"10ac2b31783102419cc42bddf079124a1433f76b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -76,7 +76,6 @@\n import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n \n-import serp.util.Numbers;\n \n /**\n  * Custom SAX parser used by the system to quickly parse persistence\n@@ -209,6 +208,7 @@\n \n     private Class<?> _listener = null;\n     private Collection<LifecycleCallbacks>[] _callbacks = null;\n+    private Collection<Class<?>> _listeners = null;\n     private int[] _highs = null;\n     private boolean _isXMLMappingMetaDataComplete = false;\n \n@@ -906,8 +906,8 @@ protected boolean startClass(String elem, Attributes attrs)\n             meta.setSourceMode(MODE_META, true);\n             Locator locator = getLocation().getLocator();\n             if (locator != null) {\n-                meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-                meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+                meta.setLineNumber(locator.getLineNumber());\n+                meta.setColNumber(locator.getColumnNumber());\n             }\n             meta.setListingIndex(_clsPos);\n             String name = attrs.getValue(\"name\");\n@@ -1049,8 +1049,8 @@ protected boolean startSequenceGenerator(Attributes attrs) {\n         meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            meta.setLineNumber(locator.getLineNumber());\n+            meta.setColNumber(locator.getColumnNumber());\n         }\n         return true;\n     }\n@@ -1678,8 +1678,8 @@ protected boolean startNamedQuery(Attributes attrs)\n         }\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            meta.setLineNumber(locator.getLineNumber());\n+            meta.setColNumber(locator.getColumnNumber());\n         }\n         Object cur = currentElement();\n         Object scope = (cur instanceof ClassMetaData)\n@@ -1765,8 +1765,8 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n         meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            meta.setLineNumber(locator.getLineNumber());\n+            meta.setColNumber(locator.getColumnNumber());\n         }\n         if (isMetaDataMode())\n             meta.setSourceMode(MODE_META);\n@@ -1832,6 +1832,14 @@ private boolean startExcludeSuperclassListeners(Attributes attrs)\n     private boolean startEntityListener(Attributes attrs)\n         throws SAXException {\n         _listener = classForName(attrs.getValue(\"class\"));\n+        if (!_conf.getCallbackOptionsInstance().getAllowsDuplicateListener()) {\n+            if (_listeners == null)\n+                _listeners = new ArrayList<Class<?>>();\n+            if (_listeners.contains(_listener)) \n+                return true;\n+            _listeners.add(_listener);    \n+        }\n+            \n         boolean system = currentElement() == null;\n         Collection<LifecycleCallbacks>[] parsed =\n             AnnotationPersistenceMetaDataParser.parseCallbackMethods(_listener,"},{"sha":"ec79ba42c95415f0739b140dd762a94b46b8f9c4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -711,4 +711,16 @@ private void renderFetches(StringBuilder buffer, Set<Fetch> fetches) {\n             buffer.append(((ExpressionImpl<?>)j).asValue(this)).append(\" \");\n         }\n     }\n+    \n+    /**\n+     * Returns a JPQL-like string, if this receiver is populated. Otherwise \n+     * returns <code>Object.toString()</code>.\n+     */\n+    public String toString() {\n+        try {\n+            return toCQL();\n+        } catch (Throwable t) {\n+            return super.toString();\n+        }\n+    }\n }"},{"sha":"b2648204e65c5f1cc516ff1d40f0f6ccb2487a3c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -19,6 +19,7 @@\n \n package org.apache.openjpa.persistence.meta;\n \n+import java.util.Collection;\n import java.util.Set;\n \n import javax.persistence.metamodel.Attribute;\n@@ -199,7 +200,7 @@ public final BindableType getBindableType() {\n         public final PersistentAttributeType getPersistentAttributeType() {\n             if (!fmd.isDeclaredTypePC())\n                 return super.getPersistentAttributeType();\n-            return fmd.getMappedByMetaData() == null \n+            return fmd.getMappedByMetaData() == null || !fmd.getType().isAssignableFrom(Collection.class)\n                  ? PersistentAttributeType.ONE_TO_ONE\n                  : PersistentAttributeType.ONE_TO_MANY;\n         }"},{"sha":"f3ffe970bec32147312c70448dfc2985517a2662","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleDelegatingClassLoader.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleDelegatingClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleDelegatingClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleDelegatingClassLoader.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.osgi;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Enumeration;\n+\n+import org.osgi.framework.Bundle;\n+\n+/**\n+ * This is a simple ClassLoader that delegates to the Bundle\n+ * and is used by the PersistenceUnitInfo\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class BundleDelegatingClassLoader extends ClassLoader {\n+\n+  private final Bundle bundle;\n+  \n+  public BundleDelegatingClassLoader(Bundle b) {\n+    bundle = b;\n+  }\n+  \n+  @Override\n+  protected Class<?> findClass(String className) throws ClassNotFoundException {\n+    return bundle.loadClass(className);\n+  }\n+\n+  @Override\n+  protected URL findResource(String resName) {\n+    return bundle.getResource(resName);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  protected Enumeration<URL> findResources(String resName) throws IOException {\n+    return bundle.getResources(resName);\n+  }\n+\n+}"},{"sha":"1b8f371279aa715d2e083ea9b91d6e25dde8ef46","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleUtils.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleUtils.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleUtils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/BundleUtils.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.osgi;\n+\n+// DO NOT import any org.osgi packages or classes here!\n+\n+/**\n+ * OSGi helper class and methods.\n+ * All routines MUST use reflection, so we don't have any hard-coded\n+ * runtime depends on OSGi classes for Java SE and EE users.\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class BundleUtils {\n+\n+    public static boolean runningUnderOSGi() {\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            Class<?> c = Class.forName(\"org.osgi.framework.Bundle\");\n+            c = Class.forName(\"org.osgi.framework.BundleActivator\");\n+            c = Class.forName(\"org.osgi.framework.BundleContext\");\n+            c = Class.forName(\"org.osgi.framework.ServiceRegistration\");\n+            return true;\n+        } catch (ClassNotFoundException e) {\n+            // no-op - catch, eat and return false below\n+        } catch (NoClassDefFoundError e) {\n+            // no-op - catch, eat and return false below\n+        }\n+        return false;\n+    }\n+\n+    /* (non-Javadoc)\n+     * OPENJPA-1491 Allow us to use the OSGi Bundle's ClassLoader instead of the application one.\n+     * Uses reflection so we don't have any runtime depends on OSGi classes for Java SE and EE users.\n+     */\n+    public static ClassLoader getBundleClassLoader() {\n+        ClassLoader cl = null;\n+        if (runningUnderOSGi()) {\n+            try {\n+                Class<?> c = Class.forName(\"org.apache.openjpa.persistence.osgi.PersistenceActivator\");\n+                cl = (ClassLoader) c.getMethod(\"getBundleClassLoader\").invoke(null);\n+            } catch (Throwable t) {\n+                // fail-fast\n+                throw new RuntimeException(t);\n+            }\n+        }\n+        return cl;\n+    }\n+\n+}"},{"sha":"d72b778f31af8139d058600f9fef2cd2f9f7ad93","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/PersistenceActivator.java","status":"renamed","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/PersistenceActivator.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/PersistenceActivator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/PersistenceActivator.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -14,13 +14,14 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-package org.apache.openjpa.osgi;\n+package org.apache.openjpa.persistence.osgi;\n \n import java.util.Hashtable;\n \n import javax.persistence.spi.PersistenceProvider;\n \n import org.apache.openjpa.persistence.PersistenceProviderImpl;\n+import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleActivator;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.ServiceRegistration;\n@@ -37,12 +38,14 @@\n     // following would be set by Aries to expose their OSGi enabled provider\n     public static final String PERSISTENCE_PROVIDER = PersistenceProvider.class.getName();\n     public static final String OSGI_PERSISTENCE_PROVIDER = PersistenceProviderImpl.class.getName();\n-    private ServiceRegistration svcReg = null;\n+    private static BundleContext ctx = null;\n+    private static ServiceRegistration svcReg = null;\n \n     /* (non-Javadoc)\n      * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)\n      */\n     public void start(BundleContext ctx) throws Exception {\n+        this.ctx = ctx;\n         PersistenceProvider provider = new PersistenceProviderImpl();\n         Hashtable<String, String> props = new Hashtable<String, String>();\n         props.put(PERSISTENCE_PROVIDER_ARIES, OSGI_PERSISTENCE_PROVIDER);\n@@ -57,6 +60,21 @@ public void stop(BundleContext ctx) throws Exception {\n             svcReg.unregister();\n             svcReg = null;\n         }\n+        this.ctx = null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * OPENJPA-1491 Allow us to use the OSGi Bundle's ClassLoader instead of the application one.\n+     * This class and method are dynamically loaded by BundleUtils, so any method signature changes\n+     * here need to also be reflected in BundleUtils.getBundleClassLoader()\n+     */\n+    public static ClassLoader getBundleClassLoader() {\n+        ClassLoader cl = null;\n+        if (ctx != null) {\n+            Bundle b = ctx.getBundle();\n+            cl = new BundleDelegatingClassLoader(b);\n+        }\n+        return cl;\n     }\n \n }","previous_filename":"openjpa/src/main/java/org/apache/openjpa/osgi/PersistenceActivator.java"},{"sha":"0ddea36e4f1d6ddb4de2195a18bc22cf510e4e92","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/package.html","status":"renamed","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/package.html","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/osgi/package.html?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -1,4 +1,3 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n@@ -17,7 +16,15 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project name=\"hellojpa\" default=\"run\">\n-    <property name=\"example\" value=\"hellojpa\"/>\n-    <import file=\"../build.xml\"/>\n-</project>\n+<html>\n+<body>\n+<p><strong>OpenJPA JPA</strong></p>\n+\n+<p>\n+    This package bridges OpenJPA as a OSGi Bundle. \n+</p>\n+    This package while making OpenJPA runtime available as a OSGi Bundle also\n+    ensures that OpenJPA runtime has no mandatory runtime dependency on OSGi libraries\n+    when operating in a non-OSGi environment. \n+</body>\n+</html>","previous_filename":"openjpa-integration/osgi-itests/src/main/java/hellojpa/build.xml"},{"sha":"ef65fa9d9ae1a1a72a92f1fbb9592fb8efb853a8","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -70,7 +70,7 @@ unnamed-fg: \"{0}\" declares an unnamed fetch group.  All fetch groups \\\n bad-fg-field: Fetch group \"{0}\" in type \"{1}\" includes field \"{2}\", but \\\n \tthis field is not declared in \"{1}\", or is not persistent.  Currently, \\\n \tOpenJPA only supports declared fields in fetch groups.\n-missing-included-fg:\"{0}\" declares a fetch group \"{1}\" includes \"{2}\". But \\\n+missing-included-fg: \"{0}\" declares a fetch group \"{1}\" which includes \"{2}\", but \\\n \tthe included fetch group \"{2}\" can not be found in \"{0}\". Currently, all \\\n \tincluded fetch groups must be declared within the same entity scope.\n not-update-delete-query: Cannot perform an update or delete operation \\\n@@ -140,6 +140,8 @@ map-persistent-types-skipping-non-url: Skipping persistent type location \\\n map-persistent-types-skipping-class: Skipping persistent type location \\\n     association for location \"{0}\" since it is a class, and will not \\\n     need to be re-parsed later.\n+map-persistent-types-skipping-dir: Skipping persistent type location \\\n+    association for location \"{0}\" since it is a directory.\n no-setter-for-getter: No setter was found for method {0} in type {1} while \\\n     searching for persistent properties. This method will be ignored. If you \\\n     intended for this to be persistent, please add a corresponding setter, \\\n@@ -227,3 +229,4 @@ create-emf-depend-error: Failed to create a provider for \"{0}\" because a \\\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query.\n cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  \n+null-detach: Can not detach null entity\n\\ No newline at end of file"},{"sha":"0edfccca109626df1602036b4486fff6f0d84d41","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -27,7 +27,7 @@ access-none: Class \"{0}\" has not explicitly annotated any access type and \\\n field-missing: \"{0}\" is not a managed field in \"{1}\". Available fields are {2}.\n field-not-decl: \"{0}\" is not declared in \"{1}\" itself but one of its \\\n \tpersistent super class \"{2}\"\n-field-type-mismatch: Actual type of field \"{0}\" \"{1}\" does not match with the \\\n+field-type-mismatch: Actual type \"{1}\" of field \"{0}\" does not match with the \\\n \texpected type \"{2}\"\n field-element-type-mismatch: Actual element type of field \"{0}\" \"{1}\" does not \\\n \tmatch with the expected element type \"{2}\"\n@@ -52,8 +52,8 @@ mmg-bad-log: Log level specified in -Alog option \"{0}\" is not recognized. \\\n \n meta-class-no-anno: Meta class \"{0}\" registered for \"{1}\" is not annotated \\\n \twith \"{2}\" annotation.\t\n-meta-field-mismatch: The field \"{0}\" in meta class \"{1}\" is of type \"{2}\" does \\\n-\tnot match with the persistent property type \"{3}\".   \n+meta-field-mismatch: The field \"{0}\" in meta class \"{1}\" is of type \"{2}\" \\\n+\twhich does not match the persistent property type \"{3}\".   \n type-wrong-category:\"{0}\" categorized as \"{1}\" should be a \"{2}\"\n mmg-asl-header: Licensed to the Apache Software Foundation (ASF) under one \\\n \tor more contributor license agreements.  See the NOTICE file distributed \\\n@@ -81,4 +81,4 @@ attr-not-found-decl-map: Declared Map attribute \"{0}\" of {1} key type and {2} va\n decl-version-not-found: Declared version attribute of {1} type not found in {2} \n version-not-found: Version attribute of {1} type not found in {2}\n generic-type-param: Can not determine generic type parameter for field {0} of type {1} in {2}. \\\n-\tUsing java.lang.Object.\n\\ No newline at end of file\n+\tUsing java.lang.Object."},{"sha":"76c38ec3a3e9d2e1fd76f4acf2565f761492a1ea","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":147,"deletions":6,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -1,4 +1,4 @@\n-                          Apache OpenJPA 2.0.0-beta2\n+                          Apache OpenJPA 2.0.0-beta3\n                           --------------------------\n \n Content\n@@ -19,7 +19,7 @@ Content\n \n Overview\n --------\n-   The Apache OpenJPA community is proud to release a Beta 2 distribution of\n+   The Apache OpenJPA community is proud to release a Beta 3 distribution of\n    OpenJPA 2.0.0. This distribution is based on the final JSR 317 Java \n    Persistence API, Version 2.0 specification and passes the JPA 2.0 TCK,\n    while remaining backwards compatiable with prior releases based on the\n@@ -72,8 +72,8 @@ Overview\n      Properties, LockModeType, and Detach\n    * And many more...\n \n-   This Beta 2 distribution is based upon the contributions provided in\n-   development iterations after the Beta, as defined in the JPA 2.0 Roadmap at:\n+   This Beta 3 distribution is based upon the contributions provided in\n+   development iterations after the Beta 2, as defined in the JPA 2.0 Roadmap:\n       http://openjpa.apache.org/jpa-20-roadmap.html\n \n    The JPA 2.0 Roadmap contains a complete list of implemented features and\n@@ -163,26 +163,114 @@ Getting Involved\n         * Bugs and other issues can be posted on the project JIRA.\n \n \n+Included Changes in OpenJPA 2.0.0 Beta 3\n+----------------------------------------\n+\n+Sub-task\n+--------\n+    * [OPENJPA-1101] - OSGi Integration tests\n+    * [OPENJPA-1505] - Add a boolean provision CallbackOptions.AllowsDuplicateListener \n+\n+Bug\n+---\n+    * [OPENJPA-740] - In MySQL use LONGBLOB, MEDIUMBLOB etc.. when needed, cause BLOB only holds 64kb of data.\n+    * [OPENJPA-774] - Executing native queries with Firebird\n+    * [OPENJPA-1097] - Detachment processing of our proxied mutable types (Date, Timestamp, etc) needs to be consistent\n+    * [OPENJPA-1234] - Make AllowFailure configurable\n+    * [OPENJPA-1248] - LOB streaming does not work as expected\n+    * [OPENJPA-1360] - ReverseMappingTool omits nullable, length, etc. when ClassMapping.setEmbedded(true) is called\n+    * [OPENJPA-1395] - MappingTool attempts to create table in Oracle even when the table already exist\n+    * [OPENJPA-1406] - (In)Compatibility section in OpenJPA doc needs some work...\n+    * [OPENJPA-1410] - Class linkage exception when creating an EMF with OpenJPA M3\n+    * [OPENJPA-1438] - Fail to remove an entity which has derived identity\n+    * [OPENJPA-1455] - SynchronizeMapping ALTER TABLE ADD COLUMN fails with column already exist exception\n+    * [OPENJPA-1458] - Named parameters are not handled by OpenJPA correctly\n+    * [OPENJPA-1477] - Multithreaded attempt to set Query parameter occassionally fails\n+    * [OPENJPA-1482] - NoSuchMethodError when calling setVersion on an enhanced property access Entity\n+    * [OPENJPA-1486] - Lazy fetched embeddable should not be materialized in the query result\n+    * [OPENJPA-1491] - org.apache.openjpa.kernel.Bootstrap uses the application classloader to load OpenJPA internals\n+    * [OPENJPA-1500] - DataCache types and excludedTypes are case sensitive\n+    * [OPENJPA-1503] - Metamodel class loading fails with security manager\n+    * [OPENJPA-1506] - ConfigurationImpl.equals fails using a OpenJPA derived provider\n+    * [OPENJPA-1524] - ManagedRuntime does not work for OSGi\n+    * [OPENJPA-1535] - Inconsistency in exceptions thrown from MetaDataRepository.resolve()\n+    * [OPENJPA-1536] - SQL with outer join cannot handle null columns when inheritance is involved\n+    * [OPENJPA-1538] - Move hard coded text in OpenJPAVersion.java to localizer.properties\n+    * [OPENJPA-1542] - Support openjpa.DataCache Types and ExcludedTypes configuration\n+    * [OPENJPA-1543] - Need to change fragmented messages that are combined by PreparedQueryImpl and PreparedQueryCacheImpl to complete messages\n+    * [OPENJPA-1544] - Remove WebSphere version number from org/apache/ee/localizer.properties\n+    * [OPENJPA-1546] - OpenJPA doesn't work as internal JPA inside web applicaion in JBoss AS\n+    * [OPENJPA-1547] - NOT IN with MEMBER OF returns syntax error\n+    * [OPENJPA-1556] - Exception thrown on first use of @Strategy in @Embeddable classes\n+    * [OPENJPA-1558] - Many side of a MxO relationship contains null reference if One side is loaded first.\n+    * [OPENJPA-1565] - QueryTimeOut and LockTimeOut exceptions are not raised correctly\n+    * [OPENJPA-1568] - Make createConnectionFactory() in JDBCConfigurationImpl public\n+    * [OPENJPA-1570] - Exception using @Strategy in @MappedSuperclass or @Embeddable classes\n+    * [OPENJPA-1571] - The change in the element collection is not persisted to the database during merging a detached entity\n+    * [OPENJPA-1573] - Incorrect SQL for HAVING = entity variable\n+    * [OPENJPA-1575] - Query parameter on externalized field breaks Prepared Query Cache\n+    * [OPENJPA-1576] - maven plugin broken as of 3/16/2010 2:30 AM PST using openjpa-2.0.0-SNAPSHOT \n+    * [OPENJPA-1577] - Using @Strategy in Queries not working properly\n+    * [OPENJPA-1578] - CacheStoreMode.REFRESH is not recognized\n+    * [OPENJPA-1580] - Using firstResult and maxResults in queries is not working properly\n+    * [OPENJPA-1581] - getCache() should throw IllegalStateException if the EMF has been closed. \n+    * [OPENJPA-1583] - Update by query fails on entities using Timestamp as Version field\n+    * [OPENJPA-1588] - modify 925451 revision for setProperty processing for enums\n+    * [OPENJPA-1596] - Index name too long for DB2 zOS\n+\n+Improvement\n+-----------\n+    * [OPENJPA-979] - Define process for contributions \n+    * [OPENJPA-1118] - code changes towards broader use of JDK5 features\n+    * [OPENJPA-1443] - Turn on some additional DataCache and PCData testcases\n+    * [OPENJPA-1492] - Change access on ReverseMappingTool#getAnnotationsForMeta(Object) from private to public\n+    * [OPENJPA-1498] - Update localizer.properties files for easier translation\n+    * [OPENJPA-1530] - MySQL storage engine support\n+    * [OPENJPA-1531] - The DataCache EvictionSchedule property should accept other time formats.\n+    * [OPENJPA-1539] - DataCacheManager should cache whether or not a given type is cacheable or not.\n+    * [OPENJPA-1548] - Miscellaneous ClassMetaData performance improvements\n+    * [OPENJPA-1549] - StateManagerImpl performance improvement\n+    * [OPENJPA-1551] - Allow connectionFactoryName to be specified when creating an EntityManager\n+    * [OPENJPA-1552] - Enable EntityManager to perform property QueryImpl creation by its subclass\n+    * [OPENJPA-1561] - Cache Criteria Query\n+    * [OPENJPA-1566] - Provide all the cached prepared query strings in QueryStatistics\n+    * [OPENJPA-1585] - Additional trace to relate SQL pushdowns with entity action or JPQL query\n+    * [OPENJPA-1591] - Refactor various parts to allow for greater extensibility\n+\n+Test\n+----\n+    * [OPENJPA-1411] - Include DayTrader test case to OpenJpa\n+    * [OPENJPA-1586] - Additional test single valued path expression which references qualified path in JPQL\n+\n+\n Included Changes in OpenJPA 2.0.0 Beta 2\n ----------------------------------------\n \n Bug\n ---\n     * [OPENJPA-1001] - java.lang.IndexOutOfBoundsException when executing attached test case\n     * [OPENJPA-1367] - H2 Database Engine does support cross join\n+    * [OPENJPA-1460] - Fix scope visibility of orm.xml when it is packaged in both ear file and war file\n+    * [OPENJPA-1483] - count (Distinct e) in JPQL gives wrong result when the id field is a compound primary key\n     * [OPENJPA-1485] - isLoaded util method does not behave per spec for collection attributes and basic type\n+    * [OPENJPA-1494] - Criteria query IN predicate generates incorrect SQL\n+    * [OPENJPA-1496] - Fail to set temporal parameter\n     * [OPENJPA-1504] - Validation junits should not rely on Hibernate Impl\n+    * [OPENJPA-1506] - ConfigurationImpl.equals fails using a OpenJPA derived provider\n     * [OPENJPA-1507] - NPE with a non-JDBC store manager\n     * [OPENJPA-1509] - Enum field types cannot be modified in an in-memory JPQL bulk update statement\n+    * [OPENJPA-1518] - Remove WARN messages for uncacheable finder select statements\n     * [OPENJPA-1533] - JPA2 select math mix with aggregate reports syntax error\n \n Improvement\n -----------\n+    * [OPENJPA-924] - Cache Finder Query for performance enhancement\n     * [OPENJPA-1475] - Performance improvement - don't call syncVersion() when no version is specified\n     * [OPENJPA-1493] - Performance improvement in SelectImpl.getTableIndex() for JPQL without subselect\n     * [OPENJPA-1502] - Improve msg for unrecognized EntityManager properties\n     * [OPENJPA-1512] - Include a BundleActivator to register ourselves as a javax.persistence.provider for Apache Aries\n     * [OPENJPA-1516] - Introduce new \"clear\" method on EntityManagerImpl\n+    * [OPENJPA-1517] - Reduce locking in LifecycleEventManager\n     * [OPENJPA-1520] - Move trunk (2.0.x) to require Java 6 to build (but target 1.5 runtime)\n     * [OPENJPA-1525] - TestCacheMarshallerEndToEnd.Log requires to implement warn() method\n     * [OPENJPA-1528] - Upgrade to latest MySQL 5.1.12 for junit tests\n@@ -199,10 +287,12 @@ Sub-task\n --------\n     * [OPENJPA-1103] - Remove early-access disclaimer from the NOTICE files once the spec is released\n     * [OPENJPA-1115] - Finish support for delimited identifiers\n+    * [OPENJPA-1345] - Update to JPA Spec Version EA9 (dated 10-08-2009)\n     * [OPENJPA-1347] - Upgrade to Validation API 1.0.0.GA\n     * [OPENJPA-1353] - Add legal info to the docs\n     * [OPENJPA-1358] - Support CacheRetrieve/StoreMode properties for find()/refresh() operation\n     * [OPENJPA-1404] - Add find method that accepts properties to entity manager\n+    * [OPENJPA-1405] - Add refresh method that accepts properties to entity manager\n     * [OPENJPA-1453] - Add support for testing with final JPA 2.0 TCK\n     * [OPENJPA-1476] - Turn off QueryCache by default\n \n@@ -215,12 +305,13 @@ Bug\n     * [OPENJPA-757] - Map existing OpenJPA extensions to new features of JPA 2.0\n     * [OPENJPA-859] - OpenJPA requires all persistent fields to be specified on an XML defined entity\n     * [OPENJPA-944] - FetchAttribute.recursionDepth = -1 does not load properly self referenced entities in a complex relation\n-    * [OPENJPA-991] - Implement LockTimeout using db specific server-side lock timeout feature\n     * [OPENJPA-993] - PCEnhancer can't execute if a non-OpenJPA PU is found\n     * [OPENJPA-1005] - Add PersistenceXMLSchemaVersion(); support\n+    * [OPENJPA-1020] - eager fetching of PersistentCollection of a primitive type fails\n     * [OPENJPA-1025] - AbstractResultList.subList throws UnsupportedOperationException\n     * [OPENJPA-1046] - Unique Constraint on MappedSupperClass causes NullPointerException\n     * [OPENJPA-1141] - NPE at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1400)\n+    * [OPENJPA-1142] - OptimisticLockException thrown on Query.getResultList() when Pessimistic Lock is applied\n     * [OPENJPA-1173] - Update PostgreSQL support for 8.4.x\n     * [OPENJPA-1185] - Subquery overhaul\n     * [OPENJPA-1197] - NativeQueries fail with MySQL\n@@ -238,6 +329,7 @@ Bug\n     * [OPENJPA-1341] - PostRemove not invoked after database record was deleted\n     * [OPENJPA-1344] - Query [get|set]LockMode & Em getLockMode not throwing correct exceptions\n     * [OPENJPA-1349] - Compatibility options are not set appropriately for spec level when emf is created by JEE container\n+    * [OPENJPA-1350] - Race condition in the MetaDataRepository\n     * [OPENJPA-1351] - java.lang.ClassCastException: javax.naming.Reference incompatible with javax.sql.DataSource\n     * [OPENJPA-1352] - Merge fails if an entity has an element collection which is contructed using Arrays.asList\n     * [OPENJPA-1354] - Configuring DBCP connection pool with connection properties breaks when user/pasword is specifed and javax.* configuration is set to DBCP Driver\n@@ -250,6 +342,7 @@ Bug\n     * [OPENJPA-1379] - Locking problem when using timestamp QueryCache eviction policy.\n     * [OPENJPA-1380] - Query not getting evicted from QueryCache\n     * [OPENJPA-1381] - IllegalStateException on query method call after named query is created twice.\n+    * [OPENJPA-1383] - tests rely on US date formatting without setting the correct Locale\n     * [OPENJPA-1384] - ClassNotFoundException for custom DBDictionary used by EJB\n     * [OPENJPA-1385] - Parameter in having clause of Criteria query not recognized\n     * [OPENJPA-1386] - Metamodel Generator does not handle field types that can hide another\n@@ -272,6 +365,7 @@ Bug\n     * [OPENJPA-1419] - Access path metadata set incorrectly for fetch joins in Criteria Query\n     * [OPENJPA-1425] - Literal value in projection can not be parameterized for all databases\n     * [OPENJPA-1431] - @Temporal annotation overrides the @Column annotation when using in conjunction with @ElementCollection\n+    * [OPENJPA-1432] - openjpa.Compatibility property for JPA 2.0 behavior may be overwritten if this property is an argument to createEntityManagerFactory\n     * [OPENJPA-1435] - Multi-1xm relation of same type in entity yields extra null in result collection\n     * [OPENJPA-1439] - Metamodel instantiation fails on InputStream properties\n     * [OPENJPA-1441] - NPE when enhancing a Serializable, versioned class\n@@ -294,6 +388,7 @@ Improvement\n     * [OPENJPA-839] - change pom.xml to publish sources as well.\n     * [OPENJPA-1085] - Add toString() method to PCState classes\n     * [OPENJPA-1172] - Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n+    * [OPENJPA-1258] - make warning message more friendly when other persistence provider configured by application\n     * [OPENJPA-1356] - Use maven-enforcer-plugin to verify proper Java and Maven levels\n     * [OPENJPA-1363] - Upgrade to latest commons-pool maintenance release\n     * [OPENJPA-1366] - Remove need for an EMF from OpenJPAPersistenceUtil and TraversableResolverImpl\n@@ -324,6 +419,7 @@ Test\n ----\n     * [OPENJPA-1153] - Test suite speed-up outside SingleEMFTestCase\n     * [OPENJPA-1342] - Build a mechanics to test JTA transaction semantics within JSE\n+    * [OPENJPA-1466] - Some JUnit test failures on Oracle backeend\n \n \n Included Changes in OpenJPA 2.0.0 Milestone 3\n@@ -339,12 +435,15 @@ Sub-task\n     * [OPENJPA-1078] - Cache mode elements added to persistence.xml\n     * [OPENJPA-1082] - Validation target groups via persistence.xml or createEMF properties Map\n     * [OPENJPA-1083] - org.apache.openjpa.persistence.kernel.TestEJBState fails with two exceptions ORA-00904 and ORA-02275 against oracleDB.\n+    * [OPENJPA-1105] - OpenJPA 2.0 iteration 8 primary task\n     * [OPENJPA-1106] - Integration tests for Bean Validation providers - Part 1\n     * [OPENJPA-1107] - Provide TraversableResolver for use with Bean Validation Factory\n     * [OPENJPA-1111] - Validation mode of callback should cause a PersistenceException when no provider is available\n+    * [OPENJPA-1112] - JPA2 Query result of embeddable object can not be further updated\n     * [OPENJPA-1130] - Use maven-jar-plugin to create a o-p-j-tests.jar to share base TestCase classes across modules\n     * [OPENJPA-1131] - Upgrade to maven-jar-plugin-2.2\n     * [OPENJPA-1149] - Add embeddables sample to the examples module\n+    * [OPENJPA-1155] - BrokerImpl.detachAllInternal() does not detach newly loaded entities\n     * [OPENJPA-1157] - Integration tests for Bean Validation providers - Part 2\n     * [OPENJPA-1164] - Make sleepTime in SimpleWBCallback configurable\n     * [OPENJPA-1167] - Use Geronimo EA4 JPA spec jar\n@@ -353,6 +452,9 @@ Sub-task\n     * [OPENJPA-1177] - Upgrade to Bean Validation JSR-303 1.0 CR3 Spec API\n     * [OPENJPA-1182] - PreUpdate and PostUpdate behavior\n     * [OPENJPA-1190] - Use Geronimo EA5 JPA spec jar\n+    * [OPENJPA-1191] - Implement Tuple interface\n+    * [OPENJPA-1194] - LockManager tests call platformSpeedTest() for every test method\n+    * [OPENJPA-1202] - Compile against Geronimo JPA EA6\n     * [OPENJPA-1208] - Set specification level based upon persistence.xml version\n     * [OPENJPA-1210] - Specify derby timeouts via properties.\n     * [OPENJPA-1213] - query.setParameter() behaviour \n@@ -362,6 +464,7 @@ Sub-task\n     * [OPENJPA-1223] - Update documentation for autoOff config option\n     * [OPENJPA-1228] - Change in default value of exclude-unlisted-classes in JPA 2.0\n     * [OPENJPA-1231] - Bean Validation sample\n+    * [OPENJPA-1232] - Keys in an EmbeddedCollection are returned as PCData objects when DataCache is enabled\n     * [OPENJPA-1233] - Update DerbyDictionary with new reserved words\n     * [OPENJPA-1235] - Support for optional name property on UniqueConstraint annotation and XML\n     * [OPENJPA-1237] - WriteBehind configuration exception not thrown when it should be\n@@ -403,11 +506,13 @@ Bug\n     * [OPENJPA-1049] - Query against a MappedSuperclass is not supported\n     * [OPENJPA-1061] - Entities extending from a Mapped Superclass that defines the ID fields share the same ObjectID type parameter\n     * [OPENJPA-1065] - Prepared Query Cache does not work with DataCache \n+    * [OPENJPA-1074] - OrderColumn does not maintain index upon inter-list element removal - Phase 1\n     * [OPENJPA-1100] - @Version-Annotation on Column with unsupported type (e.g. BigDecimal) is silently ignored, but should raise an error\n     * [OPENJPA-1116] - Annotation Strategy not working\n     * [OPENJPA-1117] - Missing AgentClass attribute in openjpa-all-xxx.jar manifest.mf\n     * [OPENJPA-1119] - NPE in InstrumentationFactory\n     * [OPENJPA-1120] - idEquals() broken in BigDecimalId and BigIntegerId\n+    * [OPENJPA-1121] - Enums cause a ClassNotFoundException in the MappingTool\n     * [OPENJPA-1125] - A message is logged about dynamically loading the class enhancer even though I'm using the -javaagent\n     * [OPENJPA-1127] - Typos in user manual and log messages\n     * [OPENJPA-1132] - Dropping constraints fails on MySQL\n@@ -426,7 +531,9 @@ Bug\n     * [OPENJPA-1201] - \"Mapped by\" field not set when contained in superclass \n     * [OPENJPA-1203] - JPA2 - createEMF should return null for unhandled PUs\n     * [OPENJPA-1204] - Argument type mismatch when an EmbeddedId contains an Emun type \n+    * [OPENJPA-1205] - Cannot retrieve Map<PersistenceCapable, PersistenceCapable> fields when DataCache is on\n     * [OPENJPA-1206] - Bean validation call to provider not Java 2 Enabled\n+    * [OPENJPA-1211] - Enable string navigation in a From expression.\n     * [OPENJPA-1217] - Ensure comparisons do not contain two parameters with Derby (ie SELECT ... WHERE ? = ?)\n     * [OPENJPA-1218] - Cache.evict(Clazz) should remove subclasses as well\n     * [OPENJPA-1221] - Change openjpa-integration module pom's to reflect proper artifact-id\n@@ -454,6 +561,7 @@ Bug\n \n Improvement\n -----------\n+    * [OPENJPA-5] - OpenJPA doesn't compile with JDBC 4\n     * [OPENJPA-250] - Reduce synchronization bottlenecks in data cache, metadata repository, and lifecycle event manager\n     * [OPENJPA-651] - Disable dangerous \"fallback enhancement\", make openjpa.RuntimeUnenhancedClasses=unsupported the default\n     * [OPENJPA-703] - Cache ResultObjectProvider data to improve query performance\n@@ -483,6 +591,7 @@ New Feature\n     * [OPENJPA-1089] - Provide for password encryption within persistence.xml\n     * [OPENJPA-1123] - MySQL query hints support\n     * [OPENJPA-1150] - Add WriteBehind mode to cache updates before flushing to backing store\n+    * [OPENJPA-1152] - OpenJPA 2.0 iteration 9 primary task\n     * [OPENJPA-1187] - Output control for generated canonical metamodel source code\n     * [OPENJPA-1195] - Allow datastore function as query expression\n     * [OPENJPA-1198] - Query by Example\n@@ -562,15 +671,18 @@ Sub-task\n     * [OPENJPA-937] - @AssociationOverride updates \n     * [OPENJPA-946] - Oracle create table(s) exceptions\n     * [OPENJPA-957] - Support lock timeout hint on applicable methods\n+    * [OPENJPA-959] - Support lock mode on Query interface\n     * [OPENJPA-960] - Support unwrap methods on EntityManager and Query interfaces\n     * [OPENJPA-961] - Support projection of element collection from a JPQL query\n+    * [OPENJPA-962] - Support the use of delimited-identifiers\n     * [OPENJPA-963] - Add query timeout tests for PU and Map properties\n     * [OPENJPA-964] - Finish updating sql-error-state- codes.xml for query timeout support on other DBs\n     * [OPENJPA-967] - JPA2 Query support for selction of KEY, VALUE, ENTRY of a Map value\n     * [OPENJPA-972] - Support standard provider properties in PersistenceProvider class\n     * [OPENJPA-978] - Allow third argument of JPQL SUBSTRING function to be optional\n     * [OPENJPA-990] - setHint should return IllegalArgumentException for invalid query/lock timeout values\n     * [OPENJPA-1012] - Test failures in TestManagedInterface with @ManagedInterface annotation when using JDK6\n+    * [OPENJPA-1016] - JPA2 Query support for embeddables; nested embeddables; relationships from embeddables\n     * [OPENJPA-1023] - Message files contain windows EOL characters\n     * [OPENJPA-1024] - JPA2 Query scalar expression  in subquery \n     * [OPENJPA-1026] - Ensure newlines at end of fie\n@@ -618,6 +730,7 @@ Bug\n     * [OPENJPA-787] - slices query.getSingleResult is broken\n     * [OPENJPA-792] - An entity persist may fail when @MappedSupercalss is specified. \n     * [OPENJPA-795] - enhancer throws an exception when parsing column name \"first.name\" because it thinks 'first' is a table name\n+    * [OPENJPA-798] - slices does can not work with sequences properly (no adding objects?)\n     * [OPENJPA-811] - With Oracle, OpenJPA allows setting non-nullable field to null\n     * [OPENJPA-815] - Exception is thrown when retrieving an entity which contains an embeddable and the embeddable contains a toMany relation \n     * [OPENJPA-818] - TCK module should use Geronimo JPA 2.0 EA jar\n@@ -654,6 +767,7 @@ Bug\n     * [OPENJPA-927] - Fix definition of javax.persistence.query.timeout property\n     * [OPENJPA-928] - getSupportedProperties() shows wsjpa property by default\n     * [OPENJPA-933] - Database version detection in MySQLDictionary is not reliable\n+    * [OPENJPA-935] - Removing entities with Embedded field issue multiple delete statements\n     * [OPENJPA-947] - Overly verbose TestCases\n     * [OPENJPA-951] - Javadoc jar file does not contain legal files\n     * [OPENJPA-954] - openjpa-slice build fails due to tests relying on openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AllowFailure.java\n@@ -662,6 +776,7 @@ Bug\n     * [OPENJPA-970] - SchemaToolTask does not have \"dropTables\" argument\n     * [OPENJPA-973] - Allow DB2 JCC driver to work with Informix database\n     * [OPENJPA-974] - Docs:  Add new Exception types\n+    * [OPENJPA-981] - @Replicated is only recognized for root instance but not the instanes reachable from the root during persist() operation.\n     * [OPENJPA-992] - Failed to throw EntityExistException on duplicated persist in DB2\n     * [OPENJPA-999] - Missing sql-warning in the localizer.properties\n     * [OPENJPA-1002] - Select range doesn't work on Oracle JDBC driver\n@@ -670,6 +785,7 @@ Bug\n     * [OPENJPA-1028] - ClassCastException during findBy when embeddable is involved\n     * [OPENJPA-1029] - SQLServerDictionary causes NumberFormatException if MS SQL Server JDBC driver is used\n     * [OPENJPA-1031] - Update docs that refer to OpenJPAEntityManager.getExtent(..)\n+    * [OPENJPA-1040] - Fix code formatting errors introduced by OPENJPA-1010\n     * [OPENJPA-1041] - OrderBy on nested embeddables is not working\n     * [OPENJPA-1046] - Unique Constraint on MappedSupperClass causes NullPointerException\n     * [OPENJPA-1047] - Unique Constraint on sibling classes causes name conflict\n@@ -681,12 +797,14 @@ Bug\n     * [OPENJPA-1058] - Duplicate rows in DB when UniqueConstraint set\n     * [OPENJPA-1060] - Attempting to returning a list over RMI/IIOP results in serialization exception\n     * [OPENJPA-1067] - SetQueryTimeout(x) where x != 0 causes SQLException with DB2 on Z/OS\n+    * [OPENJPA-1070] - Restore support for composite foreign keys on MySQL\n     * [OPENJPA-1072] - Nested embeddable with a relationship to an Entity with a generated id doesn't persist the relationship\n     * [OPENJPA-1088] - Build updates for openjpa-examples and openjpa-integration/examples\n     * [OPENJPA-1091] - ReverseMappingTool fails for openjpa-examples/reversemapping sample\n     * [OPENJPA-1099] - <xmp> tag in Javadoc comments causes Javadoc corruption\n \n-** Improvement\n+Improvement\n+-----------\n     * [OPENJPA-213] - @Column with precision and scale should result in NUMERIC(precision, scale)\n     * [OPENJPA-736] - Combine insert and select SQL together for generated Id strategy=GenerationType.IDENTITY \n     * [OPENJPA-742] - Add line number and column number to QueryMetaData\n@@ -721,6 +839,7 @@ Bug\n     * [OPENJPA-1056] - Add support for Sybase in the query timeout tests\n     * [OPENJPA-1063] - Create a new openjpa-all artifact to include runtime depends\n     * [OPENJPA-1066] - Generated ID starting with 0 can cause unexpected results\n+    * [OPENJPA-1079] - Allow client to access the distributed JDBC connection\n \n New Feature\n -----------\n@@ -736,6 +855,7 @@ New Feature\n     * [OPENJPA-918] - Stored procedures not handling returns properly\n     * [OPENJPA-956] - OpenJPA 2.0 iteration 5 primary task\n     * [OPENJPA-966] - Support Replication-enabled MySQL  \n+    * [OPENJPA-985] - Support dynamic addition of slices\n     * [OPENJPA-1005] - Add PersistenceXMLSchemaVersion(); support\n     * [OPENJPA-1007] - OpenJPA 2.0 iteration 6 primary task\n \n@@ -757,6 +877,8 @@ Included Changes in OpenJPA 2.0.0 Milestone 1\n Sub-task\n --------\n     * [OPENJPA-765] - Check for insertable or updateable before checking value for null\n+    * [OPENJPA-802] - Support @OrderColumn annotation and XML-based definition\n+    * [OPENJPA-806] - Support Criteria API for JPA 2.0 - Iteration 1\n     * [OPENJPA-857] - Detect and store JPA version\n     * [OPENJPA-899] - Add support for JPA2.0 method Query.getHints()\n     * [OPENJPA-900] - Add support for JPA2.0 method Query.getSupportedHints()\n@@ -765,14 +887,29 @@ Sub-task\n \n Bug\n ---\n+    * [OPENJPA-645] - Date millisecond precision lost for Informix IDS and SQLServer\n+    * [OPENJPA-662] - Version field returns null when explicitly projected in SELECT clause\n+    * [OPENJPA-677] - Single Table Inheritance Strategy causes entity identity issues\n+    * [OPENJPA-680] - Flush followed by refresh on a new instance returns an instance with all fields but id cleared\n+    * [OPENJPA-699] - SQLWarnings not handled properly with WarningAction set to \"handle\"\n+    * [OPENJPA-794] - issues with closing/opening entity manager (slices) (can't seem to be able to create multiple entityManagers )\n+    * [OPENJPA-799] - slices: can not handle multiple projections in one query ( select count(*), max(fieldA) .......)\n+    * [OPENJPA-801] - slices: basic query is failing on sort.. not sure why\n+    * [OPENJPA-812] - slices: aggregate queries fail if any slice has empty results\n+    * [OPENJPA-821] - slices: DistributedStoreQuery$UpdateExecutor calls executeDelete by mistake\n+    * [OPENJPA-824] - org.apache.openjpa.lib.util.ParseException when try to get property descriptor for property: CacheMarshallers\n+    * [OPENJPA-825] - slices: hangs with multithreaded true\n     * [OPENJPA-828] - Externalizer fails with ClassCastException with runtime enhancement\n+    * [OPENJPA-845] - Ordering across slice fails when ordering terms are not included in projection items\n     * [OPENJPA-886] - Certain query failing after svn:739123\n     * [OPENJPA-955] - MethodQL parameter passing broken\n     * [OPENJPA-1039] - Dynamic query predicates must not treat AND OR operators as associative\n \n Improvement\n -----------\n     * [OPENJPA-703] - Cache ResultObjectProvider data to improve query performance\n+    * [OPENJPA-760] - Better DBDictionary autodetection\n+    * [OPENJPA-841] - Create structures to hold Slice information with StateManangers\n     * [OPENJPA-858] - Allow postPersist be invoked immediately after persist()\n     * [OPENJPA-968] - Change in default detach() behavior for JPA 2.0\n \n@@ -792,3 +929,7 @@ Task\n ----\n     * [OPENJPA-995] - Migrate existing Criteria Query implementation as OpenJPA extension to prepare for upcoming JPA 2.0 spec changes\n \n+Test\n+----\n+    * [OPENJPA-766] - Tests that currently fail should be committed to the repository\n+"},{"sha":"331f1318e01134c5a1cb6aaa83e89f43bc2a102c","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":235,"deletions":7,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -1,7 +1,7 @@\n <html>\n-<title>Release Notes for Apache OpenJPA 2.0.0-beta2</title>\n+<title>Release Notes for Apache OpenJPA 2.0.0-beta3</title>\n <body>\n-<h1>Release Notes for Apache OpenJPA 2.0.0-beta2</h1>\n+<h1>Release Notes for Apache OpenJPA 2.0.0-beta3</h1>\n <p>\n <ul>\n   <li><a href=\"#Overview\">Overview</a></li>\n@@ -12,6 +12,7 @@ <h1>Release Notes for Apache OpenJPA 2.0.0-beta2</h1>\n   <li><a href=\"#Notice\">Notice</a></li>\n   <li><a href=\"#ReleaseNotes\">Release Notes</a></li>\n   <ul>\n+    <li><a href=\"#200beta3\">2.0.0 Beta 3</a></li>\n     <li><a href=\"#200beta2\">2.0.0 Beta 2</a></li>\n     <li><a href=\"#200beta\">2.0.0 Beta</a></li>\n     <li><a href=\"#200M3\">2.0.0 Milestone 3</a></li>\n@@ -26,7 +27,7 @@ <h1>Release Notes for Apache OpenJPA 2.0.0-beta2</h1>\n <h2><a name=\"Overview\"></a>Overview</h2>\n \n <P>\n-   The Apache OpenJPA community is proud to release a Beta 2 distribution of\n+   The Apache OpenJPA community is proud to release a Beta 3 distribution of\n    OpenJPA 2.0.0. This distribution is based on the final JSR 317 Java\n    Persistence API, Version 2.0 specification and passes the JPA 2.0 TCK,\n    while remaining backwards compatiable with prior releases based on the\n@@ -145,8 +146,8 @@ <h2><a name=\"Overview\"></a>Overview</h2>\n </ul>\n </p>\n \n-<p>This Beta 2 distribution is based upon the contributions provided in\n-development iterations after the Beta, as defined in the JPA 2.0 Roadmap at:\n+<p>This Beta 3 distribution is based upon the contributions provided in\n+development iterations after the Beta 2, as defined in the JPA 2.0 Roadmap at:\n <a href=\"http://openjpa.apache.org/jpa-20-roadmap.html\">http://openjpa.apache.org/jpa-20-roadmap.html</a></p>\n \n <p>The JPA 2.0 Roadmap contains a complete list of implemented features and\n@@ -227,6 +228,153 @@ <h2><a name=\"Notice\"></a>Notice</h2>\n <hr>\n <h2><a name=\"ReleaseNotes\">Release Notes</h2>\n \n+<hr>\n+<h3><a name=\"200beta3\">OpenJPA 2.0.0-beta3</h3>\n+<h4>Sub-task</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1101'>OPENJPA-1101</a>] -         OSGi Integration tests\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1505'>OPENJPA-1505</a>] -         Add a boolean provision CallbackOptions.AllowsDuplicateListener \n+</li>\n+</ul>\n+    \n+<h4>Bug</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-740'>OPENJPA-740</a>] -         In MySQL use LONGBLOB, MEDIUMBLOB etc.. when needed, cause BLOB only holds 64kb of data.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-774'>OPENJPA-774</a>] -         Executing native queries with Firebird\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1097'>OPENJPA-1097</a>] -         Detachment processing of our proxied mutable types (Date, Timestamp, etc) needs to be consistent\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1234'>OPENJPA-1234</a>] -         Make AllowFailure configurable\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1248'>OPENJPA-1248</a>] -         LOB streaming does not work as expected\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1360'>OPENJPA-1360</a>] -         ReverseMappingTool omits nullable, length, etc. when ClassMapping.setEmbedded(true) is called\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1395'>OPENJPA-1395</a>] -         MappingTool attempts to create table in Oracle even when the table already exist\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1406'>OPENJPA-1406</a>] -         (In)Compatibility section in OpenJPA doc needs some work...\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1410'>OPENJPA-1410</a>] -         Class linkage exception when creating an EMF with OpenJPA M3\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1438'>OPENJPA-1438</a>] -         Fail to remove an entity which has derived identity\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1455'>OPENJPA-1455</a>] -         SynchronizeMapping ALTER TABLE ADD COLUMN fails with column already exist exception\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1458'>OPENJPA-1458</a>] -         Named parameters are not handled by OpenJPA correctly\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1477'>OPENJPA-1477</a>] -         Multithreaded attempt to set Query parameter occassionally fails\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1482'>OPENJPA-1482</a>] -         NoSuchMethodError when calling setVersion on an enhanced property access Entity\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1486'>OPENJPA-1486</a>] -         Lazy fetched embeddable should not be materialized in the query result\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1491'>OPENJPA-1491</a>] -         org.apache.openjpa.kernel.Bootstrap uses the application classloader to load OpenJPA internals\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1500'>OPENJPA-1500</a>] -         DataCache types and excludedTypes are case sensitive\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1503'>OPENJPA-1503</a>] -         Metamodel class loading fails with security manager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1506'>OPENJPA-1506</a>] -         ConfigurationImpl.equals fails using a OpenJPA derived provider\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1524'>OPENJPA-1524</a>] -         ManagedRuntime does not work for OSGi\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1535'>OPENJPA-1535</a>] -         Inconsistency in exceptions thrown from MetaDataRepository.resolve()\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1536'>OPENJPA-1536</a>] -         SQL with outer join cannot handle null columns when inheritance is involved\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1538'>OPENJPA-1538</a>] -         Move hard coded text in OpenJPAVersion.java to localizer.properties\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1542'>OPENJPA-1542</a>] -         Support openjpa.DataCache Types and ExcludedTypes configuration\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1543'>OPENJPA-1543</a>] -         Need to change fragmented messages that are combined by PreparedQueryImpl and PreparedQueryCacheImpl to complete messages\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1544'>OPENJPA-1544</a>] -         Remove WebSphere version number from org/apache/ee/localizer.properties\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1546'>OPENJPA-1546</a>] -         OpenJPA doesn't work as internal JPA inside web applicaion in JBoss AS\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1547'>OPENJPA-1547</a>] -         NOT IN with MEMBER OF returns syntax error\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1556'>OPENJPA-1556</a>] -         Exception thrown on first use of @Strategy in @Embeddable classes\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1558'>OPENJPA-1558</a>] -         Many side of a MxO relationship contains null reference if One side is loaded first.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1565'>OPENJPA-1565</a>] -         QueryTimeOut and LockTimeOut exceptions are not raised correctly\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1568'>OPENJPA-1568</a>] -         Make createConnectionFactory() in JDBCConfigurationImpl public\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1570'>OPENJPA-1570</a>] -         Exception using @Strategy in @MappedSuperclass or @Embeddable classes\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1571'>OPENJPA-1571</a>] -         The change in the element collection is not persisted to the database during merging a detached entity\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1573'>OPENJPA-1573</a>] -         Incorrect SQL for HAVING = entity variable\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1575'>OPENJPA-1575</a>] -         Query parameter on externalized field breaks Prepared Query Cache\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1576'>OPENJPA-1576</a>] -         maven plugin broken as of 3/16/2010 2:30 AM PST using openjpa-2.0.0-SNAPSHOT \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1577'>OPENJPA-1577</a>] -         Using @Strategy in Queries not working properly\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1578'>OPENJPA-1578</a>] -         CacheStoreMode.REFRESH is not recognized\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1580'>OPENJPA-1580</a>] -         Using firstResult and maxResults in queries is not working properly\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1581'>OPENJPA-1581</a>] -         getCache() should throw IllegalStateException if the EMF has been closed. \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1583'>OPENJPA-1583</a>] -         Update by query fails on entities using Timestamp as Version field\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1588'>OPENJPA-1588</a>] -         modify 925451 revision for setProperty processing for enums\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1596'>OPENJPA-1596</a>] -         Index name too long for DB2 zOS\n+</li>\n+</ul>\n+    \n+<h4>Improvement</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-979'>OPENJPA-979</a>] -         Define process for contributions \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1118'>OPENJPA-1118</a>] -         code changes towards broader use of JDK5 features\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1443'>OPENJPA-1443</a>] -         Turn on some additional DataCache and PCData testcases\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1492'>OPENJPA-1492</a>] -         Change access on ReverseMappingTool#getAnnotationsForMeta(Object) from private to public\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1498'>OPENJPA-1498</a>] -         Update localizer.properties files for easier translation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1530'>OPENJPA-1530</a>] -         MySQL storage engine support\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1531'>OPENJPA-1531</a>] -         The DataCache EvictionSchedule property should accept other time formats.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1539'>OPENJPA-1539</a>] -         DataCacheManager should cache whether or not a given type is cacheable or not.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1548'>OPENJPA-1548</a>] -         Miscellaneous ClassMetaData performance improvements\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1549'>OPENJPA-1549</a>] -         StateManagerImpl performance improvement\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1551'>OPENJPA-1551</a>] -         Allow connectionFactoryName to be specified when creating an EntityManager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1552'>OPENJPA-1552</a>] -         Enable EntityManager to perform property QueryImpl creation by its subclass\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1561'>OPENJPA-1561</a>] -         Cache Criteria Query\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1566'>OPENJPA-1566</a>] -         Provide all the cached prepared query strings in QueryStatistics\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1585'>OPENJPA-1585</a>] -         Additional trace to relate SQL pushdowns with entity action or JPQL query\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1591'>OPENJPA-1591</a>] -         Refactor various parts to allow for greater extensibility\n+</li>\n+</ul>\n+                                \n+<h4>Test</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1411'>OPENJPA-1411</a>] -         Include DayTrader test case to OpenJpa\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1586'>OPENJPA-1586</a>] -         Additional test single valued path expression which references qualified path in JPQL\n+</li>\n+</ul>\n+\n+\n <hr>\n <h3><a name=\"200beta2\">OpenJPA 2.0.0-beta2</h3>\n <h4>Bug</h4>\n@@ -235,20 +383,34 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1367'>OPENJPA-1367</a>] -         H2 Database Engine does support cross join\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1460'>OPENJPA-1460</a>] -         Fix scope visibility of orm.xml when it is packaged in both ear file and war file\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1483'>OPENJPA-1483</a>] -         count (Distinct e) in JPQL gives wrong result when the id field is a compound primary key\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1485'>OPENJPA-1485</a>] -         isLoaded util method does not behave per spec for collection attributes and basic type\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1494'>OPENJPA-1494</a>] -         Criteria query IN predicate generates incorrect SQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1496'>OPENJPA-1496</a>] -         Fail to set temporal parameter\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1504'>OPENJPA-1504</a>] -         Validation junits should not rely on Hibernate Impl\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1506'>OPENJPA-1506</a>] -         ConfigurationImpl.equals fails using a OpenJPA derived provider\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1507'>OPENJPA-1507</a>] -         NPE with a non-JDBC store manager\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1509'>OPENJPA-1509</a>] -         Enum field types cannot be modified in an in-memory JPQL bulk update statement\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1518'>OPENJPA-1518</a>] -         Remove WARN messages for uncacheable finder select statements\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1533'>OPENJPA-1533</a>] -         JPA2 select math mix with aggregate reports syntax error\n </li>\n </ul>\n \n <h4>Improvement</h4>\n <ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-924'>OPENJPA-924</a>] -         Cache Finder Query for performance enhancement\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1475'>OPENJPA-1475</a>] -         Performance improvement - don't call syncVersion() when no version is specified\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1493'>OPENJPA-1493</a>] -         Performance improvement in SelectImpl.getTableIndex() for JPQL without subselect\n@@ -259,6 +421,8 @@ <h4>Improvement</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1516'>OPENJPA-1516</a>] -         Introduce new &quot;clear&quot; method on EntityManagerImpl\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1517'>OPENJPA-1517</a>] -         Reduce locking in LifecycleEventManager\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1520'>OPENJPA-1520</a>] -         Move trunk (2.0.x) to require Java 6 to build (but target 1.5 runtime)\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1525'>OPENJPA-1525</a>] -         TestCacheMarshallerEndToEnd.Log requires to implement warn() method\n@@ -288,6 +452,8 @@ <h4>Sub-task</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1306'>OPENJPA-1306</a>] -         Extended lock scope support\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1345'>OPENJPA-1345</a>] -         Update to JPA Spec Version EA9 (dated 10-08-2009)\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1347'>OPENJPA-1347</a>] -         Upgrade to Validation API 1.0.0.GA\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1353'>OPENJPA-1353</a>] -         Add legal info to the docs\n@@ -296,6 +462,8 @@ <h4>Sub-task</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1404'>OPENJPA-1404</a>] -         Add find method that accepts properties to entity manager\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1405'>OPENJPA-1405</a>] -         Add refresh method that accepts properties to entity manager\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1453'>OPENJPA-1453</a>] -         Add support for testing with final JPA 2.0 TCK\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1476'>OPENJPA-1476</a>] -         Turn off QueryCache by default\n@@ -318,12 +486,16 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-993'>OPENJPA-993</a>] -         PCEnhancer can't execute if a non-OpenJPA PU is found\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1020'>OPENJPA-1020</a>] -         eager fetching of PersistentCollection of a primitive type fails\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1025'>OPENJPA-1025</a>] -         AbstractResultList.subList throws UnsupportedOperationException\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1046'>OPENJPA-1046</a>] -         Unique Constraint on MappedSupperClass causes NullPointerException\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1141'>OPENJPA-1141</a>] -         NPE  at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1400)\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1142'>OPENJPA-1142</a>] -         OptimisticLockException thrown on Query.getResultList() when Pessimistic Lock is applied\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1185'>OPENJPA-1185</a>] -         Subquery overhaul\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1197'>OPENJPA-1197</a>] -         NativeQueries fail with MySQL \n@@ -352,6 +524,8 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1349'>OPENJPA-1349</a>] -         Compatibility options are not set appropriately for spec level when emf is created by JEE container\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1350'>OPENJPA-1350</a>] -         Race condition in the MetaDataRepository\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1351'>OPENJPA-1351</a>] -         java.lang.ClassCastException: javax.naming.Reference incompatible with javax.sql.DataSource\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1352'>OPENJPA-1352</a>] -         Merge fails if an entity has an element collection which is contructed using Arrays.asList\n@@ -372,6 +546,8 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1381'>OPENJPA-1381</a>] -         IllegalStateException on query method call after named query is created twice.\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1383'>OPENJPA-1383</a>] -         tests rely on US date formatting without setting the correct Locale\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1384'>OPENJPA-1384</a>] -         ClassNotFoundException for custom DBDictionary used by EJB\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1385'>OPENJPA-1385</a>] -         Parameter in having clause of Criteria query not recognized\n@@ -410,6 +586,8 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1431'>OPENJPA-1431</a>] -         @Temporal annotation overrides the @Column annotation when using in conjunction with @ElementCollection\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1432'>OPENJPA-1432</a>] -         openjpa.Compatibility property for JPA 2.0 behavior may be overwritten if this property is an argument to createEntityManagerFactory\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1435'>OPENJPA-1435</a>] -         Multi-1xm relation of same type in entity yields extra null in result collection\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1439'>OPENJPA-1439</a>] -         Metamodel instantiation fails on InputStream properties\n@@ -444,6 +622,8 @@ <h4>Bug</h4>\n \n <h4>Improvement</h4>\n <ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-5'>OPENJPA-5</a>] -         OpenJPA doesn't compile with JDBC 4\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-250'>OPENJPA-250</a>] -         Reduce synchronization bottlenecks in data cache, metadata repository, and lifecycle event manager\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-709'>OPENJPA-709</a>] -         Better naming for unique constraints\n@@ -452,12 +632,12 @@ <h4>Improvement</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-839'>OPENJPA-839</a>] -         change pom.xml to publish sources as well.\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-991'>OPENJPA-991</a>] -         Implement LockTimeout using db specific server-side lock timeout feature\n-</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1085'>OPENJPA-1085</a>] -         Add toString() method to PCState classes\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1172'>OPENJPA-1172</a>] -         Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1258'>OPENJPA-1258</a>] -         make warning message more friendly when other persistence provider configured by application\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1356'>OPENJPA-1356</a>] -         Use maven-enforcer-plugin to verify proper Java and Maven levels\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1363'>OPENJPA-1363</a>] -         Upgrade to latest commons-pool maintenance release\n@@ -526,6 +706,8 @@ <h4>Test</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1342'>OPENJPA-1342</a>] -         Build a mechanics to test JTA transaction semantics within JSE \n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1466'>OPENJPA-1466</a>] -         Some JUnit test failures on Oracle backeend\n+</li>\n </ul>\n \n \n@@ -541,12 +723,15 @@ <h4>Sub-task</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1078'>OPENJPA-1078</a>] - Cache mode elements added to persistence.xml</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1082'>OPENJPA-1082</a>] - Validation target groups via persistence.xml or createEMF properties Map</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1083'>OPENJPA-1083</a>] - org.apache.openjpa.persistence.kernel.TestEJBState fails with two exceptions ORA-00904 and ORA-02275 against oracleDB.</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1105'>OPENJPA-1105</a>] - OpenJPA 2.0 iteration 8 primary task</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1106'>OPENJPA-1106</a>] - Integration tests for Bean Validation providers - Part 1</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1107'>OPENJPA-1107</a>] - Provide TraversableResolver for use with Bean Validation Factory</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1111'>OPENJPA-1111</a>] - Validation mode of callback should cause a PersistenceException when no provider is available</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1112'>OPENJPA-1112</a>] - JPA2 Query result of embeddable object can not be further updated</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1130'>OPENJPA-1130</a>] - Use maven-jar-plugin to create a o-p-j-tests.jar to share base TestCase classes across modules</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1131'>OPENJPA-1131</a>] - Upgrade to maven-jar-plugin-2.2</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1149'>OPENJPA-1149</a>] - Add embeddables sample to the examples module</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1155'>OPENJPA-1155</a>] - BrokerImpl.detachAllInternal() does not detach newly loaded entities</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1157'>OPENJPA-1157</a>] - Integration tests for Bean Validation providers - Part 2</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1164'>OPENJPA-1164</a>] - Make sleepTime in SimpleWBCallback configurable</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1167'>OPENJPA-1167</a>] - Use Geronimo EA4 JPA spec jar</li>\n@@ -555,6 +740,9 @@ <h4>Sub-task</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1177'>OPENJPA-1177</a>] - Upgrade to Bean Validation JSR-303 1.0 CR3 Spec API</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1182'>OPENJPA-1182</a>] - PreUpdate and PostUpdate behavior</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1190'>OPENJPA-1190</a>] - Use Geronimo EA5 JPA spec jar</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1191'>OPENJPA-1191</a>] - Implement Tuple interface</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1194'>OPENJPA-1194</a>] - LockManager tests call platformSpeedTest() for every test method</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1202'>OPENJPA-1202</a>] - Compile against Geronimo JPA EA6</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1208'>OPENJPA-1208</a>] - Set specification level based upon persistence.xml version</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1210'>OPENJPA-1210</a>] - Specify derby timeouts via properties.</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1213'>OPENJPA-1213</a>] - query.setParameter() behaviour </li>\n@@ -564,6 +752,7 @@ <h4>Sub-task</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1223'>OPENJPA-1223</a>] - Update documentation for autoOff config option</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1228'>OPENJPA-1228</a>] - Change in default value of exclude-unlisted-classes in JPA 2.0</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1231'>OPENJPA-1231</a>] - Bean Validation sample</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1232'>OPENJPA-1232</a>] - Keys in an EmbeddedCollection are returned as PCData objects when DataCache is enabled</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1233'>OPENJPA-1233</a>] - Update DerbyDictionary with new reserved words</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1235'>OPENJPA-1235</a>] - Support for optional name property on UniqueConstraint annotation and XML</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1237'>OPENJPA-1237</a>] - WriteBehind configuration exception not thrown when it should be</li>\n@@ -601,16 +790,20 @@ <h4>Bug</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-932'>OPENJPA-932</a>] - Runtime enhancer doesn't work propery if there is a trailing persistence.xml file on the classpath.</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-934'>OPENJPA-934</a>] - Oversight in TestSequenceGenerator</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-973'>OPENJPA-973</a>] - Allow DB2 JCC driver to work with Informix database</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-974'>OPENJPA-974</a>] - Docs:  Add new Exception types</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-981'>OPENJPA-981</a>] - @Replicated is only recognized for root instance but not the instanes reachable from the root during persist() operation.</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1002'>OPENJPA-1002</a>] - Select range doesn't work on Oracle JDBC driver</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1043'>OPENJPA-1043</a>] - JPQL queries do not support queries on a MappedSuperclass</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1049'>OPENJPA-1049</a>] - Query against a MappedSuperclass is not supported</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1061'>OPENJPA-1061</a>] - Entities extending from a Mapped Superclass that defines the ID fields share the same ObjectID type parameter</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1065'>OPENJPA-1065</a>] - Prepared Query Cache does not work with DataCache </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1074'>OPENJPA-1074</a>] - OrderColumn does not maintain index upon inter-list element removal - Phase 1</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1100'>OPENJPA-1100</a>] - @Version-Annotation on Column with unsupported type (e.g. BigDecimal) is silently ignored, but should raise an error</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1116'>OPENJPA-1116</a>] - Annotation Strategy not working</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1117'>OPENJPA-1117</a>] - Missing AgentClass attribute in openjpa-all-xxx.jar manifest.mf</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1119'>OPENJPA-1119</a>] - NPE in InstrumentationFactory</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1120'>OPENJPA-1120</a>] - idEquals() broken in BigDecimalId and BigIntegerId</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1121'>OPENJPA-1121</a>] - Enums cause a ClassNotFoundException in the MappingTool</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1125'>OPENJPA-1125</a>] - A message is logged about dynamically loading the class enhancer even though I'm using the -javaagent</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1127'>OPENJPA-1127</a>] - Typos in user manual and log messages</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1132'>OPENJPA-1132</a>] - Dropping constraints fails on MySQL</li>\n@@ -629,7 +822,9 @@ <h4>Bug</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1201'>OPENJPA-1201</a>] - &quot;Mapped by&quot; field not set when contained in superclass </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1203'>OPENJPA-1203</a>] - JPA2 - createEMF should return null for unhandled PUs</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1204'>OPENJPA-1204</a>] - Argument type mismatch when an EmbeddedId contains an Emun type </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1205'>OPENJPA-1205</a>] - Cannot retrieve Map<PersistenceCapable, PersistenceCapable> fields when DataCache is on</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1206'>OPENJPA-1206</a>] - Bean validation call to provider not Java 2 Enabled</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1211'>OPENJPA-1211</a>] - Enable string navigation in a From expression.</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1217'>OPENJPA-1217</a>] - Ensure comparisons do not contain two parameters with Derby (ie SELECT ... WHERE ? = ?)</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1218'>OPENJPA-1218</a>] - Cache.evict(Clazz) should remove subclasses as well</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1221'>OPENJPA-1221</a>] - Change openjpa-integration module pom's to reflect proper artifact-id</li>\n@@ -688,6 +883,7 @@ <h4>New Feature</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1089'>OPENJPA-1089</a>] - Provide for password encryption within persistence.xml</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1123'>OPENJPA-1123</a>] - MySQL query hints support</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1150'>OPENJPA-1150</a>] - Add WriteBehind mode to cache updates before flushing to backing store</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1152'>OPENJPA-1152</a>] - OpenJPA 2.0 iteration 9 primary task</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1187'>OPENJPA-1187</a>] - Output control for generated canonical metamodel source code</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1195'>OPENJPA-1195</a>] - Allow datastore function as query expression</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1198'>OPENJPA-1198</a>] - Query by Example</li>\n@@ -764,14 +960,17 @@ <h4>Sub-task</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-931'>OPENJPA-931</a>] - Support derived identity (spec 2.4.1.2 Ex 5(a), 6 (a))</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-937'>OPENJPA-937</a>] - @AssociationOverride updates </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-957'>OPENJPA-957</a>] - Support lock timeout hint on applicable methods</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-959'>OPENJPA-959</a>] - Support lock mode on Query interface</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-960'>OPENJPA-960</a>] - Support unwrap methods on EntityManager and Query interfaces</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-961'>OPENJPA-961</a>] - Support projection of element collection from a JPQL query</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-962'>OPENJPA-962</a>] - Support the use of delimited-identifiers</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-963'>OPENJPA-963</a>] - Add query timeout tests for PU and Map properties</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-964'>OPENJPA-964</a>] - Finish updating sql-error-state- codes.xml for query timeout support on other DBs</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-967'>OPENJPA-967</a>] - JPA2 Query support for selction of KEY, VALUE, ENTRY of a Map value</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-972'>OPENJPA-972</a>] - Support standard provider properties in PersistenceProvider class</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-978'>OPENJPA-978</a>] - Allow third argument of JPQL SUBSTRING function to be optional</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-990'>OPENJPA-990</a>] - setHint should return IllegalArgumentException for invalid query/lock timeout values</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1016'>OPENJPA-1016</a>] - JPA2 Query support for embeddables; nested embeddables; relationships from embeddables</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1023'>OPENJPA-1023</a>] - Message files contain windows EOL characters</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1024'>OPENJPA-1024</a>] - JPA2 Query scalar expression  in subquery </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1026'>OPENJPA-1026</a>] - Ensure newlines at end of file</li>\n@@ -809,6 +1008,7 @@ <h4>Bug</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-787'>OPENJPA-787</a>] - slices query.getSingleResult is broken</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-792'>OPENJPA-792</a>] - An entity persist may fail when @MappedSupercalss is specified. </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-795'>OPENJPA-795</a>] - enhancer throws an exception when parsing column name &quot;first.name&quot; because it thinks 'first' is a table name</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-798'>OPENJPA-798</a>] - slices does can not work with sequences properly (no adding objects?)</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-811'>OPENJPA-811</a>] - With Oracle, OpenJPA allows setting non-nullable field to null</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-815'>OPENJPA-815</a>] - Exception is thrown when retrieving an entity which contains an embeddable and the embeddable contains a toMany relation </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-818'>OPENJPA-818</a>] - TCK module should use Geronimo JPA 2.0 EA jar</li>\n@@ -840,6 +1040,7 @@ <h4>Bug</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-925'>OPENJPA-925</a>] - Bidirectional OneToOne relation incorrectly set in loadEagerJoin</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-927'>OPENJPA-927</a>] - Fix definition of javax.persistence.query.timeout property</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-933'>OPENJPA-933</a>] - Database version detection in MySQLDictionary is not reliable</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-935'>OPENJPA-935</a>] - Removing entities with Embedded field issue multiple delete statements</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-947'>OPENJPA-947</a>] - Overly verbose TestCases</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-951'>OPENJPA-951</a>] - Javadoc jar file does not contain legal files</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-954'>OPENJPA-954</a>] - openjpa-slice build fails due to tests relying on openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AllowFailure.java</li>\n@@ -853,12 +1054,14 @@ <h4>Bug</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1028'>OPENJPA-1028</a>] - ClassCastException during findBy when embeddable is involved</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1029'>OPENJPA-1029</a>] - SQLServerDictionary causes NumberFormatException if MS SQL Server JDBC driver is used</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1031'>OPENJPA-1031</a>] - Update docs that refer to OpenJPAEntityManager.getExtent(..)</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1040'>OPENJPA-1040</a>] - Fix code formatting errors introduced by OPENJPA-1010</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1041'>OPENJPA-1041</a>] - OrderBy on nested embeddables is not working</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1051'>OPENJPA-1051</a>] - [patch] Mappingtool doesn't check name conflicts if MappingDefaultsImpl is called with multiple columns.</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1053'>OPENJPA-1053</a>] - Updating an entity by setting an embeddable to it does not work properly if the embeddable has a cascade delete relationship with another entity</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1054'>OPENJPA-1054</a>] - Large result sets do not work with MySQL</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1060'>OPENJPA-1060</a>] - Attempting to returning a list over RMI/IIOP results in serialization exception</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1067'>OPENJPA-1067</a>] - SetQueryTimeout(x) where x != 0 causes SQLException with DB2 on Z/OS</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1070'>OPENJPA-1070</a>] - Restore support for composite foreign keys on MySQL</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1072'>OPENJPA-1072</a>] - Nested embeddable with a relationship to an Entity with a generated id doesn't persist the relationship</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1088'>OPENJPA-1088</a>] - Build updates for openjpa-examples and openjpa-integration/examples</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1099'>OPENJPA-1099</a>] - &lt;xmp&gt; tag in Javadoc comments causes Javadoc corruption</li>\n@@ -893,6 +1096,8 @@ <h4>Improvement</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1038'>OPENJPA-1038</a>] - Enhancer java.lang.StackOverflowError exception when circular dependencies are encountered within embeddables</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1045'>OPENJPA-1045</a>] - Add opt-in and opt-out configuration for L2 DataCache</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1063'>OPENJPA-1063</a>] - Create a new openjpa-all artifact to include runtime depends</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1066'>OPENJPA-1066</a>] - Generated ID starting with 0 can cause unexpected results</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1079'>OPENJPA-1079</a>] - Allow client to access the distributed JDBC connection</li>\n </ul>\n \n <h4>New Feature</h4>\n@@ -906,6 +1111,7 @@ <h4>New Feature</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-875'>OPENJPA-875</a>] - OpenJPA 2.0 iteration 4 primary task</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-956'>OPENJPA-956</a>] - OpenJPA 2.0 iteration 5 primary task</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-966'>OPENJPA-966</a>] - Support Replication-enabled MySQL  </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-985'>OPENJPA-985</a>] - Support dynamic addition of slices</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1007'>OPENJPA-1007</a>] - OpenJPA 2.0 iteration 6 primary task</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1052'>OPENJPA-1052</a>] - OpenJPA 2.0 iteration 7 primary task</li>\n </ul>\n@@ -930,6 +1136,8 @@ <h3><a name=\"200M1\">OpenJPA 2.0.0 Milestone 1 Release</h3>\n <h4>Sub-task</h4>\n <ul>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-765'>OPENJPA-765</a>] - Check for insertable or updateable before checking value for null</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-802'>OPENJPA-802</a>] - Support @OrderColumn annotation and XML-based definition</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-806'>OPENJPA-806</a>] - Support Criteria API for JPA 2.0 - Iteration 1</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-857'>OPENJPA-857</a>] - Detect and store JPA version</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-899'>OPENJPA-899</a>] - Add support for JPA2.0 method Query.getHints()</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-900'>OPENJPA-900</a>] - Add support for JPA2.0 method Query.getSupportedHints()</li>\n@@ -938,14 +1146,29 @@ <h4>Sub-task</h4>\n \n <h4>Bug</h4>\n <ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-645'>OPENJPA-645</a>] - Date millisecond precision lost for Informix IDS and SQLServer</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-662'>OPENJPA-662</a>] - Version field returns null when explicitly projected in SELECT clause</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-677'>OPENJPA-677</a>] - Single Table Inheritance Strategy causes entity identity issues</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-680'>OPENJPA-680</a>] - Flush followed by refresh on a new instance returns an instance with all fields but id cleared</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-699'>OPENJPA-699</a>] - SQLWarnings not handled properly with WarningAction set to \"handle\"</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-794'>OPENJPA-794</a>] - issues with closing/opening entity manager (slices) (can't seem to be able to create multiple entityManagers )</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-799'>OPENJPA-799</a>] - slices: can not handle multiple projections in one query ( select count(*), max(fieldA) .......)</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-801'>OPENJPA-801</a>] - slices: basic query is failing on sort.. not sure why</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-812'>OPENJPA-812</a>] - slices: aggregate queries fail if any slice has empty results</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-821'>OPENJPA-821</a>] - slices: DistributedStoreQuery$UpdateExecutor calls executeDelete by mistake</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-824'>OPENJPA-824</a>] - org.apache.openjpa.lib.util.ParseException when try to get property descriptor for property: CacheMarshallers</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-825'>OPENJPA-825</a>] - slices: hangs with multithreaded true</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-828'>OPENJPA-828</a>] - Externalizer fails with ClassCastException with runtime enhancement</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-845'>OPENJPA-845</a>] - Ordering across slice fails when ordering terms are not included in projection items</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-886'>OPENJPA-886</a>] - Certain query failing after svn:739123</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-955'>OPENJPA-955</a>] - MethodQL parameter passing broken</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1039'>OPENJPA-1039</a>] - Dynamic query predicates must not treat AND OR operators as associative</li>\n </ul>\n \n <h4>Improvement</h4>\n <ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-760'>OPENJPA-760</a>] - Better DBDictionary autodetection</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-841'>OPENJPA-841</a>] - Create structures to hold Slice information with StateManangers</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-858'>OPENJPA-858</a>] - Allow postPersist be invoked immediately after persist()</li>\n </ul>\n \n@@ -962,6 +1185,11 @@ <h4>Task</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-995'>OPENJPA-995</a>] - Migrate existing Criteria Query implementation as OpenJPA extension to prepare for upcoming JPA 2.0 spec changes</li>\n </ul>\n \n+<h4>Test</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-766'>OPENJPA-766</a>] - Tests that currently fail should be committed to the repository</li>\n+</ul>\n+\n <BR>\n <hr>\n <h2><a name=\"Previous\"></a>Previous Releases</h2>"},{"sha":"c753a0721860341866747969e4173edd2bc1b52f","filename":"openjpa-project/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -41,7 +41,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta2</version>\n+        <version>2.0.0-beta3</version>\n     </parent>\n \n     <properties>"},{"sha":"0cf3f3632f1229dd3f6a75260d3cd32aa9f57010","filename":"openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -299,7 +299,7 @@ appropriate, most notably <classname>IllegalArgumentException</classname>s and\n <classname>IllegalStateException</classname>s. The specification also provides\n a few JPA-specific exceptions in the <literal>javax.persistence</literal>\n package. These exceptions should be self-explanatory. See the\n-<ulink url=\"http://java.sun.com/javaee/6/docs/api\">Javadoc</ulink> for\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/\">Javadoc</ulink> for\n additional details on JPA exceptions.\n         </para>\n         <note>"},{"sha":"9db8229415417deaa7bc693abb1460f16c3bf803","filename":"openjpa-project/src/doc/manual/jpa_overview_em.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_em.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_em.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_em.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -515,7 +515,7 @@ public void lock(Object entity, LockModeType mode);\n             </seealso>\n         </indexterm>\n This method locks the given entity using the named mode. The\n-<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/LockmodeType.html\">\n+<ulink url=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/LockModeType.html\">\n <classname>javax.persistence.LockModeType</classname></ulink> enum defines two\n modes:\n         </para>"},{"sha":"163bfe1da9b2bddb1868f0bad1e5e079563e7140","filename":"openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -966,8 +966,8 @@ to:\n <literal>uuid-string</literal>: OpenJPA will generate a 128-bit type 1 UUID\n unique within the network, represented as a 16-character string. For more\n information on UUIDs, see the IETF UUID draft specification at:\n-<ulink url=\"http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/\">\n-http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n+<ulink url=\"http://www.ics.uci.edu/~ejw/authoring/uuid-guid/\">\n+http://www.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -1007,8 +1007,8 @@ represents the type 1 UUID as a 32-character hexadecimal string.\n <literal>uuid-type4-string</literal>: OpenJPA will generate a 128-bit type 4\n pseudo-random UUID, represented as a 16-character string. For more\n information on UUIDs, see the IETF UUID draft specification at:\n-<ulink url=\"http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/\">\n-http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n+<ulink url=\"http://www.ics.uci.edu/~ejw/authoring/uuid-guid/\">\n+http://www.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n                         </para>\n                     </listitem>\n                     <listitem>"},{"sha":"9102345e01462ab243f5ec6a4ccf5d19d179cfde","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -282,7 +282,7 @@ Changing the field value has undefined results.\n             </para>\n             <note>\n                 <para>\n-OpenJPA fully supports version fields, but does not require them for concurrency\n+OpenJPA fully supports version fields, but does not require them within the actual entity for concurrency\n detection. OpenJPA can maintain surrogate version values or use state\n comparisons to detect concurrent modifications. See\n <xref linkend=\"ref_guide_mapping_jpa\"/> in the Reference Guide."},{"sha":"47f51109c612b30dab7aec39747757e6d756329b","filename":"openjpa-project/src/doc/manual/jpa_resources.xml","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_resources.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/jpa_resources.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_resources.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -24,13 +24,13 @@\n     <itemizedlist>\n         <listitem>\n             <para>\n-<ulink url=\"http://java.sun.com/aboutJava/communityprocess/jsr/jsr_220_dataobj.html\">\n-EJB 3 JSR page</ulink>\n+<ulink url=\"http://www.jcp.org/en/jsr/detail?id=317\">\n+Java Persistence 2.0 page</ulink>\n             </para>\n         </listitem>\n         <listitem>\n             <para>\n-<ulink url=\"http://java.sun.com/products/ejb\">Sun EJB page</ulink>\n+<ulink url=\"http://jcp.org/en/jsr/detail?id=318\">Enterprise JavaBeans 3.1 page</ulink>\n             </para>\n         </listitem>\n         <listitem>\n@@ -44,10 +44,5 @@ javax.persistence Javadoc</ulink>\n <ulink url=\"../javadoc/index.html\">OpenJPA Javadoc</ulink>\n             </para>\n         </listitem>\n-        <listitem>\n-            <para>\n-<ulink url=\"Persistence.pdf\">Locally mirrored JPA specification</ulink>\n-            </para>\n-        </listitem>\n     </itemizedlist>\n </appendix>"},{"sha":"99d2fe7047fba29b5439b26b8aa2637a7b200784","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":229,"deletions":225,"changes":454,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -15,121 +15,114 @@\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n- under the License.   \n+ under the License.\n -->\n <appendix id=\"migration_considerations\" role=\"non-normative\">\n     <title>\n         Migration Considerations\n     </title>\n     <section id=\"jpa_2.0\">\n-    \t<title>\n-    \t\tJPA 2.0\n-    \t</title>\n-    \t<section id=\"jpa_2.0_incompatibilities\">\n-    \t\t<title>\n-    \t\t\tIncompatibilities\n-    \t\t</title>\n-    \t\t<para>\n-    \t\tThe following sections indicate changes that are incompatible between\n-    \t\tOpenJPA 1.x.x releases and the 2.0 release. Some may\n-    \t\trequire application changes. Others can be remedied through the use\n-            of compatibility options.  If your application uses a version 1.0 persistence.xml,\n-            compatibility options will be set appropriately to maintain backward \n-            compatibility.  OpenJPA 2.0 applications using a version 2.0 persistence.xml\n-            and require OpenJPA 1.x.x compatibility may need to configure the appropriate\n-            compatibility options to get the desired behavior.\n-    \t\t</para>\n+        <title>\n+            JPA 2.0\n+        </title>\n+        <section id=\"jpa_2.0_incompatibilities\">\n+            <title>\n+                Incompatibilities\n+            </title>\n+            <!-- See OPENJPA-1208 for details. -->\n+            <para>\n+                The following sections indicate changes that are incompatible\n+                between OpenJPA 1.x.x releases and the 2.0 release. Some may\n+                require application changes. Others can be remedied through the\n+                use of compatibility options.  If your application uses a\n+                version 1.0 persistence.xml, compatibility options will be set\n+                appropriately to maintain backward compatibility.  OpenJPA 2.0\n+                applications using a version 2.0 persistence.xml and require\n+                OpenJPA 1.x.x compatibility may need to configure the\n+                appropriate compatibility options to get the desired behavior.\n+            </para>\n+            <section id=\"getProperties\">\n+                <title>\n+                    getProperties()\n+                </title>\n+                <!-- See OPENJPA-849 for details. -->\n+                <para>\n+                    The OpenJPAEntityManagerFactory interface getProperties()\n+                    method was changed to return a Map instead of a\n+                    Properties object. This change was made in order to\n+                    support the getProperties() method defined in the 2.0\n+                    JPA specification.\n+                </para>\n+            </section>\n+            <section id=\"migration_detach_behavior\">\n+                <title>\n+                    Detach Behavior\n+                </title>\n+                <!-- See OPENJPA-1215 for details. -->\n                 <para>\n-                    See OPENJPA-1208 for test cases that\n-                    demonstrate the behavioral differences.\n+                    The detach behavior has changed in several ways:\n+                    <itemizedlist>\n+                        <listitem>\n+                            <para>\n+                                In the 1.x.x release, managed entities\n+                                were flushed to the database as part of the\n+                                detach operation. This is no longer done in\n+                                2.0.\n+                            </para>\n+                        </listitem>\n+                        <listitem>\n+                            <para>\n+                                In the 1.x.x release, entities were copied\n+                                and returned. In 2.0, for those methods\n+                                that have return values, the original\n+                                entities are returned.\n+                            </para>\n+                        </listitem>\n+                        <listitem>\n+                            <para>\n+                                In the 1.x.x release, managed entities still\n+                                exist in the persistent context. In 2.0,\n+                                they are removed.\n+                            </para>\n+                        </listitem>\n+                        <listitem>\n+                            <para>\n+                                In the 1.x.x release, the detach operation\n+                                is recursively cascaded to all referenced\n+                                entities. In 2.0, the detach operation is\n+                                only cascade to those entities for which\n+                                Cascade=detach has been specified.\n+                            </para>\n+                        </listitem>\n+                    </itemizedlist>\n                 </para>\n-    \t\t<section id=\"getProperties\">\n-    \t\t\t<title>\n-    \t\t\t\tgetProperties()\n-    \t\t\t</title>\n-    \t\t\t<para>\n-    \t\t\t\tThe OpenJPAEntityManagerFactory interface getProperties()\n-    \t\t\t\tmethod was changed to return a Map instead of a\n-    \t\t\t\tProperties object. This change was made in order to\n-    \t\t\t\tsupport the getProperties() method defined in the 2.0\n-    \t\t\t\tJPA specification.\n-    \t\t\t</para>\n-                    <para>\n-                        See OPENJPA-849 for test cases that\n-                        demonstrate the behavioral differences.\n-                    </para>\n-    \t\t</section>\n-    \t\t<section id=\"migration_detach_behavior\">\n-    \t\t\t<title>\n-    \t\t\t\tDetach Behavior\n-    \t\t\t</title>\n-    \t\t\t<para>\n-    \t\t\tThe detach behavior has changed in several ways:\n-\t\t\t\t\t<itemizedlist>\n-\t\t\t\t\t\t<listitem>\n-\t\t\t\t\t\t\t<para>\n-\t\t\t\t\t\t\tIn the 1.x.x release, managed entities\n-\t\t\t\t\t\t\twere flushed to the database as part of the\n-\t\t\t\t\t\t\tdetach operation. This is no longer done in\n-\t\t\t\t\t\t\t2.0.\n-\t\t\t\t\t\t\t</para>\n-\t\t\t\t\t\t</listitem>\n-\t\t\t\t\t\t<listitem>\n-\t\t\t\t\t\t\t<para>\n-\t\t\t\t\t\t\tIn the 1.x.x release, entities were copied\n-\t\t\t\t\t\t\tand returned. In 2.0, for those methods\n-\t\t\t\t\t\t\tthat have return values, the original\n-\t\t\t\t\t\t\tentities are returned.\n-\t\t\t\t\t\t\t</para>\n-\t\t\t\t\t\t</listitem>\n-\t\t\t\t\t\t<listitem>\n-\t\t\t\t\t\t\t<para>\n-\t\t\t\t\t\t\tIn the 1.x.x release, managed entities still\n-\t\t\t\t\t\t\texist in the persistent context. In 2.0,\n-\t\t\t\t\t\t\tthey are removed.\n-\t\t\t\t\t\t\t</para>\n-\t\t\t\t\t\t</listitem>\n-\t\t\t\t\t\t<listitem>\n-\t\t\t\t\t\t\t<para>\n-\t\t\t\t\t\t\tIn the 1.x.x release, the detach operation\n-\t\t\t\t\t\t\tis recursively cascaded to all referenced\n-\t\t\t\t\t\t\tentities. In 2.0, the detach operation is\n-\t\t\t\t\t\t\tonly cascade to those entities for which\n-\t\t\t\t\t\t\tCascade=detach has been specified.\n-\t\t\t\t\t\t\t</para>\n-\t\t\t\t\t\t</listitem>\n-\t\t\t\t\t</itemizedlist>\n-    \t\t\t</para>\n-    \t\t\t<para>\n-    \t\t\t\tApplications that use a 1.0 persistence.xml will automatically \n-                    maintain OpenJPA 1.0 behavior.  It is possible for a version 2.0 \n-                    application to revert back to the 1.x.x behavior for\n-    \t\t\t\tsome of these items by setting the openjpa.Compatibility\n-    \t\t\t\tproperty as follows:\n-    \t\t\t\t<simplelist>\n-    \t\t\t\t\t<member>CopyOnDetach=true</member>\n-    \t\t\t\t\t<member>FlushBeforeDetach=true</member>\n-    \t\t\t\t\t<member>CascadeWithDetach=true</member>\n-    \t\t\t\t</simplelist>\n-    \t\t\t</para>\n-    \t\t\t<para>\n-    \t\t\t\tIn addition, a new method has been provided on the\n-    \t\t\t\t<ulink url=\"../javadoc/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n-\t\t\t\t\t<classname>OpenJPAEntityManager</classname></ulink>\n-    \t\t\t\tinterface to return a copy of the entity:\n-    \t\t\t\t<programlisting>\n-\t\t\t\t\tpublic &lt;T&gt; T detachCopy(T pc):\n-\t\t\t\t\t</programlisting>\n-\t\t\t</para>\n-                    <para>\n-                        See OPENJPA-1215 for test cases that\n-                        demonstrate the behavioral differences.\n-                    </para>\n-    \t\t</section>\n+                <para>\n+                    Applications that use a 1.0 persistence.xml will\n+                    automatically maintain OpenJPA 1.0 behavior.  It is\n+                    possible for a version 2.0 application to revert back to\n+                    the 1.x.x behavior for some of these items by setting the\n+                    openjpa.Compatibility property as follows:\n+                    <simplelist>\n+                        <member>CopyOnDetach=true</member>\n+                        <member>FlushBeforeDetach=true</member>\n+                        <member>CascadeWithDetach=true</member>\n+                    </simplelist>\n+                </para>\n+                <para>\n+                    In addition, a new method has been provided on the\n+                    <ulink url=\"../javadoc/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n+                    <classname>OpenJPAEntityManager</classname></ulink>\n+                    interface to return a copy of the entity:\n+                    <programlisting>\n+    public &lt;T&gt; T detachCopy(T pc):\n+                    </programlisting>\n+                </para>\n+            </section>\n             <section id=\"private_persistent_properties\">\n                 <title>\n                     Use of private persistent properties\n                 </title>\n+                <!-- See OPENJPA-1176 for details. -->\n                 <para>\n                     In 1.x.x releases of OpenJPA, if property access was used,\n                     private properties were considered persistent. This is \n@@ -139,24 +132,22 @@\n                     persistent by default.\n                 </para>\n                 <para>\n-                    Applications that use a 1.0 persistence.xml will automatically \n-                    maintain OpenJPA 1.x.x behavior. It is possible for a version 2.0 \n-                    application to revert back to the 1.x.x behavior by setting the \n-                    value of the <literal>openjpa.Compatibility</literal> \n+                    Applications that use a 1.0 persistence.xml will\n+                    automatically maintain OpenJPA 1.x.x behavior. It is\n+                    possible for a version 2.0 application to revert back to\n+                    the 1.x.x behavior by setting the value of the\n+                    <literal>openjpa.Compatibility</literal> \n                     property <literal>PrivatePersistentProperties</literal> to \n                     <literal>true</literal>.  If compile time enhancement is \n                     used, this property must be specified at the time of \n                     enhancement and at runtime.\n                 </para>\n-                <para>\n-                    See OPENJPA-1176 for test cases that\n-                    demonstrate the behavioral differences.\n-                </para>\n             </section>\n             <section id=\"setParameters\">\n                 <title>\n                     Query.setParameteres()\n                 </title>\n+                <!-- See OPENJPA-1213 for details. -->\n                 <para>\n                     The Query interface setParameters() method behavior has\n                     changed to throw an IllegalArgumentException if more\n@@ -167,151 +158,164 @@\n                     supplied parameter substitutions and allow the Query to be\n                     processed.\n                 </para>\n+            </section>\n+            <section id=\"serialization\">\n+                <title>\n+                    Serialization of Entities\n+                </title>\n+                <!-- See OPENJPA-1097 for details. -->\n+                <para>\n+                    In 1.x.x releases of OpenJPA, when an entity was serialized\n+                    after calling EntityManager.find(), detach() or detachAll()\n+                    then all <xref linkend=\"ref_guide_pc_scos_proxy\"/>\n+                    were removed as expected, but when the same entity instance\n+                    was serialized after calling EntityManager.clear() the\n+                    proxy classes were not removed.\n+                </para>\n                 <para>\n-                    See OPENJPA-1213 for test cases that\n-                    demonstrate the behavioral differences.\n+                    Starting with OpenJPA 1.3 and 2.0, this behavior has been\n+                    modified, so that by default all proxies will be removed\n+                    during serialization.  See \n+                    <xref linkend=\"ref_guide_pc_scos_proxy_serial\"/> \n+                    on how the behavior changes based on the \n+                    <literal>DetachedStateField</literal> setting along with \n+                    <xref linkend=\"ref_guide_detach_state\"/> \n+                    for more details on how to override the default\n+                    <literal>DetachedStateField</literal> setting.\n                 </para>\n             </section>\n         </section>\n         <section id=\"Disabling AutoOff Collection Tracking\">\n             <title>\n                 Disabling AutoOff Collection Tracking\n             </title>\n+            <!-- See OPENJPA-1223 and OPENJPA-1163 for details. -->\n             <para>\n-                The default behavior of openJPA in tracking collections is that if the number of\n-                modifications to the collection exceeds the current number of elements in\n-                collection then openJPA will disable tracking the collections.\n-                Added a Compatibility property to disable turning off the collection tracking.\n+                The default behavior of openJPA in tracking collections is that\n+                if the number of modifications to the collection exceeds the\n+                current number of elements in collection then openJPA will\n+                disable tracking the collections.  Added a Compatibility\n+                property to disable turning off the collection tracking.\n             </para>\n             <para>\n-                The behavior of Auto disabling of collection tracking can be avoided by setting\n-                the value of the <literal>openjpa.Compatibility</literal>\n-                property <literal>autoOff</literal> to  <literal>false</literal>.\n+                The behavior of Auto disabling of collection tracking can be\n+                avoided by setting the value of the\n+                <literal>openjpa.Compatibility</literal> property\n+                <literal>autoOff</literal> to  <literal>false</literal>.\n                 The default behavior of auto disabling the collection tracking\n-                is not changed. But when the above property is set then the collection tracking\n-                will not be disabled automatically.\n-            </para>\n-            <para>\n-                See OPENJPA-1223 and OPENJPA-1163 for test cases that\n-                demonstrate the behavioral differences.\n+                is not changed. But when the above property is set then the\n+                collection tracking will not be disabled automatically.\n             </para>\n         </section>\n-    \t<section id=\"internal_differences\">\n-    \t\t<title>\n-    \t\t\tInternal Behavioral Differences\n-    \t\t</title>\n-    \t\t<para>\n-    \t\tThe following sections indicate internal changes between\n-    \t\tOpenJPA 1.x.x releases and the 2.0 release. As these are\n+        <section id=\"internal_differences\">\n+            <title>\n+                Internal Behavioral Differences\n+            </title>\n+            <para>\n+                The following sections indicate internal changes between\n+                OpenJPA 1.x.x releases and the 2.0 release. As these are\n                 internal implementation specific behaviors not covered by\n                 the JPA specification, no changes should be required for\n                 applications that did not use or depend upon OpenJPA specific\n                 APIs or behavior.\n-    \t\t</para>\n-    \t\t<section id=\"getStrategy\">\n-    \t\t\t<title>\n-    \t\t\t\tFieldMapping.getStrategy()\n-    \t\t\t</title>\n-    \t\t\t<para>\n-    \t\t\t\tThe FieldMapping.getStrategy() in OpenJPA 1.x\n-\t\t\t\treturned an instance of RelationFieldStrategy\n-\t\t\t\tfor embded super classes, but will now return an\n-\t\t\t\tEmbedFieldStrategy.\n-\t\t\t</para>\n-\t\t\t<para>\n-                                See OPENJPA-1214 for an\n-\t\t\t\texample test case demonstrating the change.\n-\t\t\t</para>\n-\t\t</section>\n-    \t\t<section id=\"prePostUpdate\">\n-    \t\t\t<title>\n-    \t\t\t\tPreUpdate/PostUpdate Life Cycle Callbacks\n-    \t\t\t</title>\n-    \t\t\t<para>\n-    \t\t\t\tIf an entity was updated between the persist()\n-                                and commit() operations in OpenJPA 1.x, then \n-                                any PreUpdate and PostUpdate life cycle callback\n-                                methods would be executed.  Starting in OpenJPA\n-                                1.3 and 2.0, these callbacks will not get \n-                                executed.\n-\t\t\t</para>\n-\t\t\t<para>\n-                                The JPA 2.0 specification section on \"Semantics\n-                                of the Life Cycle Callback Methods for Entities\"\n-                                has been updated to include a Note that the\n-                                callback behavior for updating an entity after\n-                                the persist operation is implementation specific\n-                                and should not be relied upon.\n-\t\t\t</para>\n-\t\t\t<para>\n-                                See OPENJPA-1182 for an\n-\t\t\t\texample test case demonstrating the change.\n-\t\t\t</para>\n-\t\t</section>\n-    \t\t<section id=\"createemf\">\n-    \t\t\t<title>\n-    \t\t\tcreateEntityManagerFactory Exceptions\t\n-    \t\t\t</title>\n-    \t\t\t<para>\n-    \t\t\t\tThe JPA 2.0 specification section on\n-                                \"Bootstrapping in Java SE Environments\" states\n-                                that persistence providers must return null\n-                                if they are not a qualified provider for the \n-                                given persistence unit.\n-\t\t\t</para>\n-    \t\t\t<para>\n-                                However, OpenJPA may throw a RuntimeException\n-                                if an error occurs while trying to create a\n-                                qualified persistence unit, like for invalid\n-                                openjpa.* specific configuration settings or\n-                                for schema validation failures.\n-\t\t\t</para>\n-    \t\t\t<para>\n-                                If the Apache Geronimo JPA 2.0 Spec APIs are\n-                                used, then any exceptions returned by a\n-                                persistence provider will be wrapped within\n-                                a PersistenceException.  When the JPA 2.0 API\n-                                reference implementation is used, any\n-                                RuntimeExceptions will be returned to the\n-                                calling application without being wrapped.\n-                                Other JPA 2.0 API and implementation providers\n-                                or versions may behave differently.\n-\t\t\t</para>\n-\t\t\t<para>\n-                                See OPENJPA-1203 for more details.\n-\t\t\t</para>\n-\t\t</section>\n+            </para>\n+            <section id=\"getStrategy\">\n+                <title>\n+                    FieldMapping.getStrategy()\n+                </title>\n+                <!-- See OPENJPA-1214 for details. -->\n+                <para>\n+                    The FieldMapping.getStrategy() in OpenJPA 1.x\n+                    returned an instance of RelationFieldStrategy\n+                    for embded super classes, but will now return an\n+                    EmbedFieldStrategy.\n+                </para>\n+            </section>\n+            <section id=\"prePostUpdate\">\n+                <title>\n+                    PreUpdate/PostUpdate Life Cycle Callbacks\n+                </title>\n+                <!-- See OPENJPA-1182 for details. -->\n+                <para>\n+                    If an entity was updated between the persist()\n+                    and commit() operations in OpenJPA 1.x, then \n+                    any PreUpdate and PostUpdate life cycle callback\n+                    methods would be executed.  Starting in OpenJPA\n+                    1.3 and 2.0, these callbacks will not get executed.\n+                </para>\n+                <para>\n+                    The JPA 2.0 specification section on \"Semantics\n+                    of the Life Cycle Callback Methods for Entities\"\n+                    has been updated to include a Note that the\n+                    callback behavior for updating an entity after\n+                    the persist operation is implementation specific\n+                    and should not be relied upon.\n+                </para>\n+            </section>\n+            <section id=\"createemf\">\n+                <title>\n+                    createEntityManagerFactory Exceptions\n+                </title>\n+                <!-- See OPENJPA-1203 for details. -->\n+                <para>\n+                    The JPA 2.0 specification section on\n+                    \"Bootstrapping in Java SE Environments\" states\n+                    that persistence providers must return null\n+                    if they are not a qualified provider for the \n+                    given persistence unit.\n+                </para>\n+                <para>\n+                    However, OpenJPA may throw a RuntimeException\n+                    if an error occurs while trying to create a\n+                    qualified persistence unit, like for invalid\n+                    openjpa.* specific configuration settings or\n+                    for schema validation failures.\n+                </para>\n+                <para>\n+                    If the Apache Geronimo JPA 2.0 Spec APIs are\n+                    used, then any exceptions returned by a\n+                    persistence provider will be wrapped within\n+                    a PersistenceException.  When the JPA 2.0 API\n+                    reference implementation is used, any\n+                    RuntimeExceptions will be returned to the\n+                    calling application without being wrapped.\n+                    Other JPA 2.0 API and implementation providers\n+                    or versions may behave differently.\n+                </para>\n+            </section>\n             <section id=\"querycache\">\n                 <title>\n-                openjpa.QueryCache default   \n+                    openjpa.QueryCache default\n                 </title>\n+                <!-- See OPENJPA-1469 and sub-tasks for details. -->\n                 <para>\n-                    In previous releases, the default value for the openjpa.QueryCache property was \n-                    <literal>true</literal> when the openjpa.DataCache was enabled.  Depending on application\n-                    characteristics, this default QueryCache enablement actually could negate much of the potential\n-                    gains achieved by using the DataCache.  Thus, the default value for the openjpa.QueryCache\n-                    property will now by <emphasis><literal>false</literal></emphasis>.\n+                    In previous releases, the default value for the\n+                    openjpa.QueryCache property was <literal>true</literal>\n+                    when the openjpa.DataCache was enabled.  Depending on\n+                    application characteristics, this default QueryCache\n+                    enablement actually could negate much of the potential\n+                    gains achieved by using the DataCache.  Thus, the default\n+                    value for the openjpa.QueryCache property will now by\n+                    <emphasis><literal>false</literal></emphasis>.\n                 </para>\n                 <para>\n-                    To re-enable the default QueryCache behavior, you just need to include the following property\n-                    into your persistence.xml configuration.\n-                    \n+                    To re-enable the default QueryCache behavior, you need to\n+                    include the following property in your persistence.xml\n+                    configuration.\n                     <programlisting>\n-                    &lt;property name=\"openjpa.QueryCache\" value=\"true\"/&gt;\n+    &lt;property name=\"openjpa.QueryCache\" value=\"true\"/&gt;\n                     </programlisting>\n                 </para>\n                 <para>\n-                    If your configuration had previously enabled the QueryCache explicitly, then you might have to \n-                    include the <literal>true</literal> value into your configuration (if you relied on the previous \n-                    default).  Otherwise, your current QueryCache enablement will continue to work.\n-                    \n+                    If your configuration had previously enabled the QueryCache\n+                    explicitly, then you might have to include the\n+                    <literal>true</literal> value into your configuration\n+                    (if you relied on the previous default).  Otherwise, your\n+                    current QueryCache enablement will continue to work.\n                     <programlisting>\n-                    &lt;property name=\"openjpa.QueryCache\" value=\"true(CacheSize=1000, SoftReferenceSize=100)\"/&gt;\n+    &lt;property name=\"openjpa.QueryCache\" value=\"true(CacheSize=1000, SoftReferenceSize=100)\"/&gt;\n                     </programlisting>\n                 </para>\n-                <para>\n-                    See OPENJPA-1469 and sub-tasks for more details.\n-                </para>\n             </section>\n         </section>\n     </section>"},{"sha":"cad4b83a3e554ef6c2fda87acf67fba2294a52ad","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -277,7 +277,7 @@ for more information on the <classname>DataCache</classname> annotation.\n             </indexterm>\n A cache can specify that it should be cleared at certain times rather than using\n data timeouts. The <literal>EvictionSchedule</literal> property of OpenJPA's\n-cache implementation accepts a <literal>cron</literal> style eviction schedule.\n+cache implementation can be input in two different formats. The first is a <literal>cron</literal> style eviction schedule.\n The format of this property is a whitespace-separated list of five tokens, where\n the <literal>*</literal> symbol (asterisk), indicates match all. The tokens are,\n in order:\n@@ -317,6 +317,20 @@ past 3 PM on Sunday.\n <programlisting>\n true(EvictionSchedule='15,45 15 * * 1')\n </programlisting>\n+            <para>\n+The second format for this property is an interval style eviction schedule. The \n+format of this property is a <literal>+</literal> followed by the number of minutes \n+between each time that the cache should be evicted.\n+            </para>\n+            <para>            \n+For example, the following openjpa.DataCache setting schedules the default cache \n+to evict values from the cache every 120 minutes.            \n+            </para>\n+            <para>            \n+<programlisting>\n+true(EvictionSchedule='+120')\n+</programlisting>\n+            </para>\n <section id=\"ref_guide_cache_distribution\">\n    <title>Distributing instances across cache partitions</title>\n             <para>"},{"sha":"9603aec291d9dac459c3bcef0087443840b6b503","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -131,14 +131,14 @@ configuration resource to use, and to override any property.\n             <para>\n Internally, the OpenJPA runtime environment and development\n tools manipulate property settings through a general\n-<ulink url=\"../javadoc/ResultObjectProvider/lib/conf/Configuration.html\">\n+<ulink url=\"../javadoc/org/apache/openjpa/lib/conf/Configuration.html\">\n <classname>Configuration</classname></ulink> interface, and in particular its\n <ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html\">\n <classname>OpenJPAConfiguration</classname></ulink> and\n <ulink url=\"../javadoc/org/apache/openjpa/jdbc/conf/JDBCConfiguration.html\">\n <classname>JDBCConfiguration</classname></ulink> subclasses. For advanced\n customization, OpenJPA's extended runtime interfaces and its development tools\n-allow you to access these interfaces directly. See the <ulink url=\"../javadoc\">\n+allow you to access these interfaces directly. See the <ulink url=\"../javadoc/\">\n Javadoc</ulink> for details.\n             </para>\n         </note>\n@@ -1874,8 +1874,8 @@ runtime. See <xref linkend=\"ref_guide_dbsetup_lrs\"/> for details.\n             <para>\n <emphasis role=\"bold\">Description:</emphasis> A plugin list string (see\n <xref linkend=\"ref_guide_conf_plugins\"/>) describing the\n-<ulink url=\"../javadoc/org/apache/openjpa/lib/EncryptionProvider.html\"><classname>\n-org.apache.openjpa.lib.EncryptionProvider</classname></ulink>s to use for connection password\n+<ulink url=\"../javadoc/org/apache/openjpa/lib/encryption/EncryptionProvider.html\"><classname>\n+org.apache.openjpa.lib.encryption.EncryptionProvider</classname></ulink>s to use for connection password\n encryption. See <xref linkend=\"ref_guide_encryption\"/> for details.\n             </para>\n         </section>"},{"sha":"4823d89c20323e49a3c1464fb2e426bdb1dfd8f0","filename":"openjpa-project/src/doc/manual/ref_guide_deploy.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_deploy.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_deploy.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_deploy.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -232,7 +232,7 @@ you can pass to these plugins in your configuration string.\n         </indexterm>\n         <para>\n The X/Open Distributed Transaction Processing (X/Open DTP) featureSelection, designed by\n-<ulink url=\"http://www.xopen.org\">Open Group</ulink> (a vendor consortium),\n+<ulink url=\"http://www.opengroup.org/\">The Open Group</ulink> (a vendor consortium),\n defines a standard communication architecture that provides the following:\n         </para>\n         <itemizedlist>"},{"sha":"1225fae7316411d25bacd6f5418c175689432ecc","filename":"openjpa-project/src/doc/manual/ref_guide_encryption.xml","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_encryption.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_encryption.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_encryption.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -22,25 +22,27 @@\n         Encryption Provider\n     </title>\n     <para>\n-\tOpenJPA provides an interface for a provider to implement to allow \n-\tconnection passwords to be encrypted. Whenever a connection password \n-\tis needed, the decrypt(String) method will be invoked. See \n+\tOpenJPA provides an interface for a provider to implement \n+\tconnection password encryption. Whenever a connection password \n+\tis needed, the <methodname>decrypt(String)</methodname> method will be invoked. See \n \t<ulink url=\"../javadoc/org/apache/openjpa/lib/encryption/EncryptionProvider.html\">\n \t<classname>org.apache.openjpa.lib.encryption.EncryptionProvider</classname>\n-\t</ulink> for the detailed javadoc. \n+\t</ulink> for the detailed Javadoc. \n     </para>\n     <para>\n     \tNotes:\n     <itemizedlist>\n         <listitem>\n             <para>\n-                It is an OpenJPA users responsibility to implement the EncryptionProvider\n-                interface. There is not a default implementation.\n+                It is an OpenJPA user responsibility to implement the\n+                <classname>EncryptionProvider</classname>\n+                interface. There is no default implementation.\n             </para>\n         </listitem>\n         <listitem>\n             <para>\n-                The interface has an encrypt(String) method, but it is not called by the OpenJPA runtime. \n+                The interface has an <methodname>encrypt(String)</methodname> method,\n+                but it is not called by the OpenJPA runtime. \n             </para>\n         </listitem>        \n     </itemizedlist>        "},{"sha":"b83436556535d2d557cec2e375db9fb055783227","filename":"openjpa-project/src/doc/manual/ref_guide_integration.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_integration.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_integration.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_integration.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -38,10 +38,10 @@ The following chapter will illustrate these integration features.\n Ant is a very popular tool for building Java projects. It is similar to the\n <literal>make</literal> command, but is Java-centric and has more modern\n features. Ant is open source, and can be downloaded from Apache's Ant web page\n-at <ulink url=\"http://jakarta.apache.org/ant/\"> http://jakarta.apache.org/ant/\n+at <ulink url=\"http://ant.apache.org/\"> http://ant.apache.org/\n </ulink>. Ant has become the de-facto standard build tool for Java, and many\n commercial integrated development environments provide some support for using\n-ant build files. The remainder of this section assumes familiarity with writing\n+Ant build files. The remainder of this section assumes familiarity with writing\n Ant <filename>build.xml</filename> files.\n         </para>\n         <para>\n@@ -77,9 +77,9 @@ OpenJPA provides pre-built Ant task definitions for all bundled tools:\n             </listitem>\n         </itemizedlist>\n         <para>\n-The source code for all the ant tasks is provided with the distribution under\n+The source code for all the Ant tasks is provided with the distribution under\n the <filename>src</filename> directory. This allows you to customize various\n-aspects of the ant tasks in order to better integrate into your development\n+aspects of the Ant tasks in order to better integrate into your development\n environment.\n         </para>\n         <section id=\"ref_guide_integration_conf\">"},{"sha":"fd476c2dfc29705e9768ea007a5ea7950fe82129","filename":"openjpa-project/src/doc/manual/ref_guide_logging.xml","status":"modified","additions":40,"deletions":16,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_logging.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_logging.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_logging.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae","patch":"@@ -204,6 +204,29 @@ Pretty-printing properties configuration might look like so:\n     value=\"PrettyPrint=true, PrettyPrintLineLength=72\"/&gt;\n </programlisting>\n             </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        SQLDiag\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.jdbc.SQLDiag</literal>: This logging channel provides additional\n+information about entity actitvies such as create, find, update or delete, and eager \n+loading of relation or field properties. If you enable this channel, it is recommended\n+that <literal>openjpa.jdbc.SQL</literal> channel is also enabled. \n+The additional trace can help you relate the entity activities to the execution of \n+SQL statements that OpenJPA issued to the datastore.\n+                </para>\n+                <para>\n+When using the built-in OpenJPA logging facilities, you can enable SQLDiag logging\n+by adding <literal>SQLDiag=TRACE</literal> to your <literal>openjpa.Log</literal>\n+property.\n+                </para>\n+            </listitem>\n             <listitem>\n                 <para>\n                 <indexterm>\n@@ -349,7 +372,7 @@ a jar file, or in the root of one of the <literal>CLASSPATH</literal>\n directories). When deploying to a web or EJB application server, Log4J\n configuration is often performed in a <filename>log4j.xml</filename> file\n instead of a properties file. For further details on configuring Log4J, please\n-see the <ulink url=\"http://jakarta.apache.org/log4j/docs/manual.html\">Log4J\n+see the <ulink url=\"http://logging.apache.org/log4j/1.2/manual.html\">Log4J\n Manual</ulink>. We present an example <filename>log4j.properties</filename> file\n below.\n         </para>\n@@ -367,6 +390,7 @@ log4j.category.openjpa.MetaData=WARN\n log4j.category.openjpa.Enhance=WARN\n log4j.category.openjpa.Query=WARN\n log4j.category.openjpa.jdbc.SQL=WARN\n+log4j.category.openjpa.jdbc.SQLDiag=WARN\n log4j.category.openjpa.jdbc.JDBC=WARN\n log4j.category.openjpa.jdbc.Schema=WARN\n \n@@ -388,53 +412,52 @@ log4j.appender.console=org.apache.log4j.ConsoleAppender\n         </indexterm>\n         <para>\n Set the <literal>openjpa.Log</literal> property to <literal>commons</literal> to\n-use the <ulink url=\"http://jakarta.apache.org/commons/logging.html\"> Apache\n-Jakarta Commons Logging</ulink> thin library for issuing log messages. The\n-Commons Logging libraries act as a wrapper around a number of popular logging\n+use the <ulink url=\"http://commons.apache.org/logging/\"> Apache\n+Commons Logging</ulink> thin library for issuing log messages. The\n+Commons Logging library act as a wrapper around a number of popular logging\n APIs, including the\n-<ulink url=\"http://jakarta.apache.org/log4j/docs/index.html\"> Jakarta Log4J\n+<ulink url=\"http://logging.apache.org/log4j/1.2/index.html\"> Jakarta Log4J\n </ulink> project, and the native\n-<ulink url=\"http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html\">\n-java.util.logging</ulink> package in JDK 1.4. If neither of these libraries are\n-available, then logging will fall back to using simple console logging.\n+<ulink url=\"http://java.sun.com/javase/6/docs/api/java/util/logging/package-summary.html\">\n+java.util.logging</ulink> package in JDK.\n         </para>\n         <para>\n When using the Commons Logging framework in conjunction with Log4J,\n configuration will be the same as was discussed in the Log4J section above.\n         </para>\n         <section id=\"ref_guide_logging_jdk14\">\n             <title>\n-                JDK 1.4 java.util.logging\n+                JDK java.util.logging\n             </title>\n             <indexterm zone=\"ref_guide_logging_jdk14\">\n                 <primary>\n                     logging\n                 </primary>\n                 <secondary>\n-                    JDK 1.4\n+                    JDK\n                 </secondary>\n             </indexterm>\n             <para>\n-When using JDK 1.4 or higher in conjunction with OpenJPA's Commons Logging\n+When using JDK logging in conjunction with OpenJPA's Commons Logging\n support, logging will proceed through Java's built-in logging provided by the\n-<ulink url=\"http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html\">\n+<ulink url=\"http://java.sun.com/javase/6/docs/api/java/util/logging/package-summary.html\">\n java.util.logging</ulink> package. For details on configuring the built-in\n logging system, please see the\n-<ulink url=\"http://java.sun.com/j2se/1.4/docs/guide/util/logging/overview.html\">\n+<ulink url=\"http://java.sun.com/javase/6/docs/technotes/guides/logging/overview.html\">\n Java Logging Overview</ulink>.\n             </para>\n             <para>\n-By default, JDK 1.4's logging package looks in the <filename>\n+By default, JDK's logging package looks in the <filename>\n JAVA_HOME/lib/logging.properties</filename> file for logging configuration. This\n-can be overridden with the <literal> java.util.logging.config.file</literal>\n+can be overridden with the <literal>java.util.logging.config.file</literal>\n system property. For example:\n             </para>\n <programlisting>\n java -Djava.util.logging.config.file=mylogging.properties com.company.MyClass\n </programlisting>\n             <example id=\"ref_guide_logging_jdk14_propfile\">\n                 <title>\n-                    JDK 1.4 Log Properties\n+                    JDK Log Properties\n                 </title>\n <programlisting>\n # specify the handlers to create in the root logger\n@@ -463,6 +486,7 @@ openjpa.MetaData.level=INFO\n openjpa.Enhance.level=INFO\n openjpa.Query.level=INFO\n openjpa.jdbc.SQL.level=INFO\n+openjpa.jdbc.SQLDiag.level=INFO\n openjpa.jdbc.JDBC.level=INFO\n openjpa.jdbc.Schema.level=INFO\n </programlisting>"},{"sha":"60f4f992b90d4ddda5b8a0d8893562409a4044a3","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"f0e06889225db6efc1b0fa4a1c02c1c8c325eef1","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"4095470095906cb95a67411001d79a5979052f32","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"a8f4699f367829439b0854d643638303fae9ea27","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"8f9bfd5d24d01ebbe7334b6c19fa990727d1bf92","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"363928f0f15c49871c5bba6cda9ac96ed6ddf75e","filename":"openjpa-slice/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"235f8208664c2aebe669458eafd48f44ee31da85","filename":"openjpa-slice/src/main/ant/enhancer.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-slice/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-slice/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/ant/enhancer.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"d0312ec53bd0af6654afbd5edb822855ffd45e46","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"e5b8c7e8fe1f2557cd079ad8d61f0c7a1318686b","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"d38e489d051b4dc7ca15ba06a35d18347dbd5a45","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"d555233e09239be10df08e721270bf5b822fe6d3","filename":"openjpa/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/openjpa/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"},{"sha":"6f5fa0cb8f60792b68d1934088d8f8575c9676b2","filename":"pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=3a9579f475ab4ea3cf3eafb794439a96abfa3fae"}]}

