{"url":"https://api.github.com/repos/apache/openjpa/compare/2.0.0-beta3...2.0.0","html_url":"https://github.com/apache/openjpa/compare/2.0.0-beta3...2.0.0","permalink_url":"https://github.com/apache/openjpa/compare/apache:3a9579f...apache:3c60517","diff_url":"https://github.com/apache/openjpa/compare/2.0.0-beta3...2.0.0.diff","patch_url":"https://github.com/apache/openjpa/compare/2.0.0-beta3...2.0.0.patch","base_commit":{"sha":"3a9579f475ab4ea3cf3eafb794439a96abfa3fae","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhOTU3OWY0NzVhYjRlYTNjZjNlYWZiNzk0NDM5YTk2YWJmYTNmYWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:19Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:19Z"},"message":"[maven-release-plugin]  copy for tag 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta3@926797 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"639546aecb573e6e8c465e1d7d4f1e79e3959aa6","url":"https://api.github.com/repos/apache/openjpa/git/trees/639546aecb573e6e8c465e1d7d4f1e79e3959aa6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a9579f475ab4ea3cf3eafb794439a96abfa3fae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a9579f475ab4ea3cf3eafb794439a96abfa3fae","html_url":"https://github.com/apache/openjpa/commit/3a9579f475ab4ea3cf3eafb794439a96abfa3fae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a9579f475ab4ea3cf3eafb794439a96abfa3fae/comments","author":null,"committer":null,"parents":[{"sha":"78020af127749a051ef78ae68aa18a5a7eebada6","url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6","html_url":"https://github.com/apache/openjpa/commit/78020af127749a051ef78ae68aa18a5a7eebada6"}]},"merge_base_commit":{"sha":"78020af127749a051ef78ae68aa18a5a7eebada6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4MDIwYWYxMjc3NDlhMDUxZWY3OGFlNjhhYTE4YTVhN2VlYmFkYTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:15Z"},"message":"[maven-release-plugin] prepare release 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926796 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"639546aecb573e6e8c465e1d7d4f1e79e3959aa6","url":"https://api.github.com/repos/apache/openjpa/git/trees/639546aecb573e6e8c465e1d7d4f1e79e3959aa6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78020af127749a051ef78ae68aa18a5a7eebada6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6","html_url":"https://github.com/apache/openjpa/commit/78020af127749a051ef78ae68aa18a5a7eebada6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6/comments","author":null,"committer":null,"parents":[{"sha":"9eb0175249040873a2679ddd8c50c653c472347b","url":"https://api.github.com/repos/apache/openjpa/commits/9eb0175249040873a2679ddd8c50c653c472347b","html_url":"https://github.com/apache/openjpa/commit/9eb0175249040873a2679ddd8c50c653c472347b"}]},"status":"diverged","ahead_by":69,"behind_by":1,"total_commits":69,"commits":[{"sha":"deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlZWI1ZDU5ZmZjOTUwZGRlOTgxYjVhMjRjNTg2N2ZkMGFhOGE1Yjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:32Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-23T21:39:32Z"},"message":"[maven-release-plugin] prepare for next development iteration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@926798 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa061fd8cac19a2e447351540cef34a2d3849250","url":"https://api.github.com/repos/apache/openjpa/git/trees/aa061fd8cac19a2e447351540cef34a2d3849250"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9","html_url":"https://github.com/apache/openjpa/commit/deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9/comments","author":null,"committer":null,"parents":[{"sha":"78020af127749a051ef78ae68aa18a5a7eebada6","url":"https://api.github.com/repos/apache/openjpa/commits/78020af127749a051ef78ae68aa18a5a7eebada6","html_url":"https://github.com/apache/openjpa/commit/78020af127749a051ef78ae68aa18a5a7eebada6"}]},{"sha":"19fd6476fb7c7b30b5b3a458301d8b7edaa31eea","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5ZmQ2NDc2ZmI3YzdiMzBiNWIzYTQ1ODMwMWQ4YjdlZGFhMzFlZWE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T16:24:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T16:24:24Z"},"message":"OPENJPA-1580: fix test case problem for DB2.  Merged in patch from Fay Wang in trunk r926816.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927111 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c1060a2bf562d07116b9e80c0e74aa7b5e36320","url":"https://api.github.com/repos/apache/openjpa/git/trees/2c1060a2bf562d07116b9e80c0e74aa7b5e36320"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/19fd6476fb7c7b30b5b3a458301d8b7edaa31eea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/19fd6476fb7c7b30b5b3a458301d8b7edaa31eea","html_url":"https://github.com/apache/openjpa/commit/19fd6476fb7c7b30b5b3a458301d8b7edaa31eea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/19fd6476fb7c7b30b5b3a458301d8b7edaa31eea/comments","author":null,"committer":null,"parents":[{"sha":"deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9","url":"https://api.github.com/repos/apache/openjpa/commits/deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9","html_url":"https://github.com/apache/openjpa/commit/deeb5d59ffc950dde981b5a24c5867fd0aa8a5b9"}]},{"sha":"4f213ff188d0f5064317823dbcfac4c1f406e700","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmMjEzZmYxODhkMGY1MDY0MzE3ODIzZGJjZmFjNGMxZjQwNmU3MDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:36:30Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:36:30Z"},"message":"OPENJPA-1562 show as being fixed in 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0feeae43e49224823c15ce66076ce3286964bc89","url":"https://api.github.com/repos/apache/openjpa/git/trees/0feeae43e49224823c15ce66076ce3286964bc89"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4f213ff188d0f5064317823dbcfac4c1f406e700","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4f213ff188d0f5064317823dbcfac4c1f406e700","html_url":"https://github.com/apache/openjpa/commit/4f213ff188d0f5064317823dbcfac4c1f406e700","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4f213ff188d0f5064317823dbcfac4c1f406e700/comments","author":null,"committer":null,"parents":[{"sha":"19fd6476fb7c7b30b5b3a458301d8b7edaa31eea","url":"https://api.github.com/repos/apache/openjpa/commits/19fd6476fb7c7b30b5b3a458301d8b7edaa31eea","html_url":"https://github.com/apache/openjpa/commit/19fd6476fb7c7b30b5b3a458301d8b7edaa31eea"}]},{"sha":"565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2NWI0Y2RjM2ZjODM0YjI2MjNhMjBiMGE5NmY2YzlmMmM4MTVlYmU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:39:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:39:14Z"},"message":"OPENJPA-1335 show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927125 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0e65a20ca9b7193f0ccad5ffd6b9536375ba2fc3","url":"https://api.github.com/repos/apache/openjpa/git/trees/0e65a20ca9b7193f0ccad5ffd6b9536375ba2fc3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe","html_url":"https://github.com/apache/openjpa/commit/565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe/comments","author":null,"committer":null,"parents":[{"sha":"4f213ff188d0f5064317823dbcfac4c1f406e700","url":"https://api.github.com/repos/apache/openjpa/commits/4f213ff188d0f5064317823dbcfac4c1f406e700","html_url":"https://github.com/apache/openjpa/commit/4f213ff188d0f5064317823dbcfac4c1f406e700"}]},{"sha":"85bf5b812226163018994572c169c3baf46b1b4d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1YmY1YjgxMjIyNjE2MzAxODk5NDU3MmMxNjljM2JhZjQ2YjFiNGQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:42:04Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:42:04Z"},"message":"OPENJPA-1560 show as being fixed in 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927126 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"68e488a301db9f075615338b0e232ac9024da5ac","url":"https://api.github.com/repos/apache/openjpa/git/trees/68e488a301db9f075615338b0e232ac9024da5ac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85bf5b812226163018994572c169c3baf46b1b4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85bf5b812226163018994572c169c3baf46b1b4d","html_url":"https://github.com/apache/openjpa/commit/85bf5b812226163018994572c169c3baf46b1b4d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85bf5b812226163018994572c169c3baf46b1b4d/comments","author":null,"committer":null,"parents":[{"sha":"565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe","url":"https://api.github.com/repos/apache/openjpa/commits/565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe","html_url":"https://github.com/apache/openjpa/commit/565b4cdc3fc834b2623a20b0a96f6c9f2c815ebe"}]},{"sha":"f1d27cb7b58fca5996cd158c4905333d48020f5c","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxZDI3Y2I3YjU4ZmNhNTk5NmNkMTU4YzQ5MDUzMzNkNDgwMjBmNWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:43:07Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:43:07Z"},"message":"OPENJPA-1579 show as being fixed in 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927128 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9909b191f84836a04e2cd242da25495affb870be","url":"https://api.github.com/repos/apache/openjpa/git/trees/9909b191f84836a04e2cd242da25495affb870be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1d27cb7b58fca5996cd158c4905333d48020f5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1d27cb7b58fca5996cd158c4905333d48020f5c","html_url":"https://github.com/apache/openjpa/commit/f1d27cb7b58fca5996cd158c4905333d48020f5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1d27cb7b58fca5996cd158c4905333d48020f5c/comments","author":null,"committer":null,"parents":[{"sha":"85bf5b812226163018994572c169c3baf46b1b4d","url":"https://api.github.com/repos/apache/openjpa/commits/85bf5b812226163018994572c169c3baf46b1b4d","html_url":"https://github.com/apache/openjpa/commit/85bf5b812226163018994572c169c3baf46b1b4d"}]},{"sha":"e1d84c8fcca71dc4147206cee9c28a0ff989dbda","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxZDg0YzhmY2NhNzFkYzQxNDcyMDZjZWU5YzI4YTBmZjk4OWRiZGE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:46:23Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:46:23Z"},"message":"OPENJPA-1557 show as being fixed in 2.0.0-beta3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927129 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c9c04ea05f4ba356ea4a6bb8d560fd0b0a174070","url":"https://api.github.com/repos/apache/openjpa/git/trees/c9c04ea05f4ba356ea4a6bb8d560fd0b0a174070"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e1d84c8fcca71dc4147206cee9c28a0ff989dbda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e1d84c8fcca71dc4147206cee9c28a0ff989dbda","html_url":"https://github.com/apache/openjpa/commit/e1d84c8fcca71dc4147206cee9c28a0ff989dbda","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e1d84c8fcca71dc4147206cee9c28a0ff989dbda/comments","author":null,"committer":null,"parents":[{"sha":"f1d27cb7b58fca5996cd158c4905333d48020f5c","url":"https://api.github.com/repos/apache/openjpa/commits/f1d27cb7b58fca5996cd158c4905333d48020f5c","html_url":"https://github.com/apache/openjpa/commit/f1d27cb7b58fca5996cd158c4905333d48020f5c"}]},{"sha":"33bd15764a05a977505ac915f379c52968dea227","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzYmQxNTc2NGEwNWE5Nzc1MDVhYzkxNWYzNzljNTI5NjhkZWEyMjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:49:36Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T17:49:36Z"},"message":"OPENJPA-1371 show as being fixed in 2.0.0-M3\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927131 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23b6aa0f7e178430d4061290a765e1eeac7ad06a","url":"https://api.github.com/repos/apache/openjpa/git/trees/23b6aa0f7e178430d4061290a765e1eeac7ad06a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/33bd15764a05a977505ac915f379c52968dea227","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/33bd15764a05a977505ac915f379c52968dea227","html_url":"https://github.com/apache/openjpa/commit/33bd15764a05a977505ac915f379c52968dea227","comments_url":"https://api.github.com/repos/apache/openjpa/commits/33bd15764a05a977505ac915f379c52968dea227/comments","author":null,"committer":null,"parents":[{"sha":"e1d84c8fcca71dc4147206cee9c28a0ff989dbda","url":"https://api.github.com/repos/apache/openjpa/commits/e1d84c8fcca71dc4147206cee9c28a0ff989dbda","html_url":"https://github.com/apache/openjpa/commit/e1d84c8fcca71dc4147206cee9c28a0ff989dbda"}]},{"sha":"4a2a2928f8f276b8a905fec0f73f42286982e579","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhMmEyOTI4ZjhmMjc2YjhhOTA1ZmVjMGY3M2Y0MjI4Njk4MmU1Nzk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T18:48:40Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T18:48:40Z"},"message":"OPENJPA-1189 show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927149 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d3afb932e871eff47261e95aa9f69e4f2f15260","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d3afb932e871eff47261e95aa9f69e4f2f15260"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4a2a2928f8f276b8a905fec0f73f42286982e579","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4a2a2928f8f276b8a905fec0f73f42286982e579","html_url":"https://github.com/apache/openjpa/commit/4a2a2928f8f276b8a905fec0f73f42286982e579","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4a2a2928f8f276b8a905fec0f73f42286982e579/comments","author":null,"committer":null,"parents":[{"sha":"33bd15764a05a977505ac915f379c52968dea227","url":"https://api.github.com/repos/apache/openjpa/commits/33bd15764a05a977505ac915f379c52968dea227","html_url":"https://github.com/apache/openjpa/commit/33bd15764a05a977505ac915f379c52968dea227"}]},{"sha":"4b45c156aa732df5c2b4eea57743dea0dcf697d9","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiNDVjMTU2YWE3MzJkZjVjMmI0ZWVhNTc3NDNkZWEwZGNmNjk3ZDk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T18:50:01Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-24T18:50:01Z"},"message":"OPENJPA-1236 show as being fixed in 2.0.0-beta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c574f7afd79ba2033ad0444ea47d438d54a659cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/c574f7afd79ba2033ad0444ea47d438d54a659cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b45c156aa732df5c2b4eea57743dea0dcf697d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b45c156aa732df5c2b4eea57743dea0dcf697d9","html_url":"https://github.com/apache/openjpa/commit/4b45c156aa732df5c2b4eea57743dea0dcf697d9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b45c156aa732df5c2b4eea57743dea0dcf697d9/comments","author":null,"committer":null,"parents":[{"sha":"4a2a2928f8f276b8a905fec0f73f42286982e579","url":"https://api.github.com/repos/apache/openjpa/commits/4a2a2928f8f276b8a905fec0f73f42286982e579","html_url":"https://github.com/apache/openjpa/commit/4a2a2928f8f276b8a905fec0f73f42286982e579"}]},{"sha":"8987041469573f6fe9ae4a3e760081c6ec80b712","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5ODcwNDE0Njk1NzNmNmZlOWFlNGEzZTc2MDA4MWM2ZWM4MGI3MTI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-25T03:55:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-25T03:55:39Z"},"message":"OPENJPA-1550:\nSet failedObject on RollbackException.\nSubmitted By: Heath Thomann\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927266 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4009d1a07a9833f478cd737d3a8c438b3eca4360","url":"https://api.github.com/repos/apache/openjpa/git/trees/4009d1a07a9833f478cd737d3a8c438b3eca4360"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8987041469573f6fe9ae4a3e760081c6ec80b712","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8987041469573f6fe9ae4a3e760081c6ec80b712","html_url":"https://github.com/apache/openjpa/commit/8987041469573f6fe9ae4a3e760081c6ec80b712","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8987041469573f6fe9ae4a3e760081c6ec80b712/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4b45c156aa732df5c2b4eea57743dea0dcf697d9","url":"https://api.github.com/repos/apache/openjpa/commits/4b45c156aa732df5c2b4eea57743dea0dcf697d9","html_url":"https://github.com/apache/openjpa/commit/4b45c156aa732df5c2b4eea57743dea0dcf697d9"}]},{"sha":"fb60f8136f5427e47cc449bf21a9b860c3e11db9","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiNjBmODEzNmY1NDI3ZTQ3Y2M0NDliZjIxYTliODYwYzNlMTFkYjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-25T14:58:56Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-25T14:58:56Z"},"message":"OPENJPA-1597 New tests to verify expected behavior for proposed Compatibility fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927434 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3066b53f9525de6b1febb1abb1499b47295bbd69","url":"https://api.github.com/repos/apache/openjpa/git/trees/3066b53f9525de6b1febb1abb1499b47295bbd69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9","html_url":"https://github.com/apache/openjpa/commit/fb60f8136f5427e47cc449bf21a9b860c3e11db9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9/comments","author":null,"committer":null,"parents":[{"sha":"8987041469573f6fe9ae4a3e760081c6ec80b712","url":"https://api.github.com/repos/apache/openjpa/commits/8987041469573f6fe9ae4a3e760081c6ec80b712","html_url":"https://github.com/apache/openjpa/commit/8987041469573f6fe9ae4a3e760081c6ec80b712"}]},{"sha":"1c2f4470a25dd7aa267de69d28e240c104efada2","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjMmY0NDcwYTI1ZGQ3YWEyNjdkZTY5ZDI4ZTI0MGMxMDRlZmFkYTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-25T15:09:00Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-25T15:09:00Z"},"message":"OPENJPA-1599 - Push Cache*Mode value(s) in fetch configuration set from property making the property value(s) only valid during the em method call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c07727cefe012c0fc85898b2ef0058eb6fa3f1a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/c07727cefe012c0fc85898b2ef0058eb6fa3f1a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c2f4470a25dd7aa267de69d28e240c104efada2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c2f4470a25dd7aa267de69d28e240c104efada2","html_url":"https://github.com/apache/openjpa/commit/1c2f4470a25dd7aa267de69d28e240c104efada2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c2f4470a25dd7aa267de69d28e240c104efada2/comments","author":null,"committer":null,"parents":[{"sha":"fb60f8136f5427e47cc449bf21a9b860c3e11db9","url":"https://api.github.com/repos/apache/openjpa/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9","html_url":"https://github.com/apache/openjpa/commit/fb60f8136f5427e47cc449bf21a9b860c3e11db9"}]},{"sha":"7382ba2f8442511aa59750af23c932f4e5534f2b","node_id":"MDY6Q29tbWl0MjA2MzY0OjczODJiYTJmODQ0MjUxMWFhNTk3NTBhZjIzYzkzMmY0ZTU1MzRmMmI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-25T17:40:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-25T17:40:55Z"},"message":"OPENJPA-1597 Make entity table names unique\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927521 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"15e01b19af38a2e117bf1b3473d23e4581b5c585","url":"https://api.github.com/repos/apache/openjpa/git/trees/15e01b19af38a2e117bf1b3473d23e4581b5c585"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7382ba2f8442511aa59750af23c932f4e5534f2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7382ba2f8442511aa59750af23c932f4e5534f2b","html_url":"https://github.com/apache/openjpa/commit/7382ba2f8442511aa59750af23c932f4e5534f2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7382ba2f8442511aa59750af23c932f4e5534f2b/comments","author":null,"committer":null,"parents":[{"sha":"1c2f4470a25dd7aa267de69d28e240c104efada2","url":"https://api.github.com/repos/apache/openjpa/commits/1c2f4470a25dd7aa267de69d28e240c104efada2","html_url":"https://github.com/apache/openjpa/commit/1c2f4470a25dd7aa267de69d28e240c104efada2"}]},{"sha":"d81cbbd8bba4f3808e29c86cfec7b01425ccca06","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4MWNiYmQ4YmJhNGYzODA4ZTI5Yzg2Y2ZlYzdiMDE0MjVjY2NhMDY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-25T22:53:14Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-25T22:53:14Z"},"message":"OPENJPA-1599 - Retain em method user input property map content from modifications.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927630 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1874ab849a716522c095b136c6e81bf3184fc4cf","url":"https://api.github.com/repos/apache/openjpa/git/trees/1874ab849a716522c095b136c6e81bf3184fc4cf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d81cbbd8bba4f3808e29c86cfec7b01425ccca06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d81cbbd8bba4f3808e29c86cfec7b01425ccca06","html_url":"https://github.com/apache/openjpa/commit/d81cbbd8bba4f3808e29c86cfec7b01425ccca06","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d81cbbd8bba4f3808e29c86cfec7b01425ccca06/comments","author":null,"committer":null,"parents":[{"sha":"7382ba2f8442511aa59750af23c932f4e5534f2b","url":"https://api.github.com/repos/apache/openjpa/commits/7382ba2f8442511aa59750af23c932f4e5534f2b","html_url":"https://github.com/apache/openjpa/commit/7382ba2f8442511aa59750af23c932f4e5534f2b"}]},{"sha":"5655a9b4625b8ee573c75da082b1d3344e2ecad0","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2NTVhOWI0NjI1YjhlZTU3M2M3NWRhMDgyYjFkMzM0NGUyZWNhZDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-27T19:28:28Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-27T19:28:28Z"},"message":"OPENJPA-1597 Fix a test failure on MSSQL.  Merged in test code update from trunk r928241.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@928249 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c80bed3ee42bd0421274baff775d51cc93589de3","url":"https://api.github.com/repos/apache/openjpa/git/trees/c80bed3ee42bd0421274baff775d51cc93589de3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5655a9b4625b8ee573c75da082b1d3344e2ecad0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5655a9b4625b8ee573c75da082b1d3344e2ecad0","html_url":"https://github.com/apache/openjpa/commit/5655a9b4625b8ee573c75da082b1d3344e2ecad0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5655a9b4625b8ee573c75da082b1d3344e2ecad0/comments","author":null,"committer":null,"parents":[{"sha":"d81cbbd8bba4f3808e29c86cfec7b01425ccca06","url":"https://api.github.com/repos/apache/openjpa/commits/d81cbbd8bba4f3808e29c86cfec7b01425ccca06","html_url":"https://github.com/apache/openjpa/commit/d81cbbd8bba4f3808e29c86cfec7b01425ccca06"}]},{"sha":"071e698899dda1d7734af04d35e8b138e529f0e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3MWU2OTg4OTlkZGExZDc3MzRhZjA0ZDM1ZThiMTM4ZTUyOWYwZTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-27T20:53:53Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-27T20:53:53Z"},"message":"OPENJPA-1597 Revert code added to DetachManager to unproxy objects when detached in-place.  Updated tests to verify old behavior of detached entites still having  references, but that they are removed during serialization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@928271 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"024cda644f32845a0a9e0a0042218365c857898c","url":"https://api.github.com/repos/apache/openjpa/git/trees/024cda644f32845a0a9e0a0042218365c857898c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/071e698899dda1d7734af04d35e8b138e529f0e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/071e698899dda1d7734af04d35e8b138e529f0e2","html_url":"https://github.com/apache/openjpa/commit/071e698899dda1d7734af04d35e8b138e529f0e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/071e698899dda1d7734af04d35e8b138e529f0e2/comments","author":null,"committer":null,"parents":[{"sha":"5655a9b4625b8ee573c75da082b1d3344e2ecad0","url":"https://api.github.com/repos/apache/openjpa/commits/5655a9b4625b8ee573c75da082b1d3344e2ecad0","html_url":"https://github.com/apache/openjpa/commit/5655a9b4625b8ee573c75da082b1d3344e2ecad0"}]},{"sha":"20debce45d4142d590a98062ca67d986a8aded0b","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwZGViY2U0NWQ0MTQyZDU5MGE5ODA2MmNhNjdkOTg2YThhZGVkMGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-29T17:40:41Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-29T17:40:41Z"},"message":"OPENJPA-1597 Migration doc updates to mention the new Compatibility flag.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@928845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19297d3fbb16c3074f739bafe1ae4bd680d26d52","url":"https://api.github.com/repos/apache/openjpa/git/trees/19297d3fbb16c3074f739bafe1ae4bd680d26d52"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/20debce45d4142d590a98062ca67d986a8aded0b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/20debce45d4142d590a98062ca67d986a8aded0b","html_url":"https://github.com/apache/openjpa/commit/20debce45d4142d590a98062ca67d986a8aded0b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/20debce45d4142d590a98062ca67d986a8aded0b/comments","author":null,"committer":null,"parents":[{"sha":"071e698899dda1d7734af04d35e8b138e529f0e2","url":"https://api.github.com/repos/apache/openjpa/commits/071e698899dda1d7734af04d35e8b138e529f0e2","html_url":"https://github.com/apache/openjpa/commit/071e698899dda1d7734af04d35e8b138e529f0e2"}]},{"sha":"e973d26a721e8bd66356e11a2c053d24c680b5d2","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5NzNkMjZhNzIxZThiZDY2MzU2ZTExYTJjMDUzZDI0YzY4MGI1ZDI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-30T03:43:20Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-30T03:43:20Z"},"message":"OPENAJPA-1603: Decouple the QueryCache from the DataCache. Code contributed by Mike Dick and Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@928968 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b87e2c4044a7931869ec52c3396676c2d7396d58","url":"https://api.github.com/repos/apache/openjpa/git/trees/b87e2c4044a7931869ec52c3396676c2d7396d58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2","html_url":"https://github.com/apache/openjpa/commit/e973d26a721e8bd66356e11a2c053d24c680b5d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2/comments","author":null,"committer":null,"parents":[{"sha":"20debce45d4142d590a98062ca67d986a8aded0b","url":"https://api.github.com/repos/apache/openjpa/commits/20debce45d4142d590a98062ca67d986a8aded0b","html_url":"https://github.com/apache/openjpa/commit/20debce45d4142d590a98062ca67d986a8aded0b"}]},{"sha":"91f68ba918845b952905f26cd64ca7a418bbdf53","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxZjY4YmE5MTg4NDViOTUyOTA1ZjI2Y2Q2NGNhN2E0MThiYmRmNTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-31T01:10:34Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-31T01:10:34Z"},"message":"OPENJPA-1294 New connection is not reference counted.  Merged in from trunk r929184.  Original patch by Pinaki.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@929354 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"49c0a7207ed501c9e0b660e1a706751883bfb374","url":"https://api.github.com/repos/apache/openjpa/git/trees/49c0a7207ed501c9e0b660e1a706751883bfb374"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/91f68ba918845b952905f26cd64ca7a418bbdf53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/91f68ba918845b952905f26cd64ca7a418bbdf53","html_url":"https://github.com/apache/openjpa/commit/91f68ba918845b952905f26cd64ca7a418bbdf53","comments_url":"https://api.github.com/repos/apache/openjpa/commits/91f68ba918845b952905f26cd64ca7a418bbdf53/comments","author":null,"committer":null,"parents":[{"sha":"e973d26a721e8bd66356e11a2c053d24c680b5d2","url":"https://api.github.com/repos/apache/openjpa/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2","html_url":"https://github.com/apache/openjpa/commit/e973d26a721e8bd66356e11a2c053d24c680b5d2"}]},{"sha":"e3f20dddcfef9e42cb7b1948bffe8865918ce275","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzZjIwZGRkY2ZlZjllNDJjYjdiMTk0OGJmZmU4ODY1OTE4Y2UyNzU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-31T01:41:08Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-31T01:41:08Z"},"message":"OPENJPA-1602 Ignore prepared queries that use locks.  Merged in from trunk r928897.  Original patch by Pinaki.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@929358 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c001d5f41492231a09ef1dfea96dbb3951ef99a","url":"https://api.github.com/repos/apache/openjpa/git/trees/3c001d5f41492231a09ef1dfea96dbb3951ef99a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e3f20dddcfef9e42cb7b1948bffe8865918ce275","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e3f20dddcfef9e42cb7b1948bffe8865918ce275","html_url":"https://github.com/apache/openjpa/commit/e3f20dddcfef9e42cb7b1948bffe8865918ce275","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e3f20dddcfef9e42cb7b1948bffe8865918ce275/comments","author":null,"committer":null,"parents":[{"sha":"91f68ba918845b952905f26cd64ca7a418bbdf53","url":"https://api.github.com/repos/apache/openjpa/commits/91f68ba918845b952905f26cd64ca7a418bbdf53","html_url":"https://github.com/apache/openjpa/commit/91f68ba918845b952905f26cd64ca7a418bbdf53"}]},{"sha":"a0c79a3cca00ee21077165b0e7f714ad5632113a","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwYzc5YTNjY2EwMGVlMjEwNzcxNjViMGU3ZjcxNGFkNTYzMjExM2E=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-31T14:52:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-31T14:52:11Z"},"message":"OPENJPA-1597 merge in test update from trunk to make column name unique\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@929561 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a44d9196954eff3f166d405339b9bc903cb71f6a","url":"https://api.github.com/repos/apache/openjpa/git/trees/a44d9196954eff3f166d405339b9bc903cb71f6a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0c79a3cca00ee21077165b0e7f714ad5632113a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0c79a3cca00ee21077165b0e7f714ad5632113a","html_url":"https://github.com/apache/openjpa/commit/a0c79a3cca00ee21077165b0e7f714ad5632113a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0c79a3cca00ee21077165b0e7f714ad5632113a/comments","author":null,"committer":null,"parents":[{"sha":"e3f20dddcfef9e42cb7b1948bffe8865918ce275","url":"https://api.github.com/repos/apache/openjpa/commits/e3f20dddcfef9e42cb7b1948bffe8865918ce275","html_url":"https://github.com/apache/openjpa/commit/e3f20dddcfef9e42cb7b1948bffe8865918ce275"}]},{"sha":"3117ebf7a0311761f2da4f6cd5b8720036b3138c","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxMTdlYmY3YTAzMTE3NjFmMmRhNGY2Y2Q1Yjg3MjAwMzZiMzEzOGM=","commit":{"author":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2010-03-31T17:11:48Z"},"committer":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2010-03-31T17:11:48Z"},"message":"OPENJPA-1606 Add JPQL tests for element collections\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@929623 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b1ab2edcbf3edf404a6189ccd75ba96baddaf0b0","url":"https://api.github.com/repos/apache/openjpa/git/trees/b1ab2edcbf3edf404a6189ccd75ba96baddaf0b0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3117ebf7a0311761f2da4f6cd5b8720036b3138c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3117ebf7a0311761f2da4f6cd5b8720036b3138c","html_url":"https://github.com/apache/openjpa/commit/3117ebf7a0311761f2da4f6cd5b8720036b3138c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3117ebf7a0311761f2da4f6cd5b8720036b3138c/comments","author":null,"committer":null,"parents":[{"sha":"a0c79a3cca00ee21077165b0e7f714ad5632113a","url":"https://api.github.com/repos/apache/openjpa/commits/a0c79a3cca00ee21077165b0e7f714ad5632113a","html_url":"https://github.com/apache/openjpa/commit/a0c79a3cca00ee21077165b0e7f714ad5632113a"}]},{"sha":"e9ee2f588799ff893f99f287ebc8e5a05383e210","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5ZWUyZjU4ODc5OWZmODkzZjk5ZjI4N2ViYzhlNWEwNTM4M2UyMTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-05T16:23:50Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-05T16:23:50Z"},"message":"OPENJPA-1597 Update docs to mention previous serialization side effects\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@930896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a9f790f02cddfb8e9886ccb72003451b2fa2f3c","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a9f790f02cddfb8e9886ccb72003451b2fa2f3c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e9ee2f588799ff893f99f287ebc8e5a05383e210","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e9ee2f588799ff893f99f287ebc8e5a05383e210","html_url":"https://github.com/apache/openjpa/commit/e9ee2f588799ff893f99f287ebc8e5a05383e210","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e9ee2f588799ff893f99f287ebc8e5a05383e210/comments","author":null,"committer":null,"parents":[{"sha":"3117ebf7a0311761f2da4f6cd5b8720036b3138c","url":"https://api.github.com/repos/apache/openjpa/commits/3117ebf7a0311761f2da4f6cd5b8720036b3138c","html_url":"https://github.com/apache/openjpa/commit/3117ebf7a0311761f2da4f6cd5b8720036b3138c"}]},{"sha":"551a5d211cd8907390f6df36fdcf6e7b497d733e","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1MWE1ZDIxMWNkODkwNzM5MGY2ZGYzNmZkY2Y2ZTdiNDk3ZDczM2U=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-04-05T17:46:02Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-04-05T17:46:02Z"},"message":"OPENJPA-1608: port the fix to openjpa 2.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@930916 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d26ff84f0cf674ce1065c4161e497f043905e3ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/d26ff84f0cf674ce1065c4161e497f043905e3ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/551a5d211cd8907390f6df36fdcf6e7b497d733e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/551a5d211cd8907390f6df36fdcf6e7b497d733e","html_url":"https://github.com/apache/openjpa/commit/551a5d211cd8907390f6df36fdcf6e7b497d733e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/551a5d211cd8907390f6df36fdcf6e7b497d733e/comments","author":null,"committer":null,"parents":[{"sha":"e9ee2f588799ff893f99f287ebc8e5a05383e210","url":"https://api.github.com/repos/apache/openjpa/commits/e9ee2f588799ff893f99f287ebc8e5a05383e210","html_url":"https://github.com/apache/openjpa/commit/e9ee2f588799ff893f99f287ebc8e5a05383e210"}]},{"sha":"dd2790cfc58414c663cb0781f17e10a2e939286e","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkMjc5MGNmYzU4NDE0YzY2M2NiMDc4MWYxN2UxMGEyZTkzOTI4NmU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-07T02:18:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-07T02:18:26Z"},"message":"OPENJPA-1550 Fix TestBatchLimitException tests for Oracle, which fails all statements in the batch, instead of just the duplicate entity.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931406 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"45713a957f912aa7d77ddfeb4b20cf67b1dd6c40","url":"https://api.github.com/repos/apache/openjpa/git/trees/45713a957f912aa7d77ddfeb4b20cf67b1dd6c40"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dd2790cfc58414c663cb0781f17e10a2e939286e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dd2790cfc58414c663cb0781f17e10a2e939286e","html_url":"https://github.com/apache/openjpa/commit/dd2790cfc58414c663cb0781f17e10a2e939286e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dd2790cfc58414c663cb0781f17e10a2e939286e/comments","author":null,"committer":null,"parents":[{"sha":"551a5d211cd8907390f6df36fdcf6e7b497d733e","url":"https://api.github.com/repos/apache/openjpa/commits/551a5d211cd8907390f6df36fdcf6e7b497d733e","html_url":"https://github.com/apache/openjpa/commit/551a5d211cd8907390f6df36fdcf6e7b497d733e"}]},{"sha":"127d2b7d630a76fa3c09ddabd4eb5a4889ff694c","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyN2QyYjdkNjMwYTc2ZmEzYzA5ZGRhYmQ0ZWI1YTQ4ODlmZjY5NGM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-07T14:14:48Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-07T14:14:48Z"},"message":"OPENJPA-1614 Testcase failures in TextException on MSSQL due to missing <object-exists> value in sql-error-state-codes.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931562 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9487437463bbdaecc9a5edff89034b030674baf","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9487437463bbdaecc9a5edff89034b030674baf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/127d2b7d630a76fa3c09ddabd4eb5a4889ff694c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/127d2b7d630a76fa3c09ddabd4eb5a4889ff694c","html_url":"https://github.com/apache/openjpa/commit/127d2b7d630a76fa3c09ddabd4eb5a4889ff694c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/127d2b7d630a76fa3c09ddabd4eb5a4889ff694c/comments","author":null,"committer":null,"parents":[{"sha":"dd2790cfc58414c663cb0781f17e10a2e939286e","url":"https://api.github.com/repos/apache/openjpa/commits/dd2790cfc58414c663cb0781f17e10a2e939286e","html_url":"https://github.com/apache/openjpa/commit/dd2790cfc58414c663cb0781f17e10a2e939286e"}]},{"sha":"90d405b1fef1562d88144e2490b0317714884eb1","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwZDQwNWIxZmVmMTU2MmQ4ODE0NGUyNDkwYjAzMTc3MTQ4ODRlYjE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-04-07T18:21:10Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-04-07T18:21:10Z"},"message":"OPENJPA-1609 - Commit contribution by Jody Grassel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931634 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6774e104c5b5324b296b1ae66f7d4e68400a2fa0","url":"https://api.github.com/repos/apache/openjpa/git/trees/6774e104c5b5324b296b1ae66f7d4e68400a2fa0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90d405b1fef1562d88144e2490b0317714884eb1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90d405b1fef1562d88144e2490b0317714884eb1","html_url":"https://github.com/apache/openjpa/commit/90d405b1fef1562d88144e2490b0317714884eb1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90d405b1fef1562d88144e2490b0317714884eb1/comments","author":null,"committer":null,"parents":[{"sha":"127d2b7d630a76fa3c09ddabd4eb5a4889ff694c","url":"https://api.github.com/repos/apache/openjpa/commits/127d2b7d630a76fa3c09ddabd4eb5a4889ff694c","html_url":"https://github.com/apache/openjpa/commit/127d2b7d630a76fa3c09ddabd4eb5a4889ff694c"}]},{"sha":"0cbc402296524c8725c51f6cec21b419b1dc36db","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjYmM0MDIyOTY1MjRjODcyNWM1MWY2Y2VjMjFiNDE5YjFkYzM2ZGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-07T19:47:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-07T19:47:37Z"},"message":"OPENJPA-1615 Disable the 3 failing TestTypesafeCriteria tests when run against MSSQL for now\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931654 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4cd6f8d744d149bf860c0f149be16321da7ec490","url":"https://api.github.com/repos/apache/openjpa/git/trees/4cd6f8d744d149bf860c0f149be16321da7ec490"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0cbc402296524c8725c51f6cec21b419b1dc36db","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0cbc402296524c8725c51f6cec21b419b1dc36db","html_url":"https://github.com/apache/openjpa/commit/0cbc402296524c8725c51f6cec21b419b1dc36db","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0cbc402296524c8725c51f6cec21b419b1dc36db/comments","author":null,"committer":null,"parents":[{"sha":"90d405b1fef1562d88144e2490b0317714884eb1","url":"https://api.github.com/repos/apache/openjpa/commits/90d405b1fef1562d88144e2490b0317714884eb1","html_url":"https://github.com/apache/openjpa/commit/90d405b1fef1562d88144e2490b0317714884eb1"}]},{"sha":"c384f39d277dbfbe464dcdf13af86c7661bce9c0","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzODRmMzlkMjc3ZGJmYmU0NjRkY2RmMTNhZjg2Yzc2NjFiY2U5YzA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T02:15:59Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T02:15:59Z"},"message":"OPENJPA-1602: check in test case from trunk r931628 by Fay\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9174eb8b45fa641dea3dfbe93713b3af978ef84f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9174eb8b45fa641dea3dfbe93713b3af978ef84f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c384f39d277dbfbe464dcdf13af86c7661bce9c0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c384f39d277dbfbe464dcdf13af86c7661bce9c0","html_url":"https://github.com/apache/openjpa/commit/c384f39d277dbfbe464dcdf13af86c7661bce9c0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c384f39d277dbfbe464dcdf13af86c7661bce9c0/comments","author":null,"committer":null,"parents":[{"sha":"0cbc402296524c8725c51f6cec21b419b1dc36db","url":"https://api.github.com/repos/apache/openjpa/commits/0cbc402296524c8725c51f6cec21b419b1dc36db","html_url":"https://github.com/apache/openjpa/commit/0cbc402296524c8725c51f6cec21b419b1dc36db"}]},{"sha":"bb8ef003acb107ca4cbb59a79a2c542552a97a9b","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiOGVmMDAzYWNiMTA3Y2E0Y2JiNTlhNzlhMmM1NDI1NTJhOTdhOWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T15:54:05Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T15:54:05Z"},"message":"OPENJPA-1616 Fix TestTimeoutException test failures on MSSQL.  Merged in from trunk r931693.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2da2465c6bb1c910ab3bf985eb0d54bf0cac3c11","url":"https://api.github.com/repos/apache/openjpa/git/trees/2da2465c6bb1c910ab3bf985eb0d54bf0cac3c11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","html_url":"https://github.com/apache/openjpa/commit/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b/comments","author":null,"committer":null,"parents":[{"sha":"c384f39d277dbfbe464dcdf13af86c7661bce9c0","url":"https://api.github.com/repos/apache/openjpa/commits/c384f39d277dbfbe464dcdf13af86c7661bce9c0","html_url":"https://github.com/apache/openjpa/commit/c384f39d277dbfbe464dcdf13af86c7661bce9c0"}]},{"sha":"366406216fec9f3b0afd9371c1950b49d7dd3ba3","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2NjQwNjIxNmZlYzlmM2IwYWZkOTM3MWMxOTUwYjQ5ZDdkZDNiYTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T19:17:53Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T19:17:53Z"},"message":"OPENJPA-1616 Fix TestTimeoutException test failures on MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932068 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"622f1fab4aa66acf42cd927696f8203414195f95","url":"https://api.github.com/repos/apache/openjpa/git/trees/622f1fab4aa66acf42cd927696f8203414195f95"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/366406216fec9f3b0afd9371c1950b49d7dd3ba3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/366406216fec9f3b0afd9371c1950b49d7dd3ba3","html_url":"https://github.com/apache/openjpa/commit/366406216fec9f3b0afd9371c1950b49d7dd3ba3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/366406216fec9f3b0afd9371c1950b49d7dd3ba3/comments","author":null,"committer":null,"parents":[{"sha":"bb8ef003acb107ca4cbb59a79a2c542552a97a9b","url":"https://api.github.com/repos/apache/openjpa/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","html_url":"https://github.com/apache/openjpa/commit/bb8ef003acb107ca4cbb59a79a2c542552a97a9b"}]},{"sha":"8fb266f9f69327b18064799d78284898bed7896d","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmYjI2NmY5ZjY5MzI3YjE4MDY0Nzk5ZDc4Mjg0ODk4YmVkNzg5NmQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T19:49:00Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T19:49:00Z"},"message":"OPENJPA-1618: Convert the value not the key.  Merged in from trunk r932054.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932079 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e467b5c58177e4dbb85a156477f9049e65f112a5","url":"https://api.github.com/repos/apache/openjpa/git/trees/e467b5c58177e4dbb85a156477f9049e65f112a5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8fb266f9f69327b18064799d78284898bed7896d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8fb266f9f69327b18064799d78284898bed7896d","html_url":"https://github.com/apache/openjpa/commit/8fb266f9f69327b18064799d78284898bed7896d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8fb266f9f69327b18064799d78284898bed7896d/comments","author":null,"committer":null,"parents":[{"sha":"366406216fec9f3b0afd9371c1950b49d7dd3ba3","url":"https://api.github.com/repos/apache/openjpa/commits/366406216fec9f3b0afd9371c1950b49d7dd3ba3","html_url":"https://github.com/apache/openjpa/commit/366406216fec9f3b0afd9371c1950b49d7dd3ba3"}]},{"sha":"05a73cdf95dc59eef022871738424489d7801f4c","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1YTczY2RmOTVkYzU5ZWVmMDIyODcxNzM4NDI0NDg5ZDc4MDFmNGM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T19:52:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T19:52:03Z"},"message":"OPENJPA-1619 Fix intermittent TestTimestampVersion failures on various DBs when running on Windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932081 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3037e45e66c313f1088cc5b58db6a968127a0c54","url":"https://api.github.com/repos/apache/openjpa/git/trees/3037e45e66c313f1088cc5b58db6a968127a0c54"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/05a73cdf95dc59eef022871738424489d7801f4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/05a73cdf95dc59eef022871738424489d7801f4c","html_url":"https://github.com/apache/openjpa/commit/05a73cdf95dc59eef022871738424489d7801f4c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/05a73cdf95dc59eef022871738424489d7801f4c/comments","author":null,"committer":null,"parents":[{"sha":"8fb266f9f69327b18064799d78284898bed7896d","url":"https://api.github.com/repos/apache/openjpa/commits/8fb266f9f69327b18064799d78284898bed7896d","html_url":"https://github.com/apache/openjpa/commit/8fb266f9f69327b18064799d78284898bed7896d"}]},{"sha":"a0e342833b93eda1c06965eb7dc206a215071e15","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZTM0MjgzM2I5M2VkYTFjMDY5NjVlYjdkYzIwNmEyMTUwNzFlMTU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T20:05:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T20:05:54Z"},"message":"OPENJPA-1616 Exclude TestTimeoutException tests on HSQLDB as it uses supportsSelectForUpdate=false\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7e8a45baf6ba726f4484a97128b4f50741bf9f07","url":"https://api.github.com/repos/apache/openjpa/git/trees/7e8a45baf6ba726f4484a97128b4f50741bf9f07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0e342833b93eda1c06965eb7dc206a215071e15","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0e342833b93eda1c06965eb7dc206a215071e15","html_url":"https://github.com/apache/openjpa/commit/a0e342833b93eda1c06965eb7dc206a215071e15","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0e342833b93eda1c06965eb7dc206a215071e15/comments","author":null,"committer":null,"parents":[{"sha":"05a73cdf95dc59eef022871738424489d7801f4c","url":"https://api.github.com/repos/apache/openjpa/commits/05a73cdf95dc59eef022871738424489d7801f4c","html_url":"https://github.com/apache/openjpa/commit/05a73cdf95dc59eef022871738424489d7801f4c"}]},{"sha":"cf752cbc09cf5e09160ff18648f4c25b2735aac8","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmNzUyY2JjMDljZjVlMDkxNjBmZjE4NjQ4ZjRjMjViMjczNWFhYzg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-08T20:34:17Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-08T20:34:17Z"},"message":"OPENJPA-1604: Override default lock level for NamedQueries when using the pessimistic lock manager. Code contributed by Pinaki Poddar and Rick Curtis\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932095 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89ead371b32031918cf9b9b2cb32d1a31d4e289f","url":"https://api.github.com/repos/apache/openjpa/git/trees/89ead371b32031918cf9b9b2cb32d1a31d4e289f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cf752cbc09cf5e09160ff18648f4c25b2735aac8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cf752cbc09cf5e09160ff18648f4c25b2735aac8","html_url":"https://github.com/apache/openjpa/commit/cf752cbc09cf5e09160ff18648f4c25b2735aac8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cf752cbc09cf5e09160ff18648f4c25b2735aac8/comments","author":null,"committer":null,"parents":[{"sha":"a0e342833b93eda1c06965eb7dc206a215071e15","url":"https://api.github.com/repos/apache/openjpa/commits/a0e342833b93eda1c06965eb7dc206a215071e15","html_url":"https://github.com/apache/openjpa/commit/a0e342833b93eda1c06965eb7dc206a215071e15"}]},{"sha":"b7010472cc2d1aedf88fde71e44fff997245bc99","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3MDEwNDcyY2MyZDFhZWRmODhmZGU3MWU0NGZmZjk5NzI0NWJjOTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T20:54:59Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T20:54:59Z"},"message":"OPENJPA-1620 Fix TestJDBCEscapeDate test for MSSQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932111 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ff8664136961d244bc4c0e835873eecff151b349","url":"https://api.github.com/repos/apache/openjpa/git/trees/ff8664136961d244bc4c0e835873eecff151b349"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7010472cc2d1aedf88fde71e44fff997245bc99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7010472cc2d1aedf88fde71e44fff997245bc99","html_url":"https://github.com/apache/openjpa/commit/b7010472cc2d1aedf88fde71e44fff997245bc99","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7010472cc2d1aedf88fde71e44fff997245bc99/comments","author":null,"committer":null,"parents":[{"sha":"cf752cbc09cf5e09160ff18648f4c25b2735aac8","url":"https://api.github.com/repos/apache/openjpa/commits/cf752cbc09cf5e09160ff18648f4c25b2735aac8","html_url":"https://github.com/apache/openjpa/commit/cf752cbc09cf5e09160ff18648f4c25b2735aac8"}]},{"sha":"fc4a875fc69ec23e8db054a454eaf73c24567df8","node_id":"MDY6Q29tbWl0MjA2MzY0OmZjNGE4NzVmYzY5ZWMyM2U4ZGIwNTRhNDU0ZWFmNzNjMjQ1NjdkZjg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-08T21:18:12Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-08T21:18:12Z"},"message":"OPENJPA-703: Use weak map for caches\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932118 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8c80db9f98766853edb05b1e80a2d58d01c65e4","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8c80db9f98766853edb05b1e80a2d58d01c65e4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fc4a875fc69ec23e8db054a454eaf73c24567df8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fc4a875fc69ec23e8db054a454eaf73c24567df8","html_url":"https://github.com/apache/openjpa/commit/fc4a875fc69ec23e8db054a454eaf73c24567df8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fc4a875fc69ec23e8db054a454eaf73c24567df8/comments","author":null,"committer":null,"parents":[{"sha":"b7010472cc2d1aedf88fde71e44fff997245bc99","url":"https://api.github.com/repos/apache/openjpa/commits/b7010472cc2d1aedf88fde71e44fff997245bc99","html_url":"https://github.com/apache/openjpa/commit/b7010472cc2d1aedf88fde71e44fff997245bc99"}]},{"sha":"9b445c7bc2600232b537bcb827e7d397abc60757","node_id":"MDY6Q29tbWl0MjA2MzY0OjliNDQ1YzdiYzI2MDAyMzJiNTM3YmNiODI3ZTdkMzk3YWJjNjA3NTc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T00:35:34Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T00:35:34Z"},"message":"OPENJPA-1616 Fix TestTimeoutException tests for Oracle and re-enable for DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932195 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"476243e06e92c5ad6abf9cc5fb5c2503c7ef3ce5","url":"https://api.github.com/repos/apache/openjpa/git/trees/476243e06e92c5ad6abf9cc5fb5c2503c7ef3ce5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b445c7bc2600232b537bcb827e7d397abc60757","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b445c7bc2600232b537bcb827e7d397abc60757","html_url":"https://github.com/apache/openjpa/commit/9b445c7bc2600232b537bcb827e7d397abc60757","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b445c7bc2600232b537bcb827e7d397abc60757/comments","author":null,"committer":null,"parents":[{"sha":"fc4a875fc69ec23e8db054a454eaf73c24567df8","url":"https://api.github.com/repos/apache/openjpa/commits/fc4a875fc69ec23e8db054a454eaf73c24567df8","html_url":"https://github.com/apache/openjpa/commit/fc4a875fc69ec23e8db054a454eaf73c24567df8"}]},{"sha":"729460be78b231f3ec5947547f345a71b0dc5687","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyOTQ2MGJlNzhiMjMxZjNlYzU5NDc1NDdmMzQ1YTcxYjBkYzU2ODc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T17:26:19Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T17:26:19Z"},"message":"OPENJPA-1621 Fix TestGeneratedValues for DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932522 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65fb88d37f766a69749556087e9eb4862e7e5503","url":"https://api.github.com/repos/apache/openjpa/git/trees/65fb88d37f766a69749556087e9eb4862e7e5503"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/729460be78b231f3ec5947547f345a71b0dc5687","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/729460be78b231f3ec5947547f345a71b0dc5687","html_url":"https://github.com/apache/openjpa/commit/729460be78b231f3ec5947547f345a71b0dc5687","comments_url":"https://api.github.com/repos/apache/openjpa/commits/729460be78b231f3ec5947547f345a71b0dc5687/comments","author":null,"committer":null,"parents":[{"sha":"9b445c7bc2600232b537bcb827e7d397abc60757","url":"https://api.github.com/repos/apache/openjpa/commits/9b445c7bc2600232b537bcb827e7d397abc60757","html_url":"https://github.com/apache/openjpa/commit/9b445c7bc2600232b537bcb827e7d397abc60757"}]},{"sha":"b31c1a53c8ff017d171266d88eac5f6365fe57f7","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzMWMxYTUzYzhmZjAxN2QxNzEyNjZkODhlYWM1ZjYzNjVmZTU3Zjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:16:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:16:42Z"},"message":"OPENJPA-1624 Fix intermittent datacache timeout failures in TestSJVMCache and CacheTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932553 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d71aa7e59650872177c9c15365225a5ac077f924","url":"https://api.github.com/repos/apache/openjpa/git/trees/d71aa7e59650872177c9c15365225a5ac077f924"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b31c1a53c8ff017d171266d88eac5f6365fe57f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b31c1a53c8ff017d171266d88eac5f6365fe57f7","html_url":"https://github.com/apache/openjpa/commit/b31c1a53c8ff017d171266d88eac5f6365fe57f7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b31c1a53c8ff017d171266d88eac5f6365fe57f7/comments","author":null,"committer":null,"parents":[{"sha":"729460be78b231f3ec5947547f345a71b0dc5687","url":"https://api.github.com/repos/apache/openjpa/commits/729460be78b231f3ec5947547f345a71b0dc5687","html_url":"https://github.com/apache/openjpa/commit/729460be78b231f3ec5947547f345a71b0dc5687"}]},{"sha":"62f17567af5e74037a871f552afd35d07d87e0f4","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyZjE3NTY3YWY1ZTc0MDM3YTg3MWY1NTJhZmQzNWQwN2Q4N2UwZjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:32:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:32:15Z"},"message":"merge in r932206 from trunk by Pinaki\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932559 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e66a232db780813ee2f2a5ebbd75043f5dd83628","url":"https://api.github.com/repos/apache/openjpa/git/trees/e66a232db780813ee2f2a5ebbd75043f5dd83628"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62f17567af5e74037a871f552afd35d07d87e0f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62f17567af5e74037a871f552afd35d07d87e0f4","html_url":"https://github.com/apache/openjpa/commit/62f17567af5e74037a871f552afd35d07d87e0f4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62f17567af5e74037a871f552afd35d07d87e0f4/comments","author":null,"committer":null,"parents":[{"sha":"b31c1a53c8ff017d171266d88eac5f6365fe57f7","url":"https://api.github.com/repos/apache/openjpa/commits/b31c1a53c8ff017d171266d88eac5f6365fe57f7","html_url":"https://github.com/apache/openjpa/commit/b31c1a53c8ff017d171266d88eac5f6365fe57f7"}]},{"sha":"be2195b1a487fb9eaba0a9ed083fb6358b786c00","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlMjE5NWIxYTQ4N2ZiOWVhYmEwYTllZDA4M2ZiNjM1OGI3ODZjMDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:46:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:46:24Z"},"message":"OPENJPA-1622 Invoking MetaModel generator.  Merged in from trunk.  Contributed by Pinaki.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4415c4baebcdf2b6b41f4b1dafc63677fc7a991","url":"https://api.github.com/repos/apache/openjpa/git/trees/b4415c4baebcdf2b6b41f4b1dafc63677fc7a991"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00","html_url":"https://github.com/apache/openjpa/commit/be2195b1a487fb9eaba0a9ed083fb6358b786c00","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00/comments","author":null,"committer":null,"parents":[{"sha":"62f17567af5e74037a871f552afd35d07d87e0f4","url":"https://api.github.com/repos/apache/openjpa/commits/62f17567af5e74037a871f552afd35d07d87e0f4","html_url":"https://github.com/apache/openjpa/commit/62f17567af5e74037a871f552afd35d07d87e0f4"}]},{"sha":"88e3da61c31c1e7f29358f5a0298fff08ededba8","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4ZTNkYTYxYzMxYzFlN2YyOTM1OGY1YTAyOThmZmYwOGVkZWRiYTg=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T20:03:21Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T20:03:21Z"},"message":"update for 2.0.0 release.  will add JIRA details after it comes back up.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd24bb88713a52e613ad75ffeb325beeb2fac9c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd24bb88713a52e613ad75ffeb325beeb2fac9c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88e3da61c31c1e7f29358f5a0298fff08ededba8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88e3da61c31c1e7f29358f5a0298fff08ededba8","html_url":"https://github.com/apache/openjpa/commit/88e3da61c31c1e7f29358f5a0298fff08ededba8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88e3da61c31c1e7f29358f5a0298fff08ededba8/comments","author":null,"committer":null,"parents":[{"sha":"be2195b1a487fb9eaba0a9ed083fb6358b786c00","url":"https://api.github.com/repos/apache/openjpa/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00","html_url":"https://github.com/apache/openjpa/commit/be2195b1a487fb9eaba0a9ed083fb6358b786c00"}]},{"sha":"3736c1bc0659e7f9951d411d91c2f525c201dae9","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3MzZjMWJjMDY1OWU3Zjk5NTFkNDExZDkxYzJmNTI1YzIwMWRhZTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T01:52:35Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T01:52:35Z"},"message":"OPENJPA-1608: the RetainUpdateLock is not supported for IDS 11.10.  Other parts of 1608 were already merged in.  Merging in from trunk r932643 by Fay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932660 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"140f2f92e9469dccf1e869414b13ba90cf0f6bd0","url":"https://api.github.com/repos/apache/openjpa/git/trees/140f2f92e9469dccf1e869414b13ba90cf0f6bd0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3736c1bc0659e7f9951d411d91c2f525c201dae9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3736c1bc0659e7f9951d411d91c2f525c201dae9","html_url":"https://github.com/apache/openjpa/commit/3736c1bc0659e7f9951d411d91c2f525c201dae9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3736c1bc0659e7f9951d411d91c2f525c201dae9/comments","author":null,"committer":null,"parents":[{"sha":"88e3da61c31c1e7f29358f5a0298fff08ededba8","url":"https://api.github.com/repos/apache/openjpa/commits/88e3da61c31c1e7f29358f5a0298fff08ededba8","html_url":"https://github.com/apache/openjpa/commit/88e3da61c31c1e7f29358f5a0298fff08ededba8"}]},{"sha":"255b9e3837bf14fc4982b46b3a4752c93128fe1c","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1NWI5ZTM4MzdiZjE0ZmM0OTgyYjQ2YjNhNDc1MmM5MzEyOGZlMWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:29:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:29:49Z"},"message":"OPENJPA-1623 Add tests for qualified paths in JPQL.  Merged in from trunk r932487.  Contributed by Dianne.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4a65f671cf93d44c3754222360600957d84773b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4a65f671cf93d44c3754222360600957d84773b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c","html_url":"https://github.com/apache/openjpa/commit/255b9e3837bf14fc4982b46b3a4752c93128fe1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c/comments","author":null,"committer":null,"parents":[{"sha":"3736c1bc0659e7f9951d411d91c2f525c201dae9","url":"https://api.github.com/repos/apache/openjpa/commits/3736c1bc0659e7f9951d411d91c2f525c201dae9","html_url":"https://github.com/apache/openjpa/commit/3736c1bc0659e7f9951d411d91c2f525c201dae9"}]},{"sha":"1dc803b9d7167f5983e463cf14aaea8b6f2e329f","node_id":"MDY6Q29tbWl0MjA2MzY0OjFkYzgwM2I5ZDcxNjdmNTk4M2U0NjNjZjE0YWFlYThiNmYyZTMyOWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:31:05Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:31:05Z"},"message":"OPENJPA-1620 Fix TestJDBCEscapeDate test for HSQLDB.  Merged in from trunk r932191.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e743a495159d2cba1552bceec7ea25595a78f6a","url":"https://api.github.com/repos/apache/openjpa/git/trees/3e743a495159d2cba1552bceec7ea25595a78f6a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1dc803b9d7167f5983e463cf14aaea8b6f2e329f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1dc803b9d7167f5983e463cf14aaea8b6f2e329f","html_url":"https://github.com/apache/openjpa/commit/1dc803b9d7167f5983e463cf14aaea8b6f2e329f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1dc803b9d7167f5983e463cf14aaea8b6f2e329f/comments","author":null,"committer":null,"parents":[{"sha":"255b9e3837bf14fc4982b46b3a4752c93128fe1c","url":"https://api.github.com/repos/apache/openjpa/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c","html_url":"https://github.com/apache/openjpa/commit/255b9e3837bf14fc4982b46b3a4752c93128fe1c"}]},{"sha":"f43015857b7c3edb51f90f5883555709bf7a9063","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0MzAxNTg1N2I3YzNlZGI1MWY5MGY1ODgzNTU1NzA5YmY3YTkwNjM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:32:07Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:32:07Z"},"message":"OPENJPA-1611: fix EMBEDDED attr type.  Merged in from trunk r930721 commit by Fay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932663 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4073d504b24d10569fbdacd3c2985c9ae98d53c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/4073d504b24d10569fbdacd3c2985c9ae98d53c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f43015857b7c3edb51f90f5883555709bf7a9063","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f43015857b7c3edb51f90f5883555709bf7a9063","html_url":"https://github.com/apache/openjpa/commit/f43015857b7c3edb51f90f5883555709bf7a9063","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f43015857b7c3edb51f90f5883555709bf7a9063/comments","author":null,"committer":null,"parents":[{"sha":"1dc803b9d7167f5983e463cf14aaea8b6f2e329f","url":"https://api.github.com/repos/apache/openjpa/commits/1dc803b9d7167f5983e463cf14aaea8b6f2e329f","html_url":"https://github.com/apache/openjpa/commit/1dc803b9d7167f5983e463cf14aaea8b6f2e329f"}]},{"sha":"32a6052ac7829b96df11c19f2c5a77aabec8e2cc","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyYTYwNTJhYzc4MjliOTZkZjExYzE5ZjJjNWE3N2FhYmVjOGUyY2M=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T11:58:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T11:58:49Z"},"message":"release notes and changes udpates based on feedback from Kevin and Pinaki.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a43ca8406bbd74220d37db3c2e1eb5ce915f90b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a43ca8406bbd74220d37db3c2e1eb5ce915f90b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/32a6052ac7829b96df11c19f2c5a77aabec8e2cc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/32a6052ac7829b96df11c19f2c5a77aabec8e2cc","html_url":"https://github.com/apache/openjpa/commit/32a6052ac7829b96df11c19f2c5a77aabec8e2cc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/32a6052ac7829b96df11c19f2c5a77aabec8e2cc/comments","author":null,"committer":null,"parents":[{"sha":"f43015857b7c3edb51f90f5883555709bf7a9063","url":"https://api.github.com/repos/apache/openjpa/commits/f43015857b7c3edb51f90f5883555709bf7a9063","html_url":"https://github.com/apache/openjpa/commit/f43015857b7c3edb51f90f5883555709bf7a9063"}]},{"sha":"3b15af9b8df9901a2d0327850bc6c9107096478b","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMTVhZjliOGRmOTkwMWEyZDAzMjc4NTBiYzZjOTEwNzA5NjQ3OGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T17:40:23Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T17:40:23Z"},"message":"OPENJPA-1569 @Strategy triggers an InvalidStateException for fields which are declared as Java interfaces.  Contributed by Jerry Carter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932771 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f013445dcf19877ada612b6ce476cd97bef14a7f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f013445dcf19877ada612b6ce476cd97bef14a7f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b15af9b8df9901a2d0327850bc6c9107096478b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b15af9b8df9901a2d0327850bc6c9107096478b","html_url":"https://github.com/apache/openjpa/commit/3b15af9b8df9901a2d0327850bc6c9107096478b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b15af9b8df9901a2d0327850bc6c9107096478b/comments","author":null,"committer":null,"parents":[{"sha":"32a6052ac7829b96df11c19f2c5a77aabec8e2cc","url":"https://api.github.com/repos/apache/openjpa/commits/32a6052ac7829b96df11c19f2c5a77aabec8e2cc","html_url":"https://github.com/apache/openjpa/commit/32a6052ac7829b96df11c19f2c5a77aabec8e2cc"}]},{"sha":"171a36f210e6604959858355f515cb4c9c19c901","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3MWEzNmYyMTBlNjYwNDk1OTg1ODM1NWY1MTVjYjRjOWMxOWM5MDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T21:33:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T21:33:38Z"},"message":"OPENJPA-1625 Inconsistent creation of StateManagerImpl in BrokerImpl.  Merged in from trunk r932743 by Fay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932794 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4ca6d2bd1dacea7df4dc3d8868002a99147c8175","url":"https://api.github.com/repos/apache/openjpa/git/trees/4ca6d2bd1dacea7df4dc3d8868002a99147c8175"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/171a36f210e6604959858355f515cb4c9c19c901","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/171a36f210e6604959858355f515cb4c9c19c901","html_url":"https://github.com/apache/openjpa/commit/171a36f210e6604959858355f515cb4c9c19c901","comments_url":"https://api.github.com/repos/apache/openjpa/commits/171a36f210e6604959858355f515cb4c9c19c901/comments","author":null,"committer":null,"parents":[{"sha":"3b15af9b8df9901a2d0327850bc6c9107096478b","url":"https://api.github.com/repos/apache/openjpa/commits/3b15af9b8df9901a2d0327850bc6c9107096478b","html_url":"https://github.com/apache/openjpa/commit/3b15af9b8df9901a2d0327850bc6c9107096478b"}]},{"sha":"5b1132136df3153917d71cf0c2f02330406da183","node_id":"MDY6Q29tbWl0MjA2MzY0OjViMTEzMjEzNmRmMzE1MzkxN2Q3MWNmMGMyZjAyMzMwNDA2ZGExODM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T14:58:42Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T14:58:42Z"},"message":"updated release notes and changes files for 2.0.0 release candidate\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932920 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8062ad51dca4b7647a9c9b501308d5ce59b019cc","url":"https://api.github.com/repos/apache/openjpa/git/trees/8062ad51dca4b7647a9c9b501308d5ce59b019cc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b1132136df3153917d71cf0c2f02330406da183","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b1132136df3153917d71cf0c2f02330406da183","html_url":"https://github.com/apache/openjpa/commit/5b1132136df3153917d71cf0c2f02330406da183","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b1132136df3153917d71cf0c2f02330406da183/comments","author":null,"committer":null,"parents":[{"sha":"171a36f210e6604959858355f515cb4c9c19c901","url":"https://api.github.com/repos/apache/openjpa/commits/171a36f210e6604959858355f515cb4c9c19c901","html_url":"https://github.com/apache/openjpa/commit/171a36f210e6604959858355f515cb4c9c19c901"}]},{"sha":"8f30b053b0666cde296099c8973a969208d9475b","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmMzBiMDUzYjA2NjZjZGUyOTYwOTljODk3M2E5NjkyMDhkOTQ3NWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T16:37:46Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T16:37:46Z"},"message":"OPENJPA-1179 openjpa.jdbc.QuerySQLCache plugin no longer accepts value=all, so doc it in the Migration section.  Testcase contributed by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932934 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0832170f6c5abd0713c6928ec13acf33af2886d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/0832170f6c5abd0713c6928ec13acf33af2886d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f30b053b0666cde296099c8973a969208d9475b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f30b053b0666cde296099c8973a969208d9475b","html_url":"https://github.com/apache/openjpa/commit/8f30b053b0666cde296099c8973a969208d9475b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f30b053b0666cde296099c8973a969208d9475b/comments","author":null,"committer":null,"parents":[{"sha":"5b1132136df3153917d71cf0c2f02330406da183","url":"https://api.github.com/repos/apache/openjpa/commits/5b1132136df3153917d71cf0c2f02330406da183","html_url":"https://github.com/apache/openjpa/commit/5b1132136df3153917d71cf0c2f02330406da183"}]},{"sha":"d58c54d08d6a3aba3fbb913f3b18971e77f48ea2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1OGM1NGQwOGQ2YTNhYmEzZmJiOTEzZjNiMTg5NzFlNzdmNDhlYTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T18:58:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T18:58:14Z"},"message":"OPENJPA-1336 closed, so add to release notes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37e86d437de62b58671bf68b521f264ec02a9c66","url":"https://api.github.com/repos/apache/openjpa/git/trees/37e86d437de62b58671bf68b521f264ec02a9c66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d58c54d08d6a3aba3fbb913f3b18971e77f48ea2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d58c54d08d6a3aba3fbb913f3b18971e77f48ea2","html_url":"https://github.com/apache/openjpa/commit/d58c54d08d6a3aba3fbb913f3b18971e77f48ea2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d58c54d08d6a3aba3fbb913f3b18971e77f48ea2/comments","author":null,"committer":null,"parents":[{"sha":"8f30b053b0666cde296099c8973a969208d9475b","url":"https://api.github.com/repos/apache/openjpa/commits/8f30b053b0666cde296099c8973a969208d9475b","html_url":"https://github.com/apache/openjpa/commit/8f30b053b0666cde296099c8973a969208d9475b"}]},{"sha":"561022df8e578b691bd40b0212723c7de6937a93","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2MTAyMmRmOGU1NzhiNjkxYmQ0MGIwMjEyNzIzYzdkZTY5MzdhOTM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T19:30:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T19:30:38Z"},"message":"[maven-release-plugin] prepare release 2.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932975 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef82a2c87045684922ff7a629c3002a6a1b9b04e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef82a2c87045684922ff7a629c3002a6a1b9b04e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/561022df8e578b691bd40b0212723c7de6937a93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/561022df8e578b691bd40b0212723c7de6937a93","html_url":"https://github.com/apache/openjpa/commit/561022df8e578b691bd40b0212723c7de6937a93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/561022df8e578b691bd40b0212723c7de6937a93/comments","author":null,"committer":null,"parents":[{"sha":"d58c54d08d6a3aba3fbb913f3b18971e77f48ea2","url":"https://api.github.com/repos/apache/openjpa/commits/d58c54d08d6a3aba3fbb913f3b18971e77f48ea2","html_url":"https://github.com/apache/openjpa/commit/d58c54d08d6a3aba3fbb913f3b18971e77f48ea2"}]},{"sha":"47266d3f9316954259841268f9216286cceeb4e6","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3MjY2ZDNmOTMxNjk1NDI1OTg0MTI2OGY5MjE2Mjg2Y2NlZWI0ZTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T19:30:43Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T19:30:43Z"},"message":"[maven-release-plugin]  copy for tag 2.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0@932976 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef82a2c87045684922ff7a629c3002a6a1b9b04e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef82a2c87045684922ff7a629c3002a6a1b9b04e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/47266d3f9316954259841268f9216286cceeb4e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/47266d3f9316954259841268f9216286cceeb4e6","html_url":"https://github.com/apache/openjpa/commit/47266d3f9316954259841268f9216286cceeb4e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/47266d3f9316954259841268f9216286cceeb4e6/comments","author":null,"committer":null,"parents":[{"sha":"561022df8e578b691bd40b0212723c7de6937a93","url":"https://api.github.com/repos/apache/openjpa/commits/561022df8e578b691bd40b0212723c7de6937a93","html_url":"https://github.com/apache/openjpa/commit/561022df8e578b691bd40b0212723c7de6937a93"}]},{"sha":"de472e50c3a48305a4c7c68ca4d01b25fe4091d3","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlNDcyZTUwYzNhNDgzMDVhNGM3YzY4Y2E0ZDAxYjI1ZmU0MDkxZDM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T19:30:54Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-11T19:30:54Z"},"message":"[maven-release-plugin] prepare for next development iteration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b35046388a4b948bc826c33813558cc693bd0c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b35046388a4b948bc826c33813558cc693bd0c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de472e50c3a48305a4c7c68ca4d01b25fe4091d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de472e50c3a48305a4c7c68ca4d01b25fe4091d3","html_url":"https://github.com/apache/openjpa/commit/de472e50c3a48305a4c7c68ca4d01b25fe4091d3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de472e50c3a48305a4c7c68ca4d01b25fe4091d3/comments","author":null,"committer":null,"parents":[{"sha":"561022df8e578b691bd40b0212723c7de6937a93","url":"https://api.github.com/repos/apache/openjpa/commits/561022df8e578b691bd40b0212723c7de6937a93","html_url":"https://github.com/apache/openjpa/commit/561022df8e578b691bd40b0212723c7de6937a93"}]},{"sha":"a0f8422e87b86904497db7b19ec79f56470b7a0e","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZjg0MjJlODdiODY5MDQ0OTdkYjdiMTllYzc5ZjU2NDcwYjdhMGU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-14T18:30:19Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-14T18:30:19Z"},"message":"[maven-release-plugin] rollback the release of 2.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934094 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37e86d437de62b58671bf68b521f264ec02a9c66","url":"https://api.github.com/repos/apache/openjpa/git/trees/37e86d437de62b58671bf68b521f264ec02a9c66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0f8422e87b86904497db7b19ec79f56470b7a0e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0f8422e87b86904497db7b19ec79f56470b7a0e","html_url":"https://github.com/apache/openjpa/commit/a0f8422e87b86904497db7b19ec79f56470b7a0e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0f8422e87b86904497db7b19ec79f56470b7a0e/comments","author":null,"committer":null,"parents":[{"sha":"de472e50c3a48305a4c7c68ca4d01b25fe4091d3","url":"https://api.github.com/repos/apache/openjpa/commits/de472e50c3a48305a4c7c68ca4d01b25fe4091d3","html_url":"https://github.com/apache/openjpa/commit/de472e50c3a48305a4c7c68ca4d01b25fe4091d3"}]},{"sha":"0fae047205a3fe04fef3922a9561e1e5e4f193af","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmYWUwNDcyMDVhM2ZlMDRmZWYzOTIyYTk1NjFlMWU1ZTRmMTkzYWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-14T18:43:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-14T18:43:11Z"},"message":"update tck runs to use new openjpa.Log setting.  force usage of new patch subset until we get the final ones.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934109 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a2f63eebe9ac5edfd4e0a1b15ea6787c3a6c6ea7","url":"https://api.github.com/repos/apache/openjpa/git/trees/a2f63eebe9ac5edfd4e0a1b15ea6787c3a6c6ea7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0fae047205a3fe04fef3922a9561e1e5e4f193af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0fae047205a3fe04fef3922a9561e1e5e4f193af","html_url":"https://github.com/apache/openjpa/commit/0fae047205a3fe04fef3922a9561e1e5e4f193af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0fae047205a3fe04fef3922a9561e1e5e4f193af/comments","author":null,"committer":null,"parents":[{"sha":"a0f8422e87b86904497db7b19ec79f56470b7a0e","url":"https://api.github.com/repos/apache/openjpa/commits/a0f8422e87b86904497db7b19ec79f56470b7a0e","html_url":"https://github.com/apache/openjpa/commit/a0f8422e87b86904497db7b19ec79f56470b7a0e"}]},{"sha":"dca363c293571a740c6006d3fecb612259793a4e","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjYTM2M2MyOTM1NzFhNzQwYzYwMDZkM2ZlY2I2MTIyNTk3OTNhNGU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-15T16:38:27Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-15T16:38:27Z"},"message":"OPENJPA-1630: Synchronize when modifying MetaDataRepository._registered regardless of MetaDataRepository.Preload setting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934478 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d88c8f28f356ed5707586a0470343bcbec0c995","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d88c8f28f356ed5707586a0470343bcbec0c995"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dca363c293571a740c6006d3fecb612259793a4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dca363c293571a740c6006d3fecb612259793a4e","html_url":"https://github.com/apache/openjpa/commit/dca363c293571a740c6006d3fecb612259793a4e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dca363c293571a740c6006d3fecb612259793a4e/comments","author":null,"committer":null,"parents":[{"sha":"0fae047205a3fe04fef3922a9561e1e5e4f193af","url":"https://api.github.com/repos/apache/openjpa/commits/0fae047205a3fe04fef3922a9561e1e5e4f193af","html_url":"https://github.com/apache/openjpa/commit/0fae047205a3fe04fef3922a9561e1e5e4f193af"}]},{"sha":"5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjMzczN2ZjZTE5NGJmNWYwYzAzZjJjNzVmMWY1YWVlOGVkYzcyZmI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-15T16:40:23Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-15T16:40:23Z"},"message":"OPENJPA-1631: Add synchronization to AnnotationPersistenceXMLMetaDataParser.parse() method to make it thread safe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934480 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59b95571841a4e50c5183c43e3962a42b7671129","url":"https://api.github.com/repos/apache/openjpa/git/trees/59b95571841a4e50c5183c43e3962a42b7671129"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","html_url":"https://github.com/apache/openjpa/commit/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb/comments","author":null,"committer":null,"parents":[{"sha":"dca363c293571a740c6006d3fecb612259793a4e","url":"https://api.github.com/repos/apache/openjpa/commits/dca363c293571a740c6006d3fecb612259793a4e","html_url":"https://github.com/apache/openjpa/commit/dca363c293571a740c6006d3fecb612259793a4e"}]},{"sha":"31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxY2QwZWIwNGVjNDQ4YzZjMzBkZjg5ZTAzYWQ3YmRjZDEzNTYzYWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-15T18:33:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-15T18:33:24Z"},"message":"OPENJPA-1628: Usability changes. Merged from trunk revision 934507\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934511 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5d8fd8ce1bed576084c36c0bd09342a1d4144adb","url":"https://api.github.com/repos/apache/openjpa/git/trees/5d8fd8ce1bed576084c36c0bd09342a1d4144adb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","html_url":"https://github.com/apache/openjpa/commit/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/comments","author":null,"committer":null,"parents":[{"sha":"5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","url":"https://api.github.com/repos/apache/openjpa/commits/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","html_url":"https://github.com/apache/openjpa/commit/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb"}]},{"sha":"f35ed19f7f7200b43e45d283bf20c5c5da436928","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzNWVkMTlmN2Y3MjAwYjQzZTQ1ZDI4M2JmMjBjNWM1ZGE0MzY5Mjg=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-04-15T19:39:31Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-04-15T19:39:31Z"},"message":"OPENJPA-1605 Correct regression issue with table generation issue in schema generator.  Only the first table name returned in a generic DBMD query was used to populate the schema.  This broke the reverse mapping tool, which uses a generic query by default.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934564 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7883a6514348a247661a032a15792925b3545d27","url":"https://api.github.com/repos/apache/openjpa/git/trees/7883a6514348a247661a032a15792925b3545d27"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f35ed19f7f7200b43e45d283bf20c5c5da436928","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f35ed19f7f7200b43e45d283bf20c5c5da436928","html_url":"https://github.com/apache/openjpa/commit/f35ed19f7f7200b43e45d283bf20c5c5da436928","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f35ed19f7f7200b43e45d283bf20c5c5da436928/comments","author":null,"committer":null,"parents":[{"sha":"31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","url":"https://api.github.com/repos/apache/openjpa/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","html_url":"https://github.com/apache/openjpa/commit/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac"}]},{"sha":"4b6258915ea68e5fa554b7ae4457eecfd427005b","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiNjI1ODkxNWVhNjhlNWZhNTU0YjdhZTQ0NTdlZWNmZDQyNzAwNWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-16T13:55:17Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-16T13:55:17Z"},"message":"update tck2 script\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"541b09d061aa9d16279dabd16eedf4e29c67ad90","url":"https://api.github.com/repos/apache/openjpa/git/trees/541b09d061aa9d16279dabd16eedf4e29c67ad90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b6258915ea68e5fa554b7ae4457eecfd427005b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b6258915ea68e5fa554b7ae4457eecfd427005b","html_url":"https://github.com/apache/openjpa/commit/4b6258915ea68e5fa554b7ae4457eecfd427005b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b6258915ea68e5fa554b7ae4457eecfd427005b/comments","author":null,"committer":null,"parents":[{"sha":"f35ed19f7f7200b43e45d283bf20c5c5da436928","url":"https://api.github.com/repos/apache/openjpa/commits/f35ed19f7f7200b43e45d283bf20c5c5da436928","html_url":"https://github.com/apache/openjpa/commit/f35ed19f7f7200b43e45d283bf20c5c5da436928"}]},{"sha":"a9192498ed907b6dd024808e89a86d2e8d589066","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5MTkyNDk4ZWQ5MDdiNmRkMDI0ODA4ZTg5YTg2ZDJlOGQ1ODkwNjY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-16T19:57:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-16T19:57:29Z"},"message":"merge in additional issues resolved since 2.0.0 RC1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@935062 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4e8fa34eb025e3169864ba2239213398d86f258","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4e8fa34eb025e3169864ba2239213398d86f258"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a9192498ed907b6dd024808e89a86d2e8d589066","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a9192498ed907b6dd024808e89a86d2e8d589066","html_url":"https://github.com/apache/openjpa/commit/a9192498ed907b6dd024808e89a86d2e8d589066","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a9192498ed907b6dd024808e89a86d2e8d589066/comments","author":null,"committer":null,"parents":[{"sha":"4b6258915ea68e5fa554b7ae4457eecfd427005b","url":"https://api.github.com/repos/apache/openjpa/commits/4b6258915ea68e5fa554b7ae4457eecfd427005b","html_url":"https://github.com/apache/openjpa/commit/4b6258915ea68e5fa554b7ae4457eecfd427005b"}]},{"sha":"9c3e403308b549da9b06d80005a08074ba97ea22","node_id":"MDY6Q29tbWl0MjA2MzY0OjljM2U0MDMzMDhiNTQ5ZGE5YjA2ZDgwMDA1YTA4MDc0YmE5N2VhMjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-16T20:49:09Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-16T20:49:09Z"},"message":"OPENJPA-703: Merge Query Statistics related changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@935078 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65f6c8b30b439b16f3754a7cfab21eb186393433","url":"https://api.github.com/repos/apache/openjpa/git/trees/65f6c8b30b439b16f3754a7cfab21eb186393433"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c3e403308b549da9b06d80005a08074ba97ea22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c3e403308b549da9b06d80005a08074ba97ea22","html_url":"https://github.com/apache/openjpa/commit/9c3e403308b549da9b06d80005a08074ba97ea22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c3e403308b549da9b06d80005a08074ba97ea22/comments","author":null,"committer":null,"parents":[{"sha":"a9192498ed907b6dd024808e89a86d2e8d589066","url":"https://api.github.com/repos/apache/openjpa/commits/a9192498ed907b6dd024808e89a86d2e8d589066","html_url":"https://github.com/apache/openjpa/commit/a9192498ed907b6dd024808e89a86d2e8d589066"}]},{"sha":"7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563","node_id":"MDY6Q29tbWl0MjA2MzY0OjczMTJlMjdmZGViN2Q1ZDY0MGQ5ZmZhMWU5NmRjYmU0ZWExNDY1NjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-17T19:30:56Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-17T19:30:56Z"},"message":"OPENJPA-703: Ignore prepared query if query is locking. Merged from trunk revision 935231\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@935232 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f600e1584e3da131800a8d19eb71e862fe82f082","url":"https://api.github.com/repos/apache/openjpa/git/trees/f600e1584e3da131800a8d19eb71e862fe82f082"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563","html_url":"https://github.com/apache/openjpa/commit/7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563/comments","author":null,"committer":null,"parents":[{"sha":"9c3e403308b549da9b06d80005a08074ba97ea22","url":"https://api.github.com/repos/apache/openjpa/commits/9c3e403308b549da9b06d80005a08074ba97ea22","html_url":"https://github.com/apache/openjpa/commit/9c3e403308b549da9b06d80005a08074ba97ea22"}]},{"sha":"e52c11be3b99f62b7509454146278f159c55b329","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1MmMxMWJlM2I5OWY2MmI3NTA5NDU0MTQ2Mjc4ZjE1OWM1NWIzMjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-19T17:33:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-19T17:33:22Z"},"message":"[maven-release-plugin] prepare release 2.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@935682 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37e6762e3d18544384417f3e7c086059d9fa28ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/37e6762e3d18544384417f3e7c086059d9fa28ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e52c11be3b99f62b7509454146278f159c55b329","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e52c11be3b99f62b7509454146278f159c55b329","html_url":"https://github.com/apache/openjpa/commit/e52c11be3b99f62b7509454146278f159c55b329","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e52c11be3b99f62b7509454146278f159c55b329/comments","author":null,"committer":null,"parents":[{"sha":"7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563","url":"https://api.github.com/repos/apache/openjpa/commits/7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563","html_url":"https://github.com/apache/openjpa/commit/7312e27fdeb7d5d640d9ffa1e96dcbe4ea146563"}]},{"sha":"3c6051729cc63ac2daccb67569882c5857488496","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjNjA1MTcyOWNjNjNhYzJkYWNjYjY3NTY5ODgyYzU4NTc0ODg0OTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-19T17:33:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-19T17:33:26Z"},"message":"[maven-release-plugin]  copy for tag 2.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0@935683 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37e6762e3d18544384417f3e7c086059d9fa28ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/37e6762e3d18544384417f3e7c086059d9fa28ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3c6051729cc63ac2daccb67569882c5857488496","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3c6051729cc63ac2daccb67569882c5857488496","html_url":"https://github.com/apache/openjpa/commit/3c6051729cc63ac2daccb67569882c5857488496","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3c6051729cc63ac2daccb67569882c5857488496/comments","author":null,"committer":null,"parents":[{"sha":"47266d3f9316954259841268f9216286cceeb4e6","url":"https://api.github.com/repos/apache/openjpa/commits/47266d3f9316954259841268f9216286cceeb4e6","html_url":"https://github.com/apache/openjpa/commit/47266d3f9316954259841268f9216286cceeb4e6"},{"sha":"e52c11be3b99f62b7509454146278f159c55b329","url":"https://api.github.com/repos/apache/openjpa/commits/e52c11be3b99f62b7509454146278f159c55b329","html_url":"https://github.com/apache/openjpa/commit/e52c11be3b99f62b7509454146278f159c55b329"}]}],"files":[{"sha":"0e975adbfbf44c2a1164ad321970fa1016c452db","filename":"openjpa-all/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <build>"},{"sha":"00301fc9eb2846665b57b5d027659dcfd748373b","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -32,7 +32,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"03e3e874a0a5af73d8b5d1adc96de6da45889d43","filename":"openjpa-integration/daytrader/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/daytrader/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/daytrader/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -26,7 +26,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <artifactId>openjpa-integration-daytrader</artifactId>"},{"sha":"54c1322a44be9645e8b16380d2b1b13c8313814e","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -39,7 +39,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <profiles>"},{"sha":"7444c6b417f9e7b7a5812f28705b46092b97d50f","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <modules>\n         <module>daytrader</module>"},{"sha":"5f39308915042077db0cf56d6dc2cf5dc94f69cf","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -70,9 +70,13 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n+    <properties>\n+        <openjpa.Log>DefaultLevel=WARN</openjpa.Log>\n+    </properties>\n+\n     <profiles>\n       <profile>\n         <!-- JPA 2.0 TCK Profile -->\n@@ -234,7 +238,7 @@\n                         <property name=\"db.username\" value=\"nousername\" />\n                         <property name=\"db.password\" value=\"nopassword\" />\n \n-                        <property name=\"openjpa.log.level\" value=\"WARN\" />\n+                        <property name=\"openjpa.Log\" value=\"${openjpa.Log}\" />\n \n                         <property name=\"jpatck.pkg.dir\" value=\"com\" />\n                         <property name=\"jpatck.test\" value=\"\" />\n@@ -255,7 +259,7 @@ openjpa.ConnectionPassword: ${db.password}\n openjpa.FetchBatchSize: -1\n openjpa.Compatibility: StrictIdentityValues=true\n openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=${openjpa.log.level}\n+openjpa.Log: ${openjpa.Log}\n openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=false\n openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n                         </echo>"},{"sha":"321fb2ebbed1a92410debc17e9330cf3b15ade43","filename":"openjpa-integration/tck/tck2.xml","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/tck2.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/tck2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/tck2.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,9 +20,10 @@\n \n <!--\n     This ANT build file is used to run the JPA 2.0 TCK. It assumes that you have\n-    the TCK and patches zip files located at:\n+    the TCK, config  and patches zip files located at:\n \n         ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009.zip\n+        ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009_config.zip\n         ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009_patches.zip\n \n     If you have that file in a different location, it can be specified with\n@@ -57,19 +58,26 @@\n         <available property=\"tck.available\" file=\"${tck.zip}\" />\n         <fail unless=\"tck.available\">The TCK file specified in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n \n+        <property name=\"tck_config.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}_config.zip\" />\n+        <available property=\"tck_config.available\" file=\"${tck_config.zip}\" />\n+        <fail unless=\"tck_config.available\">The TCK config file specified in the \"tck_config.zip\" system property (${tck_config.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n+\n         <property name=\"tck_patches.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}_patches.zip\" />\n         <available property=\"tck_patches.available\" file=\"${tck_patches.zip}\" />\n         <fail unless=\"tck_patches.available\">The TCK patches file specified in the \"tck_patches.zip\" system property (${tck_patches.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n \n         <delete dir=\"${tck.dir}\" />\n         <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n+        <unzip overwrite=\"true\" src=\"${tck_config.zip}\" dest=\"${tck.base}\" />\n         <unzip overwrite=\"true\" src=\"${tck_patches.zip}\" dest=\"${tck.base}\" />\n         <copy overwrite=\"true\"\n             file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.dir}/bin/ts.jte.orig\" />\n         <copy overwrite=\"true\"\n             file=\"${tck.dir}/bin/ts.jtx\" tofile=\"${tck.dir}/bin/ts.jtx.orig\" />\n         <!-- Pluggability tests using Toplink needs this dir created -->\n         <mkdir dir=\"${tck.dir}/domains/domain1/logs\" />\n+        <!-- create other missing directory -->\n+        <mkdir dir=\"${tck.dir}/weblib\" />\n     </target>\n \n \n@@ -84,7 +92,7 @@\n         <property name=\"db.username\" value=\"nousername\" />\n         <property name=\"db.password\" value=\"nopassword\" />\n \n-        <property name=\"openjpa.log.level\" value=\"WARN\" />\n+        <property name=\"openjpa.Log\" value=\"DefaultLevel=TRACE\" />\n \n         <property name=\"jpatck.test\" value=\"\" />\n \n@@ -103,7 +111,7 @@ openjpa.ConnectionPassword: ${db.password}\n openjpa.FetchBatchSize: -1\n openjpa.Compatibility: StrictIdentityValues=true\n openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=${openjpa.log.level}\n+openjpa.Log: ${openjpa.Log}\n openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=true\n openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n openjpa.jdbc.SynchronizeMappings: buildSchema(ForeignKeys=true)"},{"sha":"e88dfaa2ac6af8f2d65e10f8360c54601a3024ad","filename":"openjpa-integration/validation/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/validation/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/validation/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -26,7 +26,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <artifactId>openjpa-integration-validation</artifactId>"},{"sha":"75868d7ac0e30eb13d497b967e4fe2bd306d59ee","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"1ae57aee0dcba2f69f51a1fc49e90256bc439628","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -192,12 +192,11 @@ protected void flushBatch() throws SQLException {\n                 //similar to this path, or I should say, the path which is taken instead of this path when\n                 //we aren't using batching), we see that the catch block doesn't do a 'se.getNextException'.\n                 //When we do a 'getNextException', the 'next exception' doesn't contain the same message as se.\n-                //That is, 'next exception' contains a subset msg which is contained in se.  For legacy, should\n-                //we continute to use 'sqex' in the 'old path' and use 'se' in the next path/code?????\n-                //SQLException sqex = se.getNextException();\n-                //if (sqex == null)\n-                //    sqex = se;\n-                SQLException sqex = se;\n+                //That is, 'next exception' contains a subset msg which is contained in se.\n+                SQLException sqex = se.getNextException();\n+                if (sqex == null){\n+                    sqex = se;\n+                }\n                 \n                 if (se instanceof ReportingSQLException){\n                   int index = ((ReportingSQLException) se).getIndexOfFirstFailedObject();\n@@ -209,24 +208,23 @@ protected void flushBatch() throws SQLException {\n                       index = 0;\n                   }\n                   \n-                  //index should not be less than 0 this path, but if for some reason it is, lets\n+                  //index should not be less than 0 in this path, but if for some reason it is, lets\n                   //resort to the 'old way' and simply pass the 'ps' as the failed object.\n                   if (index < 0){ \n-                      throw SQLExceptions.getStore(sqex, ps, _dict);\n+                      throw SQLExceptions.getStore(se, ps, _dict);\n                   }\n                   else{\n-                      throw SQLExceptions.getStore(sqex, ((RowImpl)(_batchedRows.get(index))).getFailedObject(), _dict);\n+                      throw SQLExceptions.getStore(se, ((RowImpl)(_batchedRows.get(index))).getFailedObject(), _dict);\n                   }                    \n                 }\n                 else{\n+                \t//per comments above, use 'sqex' rather than 'se'. \n                     throw SQLExceptions.getStore(sqex, ps, _dict);\n                 }\n             } finally {\n                 _batchedSql = null;\n                 batchedRows.clear();\n                 if (ps != null) {\n-                    //Clear the Params now....should this be done above? No. \n-                    //if JDBC provider using PureQuery, ps is null\n                     ps.clearParameters();\n                     try {\n                         ps.close();"},{"sha":"6dff913423796ee0f75704e0e15efdfe658a91ae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":47,"deletions":22,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -30,12 +30,15 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.QueryCacheStoreQuery;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -295,6 +298,11 @@ public boolean exists(OpenJPAStateManager sm, Object context) {\n         return exists(mapping, sm.getObjectId(), context);\n     }\n \n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        // JDBCStoreManager doesn't store oids in memory.\n+        return false;\n+    }\n+    \n     private boolean exists(ClassMapping mapping, Object oid, Object context) {\n         // add where conditions on base class to avoid joins if subclass\n         // doesn't use oid as identifier\n@@ -455,8 +463,9 @@ private void setInverseRelation(OpenJPAStateManager owner,\n         // Check if the owner has eagerly loaded ToMany relations.\n         for (int i = 0; i < fms.length; i++) {\n             if (res.getEager(fms[i]) != null) {\n-                if (!fms[i].getElement().isTypePC())\n+                if (!fms[i].getElement().isTypePC()) {\n                     continue;\n+                }\n                 Object coll =  owner.fetchObject(fms[i].getIndex());\n                 if (coll instanceof Map)\n                     coll = ((Map)coll).values();\n@@ -471,24 +480,23 @@ private void setInverseRelation(OpenJPAStateManager owner,\n                     for (Iterator<?> itr = ((Collection<?>) coll).iterator();\n                         itr.hasNext();) {\n                         PersistenceCapable pc = (PersistenceCapable) itr.next();\n-\n-                        if (pc == null)\n+                        if (pc == null) {\n                             continue;\n-\n-                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n-                            pcGetStateManager();\n-                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n-                            getFieldMappings();\n+                        }\n+                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.pcGetStateManager();\n+                        ClassMapping cm =\n+                            (ClassMapping) _conf.getMetaDataRepositoryInstance().getCachedMetaData(pc.getClass());\n+                        FieldMapping[] fmd = cm.getFieldMappings();\n                         for (int j = 0; j < fmd.length; j++) {\n-                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n-                            // if oid was setIntermediate() previously\n-                            // and it is the same as the owner,\n-                            // then set the inverse relation\n-                            if (oid != null &&\n-                                oid.equals(owner.getObjectId())) {\n-                                sm.storeObject(fmd[j].getIndex(),\n-                                    owner.getPersistenceCapable());\n-                                break;\n+                            // don't check the oids for basic fields.\n+                            if (fmd[j].isTypePC()) {\n+                                Object oid = sm.getIntermediate(fmd[j].getIndex());\n+                                // if oid was setIntermediate() previously and it is the same as the owner,generate\n+                                // then set the inverse relation\n+                                if (oid != null && oid.equals(owner.getObjectId())) {\n+                                    sm.storeObject(fmd[j].getIndex(), owner.getPersistenceCapable());\n+                                    break;\n+                                }\n                             }\n                         }\n                     }\n@@ -911,16 +919,33 @@ private BitSet selectExtent(Select sel, ClassMapping mapping,\n         return paged;\n     }\n \n-    public StoreQuery newQuery(String language) {\n+    private StoreQuery newStoreQuery(String language) {\n         ExpressionParser ep = QueryLanguages.parserForLanguage(language);\n-        if (ep != null)\n+        if (ep != null) { \n             return new JDBCStoreQuery(this, ep);\n-        if (QueryLanguages.LANG_SQL.equals(language))\n+        }\n+        if (QueryLanguages.LANG_SQL.equals(language)) {\n             return new SQLStoreQuery(this);\n-        if (QueryLanguages.LANG_PREPARED_SQL.equals(language))\n+        }\n+        if (QueryLanguages.LANG_PREPARED_SQL.equals(language)) {\n             return new PreparedSQLStoreQuery(this);\n+        }\n         return null;\n     }\n+    \n+    public StoreQuery newQuery(String language) {\n+        StoreQuery sq = newStoreQuery(language); \n+        if (sq == null || QueryLanguages.parserForLanguage(language) == null) {\n+            return sq;\n+        }\n+\n+        QueryCache queryCache = _ctx.getConfiguration().getDataCacheManagerInstance().getSystemQueryCache();\n+        if (queryCache == null) {\n+            return sq;\n+        }\n+        \n+        return new QueryCacheStoreQuery(sq, queryCache);\n+    }\n \n     public FetchConfiguration newFetchConfiguration() {\n         return new JDBCFetchConfigurationImpl();\n@@ -975,7 +1000,7 @@ protected RefCountConnection connectInternal() throws SQLException {\n     \n     public Connection getNewConnection() {\n         try {\n-            return connectInternal();\n+            return _ds.getConnection();\n         } catch (SQLException e) {\n             throw SQLExceptions.getStore(e, _dict);\n         }"},{"sha":"8799e63f9498e3fe879b316e77cc296bdb38f16c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.CacheMap;\n \n /**\n  * An implementation of the cache of {@link PreparedQuery prepared queries}. \n@@ -56,15 +57,15 @@\n \t// Key: Query identifier Value: Reason why excluded\n \tprivate final Map<String, Exclusion> _uncachables;\n \tprivate final List<Exclusion> _exclusionPatterns;\n-\tprivate final QueryStatistics<String> _stats;\n+\tprivate QueryStatistics<String> _stats;\n+\tprivate boolean _statsEnabled;\n \tprivate ReentrantLock _lock = new ReentrantLock();\n \tprivate Log _log;\n     private static Localizer _loc = Localizer.forPackage(PreparedQueryCacheImpl.class);\n     \n \tpublic PreparedQueryCacheImpl() {\n-\t\t_delegate = new HashMap<String, PreparedQuery>();\n-\t\t_uncachables = new HashMap<String, Exclusion>();\n-\t\t_stats = new QueryStatistics.Default<String>();\n+\t\t_delegate = new CacheMap();\n+\t\t_uncachables = new CacheMap();\n \t\t_exclusionPatterns = new ArrayList<Exclusion>();\n \t}\n \t\n@@ -315,6 +316,14 @@ public void clear() {\n         _delegate.clear();\n         _stats.clear();\n     }\n+    \n+    public void setEnableStatistics(boolean enable){\n+        _statsEnabled = enable;\n+    }\n+    \n+    public boolean getEnableStatistics(){\n+        return _statsEnabled;\n+    }\n         \n \t//-------------------------------------------------------\n \t// Configurable contract\n@@ -327,6 +336,8 @@ public void startConfiguration() {\n     }\n \n     public void endConfiguration() {\n+        _stats = _statsEnabled ? new QueryStatistics.Default<String>() :\n+                                 new QueryStatistics.None<String>();\n     }\n     \n     /**"},{"sha":"a741595919941bb9a2530bf357426255058104eb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -572,9 +572,12 @@ public void generateTables(DBIdentifier schemaName, DBIdentifier tableName,\n         Schema schema;\n         Table table;\n         DBIdentifier tableSchema = DBIdentifier.NULL;\n+        DBIdentifier baseTableName = (tableName == null) ? DBIdentifier.NULL : tableName.clone();\n         for (int i = 0; cols != null && i < cols.length; i++) {\n-            if (DBIdentifier.isNull(tableName) || tableName.equals(\"%\")) {\n+            if (DBIdentifier.isNull(baseTableName) || baseTableName.equals(\"%\")) {\n                 tableName = cols[i].getTableIdentifier();\n+            } else {\n+            \ttableName = baseTableName;\n             }\n             if (DBIdentifier.isNull(schemaName)) {\n                 tableSchema = DBIdentifier.trimToNull(cols[i].getSchemaIdentifier());"},{"sha":"0423444343ec97a59004512c5d76b19676d5be75","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -929,8 +929,18 @@ public boolean isFatalException(int subtype, SQLException ex) {\n         int errorCode = ex.getErrorCode();\n         if (errorCode == -952 && \"57014\".equals(errorState))\n             return false;\n+        /*\n+         * Check if this Exception was generated by a lock timeout expiration.\n+         * The following criteria are used to determine this:\n+         * \n+         * DB2 LUW Infocenter: SQLSTATE=57033 with reason code \"80\" indicates\n+         * the statement failed due to timeout. DB2 for z/OS Stored Procedures:\n+         * Through the CALL and Beyond, page 188: An ErrorCode of -913 with\n+         * SQLERR 00C9008E means a timeout has occurred.\n+         */\n         if (subtype == StoreException.LOCK && \"57033\".equals(errorState)\n-            && ex.getMessage().indexOf(\"80\") != -1) {\n+            && ((ex.getMessage().indexOf(\"80\") != -1) \n+                || (errorCode == -913 && ex.getMessage().contains(\"00C9008E\")))) {\n             return false;\n         } \n         if ((subtype == StoreException.QUERY && \"57014\".equals(errorState) &&"},{"sha":"c7028113c1e51b995c19dde5e05317e77bd38506","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":29,"deletions":18,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -27,7 +27,6 @@\n import java.sql.Types;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Set;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n@@ -317,24 +316,15 @@ public Connection decorate(Connection conn)\n \n         // if we haven't already done so, initialize the lock mode of the\n         // connection\n-        if (lockModeEnabled && _seenConnections.add(conn)) {\n-            String sql = \"SET LOCK MODE TO WAIT\";\n-            if (lockWaitSeconds > 0)\n-                sql = sql + \" \" + lockWaitSeconds;\n-\n-            Statement stmnt = null;\n-            try {\n-                stmnt = conn.createStatement();\n-                stmnt.executeUpdate(sql);\n-            } catch (SQLException se) {\n-                throw SQLExceptions.getStore(se, this);\n-            } finally {\n-                if (stmnt != null)\n-                    try {\n-                        stmnt.close();\n-                    } catch (SQLException se) {\n-                    }\n+        if (_seenConnections.add(conn)) {\n+            if (lockModeEnabled) {\n+                String sql = \"SET LOCK MODE TO WAIT\";\n+                if (lockWaitSeconds > 0)\n+                    sql = sql + \" \" + lockWaitSeconds;\n+                execute(sql, conn, true);\n             }\n+            String sql = \"SET ENVIRONMENT RETAINUPDATELOCKS 'ALL'\";\n+            execute(sql, conn, false);\n         }\n \n         // the datadirect driver requires that we issue a rollback before using\n@@ -346,6 +336,27 @@ public Connection decorate(Connection conn)\n             }\n         return conn;\n     }\n+    \n+    private void execute(String sql, Connection conn, boolean throwExc) {\n+        Statement stmnt = null;\n+        try {\n+            stmnt = conn.createStatement();\n+            stmnt.executeUpdate(sql);\n+        } catch (SQLException se) {\n+            if (throwExc)\n+                throw SQLExceptions.getStore(se, this);\n+            else {\n+                if (log.isTraceEnabled())\n+                    log.trace(_loc.get(\"can-not-execute\", sql));\n+            }\n+        } finally {\n+            if (stmnt != null)\n+                try {\n+                    stmnt.close();\n+                } catch (SQLException se) {\n+                }\n+        }\n+    }\n \n     @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,"},{"sha":"ba30cb0e70f12c84a14623977a6703701fa80352","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -27,6 +27,7 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n@@ -422,6 +423,24 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n         return result;\n     }\n     \n+    @Override\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n+        int state = super.matchErrorState(errorStates, ex);\n+        // OPENJPA-1616 - Special case for MySQL not returning a SQLState for timeouts\n+        if (state == StoreException.GENERAL && ex.getErrorCode() == 0 && ex.getSQLState() == null) {\n+            // look at the nested MySQL exception for more details\n+            SQLException sqle = ex.getNextException();\n+            if (sqle != null && sqle.toString().startsWith(\"com.mysql.jdbc.exceptions.MySQLTimeoutException\")) {\n+                if (conf != null && conf.getLockTimeout() != -1) {\n+                    state = StoreException.LOCK;\n+                } else {\n+                    state = StoreException.QUERY;\n+                }\n+            }\n+        }\n+        return state;\n+    }\n+\n     @Override\n     public boolean isFatalException(int subtype, SQLException ex) {\n         if ((subtype == StoreException.LOCK  && ex.getErrorCode() == 1205)"},{"sha":"1a14a60b3cca4524d7f173c42326e1db7073bc04","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -207,3 +207,5 @@ unknown-delim-support: Unable to determine whether delimited identifiers are sup\n can_not_get_current_schema: Unable to get current schema. SQLException message is \"{0}\".\n cannot-determine-identifier-base-case: Unable to determine the case to use for \\\n     identifiers.  The default value of \"{0}\" will be used.\n+can-not-execute: Unable to execute {0}.\n+"},{"sha":"8f876328663c85384698333cea8d9f83309357ea","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -47,9 +47,9 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\n-\t\t<lock>1204,1205,1222</lock>\n+\t\t<lock>1204,1205,1222,HY008</lock>\n \t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\n-\t\t<object-exists></object-exists>\n+\t\t<object-exists>23000</object-exists>\n \t\t<object-not-found></object-not-found>\n \t\t<optimistic>1205</optimistic>\n \t\t<query>HY008</query>\n@@ -164,7 +164,7 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">\n-\t\t<lock>42000,61000</lock>\n+\t\t<lock>42000,61000,72000</lock>\n \t\t<referential-integrity>1,1400,1722,2291,2292</referential-integrity>\n \t\t<object-exists>23000</object-exists>\n \t\t<object-not-found></object-not-found>"},{"sha":"f04167ce2cd94699a6ffbed0df305e7395664c77","filename":"openjpa-kernel/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"fbff958b8bcf749367dd8888a2a72cea5b51059d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -66,6 +66,7 @@\n     private boolean _isNonDefaultMappingAllowed = false;\n     private boolean _reorderMetaDataResolution = true;\n     private boolean _reloadOnDetach = false;\n+    private boolean _ignoreDetachedStateFieldForProxySerialization = false;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -295,6 +296,39 @@ public boolean getFlushBeforeDetach() {\n         return _flushBeforeDetach;\n     }\n \n+    /**\n+     * Whether OpenJPA should ignore the DetachedStateField value when\n+     * determining if our Proxy classes should be removed during serialization.\n+     * <P>Starting with version 2.0.0, when the DetachedStateFiled==true, the\n+     * build time $proxy classes will not be removed.\n+     * <P>Prior to version 2.0.0, the DetachedStateFiled was not used and\n+     * the $proxy classes were not being removed during serialization after\n+     * the Persistence context was cleared.\n+     * \n+     * @param ignoreDSF if true the old Proxy serialization behavior will be used.\n+     * \n+     * @since 2.0.0\n+     */\n+    public void setIgnoreDetachedStateFieldForProxySerialization(boolean ignoreDSF) {\n+        _ignoreDetachedStateFieldForProxySerialization = ignoreDSF;\n+    }\n+    \n+    /**\n+     * Whether OpenJPA should ignore the DetachedStateField value when\n+     * determining if our Proxy classes should be removed during serialization.\n+     * <P>Starting with version 2.0.0, when the DetachedStateFiled==true, the\n+     * build time $proxy classes will not be removed.\n+     * <P>Prior to version 2.0.0, the DetachedStateFiled was not used and\n+     * the $proxy classes were not being removed during serialization after\n+     * the Persistence context was cleared.\n+     * \n+     * @since 2.0.0\n+     * @return true if the old Proxy serialization will be used, otherwise false.\n+     */\n+    public boolean getIgnoreDetachedStateFieldForProxySerialization() {\n+        return _ignoreDetachedStateFieldForProxySerialization;\n+    }\n+\n     /**\n      * Whether OpenJPA should flush changes before detaching or serializing an\n      * entity. In JPA this is usually false, but other persistence frameworks"},{"sha":"5940c1cd45aa61e47822e2302112bf6cb8a9538d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -57,7 +57,11 @@\n     \n     public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectValue queryCache) {\n         _conf = conf;\n+        _queryCache = (QueryCache) queryCache.instantiate(QueryCache.class, conf);\n+        if (_queryCache != null)\n+            _queryCache.initialize(this);\n         _cache = (DataCache) dataCache.instantiate(DataCache.class, conf);\n+\n         if (_cache == null)\n             return;\n          \n@@ -69,9 +73,7 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectV\n         _policy = conf.getCacheDistributionPolicyInstance();\n \n         _cache.initialize(this);\n-        _queryCache = (QueryCache) queryCache.instantiate(QueryCache.class, conf);\n-        if (_queryCache != null)\n-            _queryCache.initialize(this);\n+\n     }\n \n     public DataCache getSystemDataCache() {\n@@ -155,6 +157,7 @@ public void setTypes(Set<String> includedTypes, Set<String> excludedTypes){\n         _includedTypes = includedTypes;\n         _excludedTypes = excludedTypes;\n     }\n+    \n     /**\n      * Affirms the given class is eligible to be cached according to the cache mode\n      * and the cache enable flag on the given metadata."},{"sha":"15c58491d1c551fdb3d9ae566a5844b5b98675d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":21,"deletions":37,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -34,14 +34,11 @@\n import org.apache.openjpa.kernel.DataCacheStoreMode;\n import org.apache.openjpa.kernel.DelegatingStoreManager;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FindCallbacks;\n import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n-import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.StoreManager;\n-import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.OpenJPAId;\n@@ -228,22 +225,6 @@ private void updateCaches() {\n                 evictTypes(_ctx.getUpdatedTypes());\n             }\n \n-            // and notify the query cache.  notify in one batch to reduce synch\n-            QueryCache queryCache = _ctx.getConfiguration().\n-            getDataCacheManagerInstance().getSystemQueryCache();\n-            if (queryCache != null) {\n-                Collection<Class<?>> pers = _ctx.getPersistedTypes();\n-                Collection<Class<?>> del = _ctx.getDeletedTypes();\n-                Collection<Class<?>> up = _ctx.getUpdatedTypes();\n-                int size = pers.size() + del.size() + up.size();\n-                if (size > 0) {\n-                    Collection<Class<?>> types = new ArrayList<Class<?>>(size);\n-                    types.addAll(pers);\n-                    types.addAll(del);\n-                    types.addAll(up);\n-                    queryCache.onTypesChanged(new TypesChangedEvent(this, types));\n-                }\n-            } \n         }\n     }\n \n@@ -292,12 +273,31 @@ private static Modifications getModifications(Map<DataCache,Modifications> modMa\n \n     public boolean exists(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm); \n-        if (cache != null && !isLocking(null)\n-            && cache.contains(sm.getObjectId()))\n+        if (cache != null && !isLocking(null) && cache.contains(sm.getObjectId()))\n             return true;\n         return super.exists(sm, edata);\n     }\n \n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        // If using partitioned cache, we were and still are broke.\n+        DataCache cache = _mgr.getSystemDataCache();\n+        if (cache != null && !isLocking(null)) {\n+            // BitSet size is not consistent.\n+            for(int i = 0; i < oids.size(); i++) {\n+                Object oid = oids.get(i);\n+                // Only check the cache if we haven't found the current oid.\n+                if (edata.get(i) == false && cache.contains(oid)) {\n+                    edata.set(i);\n+                }\n+            }\n+            if(edata.cardinality()==oids.size()){\n+                return true;\n+            }\n+        }\n+\n+        return super.isCached(oids, edata);\n+    }\n+\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n         if (cache == null || sm.isEmbedded())\n@@ -660,22 +660,6 @@ private void notifyOptimisticLockFailure(OptimisticException e) {\n             .fireLocalStaleNotification(oid);\n     }\n \n-    public StoreQuery newQuery(String language) {\n-        StoreQuery q = super.newQuery(language);\n-\n-        // if the query can't be parsed or it's using a non-parsed language\n-        // (one for which there is no ExpressionParser), we can't cache it.\n-        if (q == null || QueryLanguages.parserForLanguage(language) == null)\n-            return q;\n-\n-        QueryCache queryCache = _ctx.getConfiguration().\n-            getDataCacheManagerInstance().getSystemQueryCache();\n-        if (queryCache == null)\n-            return q;\n-\n-        return new QueryCacheStoreQuery(q, queryCache);\n-    }\n-\n     /**\n      * Create a new cacheable instance for the given state manager.\n      */"},{"sha":"4457c1ec7b736a5fac8a428d1cb7ea2a9a70110d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -33,6 +33,7 @@\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.datacache.AbstractQueryCache.EvictPolicy;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -122,6 +123,7 @@ public StoreQuery getDelegate() {\n \n         // get the cached data\n         QueryResult res = _cache.get(qk);\n+\n         if (res == null)\n             return null;        \n         if (res.isEmpty())\n@@ -153,24 +155,11 @@ public StoreQuery getDelegate() {\n \n         int projs = getContext().getProjectionAliases().length;\n         if (projs == 0) {\n-            // make sure the data cache contains the oids for the query result;\n-            // if it doesn't, then using the result could be slower than not\n-            // using it because of the individual by-oid lookups\n-            ClassMetaData meta = _repos.getMetaData(getContext().\n-                getCandidateType(), _sctx.getClassLoader(), true);\n-            if (meta.getDataCache() == null)\n+            // We're only going to return the cached results if we have ALL results cached. This could be improved\n+            // in the future to be a little more intelligent.\n+            if (getContext().getStoreContext().isCached(res) == false) {\n                 return null;\n-\n-            BitSet idxs = meta.getDataCache().containsAll(res);\n-\n-            // eventually we should optimize this to figure out how many objects\n-            // the cache is missing and if only a few do a bulk fetch for them\n-            int len = idxs.length();\n-            if (len < res.size())\n-                return null;\n-            for (int i = 0; i < len; i++)\n-                if (!idxs.get(i))\n-                    return null;\n+            }\n         }\n         return new CachedList(res, projs != 0, _sctx);\n     }"},{"sha":"70d7b463eb78a6fdecfbe4436420546ed79f09b9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -200,14 +200,11 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n             // since the class change framework deals with least-derived types,\n             // record the least-derived access path types\n             meta = metas[i];\n-            if (meta.getDataCache() != null)\n-                accessPathClassNames.add(meta.getDescribedType().getName());\n-            while (meta.getPCSuperclass() != null)\n-                meta = meta.getPCSuperclassMetaData();\n-\n-            // ensure that this metadata is cacheable\n-            if (meta.getDataCache() == null)\n-                return null;\n+            accessPathClassNames.add(meta.getDescribedType().getName());\n+            while (meta.getPCSuperclass() != null) {\n+                meta = meta.getPCSuperclassMetaData(); \n+            }\n+\n             accessPathClassNames.add(meta.getDescribedType().getName());\n         }\n "},{"sha":"185a73b3f497c76e9d345efb0a90130056fb7de2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":50,"deletions":12,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -51,6 +51,8 @@\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.TypesChangedEvent;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -70,7 +72,6 @@\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -88,7 +89,6 @@\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n-import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -1416,8 +1416,25 @@ private RuntimeException endStoreManagerTransaction(boolean rollback) {\n                 releaseConn = _connRetainMode != CONN_RETAIN_ALWAYS;\n                 if (rollback)\n                     _store.rollback();\n-                else\n+                else {\n+                    // and notify the query cache.  notify in one batch to reduce synch\n+                    QueryCache queryCache = getConfiguration().\n+                    getDataCacheManagerInstance().getSystemQueryCache();\n+                    if (queryCache != null) {\n+                        Collection<Class<?>> pers = getPersistedTypes();\n+                        Collection<Class<?>> del = getDeletedTypes();\n+                        Collection<Class<?>> up = getUpdatedTypes();\n+                        int size = pers.size() + del.size() + up.size();\n+                        if (size > 0) {\n+                            Collection<Class<?>> types = new ArrayList<Class<?>>(size);\n+                            types.addAll(pers);\n+                            types.addAll(del);\n+                            types.addAll(up);\n+                            queryCache.onTypesChanged(new TypesChangedEvent(this, types));\n+                        }\n+                    } \n                     _store.commit();\n+                }\n             } else {\n                 releaseConn = _connRetainMode == CONN_RETAIN_TRANS;\n                 _store.rollbackOptimistic();\n@@ -2276,8 +2293,14 @@ private OpenJPAException newFlushException(Collection<Exception> exceps) {\n         }\n         if (opt)\n             return new OptimisticException(t);\n+        \n+        Object failedObject = null;\n+        if (t[0] instanceof OpenJPAException){\n+        \tfailedObject = ((OpenJPAException)t[0]).getFailedObject();\n+        }\n+        \n         return new StoreException(_loc.get(\"rolled-back\")).\n-            setNestedThrowables(t).setFatal(true);\n+            setNestedThrowables(t).setFatal(true).setFailedObject(failedObject);\n     }\n \n     /**\n@@ -2565,7 +2588,7 @@ else if (idType == ClassMetaData.ID_UNKNOWN)\n                 pc.pcReplaceStateManager(null);\n \n             // create new sm\n-            sm = new StateManagerImpl(id, meta, this);\n+            sm = newStateManagerImpl(id, meta);\n             if ((_flags & FLAG_ACTIVE) != 0) {\n                 if (explicit)\n                     sm.initialize(pc, PCState.PNEW);\n@@ -2599,8 +2622,8 @@ private void cascadeTransient(int op, Object obj, OpCallbacks call,\n \n         ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n             getMetaData(obj.getClass(), _loader, true);\n-        StateManagerImpl sm = new StateManagerImpl(StateManagerId.\n-            newInstance(this), meta, this);\n+        StateManagerImpl sm = newStateManagerImpl(StateManagerId.\n+            newInstance(this), meta);\n         sm.initialize(pc, PCState.TLOADED);\n         try {\n             switch (op) {\n@@ -2776,7 +2799,7 @@ public OpenJPAStateManager embed(Object obj, Object id,\n             if (id == null)\n                 id = StateManagerId.newInstance(this);\n \n-            StateManagerImpl sm = new StateManagerImpl(id, meta, this);\n+            StateManagerImpl sm = newStateManagerImpl(id, meta);\n             sm.setOwner((StateManagerImpl) owner, ownerMeta);\n \n             PersistenceCapable copy;\n@@ -2853,7 +2876,7 @@ OpenJPAStateManager copy(OpenJPAStateManager copy, PCState state) {\n                     getMetaDataRepositoryInstance();\n                 ClassMetaData meta = repos.getMetaData(type, _loader, true);\n                 // construct a new state manager with all info known\n-                sm = new StateManagerImpl(oid, meta, this);\n+                sm = newStateManagerImpl(oid, meta);\n                 sm.setObjectId(oid);\n                 sm.initialize(sm.getMetaData().getDescribedType(), state);\n             }\n@@ -3492,8 +3515,8 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n                         meta = _conf.getMetaDataRepositoryInstance().\n                             getMetaData(obj.getClass(), _loader, true);\n \n-                        sm = new StateManagerImpl\n-                            (StateManagerId.newInstance(this), meta, this);\n+                        sm = newStateManagerImpl\n+                            (StateManagerId.newInstance(this), meta);\n                         sm.initialize(assertPersistenceCapable(obj),\n                             PCState.TCLEAN);\n                     } else if (sm.isPersistent()) {\n@@ -3564,7 +3587,7 @@ public void transactional(Object obj, boolean updateVersion,\n                 ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                     getMetaData(obj.getClass(), _loader, true);\n                 Object id = StateManagerId.newInstance(this);\n-                sm = new StateManagerImpl(id, meta, this);\n+                sm = newStateManagerImpl(id, meta);\n                 sm.initialize(assertPersistenceCapable(obj),\n                     PCState.TCLEAN);\n             }\n@@ -5033,4 +5056,19 @@ public Object getConnectionFactory2() {\n             return null;\n         }\n     }\n+    \n+    public boolean isCached(List<Object> oids) {\n+        BitSet loaded = new BitSet(oids.size());\n+        //check L1 cache first\n+        for (int i = 0; i < oids.size(); i++) {\n+            Object oid = oids.get(i);\n+            if (_cache.getById(oid, false) != null) {\n+                loaded.set(i);\n+            }\n+        }\n+        if(loaded.cardinality()==oids.size()){\n+            return true;\n+        }\n+        return _store.isCached(oids, loaded);\n+    };\n }"},{"sha":"dbf1aff3e30da1169156a7b4f1c80fedd4b51fce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -21,6 +21,7 @@\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -1463,4 +1464,8 @@ public Object getConnectionFactory() {\n     public Object getConnectionFactory2() {\n         return _broker.getConnectionFactory2();\n     }\n+    \n+    public boolean isCached(List<Object> oid) {\n+        return _broker.isCached(oid);\n+    }\n }"},{"sha":"7de80286336914b071cd8e0d0c12b2ab7cd20325","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,6 +20,7 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n \n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -199,4 +200,9 @@ public Seq getValueSequence(FieldMetaData fmd) {\n     public boolean cancelAll() {\n         return _store.cancelAll();\n \t}\n+\t\n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        return _store.isCached(oids, edata);\n+    }\n+    \n }"},{"sha":"33c6761e309b7432a691b9e082cf96c3784a49f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -708,10 +708,8 @@ public void storeObjectField(int field, Object curVal) {\n          * Set the owner of the field's proxy to the detached state manager.\n          */\n         private Object reproxy(Object obj, int field) {\n-            if (obj != null && _detSM != null && obj instanceof Proxy) {\n+            if (obj != null && _detSM != null && obj instanceof Proxy)\n                 ((Proxy) obj).setOwner(_detSM, field);\n-                return ((Proxy) obj).copy(obj); \n-            }\n             return obj;\n         }\n "},{"sha":"1c58524f31ba0951ef91342b28f7dfa2b434956d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -25,6 +25,7 @@\n import java.util.Collection;\n import java.util.Map;\n \n+import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -62,6 +63,7 @@\n     private final Object _oid;\n     private final Object _version;\n     private final ReentrantLock _lock;\n+    private final boolean _useDSFForUnproxy;   // old releases will default to FALSE, which is the old behavior\n \n     /**\n      * Constructor.\n@@ -89,6 +91,14 @@ public DetachedStateManager(PersistenceCapable pc, OpenJPAStateManager sm,\n             _lock = new ReentrantLock();\n         else\n             _lock = null;\n+        if (sm.getContext() != null && sm.getContext().getConfiguration() != null) {\n+            Compatibility compat = sm.getContext().getConfiguration().getCompatibilityInstance();\n+            if (compat != null && !compat.getIgnoreDetachedStateFieldForProxySerialization())\n+                _useDSFForUnproxy = true;      // new 2.0 behavior\n+            else\n+                _useDSFForUnproxy = false;\n+        } else\n+            _useDSFForUnproxy = false;\n     }\n \n     /////////////////////////////////\n@@ -731,6 +741,15 @@ public BitSet getDirty() {\n         return _dirty;\n     }\n \n+    /**\n+     * Should DetachedStateField be used by Proxies to determine when to remove\n+     * $proxy wrappers during serialization.\n+     * @since 2.0.0\n+     */\n+    public boolean getUseDSFForUnproxy() {\n+        return _useDSFForUnproxy;\n+    }\n+\n     public BitSet getFlushed() {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"34a4f4a9ad162139afb644799a3a1ec481d78515","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -195,8 +195,21 @@\n \t */\n \tpublic void clear();\n \t\n+\t/**\n+\t * Enable/disable gathering of statistics.\n+\t * \n+\t */\n+    public void setEnableStatistics(boolean enable);\n+    \n+    /**\n+     * Affirm if statistics is gathered.\n+     * \n+     */\n+    public boolean getEnableStatistics();\n+    \n \t/**\n \t * Gets the simple statistics for executed queries.\n+\t * If the statistics gathering is disabled, an empty statistics is returned. \n \t */\n \tpublic QueryStatistics<String> getStatistics();\n \t"},{"sha":"02e4c5087169aa76cdccffae9d678c98b16589de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","status":"modified","additions":91,"deletions":13,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,11 +20,13 @@\n \n import java.io.PrintStream;\n import java.io.Serializable;\n+import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.lib.util.concurrent.SizedConcurrentHashMap;\n+\n /**\n  * Records query execution statistics.\n  * \n@@ -119,17 +121,24 @@\n \t\n \t/**\n \t * A default implementation.\n-\t *\n+\t * \n+\t * Maintains statistics for only a fixed number of queries.\n+\t * Statistical counts are approximate and not exact (to keep thread synchorization overhead low).\n+\t * \n \t */\n \tpublic static class Default<T> implements QueryStatistics<T> {\n+\t    private static final int FIXED_SIZE = 1000;\n+\t    private static final float LOAD_FACTOR = 0.75f;\n+\t    private static final int CONCURRENCY = 16;\n+\t    \n \t\tprivate static final int ARRAY_SIZE = 2;\n         private static final int READ  = 0;\n         private static final int HIT   = 1;\n         \n \t\tprivate long[] astat = new long[ARRAY_SIZE];\n \t\tprivate long[] stat  = new long[ARRAY_SIZE];\n-\t\tprivate Map<T, long[]> stats  = new HashMap<T, long[]>();\n-\t\tprivate Map<T, long[]> astats = new HashMap<T, long[]>();\n+\t\tprivate Map<T, long[]> stats  = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t\tprivate Map<T, long[]> astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = start;\n \t\t\n@@ -182,17 +191,17 @@ public Date start() {\n \t\t\treturn start;\n \t\t}\n \n-\t\tpublic void reset() {\n+\t\tpublic synchronized void reset() {\n \t\t\tstat = new long[ARRAY_SIZE];\n \t\t\tstats.clear();\n \t\t\tsince = new Date();\n \t\t}\n \t\t\n-\t    public void clear() {\n+\t    public synchronized void clear() {\n \t       astat = new long[ARRAY_SIZE];\n \t       stat  = new long[ARRAY_SIZE];\n-\t       stats = new HashMap<T, long[]>();\n-\t       astats = new HashMap<T, long[]>();\n+\t       stats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t       astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n \t       start  = new Date();\n \t       since  = start;\n \t    }\n@@ -217,7 +226,7 @@ private void addSample(Map<T, long[]> target, T query, int i) {\n \t\tpublic void recordExecution(T query) {\n \t\t    if (query == null)\n \t\t        return;\n-\t\t    boolean cached = (astats.containsKey(query));\n+\t\t    boolean cached = astats.containsKey(query);\n \t\t\taddSample(query, READ);\n \t\t\tif (cached)\n \t\t\t\taddSample(query, HIT);\n@@ -244,8 +253,7 @@ public void dump(PrintStream out) {\n                     out.println(i + \". \\t\" + toString(arow) + \" \\t\" + key);\n \t\t\t\t} else {\n \t\t\t\t\tlong[] row  = stats.get(key);\n-                    out.println(i + \". \\t\" + toString(arow) + \" \\t\"  \n-\t\t\t\t\t    + toString(row) + \" \\t\\t\" + key);\n+                    out.println(i + \". \\t\" + toString(arow) + \" \\t\"  + toString(row) + \" \\t\\t\" + key);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -257,8 +265,78 @@ long pct(long per, long cent) {\n \t\t}\n \t\t\n \t\tString toString(long[] row) {\n-            return row[READ] + \":\" + row[HIT] + \"(\" + pct(row[HIT], row[READ])\n-\t\t\t+ \"%)\";\n+            return row[READ] + \":\" + row[HIT] + \"(\" + pct(row[HIT], row[READ]) + \"%)\";\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * A do-nothing implementation.\n+\t * \n+\t * @author Pinaki Poddar\n+\t *\n+\t * @param <T>\n+\t */\n+\tpublic static class None<T> implements QueryStatistics<T> {\n+        private Date start = new Date();\n+        private Date since = start;\n+\n+        public void clear() {\n+        }\n+\n+        public void dump(PrintStream out) {\n+        }\n+\n+        public long getExecutionCount() {\n+            return 0;\n+        }\n+\n+        public long getExecutionCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getHitCount() {\n+            return 0;\n+        }\n+\n+        public long getHitCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getTotalExecutionCount() {\n+            return 0;\n+        }\n+\n+        public long getTotalExecutionCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getTotalHitCount() {\n+            return 0;\n+        }\n+\n+        public long getTotalHitCount(T query) {\n+            return 0;\n+        }\n+\n+        public Set<T> keys() {\n+            return Collections.emptySet();\n+        }\n+\n+        public void recordExecution(T query) {\n+        }\n+\n+        public void reset() {\n+            start  = new Date();\n+            since  = start;\n+        }\n+\n+        public Date since() {\n+            return since;\n+        }\n+\n+        public Date start() {\n+            return start;\n+        }\n+\t}\n }\n+"},{"sha":"921f1b032224c57fcd118969af8c0227219014b5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -21,9 +21,11 @@\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.List;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Represents a set of managed objects and their environment.\n@@ -111,8 +113,8 @@\n     public String getConnectionPassword();\n \n     /**\n-     * Return the cached instance for the given oid/object, or null if not\n-     * cached.\n+     * Return the instance for the given oid/object , or null if not\n+     * found in the L1 cache. \n      *\n      * @param oid the object's id\n      * @return the cached object, or null if not cached\n@@ -490,4 +492,12 @@ public OpenJPAStateManager embed(Object obj, Object id,\n      * @return the NonJTA connection factory or null if connectionFactoryName is blank.\n      */\n     public Object getConnectionFactory2();\n+    \n+    /**\n+     * Indicate whether the oid can be found in the StoreContext's L1 cache or in the StoreManager cache.\n+     * @param oid List of ObjectIds for PersistenceCapables which may be found in memory.\n+     * @return true if the oid is available in memory (cached) otherwise false.\n+     * @since 2.0.0. \n+     */\n+    public boolean isCached(List<Object> oid);\n }"},{"sha":"f2efc97bf8ad12ae663724bba053c56b229e079d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,6 +20,7 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n \n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.Closeable;\n@@ -99,6 +100,13 @@\n      * if it does not.\n      */\n     public boolean exists(OpenJPAStateManager sm, Object edata);\n+    \n+    /**\n+     * Verify that the given instance exists in the data store in memory; return false\n+     * if it does not. When an object is found in memory the corresponding element of \n+     * the BitSet is set to 1. \n+     */\n+    public boolean isCached(List<Object> oids, BitSet edata);\n \n     /**\n      * Update the version information in the given state manager to the"},{"sha":"83eb8d96159e0b6b909c208295f17fd504c5b3d9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -156,7 +156,7 @@ public static int getTypeCode(Class<?> type) {\n             return CALENDAR;\n \n         if (type.isInterface()) {\n-            if (type == Serializable.class)\n+            if (Serializable.class.isAssignableFrom(type))\n                 return OBJECT;\n             return PC_UNTYPED;\n         }"},{"sha":"dae47dfedf9875e5e41e91d27912668f15625efb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -1567,12 +1567,7 @@ private void clearInternal(){\n     public void register(Class<?> cls) {\n         // buffer registered classes until an oid metadata request is made,\n         // at which point we'll parse everything in the buffer\n-        if (_locking) {\n-            synchronized (_registered) {\n-                _registered.add(cls);\n-                registerAlias(cls);\n-            }\n-        } else {\n+        synchronized (_registered) {\n             _registered.add(cls);\n             registerAlias(cls);\n         }\n@@ -1603,16 +1598,10 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n         // copy into new collection to avoid concurrent mod errors on reentrant\n         // registrations\n         Class<?>[] reg;\n-        if (_locking) {\n-            synchronized (_registered) {\n-                reg = _registered.toArray(new Class[_registered.size()]);\n-                _registered.clear();\n-            }\n-        } else {\n+\t\tsynchronized (_registered) {\n             reg = _registered.toArray(new Class[_registered.size()]);\n             _registered.clear();\n         }\n-        \n \n         Collection<String> pcNames = getPersistentTypeNames(false, envLoader);\n         Collection<Class<?>> failed = null;\n@@ -1636,11 +1625,7 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n             }\n         }\n         if (failed != null) {\n-            if (_locking) {\n-                synchronized (_registered) {\n-                    _registered.addAll(failed);\n-                }\n-            } else {\n+            synchronized (_registered) {\n                 _registered.addAll(failed);\n             }\n         }"},{"sha":"ca944ae78d7b8dc056fa8c573db4975968387323","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":52,"deletions":14,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,6 +20,8 @@\n \n import java.security.AccessController;\n \n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.kernel.DetachedStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -85,10 +87,18 @@ public static Object writeReplace(Proxy proxy, boolean detachable) {\n          *   1) No Proxy, then return as-is\n          *   2) Runtime created proxy (!detachable), then unproxy\n          *   3) No StateManager (DetachedStateField==false), then return as-is\n-         *   4) If detached, then unproxy\n-         *   5) If ClassMetaData exists and DetachedStateField != TRUE\n-         *      (default of DetachedStateField==transient), then unproxy\n-         *   6) Else, return as-is\n+         *   Get the new IgnoreDetachedStateFieldForProxySerialization\n+         *      Compatibility flag from either the metadata/configuration if\n+         *      this is a normal StateManager, otherwise use the new flag\n+         *      added to the DetachedStateManager\n+         *   4) If new 2.0 behavior\n+         *      4a) If ClassMetaData exists and DetachedStateField == TRUE\n+         *          then do not remove the proxy and return as-is\n+         *      4b) Else, using DetachedStateField of transient(default) or\n+         *          false, so unproxy \n+         *   5) If 1.0 app or requested old 1.0 behavior\n+         *      5a) If detached, then do not unproxy and return as-is\n+         *      5b) Else, unproxy\n          * \n          * Original code -\n          *   1) Runtime created proxy (!detachable), then unproxy\n@@ -111,19 +121,47 @@ public static Object writeReplace(Proxy proxy, boolean detachable) {\n         } else if (proxy.getOwner() == null) {\n             // no StateManager (DetachedStateField==false), so no $proxy to remove\n             return proxy;\n-        } else if (proxy.getOwner().isDetached()) {\n-            // already detached, so remove any $proxy\n-            return proxy.copy(proxy);\n         } else {\n             // using a StateManager, so determine what DetachedState is being used\n-            OpenJPAStateManager sm = proxy.getOwner();  // !null checked for above\n-            ClassMetaData meta = sm.getMetaData();      // if null, no proxies?\n-            if ((meta != null) && (!Boolean.TRUE.equals(meta.usesDetachedState()))) {\n-                // configured to use transient (null) or no (FALSE) StateManger, so remove any $proxy\n-                return proxy.copy(proxy);\n+            OpenJPAStateManager sm = proxy.getOwner();  // null checked for above\n+            ClassMetaData meta = null;          // if null, no proxies?\n+            boolean useDSFForUnproxy = false;   // default to false for old 1.0 behavior\n+\n+            // DetachedStateMnager has no context or metadata, so we can't get configuration settings\n+            if (!proxy.getOwner().isDetached()) {\n+                Compatibility compat = null;\n+                meta = sm.getMetaData();\n+                if (meta != null) {\n+                    compat = meta.getRepository().getConfiguration().getCompatibilityInstance();\n+                } else if (sm.getContext() != null && sm.getContext().getConfiguration() != null) {\n+                    compat = sm.getContext().getConfiguration().getCompatibilityInstance();\n+                } else {\n+                    // no-op - using a StateManager, but no Compatibility settings available\n+                }\n+                if (compat != null) {\n+                    // new 2.0 behavior of using DetachedStateField to determine unproxy during serialization\n+                    useDSFForUnproxy = !compat.getIgnoreDetachedStateFieldForProxySerialization();\n+                }\n+            } else {\n+                // Using a DetachedStateManager, so use the new flag since there is no context or metadata\n+                useDSFForUnproxy = ((DetachedStateManager)sm).getUseDSFForUnproxy();\n+            }\n+            \n+            if (useDSFForUnproxy) {\n+                // use new 2.0 behavior\n+                if ((meta != null) && (Boolean.TRUE.equals(meta.usesDetachedState()))) {\n+                    // configured to always use and serialize a StateManger, so keep any $proxy\n+                    return proxy;\n+                } else {\n+                    // already detached or using DetachedStateField==false or transient, so remove any $proxy\n+                    return proxy.copy(proxy);\n+                }\n             } else {\n-                // DetachedStateField==true, which means to keep the SM and $proxy in the serialized objects\n-                return proxy;\n+                // use old 1.0 behavior\n+                if (proxy.getOwner().isDetached())\n+                    return proxy;\n+                else\n+                    return proxy.copy(proxy);\n             }\n         }\n     }"},{"sha":"12eef906a9b920ca389074b0adada51844955274","filename":"openjpa-lib/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"78f179a37f475cf5c5e425b35bb99be7cb4cd080","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":53,"deletions":22,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -242,7 +242,7 @@ private SQLException wrap(SQLException sqle, Statement stmnt, String sql) {\n     }\n \n     private SQLException wrap(SQLException sqle, Statement stmnt, int indexOfFailedBatchObject) {\n-        return wrap(sqle, stmnt, null, -1);\n+        return wrap(sqle, stmnt, null, indexOfFailedBatchObject);\n     }\n \n     /**\n@@ -1114,7 +1114,7 @@ public int executeUpdate() throws SQLException {\n                     // we are tracking parameters, then set the current\n                     // parameter set to be the index of the failed\n                     // statement so that the ReportingSQLException will\n-                    // show the correct param\n+                    // show the correct param(s)\n                     if (se instanceof BatchUpdateException\n                         && _paramBatch != null && shouldTrackParameters()) {\n                         int[] count = ((BatchUpdateException) se).\n@@ -1161,7 +1161,6 @@ public int executeUpdate() throws SQLException {\n                     throw err;\n                 } finally {\n                     logTime(start);\n-                    clearLogParameters(true);\n                     handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n@@ -1409,16 +1408,12 @@ protected void appendInfo(StringBuffer buf) {\n             }\n \n             private void clearLogParameters(boolean batch) {\n-                //Made !batch...we only want to clear if\n-                //we are NOT using batching.  If we clear now,\n-                //the _params will not be displayed in the resultant\n-                //exception message.  But when should we 'clear' them???\n-                if (!batch){                    \n-                    if (_params != null)\n-                        _params.clear();\n-                    \n-                    if (_paramBatch != null)\n-                        _paramBatch.clear();                \n+                if (_params != null) {\n+                    _params.clear();\n+                }\n+\n+                if (batch && _paramBatch != null) {\n+                    _paramBatch.clear();\n                 }\n             }\n \n@@ -1605,6 +1600,9 @@ public boolean previous() throws SQLException {\n             private final String _sql;\n             private List<String> _params = null;\n             private List<List<String>> _paramBatch = null;\n+            //When batching is used, this variable contains the index into the last\n+            //successfully executed batched statement.\n+            int batchedRowsBaseIndex = 0;            \n \n             public LoggingCallableStatement(CallableStatement stmt, String sql) \n                 throws SQLException {\n@@ -1709,11 +1707,29 @@ public int executeUpdate() throws SQLException {\n             }\n \n             public int[] executeBatch() throws SQLException {\n+                int indexOfFirstFailedObject = -1;\n+\n                 logBatchSQL(this);\n                 long start = System.currentTimeMillis();\n                 SQLException err = null;                \n                 try {\n-                    return super.executeBatch();\n+                    int[] toReturn = super.executeBatch();\n+                    //executeBatch is called any time the number of batched statements\n+                    //is equal to, or less than, batchLimit.  In the 'catch' block below, \n+                    //the logic seeks to find an index based on the current executeBatch \n+                    //results.  This is fine when executeBatch is only called once, but \n+                    //if executeBatch is called many times, the _paramsBatch will continue \n+                    //to grow, as such, to index into _paramsBatch, we need to take into \n+                    //account the number of times executeBatch is called in order to \n+                    //correctly index into _paramsBatch.  To that end, each time executeBatch \n+                    //is called, lets get the size of _paramBatch.  This will effectively \n+                    //tell us the index of the last successfully executed batch statement.  \n+                    //If an exception is caused, then we know that _paramBatch.size was \n+                    //the index of the LAST row to successfully execute.\n+                    if (_paramBatch != null){\n+                        batchedRowsBaseIndex = _paramBatch.size();                        \n+                    }\n+                    return toReturn; \n                 } catch (SQLException se) {\n                     // if the exception is a BatchUpdateException, and\n                     // we are tracking parameters, then set the current\n@@ -1726,32 +1742,47 @@ public int executeUpdate() throws SQLException {\n                             getUpdateCounts();\n                         if (count != null && count.length <= _paramBatch.size())\n                         {\n-                            int index = -1;\n                             for (int i = 0; i < count.length; i++) {\n                                 // -3 is Statement.STATEMENT_FAILED, but is\n                                 // only available in JDK 1.4+\n                                 if (count[i] == Statement.EXECUTE_FAILED) {\n-                                    index = i;\n+                                    indexOfFirstFailedObject = i;\n                                     break;\n                                 }\n                             }\n \n                             // no -3 element: it may be that the server stopped\n                             // processing, so the size of the count will be\n                             // the index\n-                            if (index == -1)\n-                                index = count.length + 1;\n+                            //See the Javadoc for 'getUpdateCounts'; a provider \n+                            //may stop processing when the first failure occurs, \n+                            //as such, it may only return 'UpdateCounts' for the \n+                            //first few which pass.  As such, the failed \n+                            //index is 'count.length', NOT count.length+1.  That\n+                            //is, if the provider ONLY returns the first few that \n+                            //passes (i.e. say an array of [1,1] is returned) then\n+                            //length is 2, and since _paramBatch starts at 0, we \n+                            //don't want to use length+1 as that will give us the \n+                            //wrong index.\n+                            if (indexOfFirstFailedObject == -1){\n+                                indexOfFirstFailedObject = count.length;\n+                            }\n+                            \n+                            //Finally, whatever the index is at this point, add batchedRowsBaseIndex\n+                            //to it to get the final index.  Recall, we need to start our index from the\n+                            //last batch which successfully executed.\n+                            indexOfFirstFailedObject += batchedRowsBaseIndex;\n \n                             // set the current params to the saved values\n-                            if (index < _paramBatch.size())\n-                                _params = (List<String>) _paramBatch.get(index);\n+                            if (indexOfFirstFailedObject < _paramBatch.size()){\n+                                _params = (List<String>) _paramBatch.get(indexOfFirstFailedObject);\n+                            }\n                         }\n                     }\n-                    err = wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this, indexOfFirstFailedObject);\n                     throw err;\n                 } finally {\n                     logTime(start);\n-                    clearLogParameters(true);\n                     handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }"},{"sha":"3180722fa369dfef3fdd3386a7a8dd6a819c85ec","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -27,7 +27,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <groupId>org.apache.openjpa</groupId>"},{"sha":"2635ff2752dcdf20553a3e9a13718c51952e50cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/Ent1.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/Ent1.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/Ent1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/Ent1.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.batch.exception;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Ent1 {\n+    // primary key:\n+    @Id\n+    private int pk;    \n+    public int getPk() {return pk;}\n+    public void setPk(int pk) {this.pk = pk;}\n+    \n+    private String name;\n+    public String getName(){return name;}\n+    public void setName(String str){\n+        name = str;\n+    }\n+    \n+    public Ent1() {}    \n+    public Ent1(int pk, String str) {this.pk = pk;name=str;}     \n+    \n+    public String toString(){\n+        return \"Ent1 [pk = \" + pk + \", \" + name +\"]\";\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + pk;\n+        return result;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Ent1 other = (Ent1) obj;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        if (pk != other.pk)\n+            return false;\n+        return true;\n+    }\n+}\n+\n+"},{"sha":"a88d267499b66b7ec86ec7fdece53bba3c18dc58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java","status":"added","additions":373,"deletions":0,"changes":373,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,373 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.batch.exception;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+import org.apache.openjpa.util.ExceptionInfo;\n+\n+//This test was created for OPENJPA-1550.  In this issue the user was\n+//not able to get the 'failed object' (the object causing the failure) when\n+//batch limit was -1 or a value greater than 1.  Also, they found that the\n+//'params' listed in the prepared statement were missing.  This test will set\n+//various batch limits and verify that with the fix to 1550, the correct\n+//'failed object' and prepared statement is returned. \n+public class TestBatchLimitException extends PersistenceTestCase {\n+\n+    static Ent1 expectedFailedObject;\n+    static Ent1 expectedFailedObjectOracle;\n+    static boolean isOracle = false;\n+    final String expectedFailureMsg =\n+        \"INSERT INTO Ent1 (pk, name) VALUES (?, ?) [params=(int) 200, (String) twohundred]\";\n+    final String expectedFailureMsg18 =\n+        \"INSERT INTO Ent1 (pk, name) VALUES (?, ?) [params=(int) 18, (String) name18]\";\n+    String expectedFailureMsgOracle = expectedFailureMsg18;\n+\n+    public EntityManagerFactory newEmf(String batchLimit) {\n+        OpenJPAEntityManagerFactorySPI emf =\n+            createEMF(Ent1.class, \n+                \"openjpa.jdbc.SynchronizeMappings\", \n+                \"buildSchema(ForeignKeys=true)\",\n+                \"openjpa.jdbc.DBDictionary\", batchLimit, \n+                CLEAR_TABLES);\n+\n+        assertNotNull(\"Unable to create EntityManagerFactory\", emf);\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        isOracle = dict instanceof OracleDictionary;\n+        return emf;\n+    }\n+\n+    public void setUp() {\n+        expectedFailedObject = null;\n+        expectedFailedObjectOracle = null;\n+    }\n+\n+    // Test that we get the correct 'failed object' when we have a batchLimt\n+    // of X and Y rows, where X>Y. A duplicate row will be inserted\n+    // sometime within the Y rows. This will verify that we get the right\n+    // 'failed object' and message.\n+    public void testExceptionInFirstBatch() throws Throwable {\n+        EntityManagerFactory emf = newEmf(\"batchLimit=-1\");\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        em.persist(new Ent1(1, \"one\"));\n+        expectedFailedObject = new Ent1(200, \"twohundred\");\n+        em.persist(expectedFailedObject);\n+        em.persist(new Ent1(5, \"five\"));\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        EntityManager em2 = emf.createEntityManager();\n+\n+        em2.getTransaction().begin();\n+        // special case, due to how Oracle returns all statements in the batch\n+        expectedFailedObjectOracle = new Ent1(18, \"name18\");\n+        expectedFailureMsgOracle = expectedFailureMsg18;\n+        em2.persist(expectedFailedObjectOracle);\n+        em2.persist(new Ent1(2, \"two\"));\n+        em2.persist(new Ent1(200, \"twohundred\"));\n+        em2.persist(new Ent1(3, \"three\"));\n+        em2.persist(new Ent1(1, \"one\"));\n+        em2.persist(new Ent1(5, \"five\"));\n+        \n+        try {\n+            em2.getTransaction().commit();\n+        } catch (Throwable excp) {\n+            verifyExDetails(excp);\n+        }\n+        finally {\n+            if (em2.getTransaction().isActive()) {\n+                em2.getTransaction().rollback();\n+            }\n+            em2.close();\n+            emf.close();\n+        }\n+    }\n+\n+    // Test that we get the correct 'failed object' when there is only one\n+    // row in the batch. The 'batching' logic executes a different\n+    // statement when only one row is to be updated/inserted.\n+    public void testExceptionSingleBatchedRow() throws Throwable {\n+        EntityManagerFactory emf = newEmf(\"batchLimit=-1\");\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        expectedFailedObject = new Ent1(200, \"twohundred\");\n+        expectedFailedObjectOracle = expectedFailedObject;\n+        expectedFailureMsgOracle = expectedFailureMsg;\n+        em.persist(expectedFailedObject);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        EntityManager em2 = emf.createEntityManager();\n+\n+        em2.getTransaction().begin();\n+        em2.persist(new Ent1(200, \"twohundred\"));\n+        \n+        try {\n+            em2.getTransaction().commit();\n+        } catch (Throwable excp) {\n+            verifyExDetails(excp);\n+        }\n+        finally {\n+            if (em2.getTransaction().isActive()) {\n+                em2.getTransaction().rollback();\n+            }\n+            em2.close();\n+            emf.close();\n+        }\n+    }\n+\n+    // Test that we get the correct 'failed object' and message when we\n+    // have a batchLimt of X and Y rows, where Y>X. In this case, the\n+    // batch is executed every time the batchLimt is hit. A duplicate\n+    // row will be inserted sometime after X (X+1, i.e right at the\n+    // boundary of the batch) to verify that we get the right\n+    // 'failed object' and msg no matter which batch a duplicate is\n+    // contained in. This test is important because as part of the\n+    // fix to OPENJPA-1510 we had to add extra logic to keep track\n+    // of which batch the 'failed object' was in, along with the\n+    // index into that batch.\n+    public void testExceptionInSecondBatch() throws Throwable {\n+        EntityManagerFactory emf = newEmf(\"batchLimit=9\");\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        expectedFailedObject = new Ent1(200, \"twohundred\");\n+        expectedFailedObjectOracle = expectedFailedObject;\n+        expectedFailureMsgOracle = expectedFailureMsg;\n+        em.persist(expectedFailedObject);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        EntityManager em2 = emf.createEntityManager();\n+\n+        em2.getTransaction().begin();\n+\n+        // Put 9 objects/rows into the batch\n+        for (int i = 0; i < 9; i++) {\n+            em2.persist(new Ent1(i, \"name\" + i));\n+        }\n+\n+        // Put the duplicate object/row as the first element in the second batch.\n+        em2.persist(new Ent1(200, \"twohundred\"));\n+        \n+        try {\n+            em2.getTransaction().commit();\n+        } catch (Throwable excp) {\n+            verifyExDetails(excp);\n+        }\n+        finally {\n+            if (em2.getTransaction().isActive()) {\n+                em2.getTransaction().rollback();\n+            }\n+            em2.close();\n+            emf.close();\n+        }\n+    }\n+\n+    // Same as testRowsGreaterThanBatchLimit_boundaryCase, but the object to cause the failure\n+    // is in the middle of the second batch. testExceptioninSecondBatch puts\n+    // the failing object as the first element in the second batch, this test puts\n+    // it somewhere in the middle of the third batch. Again, we want to make sure our\n+    // indexing into the batch containing the 'failed object' is correct.\n+    public void testExceptionInThirdBatch() throws Throwable {\n+        final int batchLimit=9;\n+        EntityManagerFactory emf = newEmf(\"batchLimit=\"+batchLimit);\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        expectedFailedObject = new Ent1(200, \"twohundred\");\n+        em.persist(expectedFailedObject);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        EntityManager em2 = emf.createEntityManager();\n+\n+        em2.getTransaction().begin();\n+\n+        // Persist 21 objects/rows....as such we will have two 'full'\n+        // batches (9*2=18) and 3 (21-18=3) objects/rows in the 3rd batch.\n+        int i=0;\n+        for (; i < 2*batchLimit; i++) {\n+            em2.persist(new Ent1(i, \"name\" + i));\n+        }\n+\n+        // manually create third batch, due to how Oracle returns all statements in the batch\n+        expectedFailedObjectOracle = new Ent1(i, \"name\" + i++);\n+        expectedFailureMsgOracle = expectedFailureMsg18;\n+        em2.persist(expectedFailedObjectOracle);    // 18\n+        em2.persist(new Ent1(i, \"name\" + i++));     // 19\n+        em2.persist(new Ent1(i, \"name\" + i++));     // 20\n+        em2.persist(new Ent1(i, \"name\" + i++));     // 21        \n+        // Put the duplicate row in the 3rd batch.\n+        em2.persist(new Ent1(200, \"twohundred\"));\n+        // Put a few more objects into the batch.\n+        for (i = 22; i < 4*batchLimit; i++) {\n+            em2.persist(new Ent1(i, \"name\" + i));\n+        }\n+\n+        try {\n+            em2.getTransaction().commit();\n+        } catch (Throwable excp) {\n+            verifyExDetails(excp);\n+        }\n+        finally {\n+            if (em2.getTransaction().isActive()) {\n+                em2.getTransaction().rollback();\n+            }\n+            em2.close();\n+            emf.close();\n+        }\n+    }\n+\n+    // Similar to the previous two tests, but lets run the test with a large\n+    // batch with a failure, and then commit, then run large batches\n+    // again with failures again.....just want to make sure things are not in\n+    // some way 're-used' between the two commits as far as the indexes go.\n+    public void testSecondExceptionHasRightIndex() throws Throwable {\n+        final int batchLimit=9;\n+\n+        testExceptionInThirdBatch();\n+\n+        EntityManagerFactory emf = newEmf(\"batchLimit=9\");\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+\n+        for (int i = 4*batchLimit; i < 5*batchLimit; i++) {\n+            em.persist(new Ent1(i, \"name\" + i));\n+        }\n+\n+        // manually capture start of batch, due to how Oracle returns all statements in the batch\n+        expectedFailedObjectOracle = new Ent1(200, \"twohundred\");\n+        expectedFailureMsgOracle = expectedFailureMsg;\n+        em.persist(expectedFailedObjectOracle);\n+\n+        for (int i = 5*batchLimit; i < 7*batchLimit; i++) {\n+            em.persist(new Ent1(i, \"name\" + i));\n+        }\n+\n+        try {\n+            em.getTransaction().commit();\n+        } catch (Throwable excp) {\n+            verifyExDetails(excp);\n+        }\n+        finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+            emf.close();\n+        }\n+    }\n+\n+    public void testExceptionWithMultipleCommits() throws Throwable {\n+        EntityManagerFactory emf = newEmf(\"batchLimit=-1\");\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        em.persist(new Ent1(1, \"one\"));\n+        expectedFailedObject = new Ent1(200, \"twohundred\");\n+        em.persist(expectedFailedObject);\n+        em.persist(new Ent1(5, \"five\"));\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        em2.persist(new Ent1(4, \"four\"));\n+        em2.persist(new Ent1(0, \"zero\"));\n+        em2.persist(new Ent1(2, \"two\"));\n+        em2.persist(new Ent1(3, \"three\"));\n+        em2.getTransaction().commit();\n+\n+        em2.getTransaction().begin();\n+        // special case, due to how Oracle returns all statements in the batch\n+        expectedFailedObjectOracle = new Ent1(18, \"name18\");\n+        expectedFailureMsgOracle = expectedFailureMsg18;\n+        em2.persist(expectedFailedObjectOracle);\n+        em2.persist(new Ent1(6, \"six\"));\n+        em2.persist(new Ent1(200, \"twohundred\"));\n+        em2.persist(new Ent1(7, \"seven\"));\n+        \n+        try {\n+            em2.getTransaction().commit();\n+        } catch (Throwable excp) {\n+            verifyExDetails(excp);\n+        }\n+        finally {\n+            if (em2.getTransaction().isActive()) {\n+                em2.getTransaction().rollback();\n+            }\n+            em2.close();\n+            emf.close();\n+        }\n+    }\n+\n+    // Verify that the resultant exception contains the correct 'failed object'\n+    // and exception message.\n+    public void verifyExDetails(Throwable excp) throws Throwable {\n+        // The exception should contain the 'failed object'\n+        verifyFailedObject(excp);\n+        // The second cause should contain the message which shows the failing prepared statement.\n+        Throwable cause = excp.getCause().getCause();\n+        verifyExMsg(cause.getMessage());\n+    }\n+\n+    public void verifyFailedObject(Throwable excp) throws Throwable {\n+        if (excp instanceof ExceptionInfo) {\n+            ExceptionInfo e = (ExceptionInfo) excp;\n+\n+            Ent1 failedObject = (Ent1) e.getFailedObject();\n+\n+            assertNotNull(\"Failed object was null.\", failedObject);\n+            if (!isOracle) {\n+                assertEquals(expectedFailedObject, failedObject);\n+            } else {\n+                // special case, as Oracle returns all statements in the batch\n+                assertEquals(expectedFailedObjectOracle, failedObject);                \n+            }\n+        }\n+        else {\n+            throw excp;\n+        }\n+    }\n+\n+    public void verifyExMsg(String msg) {\n+        assertNotNull(\"Exception message was null.\", msg);\n+        if (!isOracle) {\n+            assertTrue(\"Did not see expected text in message. Expected <\" + expectedFailureMsg + \"> but was \" +\n+                msg, msg.contains(expectedFailureMsg));\n+        } else {\n+            // special case, as Oracle returns all statements in the batch\n+            assertTrue(\"Did not see expected text in message. Expected <\" + expectedFailureMsgOracle + \"> but was \" +\n+                msg, msg.contains(expectedFailureMsgOracle));\n+        }\n+    }\n+}\n+"},{"sha":"73109aa4b8db6018f6e92e5918c2b662c01d8ea8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -71,6 +71,7 @@ public void testJPA1CompatibilityOptions() {\n         Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n         assertTrue(compat.getFlushBeforeDetach());\n         assertTrue(compat.getCopyOnDetach());\n+        assertTrue(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertTrue(compat.getPrivatePersistentProperties());\n         assertFalse(compat.isAbstractMappingUniDirectional());\n         assertFalse(compat.isNonDefaultMappingAllowed());\n@@ -92,6 +93,7 @@ public void testJPA2CompatibilityOptions() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertFalse(compat.getFlushBeforeDetach());\n         assertFalse(compat.getCopyOnDetach());\n+        assertFalse(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertFalse(compat.getPrivatePersistentProperties());\n         assertTrue(compat.isAbstractMappingUniDirectional());\n         assertTrue(compat.isNonDefaultMappingAllowed());"},{"sha":"30691e538c0df99512a38f50c03bbf5a16b59b63","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java","status":"added","additions":272,"deletions":0,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.relations.TblChild;\n+import org.apache.openjpa.persistence.relations.TblGrandChild;\n+import org.apache.openjpa.persistence.relations.TblParent;\n+import org.apache.openjpa.persistence.simple.Person;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <b>TestQuerySQLCache</b> is used to verify multiple permutations of openjpa.jdbc.QuerySQLCache settings that were \n+ * valid in JPA 1.2 but may not be valid in JPA 2.0\n+ */\n+public class TestQuerySQLCache extends SingleEMFTestCase {\n+    \n+    final int nThreads = 5;\n+    final int nPeople = 100;\n+    final int nIterations = 10;\n+\n+    @Override\n+    public void setUp() {\n+        // need this to cleanup existing tables as some entity names are reused\n+        setUp(DROP_TABLES, Person.class, TblChild.class, TblGrandChild.class, TblParent.class);\n+    }\n+\n+    /*\n+     * Verify an exception is thrown if a bad cache implementation class is specified\n+     */\n+    public void testBadCustomCacheSetting() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \n+                  \"org.apache.openjpa.persistence.compatible.TestQuerySQLCache.BadCacheMap\");\n+\n+        try {\n+            OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+                                                 cast(Persistence.createEntityManagerFactory(\"test\", props));\n+            // \n+            // EMF creation must throw an exception because the cache implementation class will not be found\n+            // \n+            assertFalse(false);\n+        }\n+        catch (Exception e) {\n+            assertTrue(true);\n+        }\n+    }\n+\n+\n+    /*\n+     * Verify multi-threaded multi-entity manager finder works with the QuerySQLCache set to \"all\"\n+     */\n+    @AllowFailure(message=\"OPENJPA-1179 2.0 doesn't allow 'all' as in previous releases\")\n+    public void testMultiEMCachingAll() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"all\");\n+        runMultiEMCaching(props);        \n+    }\n+\n+\n+    /*\n+     * Verify multi-threaded multi-entity manager finder works with the QuerySQLCache set to \"true\"\n+     */\n+    public void testMultiEMCachingTrue() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+        runMultiEMCaching(props);\n+    }\n+\n+\n+    /*\n+     * Verify QuerySQLCacheValue setting \"true\" uses the expected cache implementation and is caching\n+     */\n+    @AllowFailure(message=\"Fails after first run with duplicate key value in a unique PK constraint or index\")\n+    public void testEagerFetch() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + TblChild.class.getName() + \";\"\n+                                                          + TblGrandChild.class.getName() + \";\"\n+                                                          + TblParent.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.\n+                                             cast(Persistence.createEntityManagerFactory(\"test\", props));\n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+\n+        for (int i = 1; i < 3; i++) {\n+            TblParent p = new TblParent();\n+            p.setParentId(i);\n+            TblChild c = new TblChild();\n+            c.setChildId(i);\n+            c.setTblParent(p);\n+            p.addTblChild(c);\n+            em.persist(p);\n+            em.persist(c);\n+\n+            TblGrandChild gc = new TblGrandChild();\n+            gc.setGrandChildId(i);\n+            gc.setTblChild(c);\n+            c.addTblGrandChild(gc);\n+\n+            em.persist(p);\n+            em.persist(c);\n+            em.persist(gc);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        for (int i = 1; i < 3; i++) {\n+            TblParent p = em.find(TblParent.class, i);\n+            int pid = p.getParentId();\n+            assertEquals(pid, i);\n+            Collection<TblChild> children = p.getTblChildren();\n+            boolean hasChild = false;\n+            for (TblChild c : children) {\n+                hasChild = true;\n+                Collection<TblGrandChild> gchildren = c.getTblGrandChildren();\n+                int cid = c.getChildId();\n+                assertEquals(cid, i);\n+                boolean hasGrandChild = false;\n+                for (TblGrandChild gc : gchildren) {\n+                    hasGrandChild = true;\n+                    int gcId = gc.getGrandChildId();\n+                    assertEquals(gcId, i);\n+                }\n+                assertTrue(hasGrandChild);\n+            }\n+            assertTrue(hasChild);\n+        }\n+        em.close();\n+        emf.close();\n+    }\n+\n+\n+    private void runMultiEMCaching(Map props) {\n+        EntityManagerFactory emfac = Persistence.createEntityManagerFactory(\"test\", props);\n+        EntityManager em = emfac.createEntityManager();            \n+\n+        // \n+        // Create some entities\n+        // \n+        em.getTransaction().begin();\n+        for (int i = 0; i < nPeople; i++) {\n+            Person p = new Person();\n+            p.setId(i);\n+            em.persist(p);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        Thread[] newThreads = new Thread[nThreads];\n+        FindPeople[] customer = new FindPeople[nThreads];\n+        for (int i=0; i < nThreads; i++) {\n+            customer[i] = new FindPeople(emfac, 0, nPeople, nIterations, i);\n+            newThreads[i] = new Thread(customer[i]);\n+            newThreads[i].start();\n+        }\n+\n+        // \n+        // Wait for the worker threads to complete\n+        // \n+        for (int i = 0; i < nThreads; i++) {\n+            try {\n+                newThreads[i].join();\n+            }\n+            catch (InterruptedException e) {\n+                this.fail(\"Caught Interrupted Exception: \" + e);\n+            }\n+        }   \n+\n+        // \n+        // Run through the state of all runnables to assert if any of them failed.\n+        // \n+        for (int i = 0; i < nThreads; i++) {\n+            assertFalse(customer[i].hadFailures());\n+        }\n+\n+        // \n+        // Clean up the entities used in this test\n+        // \n+        em = emfac.createEntityManager();            \n+        em.getTransaction().begin();\n+        for (int i = 0; i < nPeople; i++) {\n+            Person p = em.find(Person.class, i);\n+            em.remove(p);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+    \n+    /*\n+     * Simple runnable to test finder in a tight loop.  Multiple instances of this runnable will run simultaneously\n+     */\n+    private class FindPeople implements Runnable {\n+        private int startId;\n+        private int endId;\n+        private int thread;\n+        private int iterations;\n+        private EntityManagerFactory emf;\n+        private boolean failures = false;\n+\n+        public FindPeople(EntityManagerFactory emf, int startId, int endId, int iterations, int thread) {\n+            super();\n+            this.startId = startId;\n+            this.endId = endId;\n+            this.thread = thread;\n+            this.iterations = iterations;\n+            this.emf = emf;\n+        }\n+\n+        public boolean hadFailures() {\n+            return failures;\n+        }\n+\n+        public void run() {\n+            try {\n+                EntityManager em = emf.createEntityManager();            \n+                for (int j = 0; j < iterations; j++) {\n+\n+                    for (int i = startId; i < endId; i++) {\n+                        Person p1 = em.find(Person.class, i);\n+                        if (p1.getId() != i) {\n+                            System.out.println(\"Finder failed: \" + i);\n+                            failures = true;\n+                            break;\n+                        }\n+                    }\n+                    em.clear();  \n+                }\n+                em.close();  \n+            }\n+            catch (Exception e) {\n+                failures = true;\n+                System.out.println(\"Thread \" + thread + \" exception :\" + e );\n+            }\n+        }\n+    }\n+}"},{"sha":"a2a0089bafd3b321793fb1ca2b7f3e2c9b3b9209","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -57,6 +57,7 @@ public void testJPA1CompatibilityOptions() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertTrue(compat.getFlushBeforeDetach());\n         assertTrue(compat.getCopyOnDetach());\n+        assertTrue(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertTrue(compat.getPrivatePersistentProperties());\n         String vMode = emf.getConfiguration().getValidationMode();\n         assertEquals(\"NONE\", vMode);\n@@ -65,7 +66,6 @@ public void testJPA1CompatibilityOptions() {\n         assertEquals(spec.getVersion(), 1);\n         \n         emf.close();\n-\n     }\n \n     /*\n@@ -82,6 +82,7 @@ public void testJPA2CompatibilityOptions() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertFalse(compat.getFlushBeforeDetach());\n         assertFalse(compat.getCopyOnDetach());\n+        assertFalse(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertFalse(compat.getPrivatePersistentProperties());\n         String vMode = emf.getConfiguration().getValidationMode();\n         assertEquals(\"AUTO\", vMode);"},{"sha":"b40b2ae6684367c63bc233f146bcbb8e7244115f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":30,"deletions":2,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -47,6 +47,7 @@\n import javax.persistence.metamodel.Metamodel;\n \n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\n import org.apache.openjpa.persistence.test.AllowFailure;\n \n /**\n@@ -901,6 +902,15 @@ public void testFunctionWithOneArgument() {\n     public void testFunctionWithTwoArgument() {\n         String jpql = \"SELECT MOD(c.balanceOwed,10) FROM Customer c\";\n         \n+        if (getDictionary().supportsModOperator) {\n+            // @AllowFailure\n+            // TODO - Skip executing this until OPENJPA-16xx is fixed, as CriteriaBuilder always\n+            // generates JPQL with MOD(,) instead of using \"%\" for Microsoft SQL Server\n+            getEntityManagerFactory().getConfiguration().getLog(\"test\").warn(\n+                \"SKIPPING testFunctionWithTwoArgument() for SQLServer\");\n+            return;\n+        }\n+        \n         CriteriaQuery<Tuple> q = cb.createTupleQuery();\n         Root<Customer> c = q.from(Customer.class);\n         q.multiselect(cb.function(\"MOD\", Integer.class, c.get(Customer_.balanceOwed), cb.literal(10)));\n@@ -914,6 +924,15 @@ public void testFunctionWithFunctionArgumentInOrderBy() {\n         String sql = \"SELECT MOD(t0.balanceOwed, ?), LENGTH(t0.name) FROM CR_CUST t0 WHERE (LENGTH(t0.name) > ?) \" +\n                      \"ORDER BY LENGTH(t0.name) ASC\";\n         \n+        if (getDictionary().supportsModOperator) {\n+            // @AllowFailure\n+            // TODO - Skip executing this until OPENJPA-16xx is fixed, as CriteriaBuilder always\n+            // generates JPQL with MOD(,) instead of using \"%\" for Microsoft SQL Server\n+            getEntityManagerFactory().getConfiguration().getLog(\"test\").warn(\n+            \"SKIPPING testFunctionWithFunctionArgumentInOrderBy() for SQLServer\");\n+            return;\n+        }\n+\n         CriteriaQuery<Tuple> q = cb.createTupleQuery();\n         Root<Customer> c = q.from(Customer.class);\n         Expression<Integer> nameLength = cb.function(\"LENGTH\", Integer.class, c.get(Customer_.name));\n@@ -1546,9 +1565,18 @@ public void testLiteralInProjection() {\n     }\n     \n     public void testBigDecimalConversion() {\n-        String jpql = \"select c.accountNum*10.32597 from Customer c where c.id=10\";\n-        \n+        String jpql = \"select c.accountNum*10.32597 from Customer c where c.id=10\";        \n         long accountNumber = 1234516279;\n+        \n+        if (getDictionary() instanceof SQLServerDictionary) {\n+            // @AllowFailure\n+            // TODO - Skipping for MSSQL, as the calculation result has a precision larger than 38\n+            // params=(BigDecimal) 10.3259699999999998709654391859658062458038330078125\n+            getEntityManagerFactory().getConfiguration().getLog(\"test\").warn(\n+                \"SKIPPING testBigDecimalConversion() for SQLServer\");\n+            return;\n+        }\n+        \n         em.getTransaction().begin();\n         Customer customer = new Customer();\n         customer.setAccountNum(accountNumber);"},{"sha":"2c86467746eaeeb9fe12f35d703a678ba3b23126","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","status":"modified","additions":79,"deletions":20,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -781,7 +781,8 @@ public void testNonCacheableClass() {\n             Collection c = (Collection) q.execute();\n             iterate(c);\n \n-            assertInCache(q, Boolean.FALSE);\n+            // Query results are no longer dependent on cacheability of an entity.\n+            assertInCache(q, Boolean.TRUE);\n         }\n         finally {\n             close(broker);\n@@ -801,7 +802,8 @@ public void testNonCacheableAccessPath() {\n             Collection c = (Collection) q.execute();\n             iterate(c);\n \n-            assertInCache(q, Boolean.FALSE);\n+         // Query results are no longer dependent on cacheability of an entity.\n+            assertInCache(q, Boolean.TRUE);\n         }\n         finally {\n             close(broker);\n@@ -983,6 +985,9 @@ private void timeoutsHelper(OpenJPAEntityManagerFactory factory)\n         try {\n             startTx(em);\n \n+            // get starting time for sleep calculations below\n+            Date startTime = new Date();\n+            \n             CacheObjectE e = new CacheObjectE(\"e\");\n             em.persist(e);\n \n@@ -994,7 +999,7 @@ private void timeoutsHelper(OpenJPAEntityManagerFactory factory)\n \n             CacheObjectH h = new CacheObjectH(\"h\");\n             em.persist(h);\n-\n+            \n             endTx(em);\n \n             Object[] ids = new Object[4];\n@@ -1021,14 +1026,39 @@ private void timeoutsHelper(OpenJPAEntityManagerFactory factory)\n             iterate((Collection) q2.execute());\n             assertInCache(q2, Boolean.TRUE);\n \n+            Date currentTime = new Date();\n+            long diff = (currentTime.getTime() - startTime.getTime());\n+            long sleep = 0;\n+            \n+            getLog().info(\"CacheTest.timeoutsHelper() testing all are still in the cache, elapsed time=\"+diff);\n             DataCache cache = cacheManager(factory).getDataCache(\n                 DataCache.NAME_DEFAULT, false);\n-            checkCache(cache, ids, new boolean[]{ true, true, true, true });\n-\n-            // should cause h to be dropped.\n-            Thread.currentThread().sleep(551);\n-            Thread.yield();\n-            checkCache(cache, ids, new boolean[]{ true, true, true, false });\n+            if (diff < 500) {\n+                // all should still be in the cache\n+                checkCache(cache, ids, new boolean[]{ true, true, true, true });\n+            } else {\n+                // need to skip the test on slow systems or when using remote DB connections\n+                getLog().warn(\"CacheTest.timeoutsHelper() skipping checkCache(all, <500) because diff=\"+diff);\n+            }\n+            \n+            // should cause h to be dropped (timeout=500)\n+            currentTime = new Date();\n+            diff = (currentTime.getTime() - startTime.getTime());\n+            sleep = 750 - diff;\n+            if (sleep > 0) {\n+                getLog().info(\"CacheTest.timeoutsHelper() testing h to be dropped by waiting sleep=\"+sleep);\n+                Thread.currentThread().sleep(sleep);\n+                Thread.yield();\n+            } else {\n+                sleep = 0;\n+            }\n+            if ((diff + sleep) < 950) {\n+                // only h should be dropped\n+                checkCache(cache, ids, new boolean[]{ true, true, true, false });\n+            } else {\n+                // need to skip the test on slow systems or when using remote DB connections\n+                getLog().warn(\"CacheTest.timeoutsHelper() skipping checkCache(h=500) because diff=\"+(diff+sleep));\n+            }\n \n             // if this run has a default timeout (set to 1 sec in the test\n             // case), e should be timed out by this point.\n@@ -1037,23 +1067,42 @@ private void timeoutsHelper(OpenJPAEntityManagerFactory factory)\n             boolean eStatus = !((((OpenJPAEntityManagerFactorySPI) factory)\n                     .getConfiguration()).getDataCacheTimeout() > 0);\n \n-            // should cause f to be dropped.\n-            Thread.currentThread().sleep(550);\n-            Thread.yield();\n-            checkCache(cache, ids,\n-                new boolean[]{ eStatus, false, true, false });\n+            // should cause f to be dropped (timeout=1000)\n+            currentTime = new Date();\n+            diff = currentTime.getTime() - startTime.getTime();\n+            sleep = 2000 - diff;\n+            if (sleep > 0) {\n+                getLog().info(\"CacheTest.timeoutsHelper() testing f to be dropped by waiting sleep=\"+sleep);\n+                Thread.currentThread().sleep(sleep);\n+                Thread.yield();\n+            } else {\n+                sleep = 0;\n+            }\n+            if ((diff + sleep) < 4900) {\n+                // e is conditional, h and f should be dropped, but not g yet\n+                checkCache(cache, ids, new boolean[]{ eStatus, false, true, false });\n+            } else {\n+                // need to skip the test on slow systems or when using remote DB connections\n+                getLog().warn(\"CacheTest.timeoutsHelper() skipping checkCache(f=1000) because diff=\"+(diff+sleep));\n+            }\n \n             // at this point, q2 should be dropped (because its candidate\n             // class is CacheObjectF), and q1 might be dropped, depending\n             // on whether or not we've got a timeout configured.\n             assertInCache(q1, (eStatus) ? Boolean.TRUE : Boolean.FALSE);\n             assertInCache(q2, Boolean.FALSE);\n \n-            // should cause g to be dropped.\n-            Thread.currentThread().sleep(4050);\n-            Thread.yield();\n-            checkCache(cache, ids,\n-                new boolean[]{ eStatus, false, false, false });\n+            // should cause g to be dropped (timeout=5000)\n+            currentTime = new Date();\n+            diff = currentTime.getTime() - startTime.getTime();\n+            sleep = 6000 - diff;\n+            if (sleep > 0) {\n+                getLog().info(\"CacheTest.timeoutsHelper() testing g to be dropped by waiting sleep=\"+sleep);\n+                Thread.currentThread().sleep(sleep);\n+                Thread.yield();\n+            }\n+            // all of them should be dropped now, since diff > 5000\n+            checkCache(cache, ids, new boolean[]{ eStatus, false, false, false });\n         }\n         finally {\n             endEm(em);\n@@ -1072,6 +1121,9 @@ private void queryTimeoutsHelper(OpenJPAEntityManagerFactory factory)\n         try {\n             startTx(em);\n \n+            // get starting time for sleep calculations below\n+            Date startTime = new Date();\n+\n             CacheObjectE e = new CacheObjectE(\"e\");\n             em.persist(e);\n \n@@ -1103,7 +1155,14 @@ private void queryTimeoutsHelper(OpenJPAEntityManagerFactory factory)\n                     .getDataCacheTimeout() > 0);\n \n             // should cause f to be dropped.\n-            Thread.currentThread().sleep(1100);\n+            Date currentTime = new Date();\n+            long diff = currentTime.getTime() - startTime.getTime();\n+            long sleep = 2000 - diff;\n+            if (sleep > 0) {\n+                getLog().trace(\"CacheTest.queryTimeoutsHelper() testing f to be dropped by waiting sleep=\"+sleep);\n+                Thread.currentThread().sleep(sleep);\n+                Thread.yield();\n+            }\n \n             // at this point, q2 should be dropped (because its candidate\n             // class is CacheObjectF), and q1 might be dropped, depending"},{"sha":"5f0e07155ee373058b637f9efee671f1d815bb99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","status":"modified","additions":218,"deletions":57,"changes":275,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -28,34 +28,19 @@\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestDetachNoProxy extends SingleEMFTestCase {\n     \n     private static final int numEntities = 3;\n     private static final String PROXY = new String(\"$proxy\");\n-    private Log log;\n+    private Log _log;\n     \n     public void setUp() {\n         setUp(DROP_TABLES, Entity20.class);\n-        log = emf.getConfiguration().getLog(\"test\");\n-        \n-        // check and set Compatibility values to new 2.0 values\n-        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n-        assertNotNull(compat);\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"Before set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.trace(\"Before set, CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.trace(\"Before set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n-        }\n-        compat.setFlushBeforeDetach(false);\n-        compat.setCopyOnDetach(false);\n-        compat.setCascadeWithDetach(false);\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"After set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.trace(\"After set, CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.trace(\"After set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n-        }\n+        _log = emf.getConfiguration().getLog(\"test\");\n         createEntities(numEntities);\n     }\n     \n@@ -74,53 +59,88 @@ private void createEntities(int count) {\n     /* \n      * Verify that an in-place detached entity does not use the proxy classes.\n      */\n-    public void testDetach() {\n-        if (log.isTraceEnabled())\n-            log.trace(\"***** testDetach() *****\");\n+    public void testDetach20() {\n         Integer id = new Integer(0);\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetach20() *****\");\n         \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n+        \n         Entity20 e20 = em.find(Entity20.class, id);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after find\");\n+            log.trace(\"** testDetach20() - after find\");\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n         verifySerializable(e20, true, false);\n         \n         // new openjpa-2.0.0 behavior, where detach() doesn't return updated entity, but does it in-place\n         em.detach(e20);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after detach\");\n+            log.trace(\"** testDetach20() - after detach\");\n         // in-place updated entity should not have any proxy classes and should be detached\n         assertFalse(em.contains(e20));\n         assertTrue(em.isDetached(e20));\n-        verifySerializable(e20, false, false);\n+        verifySerializable(e20, true, false);\n                \n         em.close();\n+        emf2.close();\n     }\n \n     /* \n      * Verify that a detachCopy() returned entity does not contain any proxy classes.\n      */\n-    public void testDetachCopy() {\n-        if (log.isTraceEnabled())\n-            log.trace(\"***** testDetachCopy() *****\");\n+    public void testDetachCopy20() {\n         Integer id = new Integer(0);\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetachCopy20() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n \n         Entity20 e20 = em.find(Entity20.class, id);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after find\");\n+            log.trace(\"** testDetachCopy20() - after find\");\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n         verifySerializable(e20, true, false);\n         \n         // Test new detachCopy() method added in 2.0.0\n         Entity20 e20copy = em.detachCopy(e20);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after detachCopy\");\n+            log.trace(\"** TestDetachCopy20() - after detachCopy\");\n         // verify e20 is same as above\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n@@ -131,23 +151,41 @@ public void testDetachCopy() {\n         verifySerializable(e20copy, false, false);\n         \n         em.close();\n+        emf2.close();\n     }\n \n     /*\n      * Verify that in-place detachAll entities do not use the proxy classes.\n      */\n-    public void testDetachAll() {\n+    public void testDetachAll20() {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n         if (log.isTraceEnabled())\n-            log.trace(\"***** testDetachAll() *****\");\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+            log.trace(\"***** testDetachAll20() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n \n         ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n         for (int i=0; i<numEntities; i++) {\n             Entity20 e20 = em.find(Entity20.class, new Integer(i));\n             e20List.add(e20);\n             if (log.isTraceEnabled())\n-                log.trace(\"** after find Entity20(\" + i + \")\");\n+                log.trace(\"** testDetachAll20() - after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n             assertFalse(em.isDetached(e20));\n             verifySerializable(e20, true, false);            \n@@ -159,32 +197,104 @@ public void testDetachAll() {\n         em.detachAll(e20List.get(0), e20List.get(1), e20List.get(2));\n         for (int i=0; i<numEntities; i++) {\n             if (log.isTraceEnabled())\n-                log.trace(\"** after EM.detachAll() verify e20List(\" + i + \")\");\n+                log.trace(\"** testDetachAll20() - after EM.detachAll() verify e20List(\" + i + \")\");\n             Entity20 e20 = e20List.get(i);\n             // entity should not have any proxy classes (in-place updated) and is detached\n             assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n-            verifySerializable(e20, false, false);\n+            verifySerializable(e20, true, false);\n         }\n \n         em.close();\n+        emf2.close();\n     }\n \n     /*\n-     * Verify that after EM.clear() entities still contain proxy classes.\n+     * Verify that after EM.clear() entities still contain proxy classes for 1.0 apps.\n      */\n-    public void testClear() {\n+    public void testClear10Compat() {\n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy1Compat\", \"org/apache/openjpa/persistence/detach/persistence1.xml\");\n+        assertNotNull(emf1);\n+\n+        Log log = emf1.getConfiguration().getLog(\"test\");\n         if (log.isTraceEnabled())\n-            log.trace(\"***** testClear() *****\");\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+            log.trace(\"***** testClear10Compat() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf1.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear10Compat() - after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n+            verifySerializable(e20, true, false);            \n+        }\n+\n+        em.clear();\n+\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear10Compat() - after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            assertFalse(em.contains(e20));\n+            assertTrue(em.isDetached(e20));\n+            // Old 1.0/1.2 Behavior -\n+            //   the $proxy classes are not removed during serialization\n+            verifySerializable(e20, true, true);\n+        }\n+\n+        em.close();\n+        emf1.close();\n+    }\n+\n+    /*\n+     * Verify that after EM.clear() entities still contain proxy classes for 1.0 apps.\n+     */\n+    public void testClear20Compat() {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2Compat\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testClear20Compat() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n \n         ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n         for (int i=0; i<numEntities; i++) {\n             Entity20 e20 = em.find(Entity20.class, new Integer(i));\n             e20List.add(e20);\n             if (log.isTraceEnabled())\n-                log.trace(\"** after find Entity20(\" + i + \")\");\n+                log.trace(\"** testClear20Compat() - after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n             assertFalse(em.isDetached(e20));\n             verifySerializable(e20, true, false);            \n@@ -194,19 +304,70 @@ public void testClear() {\n \n         for (int i=0; i<numEntities; i++) {\n             if (log.isTraceEnabled())\n-                log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n+                log.trace(\"** testClear20Compat() - after EM.clear() verify Entity20(\" + i + \")\");\n             Entity20 e20 = e20List.get(i);\n             assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n-            // entity should still have proxy classes and is detached,\n-            // Old 1.2.x Behavior -\n+            // Old 1.0/1.2 Behavior -\n             //   the $proxy classes are not removed during serialization\n-            // verifySerializable(e20, true, true);\n+            verifySerializable(e20, true, true);\n+        }\n+\n+        em.close();\n+        emf2.close();\n+    }\n+\n+    /*\n+     * Verify that after EM.clear() entities do not contain proxy classes for 2.0 apps.\n+     */\n+    public void testClear20New() {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testClear20New() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear20New() - after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n+            verifySerializable(e20, true, false);            \n+        }\n+\n+        em.clear();\n+\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear20New() - after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            assertFalse(em.contains(e20));\n+            assertTrue(em.isDetached(e20));\n             // OPENJPA-1097 New behavior - $proxy classes are removed\n             verifySerializable(e20, true, false);\n         }\n \n         em.close();\n+        emf2.close();\n     }\n \n     /**\n@@ -225,8 +386,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n         ObjectOutputStream oos = null;\n         byte[] e20bytes = null;\n         \n-        if (log.isTraceEnabled())\n-            log.trace(\"verifySerializable() - before serialize\");\n+        if (_log.isTraceEnabled())\n+            _log.trace(\"verifySerializable() - before serialize\");\n         verifyEntities(e20, usesProxyBefore);\n \n         // first serialize\n@@ -251,8 +412,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n         try {\n             ois = new ObjectInputStream(bais);\n             e20new = (Entity20) ois.readObject();\n-            if (log.isTraceEnabled())\n-                log.trace(\"verifySerializable() - after deserialize\");\n+            if (_log.isTraceEnabled())\n+                _log.trace(\"verifySerializable() - after deserialize\");\n             verifyEntities(e20new, usesProxyAfter);\n         } catch (IOException e) {\n             fail(e.toString());\n@@ -269,8 +430,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n     }\n \n     private void verifyEntities(Entity20 e20, boolean usesProxy) {\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"verifyEntities() - asserting expected proxy usage is \" + usesProxy);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"verifyEntities() - asserting expected proxy usage is \" + usesProxy);\n             printClassNames(e20);\n         }\n         assertTrue(\"Expected sqlDate endsWith($proxy) to return \" + usesProxy,\n@@ -283,10 +444,10 @@ private void verifyEntities(Entity20 e20, boolean usesProxy) {\n     }\n     \n     private void printClassNames(Entity20 e20) {\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n-            log.trace(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n-            log.trace(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n+            _log.trace(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n+            _log.trace(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n         }\n     }\n }"},{"sha":"e61d02db272c3d7be680c672014c9d333b9d9b3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -202,9 +202,15 @@ public void testIllegalArgumennExceptionOnInvalidNamedQuery() {\n \t */\n \tpublic void assertException(Throwable t, Class expectedType) {\n \t\tif (!isExpectedException(t, expectedType)) {\n-\t\t\tt.printStackTrace();\n+\t\t    getLog().error(\"TestException.assertException() - unexpected exception type\", t);\n+\t\t\t//t.printStackTrace();\n \t\t\tprint(t, 0);\n             fail(t + \" or its cause is not instanceof \" + expectedType);\n+\t\t} else {\n+\t\t    if (getLog().isTraceEnabled()) {\n+\t            getLog().trace(\"TestException.assertException() - caught expected exception type=\" +\n+\t                expectedType, t);\n+\t\t    }\n \t\t}\n \t}\n \t\n@@ -222,11 +228,14 @@ boolean isExpectedException(Throwable t, Class expectedType) {\n \t\n \tvoid print(Throwable t, int tab) {\n \t\tif (t == null) return;\n-\t\tfor (int i=0; i<tab*4;i++) System.out.print(\" \");\n+\t\tStringBuilder str = new StringBuilder(80);\n+\t\tfor (int i=0; i<tab*4;i++)\n+\t\t    str.append(\" \");\n \t\tString sqlState = (t instanceof SQLException) ? \n \t\t\t\"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" \n \t\t\t\t+ t.getMessage() + \")\" : \"\";\n-\t\tSystem.out.println(t.getClass().getName() + sqlState);\n+\t\tstr.append(t.getClass().getName() + sqlState);\n+\t\tgetLog().error(str);\n \t\tif (t.getCause() == t) \n \t\t\treturn;\n \t\tprint(t.getCause(), tab+1);"},{"sha":"4de6174cdfafcc08bd3049801d23bcfa86573d2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -44,9 +44,17 @@ public void testDefaultValues() {\n         em.refresh(gv);\n         em.refresh(gv2);\n \n+        // Note: UUID 'string' values are not compared (intermittent failures\n+        // on DB2.) In an environment where data is converted to\n+        // a considerably different character encoding of the database (ex.\n+        // Unicode -> EBCDIC) upon persistence, the uuid string returned by the \n+        // database may not be equal to the original value.  This is a common \n+        // issue with string data, but even more likely for a uuids given that \n+        // uuid strings are produced from pseudo-random byte arrays, which yield\n+        // all sorts of variant characters.\n         assertFalse(gv.getId() == gv2.getId());\n         assertFalse(gv.getField() == gv2.getField());\n-        assertFalse(gv.getUuidstring().equals(gv2.getUuidstring()));\n+        // assertFalse(gv.getUuidstring().equals(gv2.getUuidstring()));\n         assertFalse(gv.getUuidhex().equals(gv2.getUuidhex()));\n         assertFalse(gv.getUuidT4hex().equals(gv2.getUuidT4hex()));\n         assertFalse(gv.getUuidT4string().equals(gv2.getUuidT4string()));"},{"sha":"b83eef2fd5628344efb1ec785e7f583b4ab16531","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"qual_path_Division\")\n+public class Division {\n+    @Id\n+    private int id;\n+    \n+    @ElementCollection\n+    private Map<Employee, String> employees = new HashMap<Employee, String>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Map<Employee, String> getEmployees() {\n+        return employees;\n+    }\n+\n+    public void setEmployees(Map<Employee, String> employees) {\n+        this.employees = employees;\n+    }\n+}"},{"sha":"bebfeb7d9b1cc3cf9bd08f678dede9d4250bdd4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"qual_path_Employee\")\n+public class Employee {\n+    @Id\n+    private int id;\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    \n+    @Embedded\n+    private PersonalInfo personalInfo;\n+\n+    public PersonalInfo getPersonalInfo() {\n+        return personalInfo;\n+    }\n+\n+    public void setPersonalInfo(PersonalInfo personalInfo) {\n+        this.personalInfo = personalInfo;\n+    }\n+}"},{"sha":"5806f273270b88feb68e2cd3eeba2f7ade659bf0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class PersonalInfo {\n+    private String firstName;\n+    private String lastName;\n+    \n+    @ElementCollection\n+    private Set<Phone> phones = new HashSet<Phone>();\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public Set<Phone> getPhones() {\n+        return phones;\n+    }\n+\n+    public void setPhones(Set<Phone> phones) {\n+        this.phones = phones;\n+    }\n+\n+    public void addPhone(Phone phone) {\n+        phones.add(phone);\n+    }\n+\n+}"},{"sha":"9ef723d3edd873f7397fb0332d8d9294727e9112","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"qual_path_Phone\")\n+public class Phone {\n+    public final static String HOME= \"home\";\n+    public final static String OFFICE = \"office\";\n+    public final static String MOBILE = \"mobile\";\n+    \n+    @Id\n+    private int id;\n+    \n+    private String type;\n+    \n+    private int number;\n+\n+    public int getId() {\n+        return id;\n+    }\n+    \n+    public Phone(int id, String type, int number) {\n+        setId(id);\n+        setType(type);\n+        setNumber(number);\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+}"},{"sha":"0311d614f537716d0381333a7d9fd1a8fe582195","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test queries containing qualified paths of the form:\n+ * <pre>\n+ * general_identification_variable.{single_valued_object_field.}*single_valued_object_field \n+ *    or\n+ * general_identification_variable.{single_valued_object_field.}*collection_valued_field \n+ * </pre>\n+ */\n+public class TestQualifiedPath extends SQLListenerTestCase {\n+    private int numDivisions = 2;\n+    private int numEmployeesPerDivision = 3;\n+    private int numMobilePhonesPerEmployee = 2;\n+    \n+    private int divisionId = 0;\n+    private int employeeId = 0;\n+    private int nameCount = 0;\n+    private int phoneId = 0;\n+    private int phoneNumber = 1234567890;\n+    \n+    OpenJPAEntityManager em;\n+    \n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Division.class, Employee.class, Phone.class, PersonalInfo.class);\n+        assertNotNull(emf);\n+        em = emf.createEntityManager();\n+        assertNotNull(em);\n+        createObj();\n+    }\n+\n+    public void testQueries() {\n+        em.clear();\n+        String query = \"select p \" + \n+            \" from Division d, in(d.employees) e, in(KEY(e).personalInfo.phones) p\";\n+        Query q = em.createQuery(query);\n+        List<?> rs = q.getResultList();\n+        assertEquals(numDivisions*numEmployeesPerDivision*(2 + numMobilePhonesPerEmployee), rs.size());\n+       \n+        em.clear();\n+        query = \"select KEY(e) \" +\n+            \"from Division d, in(d.employees) e \" +\n+            \"where KEY(e).personalInfo.lastName = 'lName2'\";\n+        q = em.createQuery(query);\n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+        Employee employee = (Employee)rs.get(0);\n+        assertEquals(\"lName2\", employee.getPersonalInfo().getLastName());\n+        \n+        em.clear();\n+        query = \"select KEY(e) \" +\n+            \"from Division d, in(d.employees) e \" +\n+            \"order by KEY(e).personalInfo.lastName\";\n+        q = em.createQuery(query);\n+        rs = q.getResultList();\n+        assertEquals(numDivisions * numEmployeesPerDivision, rs.size());\n+        employee = (Employee)rs.get(0);\n+        assertTrue(employee.getPersonalInfo().getLastName().equals(\"lName1\"));\n+        employee = (Employee)rs.get(1);\n+        assertTrue(employee.getPersonalInfo().getLastName().equals(\"lName2\"));\n+        \n+        em.clear();\n+        query = \"select KEY(e).personalInfo.lastName \" +\n+            \"from Division d, in (d.employees) e \" +\n+            \"group by KEY(e).personalInfo.lastName \" +\n+            \"having KEY(e).personalInfo.lastName = 'lName3'\";\n+        q = em.createQuery(query);\n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+    }\n+    \n+    private void createObj() {\n+        em.getTransaction().begin();\n+        for (int i = 0; i < numDivisions; i++) {\n+            createDivision(divisionId++);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+    }\n+    \n+    private void createDivision(int id) {\n+        Division division = new Division();\n+        division.setId(id);\n+        Map<Employee, String> employees = new HashMap<Employee, String>();\n+        for (int i = 0; i < numEmployeesPerDivision; i++) {\n+            Employee employee = createEmployee(employeeId++);\n+            employees.put(employee, employee.getPersonalInfo().getLastName());\n+        }\n+        division.setEmployees(employees);\n+        em.persist(division);\n+    }\n+    \n+    private Employee createEmployee(int id) {\n+        Employee employee = new Employee();\n+        employee.setId(id);\n+        \n+        PersonalInfo personalInfo = new PersonalInfo();\n+        personalInfo.setFirstName(\"fName\" + nameCount++);\n+        personalInfo.setLastName(\"lName\" + nameCount);\n+        \n+        Phone homePhone = new Phone(phoneId++, Phone.HOME, phoneNumber++);\n+        personalInfo.addPhone(homePhone);\n+        Phone officePhone = new Phone(phoneId++, Phone.OFFICE, phoneNumber++);\n+        personalInfo.addPhone(officePhone);\n+        for (int i = 0; i < numMobilePhonesPerEmployee; i++) {\n+            Phone mobilePhone = new Phone(phoneId++, Phone.MOBILE, phoneNumber++);\n+            personalInfo.addPhone(mobilePhone);\n+        }\n+        \n+        employee.setPersonalInfo(personalInfo);\n+        \n+        em.persist(employee);\n+        \n+        return employee;\n+    }\n+\n+}"},{"sha":"5dacbc530fbb889a4a0ebb03e16c6afe5a544209","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex0/TestSpec10_1_27.java","status":"modified","additions":39,"deletions":10,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex0/TestSpec10_1_27.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex0/TestSpec10_1_27.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex0/TestSpec10_1_27.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -41,8 +41,8 @@\n     public int compId = 1;\n     public int divId = 1;\n     public int vpId = 1;\n-    public List rsAllCompny1 = null;\n-    public List rsAllCompny2 = null;\n+    public List<Compny1> rsAllCompny1 = null;\n+    public List<Compny2> rsAllCompny2 = null;\n \n     public void setUp() {\n         super.setUp(CLEAR_TABLES,\n@@ -63,10 +63,10 @@ public void testQueryQualifiedId() throws Exception {\n         queryQualifiedId(false);\n     }\n \n-    public void setCandidate(Query q, Class clz) \n+    public void setCandidate(Query q, Class<?> clz) \n         throws Exception {\n-        org.apache.openjpa.persistence.QueryImpl q1 = \n-            (org.apache.openjpa.persistence.QueryImpl) q;\n+        org.apache.openjpa.persistence.QueryImpl<?> q1 = \n+            (org.apache.openjpa.persistence.QueryImpl<?>) q;\n         org.apache.openjpa.kernel.Query q2 = q1.getDelegate();\n         org.apache.openjpa.kernel.QueryImpl qi = (QueryImpl) q2;\n         if (clz == Compny1.class)\n@@ -83,7 +83,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         Query q = em.createQuery(query);\n         if (inMemory) \n             setCandidate(q, Compny1.class);\n-        List rs = q.getResultList();\n+        List<?> rs = q.getResultList();\n         Division d = (Division) rs.get(0);\n \n         em.clear();\n@@ -115,6 +115,35 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         me = (Map.Entry) rs.get(0);\n \n         assertTrue(d.equals(me.getKey()));\n+        \n+        // new tests for element collection\n+        em.clear();\n+        query = \"select im from Item1 i, in (i.images) im \" +\n+            \" order by VALUE(im)\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Item1.class);\n+        rs = q.getResultList();\n+        assertEquals(numItems * numImagesPerItem, rs.size());\n+        \n+        em.clear();\n+        query = \"select im from Item1 i, in (i.images) im \" +\n+            \" where VALUE(im) = 'file11'\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Item1.class);\n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+        \n+        em.clear();\n+        query = \"select im from Item1 i, in (i.images) im \" +\n+            \" group by im \" +\n+            \" having VALUE(im) like 'file1%'\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Item1.class);\n+        rs = q.getResultList();\n+        assertEquals(numImagesPerItem, rs.size());       \n \n         em.close();\n     }\n@@ -222,25 +251,25 @@ public void findObj(EntityManagerFactory emf) {\n \n     public void assertItem1(Item1 item) {\n         int id = item.getId();\n-        Map images = item.getImages();\n+        Map<String, String> images = item.getImages();\n         Assert.assertEquals(numImagesPerItem, images.size());\n     }\n \n     public void assertItem2(Item2 item) {\n         int id = item.getId();\n-        Map images = item.getImages();\n+        Map<String, String> images = item.getImages();\n         Assert.assertEquals(numImagesPerItem, images.size());\n     }\n \n     public void assertCompany1(Compny1 c) {\n         int id = c.getId();\n-        Map organization = c.getOrganization();\n+        Map<Division, VicePresident> organization = c.getOrganization();\n         Assert.assertEquals(2,organization.size());\n     }\n \n     public void assertCompany2(Compny2 c) {\n         int id = c.getId();\n-        Map organization = c.getOrganization();\n+        Map<Division, VicePresident> organization = c.getOrganization();\n         Assert.assertEquals(2,organization.size());\n     }    \n "},{"sha":"cb0d178ee7007b83872edeb207939ed90a4e215b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that query statistics are collected in a thread-safe manner.\n+ *  \n+ * @author Rick Curtis\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestDefaultQueryStatistics extends SingleEMFTestCase {\n+    QueryStatistics<String> statistics;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        statistics = new QueryStatistics.Default<String>();\n+    }\n+    \n+    public void testThreadSafety() throws Exception{\n+        final QueryStatistics<String> finalStats = statistics;\n+        \n+        Runnable runner = new Runnable() {\n+            public void run() {\n+                for (int i = 0; i < 10000; i++) {\n+                    finalStats.recordExecution(\"query \" + Thread.currentThread().getId() + \" \" + i);\n+                }\n+            }\n+        };\n+        \n+        List<Thread> threads = new ArrayList<Thread>();\n+        for(int i = 0;i<10;i++){\n+            threads.add(new Thread(runner));\n+        }\n+        for(Thread t : threads){\n+            t.start();\n+        }\n+        for(Thread t : threads){\n+            t.join();\n+        }\n+        assertEquals(1000, finalStats.keys().size());\n+    }\n+    \n+    public void testStatsSize() throws Exception{\n+        for (int i = 0; i < 10000; i++) {\n+            statistics.recordExecution(\"query \" + Thread.currentThread().getId() + \" \" + i);\n+        }\n+        assertEquals(1000, statistics.keys().size());\n+    }\n+    \n+    public void testQueryStatisticsIsDisabledByDefault() {\n+        PreparedQueryCache cache = emf.getConfiguration().getQuerySQLCacheInstance();\n+        assertNotNull(cache);\n+        QueryStatistics<String> stats = cache.getStatistics();\n+        assertNotNull(stats);\n+        assertTrue(stats.keys().isEmpty());\n+        assertEquals(QueryStatistics.None.class, stats.getClass());\n+    }\n+}"},{"sha":"286023a5c7698b7c0497f08ddd42ba95ac0c1e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -109,7 +109,7 @@ public void setUp()  {\n             Properties config = new Properties();\n             config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n             config.put(\"openjpa.jdbc.JDBCListeners\", new JDBCListener[] { auditor = new SQLAuditor()});\n-            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true)\");\n             config.put(\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n             config.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n             emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory(\n@@ -983,20 +983,20 @@ public void testRangeIsExcluded() {\n \n         l = getAllCompaniesPaged(0, 1);\n         assertEquals(1, l.size());\n-        assertEquals(\"BEA\", l.get(0).getName());\n+        assertEquals(1900, l.get(0).getStartYear());\n         \n         l = getAllCompaniesPaged(1, 1);\n         assertEquals(1, l.size());\n-        assertEquals(\"IBM\", l.get(0).getName());\n+        assertEquals(2000, l.get(0).getStartYear());\n         \n         l = getAllCompaniesPaged(2, 1);\n         assertEquals(1, l.size());\n-        assertEquals(\"acme.org\", l.get(0).getName());\n+        assertEquals(2010, l.get(0).getStartYear());\n     }\n \n     public List<Company> getAllCompaniesPaged(int start, int max) {\n         EntityManager em = emf.createEntityManager();\n-        Query q = em.createQuery(\"select p from Company p order by p.name\");\n+        Query q = em.createQuery(\"select p from Company p order by p.startYear\");\n         q.setFirstResult(start);\n         q.setMaxResults(max);\n         return (List<Company>) q.getResultList();"},{"sha":"6e988bc23c3670a39af85f09cb0ed6f646b4e929","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -47,7 +47,7 @@ public void testBulkUpdateOnTimestampedVersion() {\n         \n         try {\n             // delay to ensure the new timestamp exceeds the timer's resolution.\n-            Thread.sleep(100);\n+            Thread.sleep(500);\n         } catch (InterruptedException e) {\n         }\n \n@@ -63,7 +63,8 @@ public void testBulkUpdateOnTimestampedVersion() {\n         em.getTransaction().begin();\n         em.refresh(pc);\n         Timestamp newVersion = pc.getVersion();\n-        assertTrue(newVersion.after(oldVersion));\n+        assertTrue(\"Expected newVersion=\" + newVersion.toString() + \" to be after oldVersion=\" + oldVersion.toString(),\n+            newVersion.after(oldVersion));\n     }\n     \n     public void testBulkUpdateOnNumericVersion() {"},{"sha":"667c8f22d83c2a388ec0a58a8b5440a18926b020","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -38,6 +38,8 @@\n import javax.persistence.metamodel.Type.PersistenceType;\n \n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.embed.Address;\n+import org.apache.openjpa.persistence.embed.Geocode;\n import org.apache.openjpa.persistence.enhance.identity.Book;\n import org.apache.openjpa.persistence.enhance.identity.BookId;\n import org.apache.openjpa.persistence.enhance.identity.Library;\n@@ -71,7 +73,9 @@ public void setUp() {\n     \t        OneOneChild.class,\n     \t        Book.class,\n     \t        Library.class,\n-    \t        Page.class);\n+    \t        Page.class,\n+    \t        Address.class,\n+    \t        Geocode.class);\n     \temf.createEntityManager();\n         featureSelection = (MetamodelImpl)emf.getMetamodel();\n         }\n@@ -313,6 +317,12 @@ public void testBasicAttributeType() {\n         assertEquals(PersistentAttributeType.BASIC, pInt.getPersistentAttributeType());\n     }\n     \n+    public void testEmbeddedAttributeType() {\n+        ManagedType<Address> type = featureSelection.entity(Address.class);\n+        Attribute.PersistentAttributeType attr = type.getAttribute(\"geocode\").getPersistentAttributeType();\n+        assertEquals(PersistentAttributeType.EMBEDDED, attr);\n+    }\n+    \n     public void testNotFoundErrorMessage() {\n         IdentifiableType<ImplicitFieldAccessBase> e0 = featureSelection.entity(ImplicitFieldAccessBase.class);\n         String name = \"unknown\";"},{"sha":"a14f4dda097572808ac08b234c0631941825d591","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","status":"added","additions":722,"deletions":0,"changes":722,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,722 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy;\n+\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.persistence.EntityManager;\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+import org.apache.openjpa.persistence.proxy.entities.Address;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityHolderCategory;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject;\n+import org.apache.openjpa.persistence.proxy.entities.ContactType;\n+import org.apache.openjpa.persistence.proxy.entities.IAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.IAnnuityHolder;\n+import org.apache.openjpa.persistence.proxy.entities.IContact;\n+import org.apache.openjpa.persistence.proxy.entities.IEquityAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.IFixedAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.IPayor;\n+import org.apache.openjpa.persistence.proxy.entities.IPayout;\n+import org.apache.openjpa.persistence.proxy.entities.IRider;\n+import org.apache.openjpa.persistence.proxy.entities.Person;\n+import org.apache.openjpa.persistence.proxy.entities.RiderType;\n+import org.apache.openjpa.persistence.proxy.entities.Annuity;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityHolder;\n+import org.apache.openjpa.persistence.proxy.entities.Contact;\n+import org.apache.openjpa.persistence.proxy.entities.EquityAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.FixedAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.Payor;\n+import org.apache.openjpa.persistence.proxy.entities.Payout;\n+import org.apache.openjpa.persistence.proxy.entities.Rider;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityType;\n+\n+\n+/*\n+ * Test the complicated interaction between Detached entities, Proxy classes\n+ * and Merging changes made in ProxyCollections back into entities.\n+ * \n+ * This code is based on AcmeTest2, which was originally written by\n+ * Mohammad at IBM and contributed under ASL 2.0.\n+ */\n+public class TestDetachMerge extends SingleEMFTestCase {\n+            \n+    public void setUp() {\n+        setUp(DROP_TABLES, Address.class, Annuity.class, AnnuityHolder.class, AnnuityPersistebleObject.class,\n+            Contact.class, EquityAnnuity.class, FixedAnnuity.class, Payor.class, Payout.class,\n+            Person.class, Rider.class);\n+    }\n+    \n+    /* \n+     * Test default 1.0 compatibility behavior, which should pass AS-IS\n+     */\n+    public void testAnnuity1Compat() throws Exception {\n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"Annuity1Compat\", \"org/apache/openjpa/persistence/proxy/persistence1.xml\");\n+        assertNotNull(emf1);\n+\n+        Log log = emf1.getConfiguration().getLog(\"test\");\n+\n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"started testAnnuity1Compat()\");\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        try {\n+            execute(emf1);\n+        } catch (RuntimeException e) {\n+            fail(\"testAnuity1Compat() should not have caused an execption!\" + e);\n+        } finally {\n+            emf1.close();\n+        }\n+    }\n+    \n+    /* \n+     * Test default 2.0 compatibility behavior, which should PASS\n+     */\n+    public void testAnnuity2Compat() throws Exception {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"Annuity2Compat\", \"org/apache/openjpa/persistence/proxy/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+\n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"started testAnnuity2Compat()\");\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        try {\n+            execute(emf2);\n+        } catch (RuntimeException e) {\n+            fail(\"testAnuity2Compat() should not have caused an execption!\" + e);\n+        } finally {\n+            emf2.close();\n+        }\n+    }\n+    \n+    private void execute(OpenJPAEntityManagerFactorySPI myEMF) throws Exception {\n+        Log log = myEMF.getConfiguration().getLog(\"test\");\n+        //EntityManager em = myEMF.createEntityManager();\n+        IContact contact = null;\n+        \n+        try {\n+            if (log.isTraceEnabled())\n+                log.trace(\"creating contact\");\n+            try {       \n+                contact = createContact(myEMF);      \n+            } catch (Exception e) {\n+                log.error(\"Create Contact failed.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyContactValues(myEMF, contact);\n+            } catch (Exception e) {\n+                log.error(\"Create Contact verification failed.\", e);\n+                throw e;\n+                // do not return, as this might be a small bug that we can bypass\n+            }\n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"creating annuity holder\");\n+            IAnnuityHolder annuityHolder = null;\n+            try {\n+                annuityHolder = createAnnuityHolder(myEMF, contact);           \n+            } catch (Exception e) {\n+                log.error(\"failed to create Annuity Holder Successfully.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyAnnuityHolderValues(myEMF, annuityHolder);\n+            } catch (Exception e) {\n+                log.info(\"failed to verify create annuity holder successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"creating payor\");\n+            IPayor payor = null;\n+            try {\n+                payor = createPayor(myEMF);\n+            } catch(Exception e) {\n+                log.error(\"failed to create payor successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyPayorValues(myEMF, payor);\n+            } catch (Exception e) {\n+                log.error(\"failed to verify create payor successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"creating annuity\");\n+            IAnnuity annuity =null;     \n+            AnnuityType annuityType = AnnuityType.FIXED;\n+            try {           \n+                annuity = createAnnuityWithRider(myEMF, annuityType);\n+            } catch (Exception e) {\n+                log.error(\"failed to create annuity successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                log.trace(\"verify annuity with rider\");\n+                verifyAnnuityValues(myEMF, annuity, annuityType);\n+            } catch (Exception e) {\n+                log.error(\"failed to verify create annuity successfuly.\", e);\n+                throw e;\n+            }       \n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"upating annuity\");\n+            try {\n+                log.trace(\"create annuity with payout\");\n+                annuity = createAnnuityPayout(myEMF, annuity);\n+            } catch (Exception e) {\n+                log.error(\"failed to create annuity successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyAnnuityValues(myEMF, annuity, annuityType);\n+            } catch (Exception e) {\n+                log.error(\"failed to verify create annuity successfuly.\", e);\n+                throw e;\n+            }       \n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"upating annuity\");\n+            try {\n+                EntityManager em = createEM(myEMF);\n+                em.getTransaction().begin();\n+                    annuity.getPayors().add(payor);\n+                    annuity.setAnnuityHolderId(annuityHolder.getId());\n+                    annuity = em.merge(annuity);\n+                em.getTransaction().commit();\n+                closeEM(em);\n+            } catch (Exception e) {\n+                log.error(\"failed to update annuity successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyAnnuityValues(myEMF, annuity, annuityType); \n+            } catch (Exception e) {\n+                log.error(\"failed to verify annuity update successfuly.\", e);\n+                throw e;\n+            }\n+        } finally {\n+            log.error(\"scenario: failed.\");\n+        }\n+        \n+        if (log.isTraceEnabled())\n+            log.trace(\"scenario: completed.\");\n+    }\n+\n+    private IAnnuity createAnnuityPayout(OpenJPAEntityManagerFactorySPI myEMF, IAnnuity annuity) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IPayout payout = new Payout();\n+        payout.setAnnuity(annuity);\n+        payout.setTaxableAmount(new BigDecimal(100.00));\n+        payout.setStartDate(Calendar.getInstance());\n+        payout.setEndDate(Calendar.getInstance());\n+        payout.setId(getId());\n+        em.persist(payout);\n+        em.getTransaction().commit();\n+        em.getTransaction().begin();\n+        annuity.getPayouts().add(payout);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return annuity;\n+    }\n+\n+    private IAnnuity createAnnuityWithRider(OpenJPAEntityManagerFactorySPI myEMF, AnnuityType annuityType) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IAnnuity annuity = createAnnuity(annuityType);\n+        IRider rider1 = getRider();\n+        IRider rider2 = getRider();\n+        IRider rider3 = getRider();\n+        annuity.getRiders().add(rider1);\n+        annuity.getRiders().add(rider2);    \n+        annuity.getRiders().add(rider3);\n+        em.persist(annuity);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return annuity;\n+    }\n+\n+    private IAnnuity createAnnuity(AnnuityType annuityType) {\n+        if (AnnuityType.BASIC.equals(annuityType)) {\n+            Annuity annuity = new Annuity();\n+            annuity.setId(getId());\n+            annuity.setAmount(500.00);\n+            annuity.setAccountNumber(\"123456\");\n+            return annuity;\n+        }\n+        if (AnnuityType.EQUITY.equals(annuityType)) {\n+            EquityAnnuity annuity = new EquityAnnuity();\n+            annuity.setId(getId());\n+            annuity.setAmount(500.00);\n+            annuity.setAccountNumber(\"123456\");\n+            annuity.setFundNames(\"Something nothing wrong\");\n+            annuity.setIndexRate(10.99);\n+            annuity.setLastPaidAmt(100.00);\n+            return annuity;\n+        }\n+        if (AnnuityType.FIXED.equals(annuityType)) {\n+            FixedAnnuity annuity = new FixedAnnuity();\n+            ((FixedAnnuity)annuity).setRate(10.0);        \n+            annuity.setId(getId());\n+            annuity.setAmount(500.00);\n+            annuity.setAccountNumber(\"123456\");\n+            return annuity;\n+        }\n+        return null;\n+    }\n+\n+    private IRider getRider() {\n+        IRider rider = new Rider();\n+        rider.setId(getId());\n+        rider.setRule(\"Pay\");\n+        rider.setType(RiderType.REPLACE);\n+        rider.setEffectiveDate(new Date());\n+        return rider;\n+    }\n+\n+    private void verifyAnnuityValues(OpenJPAEntityManagerFactorySPI myEMF, IAnnuity annuity, AnnuityType annuityType)\n+    throws Exception {\n+        IAnnuity results = findAnnuityById(myEMF, Annuity.class, annuity.getId());\n+        if (annuity instanceof IFixedAnnuity) {\n+            assertEqual((IFixedAnnuity)annuity, (IFixedAnnuity)results,\n+                \"Fixed Annuity from Client is not equal to DB value\", \"Mismacth was found.\");\n+        } else if (annuity instanceof IEquityAnnuity) {\n+            assertEqual((IEquityAnnuity)annuity, (IEquityAnnuity)results,\n+                    \"Equity Annuity from Client is not equal to DB value\", \"Mismacth was found.\");          \n+        } else {\n+            assertEqual(annuity, results,\n+                    \"Basic Annuity from Client is not equal to DB value\", \"Mismacth was found.\");           \n+        }\n+    \n+        assertEqual(annuity.getPayouts(), results.getPayouts(), \n+                \"Annuity payouts from Client is not equal to DB value\", \"Mismacth was found in number of payouts\");     \n+        boolean found = false;\n+        if (annuity.getPayouts() != null) {\n+            IPayout clientPayout = null;\n+            for (int i=0; i<annuity.getPayouts().size(); i++) {     \n+                found = false;  // reset\n+                clientPayout = annuity.getPayouts().get(i);\n+                for (IPayout resultPayout: results.getPayouts()) {\n+                    if (clientPayout.getId().equals(resultPayout.getId())){\n+                        found = true;\n+                        assertEqual(clientPayout, resultPayout, \n+                        \"Annuity Payout from Client is not equal to DB value at location: \" +i , \"Mismacth was found\");\n+                    }else{\n+                        continue;\n+                    }\n+                }\n+                if (!(found) && clientPayout != null) {\n+                    throw new RuntimeException(\"Annuity: Payout from client is not equal to DB.  \" +\n+                            \"Found Payout with id: \" + clientPayout.getId() + \n+                            \" on the client side, but not in the database for annuity id:\" + annuity.getId());\n+                    \n+                }\n+            }\n+        }\n+        \n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), \n+                \"Annuity rider from Client is not equal to DB value\", \"Mismacth was found in number of rider\");     \n+        if (annuity.getRiders() != null) {\n+            IRider clientRider = null;\n+            for (int i=0; i<annuity.getRiders().size(); i++) {      \n+                found = false;  // reset\n+                clientRider = annuity.getRiders().get(i);\n+                for (IRider resultRider : results.getRiders()) {\n+                    if (clientRider.getId().equals(resultRider.getId())){\n+                        found = true;\n+                        assertEqual(clientRider, resultRider, \n+                        \"Annuity rider from Client is not equal to DB value at location: \" +i , \"Mismacth was found\");\n+                    }else{\n+                        continue;\n+                    }\n+                }\n+                if (!(found) && clientRider != null) {\n+                    throw new RuntimeException(\"Annuity: Rider from client is not equal to DB.  \" +\n+                            \"Found rider with id: \" + clientRider.getId() + \n+                            \" on the client side, but not in the database for annuity id:\" + annuity.getId());\n+                    \n+                }\n+            }\n+        }\n+        \n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), \n+                \"Annuity Payor from Client is not equal to DB value\", \"Mismacth was found.\");\n+        if (annuity.getPayors() != null) {\n+            IPayor clientPayor = null;\n+            for (int i=0; i<annuity.getPayors().size(); i++) {      \n+                found = false;  // reset\n+                clientPayor = annuity.getPayors().get(i);\n+                for (IPayor resultPayor : results.getPayors()) {\n+                    if (clientPayor.getId().equals(resultPayor.getId())){\n+                        found = true;\n+                        assertEqual(annuity.getPayors().get(i), resultPayor, \n+                        \"Annuity payor from Client is not equal to DB value at location: \" +i , \"Mismacth was found\");\n+                    }else{\n+                        continue;\n+                    }\n+                }\n+                if (!(found) && clientPayor != null) {\n+                    throw new RuntimeException(\"Annuity: Payor from client is not equal to DB.  \" +\n+                            \"Found payor with id: \" + clientPayor.getId() + \n+                            \" on the client side, but not in the database for annuity id:\" + annuity.getId());\n+                    \n+                }\n+            }\n+        }\n+    }\n+    \n+    private void assertEqual(IAnnuity annuity, IAnnuity results, String string, String string2) throws Exception {\n+        if(annuity == null && results == null)\n+            return;\n+        if (annuity == null)\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (Annuity was null).\");\n+        if (!annuity.getId().equals(results.getId())) {\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (Annuity ids not the same).\");\n+        }\n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), string, string2);\n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), string, string2);\n+        assertEqual(annuity.getPayouts(),results.getPayouts(), string, string2);\n+    }\n+\n+    private void assertEqual(IEquityAnnuity annuity, IEquityAnnuity results, String string, String string2)\n+    throws Exception {\n+        if(annuity == null && results == null)\n+            return;\n+        if (annuity == null)\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (EquityAnnuity was null).\");\n+        if (!annuity.getId().equals(results.getId())) {\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (EquityAnnuity ids not the same).\");\n+        }\n+        \n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), string, string2);\n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), string, string2);\n+        assertEqual(annuity.getPayouts(),results.getPayouts(), string, string2);\n+    }\n+\n+    private void assertEqual(IFixedAnnuity annuity, IFixedAnnuity results, String string, String string2)\n+    throws Exception {\n+        if(annuity == null && results == null)\n+            return;\n+        if (annuity == null)\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (FixedAnnuity was null).\");\n+        if (!annuity.getId().equals(results.getId())) {\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (FixedAnnuity ids not the same).\");\n+        }\n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), string, string2);\n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), string, string2);\n+        assertEqual(annuity.getPayouts(),results.getPayouts(), string, string2);\n+    }\n+\n+    private IAnnuity findAnnuityById(OpenJPAEntityManagerFactorySPI myEMF, Class<Annuity> class1, String id) {\n+        EntityManager em = createEM(myEMF);\n+        IAnnuity ann = em.find(class1, id);\n+        closeEM(em);\n+        return ann;\n+    }\n+\n+    private void assertEqual(List<IPayout> payouts, List<IPayout> payouts2, String string, String string2)\n+    throws Exception {\n+        if (payouts == null && payouts2 == null) \n+            return;\n+        if (payouts == null)\n+            throw new RuntimeException(\"Annuity: IPayout list not the same (payouts was null)!\");\n+        if (payouts.size() != payouts2.size())\n+            throw new RuntimeException(\"Annuity: IPayout list not the same (payouts size not the same)!\");\n+        for (int i = 0; i < payouts.size(); i++) {\n+            IPayout payout = payouts.get(i);\n+            boolean found = false;\n+            for (int j = 0; i < payouts2.size(); j++) {\n+                try {\n+                    assertEqual(payout, payouts2.get(j), string, string2);\n+                    found = true;\n+                    break;\n+                } catch (Exception e) {\n+                    continue;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Annuity: IPayout list not the same (no match found)!\");\n+            }\n+        }\n+    }\n+\n+    private void assertEqual(IPayout clientPayout, IPayout resultPayout, String string, String string2)\n+    throws Exception {\n+        if (clientPayout == null && resultPayout == null) \n+            return;\n+        if (clientPayout == null)\n+            throw new RuntimeException(\"Annuity: IPayout not the same (clientPayout was null)! \" +\n+                string + \" \" + string2);\n+        if (clientPayout.getId().equals(resultPayout.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: IPayout not the same (clientPayout ids not the same)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private void assertRidersEqual(List<IRider> riders, List<IRider> riders2, String string, String string2)\n+    throws Exception {\n+        if (riders == null && riders2 == null) \n+            return;\n+        if (riders == null)\n+            throw new RuntimeException(\"Annuity: IRider list not the same (riders was null)!\");\n+        if (riders.size() != riders2.size())\n+            throw new RuntimeException(\"Annuity: IRider list not the same (riders size not the same)!\");\n+        for (int i = 0; i < riders.size(); i++) {\n+            IRider rider = riders.get(i);\n+            boolean found = false;\n+            for (int j = 0; i < riders2.size(); j++) {\n+                try {\n+                    assertEqual(rider, riders2.get(j), string, string2);\n+                    found = true;\n+                    break;\n+                } catch (Exception e) {\n+                    continue;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Annuity: IRider list not the same (match not found)!\");\n+            }\n+        }\n+    }\n+\n+    private void assertEqual(IRider clientRider, IRider resultRider, String string, String string2) throws Exception {\n+        if (clientRider == null && resultRider == null) \n+            return;\n+        if (clientRider == null)\n+            throw new RuntimeException(\"Annuity: IRider not the same (clientRider was null)! \" +\n+                string + \" \" + string2);\n+        if (clientRider.getId().equals(resultRider.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: IRider not the same (no match found)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private void assertPayorsEqual(List<IPayor> payors, List<IPayor> payors2, String string, String string2)\n+    throws Exception {\n+        if (payors == null && payors2 == null) \n+            return;\n+        if (payors == null)\n+            throw new RuntimeException(\"Annuity: IPayor list not the same (payors was null)!\");\n+        if (payors.size() != payors2.size())\n+            throw new RuntimeException(\"Annuity: IPayor list not the same (payors size not the same)! payors=\" +\n+                payors.toArray().toString() + \", payors2=\" + payors2.toString());\n+        for (int i = 0; i < payors.size(); i++) {\n+            IPayor payor = payors.get(i);\n+            boolean found = false;\n+            for (int j = 0; i < payors2.size(); j++) {\n+                try {\n+                    assertEqual(payor, payors2.get(j), string, string2);\n+                    found = true;\n+                    break;\n+                } catch (Exception e) {\n+                    continue;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Annuity: IPayor list not the same (no match found)!\");\n+            }\n+        }\n+    }\n+\n+    private void verifyPayorValues(OpenJPAEntityManagerFactorySPI myEMF, IPayor payor) throws Exception {\n+        IPayor results = null; \n+        results = findPayorById(myEMF, Payor.class, payor.getId());\n+        assertEqual(payor, results,\n+                \"Payor from Client is not equal to DB value.\", \"Mismacth was found.\");\n+    }\n+\n+    private IPayor findPayorById(OpenJPAEntityManagerFactorySPI myEMF, Class<Payor> class1, String id) {\n+        EntityManager em = createEM(myEMF);\n+        IPayor ip = em.find(class1, id);\n+        closeEM(em);\n+        return ip;\n+    }\n+\n+    private void assertEqual(IPayor payor, IPayor results, String string, String string2) throws Exception {\n+        if (payor == null && results == null) \n+            return;\n+        if (payor == null)\n+            throw new RuntimeException(\"Annuity: IPayor not the same (payor was null)! \" +\n+                string + \" \" + string2);\n+        if (payor.getId().equals(results.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: IPayor not the same (no match found)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private IPayor createPayor(OpenJPAEntityManagerFactorySPI myEMF) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IPayor payor = new Payor();\n+        payor.setId(getId());\n+        payor.setName(\"Payor\");\n+        em.persist(payor);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return payor;\n+    }\n+\n+    private void verifyAnnuityHolderValues(OpenJPAEntityManagerFactorySPI myEMF, IAnnuityHolder annuityHolder)\n+    throws Exception {\n+        IAnnuityHolder result = null;\n+        result = findHolderById(myEMF, AnnuityHolder.class, annuityHolder.getId());\n+        assertEqual(annuityHolder, result, \n+            \"Annuity Holder from Client is not equal to DB value.\", \"Mismacth was found.\");\n+        assertEqual(annuityHolder.getContact(), result.getContact(), \n+                \"Annuity Holder Contact from Client is not equal to DB value.\", \"Mismacth was found.\");\n+    }\n+    \n+    private IAnnuityHolder findHolderById(OpenJPAEntityManagerFactorySPI myEMF, Class<AnnuityHolder> class1, String id)\n+    {\n+        EntityManager em = createEM(myEMF);\n+        IAnnuityHolder result = em.find(class1, id);\n+        closeEM(em);\n+        return result;\n+    }\n+\n+    private EntityManager createEM(OpenJPAEntityManagerFactorySPI myEMF) {\n+        return myEMF.createEntityManager();\n+    }\n+\n+    private void closeEM(EntityManager em) {\n+        if (em != null) {\n+            em.close();\n+            em = null;\n+        }\n+    }\n+\n+    private void assertEqual(IAnnuityHolder annuityHolder, IAnnuityHolder results, String string, String string2)\n+    throws Exception {\n+            if (annuityHolder == null && results == null) \n+                return;\n+            if (annuityHolder == null)\n+                throw new RuntimeException(\"Annuity: IAnnuityHolder not the same (annuityHolder was null)! \" +\n+                    string + \" \" + string2);\n+            if (annuityHolder.getId().equals(results.getId()))\n+                return;\n+            throw new RuntimeException(\"Annuity: IAnnuityHolder not the same (no match found)! \" +\n+                string + \" \" + string2);\n+    }\n+\n+    private void assertEqual(IContact contact, IContact contact2, String string, String string2) throws Exception {\n+        if (contact == null && contact2 == null) \n+            return;\n+        if (contact == null)\n+            throw new RuntimeException(\"Annuity: Contacts not the same (contact was null)! \" +\n+                string + \" \" + string2);\n+        if (contact.getId().equals(contact2.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: Contacts not the same (no match found)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private IAnnuityHolder createAnnuityHolder(OpenJPAEntityManagerFactorySPI myEMF, IContact contact) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IAnnuityHolder annuityHolder = new AnnuityHolder();\n+        annuityHolder.setCategory(AnnuityHolderCategory.METAL);\n+        annuityHolder.setContact(contact);\n+        annuityHolder.setId(getId());\n+        annuityHolder.setFirstName(\"bob\");\n+        annuityHolder.setDateOfBirth(new Date());\n+        annuityHolder.setGovernmentId(\"US\");\n+        annuityHolder.setLastName(\"dog\");\n+        annuityHolder.setTimeOfBirth(new Date());\n+        em.persist(annuityHolder);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return annuityHolder;\n+    }\n+\n+    private void verifyContactValues(OpenJPAEntityManagerFactorySPI myEMF, IContact contact) throws Exception {\n+        // read the contact with id.\n+        IContact results = null;\n+        results = findContactById(myEMF, Contact.class, contact.getId());\n+        assertEqual(contact, results, \n+            \"Contact from Client is not equal to DB value.\", \"Mismacth was found.\");     \n+    }\n+\n+    private IContact findContactById(OpenJPAEntityManagerFactorySPI myEMF, Class<Contact> class1, String id) {\n+        EntityManager em = createEM(myEMF);\n+        IContact ic = em.find(class1, id);\n+        closeEM(em);\n+        return ic;\n+    }\n+\n+    private IContact createContact(OpenJPAEntityManagerFactorySPI myEMF) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IContact contact = null;\n+        contact = new Contact();\n+        contact.setContactType(ContactType.BUSINESS);\n+        contact.setId(getId());\n+        contact.setEmail(\"here@there\");\n+        contact.setPhone(\"555-5555\");\n+        em.persist(contact);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return contact;\n+    }\n+\n+    private String getId() {\n+        UUID uid = UUID.randomUUID();\n+        return uid.toString();\n+    }\n+\n+}"},{"sha":"423e6d9ee7adbccd6b3726bfd66b8cd38da54f01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"ADDRESS_ANNUITY\")\n+@Embeddable\n+public class Address implements IAddress {\t\n+\tprivate static final long serialVersionUID = -2017682230659955349L;\n+\tprivate String line1;\n+\tprivate String line2;\n+\tprivate String city;\n+\tprivate String state;\n+\tprivate String zipCode;\n+\tprivate String country;\n+\t\n+\t@Column(name=\"CITY\")\n+\tpublic String getCity() {\n+\t\treturn city;\n+\t}\n+\tpublic void setCity(String city) {\n+\t\tthis.city = city;\n+\t}\n+\t@Column(name=\"COUNTRY\")\n+\tpublic String getCountry() {\n+\t\treturn country;\n+\t}\n+\tpublic void setCountry(String country) {\n+\t\tthis.country = country;\n+\t}\n+\t@Column(name=\"LINE1\")\n+\tpublic String getLine1() {\n+\t\treturn line1;\n+\t}\t\n+\tpublic void setLine1(String line1) {\n+\t\tthis.line1 = line1;\n+\t}\n+\t@Column(name=\"LINE2\")\n+\tpublic String getLine2() {\n+\t\treturn line2;\n+\t}\n+\tpublic void setLine2(String line2) {\n+\t\tthis.line2 = line2;\n+\t}\n+\t@Column(name=\"STATE\")\n+\tpublic String getState() {\n+\t\treturn state;\n+\t}\n+\tpublic void setState(String state) {\n+\t\tthis.state = state;\n+\t}\n+\t@Column(name=\"ZIP_CODE\")\n+\tpublic String getZipCode() {\n+\t\treturn zipCode;\n+\t}\n+\tpublic void setZipCode(String zipCode) {\n+\t\tthis.zipCode = zipCode;\n+\t}\n+}"},{"sha":"96816fdbcc816fba1486946fca6f1f685ccc32d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToMany;\n+\n+\n+@SuppressWarnings(\"serial\")\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name=\"DTYPE\", discriminatorType=DiscriminatorType.STRING)\n+@DiscriminatorValue(value=\"ANNUITY\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Annuity extends AnnuityPersistebleObject implements IAnnuity {\n+    \n+    private Double lastPaidAmt; \n+    private String AccountNumber;       \n+    private Double amount;\n+    private String annuityHolderId;\n+    private List<IPayout> payouts = new ArrayList<IPayout>();\n+    private List<IRider> riders = new ArrayList<IRider>();\n+    private List<IPayor> payors = new ArrayList<IPayor>();\n+    \n+    public Annuity(){\n+    }\n+\n+    @Column(name=\"LAST_PAID_AMT\")\n+    public Double getLastPaidAmt() {\n+        return lastPaidAmt;\n+    }\n+    public void setLastPaidAmt(Double lastPaidAmt) {\n+        this.lastPaidAmt = lastPaidAmt;\n+        if (this.lastPaidAmt != null) {\n+            DecimalFormat df = new DecimalFormat(\"#.##\");\n+            this.lastPaidAmt= new Double(df.format(lastPaidAmt));\n+        }\n+    }\n+    \n+    @Column(name=\"ACCOUNT_NUMBER\")\n+    public String getAccountNumber() {\n+        return AccountNumber;\n+    }\n+    public void setAccountNumber(String accountNumber) {\n+        AccountNumber = accountNumber;\n+    }\n+    \n+    @Column(name=\"AMOUNT\")\n+    public Double getAmount() {\n+        return amount;\n+    }\n+    public void setAmount(Double amount) {\n+        this.amount = amount;\n+        if (this.amount != null) {\n+            DecimalFormat df = new DecimalFormat(\"#.##\");\n+            this.amount = new Double(df.format(amount));\n+        }\n+    }\n+\n+    @Column(name=\"FK_ANNUITY_HOLDER_ID\")\n+    public String getAnnuityHolderId() {\n+        return this.annuityHolderId;\n+    }\n+    public void setAnnuityHolderId(String annuityHolderId) {\n+        this.annuityHolderId = annuityHolderId;\n+        \n+    }\n+    \n+    @ManyToMany(targetEntity=Payor.class, \n+            fetch=FetchType.EAGER)          \n+    @JoinTable(name=\"ANNUITY_PAYOR\", \n+            joinColumns={@JoinColumn(name=\"FK_ANNUITY_ID\")}, \n+            inverseJoinColumns={@JoinColumn(name=\"FK_PAYOR_ID\")})\n+    public List<IPayor> getPayors() {\n+        return this.payors;\n+    }\n+    public void setPayors(List<IPayor> payors) {\n+        this.payors = payors;\n+        \n+    }\n+    \n+    @OneToMany(targetEntity=Payout.class,       \n+            mappedBy=\"annuity\", \n+            fetch=FetchType.EAGER)  \n+    public List<IPayout> getPayouts() {\n+        return this.payouts;\n+    }\n+    public void setPayouts(List<IPayout> payouts) {\n+        this.payouts = payouts;     \n+    }\n+\n+    @OneToMany(cascade={CascadeType.ALL}, \n+            targetEntity=Rider.class, \n+            fetch=FetchType.EAGER)\n+    @JoinTable(name=\"ANNUITY_RIDER\", \n+            joinColumns={@JoinColumn(name=\"FK_ANNUITY_ID\")}, \n+            inverseJoinColumns={@JoinColumn(name=\"FK_RIDER_ID\")})   \n+    public List<IRider> getRiders() {\n+        return this.riders;\n+    }\n+    public void setRiders(List<IRider> riders) {\n+        this.riders = riders;\n+    }\n+\n+    \n+    \n+    \n+}"},{"sha":"80e5e8b1f927fb119420216c86117c5b4c0b15f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.Table;\n+\n+@Entity\n+@PrimaryKeyJoinColumn(name=\"ID\")\n+@Table(name=\"ANNUITY_HOLDER\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class AnnuityHolder extends Person implements IAnnuityHolder{\n+\tprivate static final long serialVersionUID = 3307367871936336517L;\t\n+\tprivate AnnuityHolderCategory category;\n+\t\n+\t@Column(name=\"CATEGORY\")\n+\t@Enumerated(EnumType.ORDINAL)\t\n+\tpublic AnnuityHolderCategory getCategory() {\n+\t\treturn this.category;\n+\t}\n+\t\n+\tpublic void setCategory(AnnuityHolderCategory category) {\n+\t\tthis.category = category;\n+\t}\n+\n+\n+}"},{"sha":"d2e4d2d0ab4cf1f5400077f6b4384372dd2faa08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum AnnuityHolderCategory {\n+\tMETAL, BRONZE, SILVER, GOLD; \n+}"},{"sha":"26793640cd13e2d6920ca6e774719fca00e5949f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.persistence.Version;\n+\n+@MappedSuperclass\n+public class AnnuityPersistebleObject implements JPAPersisteble {\n+\tprivate static final long serialVersionUID = -1752164352355128830L;\n+\tprivate String id;\n+\tprivate Date lastUpdateDate;\n+\tprivate Parameterizable<String, String> config = new StringParameterizable();\n+\tprivate int version;\n+\t\n+\t@Version\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tpublic void setVersion(int version) {\n+\t\tthis.version = version;\n+\t}\n+\n+\t@javax.persistence.Id\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\t\t\n+\tpublic Date getLastUpdateDate() {\n+\t\treturn lastUpdateDate;\n+\t}\n+\n+\tpublic void setLastUpdateDate(Date lastUpdateDate) {\n+\t\tthis.lastUpdateDate = lastUpdateDate;\n+\t}\n+\n+\t@Transient\n+\tpublic Parameterizable<String, String> getConfiguration() {\n+\t\treturn this.config;\n+\t}\n+\t@Transient\n+\tpublic void setConfiguration(Parameterizable<String, String> config) {\n+\t\tthis.config = config;\n+\t}\n+\t\n+\t@SuppressWarnings(\"unused\")\n+\t@PrePersist\n+\t@PreUpdate\n+\tprivate void fixLastUpdateDate(){\n+\t\tsetLastUpdateDate(new Date());\n+\t}\n+}"},{"sha":"a86719cfaaab2fc01fadb890d4842bf2dc53d169","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum AnnuityType {\n+    BASIC, EQUITY, FIXED;\n+}"},{"sha":"044351fcc47d7d834c78a53fa90ff5af2dc2bad5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+\n+public interface Configrable<K, V> extends Serializable{\n+\tpublic Parameterizable<K, V> getConfiguration();\n+\tpublic void setConfiguration(Parameterizable<K, V> config);\n+}"},{"sha":"c2d6e70024d38c5db47d73c04fbbf2cc9236db05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+@Entity\n+@Table(name=\"CONTACT_ANNUITY\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Contact extends AnnuityPersistebleObject implements IContact {\n+\tprivate static final long serialVersionUID = 4015672780551057807L;\n+\tprivate Address theAddress;\n+\tprivate String email;\n+\tprivate String phone;\n+\tprivate ContactType contactType;\n+\t\n+\t@Transient\n+\tpublic IAddress getAddress() {\n+\t\treturn (IAddress) this.getTheAddress();\n+\t}\n+\tpublic void setAddress(IAddress address) {\n+\t\tif (address instanceof Address){\n+\t\t\tthis.setTheAddress((Address)address);\n+\t\t}else if(address == null) {\n+\t\t\tthis.setTheAddress(null);\n+\t\t}\n+\t\telse{\n+\t\t\tthrow new ClassCastException(\"Invalid Implementaion of IAddress.  \" +\n+\t\t\t\t\t\"Class must be instance of com.ibm.wssvt.acme.annuity.common.bean.jpa.Address\");\n+\t\t}\n+\t}\n+\n+\t@Embedded\n+\tprivate  Address getTheAddress() {\n+\t\treturn theAddress;\n+\t}\n+\tprivate  void setTheAddress(Address address) {\n+\t\tthis.theAddress = address;\n+\t}\n+\t\n+\t@Column(name=\"EMAIL\")\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\t@Column(name=\"PHONE\")\n+\tpublic String getPhone() {\n+\t\treturn phone;\n+\t}\n+\tpublic void setPhone(String phone) {\n+\t\tthis.phone = phone;\n+\t}\n+\t@Column(name=\"TYPE\")\n+\t@Enumerated(EnumType.STRING)\n+\tpublic ContactType getContactType() {\n+\t\treturn contactType;\n+\t}\n+\tpublic void setContactType(ContactType contactType) {\n+\t\tthis.contactType = contactType;\n+\t}\n+\t\n+}"},{"sha":"4735749dff747a05b92a2230d646b6dc78246815","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum ContactType {\n+\tHOME, BUSINESS, OTHER;\n+}"},{"sha":"453100aa2f39e7f69b403c6fab6f5ac976840b2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.text.DecimalFormat;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(value = \"EQUITY\")\n+public class EquityAnnuity extends Annuity implements IEquityAnnuity {\n+\n+\tprivate static final long serialVersionUID = -7227462924769151013L;\n+\n+\tprivate String fundNames;\n+\n+\tprivate Double indexRate;\n+\n+\t@Column(name=\"FUND_NAMES\")\n+\tpublic String getFundNames() {\n+\t\treturn fundNames;\n+\t}\n+\n+\tpublic void setFundNames(String fundNames) {\n+\t\tthis.fundNames = fundNames;\n+\t}\n+\n+\t@Column(name=\"INDEX_RATE\")\n+\tpublic Double getIndexRate() {\n+\t\treturn indexRate;\n+\t}\n+\n+\tpublic void setIndexRate(Double indexRate) {\n+\t\tthis.indexRate = indexRate;\n+\t\tif (this.indexRate != null) {\n+\t\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n+\t\t\tthis.indexRate= new Double(df.format(indexRate));\n+\t\t}\n+\t}\n+\n+}"},{"sha":"4ba982e75e3c6cb06d3e4a8caa238ef62ad27dc5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.text.DecimalFormat;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(value = \"FIXED\")\n+public class FixedAnnuity extends Annuity implements IFixedAnnuity {\n+\n+\tprivate static final long serialVersionUID = 1527245835840605452L;\n+\n+\tprivate Double rate;\n+\n+\t@Column(name=\"FIXED_RATE\")\n+\tpublic Double getRate() {\n+\t\treturn rate;\n+\t}\n+\n+\tpublic void setRate(Double rate) {\n+\t\tthis.rate = rate;\n+\t\tif (this.rate != null) {\n+\t\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n+\t\t\tthis.rate= new Double(df.format(rate));\n+\t\t}\n+\t}\n+}"},{"sha":"49517c1a7a275556befef6538a9498eb36ec6275","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+\n+public interface IAddress extends Serializable {\n+\n+\tpublic String getCity();\n+\n+\tpublic void setCity(String city);\n+\n+\tpublic String getCountry();\n+\n+\tpublic void setCountry(String country);\n+\n+\tpublic String getLine1();\n+\n+\tpublic void setLine1(String line1);\n+\n+\tpublic String getLine2();\n+\n+\tpublic void setLine2(String line2);\n+\n+\tpublic String getState();\n+\n+\tpublic void setState(String state);\n+\n+\tpublic String getZipCode();\n+\n+\tpublic void setZipCode(String zipCode);\n+\n+}"},{"sha":"36d7d935ed09831c93d9c384081f4d1d104c3f62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.List;\n+\n+public interface IAnnuity extends IAnnuityObject {\n+\t\n+\tpublic abstract Double getLastPaidAmt();\n+\n+\tpublic abstract void setLastPaidAmt(Double lastPaidAmt);\n+\t\n+\tpublic abstract String getAccountNumber();\n+\n+\tpublic abstract void setAccountNumber(String accountNumber);\n+\n+\tpublic abstract Double getAmount();\n+\n+\tpublic abstract void setAmount(Double amount);\n+\t\n+\tpublic abstract List<IPayout> getPayouts();\n+\tpublic abstract void setPayouts(List<IPayout> payout);\n+\t\n+\tpublic abstract List<IRider> getRiders();\n+\tpublic abstract void setRiders(List<IRider> riders);\n+\t\n+\tpublic abstract String getAnnuityHolderId();\n+\tpublic abstract void setAnnuityHolderId(String annuityHolderId);\n+\t\n+\tpublic abstract List<IPayor> getPayors();\n+\tpublic abstract void setPayors(List<IPayor> payors);\n+\t\n+}"},{"sha":"66bc21c5b32556375e663a6fd77e7eaa104c17b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IAnnuityHolder extends IPerson {\n+\n+\tpublic AnnuityHolderCategory getCategory();\n+\tpublic void setCategory(AnnuityHolderCategory category);\n+\t\n+\t\n+}"},{"sha":"21f4b0ff56b5f1a6de7c2ad73f149301e69e8070","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+public interface IAnnuityObject extends Identifiable {\t\n+\tpublic void setLastUpdateDate(Date date);\n+\tpublic Date getLastUpdateDate();\n+}"},{"sha":"c4a30475b034d3d0145871b09cdfdd4033408741","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IContact extends IAnnuityObject {\n+\n+\tpublic IAddress getAddress();\n+\n+\tpublic void setAddress(IAddress address);\n+\n+\tpublic String getEmail();\n+\n+\tpublic void setEmail(String email);\n+\n+\tpublic String getPhone();\n+\n+\tpublic void setPhone(String phone);\n+\t\n+\tpublic ContactType getContactType();\n+\t\n+\tpublic void setContactType(ContactType type);\n+\n+}"},{"sha":"35962ec05a5dbe0c26fa958b58c7c1d4275832df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IEquityAnnuity extends IAnnuity{\n+\n+\tpublic String getFundNames();\n+\n+\tpublic void setFundNames(String fundNames);\n+\n+\tpublic Double getIndexRate();\n+\n+\tpublic void setIndexRate(Double indexRate);\n+\n+}"},{"sha":"29e4f01a113be52ac9307ac99191869d1998acd7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IFixedAnnuity extends IAnnuity {\n+\n+\tpublic Double getRate();\n+\n+\tpublic void setRate(Double rate);\n+\n+}"},{"sha":"3d68075e6b8996961fd3fef46f91597cdfba0a8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IPayor extends IAnnuityObject{\n+\tpublic String getName();\n+\tpublic void setName(String name);\n+\n+}"},{"sha":"4eeb90cc86a478a2ab8c14f0d53d89648ae8a67a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+\n+public interface IPayout extends IAnnuityObject{\n+\n+\tpublic void setTaxableAmount(BigDecimal taxableAmount);\n+\tpublic BigDecimal getTaxableAmount();\n+\tpublic void setStartDate(Calendar startDate);\n+\tpublic Calendar getStartDate();\n+\tpublic void setEndDate(Calendar payoutEndDate);\n+\tpublic Calendar getEndDate();\n+\tpublic IAnnuity getAnnuity();\n+\tpublic void setAnnuity(IAnnuity annuity);\n+\n+}"},{"sha":"6006ee90989baef9906e7fc634be1f78cc0d4736","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IPersisteble extends Identifiable {\n+\n+}"},{"sha":"7c07fd63d03545bd8bea7746d9f9493a316806d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+public interface IPerson extends IAnnuityObject {\n+\n+\tpublic Date getDateOfBirth();\n+\n+\tpublic void setDateOfBirth(Date dateOfBirth);\n+\n+\tpublic String getFirstName();\n+\n+\tpublic void setFirstName(String firstName);\n+\n+\tpublic String getGovernmentId();\n+\n+\tpublic void setGovernmentId(String governmentId);\n+\n+\tpublic String getLastName();\n+\n+\tpublic void setLastName(String lastName);\n+\n+\tpublic Byte[] getPicture();\n+\n+\tpublic void setPicture(Byte[] picture);\n+\n+\tpublic Date getTimeOfBirth();\n+\n+\tpublic void setTimeOfBirth(Date timeOfBirth);\t\n+\t\n+\tpublic IContact getContact();\n+\t\n+\tpublic void setContact(IContact contact);\n+\t\n+}"},{"sha":"4342afb47a19ec43ffa2703e2f29efc475eb2e90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+public interface IRider extends IAnnuityObject {\n+    \n+\tpublic Date getEffectiveDate();\n+\t\n+\tpublic void setEffectiveDate(Date date);\n+\t\n+\tpublic String getRule();\n+\n+\tpublic void setRule(String rule);\n+\n+\tpublic RiderType getType();\n+\n+\tpublic void setType(RiderType type);\n+\t\n+}"},{"sha":"54742671fada1377fbc6e96bf7a26f16bf426518","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+\n+public interface Identifiable extends Configrable<String, String>, Serializable{\n+\tpublic String getId();\n+\tpublic void setId(String id);\t\n+}"},{"sha":"4e9ad3009f4e1aeba75fd1a10a4cab90f629719c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface JPAPersisteble extends IPersisteble, Identifiable, Configrable<String, String>{\n+\n+}"},{"sha":"e2ddee602d274a7f2dde121fe220db3edbcadae2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+public interface Parameterizable <K,V> extends Serializable{\n+\tpublic void addParameter(K key, V value);\n+\tpublic void removeParameter(K key);\n+\tpublic void clearAllParameters();\n+\tpublic Map<K, V> getParameters();\n+\tpublic V getParameterValue(K key);\n+\tpublic void addAllParams(Map<K,V> newParams);\n+}"},{"sha":"7cebeee903279bf4be94fe5e55ce321a2e285876","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Payor extends AnnuityPersistebleObject implements IPayor {\t\n+\tprivate static final long serialVersionUID = 3462390122289537362L;\n+\tprivate String name;\t\n+\t\n+\t@Column(name=\"NAME\")\n+\tpublic String getName() {\n+\t\treturn this.name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+}"},{"sha":"29ac27a13016543c527233faf7d67e7db8331474","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.math.BigDecimal;\n+import java.text.DecimalFormat;\n+import java.util.Calendar;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Payout extends AnnuityPersistebleObject implements IPayout {\t\n+\tprivate static final long serialVersionUID = 2837981324963617180L;\n+\tprivate BigDecimal taxableAmount;\n+\tprivate Calendar startDate;\n+\tprivate Calendar endDate;\n+\tprivate IAnnuity annuity;\n+\t\t\n+\t@Column(name=\"TAXABLE_AMOUNT\")\n+\tpublic BigDecimal getTaxableAmount() {\t\t\n+\t\treturn this.taxableAmount;\n+\t}\n+\tpublic void setTaxableAmount(BigDecimal payoutTaxableAmt) {\t\t\n+\t\tthis.taxableAmount = payoutTaxableAmt;\n+\t\tif (payoutTaxableAmt != null) {\n+\t\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n+\t\t\tthis.taxableAmount = new BigDecimal(df.format(payoutTaxableAmt)); \t\t\t\t\n+\t\t}\n+\t\t\n+\t}\n+\t@Column(name=\"START_DATE\")\n+\tpublic Calendar getStartDate() {\n+\t\treturn startDate;\n+\t}\n+\tpublic void setStartDate(Calendar startDate) {\n+\t\tthis.startDate = startDate;\n+\t}\n+\t\n+\t@Column(name=\"END_DATE\")\n+\tpublic Calendar getEndDate() {\n+\t\treturn endDate;\n+\t}\n+\t\n+\tpublic void setEndDate(Calendar payoutEndDate) {\n+\t\tthis.endDate = payoutEndDate;\n+\t}\n+\t\t\t\n+\t@ManyToOne(targetEntity=Annuity.class,\n+\t\t\tfetch=FetchType.EAGER)\n+\t@JoinColumn(name=\"FK_ANNUITY_ID\")\t\n+\tpublic IAnnuity getAnnuity() {\n+\t\treturn this.annuity;\n+\t}\n+\tpublic void setAnnuity(IAnnuity annuity) {\n+\t\tthis.annuity = annuity;\n+\t\t\n+\t}\n+\n+}"},{"sha":"ffcc8874a2bf0c0266bcc3b3b182ba9d92a24230","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Table(name=\"PERSON_ANNUITY\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Person extends AnnuityPersistebleObject implements IPerson {\n+\n+\tprivate static final long serialVersionUID = 6583119146735692154L;\n+\tprivate String firstName;\n+\tprivate String lastName;\n+\tprivate String governmentId;\n+\tprivate Date dateOfBirth;\n+\tprivate Date timeOfBirth;\n+\tprivate Byte[] picture;\n+\tprivate IContact contact;\n+\t\n+\t\n+\t@Column(name=\"DATE_OF_BIRTH\")\n+\t@Temporal(TemporalType.DATE)\n+\tpublic Date getDateOfBirth() {\n+\t\treturn dateOfBirth;\n+\t}\n+\tpublic void setDateOfBirth(Date dateOfBirth) {\n+\t\tthis.dateOfBirth = dateOfBirth;\n+\t}\n+\t@Column(name=\"FIRST_NAME\")\n+\tpublic String getFirstName() {\n+\t\treturn firstName;\n+\t}\n+\tpublic void setFirstName(String firstName) {\n+\t\tthis.firstName = firstName;\n+\t}\n+\t@Column(name=\"GOVERNMENT_ID\")\n+\tpublic String getGovernmentId() {\n+\t\treturn governmentId;\n+\t}\n+\tpublic void setGovernmentId(String governmentId) {\n+\t\tthis.governmentId = governmentId;\n+\t}\n+\t@Column(name=\"LAST_NAME\")\n+\tpublic String getLastName() {\n+\t\treturn lastName;\n+\t}\n+\tpublic void setLastName(String lastName) {\n+\t\tthis.lastName = lastName;\n+\t}\n+\t@Column(name=\"PICTURE\")\n+\t@Lob\t\n+\tpublic Byte[] getPicture() {\n+\t\treturn picture;\n+\t}\n+\tpublic void setPicture(Byte[] picture) {\n+\t\tthis.picture = picture;\n+\t}\n+\t@Column(name=\"TIME_OF_BIRTH\")\n+\t@Temporal(TemporalType.TIME)\n+\tpublic Date getTimeOfBirth() {\n+\t\treturn timeOfBirth;\n+\t}\n+\tpublic void setTimeOfBirth(Date timeOfBirth) {\n+\t\tthis.timeOfBirth = timeOfBirth;\n+\t}\n+\t\n+\t@OneToOne(\n+\t\t\tcascade={CascadeType.REFRESH, CascadeType.MERGE}, \n+\t\t\ttargetEntity=Contact.class)\n+\t@JoinColumn(name=\"FK_CONTACT_ID\")\t\n+\tpublic IContact getContact() {\n+\t\treturn this.contact;\n+\t}\n+\tpublic void setContact(IContact contact) {\n+\t\tthis.contact = contact;\n+\t}\n+\t\n+}"},{"sha":"6974736d0de1ff074ae2bf2e704aacb0834e693d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"RIDER_ANNUITY\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Rider extends AnnuityPersistebleObject implements IRider {\n+\tprivate static final long serialVersionUID = 2088116709551706187L;\n+\n+\tprivate String rule;\n+\tprivate Date effectiveDate;\n+\tprivate RiderType type;\n+\t\n+\t@Column(name=\"EFFECTIVE_DATE\")\n+\tpublic Date getEffectiveDate() {\n+\t\treturn effectiveDate;\n+\t}\n+\tpublic void setEffectiveDate(Date effectiveDate) {\n+\t\tthis.effectiveDate = effectiveDate;\n+\t}\n+\n+\t@Column(name=\"RIDER_RULE\")\n+\tpublic String getRule() {\n+\t\treturn rule;\n+\t}\n+\tpublic void setRule(String rule) {\n+\t\tthis.rule = rule;\n+\t}\n+\t\n+\t@Enumerated(EnumType.STRING)\t\n+\tpublic RiderType getType() {\n+\t\treturn type;\n+\t}\n+\tpublic void setType(RiderType type) {\n+\t\tthis.type = type;\n+\t}\n+\t\n+\n+}"},{"sha":"7ed149648541673b39231ae45f43fa834d305615","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum RiderType {\n+\tREPLACE, OVERRIDE;\n+}"},{"sha":"e890a6b6d83c4e420f2e5deb349f80099562f81b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringParameterizable implements Parameterizable<String, String> {\n+\tprivate static final long serialVersionUID = -4289064323865338447L;\n+\tprivate Map<String, String> params = new HashMap<String, String>();\n+\t\n+\tpublic void addParameter(String key, String value) {\n+\t\tthis.params.put(key, value);\n+\t}\n+\n+\tpublic Map<String, String> getParameters() {\n+\t\treturn this.params;\n+\t}\n+\n+\tpublic void removeParameter(String key) {\n+\t\tthis.params.remove(key);\n+\t}\n+\n+\tpublic void clearAllParameters() {\n+\t\tthis.params.clear();\n+\t}\n+\n+\tpublic String getParameterValue(String key) {\n+\t\treturn this.params.get(key);\n+\t}\n+\t\n+\tpublic void addAllParams(Map<String, String> newParams) {\n+\t\tif (newParams != null) {\n+\t\t\tparams.putAll(newParams);\n+\t\t}\n+\t}\n+}"},{"sha":"d3f905b575fe09e658d52e07974ab174f6fac101","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","status":"modified","additions":48,"deletions":17,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -27,6 +27,10 @@\n \n import junit.framework.Assert;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -52,26 +56,47 @@ public void testJDBCEscape() {\n         em.flush();\n         tran.commit();\n         em.clear();\n+\n+        String[] jpql;\n+        DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+        if ((dict instanceof SQLServerDictionary) || (dict instanceof HSQLDictionary)) {\n+            jpql = new String[] {\n+                // some changes to the jpql strings had to be made for MSSQL and HSQLDB\n+                \"select a from Employee a where a.hireDate >= {d '2009-08-25'}\",\n+                \"select a from Employee a where a.hireDate >= {d '2009-08-05'}\",    // requires yyyy-mm-dd\n+                // \"select a from Employee a where a.hireTime >= {t '00:00:00'}\",   // fails ?\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123'}\",\n+                // \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1234'}\", // more than 3\n+                // \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12345'}\", // fails\n+                // \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123456'}\",\n+                \"select {t '00:00:00'}, a.empId from Employee a\",\n+            };\n+        } else {\n+            jpql = new String[] {\n+                \"select a from Employee a where a.hireDate >= {d '2009-08-25'}\",\n+                \"select a from Employee a where a.hireDate >= {d '2009-8-5'}\",\n+                \"select a from Employee a where a.hireTime >= {t '00:00:00'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1234'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12345'}\",\n+                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123456'}\",\n+                \"select {t '00:00:00'}, a.empId from Employee a\",\n+            };\n+        }\n         \n-        String[] jpql = {\n-            \"select a from Employee a where a.hireDate >= {d '2009-08-25'}\",\n-            \"select a from Employee a where a.hireDate >= {d '2009-8-5'}\",\n-            \"select a from Employee a where a.hireTime >= {t '00:00:00'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1234'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12345'}\",\n-            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123456'}\",\n-            \"select {t '00:00:00'}, a.empId from Employee a\",\n-        };\n \n         for (int i = 0; i < jpql.length; i++) {\n             Query q = em.createQuery(jpql[i]);\n             List results = q.getResultList();\n-            Assert.assertEquals(1, results.size());\n+            Assert.assertEquals(\"For jpql[\"+i+\"]\", 1, results.size());\n         }\n         \n         // Test support in HAVING clause.\n@@ -84,10 +109,16 @@ public void testJDBCEscape() {\n         for (int j = 0; j < havingJpql.length; j++) {\n             Query q = em.createQuery(havingJpql[j]);\n             List results = q.getResultList();\n-            Assert.assertEquals(1, results.size());\n+            Assert.assertEquals(\"For havingJpql[\"+j+\"]\", 1, results.size());\n         }\n         em.getTransaction().begin();\n-        String update = \"update Employee a set a.hireTimestamp = {ts '2009-08-25 00:00:00.123456'} where a.empId = 1\";\n+        String update;\n+        if ((dict instanceof SQLServerDictionary) || (dict instanceof HSQLDictionary)) {\n+            // more than 3 digits after 00:00:00. fails on MSSQL and HSQLDB\n+            update = \"update Employee a set a.hireTimestamp = {ts '2009-08-25 00:00:00.123'} where a.empId = 1\";\n+        } else {\n+            update = \"update Employee a set a.hireTimestamp = {ts '2009-08-25 00:00:00.123456'} where a.empId = 1\";\n+        }\n         Query q = em.createQuery(update);\n         int updateCnt = q.executeUpdate();\n         em.getTransaction().commit();"},{"sha":"83f850b4b04f9bdafe73c7089da38f078aa3a67f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","status":"modified","additions":64,"deletions":17,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -13,6 +13,7 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.sql.SQLException;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -23,10 +24,11 @@\n import javax.persistence.Query;\n import javax.persistence.QueryTimeoutException;\n \n-import junit.framework.AssertionFailedError;\n-\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.exception.PObject;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -41,13 +43,29 @@\n     private final Class<?> entityClass = PObject.class;\n \n     public void setUp() {\n-        setUnsupportedDatabases(OracleDictionary.class, DB2Dictionary.class);\n+        // Disable tests for any DB that has supportsSelectForUpdate==false, like HSQLDictionary\n+        OpenJPAEntityManagerFactorySPI tempEMF = emf;\n+        if (tempEMF == null) {\n+            tempEMF = createEMF();\n+        }\n+        assertNotNull(tempEMF);\n+        DBDictionary dict = ((JDBCConfiguration)tempEMF.getConfiguration()).getDBDictionaryInstance();\n+        assertNotNull(dict);\n+        if (!dict.supportsSelectForUpdate)\n+            setTestsDisabled(true);\n+        if (emf == null) {\n+            closeEMF(tempEMF);\n+        }\n+\n         if (isTestsDisabled())\n             return;\n-        super.setUp(entityClass);\n+        super.setUp(entityClass, CLEAR_TABLES);\n     }\n     \n     public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntities() {\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"***** Entered TestTimeoutException.\" +\n+                \"testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntities()\");\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         assertNotSame(em1, em2);\n@@ -76,6 +94,9 @@ public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntiti\n     }\n     \n     public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"***** Entered TestTimeoutException.\" +\n+                \"testLockTimeOutExceptionWhileLockingAlreadyLockedEntities()\");\n         EntityManager em1 = emf.createEntityManager();\n         final EntityManager em2 = emf.createEntityManager();\n         assertNotSame(em1, em2);\n@@ -104,6 +125,10 @@ public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n     }\n \n     public void testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities() {\n+        final int timeout = 1000;\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"***** Entered TestTimeoutException.\" +\n+                \"testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities()\");\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         assertNotSame(em1, em2);\n@@ -116,7 +141,11 @@ public void testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities()\n         \n         em2.getTransaction().begin();\n         try {\n-            em2.find(entityClass, oid, LockModeType.PESSIMISTIC_WRITE);\n+            Map<String,Object> hint = new HashMap<String, Object>();\n+            hint.put(\"javax.persistence.lock.timeout\", timeout);\n+            //em2.setProperty(\"javax.persistence.lock.timeout\", timeout);\n+\n+            em2.find(entityClass, oid, LockModeType.PESSIMISTIC_WRITE, hint);\n             fail(\"Expected \" + LockTimeoutException.class.getName());\n         } catch (Throwable t) {\n             assertError(t, LockTimeoutException.class);\n@@ -146,29 +175,47 @@ public Object createEntity(EntityManager em) {\n      */\n     void assertError(Throwable actual, Class<? extends Throwable> expected) {\n         if (!expected.isAssignableFrom(actual.getClass())) {\n-                actual.printStackTrace();\n-                throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \" + \n-                        expected.getName());\n+            getLog().error(\"TestTimeoutException.assertError() - unexpected exception type\", actual);\n+            //actual.printStackTrace();\n+            print(actual, 0);\n+            fail(actual.getClass().getName() + \" was raised but expected \" + expected.getName());\n         }\n         Object failed = getFailedObject(actual);\n         assertNotNull(\"Failed object is null\", failed);\n         assertNotEquals(\"null\", failed);\n     } \n     \n     Object getFailedObject(Throwable e) {\n-        if (e instanceof LockTimeoutException) {\n+        if (e == null) {\n+            getLog().error(\"TestTimeoutException.getFailedObject() - Object e was null\");\n+            return null;\n+        } else if (e instanceof LockTimeoutException) {\n             return ((LockTimeoutException) e).getObject();\n-        }\n-        if (e instanceof PessimisticLockException) {\n+        } else if (e instanceof PessimisticLockException) {\n             return ((PessimisticLockException) e).getEntity();\n-        }\n-        if (e instanceof QueryTimeoutException) {\n+        } else if (e instanceof QueryTimeoutException) {\n             return ((QueryTimeoutException) e).getQuery();\n-        }\n-        if (e instanceof OpenJPAException) {\n+        } else if (e instanceof OpenJPAException) {\n             return ((OpenJPAException) e).getFailedObject();\n+        } else {\n+            getLog().error(\"TestTimeoutException.getFailedObject() - unexpected exception type\", e);\n+            return null;\n         }\n-        return null;\n     }\n-    \n+\n+    void print(Throwable t, int tab) {\n+        if (t == null) return;\n+        StringBuilder str = new StringBuilder(80);\n+        for (int i=0; i<tab*4;i++)\n+            str.append(\" \");\n+        String sqlState = (t instanceof SQLException) ? \n+            \"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" \n+                + t.getMessage() + \")\" : \"\";\n+        str.append(t.getClass().getName() + sqlState);\n+        getLog().error(str);\n+        if (t.getCause() == t) \n+            return;\n+        print(t.getCause(), tab+1);\n+    }\n+\n }"},{"sha":"9e50e0a53c636b611d9b8cfd5385d2decd047b1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java","status":"modified","additions":54,"deletions":76,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -23,112 +23,104 @@\n import javax.persistence.EntityManager;\n import javax.persistence.NamedQuery;\n \n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n import org.apache.openjpa.persistence.querycache.common.apps.Entity1;\n import org.apache.openjpa.persistence.querycache.common.apps.Entity2;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n @NamedQuery(name = \"setParam1\",\n-    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-public class TestQueryCache extends AbstractTestCase {\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk = :pk\")\n+public class TestQueryCache extends SQLListenerTestCase {\n \n     EntityManager em;\n \n-    public TestQueryCache(String name) {\n-        super(name, \"\");\n-        System.setProperty(\"cactus.contextURL\",\n-            \"http://localhost:9000/cachecactus\");\n-        em = currentEntityManager();\n-    }\n-\n-    /*public static Test suite()\n-    {\n-        ServletTestSuite suite = new ServletTestSuite();\n-        suite.addTestSuite(TestQueryCache.class);\n-        return suite;\n-    }*/\n     public void setUp() {\n-        System.setProperty(\"cactus.contextURL\",\n-            \"http://localhost:9000/cactuswebapp\");\n-\n-        //deleteAll(Entity2.class);\n-        deleteAll(Entity1.class);\n-\n-        int instNum = 10;\n-\n-        startTx(em);\n-\n+        super.setUp(\n+            DROP_TABLES,\n+            \"openjpa.QueryCache\", \"true\", \n+            \"openjpa.RemoteCommitProvider\",\"sjvm\",\n+            Entity1.class,Entity2.class\n+        // ,\"openjpa.Log\",\"SQL=trace\"\n+            );\n+        em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n         //create and persist multiple entity1 instances\n-        for (int i = 0; i < instNum; i++) {\n+        for (int i = 0; i < 10; i++) {\n             Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\n             Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\n             ent.setEntity2Field(ent2);\n             em.persist(ent);\n         }\n-\n-        endTx(em);\n-        endEm(em);\n+        em.getTransaction().commit();\n     }\n \n+    public void testCachedQuery(){\n+        em.createQuery(\"Select object(o) from Entity1 o\").getResultList().get(0);        \n+        resetSQL();\n+        em.createQuery(\"Select object(o) from Entity1 o\").getResultList().get(0);\n+        em.createQuery(\"Select object(o) from Entity1 o\").getResultList().get(0);\n+        \n+        assertEquals(0, getSQLCount());\n+        \n+    }\n     public void testResultList() {\n-        em = currentEntityManager();\n         List list = em.createQuery(\"Select object(o) from Entity1 o\")\n             .getResultList();\n \n         assertEquals(10, list.size());\n \n-        endEm(em);\n     }\n \n     public void testGetSingleList() {\n-        em = currentEntityManager();\n+\n         String curr = 2 + \"\";\n \n         Entity1 ret = (Entity1) em\n-            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr))\n             .getSingleResult();\n \n         assertNotNull(ret);\n         assertEquals(\"string2\", ret.getStringField());\n         assertEquals(4, ret.getIntField());\n \n-        endEm(em);\n+\n     }\n \n     public void testExecuteUpdate() {\n         String curr = 2 + \"\";\n         String curr2 = 22 + \"\";\n \n-        em = currentEntityManager();\n+\n         startTx(em);\n \n         Entity1 entity1 = (Entity1) em\n-            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr))\n             .getSingleResult();\n \n-        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr))\n             .executeUpdate();\n         assertEquals(ret, 1);\n \n         // cascade remove doesn't remove the entity2\n-        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk LIKE :pk\")\n+        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk = :pk\")\n             .setParameter(\"pk\", entity1.getEntity2Field().getPk())\n             .executeUpdate();\n \n-        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr2)\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr2))\n             .executeUpdate();\n \n         assertEquals(ret2, 0);\n \n         endTx(em);\n-        endEm(em);\n+\n     }\n \n     public void testSetMaxResults() {\n-        em = currentEntityManager();\n+\n \n         List l = em.createQuery(\"Select object(o) from Entity1 o\")\n             .setMaxResults(5)\n@@ -137,11 +129,11 @@ public void testSetMaxResults() {\n         assertNotNull(l);\n         assertEquals(5, l.size());\n \n-        endEm(em);\n+\n     }\n \n     public void testSetFirstResults() {\n-        em = currentEntityManager();\n+\n \n         List l = em.createQuery(\"Select object(o) from Entity1 o\")\n             .setFirstResult(3)\n@@ -153,37 +145,23 @@ public void testSetFirstResults() {\n         assertEquals(\"string3\", ent.getStringField());\n         assertEquals(5, ent.getIntField());\n \n-        endEm(em);\n-    }\n-\n-    // Tests Binding an argument to a named parameter.\n-    // pk, the named parameter --Not working yet--\n-    public void xxxtestSetParameter1() {\n-\n-        em = currentEntityManager();\n-        String curr = 2 + \"\";\n-\n-        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n-            .getResultList();\n-\n-        assertNotNull(ret);\n-        assertEquals(1, ret.size());\n \n-        ret = em.createNamedQuery(\"setParam1\")\n-            .setParameter(\"pk\", curr)\n-            .getResultList();\n-\n-        assertNotNull(ret);\n-        assertEquals(1, ret.size());\n+    }\n \n-        endTx(em);\n+    protected void startTx(EntityManager em) {\n+        em.getTransaction().begin();\n     }\n-    \n-    @Override\n-    public String getPersistenceUnitName() { \n-        return \"QueryCache\";\n+\n+    protected boolean isActiveTx(EntityManager em) {\n+        return em.getTransaction().isActive();\n     }\n \n-    //rest of the interface is tested by the CTS\n+    protected void endTx(EntityManager em) {\n+        if (em.getTransaction().isActive()) {\n+            if (em.getTransaction().getRollbackOnly())\n+                em.getTransaction().rollback();\n+            else\n+                em.getTransaction().commit();\n+        }\n+    }\n }"},{"sha":"3b7ea11676c44b1d819da2c1022c0209c2fef37a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+ package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+\n+@Entity\n+public class PPerson {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String name;\n+\n+    @ManyToMany(fetch=FetchType.EAGER, mappedBy=\"people\")\n+    private Collection<PPhone> phones;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Collection<PPhone> getPhones() {\n+        return phones;\n+    }\n+\n+    public void setPhones(Collection<PPhone> phones) {\n+        this.phones = phones;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Person [id=\" + id + \", number=\" + name + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"726dfde4e83abdbec5ffa255a7e1728ff0aa6210","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+ package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+\n+@Entity\n+public class PPhone {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String number;\n+\n+    @ManyToMany(fetch=FetchType.EAGER)\n+    private Collection<PPerson> people;\n+\n+    public int getId() {\n+        return id;\n+    }\n+    \n+    public String getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(String number) {\n+        this.number = number;\n+    }\n+\n+    public Collection<PPerson> getPeople() {\n+        return people;\n+    }\n+\n+    public void setPeople(Collection<PPerson> people) {\n+        this.people = people;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Phone [id=\" + id + \", number=\" + number + \"]\";\n+    }\n+}"},{"sha":"b054a1c1139ff486d0d72162cd9e386ccd1bfef0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":54,"deletions":3,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n@@ -41,13 +42,18 @@\n \n     public int numCustomers = 1;\n     public int numOrdersPerCustomer = 4;\n+    \n+    public int _nPeople = 3; \n+    public int _nPhones = 3;\n \n     public void setUp() {\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class, \n             EntityAInverseEager.class, EntityA1InverseEager.class,\n             EntityA2InverseEager.class, EntityBInverseEager.class,\n             EntityCInverseEager.class, EntityDInverseEager.class,\n-            Publisher.class, Magazine.class, DROP_TABLES);\n+            Publisher.class, Magazine.class, \n+            PPerson.class, PPhone.class, \n+            DROP_TABLES);\n \n         // Not all databases support GenerationType.IDENTITY column(s)\n         if (!((JDBCConfiguration) emf.getConfiguration()).\n@@ -132,6 +138,21 @@ public void setUp() {\n             magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\n             em.persist(magazine);\n         }\n+        \n+        PPerson person;\n+        PPhone phone;\n+        for(int i =0; i < _nPeople; i++) { \n+            person = new PPerson();\n+            person.setPhones(new ArrayList<PPhone>());\n+            em.persist(person);\n+            for(int j = 0; j < _nPhones; j++) { \n+                phone = new PPhone(); \n+                phone.setPeople(new ArrayList<PPerson>());\n+                phone.getPeople().add(person);\n+                person.getPhones().add(phone);\n+                em.persist(phone);\n+            }\n+        }\n \n         em.flush();\n         em.getTransaction().commit();\n@@ -255,8 +276,8 @@ public void testOneToManyEagerInverseLazyQuery() {\n         // Not all databases support GenerationType.IDENTITY column(s)\n         if (!((JDBCConfiguration) emf.getConfiguration()).\n             getDBDictionaryInstance().supportsAutoAssign) {\n-\t\t\treturn;\n-\t\t}\n+            return;\n+        }\n         sql.clear();\n \n         OpenJPAEntityManager em = emf.createEntityManager();\n@@ -282,6 +303,36 @@ public void testOneToManyEagerInverseLazyQuery() {\n         assertEquals(0, sql.size());\n         em.close();\n     }\n+    \n+    public void testManyToManyEagerEagerInverseLazyQuery() {\n+        // Not all databases support GenerationType.IDENTITY column(s)\n+        if (!((JDBCConfiguration) emf.getConfiguration()).\n+            getDBDictionaryInstance().supportsAutoAssign) {\n+            return;\n+        }\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM PPerson p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(_nPeople, list.size());\n+        assertEquals(7, sql.size());\n+\n+        sql.clear();\n+        em.clear();\n+        for (int i = 0; i < list.size(); i++) {\n+            PPerson p = (PPerson) list.get(i);\n+            Collection<PPhone> phones = p.getPhones();\n+            assertEquals(_nPhones, phones.size());\n+            for(PPhone phone : p.getPhones()) {\n+                assertNotNull(phone.getPeople());\n+                assertTrue(phone.getPeople().contains(p));\n+            }\n+        }\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n \n     public void testTargetOrphanRemoval() {\n         // Not all databases support GenerationType.IDENTITY column(s)"},{"sha":"cd63aedb354488397bda6d1c251a7e5e02bd3765","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","status":"modified","additions":87,"deletions":4,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -18,15 +18,12 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n-import java.sql.Connection;\n-import java.sql.SQLException;\n+import java.util.HashMap;\n import java.util.Map;\n \n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.CacheStoreMode;\n-import javax.persistence.EntityManager;\n \n-import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.persistence.JPAProperties;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\n@@ -133,7 +130,93 @@ public void testRefreshAfterRemove() {\n         }\n     }\n     \n+    public void testFindWithCacheRetrieveProperty() {\n+        String key = \"Test property in find.\";\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Item item = new Item();\n+        item.setItemData(key);\n+        em.persist(item);\n+        em.flush();\n+        em.getTransaction().commit();\n+        int id = item.getItemId();\n+        em.clear();\n+        emf.getCache().evictAll();\n+\n+        assertEquals(key, item.getItemData());\n+\n+        em.setProperty(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.USE);\n+        em.setProperty(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.USE);\n+        Map<String, Object> properties = em.getProperties();\n+        if (!properties.containsKey(JPAProperties.CACHE_STORE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_STORE_MODE + \" properties be returned\");\n+        }\n+        if (!properties.containsKey(JPAProperties.CACHE_RETRIEVE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_RETRIEVE_MODE + \" properties be returned\");\n+        }\n+        Map<String, Object> paramProperties = new HashMap<String, Object>();\n+        paramProperties.put(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.BYPASS);\n+        paramProperties.put(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.BYPASS);\n+        Item fItem = em.find(Item.class, id, paramProperties);\n+        assertEquals(fItem.getItemData(), key);\n+        assertNotCached(Item.class, id);\n+\n+        Object mode = em.getProperties().get(JPAProperties.CACHE_STORE_MODE);\n+        assertEquals(mode, CacheStoreMode.USE);        \n+        mode = em.getProperties().get(JPAProperties.CACHE_RETRIEVE_MODE);\n+        assertEquals(mode, CacheRetrieveMode.USE);        \n+    }\n     \n+    public void testRefreshWithCacheRetrieveProperty() {\n+        String key = \"Test property in refresh.\";\n+        String updatedKey = \"Updated test property in refresh.\";\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Item item = new Item();\n+        item.setItemData(key);\n+        em.persist(item);\n+        em.flush();\n+        em.getTransaction().commit();\n+        assertEquals(key, item.getItemData());\n+        \n+        int id = item.getItemId();\n+        emf.getCache().evictAll();\n+\n+        assertEquals(key, item.getItemData());\n+\n+        em.setProperty(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.USE);\n+        em.setProperty(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.USE);\n+        Map<String, Object> properties = em.getProperties();\n+        if (!properties.containsKey(JPAProperties.CACHE_STORE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_STORE_MODE + \" properties be returned\");\n+        }\n+        if (!properties.containsKey(JPAProperties.CACHE_RETRIEVE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_RETRIEVE_MODE + \" properties be returned\");\n+        }\n+        Map<String, Object> paramProperties = new HashMap<String, Object>();\n+        paramProperties.put(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.BYPASS);\n+        paramProperties.put(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.BYPASS);\n+        Item fItem = em.find(Item.class, id, paramProperties);\n+        assertEquals(key, fItem.getItemData());\n+        assertNotCached(Item.class, id);\n+\n+        fItem.setItemData(updatedKey);\n+        assertEquals(updatedKey, fItem.getItemData());\n+\n+        em.refresh(fItem, paramProperties);\n+        assertEquals(key, fItem.getItemData());\n+        assertNotCached(Item.class, id);\n+\n+        Object mode = em.getProperties().get(JPAProperties.CACHE_STORE_MODE);\n+        assertEquals(mode, CacheStoreMode.USE);        \n+        mode = em.getProperties().get(JPAProperties.CACHE_RETRIEVE_MODE);\n+        assertEquals(mode, CacheRetrieveMode.USE);        \n+    }\n+\n     void assertCached(Class<?> cls, Object oid) {\n         assertTrue(cls + \":\" + oid + \" should be in L2 cache, but not\", emf.getCache().contains(cls, oid));\n     }"},{"sha":"7087c58f3c9f862215e43592b865e16fe64a6ad7","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -341,4 +341,28 @@\n         </properties>\n     </persistence-unit>\n \n+    <persistence-unit name=\"TestDetachMerge\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+            <!--\n+            <property name=\"openjpa.DetachState\"\n+                value=\"fgs(DetachedStateField=true)\" />\n+            <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\" />\n+            -->\n+        </properties>\n+    </persistence-unit>\n+\n </persistence>"},{"sha":"5dbc1ae67c3bda2fe40f7d47be98ab20282cdb51","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n+\n+    <persistence-unit name=\"NoProxy1Compat\">\n+        <class>org.apache.openjpa.persistence.detach.Entity20</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"b768a65e42841f70a4c1a6308db172d916409810","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n+\n+    <!-- \n+         This is the new PU for 2.0, which takes the default 2.0 \n+         behavior of removing $proxy for default DetachedStateField=transient\n+    -->\n+    <persistence-unit name=\"NoProxy2New\">\n+        <class>org.apache.openjpa.persistence.detach.Entity20</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+\n+    <!-- \n+         This is the original PU from 1.0, but running as a 2.0 app\n+         with the new Compatibility flag set to use the old 1.0 behavior,\n+         which is to not remove $proxy after calling EM.clear()\n+    -->\n+    <persistence-unit name=\"NoProxy2Compat\">\n+        <class>org.apache.openjpa.persistence.detach.Entity20</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\" />\n+            <property name=\"openjpa.Compatibility\"\n+                value=\"IgnoreDetachedStateFieldForProxySerialization=true\" />\n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>"},{"sha":"b84c71627566a8e4bfd6756a0a08bc02aa989873","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n+\n+    <persistence-unit name=\"Annuity1Compat\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" />\n+            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"3e8ddd4b9cb41151ef86154cec79b6cdd6ab8ef3","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n+\n+    <!-- \n+         This is the original PU from 1.0, but running as a 2.0 app\n+    -->\n+    <persistence-unit name=\"Annuity2Compat\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.DetachState\"\n+                value=\"fgs(DetachedStateField=true)\" />\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>"},{"sha":"25141f3bcff6b835c899ad0eb9008e5c8652989f","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -27,7 +27,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <groupId>org.apache.openjpa</groupId>"},{"sha":"15ea35a802a6e61b8ff3faa521e764c270a3415c","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -25,14 +25,19 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.LockModeType;\n+import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n import javax.persistence.Version;\n \n-@NamedQuery(\n-        name=\"findEmployeeById\"\n-        , query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"\n-        )\n \n+@NamedQueries( {\n+    @NamedQuery(name = \"findEmployeeById\", \n+        query = \"SELECT c FROM LockEmployee c WHERE c.id = :id\"),\n+    @NamedQuery(name = \"findEmployeeByIdWithLock\", \n+        query = \"SELECT c FROM LockEmployee c WHERE c.id = :id\", lockMode = LockModeType.PESSIMISTIC_READ),\n+    @NamedQuery(name = \"findEmployeeByIdWithNoLock\", \n+        query = \"SELECT c FROM LockEmployee c WHERE c.id = :id\", lockMode = LockModeType.NONE) })\n @Entity\n public class LockEmployee implements Externalizable {\n "},{"sha":"c108abaccc4680246df4a22a336e00373aa0a076","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.TransactionRequiredException;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Tests the lock mode on named query emits a FOR UPDATE clause in target SQL\n+ * query.\n+ * \n+ * \n+ */\n+public class TestNamedQueryLockMode extends SQLListenerTestCase {\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, LockEmployee.class, \n+            \"openjpa.LockManager\", \"pessimistic\", \n+            \"openjpa.Optimistic\", \"false\"\n+            );\n+    }\n+\n+    public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+    }\n+\n+    @AllowFailure\n+    public void testNamedQueryWithLockModeMustExecuteInTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+        // execute without a transaction\n+         try {\n+         em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\",\n+         0).getResultList();\n+         fail(\"Expected \" + TransactionRequiredException.class.getName());\n+         } catch (TransactionRequiredException e) {\n+         // Expected\n+         }\n+    }\n+\n+    public void testForUpdateClausePresentInQueryWithDefault() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        em.getTransaction().commit();\n+    }\n+\n+    @AllowFailure\n+    public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        em.getTransaction().commit();\n+    }\n+\n+    String getLastSQL() {\n+        String last = sql.get(getSQLCount() - 1);\n+        assertNotNull(\"No last sql found\", last);\n+        return last;\n+    }\n+\n+    void assertClausePresentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not present in \" + last, last.toUpperCase().indexOf(clause) != -1);\n+    }\n+\n+    void assertClauseAbsentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not absent in \" + last, last.toUpperCase().indexOf(clause) == -1);\n+    }\n+}"},{"sha":"0f91668d3b9e17059c437e53b9d54ec8c30a8e90","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -334,6 +334,31 @@ public void testQueryOrderByAfterFindWithPessimisticLocks() {\n         em2.close();\n     }\n \n+    /*\n+     * Test multiple execution of the same query with pessimistic lock.\n+     */\n+    public void testRepeatedQueryWithPessimisticLocks() {\n+        EntityManager em = emf.createEntityManager();\n+        resetSQL();\n+        em.getTransaction().begin();\n+        String jpql = \"select e.firstName from Employee e where e.id = 1\";\n+        Query q1 = em.createQuery(jpql);\n+        q1.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n+        String firstName1 = (String) q1.getSingleResult();\n+        //Expected sql for Derby is:\n+        //SELECT t0.firstName FROM Employee t0 WHERE (t0.id = CAST(? AS BIGINT)) FOR UPDATE WITH RR\n+        String SQL1 = toString(sql);\n+        \n+        // run the second time\n+        resetSQL();\n+        Query q2 = em.createQuery(jpql);\n+        q2.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n+        String firstName2 = (String) q2.getSingleResult();\n+        String SQL2 = toString(sql);\n+        assertEquals(SQL1, SQL2);\n+        em.getTransaction().commit();\n+    }\n+\n     /**\n      * Assert that an exception of proper type has been thrown. Also checks that\n      * that the exception has populated the failed object."},{"sha":"6d5d473ee90494b86e4f278d32c17a31d746cd82","filename":"openjpa-persistence/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"8ffc4024c213e038cd634ded2cd33596b5610a15","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":78,"deletions":5,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -19,7 +19,53 @@\n package org.apache.openjpa.persistence;\n \n import static javax.persistence.GenerationType.AUTO;\n-import static org.apache.openjpa.persistence.MetaDataTag.*;\n+import static org.apache.openjpa.persistence.MetaDataTag.ACCESS;\n+import static org.apache.openjpa.persistence.MetaDataTag.CACHEABLE;\n+import static org.apache.openjpa.persistence.MetaDataTag.DATASTORE_ID;\n+import static org.apache.openjpa.persistence.MetaDataTag.DATA_CACHE;\n+import static org.apache.openjpa.persistence.MetaDataTag.DEPENDENT;\n+import static org.apache.openjpa.persistence.MetaDataTag.DETACHED_STATE;\n+import static org.apache.openjpa.persistence.MetaDataTag.ELEM_DEPENDENT;\n+import static org.apache.openjpa.persistence.MetaDataTag.ELEM_TYPE;\n+import static org.apache.openjpa.persistence.MetaDataTag.EMBEDDED_ID;\n+import static org.apache.openjpa.persistence.MetaDataTag.ENTITY_LISTENERS;\n+import static org.apache.openjpa.persistence.MetaDataTag.EXCLUDE_DEFAULT_LISTENERS;\n+import static org.apache.openjpa.persistence.MetaDataTag.EXCLUDE_SUPERCLASS_LISTENERS;\n+import static org.apache.openjpa.persistence.MetaDataTag.EXTERNALIZER;\n+import static org.apache.openjpa.persistence.MetaDataTag.EXTERNAL_VALS;\n+import static org.apache.openjpa.persistence.MetaDataTag.FACTORY;\n+import static org.apache.openjpa.persistence.MetaDataTag.FETCH_GROUP;\n+import static org.apache.openjpa.persistence.MetaDataTag.FETCH_GROUPS;\n+import static org.apache.openjpa.persistence.MetaDataTag.FLUSH_MODE;\n+import static org.apache.openjpa.persistence.MetaDataTag.GENERATED_VALUE;\n+import static org.apache.openjpa.persistence.MetaDataTag.ID;\n+import static org.apache.openjpa.persistence.MetaDataTag.ID_CLASS;\n+import static org.apache.openjpa.persistence.MetaDataTag.INVERSE_LOGICAL;\n+import static org.apache.openjpa.persistence.MetaDataTag.KEY_DEPENDENT;\n+import static org.apache.openjpa.persistence.MetaDataTag.KEY_TYPE;\n+import static org.apache.openjpa.persistence.MetaDataTag.LOAD_FETCH_GROUP;\n+import static org.apache.openjpa.persistence.MetaDataTag.LRS;\n+import static org.apache.openjpa.persistence.MetaDataTag.MANAGED_INTERFACE;\n+import static org.apache.openjpa.persistence.MetaDataTag.MAPPED_BY_ID;\n+import static org.apache.openjpa.persistence.MetaDataTag.MAP_KEY;\n+import static org.apache.openjpa.persistence.MetaDataTag.MAP_KEY_CLASS;\n+import static org.apache.openjpa.persistence.MetaDataTag.NATIVE_QUERIES;\n+import static org.apache.openjpa.persistence.MetaDataTag.NATIVE_QUERY;\n+import static org.apache.openjpa.persistence.MetaDataTag.ORDER_BY;\n+import static org.apache.openjpa.persistence.MetaDataTag.POST_LOAD;\n+import static org.apache.openjpa.persistence.MetaDataTag.POST_PERSIST;\n+import static org.apache.openjpa.persistence.MetaDataTag.POST_REMOVE;\n+import static org.apache.openjpa.persistence.MetaDataTag.POST_UPDATE;\n+import static org.apache.openjpa.persistence.MetaDataTag.PRE_PERSIST;\n+import static org.apache.openjpa.persistence.MetaDataTag.PRE_REMOVE;\n+import static org.apache.openjpa.persistence.MetaDataTag.PRE_UPDATE;\n+import static org.apache.openjpa.persistence.MetaDataTag.QUERIES;\n+import static org.apache.openjpa.persistence.MetaDataTag.QUERY;\n+import static org.apache.openjpa.persistence.MetaDataTag.READ_ONLY;\n+import static org.apache.openjpa.persistence.MetaDataTag.REPLICATED;\n+import static org.apache.openjpa.persistence.MetaDataTag.SEQ_GENERATOR;\n+import static org.apache.openjpa.persistence.MetaDataTag.TYPE;\n+import static org.apache.openjpa.persistence.MetaDataTag.VERSION;\n \n import java.io.File;\n import java.io.Serializable;\n@@ -60,16 +106,16 @@\n import javax.persistence.FlushModeType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n-\n import javax.persistence.Id;\n import javax.persistence.IdClass;\n import javax.persistence.Lob;\n+import javax.persistence.LockModeType;\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.MapKey;\n import javax.persistence.MapKeyClass;\n-import javax.persistence.MapsId;\n import javax.persistence.MappedSuperclass;\n+import javax.persistence.MapsId;\n import javax.persistence.NamedNativeQueries;\n import javax.persistence.NamedNativeQuery;\n import javax.persistence.NamedQueries;\n@@ -1777,9 +1823,11 @@ private void parseNamedQueries(AnnotatedElement el, NamedQuery... queries) {\n             meta.setLanguage(JPQLParser.LANG_JPQL);\n             for (QueryHint hint : query.hints())\n                 meta.addHint(hint.name(), hint.value());\n-            if (query.lockMode() != null) {\n-                meta.addHint(\"openjpa.FetchPlan.ReadLockMode\", query.lockMode());\n+            LockModeType lmt = processNamedQueryLockModeType(query);\n+            if (lmt != null) {\n+                meta.addHint(\"openjpa.FetchPlan.ReadLockMode\", lmt);\n             }\n+\n             meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n                 SourceTracker.SRC_ANNOTATIONS);\n             if (isMetaDataMode())\n@@ -1791,6 +1839,31 @@ else if (isMappingMode())\n         }\n     }\n \n+    /**\n+     * A private worker method that calculates the lock mode for an individual NamedQuery. If the NamedQuery is \n+     * configured to use the NONE lock mode(explicit or implicit), this method will promote the lock to a READ\n+     * level lock. This was done to allow for JPA1 apps to function properly under a 2.0 runtime. \n+     */\n+    private LockModeType processNamedQueryLockModeType(NamedQuery query) {\n+        LockModeType lmt = query.lockMode();\n+        if (query.lockMode() != null) {\n+            String lm = _conf.getLockManager();\n+            if (lm != null) {\n+                lm = lm.toLowerCase();\n+                if (lm.contains(\"pessimistic\")) {\n+                    if (lmt == LockModeType.NONE) {\n+                        if (_log.isWarnEnabled() == true) {\n+                            _log.warn(_loc.get(\"override-named-query-lock-mode\", new String[] { \"annotation\",\n+                                query.name(), _cls.getName() }));\n+                        }\n+                        lmt = LockModeType.READ;\n+                    }\n+                }\n+            }\n+        }\n+        return lmt;\n+    }\n+\n     /**\n      * Parse @NamedNativeQuery.\n      */"},{"sha":"02bad512f754754448c639575481f97c10589895","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":16,"deletions":28,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -51,10 +51,6 @@\n     private final OpenJPAConfiguration _conf;\n     private final Log _log;\n     private MetaDataRepository _repos = null;\n-\n-    // the class we were invoked to parse\n-    private Class _cls = null;\n-    private FieldMetaData _fmd = null;\n     \n     // cache the JAXB Xml... classes if they are present so we do not\n     // have a hard-wired dependency on JAXB here\n@@ -146,56 +142,48 @@ public void setRepository(MetaDataRepository repos) {\n      * Clear caches.\n      */\n     public void clear() {\n-        _cls = null;\n-        _fmd = null;\n     }\n \n     /**\n-     * Parse persistence metadata for the given field metadata.\n+     * Parse persistence metadata for the given field metadata. If the MetaData(/Mapping)Repository\n+     * is using locking, that lock MUST be held prior to calling this method.\n      */\n-    public void parse(FieldMetaData fmd) {\n-        _fmd = fmd;\n-        _cls = fmd.getDeclaredType();\n+    public synchronized void parse(FieldMetaData fmd) {\n+        Class<?> cls = fmd.getDeclaredType();\n         if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"parse-class\", _cls.getName()));\n-\n-        try {\n-            parseXMLClassAnnotations();\n-        } finally {\n-            _cls = null;\n-            _fmd = null;\n-        }\n+            _log.trace(_loc.get(\"parse-class\", cls.getName()));\n+        parseXMLClassAnnotations(cls, fmd);\n     }\n \n     /**\n      * Read annotations for the current type.\n      */\n-    private XMLMetaData parseXMLClassAnnotations() {\n+    private XMLMetaData parseXMLClassAnnotations(Class<?> cls, FieldMetaData fmd) {\n         // check immediately whether the class has JAXB XML annotations\n-        if (_cls == null || xmlTypeClass == null\n+        if (cls == null || xmlTypeClass == null\n             || !((AccessController.doPrivileged(J2DoPrivHelper\n-                .isAnnotationPresentAction(_cls, xmlTypeClass))).booleanValue()\n+                .isAnnotationPresentAction(cls, xmlTypeClass))).booleanValue()\n                 && (AccessController\n-                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(cls,\n                     xmlRootElementClass))).booleanValue()))\n             return null;\n \n         // find / create metadata\n-        XMLMetaData meta = getXMLMetaData();\n+        XMLMetaData meta = getXMLMetaData(cls, fmd);\n         \n         return meta;\n     }\n \n     /**\n      * Find or create xml metadata for the current type. \n      */\n-    private synchronized XMLMetaData getXMLMetaData() {\n-        XMLMetaData meta = getRepository().getCachedXMLMetaData(_cls);\n+    private XMLMetaData getXMLMetaData(Class<?> cls, FieldMetaData fmd) {\n+        XMLMetaData meta = getRepository().getCachedXMLMetaData(cls);\n         if (meta == null) {\n             // if not in cache, create metadata\n-            meta = getRepository().addXMLMetaData(_cls, _fmd.getName());\n-            parseXmlRootElement(_cls, meta);\n-            populateFromReflection(_cls, meta);\n+            meta = getRepository().addXMLMetaData(cls, fmd.getName());\n+            parseXmlRootElement(cls, meta);\n+            populateFromReflection(cls, meta);\n         }\n         return meta;\n     }"},{"sha":"d26fb0194d338ec08f89f0f369216fb7b6c91322","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":24,"deletions":7,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -33,6 +33,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.EnumSet;\n+import java.util.HashMap;\n import java.util.IdentityHashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -81,6 +82,7 @@\n import org.apache.openjpa.persistence.criteria.OpenJPACriteriaBuilder;\n import org.apache.openjpa.persistence.criteria.OpenJPACriteriaQuery;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n+import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n@@ -486,8 +488,9 @@ public void setLifecycleListenerCallbackMode(int callbackMode) {\n     @SuppressWarnings(\"unchecked\")\n     public <T> T find(Class<T> cls, Object oid, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        configureCurrentCacheModes(getFetchPlan(), properties);\n-        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n+        properties = cloneProperties(properties);\n+        configureCurrentCacheModes(pushFetchPlan(), properties);\n+        configureCurrentFetchPlan(getFetchPlan(), properties, mode, true);\n         try {\n             oid = _broker.newObjectId(cls, oid);\n             return (T) _broker.find(oid, true, this);\n@@ -569,8 +572,15 @@ public void commit() {\n             // normal exception translator, since the spec says they\n             // should be thrown whenever the commit fails for any reason at\n             // all, wheras the exception translator handles exceptions that\n-            // are caused for specific reasons\n-            throw new RollbackException(e);\n+            // are caused for specific reasons            \n+\n+            // pass along the failed object if one is available.\n+            Object failedObject = null;\n+            if (e instanceof ExceptionInfo){\n+            \tfailedObject = ((ExceptionInfo)e).getFailedObject();            \t\n+            }\n+            \n+            throw new RollbackException(e).setFailedObject(failedObject);\n         }\n     }\n \n@@ -757,7 +767,6 @@ public void refresh(Object entity, LockModeType mode, Map<String, Object> proper\n                 Log log = _broker.getConfiguration().getConfigurationLog();\n                 log.warn(_loc.get(\"cache-retrieve-override\", Exceptions.toString(entity)));\n             }\n-                \n         }\n         try {\n             _broker.refresh(entity, this);\n@@ -1179,8 +1188,9 @@ public void lock(Object entity, LockModeType mode, Map<String, Object> propertie\n         assertNotCloseInvoked();\n         assertValidAttchedEntity(LOCK, entity);\n         _broker.assertActiveTransaction();\n-        configureCurrentCacheModes(getFetchPlan(), properties);\n-        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, false);\n+        properties = cloneProperties(properties);\n+        configureCurrentCacheModes(pushFetchPlan(), properties);\n+        configureCurrentFetchPlan(getFetchPlan(), properties, mode, false);\n         try {\n             _broker.lock(entity, MixedLockLevelsHelper.toLockLevel(mode),\n                 _broker.getFetchConfiguration().getLockTimeout(), this);\n@@ -1801,4 +1811,11 @@ Object convertUserValue(String key, Object value, Class<?> targetType) {\n         }\n         return value;\n     }\n+\n+    private Map<String, Object> cloneProperties(Map<String, Object> properties) {\n+        if (properties != null) {\n+            properties = new HashMap<String, Object>(properties);\n+        }\n+        return properties;\n+    }\n }"},{"sha":"9c74950e9bbc496cddf078fe204659cf16c0ef84","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -287,6 +287,7 @@ public boolean afterSpecificationSet(Configuration c) {\n             compatibility.setFlushBeforeDetach(true);\n             compatibility.setCopyOnDetach(true);\n             compatibility.setPrivatePersistentProperties(true);\n+            compatibility.setIgnoreDetachedStateFieldForProxySerialization(true);\n             // Disable bean validation for spec level < 2 configurations\n             conf.validationMode.set(String.valueOf(ValidationMode.NONE));\n         } else {"},{"sha":"ee1fd6af328f5ded8810d187f0362508f518d9de","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -307,7 +307,7 @@ public void fromUserProperties(Map map) {\n             if (JPAProperties.PROVIDER.equals(key))\n                 setPersistenceProviderClassName((String) val);\n             else if (JPAProperties.TRANSACTION_TYPE.equals(key)) {\n-                setTransactionType(JPAProperties.getEnumValue(PersistenceUnitTransactionType.class, key));\n+                setTransactionType(JPAProperties.getEnumValue(PersistenceUnitTransactionType.class, val));\n             } else if (JPAProperties.DATASOURCE_JTA.equals(key)) {\n                 if (val instanceof String) {\n                     setJtaDataSourceName((String) val);"},{"sha":"3b0333aed1381f37e06a1a5d12ea9de768bc18f7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -508,6 +508,12 @@ private boolean preExecute(Map params) {\n             return false;\n         }\n         FetchConfiguration fetch = _query.getFetchConfiguration();\n+        if (fetch.getReadLockLevel() != 0) {\n+            if (cache.get(_id) != null) {\n+                ignorePreparedQuery();\n+            }\n+            return false;\n+        }\n         Boolean registered = cache.register(_id, _query, fetch);\n         boolean alreadyCached = (registered == null);\n         String lang = _query.getLanguage();"},{"sha":"6593e98ec60f26837e388b2a1758e278622b088e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -38,6 +38,8 @@\n public class RollbackException\n     extends javax.persistence.RollbackException\n     implements Serializable, ExceptionInfo {\n+\t\n+    private transient Object _failed = null;\n \n     private transient Throwable[] _nested;\n \n@@ -67,7 +69,12 @@ public Throwable getCause() {\n     }\n \n     public Object getFailedObject() {\n-        return null;\n+        return _failed;\n+    }\n+\n+    public RollbackException setFailedObject(Object failed) {\n+        _failed = failed;\n+        return this;\n     }\n \n     public String toString() {"},{"sha":"b1cecccfcd87bd6748bbdc732cc5bd3d99f005d3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":31,"deletions":2,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -35,6 +35,7 @@\n import javax.persistence.CascadeType;\n import javax.persistence.GenerationType;\n import javax.persistence.LockModeType;\n+import javax.persistence.NamedQuery;\n \n import static javax.persistence.CascadeType.*;\n \n@@ -1673,8 +1674,9 @@ protected boolean startNamedQuery(Attributes attrs)\n         meta.setQueryString(attrs.getValue(\"query\"));\n         meta.setLanguage(JPQLParser.LANG_JPQL);\n         String lockModeStr = attrs.getValue(\"lock-mode\");\n-        if (lockModeStr != null) {\n-            meta.addHint(\"openjpa.FetchPlan.ReadLockMode\", LockModeType.valueOf(lockModeStr));\n+        LockModeType lmt = processNamedQueryLockModeType(log, lockModeStr, name);\n+        if (lmt != null) {\n+            meta.addHint(\"openjpa.FetchPlan.ReadLockMode\", lmt);\n         }\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n@@ -1694,6 +1696,33 @@ else if (isMappingMode())\n         pushElement(meta);\n         return true;\n     }\n+    \n+    /**\n+     * A private worker method that calculates the lock mode for an individual NamedQuery. If the NamedQuery is \n+     * configured to use the NONE lock mode(explicit or implicit), this method will promote the lock to a READ\n+     * level lock. This was done to allow for JPA1 apps to function properly under a 2.0 runtime. \n+     */\n+    private LockModeType processNamedQueryLockModeType(Log log, String lockModeString, String queryName) {\n+        if (lockModeString == null) {\n+            return null;\n+        }\n+        LockModeType lmt = LockModeType.valueOf(lockModeString);\n+        String lm = _conf.getLockManager();\n+        if (lm != null) {\n+            lm = lm.toLowerCase();\n+            if (lm.contains(\"pessimistic\")) {\n+                if (lmt == LockModeType.NONE) {\n+                    if (log != null && log.isWarnEnabled() == true) {\n+                        log.warn(_loc.get(\"override-named-query-lock-mode\", new String[] { \"xml\", queryName,\n+                            _cls.getName() }));\n+                    }\n+                    lmt = LockModeType.READ;\n+                }\n+            }\n+        }\n+\n+        return lmt;\n+    }\n \n     protected void endNamedQuery()\n         throws SAXException {"},{"sha":"39b19b357c51c66dd8aa098876a9a983da98615f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":50,"deletions":175,"changes":225,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,16 +20,13 @@\n \n import static javax.lang.featureSelection.SourceVersion.RELEASE_6;\n \n-import java.io.File;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.io.PrintWriter;\n-import java.net.URI;\n import java.net.URL;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import javax.annotation.Generated;\n@@ -45,54 +42,48 @@\n import javax.lang.featureSelection.type.TypeMirror;\n import javax.lang.featureSelection.util.Elements;\n import javax.persistence.metamodel.StaticMetamodel;\n-import javax.tools.JavaCompiler;\n+import javax.tools.Diagnostic;\n import javax.tools.JavaFileObject;\n-import javax.tools.StandardJavaFileManager;\n-import javax.tools.StandardLocation;\n-import javax.tools.ToolProvider;\n \n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n import org.apache.openjpa.persistence.PersistenceMetaDataFactory;\n import org.apache.openjpa.persistence.util.SourceCode;\n \n+\n /**\n  * Annotation processing tool generates source code for a meta-featureSelection class given \n  * the annotated source code of persistent entity.\n  * <p>\n- * This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n- * libraries are specified in the compiler <code>-processorpath</code> option.\n+ * This tool is invoked during compilation for JDK6 compiler if \n+ * <UL>\n+ * <LI>OpenJPA and JPA libraries are available in the compiler classpath\n+ * and <LI>Annotation Processor option <code>-Aopenjpa.metamodel=true</code> is specified.\n+ * </UL>\n  * <br>\n  * <B>Usage</B><br>\n- * <code>$ javac -processorpath path/to/openjpa-all.jar mypackage/MyEntity.java</code><br>\n+ * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.metamodel=true mypackage/MyEntity.java</code><br>\n  * will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n+ * The source code is generated relative to the directory specified in <code>-s</code> option\n+ * of <code>javac</code> compiler and defaulted to the current directory.\n  * <p>\n- * The Annotation Processor recognizes the following options (none of them are mandatory):\n- * <LI><code>-Alog=TRACE|INFO|WARN|ERROR</code><br>\n- * The logging level. Default is <code>WARN</code>.\n- * <LI>-Asource=&lt;n&gt;<br>\n- * where &lt;n&gt; denotes the integral number for Java source version of the generated code. \n- * Default is <code>6</code>.\n- * <LI>-Anaming=class name <br>\n- * fully-qualified name of a class implementing <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n+ * The Annotation Processor also recognizes the following options (none of them are mandatory):<br>\n+ * <TABLE border=\"1\">\n+ * <TR><TD>-Aopenjpa.log={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n+ *     <code>TRACE</code>, <code>INFO</code>, <code>WARN</code> or <code> ERROR</code>.\n+ * <TR><TD>-Aopenjpa.source={n}          <TD>Java source version of the generated code. Default is <code>6</code>.\n+ * <TR><TD>-Aopenjpa.naming={class name} <TD>fully-qualified name of a class implementing \n+ * <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n  * the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n  * <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n  * (<code>_</code>) to the original Java class name. \n- * <LI>-Aheader=&lt;url&gt;<br>\n+ * <TR><TD>-Aopenjpa.header={url}        <TD>\n  * A url whose content will appear as comment header to the generated file(s). Recognizes special value\n  * <code>ASL</code> for Apache Source License header as comment. By default adds a OpenJPA proprietary   \n  * text.\n- * <LI>-Aout=dir<br>\n- * A directory in the local file system. The generated files will be written <em>relative</em> to this directory\n- * according to the package structure i.e. if <code>dir</code> is specified as <code>/myproject/generated-src</code>\n- * then the generated source code will be written to <code>/myproject/generated-src/mypackage/MyEntity_.java</code>.\n- * If this option is not specified, then an attempt will be made to write the generated source file in the same\n- * directory of the source code of original class <code>mypackage.MyEntity</code>. The source code location for \n- * <code>mypackage.MyEntity</code> can only be determined for Sun JDK6 and <code>tools.jar</code> being available \n- * to the compiler classpath. If the source code location for the original class can not be determined, and the \n- * option is not specified, then the generated source code is written relative to the current directory according \n- * to the package structure.  \n+ * </TABLE>\n  * <br>\n+ *\n  * @author Pinaki Poddar\n  * \n  * @since 2.0.0\n@@ -102,17 +93,21 @@\n     \"javax.persistence.Entity\",\n     \"javax.persistence.Embeddable\", \n     \"javax.persistence.MappedSuperclass\" })\n-@SupportedOptions( { \"log\", \"out\", \"source\", \"naming\", \"header\" })\n+@SupportedOptions({ \"openjpa.log\", \n+                    \"openjpa.source\",\n+                    \"openjpa.naming\",\n+                    \"openjpa.header\",\n+                    \"openjpa.metamodel\"\n+                  })\n @SupportedSourceVersion(RELEASE_6)\n \n public class AnnotationProcessor6 extends AbstractProcessor {\n     private SourceAnnotationHandler handler;\n-    private StandardJavaFileManager fileManager;\n-    private boolean isUserSpecifiedOutputLocation = false;\n     private MetaDataFactory factory;\n     private int generatedSourceVersion = 6;\n     private CompileTimeLogger logger;\n     private String header;\n+    private boolean active;\n     private static Localizer _loc =  Localizer.forPackage(AnnotationProcessor6.class);\n \n     /**\n@@ -190,10 +185,12 @@ private TypeCategory toMetaModelTypeCategory(TypeMirror mirror,\n     @Override\n     public synchronized void init(ProcessingEnvironment processingEnv) {\n         super.init(processingEnv);\n-        logger = new CompileTimeLogger(processingEnv);\n-        logger.info(_loc.get(\"mmg-tool-banner\"));\n+        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.metamodel\"));\n+        if (!active)\n+            return;\n+        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, _loc.get(\"mmg-tool-banner\").toString());\n+        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\"));\n         setSourceVersion();\n-        setFileManager();\n         setNamingPolicy();\n         setHeader();\n         handler = new SourceAnnotationHandler(processingEnv, logger);\n@@ -203,9 +200,8 @@ public synchronized void init(ProcessingEnvironment processingEnv) {\n      * The entry point for java compiler.\n      */\n     @Override\n-    public boolean process(Set<? extends TypeElement> annos,\n-        RoundEnvironment roundEnv) {\n-        if (!roundEnv.processingOver()) {\n+    public boolean process(Set<? extends TypeElement> annos, RoundEnvironment roundEnv) {\n+        if (active && !roundEnv.processingOver()) {\n             Set<? extends Element> elements = roundEnv.getRootElements();\n             for (Element e : elements) {\n                 process((TypeElement) e);\n@@ -234,8 +230,7 @@ private boolean process(TypeElement e) {\n         annotate(source, originalClass);\n         TypeElement supCls = handler.getPersistentSupertype(e);\n         if (supCls != null) {\n-            String superName = factory.getMetaModelClassName(\n-                    supCls.toString());\n+            String superName = factory.getMetaModelClassName(supCls.toString());\n             source.getTopLevelClass().setSuper(superName);\n         }\n         try {\n@@ -309,12 +304,12 @@ private void comment(SourceCode source) {\n     }\n     \n     /**\n-     * Parse annotation processor option <code>-Asource=n</code> to detect\n+     * Parse annotation processor option <code>-Aopenjpa.source=n</code> to detect\n      * the source version for the generated classes. \n      * n must be a integer. Default or wrong specification returns 6.\n      */\n     private void setSourceVersion() {\n-        String version = processingEnv.getOptions().get(\"source\");\n+        String version = getOptionValue(\"openjpa.source\");\n         if (version != null) {\n             try {\n                 generatedSourceVersion = Integer.parseInt(version);\n@@ -328,7 +323,7 @@ private void setSourceVersion() {\n     }\n     \n     private void setNamingPolicy() {\n-        String policy = processingEnv.getOptions().get(\"naming\");\n+        String policy = getOptionValue(\"openjpa.naming\");\n         if (policy != null) {\n             try {\n                 factory = (MetaDataFactory)Class.forName(policy).newInstance();\n@@ -342,7 +337,7 @@ private void setNamingPolicy() {\n     }\n     \n     private void setHeader() {\n-        String headerOption = processingEnv.getOptions().get(\"header\");\n+        String headerOption = getOptionValue(\"openjpa.header\");\n         if (headerOption == null) {\n             return;\n         }\n@@ -358,146 +353,26 @@ private void setHeader() {\n         }\n     }\n     \n-    private void setFileManager() {\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        fileManager = compiler.getStandardFileManager(null, null, null);\n-        String outDir = processingEnv.getOptions().get(\"out\");\n-        if (outDir != null)\n-           isUserSpecifiedOutputLocation = setSourceOutputDirectory(new File(outDir));\n-    }\n-\n     /**\n      * Creates a file where source code of the given metaClass will be written.\n      * \n      */\n     private PrintWriter createSourceFile(String originalClass, String metaClass, TypeElement e) \n         throws IOException {\n-        if (!isUserSpecifiedOutputLocation) {\n-            setSourceOutputDirectory(OutputPath.getAbsoluteDirectory(processingEnv, e));\n-        }\n-        JavaFileObject javaFile = fileManager.getJavaFileForOutput(StandardLocation.SOURCE_OUTPUT, \n-            metaClass, JavaFileObject.Kind.SOURCE, \n-            null); // do not use sibling hint because of indeterminable behavior across JDK \n-        logger.info(_loc.get(\"mmg-process\", javaFile.toUri()));\n-        OutputStream out = javaFile.openOutputStream();\n-        PrintWriter writer = new PrintWriter(out);\n-        return writer;\n-    }\n-    \n-    /**\n-     * Sets the output directory for generated source files.\n-     * Tries to create the directory structure if does not exist.\n-     * \n-     * @return true if the output has been set successfully.\n-     */\n-    boolean setSourceOutputDirectory(File outDir) {\n-        if (outDir == null)\n-            return false;\n-        if (!outDir.exists()) {\n-            if (!outDir.mkdirs()) {\n-                logger.warn(_loc.get(\"mmg-bad-out\", outDir, StandardLocation.SOURCE_OUTPUT));\n-                return false;\n-            }\n-        }\n-        try {\n-            fileManager.setLocation(StandardLocation.SOURCE_OUTPUT, Collections.singleton(outDir));\n-            return true;\n-        } catch (IOException e) {\n-            logger.warn(_loc.get(\"mmg-bad-out\", outDir, StandardLocation.SOURCE_OUTPUT));\n-            return false;\n-        }\n+        JavaFileObject javaFile = processingEnv.getFiler().createSourceFile(metaClass, e);\n+        logger.info(_loc.get(\"mmg-process\", javaFile.toUri().normalize()));\n+        return new PrintWriter(javaFile.openWriter());\n     }\n     \n     /**\n-     * An utility class to determine the source file corresponding to a {@link TypeElement}.\n-     * The utility uses Sun JDK internal API (com.sun.tools.*) and hence works reflectively\n-     * to avoid compile-time dependency.\n-     *   \n-     * @author Pinaki Poddar\n-     *\n+     * Get the value for the given keys, whoever matches first, in the current available options.\n      */\n-    public static class OutputPath {\n-        private static Class<?> trees = null;\n-        static {\n-            try {\n-                trees = Class.forName(\"com.sun.source.util.Trees\");\n-            } catch (Throwable t) {\n-                \n-            }\n-        }\n-        \n-        /**\n-         * Gets the directory relative to the Java source file corresponding to the TypeElement.\n-         * \n-         * @return null if the com.sun.source.util.* package is not available or the given TypeElement\n-         * does not correspond to a compilation unit associated to a source file.\n-         */\n-        public static File getAbsoluteDirectory(ProcessingEnvironment env, TypeElement e) {\n-            if (trees == null)\n-                return null;\n-            try {\n-                // Trees root = Trees.instance(env);\n-                Object root = trees.getMethod(\"instance\", new Class[]{ProcessingEnvironment.class})\n-                    .invoke(null, env);\n-                \n-                // TreePath path = root.getPath(e);\n-                Object path = root.getClass().getMethod(\"getPath\", new Class[]{Element.class})\n-                    .invoke(root, e);\n-                \n-                // CompilationUnitTree unit = path.getCompilationUnit();\n-                Object unit = path.getClass().getMethod(\"getCompilationUnit\", (Class[])null)\n-                    .invoke(path, (Object[])null);\n-                \n-                // JavaFileObject f = unit.getSourceFile();\n-                JavaFileObject f = (JavaFileObject)unit.getClass().getMethod(\"getSourceFile\", (Class[])null)\n-                    .invoke(unit, (Object[])null);\n-                \n-                URI uri = f.toUri();\n-                File dir = getParentFile(new File(uri.toURL().getPath()), \n-                        packageDepth(e.getQualifiedName().toString()));\n-                return dir;\n-            } catch (Throwable t) {\n-                return null;\n-            }\n-        }\n-        \n-        /**\n-         * Gets the parent of the given file recursively traversing to given number of levels.\n-         */\n-        public static File getParentFile(File f, int n) {\n-            if (n < 0)\n-                return f;\n-            if (n == 0)\n-                return f.getParentFile();\n-            return getParentFile(f.getParentFile(), n-1);\n-        }\n-        \n-        public static int packageDepth(String s) {\n-            String pkg = getPackageName(s);\n-            if (pkg == null)\n-                return 0;\n-            int depth = 1;\n-            int i = 0;\n-            while ((i = pkg.indexOf('.')) != -1) {\n-                depth++;\n-                pkg = pkg.substring(i+1);\n-            }\n-            return depth;\n-        }\n-        \n-        public static String getPackageName(String s) {\n-            if (s == null)\n-                return null;\n-            int i = s.lastIndexOf('.');\n-            return (i == -1) ? null : s.substring(0, i);\n-        }\n-        \n-        public static String getSimpleName(String s) {\n-            if (s == null)\n-                return null;\n-            int i = s.lastIndexOf('.');\n-            return (i == -1) ? s : s.substring(i+1);\n+    private String getOptionValue(String... keys) {\n+        Map<String,String> options = processingEnv.getOptions();\n+        for (String key : keys) {\n+            if (options.containsKey(key))\n+                return options.get(key);\n         }\n+        return null;\n     }\n-\n }"},{"sha":"60e3a2a24ec2a3b045a4d14a1a720dc010be7708","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -34,16 +34,14 @@\n  */\n public class CompileTimeLogger {\n     private static enum Level {TRACE, INFO, WARN, ERROR};\n-    private static Localizer _loc = Localizer.forPackage(\n-            CompileTimeLogger.class);\n+    private static Localizer _loc = Localizer.forPackage(CompileTimeLogger.class);\n     private static Level DEFAULT_LEVEL = Level.WARN;\n     private int logLevel;\n     private Messager messager;\n     \n-    public CompileTimeLogger(ProcessingEnvironment env) {\n+    public CompileTimeLogger(ProcessingEnvironment env, String level) {\n         messager = env.getMessager();\n         \n-        String level = env.getOptions().get(\"log\");\n         if (level == null) {\n             logLevel = DEFAULT_LEVEL.ordinal();\n             return;"},{"sha":"5f7431e514946e6db4b1f353a4e4a693ddb5c11c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -200,6 +200,10 @@ public final BindableType getBindableType() {\n         public final PersistentAttributeType getPersistentAttributeType() {\n             if (!fmd.isDeclaredTypePC())\n                 return super.getPersistentAttributeType();\n+            if (fmd.getValue().isEmbedded() && fmd.getAssociationType() == 0) {\n+                return PersistentAttributeType.EMBEDDED;\n+            }\n+            \n             return fmd.getMappedByMetaData() == null || !fmd.getType().isAssignableFrom(Collection.class)\n                  ? PersistentAttributeType.ONE_TO_ONE\n                  : PersistentAttributeType.ONE_TO_MANY;"},{"sha":"6eeac5d0e32f936318e1c67b2ea321827e027fdc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java","status":"modified","additions":44,"deletions":43,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -30,7 +30,11 @@\n \n /**\n  * Persistent Type according to JPA 2.0.\n- * \n+ * <br>\n+ * JPA 2.0 defines a type system for persistent objects to decorate a core Java type system\n+ * with persistence-relevant properties such as persistent identity, independently persistence\n+ * capable etc. \n+ * <br>\n  * Implemented as a thin adapter to OpenJPA metadata system. Mostly immutable.\n  * \n  * @author Pinaki Poddar\n@@ -62,6 +66,14 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * Basic non-relational types of a persistent attribute such as <code>long</code> or \n+     * <code>java.util.Date</code>.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> represented Java type.\n+     */\n     public static class Basic<X> extends BaseType<X> implements Type<X> {\n         public Basic(Class<X> cls) {\n             super(cls);\n@@ -73,45 +85,12 @@ public PersistenceType getPersistenceType() {\n     }\n \n     /**\n-     *  Instances of the type ManagedType represent entity, mapped \n-     *  superclass, and embeddable types.\n+     * Represents an abstract persistent type that has a persistent identity.\n      *\n-     *  @param <X> The represented type.\n+     * @author Pinaki Poddar\n+     * \n+     * @param <X>\n      */\n-//    public static abstract class Managed<X> extends AbstractManagedType<X> implements\n-//        ManagedType<X> {\n-        /**\n-         * Construct a managed type. The supplied metadata must be resolved i.e.\n-         * all its fields populated. Because this receiver will populate its\n-         * attributes corresponding to the available fields of the metadata.\n-         * \n-         */\n-//        public Managed(ClassMetaData meta, MetamodelImpl featureSelection) {\n-//            super(meta, featureSelection);\n-//        }\n-        \n-         /**\n-         *  Return the bindable type of the represented object.\n-         *  @return bindable type\n-         */ \n-//        public BindableType getBindableType() {\n-//            return BindableType.ENTITY_TYPE;\n-//        }\n-        \n-        /**\n-         * Return the Java type of the represented object.\n-         * If the bindable type of the object is PLURAL_ATTRIBUTE,\n-         * the Java element type is returned. If the bindable type is\n-         * SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the\n-         * represented entity or attribute is returned.\n-         * @return Java type\n-         */\n-//        public Class<X> getBindableJavaType() {\n-//            throw new AbstractMethodError();\n-//        }\n-//\n-//    }\n-\n     public static abstract class Identifiable<X> extends AbstractManagedType<X> \n         implements IdentifiableType<X> {\n \n@@ -147,19 +126,20 @@ public boolean hasIdAttribute() {\n         }\n         \n         /**\n-         *  Whether or not the identifiable type has an id attribute.\n-         *  Returns true for a simple id or embedded id; returns false\n-         *  for an idclass.\n+         *  Whether or not the identifiable type uses an attribute to represents its persistent identity.\n+         *  Returns true for a simple or embedded identifier.\n+         *  Returns false for an classes that use separate identifier class for its persistent identity.\n+         *  \n          *  @return boolean indicating whether or not the identifiable\n-         *          type has a single id attribute\n+         *          type represents its persistent identity via a single identifier attribute.\n          */\n         public boolean hasSingleIdAttribute() {\n             return meta.getPrimaryKeyFields().length == 1;\n         }\n \n         /**\n          *  Return the type that represents the type of the id.\n-         *  @return type of id\n+         *  @return type of identifier\n          */\n         public Type<?> getIdType() {\n             Class<?> idType = hasSingleIdAttribute() \n@@ -168,6 +148,13 @@ public boolean hasSingleIdAttribute() {\n         }\n     }\n \n+    /**\n+     * An embedded, not independently identifiable type.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> the represented Java type. \n+     */\n     public static class Embeddable<X> extends AbstractManagedType<X> \n         implements EmbeddableType<X> {\n         public Embeddable(ClassMetaData meta, MetamodelImpl featureSelection) {\n@@ -179,6 +166,13 @@ public PersistenceType getPersistenceType() {\n         }\n     }\n \n+    /**\n+     * A abstract, independently identifiable persistent type.\n+     *  \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> the represented Java type. \n+     */\n     public static class MappedSuper<X> extends Identifiable<X> implements\n         MappedSuperclassType<X> {\n \n@@ -192,6 +186,13 @@ public PersistenceType getPersistenceType() {\n \n     }\n     \n+    /**\n+     * An entity type that is independently identifiable.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> the represented Java type. \n+     */\n     public static class Entity<X> extends Identifiable<X> \n         implements EntityType<X> {\n "},{"sha":"b1bc10c3ecab71abf396f17bea9d2f982e8b98b6","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -229,4 +229,6 @@ create-emf-depend-error: Failed to create a provider for \"{0}\" because a \\\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query.\n cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  \n-null-detach: Can not detach null entity\n\\ No newline at end of file\n+null-detach: Can not detach null entity\n+override-named-query-lock-mode: Encountered a read lock level less than LockModeType.READ when processing the \\\n+NamedQuery {0} \"{1}\" in class \"{2}\". Setting query lock level to LockModeType.READ."},{"sha":"e47619ad93b217aba4dab410f4ec06308c128841","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":72,"deletions":11,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -1,5 +1,5 @@\n-                          Apache OpenJPA 2.0.0-beta3\n-                          --------------------------\n+                            Apache OpenJPA 2.0.0\n+                            --------------------\n \n Content\n -------\n@@ -19,8 +19,8 @@ Content\n \n Overview\n --------\n-   The Apache OpenJPA community is proud to release a Beta 3 distribution of\n-   OpenJPA 2.0.0. This distribution is based on the final JSR 317 Java \n+   The Apache OpenJPA community is proud to release a 2.0.0 distribution of\n+   OpenJPA. This distribution is based on the final JSR 317 Java \n    Persistence API, Version 2.0 specification and passes the JPA 2.0 TCK,\n    while remaining backwards compatiable with prior releases based on the\n    Java Persistence API (JPA 1.0) part of Java Community Process JSR-220\n@@ -58,7 +58,6 @@ Overview\n    * Metamodel API -\n       ** Provides API to dynamically retrieve metamodel information for a\n          persistence unit\n-      ** Currently limited to persistent state and relationships\n       ** Used with Criteria API to generate and execute type safe queries\n       ** Supports dynamic or static generation of the metamodel\n    * Criteria API -\n@@ -70,15 +69,15 @@ Overview\n      and Metamodel APIs\n    * EntityManager API - updated for new Query and Query Result APIs, Hints,\n      Properties, LockModeType, and Detach\n+   * OSGi - support for the Persistence Unit Service Specification 1.0 in \n+     the OSGi Service Platform Release 4 Enterprise Version 4.2 specifications\n+     has been provided by integration with the Apache Aries JPA module\n    * And many more...\n \n-   This Beta 3 distribution is based upon the contributions provided in\n-   development iterations after the Beta 2, as defined in the JPA 2.0 Roadmap:\n+   This distribution is based upon the contributions provided in all of the\n+   development iterations for 2.0, as defined in the JPA 2.0 Roadmap:\n       http://openjpa.apache.org/jpa-20-roadmap.html\n \n-   The JPA 2.0 Roadmap contains a complete list of implemented features and\n-   feature summaries, including what is on deck for future iterations.\n-\n    Additional information on the OpenJPA project may be found at the project\n    web site:\n       http://openjpa.apache.org\n@@ -128,7 +127,8 @@ Notices\n Prerequisites\n -------------\n    In normal usage, OpenJPA requires Java SE 5 or higher and a relational \n-   database of some sort.\n+   database of some sort.  The metamodel generation and annotation processing\n+   features require Java SE 6 or higher.\n \n \n Documentation\n@@ -163,6 +163,58 @@ Getting Involved\n         * Bugs and other issues can be posted on the project JIRA.\n \n \n+Included Changes in OpenJPA 2.0.0\n+---------------------------------\n+\n+Sub-task\n+--------\n+    * [OPENJPA-1179] - openjpa.jdbc.QuerySQLCache plugin values\n+\n+Bug\n+---\n+    * [OPENJPA-1091] - ReverseMappingTool fails for openjpa-examples/reversemapping sample\n+    * [OPENJPA-1510] - Documentation corrections\n+    * [OPENJPA-1550] - When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.\n+    * [OPENJPA-1559] - DataCacheManager initialization isn't thread safe.\n+    * [OPENJPA-1569] - @Strategy triggers an InvalidStateException for fields which are declared as Java interfaces\n+    * [OPENJPA-1597] - Need Compatibility setting for new OPENJPA-1097 Proxies and DetachedStateField behavior\n+    * [OPENJPA-1599] - Cache mode properties passes in to em.find and lock methods are not transient\n+    * [OPENJPA-1602] - Query with lock mode set to PESSIMISTIC_WRITE does not have for update clause attached to the sql when runs twice\n+    * [OPENJPA-1604] - Setting PessimisticLockManager fails to append \"for update clause\" to the select statement\n+    * [OPENJPA-1605] - ReverseMappingTool (SchemaGenerator) bug\n+    * [OPENJPA-1608] - PESSIMISTIC_WRITE is not working in Informix\n+    * [OPENJPA-1609] - PessimisticLockException instead of LockTimeoutException thrown on DB2V9 for ZOS\n+    * [OPENJPA-1611] - Wrong PersistentAttributeType returned for @Embedded types\n+    * [OPENJPA-1618] - Exception during factory creation due to javax.persistence.transactionType\n+    * [OPENJPA-1625] - Inconsistent creation of StateManagerImpl in BrokerImpl\n+    * [OPENJPA-1630] - NPE in MetaDataRepository when preloading is enabled under heavy stress.\n+    * [OPENJPA-1631] - MetaDataRepository preload doesn't load JAXB meta data\n+\n+Improvement\n+-----------\n+    * [OPENJPA-1382] - make org.apache.openjpa.persistence.meta.AnnotationProcessor6 as service\n+    * [OPENJPA-1545] - Add new Detach processing\n+    * [OPENJPA-1603] - Decouple the QueryCache from the DataCache\n+    * [OPENJPA-1622] - Invoking MetaModel generator\n+    * [OPENJPA-1628] - Output control for generated canonical metamodel source code\n+\n+Task\n+----\n+    * [OPENJPA-1178] - Backwards Compatibility Issues\n+\n+Test\n+----\n+    * [OPENJPA-1336] - Intermittent test failure in org.apache.openjpa.persistence.generationtype.TestGeneratedValues when running on MySQL\n+    * [OPENJPA-1606] - Add JPQL tests for element collection\n+    * [OPENJPA-1614] - Testcase failures in TextException on MSSQL\n+    * [OPENJPA-1616] - Fix TestTimeoutException test failures on MSSQL, MySQL, HSQLDB, Oracle and re-enable for DB2\n+    * [OPENJPA-1619] - Fix intermittent TestTimestampVersion failures on various DBs when running on Windows\n+    * [OPENJPA-1620] - Fix TestJDBCEscapeDate test for MSSQL and HSQLDB\n+    * [OPENJPA-1621] - Fix TestGeneratedValues for DB2\n+    * [OPENJPA-1623] - New tests for query qualified paths\n+    * [OPENJPA-1624] - Fix intermittent datacache timeout failures in TestSJVMCache and CacheTest\n+\n+\n Included Changes in OpenJPA 2.0.0 Beta 3\n ----------------------------------------\n \n@@ -201,8 +253,10 @@ Bug\n     * [OPENJPA-1544] - Remove WebSphere version number from org/apache/ee/localizer.properties\n     * [OPENJPA-1546] - OpenJPA doesn't work as internal JPA inside web applicaion in JBoss AS\n     * [OPENJPA-1547] - NOT IN with MEMBER OF returns syntax error\n+    * [OPENJPA-1550] - When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.\n     * [OPENJPA-1556] - Exception thrown on first use of @Strategy in @Embeddable classes\n     * [OPENJPA-1558] - Many side of a MxO relationship contains null reference if One side is loaded first.\n+    * [OPENJPA-1562] - EntityManager:Refresh on Removed entity does not trigger IllegalArgumentException\n     * [OPENJPA-1565] - QueryTimeOut and LockTimeOut exceptions are not raised correctly\n     * [OPENJPA-1568] - Make createConnectionFactory() in JDBCConfigurationImpl public\n     * [OPENJPA-1570] - Exception using @Strategy in @MappedSuperclass or @Embeddable classes\n@@ -232,6 +286,7 @@ Improvement\n     * [OPENJPA-1549] - StateManagerImpl performance improvement\n     * [OPENJPA-1551] - Allow connectionFactoryName to be specified when creating an EntityManager\n     * [OPENJPA-1552] - Enable EntityManager to perform property QueryImpl creation by its subclass\n+    * [OPENJPA-1557] - Logging configuration is difficult for running tests\n     * [OPENJPA-1561] - Cache Criteria Query\n     * [OPENJPA-1566] - Provide all the cached prepared query strings in QueryStatistics\n     * [OPENJPA-1585] - Additional trace to relate SQL pushdowns with entity action or JPQL query\n@@ -240,6 +295,8 @@ Improvement\n Test\n ----\n     * [OPENJPA-1411] - Include DayTrader test case to OpenJpa\n+    * [OPENJPA-1560] - Additional tests for JDBC date/timestamp literals in JPQL\n+    * [OPENJPA-1579] - Additional test for qualified path in HAVING clause\n     * [OPENJPA-1586] - Additional test single valued path expression which references qualified path in JPQL\n \n \n@@ -314,6 +371,7 @@ Bug\n     * [OPENJPA-1142] - OptimisticLockException thrown on Query.getResultList() when Pessimistic Lock is applied\n     * [OPENJPA-1173] - Update PostgreSQL support for 8.4.x\n     * [OPENJPA-1185] - Subquery overhaul\n+    * [OPENJPA-1189] - Column names do not contain delimiters when obtained from DatabaseMetaData\n     * [OPENJPA-1197] - NativeQueries fail with MySQL\n     * [OPENJPA-1224] - OpenJPA MySQL BigDecimal ignoring Precision/Scale column Annotation when generating tables\n     * [OPENJPA-1263] - TestReaderLob.testUpdateWithNull() fails on MySQL\n@@ -388,6 +446,7 @@ Improvement\n     * [OPENJPA-839] - change pom.xml to publish sources as well.\n     * [OPENJPA-1085] - Add toString() method to PCState classes\n     * [OPENJPA-1172] - Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n+    * [OPENJPA-1236] - Finish support of delimiters other than double-quotes\n     * [OPENJPA-1258] - make warning message more friendly when other persistence provider configured by application\n     * [OPENJPA-1356] - Use maven-enforcer-plugin to verify proper Java and Maven levels\n     * [OPENJPA-1363] - Upgrade to latest commons-pool maintenance release\n@@ -557,7 +616,9 @@ Bug\n     * [OPENJPA-1302] - Ehcache product derivation isn't detected when running in WebSphere\n     * [OPENJPA-1305] - WriteBehind 'callback; broker should always be unmanaged\n     * [OPENJPA-1333] - Oracle driver returns incorrect update count on batched insert\n+    * [OPENJPA-1335] - Alternating manual delim id tests fail\n     * [OPENJPA-1338] - Allow comparison for VALUE(e) that maps to basic type\n+    * [OPENJPA-1371] - Insert is called instead of Update when merge() with derived Identity\n \n Improvement\n -----------"},{"sha":"6f34ac8cf090e596d5f8a93242a58952238af23d","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":120,"deletions":13,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -1,7 +1,7 @@\n <html>\n-<title>Release Notes for Apache OpenJPA 2.0.0-beta3</title>\n+<title>Release Notes for Apache OpenJPA 2.0.0</title>\n <body>\n-<h1>Release Notes for Apache OpenJPA 2.0.0-beta3</h1>\n+<h1>Release Notes for Apache OpenJPA 2.0.0</h1>\n <p>\n <ul>\n   <li><a href=\"#Overview\">Overview</a></li>\n@@ -12,6 +12,7 @@ <h1>Release Notes for Apache OpenJPA 2.0.0-beta3</h1>\n   <li><a href=\"#Notice\">Notice</a></li>\n   <li><a href=\"#ReleaseNotes\">Release Notes</a></li>\n   <ul>\n+    <li><a href=\"#200\">2.0.0</a></li>\n     <li><a href=\"#200beta3\">2.0.0 Beta 3</a></li>\n     <li><a href=\"#200beta2\">2.0.0 Beta 2</a></li>\n     <li><a href=\"#200beta\">2.0.0 Beta</a></li>\n@@ -27,8 +28,8 @@ <h1>Release Notes for Apache OpenJPA 2.0.0-beta3</h1>\n <h2><a name=\"Overview\"></a>Overview</h2>\n \n <P>\n-   The Apache OpenJPA community is proud to release a Beta 3 distribution of\n-   OpenJPA 2.0.0. This distribution is based on the final JSR 317 Java\n+   The Apache OpenJPA community is proud to release a 2.0.0 distribution of\n+   OpenJPA. This distribution is based on the final JSR 317 Java\n    Persistence API, Version 2.0 specification and passes the JPA 2.0 TCK,\n    while remaining backwards compatiable with prior releases based on the\n    Java Persistence API (JPA 1.0) part of Java Community Process JSR-220\n@@ -108,9 +109,6 @@ <h2><a name=\"Overview\"></a>Overview</h2>\n          Provides API to dynamically retrieve metamodel information for a\n          persistence unit\n      </li>\n-     <li>\n-         Currently limited to persistent state and relationships\n-     </li>\n      <li>\n          Used with Criteria API to generate and execute type safe queries\n      </li>\n@@ -140,24 +138,28 @@ <h2><a name=\"Overview\"></a>Overview</h2>\n      EntityManager API - updated for new Query and Query Result APIs, Hints,\n      Properties, LockModeType, and Detach\n </li>\n+<li>\n+     OSGi - support for the Persistence Unit Service Specification 1.0 in \n+     the OSGi Service Platform Release 4 Enterprise Version 4.2 specifications\n+     has been provided by integration with the Apache Aries JPA module\n+</li>\n <li>\n      And many more...\n </li>\n </ul>\n </p>\n \n-<p>This Beta 3 distribution is based upon the contributions provided in\n-development iterations after the Beta 2, as defined in the JPA 2.0 Roadmap at:\n+<p>This distribution is based upon the contributions provided in all of the\n+development iterations for 2.0, as defined in the JPA 2.0 Roadmap at:\n <a href=\"http://openjpa.apache.org/jpa-20-roadmap.html\">http://openjpa.apache.org/jpa-20-roadmap.html</a></p>\n \n-<p>The JPA 2.0 Roadmap contains a complete list of implemented features and\n-feature summaries, including what is on deck for future iterations.</p>\n-\n <p>Additional information on the OpenJPA project may be found at the project web site: <a href=\"http://openjpa.apache.org\">http://openjpa.apache.org</a></p>\n \n <h2><a name=\"Prerequisites\"></a>Prerequisites</h2>\n <P>In normal usage, OpenJPA requires Java 5 or higher and a relational \n-database of some sort.</p>\n+database of some sort.  The metamodel generation and annotation processing\n+features require Java SE 6 or higher.\n+</p>\n \n <h2><a name=\"Documentation\"></a>Documentation</h2>\n <p>If you have questions about OpenJPA, a good source of information is the \n@@ -228,6 +230,95 @@ <h2><a name=\"Notice\"></a>Notice</h2>\n <hr>\n <h2><a name=\"ReleaseNotes\">Release Notes</h2>\n \n+<hr>\n+<h3><a name=\"200\">OpenJPA 2.0.0</h3>\n+<h4>Sub-task</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1179'>OPENJPA-1179</a>] -         openjpa.jdbc.QuerySQLCache plugin values\n+</li>\n+</ul>\n+\n+<h4>Bug</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1091'>OPENJPA-1091</a>] -         ReverseMappingTool fails for openjpa-examples/reversemapping sample\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1510'>OPENJPA-1510</a>] -         Documentation corrections\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1550'>OPENJPA-1550</a>] -         When batchLimit=-1 or &gt;1 and an exception is caused, the params and failedObject are missing from the resultant exception.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1559'>OPENJPA-1559</a>] -         DataCacheManager initialization isn't thread safe.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1569'>OPENJPA-1569</a>] -         @Strategy triggers an InvalidStateException for fields which are declared as Java interfaces\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1597'>OPENJPA-1597</a>] -         Need Compatibility setting for new OPENJPA-1097 Proxies and DetachedStateField behavior\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1599'>OPENJPA-1599</a>] -         Cache mode properties passes in to em.find and lock methods are not transient\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1602'>OPENJPA-1602</a>] -         Query with lock mode set to PESSIMISTIC_WRITE does not have for update clause attached to the sql when runs twice\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1604'>OPENJPA-1604</a>] -         Setting PessimisticLockManager fails to append &quot;for update clause&quot; to the select statement\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1605'>OPENJPA-1605</a>] -         ReverseMappingTool (SchemaGenerator) bug\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1608'>OPENJPA-1608</a>] -         PESSIMISTIC_WRITE is not working in Informix\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1609'>OPENJPA-1609</a>] -         PessimisticLockException instead of LockTimeoutException thrown on DB2V9 for ZOS\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1611'>OPENJPA-1611</a>] -         Wrong PersistentAttributeType returned for @Embedded types\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1618'>OPENJPA-1618</a>] -         Exception during factory creation due to javax.persistence.transactionType\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1625'>OPENJPA-1625</a>] -         Inconsistent creation of StateManagerImpl in BrokerImpl\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1630'>OPENJPA-1630</a>] -         NPE in MetaDataRepository when preloading is enabled under heavy stress.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1631'>OPENJPA-1631</a>] -         MetaDataRepository preload doesn't load JAXB meta data\n+</li>\n+</ul>\n+\n+<h4>Improvement</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1382'>OPENJPA-1382</a>] -         make org.apache.openjpa.persistence.meta.AnnotationProcessor6 as service\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1545'>OPENJPA-1545</a>] -         Add new Detach processing\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1603'>OPENJPA-1603</a>] -         Decouple the QueryCache from the DataCache\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1622'>OPENJPA-1622</a>] -         Invoking MetaModel generator\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1628'>OPENJPA-1628</a>] -         Output control for generated canonical metamodel source code\n+</li>\n+</ul>\n+\n+<h4>Task</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1178'>OPENJPA-1178</a>] -         Backwards Compatibility Issues\n+</li>\n+</ul>\n+\n+<h4>Test</h4>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1336'>OPENJPA-1336</a>] -         Intermittent test failure in org.apache.openjpa.persistence.generationtype.TestGeneratedValues when running on MySQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1606'>OPENJPA-1606</a>] -         Add JPQL tests for element collection\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1614'>OPENJPA-1614</a>] -         Testcase failures in TextException on MSSQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1616'>OPENJPA-1616</a>] -         Fix TestTimeoutException test failures on MSSQL and MySQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1619'>OPENJPA-1619</a>] -         Fix TestTimestampVersion on various databases\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1620'>OPENJPA-1620</a>] -         Fix TestJDBCEscapeDate test for MSSQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1621'>OPENJPA-1621</a>] -         Fix TestGeneratedValues for DB2\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1623'>OPENJPA-1623</a>] -         New tests for query qualified paths\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1624'>OPENJPA-1624</a>] -         Fix intermittent datacache timeout failures in TestSJVMCache and CacheTest\n+</li>\n+</ul>\n+\n+\n <hr>\n <h3><a name=\"200beta3\">OpenJPA 2.0.0-beta3</h3>\n <h4>Sub-task</h4>\n@@ -296,10 +387,14 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1547'>OPENJPA-1547</a>] -         NOT IN with MEMBER OF returns syntax error\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1550'>OPENJPA-1550</a>] -         When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1556'>OPENJPA-1556</a>] -         Exception thrown on first use of @Strategy in @Embeddable classes\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1558'>OPENJPA-1558</a>] -         Many side of a MxO relationship contains null reference if One side is loaded first.\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1562'>OPENJPA-1562</a>] -         EntityManager:Refresh on Removed entity does not trigger IllegalArgumentException\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1565'>OPENJPA-1565</a>] -         QueryTimeOut and LockTimeOut exceptions are not raised correctly\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1568'>OPENJPA-1568</a>] -         Make createConnectionFactory() in JDBCConfigurationImpl public\n@@ -356,6 +451,8 @@ <h4>Improvement</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1552'>OPENJPA-1552</a>] -         Enable EntityManager to perform property QueryImpl creation by its subclass\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1557'>OPENJPA-1557</a>] -         Logging configuration is difficult for running tests\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1561'>OPENJPA-1561</a>] -         Cache Criteria Query\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1566'>OPENJPA-1566</a>] -         Provide all the cached prepared query strings in QueryStatistics\n@@ -370,6 +467,10 @@ <h4>Test</h4>\n <ul>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1411'>OPENJPA-1411</a>] -         Include DayTrader test case to OpenJpa\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1560'>OPENJPA-1560</a>] -         Additional tests for JDBC date/timestamp literals in JPQL\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1579'>OPENJPA-1579</a>] -         Additional test for qualified path in HAVING clause\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1586'>OPENJPA-1586</a>] -         Additional test single valued path expression which references qualified path in JPQL\n </li>\n </ul>\n@@ -498,6 +599,8 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1185'>OPENJPA-1185</a>] -         Subquery overhaul\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1189'>OPENJPA-1189</a>] -         Column names do not contain delimiters when obtained from DatabaseMetaData\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1197'>OPENJPA-1197</a>] -         NativeQueries fail with MySQL \n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1224'>OPENJPA-1224</a>] -         OpenJPA MySQL BigDecimal ignoring Precision/Scale column Annotation when generating tables \n@@ -636,6 +739,8 @@ <h4>Improvement</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1172'>OPENJPA-1172</a>] -         Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1236'>OPENJPA-1236</a>] -         Finish support of delimiters other than double-quotes\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1258'>OPENJPA-1258</a>] -         make warning message more friendly when other persistence provider configured by application\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1356'>OPENJPA-1356</a>] -         Use maven-enforcer-plugin to verify proper Java and Maven levels\n@@ -848,7 +953,9 @@ <h4>Bug</h4>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1302'>OPENJPA-1302</a>] - Ehcache product derivation isn't detected when running in WebSphere</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1305'>OPENJPA-1305</a>] - WriteBehind 'callback; broker should always be unmanaged</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1333'>OPENJPA-1333</a>] - Oracle driver returns incorrect update count on batched insert</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1335'>OPENJPA-1335</a>] - Alternating manual delim id tests fail</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1338'>OPENJPA-1338</a>] - Allow comparison for VALUE(e) that maps to basic type</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1371'>OPENJPA-1371</a>] - Insert is called instead of Update when merge() with derived Identity</li>\n </ul>\n \n <h4>Improvement</h4>"},{"sha":"cdd4f8b06475559300aa95e729d0af4406bc871f","filename":"openjpa-project/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -41,7 +41,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <properties>"},{"sha":"437ce2b3cbd7e680194671084b07acb89c67d44b","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -167,31 +167,32 @@ List result = query.getResultList();\n Annotation processing tool generates source code for a metamodel class given \n the annotated source code of persistent entity. \n This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n-libraries are specified in the compiler <code>-processorpath</code> option.\n+libraries are specified in the compiler <code>-classpath</code> option <emphasis>and</emphasis>\n+Annotation processor option <code>-Aopenjpa.metamodel=true</code> is specified.\n     <programlisting>\n- $ javac -processor org.apache.openjpa.persistence.meta.AnnotationProcessor6 -processorpath path/to/openjpa-all.jar mypackage/MyEntity.java\n+ $ javac -classpath path/to/openjpa-all.jar -Aopenjpa.metamodel=true mypackage/MyEntity.java\n     </programlisting>\n will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n       </para>\n       \n       <para>\n The Annotation Processor recognizes the following options specified in the command-line with <code>-A</code> \n-(none of them are mandatory):\n+(none of them are mandatory).\n     <itemizedlist>\n         <listitem>\n \t\t\t<para>\n-              -Alog=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n+              -Aopenjpa.log=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n             </para>\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-             -Asource=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n+             -Aopenjpa.source=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n              version of the generated code. Default is <code>6</code>.\n              </para>\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-               -Anaming=class name : fully-qualified name of a class implementing \n+               -Aopenjpa.naming=class name : fully-qualified name of a class implementing \n                <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n@@ -200,7 +201,7 @@ the name of a meta-class given the name of the original persistent Java entity c\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-               -Aheader=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n+               -Aopenjpa.header=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n                Recognizes special value <code>ASL</code> for Apache Source License header as comment. \n                By default, adds a OpenJPA proprietary text as comment block.\n              </para>"},{"sha":"52debcd1bb557dad1474b9cc4e2cef9368622da9","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -163,7 +163,7 @@\n                 <title>\n                     Serialization of Entities\n                 </title>\n-                <!-- See OPENJPA-1097 for details. -->\n+                <!-- See OPENJPA-1097 and OPENJPA-1597 for details. -->\n                 <para>\n                     In 1.x.x releases of OpenJPA, when an entity was serialized\n                     after calling EntityManager.find(), detach() or detachAll()\n@@ -173,7 +173,17 @@\n                     proxy classes were not removed.\n                 </para>\n                 <para>\n-                    Starting with OpenJPA 1.3 and 2.0, this behavior has been\n+                    This has two side-effects:\n+                    when entities are remoted across JVM boundaries (RPC)\n+                    or deserialized the OpenJPA runtime must be available\n+                    on the classpath (both client and server containers);\n+                    when entities are deserialized the OpenJPA runtime must\n+                    be the exact same revision as used to serialize the\n+                    entities due to the $proxy classes using dynamically\n+                    generated serialVersionUID values.\n+                </para>\n+                <para>\n+                    Starting with OpenJPA 2.0, this behavior has been\n                     modified, so that by default all proxies will be removed\n                     during serialization.  See \n                     <xref linkend=\"ref_guide_pc_scos_proxy_serial\"/> \n@@ -183,6 +193,32 @@\n                     for more details on how to override the default\n                     <literal>DetachedStateField</literal> setting.\n                 </para>\n+                <para>\n+                    Applications that use a 1.0 persistence.xml will\n+                    automatically maintain the old behavior.  It is\n+                    possible for a version 2.0 application to revert back to\n+                    the prior 1.x.x behavior by setting the following\n+                    openjpa.Compatibility property as follows:\n+                    <simplelist>\n+                        <member>IgnoreDetachedStateFieldForProxySerialization=true</member>\n+                    </simplelist>\n+                </para>\n+            </section>\n+            <section id=\"QuerySQLCache\">\n+                <title>\n+                    openjpa.jdbc.QuerySQLCache\n+                </title>\n+                <!-- See OPENJPA-1179 for details. -->\n+                <para>\n+                    In prior 1.x.x releases, the openjpa.jdbc.QuerySQLCache\n+                    configuration property for Prepared SQL Cache accepted\n+                    value <literal>all</literal> to never drop items from the\n+                    cache, but this option is no longer supported and will cause\n+                    a PersistenceException with a root cause of a ParseException\n+                    to be thrown.  See \n+                    <xref linkend=\"ref_guide_cache_querysql\"/>\n+                    for details on the available configuration values.\n+                </para>\n             </section>\n         </section>\n         <section id=\"Disabling AutoOff Collection Tracking\">"},{"sha":"5ebd9de58013fa7d80a97c917ef63944cc31d471","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -1166,6 +1166,50 @@ property accepts a plugin string (see <xref linkend=\"ref_guide_conf_plugins\"/>)\n with value of <literal>true</literal> or <literal>false</literal>. The default\n is <literal>true</literal>. \n </para>\n+        <table>\n+            <title>\n+                Pre-defined aliases\n+            </title>\n+            <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n+                <colspec colname=\"alias\"/>\n+                <colspec colname=\"value\"/>\n+                <colspec colname=\"notes\"/>\n+                <thead>\n+                    <row>\n+                        <entry colname=\"alias\">Alias</entry>\n+                        <entry colname=\"value\">Value</entry>\n+                        <entry colname=\"notes\">Notes</entry>\n+                    </row>\n+                </thead>\n+                <tbody>\n+                    <row>\n+                        <entry colname=\"alias\">\n+<literal>true</literal>\n+                        </entry>\n+                        <entry colname=\"value\">\n+<literal>org.apache.openjpa.util.CacheMap</literal>\n+                        </entry>\n+                        <entry colname=\"notes\">\n+The default option.  Uses a\n+<ulink url=\"../javadoc/org/apache/openjpa/util/CacheMap.html\">\n+<literal>CacheMap</literal></ulink> to store SQL string.\n+<literal>CacheMap</literal> maintains a fixed number of cache entries, and an\n+optional soft reference map for entries that are moved out of the LRU space.\n+So, for applications that have a monotonically increasing number of distinct\n+queries, this option can be used to ensure that a fixed amount of memory is\n+used by the cache.\n+                        </entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"alias\"><literal>false</literal></entry>\n+                        <entry colname=\"value\"><emphasis>none</emphasis></entry>\n+                        <entry colname=\"notes\">\n+Disables the SQL cache.\n+                        </entry>\n+                    </row>\n+                </tbody>\n+            </tgroup>\n+        </table>\n <para>\n Following salient points to be noted regarding usage of Prepared Query Cache.\n <itemizedlist>"},{"sha":"9d360a51efff1f383ac6582446449fb4c0856a37","filename":"openjpa-slice/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -27,7 +27,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <groupId>org.apache.openjpa</groupId>"},{"sha":"b2810454970e8de333a7237a9ba50a7c332095f9","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"0456e1b562f65b68c26f6d7e8a04d1d0b0570460","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -283,4 +283,8 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n         }\n         return new ListResultObjectProvider(pcs);\n     }\n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        // XMLStoreManager does not cache oids. \n+        return false;\n+    }\n }"},{"sha":"8c8dcdb53c005e1ee2e2dc99c9a5660fda489b04","filename":"openjpa/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>2.0.0-beta3</version>\n+        <version>2.0.0</version>\n     </parent>\n \n     <build>"},{"sha":"8b2218d4cbed31ff337bfe46280ac0c1361fe98c","filename":"openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1 @@\n+org.apache.openjpa.persistence.meta.AnnotationProcessor6"},{"sha":"9a1dbf8714a63b80dd7296f5167e12c9a1b46639","filename":"pom.xml","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -38,7 +38,7 @@\n         Changing this version needs to also be done in all children poms\n         See: http://jira.codehaus.org/browse/MNG-624\n     -->\n-    <version>2.0.0-beta3</version>\n+    <version>2.0.0</version>\n \n     <properties>\n         <openjpa.version>${pom.version}</openjpa.version>\n@@ -134,9 +134,9 @@\n     </distributionManagement>\n \n     <scm>\n-        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta3</connection>\n-        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta3</developerConnection>\n-        <url>http://svn.apache.org/repos/asf/openjpa/tags/2.0.0-beta3</url>\n+        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/tags/2.0.0</connection>\n+        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/tags/2.0.0</developerConnection>\n+        <url>http://svn.apache.org/repos/asf/openjpa/tags/2.0.0</url>\n     </scm>\n \n     <modules>\n@@ -274,6 +274,7 @@\n                                         javax.persistence.Persistence\n                                     -->\n                                     <exclude>**/javax.persistence.spi.PersistenceProvider</exclude>\n+                                    <exclude>**/javax.annotation.processing.Processor</exclude>\n \n                                     <!--\n                                         comments are usupported by our rsrc parser\n@@ -441,6 +442,7 @@\n                                     javax.persistence.Persistence\n                                 -->\n                                 <exclude>**/javax.persistence.spi.PersistenceProvider</exclude>\n+                                <exclude>**/javax.annotation.processing.Processor</exclude>\n \n                                 <!--\n                                     comments are usupported by our rsrc parser\n@@ -854,6 +856,7 @@\n                                 javax.persistence.Persistence\n                             -->\n                             <exclude>**/javax.persistence.spi.PersistenceProvider</exclude>\n+                            <exclude>**/javax.annotation.processing.Processor</exclude>\n \n                             <!--\n                                 comments are usupported by our rsrc parser"},{"sha":"5e265fecc8efb93aba4b259bcdcc393e0eefe093","filename":"scripts/mmg.bat","status":"modified","additions":22,"deletions":11,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/scripts/mmg.bat","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/scripts/mmg.bat","contents_url":"https://api.github.com/repos/apache/openjpa/contents/scripts/mmg.bat?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -21,34 +21,45 @@\n @rem Example Batch script to generate canonical meta-featureSelection classes\n @rem\n @rem Usage\n-@rem   $ mmg.bat <options.file> <class.list>\n+@rem   $ mmg.bat <class.list>\n @rem \n @rem The canonical meta-featureSelection classes can be generated during compilation of\n @rem domain classes. This batch file compiles a set of classes (X.java) listed \n-@rem in <class.list> file. The compiler is invoked with an annotation\n-@rem processor which generates a meta-featureSelection class X_.java for each X.java. \n-@rem The options for annotation processor is specified in <options.file>.\n+@rem in <class.list> file. The compiler discoveres the annotation\n+@rem processor if openjpa classes are in classpath. The discovered annotation\n+@rem processor, however, is active only if -Aopenjpa.metamodel=true is set.  \n @rem \n @rem See also \n-@rem    mmg.options       : The options to Javac compiler \n @rem    domain-class.list : The domain classes to be compiled\n @rem ---------------------------------------------------------------------------\n @echo off\n setlocal\n-set JAVA_HOME=c:\\java\\jdk1.6.0_10\n set JAVAC=%JAVA_HOME%\\bin\\javac\n \n+@rem ---------------------------------------------------------------------------\n+@rem Compiler classpath shown for a typical OpenJPA development environment in Windows. \n+@rem The essential aspect is openjpa libraries must be in the compiler's classpath.\n set M_REPO=\"C:\\Documents and Settings\\Administrator\\.m2\\repository\"\n set SPEC=geronimo-jpa_2.0_spec\n set VERSION=1.0-EA9-SNAPSHOT\n set JPA_LIB=%M_REPO%\\org\\apache\\geronimo\\specs\\%SPEC%\\%VERSION%\\%SPEC%-%VERSION%.jar\n \n set CLASSPATH=%JPA_LIB%\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-lib\\target\\classes\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-persistence\\src\\main\\resources\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-persistence\\target\\classes\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-kernel\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa\\src\\main\\resources\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-persistence\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-kernel\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-lib\\target\\classes\n+\n+@rem ---------------------------------------------------------------------------\n+echo Using Java Compiler %JAVAC%\n+%JAVAC% -version\n+\n+@rem ---------------------------------------------------------------------------\n+@rem Root directory for of the generated source files. Specified as -s option \n+set GEN_DIR=../openjpa-persistence-jdbc/src/test/java\n \n-%JAVAC% -cp %CLASSPATH% @%1 @%2\n+@rem Only one option is shown for logging. Other available options are documented in\n+@rem OpenJPA User Manual and JavaDoc\n+%JAVAC% -cp %CLASSPATH% -s %GEN_DIR% -Aopenjpa.metamodel=true -Aopenjpa.log=TRACE @%1\n \n endlocal"},{"sha":"558f652f8dd8cd8aca0b322e74a79d069bc223f5","filename":"scripts/mmg.options","status":"removed","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/78020af127749a051ef78ae68aa18a5a7eebada6/scripts/mmg.options","raw_url":"https://github.com/apache/openjpa/raw/78020af127749a051ef78ae68aa18a5a7eebada6/scripts/mmg.options","contents_url":"https://api.github.com/repos/apache/openjpa/contents/scripts/mmg.options?ref=78020af127749a051ef78ae68aa18a5a7eebada6","patch":"@@ -1,4 +0,0 @@\n--processor org.apache.openjpa.persistence.meta.AnnotationProcessor6\r\n--Alog=TRACE\r\n--Aout=..\\openjpa-persistence-jdbc\\src\\test\\java\\\r\n--Asource=5\r"}]}

