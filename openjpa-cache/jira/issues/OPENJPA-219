{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12367409","self":"https://issues.apache.org/jira/rest/api/2/issue/12367409","key":"OPENJPA-219","fields":{"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312341","id":"12312341","description":"","name":"1.0.0","archived":false,"released":true,"releaseDate":"2007-08-28"}],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12312320":null,"customfield_12310420":"160550","customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312343","id":"12312343","description":"","name":"0.9.0","archived":true,"released":true,"releaseDate":"2006-08-26"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312342","id":"12312342","description":"","name":"0.9.6","archived":true,"released":true,"releaseDate":"2006-11-29"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312340","id":"12312340","description":"","name":"0.9.7","archived":true,"released":true,"releaseDate":"2007-04-27"}],"customfield_12311120":null,"customfield_12313826":null,"customfield_12312339":null,"issuelinks":[],"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12311302","id":"12311302","name":"kernel","description":"Kernel"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"202546","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-219/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3042cad1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@199c0a44[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@165128d3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6fe6de77[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f12a98a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@641819ac[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b10b24c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@22dcce3f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78587d17[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5c29dec9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@225595d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@66bc0a91[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310351","id":"12310351","key":"OPENJPA","name":"OpenJPA","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310351&avatarId=10043","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310351&avatarId=10043","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310351&avatarId=10043","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310351&avatarId=10043"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10252","id":"10252","description":"","name":"OpenJPA"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2007-04-24T23:38:07.283+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-219/watchers","watchCount":1,"isWatching":false},"created":"2007-04-17T20:31:32.725+0000","updated":"2010-03-09T18:32:34.164+0000","timeoriginalestimate":null,"description":"In a variety of situations, OpenJPA searches class hierarchies for fields. These searches invoke Class.getDeclaredField() in order to find non-public fields. This method throws an exception when it fails to find the specified field, and the exception creation is, as ever, slow.\n\nIt would be useful to create a static (and thus per-classloader) Map<WeakReference<Class>,Collection<String>> of fields known not to be available in a given class.\n\nIt may also be beneficial to maintain a cache of which fields *are* present in a given class, but this issue is being filed as a result of a demonstrated performance hit during deployment due to the lack of a negative cache. If we obtain quantitative data indicating that a positive cache would be useful, we might want to implement such a thing at that time.\n\nTrace 3 (2115 occurances): [excepti][00090] java/lang/NoSuchFieldException: domainName\n     at java/lang/Class.getDeclaredField(Ljava/lang/String;I)Ljava/lang/reflect/Field;(Unknown Source)\n     at org/apache/openjpa/enhance/Reflection.findField(Ljava/lang/Class;Ljava/lang/String;Z)Ljava/lang/reflect/Field;(Reflection.java:101)\n     at org/apache/openjpa/util/ApplicationIds.toPKValues(Ljava/lang/Object;Lorg/apache/openjpa/meta/ClassMetaData;)[Ljava/lang/Object;\n(ApplicationIds.java:89)\n\n","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12355723","id":"12355723","filename":"OPENJPA-219.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-18T00:29:33.905+0000","size":4295,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12355723/OPENJPA-219.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12356183","id":"12356183","filename":"OPENJPA-219-NoLeak.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-24T21:06:48.060+0000","size":2825,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12356183/OPENJPA-219-NoLeak.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12356186","id":"12356186","filename":"openJPABenchmark.tar.gz","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-24T22:19:13.869+0000","size":29438,"mimeType":"application/x-gzip","content":"https://issues.apache.org/jira/secure/attachment/12356186/openJPABenchmark.tar.gz"}],"customfield_12312340":null,"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12310041":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"Reflection: negative caching would be beneficial in redeployment scenarios","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12489536","id":"12489536","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"Note that we invoke Class.getDeclaredField() (and Class.getDeclaredMethod()) in a number of places. We should take care to replace all the uses of that method with our optimized version.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-17T20:37:45.083+0000","updated":"2007-04-17T20:37:45.083+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12489556","id":"12489556","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"I think that this patch should fix the issue, but haven't tested it yet. I only replaced the getDeclaredField() cases that were iterating through superclasses.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-17T21:56:53.627+0000","updated":"2007-04-17T21:56:53.627+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12489578","id":"12489578","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"New version of patch that uses iterated class instead of method argument.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-18T00:29:34.094+0000","updated":"2007-04-18T00:29:34.094+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491038","id":"12491038","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"body":"If we're going to cache, I don't see why we wouldn't cache the declared fields/methods rather than the nonexistent ones.  It would be a simple matter of keeping a Class->Set cache, where the Set is the names of the fields/methods returned by Class.getDeclaredFields/Methods().  Then we'd have both a positive (set.contains(x)) and negative (!set.contains(x)) cache.\n\nI'd also like to see some explicit control over whether requests to find a field/method cause cache additions.  It might be that we always want caching now, but it's such a general class that I can imagine naïvely using the Reflection class's helper methods on one-off random field/method requests in the future without remembering the memory consequences.  If all use results in caching, that could be bad.  So I'd like us to either add separate caching methods or a boolean parameter to the existing methods.  And either way, we need to revisit our current use of Reflection to decide which version to use in the current code.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-23T20:00:37.073+0000","updated":"2007-04-23T20:00:37.073+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491077","id":"12491077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"body":"I developed a patch version that cached both \"success\" and \"failure\" cases - here are some of the performance numbers I generated:\n\nVM\tImplementation\tBenchmark Rate (ms)\nSun\t1 - Original\t333\nSun\t2 - Cache v1\t83\nSun\t3 - Cache v2\t40\nJRockit\t1 - Original\t176\nJRockit\t2 - Cache v1\t72\nJRockit\t3 - Cache v2\t22\n\nWhere \n\nOriginal : recent svn version\nCache V1: patch above plus a couple of minor tweaks\nCache V2: caches both success and failure calls thereby minimizing calls to Reflection API.\n\nAdding a boolean that says \"use cache\" or not would be simple.\n\nAnyway let me add that I/we feel that permanently caching Class objects would create memory leak problems in the case where a ClassLoader were to be thrown away.  Holding the class Object in a hash will keep the ClassLoader tree from being garbage collected ; we see this anti-pattern frequently, it is pathalogical, and can eventually lead to OOME for operations that recycle class loaders.  An example would be repeatedly deploying the same application to an application server, such as done during iterative development of WebApps/EnterpriseApps.  So I/we believe to be critical to create a mechanism whereby these Class object were not held in a static context.  If this code were associated with an object then when the object was GC-ed the Class references would be eliminated therey by allowing the class loader to be GC-ed.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-23T21:49:26.770+0000","updated":"2007-04-23T21:49:26.770+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491078","id":"12491078","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"body":"I will add the \"Cache v2\" version here shortly.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-23T21:59:42.304+0000","updated":"2007-04-23T21:59:42.304+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491104","id":"12491104","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"I agree about the mem leak problem in the patch that I created; hence my comments in the original post about using weak references. There are a number of ways that you could solve this caching problem, such as making all / part of Reflection non-static and setting up per-Configuration caches, or using weak references in the cache, or even (and probably least attractively) creating undeploy APIs.\n\nAbe said: \n> If we're going to cache, I don't see why we wouldn't cache the declared \n> fields/methods rather than the nonexistent ones. It would be a simple\n> matter of keeping a Class->Set cache, where the Set is the names of \n> the fields/methods returned by Class.getDeclaredFields/Methods(). \n> Then we'd have both a positive (set.contains(x)) and negative \n> (!set.contains(x)) cache.\n\nAs I mentioned in the original description, the bug here is that negative lookups are slow because of the exception creation. I see no reason to add extra caching if we don't know if we need it, although Bret's numbers potentially indicate that there is a benefit to positive caching. I have no problem with having a positive cache, but I think that we should only include it if it's going to help, since otherwise it'll just be one more thing contributing to memory consumption.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-24T00:23:03.258+0000","updated":"2007-04-24T00:23:03.258+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491310","id":"12491310","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"body":"1. Yes, clearly we'd use our org.apache.openjpa.lib.util.concurrent. ConcurrentReferenceHashMap with weak keys to hold the Classes.\n\n2. We have no evidence that a positive cache would consume any more memory than a negative cache in this case.  A positive cache's entry size for a given class is limited by the number of fields/methods in that class.  A negative cache's entry size is limited only by how many nonexistent field/method names we look for.  The negative cache will probably be smaller in this case except in deep inheritance hierarchies because I don't think we look for field or method names outside the inheritance hierarchy, but (a) I'm not sure of that and (b) there's no guarantee that will always be the case.\n\n3. You know, another way to approach this would be not to cache at all, and just iterate over getDeclaredFields/Methods() looking for a match rather than using the singular getDeclaredField/Method() that throws an exception.  If that gives decent performance, we wouldn't have to worry about the memory consumption and complication of caching.  Bret, do you think you could try that out and see how it does?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-24T14:54:57.990+0000","updated":"2007-04-24T14:54:57.990+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491316","id":"12491316","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"> another way to approach this would be not to cache at all,\n> and just iterate over getDeclaredFields/Methods() looking for a match\n\nGood point. That would certainly be a better approach. It looks like Class.getDeclaredFields() will be a bit slower, since more memory copying happens (the array is copied before being returned -- bummer that those APIs don't use collections), but that might not be noticeable in the benchmark.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-24T15:17:38.513+0000","updated":"2007-04-24T15:17:38.513+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491453","id":"12491453","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"body":"Includes a non-caching performance enhancement for Reflection.findField()\n\nOther implementations held on to references to class objects in static collections.   If the class loader which created this Class went away (like an application classloader during redeployment), this reference would prevent the ClassLoader object and associated Class objects from being garbage collected, which would have led to a memory leak.\n\nThis version is about 3X faster than the original for JRockit, and about 5X faster for HotSpot.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-24T21:06:48.192+0000","updated":"2007-04-24T21:06:48.192+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491458","id":"12491458","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"How does this compare to the leaky-patch version?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-04-24T21:16:29.656+0000","updated":"2007-04-24T21:16:29.656+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491470","id":"12491470","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"body":"The no-leak version is \"cache v3\" although that's a misnomer ; there's no cache involved.\n\nVM - Version ms\n\nSun - Original 333\nSun - Cache v1 83\nSun - Cache v2 40\nSun - Cache v3 73\n\nJRockit - Original 176\nJRockit - Cache v1 72\nJRockit - Cache v2 22\nJRockit - Cache v3 52\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-24T22:07:26.450+0000","updated":"2007-04-24T22:07:26.450+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12367409/comment/12491472","id":"12491472","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"body":"My benchmark code.\n\nEasy to write a new implementation and get comparitive benchmark data.\n\nMeasurements created in this issue were generated from this code.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bretweinraub","name":"bretweinraub","key":"bretweinraub","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bret Weinraub","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-24T22:19:14.055+0000","updated":"2007-04-24T22:19:14.055+0000"}],"maxResults":13,"total":13,"startAt":0},"customfield_12311820":"0|i0z1i7:","customfield_12314139":null}}

