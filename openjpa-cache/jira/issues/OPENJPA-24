{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12348334","self":"https://issues.apache.org/jira/rest/api/2/issue/12348334","key":"OPENJPA-24","fields":{"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312340","id":"12312340","description":"","name":"0.9.7","archived":true,"released":true,"releaseDate":"2007-04-27"}],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12312320":null,"customfield_12310420":"160362","customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[],"customfield_12311120":null,"customfield_12313826":null,"customfield_12312339":null,"issuelinks":[],"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12311302","id":"12311302","name":"kernel","description":"Kernel"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"203332","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-24/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5feb7d4e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@306f4239[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d56f632[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1762092b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33a6a4e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7539c267[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f344d94[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@18182408[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e9f1a46[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@250ed908[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@186b68d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@410a37b1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310351","id":"12310351","key":"OPENJPA","name":"OpenJPA","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310351&avatarId=10043","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310351&avatarId=10043","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310351&avatarId=10043","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310351&avatarId=10043"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10252","id":"10252","description":"","name":"OpenJPA"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2007-03-01T02:20:03.762+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-24/watchers","watchCount":0,"isWatching":false},"created":"2006-08-21T13:27:35.000+0000","updated":"2007-03-01T02:20:03.757+0000","timeoriginalestimate":null,"description":"The current OpenJPA architecture is not extendable to other implementations.  For example, if somebody wanted to provide their own PersistenceProvider implementation, simply extending the org.apache.openjpa.PersistenceProviderImpl would not suffice due to the dependencies in the ConfigurationProviderImpl.  The discussion for this improvement was started on the dev mailing list.  Once it was determined that there was more to this request than a simple conditional or two, we decided to open a JIRA report.\n\nThe complete history of this request can be found in the OpenJPA dev mailing list.  The first message was posted by me (Kevin Sutter) on August 14, titled \"Extending the OpenJPA Implementation\".  I will attempt to paraphrase the current state of the problem...\n\nWe have three main players in this issue.  The PersistenceProvider, the ConfigurationProvider, and the ProductDerivation (along with the various implementations of these interfaces).  Currently, the ConfigurationProvider is in the lib and is unaware of any specific persistence requirements.  The ProductDerivation is in the kernel and, unfortunately, is aware of persistence requirements, specifically the spec and store types.  Abe's postings have indicated that we need to make these two interfaces more aware of each other and work with each other.  We need to start with either making ConfigurationProvider more persistence-aware and move it into kernel, or make ProductDerivations less persistence-aware and move it into lib.  The latter approach is preferred.\n\nAfter we get this re-organization of the base framework complete, we still have a couple of other issues ot resolve:\n\n    *  Still need the ability to extend EMF's through a ProductDerivation.  This should be doable by adding a new PluginValue to indicate what class of EMF to load.\n\n    *  There is still a question as to whether we will need to provide a custom PersistenceProviderImpl and ConfigurationProviderImpl pair.  I still think this will be necessary.   And, one of Abe's posts indicated that this might help with class loading issues when multiple versions of OpenJPA-based implementations are available in the same system.\n\nI also posted these questions last Friday.  (Abe has responded with some answers, but I wanted to get this JIRA report created before trying to paraphrase his answers.)\n\n    *  You mention in several places about separating away the notion of specs and stores.  In a general sense, I understand what these are.  But, can you elaborate on how these types are used in the ConfigurationProvider and ProductDerivation interfaces?\n\n    * I've moved the ProductDerivation interface to the lib and added the \"load\" methods from the ConfigurationProvider (as described in your previous notes).  And, I've started to clean up the implementations that depend on these interfaces.  But, concerning the implementation of the load methods...  Now that we need to return a ConfigurationProvider, would you expect that we just new up a ConfigurationProviderImpl and then just call across to the \"load\" methods on the implementation?  Since we want to keep the ProductDerivations stateless, I'm not sure how else you were expecting to create a ConfigurationProvider to return on these \"load\" methods.\n\n    * Now that ConfigurationProvider is bare, the ConfigurationTestConfigurationProvider doesn't have much function.  I'll need to take a look to see if this is even required any longer.\n\n    * Can you shed a bit more light on the Configurations class?  It doesn't implement nor extend any interfaces or classes, but it seems to provide many of the same methods as ConfigurationProvider, but as statics.  And, it's dependent on having a Provider.  Can you explain the relationship of this class in the bigger picture and how you think it might be affected by thes changes?\n\nThat's enough for the initial JIRA report.  We will now track this problem here instead of the dev mailing list.  Thanks.\n\nKevin\n","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"attachment":[],"customfield_12312340":null,"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12310041":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"Allow OpenJPA to be extensible","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12429441","id":"12429441","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"Abe's responses to my questions posted previously (from the dev mailing list)...\n\n>   - You mention in several places about separating away the notion of\n> specs and stores.  In a general sense, I understand what these\n> are.  But, can you elaborate on how these types are used in the\n> ConfigurationProvider and ProductDerivation interfaces?\n\nWhat I meant was that the ProductDerivation interface has methods and\nconstants that imply knowledge of what a \"spec\" is and what a \"store\"\nis: afterSepcificationSet(), TYPE_STORE, etc.  These methods and\nconstants become meaningless when the interface is moved from kernel\nto lib, because lib is code that is completely ignorant of what's\nbuilt on top of it.  OpenJPA kernel understands that there might be\ndifferent spec facades built on it, and that there might be different\ndata stores plugged in, but lib code shouldn't be aware of those\nconcepts.\n\nActually, I wouldn't mind moving the\nOpenJPAConfiguration.setSpecification() method to the base\nConfiguration interface and giving lib the notion of a spec, because\nthat's a sufficiently general idea.  But lib certainly shouldn't know\nanything about data stores -- that concept is very persistence-\nspecific.  So I believe that at the very least, the TYPE_STORE stuff\nhas to be moved out of ProductDerivation and into something in the\nkernel if ProductDerivation itself moves into lib.  As I mentioned in\nmy original email, it might seem odd to maintain the strict\nneutrality of lib code given that it's only used for OpenJPA, but we\ndo in fact build on that code with some non-persistence-aware Kodo\nstuff, and as long as there is a separation of modules within\nOpenJPA, I'd like to maintain the meaning of lib-as-neutral vs.\nkernel-as-persistence-aware.\n\n> Now that we need to return a ConfigurationProvider, would you\n> expect that we just new up a ConfigurationProviderImpl and then\n> just call  across to the \"load\" methods on the implementation?  Since we\n> want to keep the ProductDerivations stateless, I'm not sure how else you were\n> expecting to create a ConfigurationProvider to return on these \"load\" methods.\n\nI would expect the ProductDerivation itself to do most of the load\nwork and to populate a new ConfigurationProvider with the parsed\nstate.  The ProductDerivation itself would remain stateless, but\nwould contain the load logic.  We can probably have just one\nConfigurationProviderImpl that will work for most derivations (i.e.\nConfigurationProviderImpl will probably not have to be JPA-specific\nanymore, and can move into lib's conf package or somewhere where it\ncan be used by JDO, etc as well).  I bet a slight rework of\nMapConfigurationProvider would do the trick.\n\n>   - Now that ConfigurationProvider is bare, the\n> ConfigurationTestConfigurationProvider doesn't have much\n> function.  I'll need to take a look to see if this is even required any longer.\n\nYeah, I'm sure tests will need updating.\n\n>   - Can you shed a bit more light on the Configurations class?  It\n> doesn't implement nor extend any interfaces or classes, but it\n> seems to provide many of the same methods as ConfigurationProvider, but as\n> statics.  And, it's dependent on having a Provider.  Can you explain the\n> relationship of this class in the bigger picture and how you think it might be\n> affected by these changes?\n\nIt's a utility class.  Aside from the low-level utils it provides,\nit's mainly there so that its static configuration methods can be\ninvoked without worrying about what services the system is configured\nwith.  Configurations does the work of looking up the right\nConfigurationProvider using the services framework and applying it.\nOtherwise, each component that used a ConfigurationProvider would\nhave to invoke the Services utilities itself to figure out which\nConfigurationProvider to use.\n\nWhen ProductDerivation takes over, Configurations will change to use\nProductDerivations instead, and will subsume the functionality of\nkernel's conf.ProductDerivations utility class.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2006-08-21T15:57:48.000+0000","updated":"2006-08-21T15:57:48.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12432209","id":"12432209","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"I'm finally getting back to this exercise and I will have to admit that this is quite difficult not understanding the general architecture of thse ConfigurationProviders and ProductDerivations.  Instead of jumping right in and attempting to make Abe's suggested changes, I'm trying to understand the current architecture.  Here's what I am finding...\n\nThe application attempts to create an EMF via Persistence.createEntityManagerFactory().  This eventually gets us to the PersistenceProviderImpl.createEntityManagerFactory() methods, which creates the ConfigurationProviderImpl instance.  We then use this ConfigurationProviderImpl instance  to load the resources and create the PersistenceUnitInfo object.\n\nThe last thing we do in createEntityManagerFactory is to create the appropriate BrokerFactory.  We do this by calling Bootstrap.newBrokerFactory passing in the ConfigurationProvider instance and associated Loader.\n\nWithin this processing, I see where we are looping through the ProductDerivation services (sorted on Type).\n\nThis, in turn, creates the new JDBCBrokerFactory instance, which creates the corresponding JDBCConfigurationImpl.  After initializing the properties in the constructor, we attempt to load the global settings by calling Configurations.loadGlobals static method (via the ConfigurationImpl.loadGlobals method).  This is where it gets confusing.  Within this method, we create new instances of the ConfigurationProviderImpl and we use these instances to load resources (again?).\n\nSo, I am seeing where we loop through ConfigurationProviders, eventually creating and looping thorugh ProductDerivations, and then we create and process new instances of ConfigurationProviders.\n\nGranted, I've only spent a couple of hours looking at this today, but I think I need some background on how these Services were working previously before attempting to correct it.  Maybe this was part of the reason why Abe wanted to get rid of the ConfigurationProvider service and drive everything through the ProductDerivations.  It's kind of confusing.\n\nThanks,\nKeivn","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2006-09-01T19:18:52.000+0000","updated":"2006-09-01T19:18:52.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12432225","id":"12432225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"body":"Globals are configuration properties that are always loaded before any explicit configuration supplied by the user, both when using dev tools and at runtime.  Each configuration provider decides on whether and how it uses globals.  The JPA configuration provider does not use globals.  Kodo's JDO configuration provider looks for a \"kodo.properties\" resource in the classpath and loads anything in it.  A Kodo user could theoretically have a kodo.properties with JDO properties, but request an EntityManagerFactory through Persistence.  \n\nThus the loading of globals is independent of the runtime ConfigurationProvider created by PersistenceProviderImpl or any other bootstrapping mechanism.  That is reflected in the behavior Kevin noted: when loading globals we loop through all the ConfigurationProviders in the system until we find one that loads successfully, regardless of how the user is bootstrapping his runtime.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"created":"2006-09-01T20:04:19.000+0000","updated":"2006-09-01T20:04:19.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12432227","id":"12432227","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"body":"Correction: the JPA configuration provider does use globals.  It looks for an openjpa.xml resource for global configuration.  Just as a Kodo user could have a kodo.properties but bootstrap his runtime through JPA, he could also use openjpa.xml but bootstrap his runtime through JDO.  Again, the loading of globals is independent of the runtime bootstrapping mechanism.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"created":"2006-09-01T20:07:29.000+0000","updated":"2006-09-01T20:07:29.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12432240","id":"12432240","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=logemann","name":"logemann","key":"logemann","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Marc Logemann","active":true,"timeZone":"Etc/UTC"},"body":"Just to get it right too. You can bootstrap OpenJPA by the means of PersistenceProviderImpl but still obtain a JDO persistenceManager. But the important question is, where to put things which were formerly in kodo.properties? Or is PersistenceProviderImpl able to load from kodo.properties?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=logemann","name":"logemann","key":"logemann","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Marc Logemann","active":true,"timeZone":"Etc/UTC"},"created":"2006-09-01T20:57:55.000+0000","updated":"2006-09-01T20:57:55.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12432705","id":"12432705","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ppoddar%40apache.org","name":"ppoddar@apache.org","key":"ppoddar@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Pinaki Poddar","active":true,"timeZone":"America/Los_Angeles"},"body":"One use case for extension of OpenJPA implementations is backward compatibility of Kodo 4.1 with Kodo 4.0. In Kodo 4.0, we have published interfaces such as kodo.persistence.KodoEntityManagerFactory/KodoEntityManager. The applications compiled with Kodo 4.0 API to work with Kodo 4.1 runtime (based on OpenJPA), we would be supporting KodoEntityManagerFactory and other published interfaces.\nThe published Kodo 4.0 interfaces would be redefined to extend openjpa interfaces for Kodo 4.1. \n \nI'm working on some related code for backwards-compatibility of Kodo, which turns out to be a similar problem to extensibility of OpenJPA. Let's compare notes, and see where we're overlapping and how we can help each other out.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ppoddar%40apache.org","name":"ppoddar@apache.org","key":"ppoddar@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Pinaki Poddar","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-09-06T01:04:03.000+0000","updated":"2006-09-06T01:04:03.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12433137","id":"12433137","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"Concerning the ProductDerivation types...\n\nOf the types defined in ProductDerivation, it looks like only TYPE_SPEC, TYPE_STORE, and TYPE_SPEC_STORE are being used.  (I don't find any references to TYPE_PRODUCT, TYPE_PRODUCT_STORE, or TYPE_FEATURE.  Must be for future extensions?)  I'm assuming that any re-factoring of these types should continue to include these types that are not currently being utilized.\n\nOne of Abe's earlier comments indicated that if we move ProductDerivation into lib, then we should remove the concept of SPEC and STORE from that interface since lib is persistence-neutral.  (Later on, Abe indicated that maybe we could leave the concept of SPEC since that is pretty general, but STORE is definitely specific to persistence.)  These removed concepts needed to be re-introduced into the kernel, possibly as a derived OpenJPAProductDerivation.\n\nThis would imply that the getType() method and the associated constants for the TYPE_* values should be removed from the ProductDerivation interface.\n\nBut, if we go that route, then we're screwed with our proposed looping through the list of ProductDerivations since it relies on the ProductDerivation.getType() method.\n\nSo, it would seem that we still need the getType() method and associated TYPE_* constants at the ProductDerivation interface.  It seems that it would be okay for the interface to define the various types, and let the implementations deal with the SPEC and/or STORE implications.\n\nWhat am I missing?\n\nKevin","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2006-09-07T14:54:32.000+0000","updated":"2006-09-07T14:54:32.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12433153","id":"12433153","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"body":"The ProductDerivation interface can have a getType() and can order on that type without having to define all the type constants itself.  My usual strategy is to define the constants that make sense for the base type, leaving big \"holes\" so that subclasses can insert their own constants for proper ordering:\n\npublic interface ProductDerivation {\n    public static final int BASETYPE1 = 10;\n    public static final int BASETYPE2 = 20;\n    ...\n}\n\nIt's somewhat delicate (I usually Javadoc the base constants with their values and the fact that they shouldn't be changed), but it's simple and IMO it's better than the base interface containing a bunch of meaningless (to it) constants.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"created":"2006-09-07T16:08:40.000+0000","updated":"2006-09-07T16:08:40.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12435778","id":"12435778","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"It looks like Pinaki has dropped some code via revision r447664 that provides at least some of the infrastructure needed for this JIRA report.  I will need to compare his changes with the changes I was experimenting with to see if this report is now resolved or not.  Any additional changes will be logged via this JIRA report.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2006-09-19T13:06:59.000+0000","updated":"2006-09-19T13:06:59.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12435915","id":"12435915","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ppoddar%40apache.org","name":"ppoddar@apache.org","key":"ppoddar@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Pinaki Poddar","active":true,"timeZone":"America/Los_Angeles"},"body":"I had made certain changes for extending OpenJPA with alternative implementaions via ProductDerivations mechanics. Let me present my understanding of this issue raised orginally by Kevin on this discussion thread. \n\norg.apache.openjpa.lib.conf.Configuration carries the properties that determines configurable behaviour e.g. which concrete PersistenceProvider to create or whether to synchronize the object schema with that of the database or whether to apply JPA or JDO style mapping primitives and so on. It is a rich and powerful construct with support for Plugin.  \n\nThe purpose of OpenJPA configuration subsystem is to create one such Configuration instance that is essential for any particular instantiation of the generic kernel known as BrokerFactory. In fact, BrokerFactory and Configuration enjoy a 1:1 till-detah-do-us-apart sort of relationship.    \n\nProductDerivation, ProductDerivations, ConfigurationProvider, Configurations are abstractions that participate in creating this Configuration instance. Let us see the roles played by each of them.\n\nConfigurationProvider locates where the configuration information is and then reads it. The information can be in a META-INF/persistence.xml file inside a jar, a kodo.properties file available in classpath, a -Dxyz=myValue style Java system property, in a Map instance constructed programatically - the possibilities are not constrained by design. Because OpenJPA -- notwithstanding its name -- is by design capable of supporting multiple specifications that differs in configuration grammar -- multiple ConfigurationProvider classes are provided. Given the varied nature of how configuration information can be made available to the runtime, the basic interface org.apache.openjpa.lib.conf.ConfigurationProvider provides the discipline of reading configuration from 'global' or 'default' or named resources. Of course, each concrete implementation would interpret what 'global' or 'default' would mean. ConfigurationProvider after locating the information resource, reads its content and temporarilly stores in an internal name-value map. Eventually it pours this content into a Configuration instance via ConfigurationProvider.setInto(Configuration conf) method. \n\nProductDerivation faciliates how Configuration will deal with this content -- which MetaDataFactory to set, which EntityManagerFactory (or PersistenceManagerFactory) to instantiate as a facade to the kernel according to active specification and so on. This tunning is accomplished by hooks during the life of a Configuration before being put to active duty i.e. before a Configuration instance is constructed, before the content carried by ConfigurationProvider is poured in Configuration and after a Configuration is set to represent a specification. For example, the spec-agnostic core configuration implementation ConfigurationImpl nor its derivation OpenJPAConfigurationImpl declares a plugin for which concrete EntityManagerFactory to construct as a facade. But PersistenceProductDerivation inserts org.apache.openjpa.persistence.EntityManagerFactoryImpl as the concrete implementation class for EMF in beforeConfigurationConstruct() hook and adds a EMF-plugin value via beforeConfigurationLoaded() hook i.e. before ConfigurationProvider pours its content into a Configuration. This allows the PersistenceProviderImpl to instantiate a org.apache.openjpa.persistence.EntityManagerFactoryImpl as a facade to BrokerFactory.  \n\nGiven that OpenJPA supports an extensive set of configurable parameters it is logical to separate them into categories such as SPEC, PRODUCT, STORE etc -- and that lead to a host of ProductDerivation classes each tunning the configuration from its own perspective. org.apache.openjpa.lib.conf.ProductDerivations is the harness that locates each ProductDerivation available to the system, order them up sequentially to give a chance to modify Configuration/ConfigurationProvider. ProductDerivations finds ProductDerivation by looking up one or more \"org.apache.openjpa.lib.conf.ProductDerivation\" resources in the classpath and interpreting each line of this simple text-based resource as a class name for a particular org.apache.openjpa.lib.conf.ProductDerivation implementation. \n\nConfigurations hold a bunch of static utility methods to instantiate plugin, pour system properties into Configuration and so on. I have not looked into this class due dilligence and it may even be a candidate for being refactored out completely later. \n\n\nGiven this scheme, the most visible (and mechanical) change is to drive the loading of configuration data by the ConfigurationProvider via ProductDerivations. It used to be such that different ConfigurationProvider were activated by Configurations and different ProductDerivation were activated by ProductDerivations. Now ProductDerivations is the only driver of configuration subsystem. Each ProductDerivation can supply its own ConfigurationProvider to locate/parse/read configuration information and supplying a null imply that this ProductDerivation does not read resource at all. In fact, most of them don't. \n\nThis ProductDerivation-as-driver-of-ConfigurationProvider notion is coded into AbstractProductDerivation.  \n\nThe other change as outlined by Abe is to move ProductDerivations/ProductDerivation/Configuration to lib and factor out STORE specifc details in kerenl.OpenJPAProductDerivation. \n\nWith all these machinery and refactoring -- now let us go back to the issue Kevin originally raised -- how does one extend OpenJPA?\nThe use case became real when we needed a backward compatibility support for Kodo 4.0. Kodo 4.0 was released few months ago in pre-OpenJPA era. Obviously, a mechanism is needed such that applications written on Kodo 4.0 but running on Kodo 4.1 based on OpenJPA must be able to use the old API of kodo.persistence.PersistenceProviderImpl instead of org.apache.... \nIn my next post, I will describe how that was done with ProductDerivation, I have to now attend to booth duty at BEAWorld. \n \n\n        \n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ppoddar%40apache.org","name":"ppoddar@apache.org","key":"ppoddar@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Pinaki Poddar","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-09-19T16:01:40.000+0000","updated":"2006-09-19T16:01:40.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12436086","id":"12436086","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikedd","name":"mikedd","key":"mikedd","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Dick","active":true,"timeZone":"America/Chicago"},"body":"It looks like creating an extension is fairly straight forward. With the changes Pinaki committed yesterday I was able to create a simple test extension. All I did was create three classes, a ProductDerivation, a PersistenceProvider, and a ConfigurationProvider. I extended PersistenceProductDerivation, PersistenceProviderImpl and ConfigurationImpl respectively, although I suppose one could write their own if they really wanted/needed to.  \n\nTo get a fairly simple wrapper extension working all I had to do was override : ProductDerivation.newConfigurationProvider() , and\nConfigurationProvider.getPersistenceProviderName(). \n\nI didn't see any methods in PersistenceProviderImpl that I needed to change. \n\nThe last thing I did was register the ProductDerivation and PersistenceProvider as services, and update persistence.xml (specifying the new PersistenceProvider for my persistent unit). \n\nAfter that the new PersistenceProvider, etc. were used and generated the configuration appropriately (as far as I can tell). Each ProductDerivation is called to load a ConfigurationProvider until the first non-null ConfigurationProvider is found. The ConfigProvider and PersistenceProvider need to match and so forth. \n\nIs there anything glaring that I missed? Admittedly all I did was a proof of concept. For a real world extension like Kodo 4.1 there will be other bits to change, changing the default properties in ConfigurationProvider.loadGlobals() for example. I'm sure Pinaki will have a more information and a more robust example. \n\nOne other thing I wasn't clear on is the type for the extension (TYPE_SPEC, TYPE_PRODUCT,etc). My first guess is that any extensions would use TYPE_PRODUCT (value 100), but I could see it being TYPE_PRODUCT_STORE as well. \n\nPersistenceProductDerivation is TYPE_SPEC (value 0) and the ProductDerivations are sorted in ascending order. If extensions are of TYPE_PRODUCT then the default Apache derivation will always be checked first.  If we assume that when an extension is present it will be used more often than the default we might want to have any extensions' derivations called first. \n\nThat's all I found. I didn't mean to steal Pinaki's thunder, just wanted to show that someone else has had some success. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikedd","name":"mikedd","key":"mikedd","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Dick","active":true,"timeZone":"America/Chicago"},"created":"2006-09-20T01:46:29.000+0000","updated":"2006-09-20T01:46:29.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12436089","id":"12436089","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"body":"I've committed some additional work on this as I reviewed Pinaki's work.  You should now be able to extend OpenJPA by creating a ProductDerivation like so:\n\npublic class MyProductDerivation \n    extends AbstractProductDerivation {\n\n    public int getType() {\n        return TYPE_PRODUCT;\n    }\n\n    public boolean beforeConfigurationLoad(Configuration conf) {\n        Value emf = conf.getValue(EntityManagerFactoryValue.KEY);\n        if (emf == null)\n            return false;\n        emf.setDefault(MyEntityManagerFactoryClass.class.getName());\n        emf.setClassName(MyEntityManagerFactoryClass.getName());\n        return true;\n    }\n}\n\nWith your custom EntityManagerFactory class (which must extend EntityManagerFactoryImpl), you can also override newEntityManagerImpl(Broker) to subclass the EntityManager, and using your EntityManager subclass I believe you can act as a factory for custom QueryImpl, etc extensions.  In addition to the PersistenceProvider.createEMF methods, the static toEntitymanagerFactory/toEntityManager methods in OpenJPAPersistence will also correctly return your custom subclasses.\n\nSo you shouldn't need a custom ConfigurationProvider or a custom PersistenceProvider anymore.  I'll be doing some more review of this later to be sure it actually works, barring someone else testing it and telling me it does.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=awhite","name":"awhite","key":"awhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A. Abram White","active":true,"timeZone":"Etc/UTC"},"created":"2006-09-20T02:10:25.000+0000","updated":"2006-09-20T02:10:25.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12436323","id":"12436323","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikedd","name":"mikedd","key":"mikedd","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Dick","active":true,"timeZone":"America/Chicago"},"body":"Thanks Abe, I was able to load a custom EMF with your changes. I might have more questions when I get a chance to experiment a little more. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikedd","name":"mikedd","key":"mikedd","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Dick","active":true,"timeZone":"America/Chicago"},"created":"2006-09-20T19:41:37.000+0000","updated":"2006-09-20T19:41:37.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12441142","id":"12441142","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"With Pinaki's and Abe's assistance, this JIRA report was resolved.  Thank you.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2006-10-10T13:54:35.000+0000","updated":"2006-10-10T13:54:35.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12348334/comment/12463342","id":"12463342","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"Housecleaning...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2007-01-09T16:58:53.921+0000","updated":"2007-01-09T16:58:53.921+0000"}],"maxResults":15,"total":15,"startAt":0},"customfield_12311820":"0|i0z6cv:","customfield_12314139":null}}

