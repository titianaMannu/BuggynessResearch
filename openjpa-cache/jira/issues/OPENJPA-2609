{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12902522","self":"https://issues.apache.org/jira/rest/api/2/issue/12902522","key":"OPENJPA-2609","fields":{"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317142","id":"12317142","description":"","name":"2.1.2","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12323484","id":"12323484","description":"OpenJPA 2.2.1.x Maintenance Release","name":"2.2.1.1","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12324305","id":"12324305","description":"OpenJPA 2.2.x Maintenance Release","name":"2.2.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12332295","id":"12332295","description":"OpenJPA 2.4.1","name":"2.4.1","archived":false,"released":true,"releaseDate":"2016-02-21"}],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12312320":null,"customfield_12310420":"9223372036854775807","customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12324305","id":"12324305","description":"OpenJPA 2.2.x Maintenance Release","name":"2.2.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12325298","id":"12325298","description":"OpenJPA 2.4.0","name":"2.4.0","archived":false,"released":true,"releaseDate":"2015-04-22"}],"customfield_12311120":null,"customfield_12313826":null,"customfield_12312339":null,"issuelinks":[{"id":"12475444","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12475444","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12981420","key":"OPENJPA-2646","self":"https://issues.apache.org/jira/rest/api/2/issue/12981420","fields":{"summary":"Sporadic NullPointerException occurs under heavy load when QuerySQLCache is enabled.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12311309","id":"12311309","name":"query","description":"Issues related to query execution, including the JPQL parser and internal query representation."}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-2609/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4604b212[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@396626a9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5342a89b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b198f34[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17644749[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@f8c55f8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@494c22e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5e3b74d0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b503e51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@61e9556[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2eedec45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b7580bc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310351","id":"12310351","key":"OPENJPA","name":"OpenJPA","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310351&avatarId=10043","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310351&avatarId=10043","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310351&avatarId=10043","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310351&avatarId=10043"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10252","id":"10252","description":"","name":"OpenJPA"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2015-10-19T02:11:33.285+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-2609/watchers","watchCount":2,"isWatching":false},"created":"2015-10-05T21:56:59.078+0000","updated":"2016-07-19T20:05:55.713+0000","timeoriginalestimate":null,"description":"HI!  I have a customer hitting the following (root) exception:\n\nCaused by: java.lang.ClassCastException: java.lang.String incompatible with java.lang.Integer\n\tat org.apache.openjpa.jdbc.kernel.PreparedSQLStoreQuery$PreparedSQLExecutor.toParameterArray(PreparedSQLStoreQuery.java:160)\n\tat org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:857)\n\t... 23 more\n\nFor the reader's convenience, here is the 'PreparedSQLStoreQuery$PreparedSQLExecutor.toParameterArray':\n\npublic synchronized Object[] toParameterArray(StoreQuery q, Map userParams) {\n........\n        Set<Map.Entry<Object,Object>> userSet = userParams.entrySet();\n            for (Map.Entry<Object,Object> userEntry : userSet) {\n                int idx = ((Integer)userEntry.getKey()).intValue();  <----- line 160\n\nThis exception only occurs sporadically, and typically under a heavy load (many threads).  After many days of heads down debug with a debugger (and LOTS of luck), I was able to recreate (simulate) the issue by placing strategic break points in my test.....in other words it is a manual recreate and not one I can automate.  Let me take you on my debug journey for posterity sake.\n\nThe first question to ask ourselves is: \"how do we get into the PreparedSQLStoreQuery$PreparedSQLExecutor.toParameterArray code\".  The second question to ask is:  \"how do we get a String when an Integer is expect (i.e. incorrect 'userParams')\".  The first question isn't too hard to answer, the second question is the very hard, time consuming part.  To get a PreparedSQLStoreQuery$PreparedSQLExecutor, we must execute a query at least twice where query SQL caching (QuerySQLCache) is enabled.  In other words, lets take this query from my test:\n\nq = em.createQuery(\"select o from MyEntity o where upper(o.comment) like :mrn\");\nq.setParameter(\"mrn\", \"test\");\nq.getResultList();\n\nThe first time we execute this query the \"store query\" will be 'ExpressionStoreQuery$DataStoreExecutor', the second time it will be a 'PreparedSQLStoreQuery$PreparedSQLExecutor.  This is only the case when QuerySQLCache=true (which is the default).  Set it to false and query SQL cache is disabled and we'd only see a 'ExpressionStoreQuery$DataStoreExecutor'.  Consequently to resolve the ClassCastException simply disable the query SQL cache (not a great option I realize, but a work around nonetheless.)\n\nNow that we understand how to repeatedly invoke the 'PreparedSQLStoreQuery$PreparedSQLExecutor.toParameterArray', lets move on to the more daunting task: determining the circumstances under which the 'userParams' contains a set of Strings rather than Integers.  To start, if we put a breakpoint in 'toParameterArray' we see this stack in the debugger:\n\nPreparedSQLStoreQuery$PreparedSQLExecutor.toParameterArray(StoreQuery, Map) line: 165\t\nQueryImpl.execute(int, Map) line: 862\t\nQueryImpl.execute(Map) line: 794\t\nDelegatingQuery.execute(Map) line: 542\t\nQueryImpl<X>.execute() line: 286\t\nQueryImpl<X>.getResultList() line: 302\t\n.......\n\nUsing this info we can walk the stack to determine where the 'params' come from.  Walking down the stack to QueryImpl.execute, line 286, we can see the 'params' are created/manipulated here:\n\nprivate Object execute() {\n.......\n\t    lock();\n            Map params = getParameterValues();\n            boolean registered = preExecute(params);\n            Object result = _query.execute(params);\n            if (registered) {\n                postExecute(result);\n\nAs you can see, 'params' is created and then passed to 'preExecute' and 'execute' (take it on faith that nothing relevant happens in getParameterValues).  The real interesting operations occur in 'preExecute', and then later in 'postExecute'.  In 'preExecute', a call is made to PreparedQueryCacheImpl.register:\n\n    public Boolean register(String id, Query query, FetchConfiguration hints) {\n.........\n        PreparedQuery cached = get(id);\n        if (cached != null)\n            return null; // implies that it is already cached\n        \n        PreparedQuery newEntry = new PreparedQueryImpl(id, query); \n        return cache(newEntry);\n\nBut a breakpoint on 'return' and notice here that two threads can each create a PreparedQuery (pq).  Next, allow both threads to move in lock-step.  Doing this you will see that in the 'cache' method both threads go after a lock:\n\npublic boolean cache(PreparedQuery q) {\nlock(false);\ntry {\nString id = q.getIdentifier();\n.....\n\n_delegate.put(id, q);\n.....\n\nreturn true;\n} finally {\nunlock(false);\n\nOne thread wins and get the lock, adds to the cache (_delegate) and then returns 'true' (i.e. indicating that the register occurred).  Once the first thread gives up the lock, obviously the waiting thread gets the lock and notice that it is going to blindly add its pq to the cache.  So we have a classic race condition and this is the first problem (note I said FIRST problem).  Solution: we need to check the cache and simply return (and return false) if there already exists and entry for the given id.  Despite what I'm about to say, we need this solution no matter what.  \nThe fun doesn't end here, we still haven't figured out how/where/why the 'params' are messed up, so lets continue.  At this point, the last thread added its pq into the cache and again, true is returned.  The fact that true is returned for both threads sets in motion state which can effect down stream operations.  That is, look again at the 'execute' method listed above.  Notice that when 'registered' is true, we take the 'postExecute' method.  I think the intentions are to take 'postExecute' only once, and only for the thread that actually 'registered' (put into the cache) a pq.  Clearly though at this point we have two threads taking 'postExecute' for what should be the same id/pq.  Here is where things get interesting w.r.t the 'params'.  In 'postExecute' we are going to 'initialize' the pq and in so doing we make our way to PreparedQueryImpl.setUserParameterPositions:\n\nvoid setUserParameterPositions(List list) {\n    _userParamPositions = new HashMap<Object, Integer[]>();\n    List<Integer> positions = new ArrayList<Integer>();\n    for (int i = 1; list != null && i < list.size(); i += 2) {\n........\n    _userParamPositions.put(key, positions.toArray(new Integer[positions.size()]));\n\n\nUh oh!!  Red flag!!  Notice here that both threads can (and do) operated on '_userParamPositions', and notice '_userParamPosistion' is a (non-threadsafe) HashMap!  Obviously multiple threads can stomp on each other with the use of '_userParamPositions''.  Enough said.\nNow, we are closer to understand where the 'params' get messed up, but I still haven't shown how the CCEx can occur.  For that, we need to let the above query run to completion, and then run it a second time (with the same EMF/EM of course).  When it is executed a second time, the above 'preExecute' method is called and this time it finds a cached pq (rather than registering one as was done in the first iteration).  Furthermore, in 'preExecute' we take this block of code:\n\nif (pq.isInitialized()) {\ntry {\nMap rep = pq.reparametrize(params, _em.getBroker());\nparams.clear();\nparams.putAll(rep);\n} catch (UserException ue) {\ninvalidatePreparedQuery();\nreturn false;\n\nNotice that 'reparametrize' operates on 'params', and notice that there is a try/catch bock around this code because 'reparametrize' can throw a UserEx for a multitude of reasons.....see the method code for details, but note that it uses '_userParamPositions'.  Now, imagine a case where many threads are using HashMap '_userParamPositions'.  A situation can occur where the HashMap gets messed up to the point it causes 'reparametrize' to throw a UserEx!  In this case, you can see that params.clear() and params.putAll(rep) above are skipped!  Effectively we have a case where the params may not get \"reparametrize\" as expected.  \nFor those still with me I have now demonstrated how/why/where 'params' can get messed up.  As one can hopefully see, there is a lot going on here and many things have to aline just right for the CCEx to occur.  To round this out, if we assume that 'reparametrize' causes a UserEx (I've \"simulated\" it using a debugger), when the execution of the query occurs the second time, and when query SQL cache is enabled, the 'params' passed to 'PreparedSQLStoreQuery$PreparedSQLExecutor.toParameterArray' have effectively not been 'reparametrize' (i.e. they contain a map of String->Object, rather than Integer->Object), hence the CCEx!\n\nHaving said all of that, I don't have a clear fix to this.  I've spoken with Jody Grassel about this and he is at the same point as I.  Ultimately code needs to be added to make '_userParamPositions' thread safe.  However, this could be a really large undertaking and not a change I would want to add in service.  We definitely know that we need to make the PreparedQueryCacheImpl.cache method avoid a race condition as I mentioned above.  To do this, we need to check the cache for an existing pq as I mentioned above.  Doing this would ensure that only one thread would register and initialize a pq instance for a given id (query).  My feeling is this will fix the CCEx as we will not have multiple threads creating/initializing a pq, and thus not creating, and adding to the, '_userParamPositions'.  I know I'm kicking the can down the road a bit, but like I said I'm not comfortable with reworking the PreparedQueryImpl in service, especially when we haven't seen other issues in this area (tick tick tick........\nIf you have thoughts or if I'm missing something obvious please let me know.\n\nThanks,\n\nHeath Thomann","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"attachment":[],"customfield_12312340":null,"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12310041":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12902522/comment/14962575","id":"14962575","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1709309 from [~jpaheath] in branch 'openjpa/branches/2.1.x'\n[ https://svn.apache.org/r1709309 ]\n\nOPENJPA-2609: Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2015-10-18T19:38:43.276+0000","updated":"2015-10-18T19:38:43.276+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12902522/comment/14962584","id":"14962584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1709310 from [~jpaheath] in branch 'openjpa/branches/2.2.1.x'\n[ https://svn.apache.org/r1709310 ]\n\nOPENJPA-2609: Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.  Merged 2.1.x changes to 2.2.1.x.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2015-10-18T19:48:19.548+0000","updated":"2015-10-18T19:48:19.548+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12902522/comment/14962585","id":"14962585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1709311 from [~jpaheath] in branch 'openjpa/branches/2.2.x'\n[ https://svn.apache.org/r1709311 ]\n\nOPENJPA-2609: Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.  Merged 2.1.x changes to 2.2.x.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2015-10-18T19:50:21.057+0000","updated":"2015-10-18T19:50:21.057+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12902522/comment/14962589","id":"14962589","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1709312 from [~jpaheath] in branch 'openjpa/trunk'\n[ https://svn.apache.org/r1709312 ]\n\nOPENJPA-2609: Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.  Merged 2.1.x changes to trunk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2015-10-18T19:52:11.826+0000","updated":"2015-10-18T19:52:11.826+0000"}],"maxResults":4,"total":4,"startAt":0},"customfield_12311820":"0|i2mlxj:","customfield_12314139":null}}

