{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12981420","self":"https://issues.apache.org/jira/rest/api/2/issue/12981420","key":"OPENJPA-2646","fields":{"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12324305","id":"12324305","description":"OpenJPA 2.2.x Maintenance Release","name":"2.2.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12338939","id":"12338939","description":"OpenJPA 2.4.3","name":"2.4.3","archived":false,"released":true,"releaseDate":"2018-06-12"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12338127","id":"12338127","description":"OpenJPA-3.0.0 (first JPA-2.1 spec release)","name":"3.0.0","archived":false,"released":true,"releaseDate":"2018-06-12"}],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12312320":null,"customfield_12310420":"9223372036854775807","customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12324305","id":"12324305","description":"OpenJPA 2.2.x Maintenance Release","name":"2.2.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12332295","id":"12332295","description":"OpenJPA 2.4.1","name":"2.4.1","archived":false,"released":true,"releaseDate":"2016-02-21"}],"customfield_12311120":null,"customfield_12313826":null,"customfield_12312339":null,"issuelinks":[{"id":"12475444","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12475444","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12902522","key":"OPENJPA-2609","self":"https://issues.apache.org/jira/rest/api/2/issue/12902522","fields":{"summary":"Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12311309","id":"12311309","name":"query","description":"Issues related to query execution, including the JPQL parser and internal query representation."}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-2646/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@40b6d3d9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26e33597[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1dfdffc2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@220d3e67[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fd6e07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7620a76d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d14584[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4fe4ad7f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27817fd2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@54e9bf80[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a1a3dfc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@30fffc95[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310351","id":"12310351","key":"OPENJPA","name":"OpenJPA","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310351&avatarId=10043","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310351&avatarId=10043","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310351&avatarId=10043","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310351&avatarId=10043"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10252","id":"10252","description":"","name":"OpenJPA"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2018-05-14T22:27:19.342+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-2646/watchers","watchCount":7,"isWatching":false},"created":"2016-06-21T17:20:03.903+0000","updated":"2018-08-14T15:09:28.846+0000","timeoriginalestimate":null,"description":"Hello!  This is a follow up/continuation of JIRA OPENJPA-2609.  I will assume the reader slogged through that one as some of the info in that JIRA is very relevant here.  The fix for that JIRA was necessary to plug a hole in PreparedQuery (PQ) cache.  The fix did reduce my customer's occurrence of the exception by around 90%.  However, they still saw the reported exception and in addition they see following exception:\n\nCaused by: java.lang.NullPointerException\nat org.apache.openjpa.persistence.QueryImpl.preExecute(QueryImpl.java:557)\nat org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:285)\nat org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)\nat com.ibm.ws.persistence.QueryImpl.getResultList(QueryImpl.java:118)\n.....\n\n \n\nAs I mentioned in OJ2609, I was not able to exactly recreate the issue.  I described some of the strategic break points I had to use, and the assumptions I had to make.  Alas, I was able to recreate this issue with a multi threaded test, and specific query string (among other things)!  This JIRA will take the reader on another journey through the laborious process I went through to recreate the issue, and finally track down the very, I mean very, narrow window where the CCEx or NPE can occur.  So, settle in and lets start our fun adventure!  \n\nFirst, let me give an overview of the issue and look at the code to illustrate how the exceptions can occur.  After that I'll dive into the recreate.  \nThe exception can occur when an item (a query string mapped to a PQ in my case) in the CacheMap is moved from the  \"soft\" cache to the main cache.  Please view the CacheMap code to see what I mean by the main cache (see variable 'cacheMap') and what I mean by the soft cache (see variable 'softMap').  When an item exists in the soft cache, and a thread requests that item, the item is moved out of the soft cache and put in the main cache.  If the main cache is full, another item is kicked out of the main cache.  The item which is removed from the main cache is put into a soft cache.  As this move from soft cache to main cache occurs, there is a narrow window where the item appears to not be in the caches at all.  In other words, if a (reader) thread asks (CacheMap.get) for item X, where another (writer) thread is moving item X from the soft cache to the main cache, the reader thread will not see item X and think the item is not cached.\nTo see this better, lets look at CacheMap.get:    \n\n public Object get(Object key) {\n        readLock();\n        try {\n            // Check the main map first\n            Object  val = cacheMap.get(key);\n            if (val == null) {\n                // if we find the key in the soft map, move it back into\n                // the primary map\n                val = softMap.get(key);\n                if (val != null){\n                    put(key, val);\n                }else{\n                    val = pinnedMap.get(key);\n                }\n            }\n           \n            return val;\n        } finally {\n            readUnlock();\n        }\n    }\n\n\nAs you can see, we first look in the main cache for a given key (in my scenario the key is a query string).  If it is not found, we look in the soft map.  If it is in the soft map, we call the 'put' method.  The 'put' method is going to take the key out of the soft map and put it in the main cache map.  Let me paste the relevant parts of the put method (I'll leave it to the reader to view the method in its entirety):\n\npublic Object put(Object key, Object value) {\n        writeLock();\n        try {\n........\n            // otherwise, put the value into the map and clear it from the\n            // soft map\n            val = put(cacheMap, key, value);\n            if (val == null) {\n                val = remove(softMap, key);\n........\n        } finally {\n            writeUnlock();\n        }\n\n\nAs you can see here, this 'put' method calls to another 'put' method which simply puts the key/value into the specified map.  If the map didn't already contain a value for the given key (which I think should always be the case for the cacheMap, or at least for my scenario), null will be returned.  When null is returned, remove is called to remove the key/value from the soft map.  \nGiven this, lets look closer at the 'get' method with concurrency in mind.  Take the case where two threads enter the 'get' method at the same time.  Next, assume both threads are moving lock step and they both call 'cacheMap.get' with the same key, and assume the key is not in the main cache.  So at this time both threads will have a 'val' of null.  Next assume one thread gets focus (so the other thread suspends for a moment) and it calls the soft map with the key.  Assume the soft map contains the key.  In this case the thread will move (via the call to 'put') the key/value from the soft cache to the main cache.  This thread will then have a non-null 'val' and will return.  Next assume the suspended thread gets focus and continues.  Since its 'val' is null, it will ask the soft cache for the key.  However, we know that the other thread just moved the key/value from the soft to main cache!  As such, the thread will not find the key in the soft cache and will return a 'val' of null!!!  This is at the heart of the issue!  That is, one thread thinks there is nothing in the cache for their key!  \nThe observant reader may notice that the 'get' and 'put' have a 'readLock' and 'writeLock', respectively, which attempts to get a ReentrantLock.  So one would think that there is proper read/write access of the caches to avoid such situations.  However, one must look at the read/writeLock methods.  If you look at the readLock method, you can see that it locks using a '_readLock' variable.  This variable is null for the CacheMap instance created by the PreparedQueryCacheImpl.  Therefore, the readLock method is a no-op.  This means that a reader thread can do a read at any time without any locking concerns.  \n\nNow that we know the heart of the issue (i.e. one thread received an incorrect cache miss), lets look at the implication of this incorrect cache miss.  What I haven't stated is where the threads are at when they call 'get' on the cache.  This is easier to see when looking at the attached test.  Basically though one thread is in PreparedQueryCacheImpl.register, specifically this line:\n\nPreparedQuery cached = get(id);\n\nHere is the stack from my test which I will describe:\n\nPreparedQueryCacheImpl.get(String) line: 193\t\nPreparedQueryCacheImpl.register(String, Query, FetchConfiguration) line: 92\t\nQueryImpl<X>.preExecute(Map) line: 554\t\n\nIf you look at the 'register' method, you can see that if the PreparedQuery is not found in the cache (i.e. 'get(id)' returns null), one will be created and an attempt made to put it into the cache.  If you look at  PreparedQueryCacheImpl.cache, you can see a request is made a second time to see if the value is in the cache.  More than likely this time the value will be found in the cache, in which case true is returned.  If not, false is returned.  Either way, it doesn't matter if true or false is returned.  To see why, look at org.apache.openjpa.persistence.QueryImpl.preExecute.  This is the code which has called PreparedQueryCacheImpl.register (see above stack).  Again, this might be more clear when looking at the provided test in the debugger.  You can see in 'org.apache.openjpa.persistence.QueryImpl.preExecute' that if anything other than null is returned from 'register', the code that calls \nPreparedQuery.reparametrize is skipped!  This is at the heart of the issue.  To understand why, you need to go back to JIRA OPENJPA-2609 and understand the part about PreparedSQLStoreQuery$PreparedSQLExecutor, or understand the fact that a PreparedSQLStoreQuery$PreparedSQLExecutor is the executor. That is, the threads involved here (again, easier to see in the provided test) are using a PreparedSQLStoreQuery$PreparedSQLExecutor.  Given this the parameter must be reparametrize, in other words the parameter needs to be converted to its parameter index (an int).  Because this is skipped, we see the CCEx when trying to convert a string parameter to an expected Integer.  That is, when you look at this line in org.apache.openjpa.kernel.QueryImpl.execute:\n\nStoreQuery.Executor ex = (isInMemory(operation))\n\nThe next couple lines below this is where the CCEx occurs, because the parameters have not been converted.  Note that when we are dealing with a 'ExpressionStoreQuery$DataStoreExecutor' (i.e. the very first time a query is executed - not cached - or caching is disabled), the reparamaterization doesn't need to occur because an ''ExpressionStoreQuery$DataStoreExecutor' expects a string parameters, rather than a paramater (int) index.  If you run with the debug module I provide (see below) I add debug to print the 'executor' making is a little easier to see when each of these two executors are used.\n\nNow, that describes the CCEx, but I've said nothing about the NPE.  Well, if you followed the above, as I'll explain, the NPE is very easy to see.  Again, just like the CCEx stack, the NPE stack is in the org.apache.openjpa.persistence.QueryImpl.preExecute method.  Just as was the case above for the CCEx, this method goes to PreparedQueryCacheImpl.register.  This time though, the 'register' returns null, meaning the PQ is already in the cache.  A few lines after the 'register' call, we see these lines:\n\nPreparedQuery pq = _em.getPreparedQuery(_id);\n    if (pq.isInitialized()) {\n\nThe code is going back to the cache for the actual PQ.  Using the same \"cache miss\" scenario as described above, a null PQ will be returned.....obviously when we call pq.isInitialized() on a null, an NPE will occur!\nWhile this JIRA describes one way to cause the CCEx, I feel there are other holes that could cause the CCEx, or other exceptions.  For example, if you look at 'org.apache.openjpa.persistence.QueryImpl.ignorePreparedQuery()', you can see that it goes to the cache and if an entry is not found, it returns without doing the recompile.  I see a scenario where this is a problem.  That is, taking a look once again at 'QueryImpl.preExecute'.  Before the call to 'PreparedQueryCacheImpl.register' there is a test for null parameters.  If there is a null parameter, the 'ignorePreparedQuery()' method is called.  If you step into this method you can see that a call is made to the cache.  If we go through the same \"cache miss\" scenario, we will see that an \"ignore\" is not performed (by \"ignore\" it appears the Query is recompiled and in so doing the 'PreparedSQLStoreQuery$PreparedSQLExecutor' would be removed and instead a 'ExpressionStoreQuery$DataStoreExecutor' used).  When the \"cache miss\" occurs and the \"ignore\" not performed, we can see that yet again the call to PreparedQuery.reparametrize is skipped, thus leading to the same CCEx.  I think we need to fix the case where a \"cache miss\" could occur in CacheMap, or look at all the cases where the cache is called and account for the possibility of a \"cache miss\".  The former is likely the best options.\n\nFinally, let me describe the test I've created and attached.  It is named PreparedQueryCacheTest.java and uses the provided entity (MyEntity.java).  This test can be ran as a stand alone JSE JUnit test.  To execute it simply point your classpath to the OpenJPA snapshot jar of your choice.  You can use a simple persistence.xml file (no properties are necessary).  To make it much easier for the test to recreate the issue, you will need to edit the PreparedQueryCacheImpl.java class.  Therefore this does assume the user can edit and recompile the OpenJPA code.  The user should change the CacheMap in PreparedQueryCacheImpl to:\n\n_delegate = new CacheMap(false,2);\n\nfrom:\n\n_delegate = new CacheMap();\n\nAgain, doing this makes it far more likely the issue will occur and is a necessity when running the debug test.  If you look at the test there is a test method to run when running in a debugger, and a test method to run to automatically recreate the exception.  Each test method is commented with enough text to explain how to recreate the exception.  Especially the debug test, the comments in this method detail exactly where to add break points and the necessary flow to recreate the issue in a debugger.  With my test you'll see a CCEx like this:\n\nThread (Thread-32): Caught the following exception: <openjpa-2.2.3-SNAPSHOT-r422266:1737410 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: Failed to execute query \"select o from MyEntity o where o.comments = :mrn and o.id = 1\". Check the query syntax for correctness. See nested exception for details.\n  With cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer\n\n\nIn some cases you may see the NPE reported in the beginning of the JIRA.  However, the CCEx occurs more often than the NPE.  \n\nIn addition to the test, I've attached a debug module which has system println's to help demonstrate the issue.  The debug module is named PreparedQueryTest.debug. \n\nThanks,\n\nHeath Thomann","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12812262","id":"12812262","filename":"MyEntity.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"created":"2016-06-21T18:35:38.868+0000","size":680,"mimeType":"text/x-java-source","content":"https://issues.apache.org/jira/secure/attachment/12812262/MyEntity.java"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12922104","id":"12922104","filename":"OPENJPA-2646-2.2.x.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-04T20:15:41.282+0000","size":14502,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12922104/OPENJPA-2646-2.2.x.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12935556","id":"12935556","filename":"Perf_Regression.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-14T14:31:48.592+0000","size":669,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12935556/Perf_Regression.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12812263","id":"12812263","filename":"PreparedQueryCacheTest.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"created":"2016-06-21T18:35:38.872+0000","size":13134,"mimeType":"text/x-java-source","content":"https://issues.apache.org/jira/secure/attachment/12812263/PreparedQueryCacheTest.java"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12812261","id":"12812261","filename":"PreparedQueryTest.debug","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"created":"2016-06-21T18:35:38.855+0000","size":12380,"mimeType":"application/octet-stream","content":"https://issues.apache.org/jira/secure/attachment/12812261/PreparedQueryTest.debug"}],"customfield_12312340":null,"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12310041":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"Sporadic NullPointerException occurs under heavy load when QuerySQLCache is enabled.","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/15342409","id":"15342409","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"body":"Attaching a JSE JUnit test and necessary entity.  Also attaching a .debug file which can be applied as a patch.  When applied, it changes the cache size in PreparedQueryCacheImpl which allows the issue to occur more often.  In addition, the .debug file adds debug statements which help demonstrate how the issue occurs.\n\nThanks,\n\nHeath Thomann ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpaheath","name":"jpaheath","key":"jpaheath","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Heath Thomann","active":true,"timeZone":"America/Denver"},"created":"2016-06-21T18:35:38.875+0000","updated":"2016-06-21T18:35:38.875+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16459791","id":"16459791","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"body":"Hello!\r\n\r\nAfter further investigation into this issue that Heath provided extensive investigation (thanks for that by the way!), I have found another issue that needs to be addressed.This new issue revolves around the \"overflow\" strategy being employed by the CachMap. Let me see if I can explain the situation as well as Heath:   \r\n\r\nThe story starts with how the CacheMap is setup to strategically balance between a hard cache ('cacheMap') and a soft cache ('softMap'). When the hard cache reaches its maximum size, this strategy is there to shift a random value from the hard cache to the soft cache (and when the soft cache gets full, just evict something and provide a warning that it's happening). However, there is a bit of a problem with timing and locking that makes the events of 1) remove from the hard cache and 2) put into the soft cache leave a gap in time where the value is not in either Map! This leads to the same NullPointerException that Heath was describing as well.\r\n\r\nTo take a look at the issue in the code, here is the first part: The put() implementation for ConcurrentHashMap:\r\n\r\norg.apache.openjpa.lib.util.concurrent.ConcurrentHashMap.put(Object key, Object value)\r\n\r\n{code:java}\r\n     public Object put(Object key, Object value) {\r\n        Object k = maskNull(key);\r\n        int hash = hash(k);\r\n        synchronized (this) {\r\n            int i = hash & (table.length - 1);\r\n\r\n            for (Entry e = table[i]; e != null; e = e.next) {\r\n                if (e.hash == hash && eq(k, e.key)) {\r\n                    Object oldValue = e.value;\r\n                    e.value = value;\r\n                    return oldValue;\r\n                }\r\n            }\r\n\r\n            if (maxSize != Integer.MAX_VALUE)\r\n                removeOverflow(maxSize - 1);\r\n            table[i] = createEntry(hash, k, value, table[i]);\r\n            if (size++ >= threshold) resize(2 * table.length);\r\n        }\r\n        return null;\r\n    }\r\n{code}\r\n\r\nThe portion that is of interest here is the call to {code}removeOverflow(maxSize - 1){code}\r\nThis call is made when the object to be inserted into this map is completely new. This makes sense since this is a map. If the key already exists, the backing size of the map doesn't actually change and nothing needs to be evicted. However, when a new key is introduced and the maxSize is not set for an unlimited size (MAX_VALUE), then we remove the overflow. So lets take a look at that implementation:\r\n\r\norg.apache.openjpa.lib.util.concurrent.ConcurrentHashMap.removeOverflow(int maxSize)\r\n{code:java}\r\n    private void removeOverflow(int maxSize) {\r\n        while (size > maxSize) {\r\n            Map.Entry entry = removeRandom();\r\n            if (entry == null)\r\n                break;\r\n            overflowRemoved(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n{code}\r\n\r\nObserve here how we first call the method removeRandom(), then as long as a value was actually removed, we call a method called overflowRemoved(). This sequencing is the key to the issue. The method removeRandom() is pretty straight forward in that it finds a random index in the backing array and removes it. One thing that is special about removeRandom is that it uses synchronization! This is good! While the value is being removed, other threads should be blocked from accessing the map (assuming they are also using synchronization which is doubtful). However, after calling removeRandom(), the synchronization is released and now we call the method overflowRemoved()...\r\n\r\nThis overflowRemoved() method is a bit more complex. The default implementation of this method actually does notthing; it's empty. However, in CacheMap, when creating our ConcurrentHashMap, we override this specific method, providing the following implementation:\r\n\r\norg.apache.openjpa.lib.util.concurrent.ConcurrentHashMap.removeOverflow(int maxSize)\r\n{code:java}\r\n\r\n    public CacheMap(boolean lru, int max, int size, float load,\r\n        int concurrencyLevel) {\r\n        ...\r\n        cacheMap = new ConcurrentHashMap(size, load) {\r\n                public void overflowRemoved(Object key, Object value) {\r\n                    cacheMapOverflowRemoved(key, value);\r\n                }\r\n            };\r\n        ...\r\n    }\r\n\r\n    protected void cacheMapOverflowRemoved(Object key, Object value) {\r\n        if (softMap.size() < softMap.getMaxSize())\r\n            put(softMap, key, value);\r\n        else\r\n            entryRemoved(key, value, true);\r\n    }\r\n{code}\r\n\r\nSo, what this means is that when the overflow is removed from the hard cache, there is a brief period in time where the entry exists in neither the hard nor the soft cache. Since non-LRU maps do not seem to maintain readLocks (as described in Heath's analysis) then there is nothing preventing a thread from trying to read during this interval of overflow migration and finding that the value is null. This in fact is the root cause of the NullPointerException Heath analyzed above:\r\n\r\norg.apache.openjpa.persistence.QueryImpl.preExecute(Map params)\r\n{code:java}\r\n    private boolean preExecute(Map params) {\r\n        ...\r\n        //cache read might find the value and return that the _id is registered/cached\r\n        Boolean registered = cache.register(_id, _query, fetch);\r\n        boolean alreadyCached = (registered == null);\r\n        String lang = _query.getLanguage();\r\n        QueryStatistics<String> stats = cache.getStatistics();\r\n        if (alreadyCached && LANG_PREPARED_SQL.equals(lang)) {\r\n            //Now the query is being randomly evicted by some other thread\r\n            //This means we could read here, but the value is in between caches, causing a miss\r\n            PreparedQuery pq = _em.getPreparedQuery(_id);\r\n            if (pq.isInitialized()) {\r\n        ...\r\n    }\r\n{code}\r\n\r\nI believe there are two solutions to this issue. Either 1) rewrite the migration code to sequence hard -> soft cache migration so that there is no time when neither cache contains the query, or 2) implement proper synchronization where write locks block read locks since the root of the issue is allowing dirty reads while a write is occurring.\r\n\r\nI am partial to #2 since this design, while possibly worse for performance, offers better synchronization for all reads/writes. It is possible that other issues are present in this implementation and I believe it is safer to default with an implementation that offers proper synchronization instead of having to code around the problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-01T15:52:13.178+0000","updated":"2018-05-04T20:33:24.828+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16466295","id":"16466295","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fyrewyld","name":"fyrewyld","key":"fyrewyld","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fyrewyld&avatarId=28040","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fyrewyld&avatarId=28040","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fyrewyld&avatarId=28040","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fyrewyld&avatarId=28040"},"displayName":"Jody Grassel","active":true,"timeZone":"America/Chicago"},"body":"Reviewed.  Change looks good to me.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fyrewyld","name":"fyrewyld","key":"fyrewyld","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fyrewyld&avatarId=28040","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fyrewyld&avatarId=28040","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fyrewyld&avatarId=28040","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fyrewyld&avatarId=28040"},"displayName":"Jody Grassel","active":true,"timeZone":"America/Chicago"},"created":"2018-05-07T18:38:43.652+0000","updated":"2018-05-07T18:38:43.652+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16467988","id":"16467988","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1831209 from [~dazeydev] in branch 'openjpa/branches/2.2.x'\n[ https://svn.apache.org/r1831209 ]\n\nOPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-08T21:27:48.865+0000","updated":"2018-05-08T21:27:48.865+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16468477","id":"16468477","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ilgrosso","name":"ilgrosso","key":"ilgrosso","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ilgrosso&avatarId=13240","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ilgrosso&avatarId=13240","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ilgrosso&avatarId=13240","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ilgrosso&avatarId=13240"},"displayName":"Francesco Chicchiriccò","active":true,"timeZone":"Europe/Rome"},"body":"[~dazeydev] can the same fix be applied to 2.4.x?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ilgrosso","name":"ilgrosso","key":"ilgrosso","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ilgrosso&avatarId=13240","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ilgrosso&avatarId=13240","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ilgrosso&avatarId=13240","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ilgrosso&avatarId=13240"},"displayName":"Francesco Chicchiriccò","active":true,"timeZone":"Europe/Rome"},"created":"2018-05-09T06:38:55.726+0000","updated":"2018-05-09T06:38:55.726+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16474327","id":"16474327","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1831578 from [~dazeydev] in branch 'openjpa/branches/2.4.x'\n[ https://svn.apache.org/r1831578 ]\n\nOPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-14T15:02:59.980+0000","updated":"2018-05-14T15:02:59.980+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16474790","id":"16474790","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"body":"There is a small test bug that I uncovered running on tests on trunk. It seems that since my test reuses the same EMF as another existing cache, I need to make sure the cache gets cleared for the other test since that test checks the query statistics. On 2.2.x, apparently the test execution order was different so it didn't show up as an issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-14T20:58:09.039+0000","updated":"2018-05-14T20:58:09.039+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16474848","id":"16474848","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1831594 from [~dazeydev] in branch 'openjpa/branches/2.2.x'\n[ https://svn.apache.org/r1831594 ]\n\nOPENJPA-2646: Fixing test bug to clear cache from other tests","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-14T22:11:31.241+0000","updated":"2018-05-14T22:11:31.241+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16474859","id":"16474859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1831595 from [~dazeydev] in branch 'openjpa/branches/2.4.x'\n[ https://svn.apache.org/r1831595 ]\n\nOPENJPA-2646: Fixing test bug to clear cache from other tests","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-14T22:20:58.704+0000","updated":"2018-05-14T22:20:58.704+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16474956","id":"16474956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1831596 from [~dazeydev] in branch 'openjpa/trunk'\n[ https://svn.apache.org/r1831596 ]\n\nOPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-14T22:25:07.406+0000","updated":"2018-05-14T22:25:07.406+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16475314","id":"16475314","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ilgrosso","name":"ilgrosso","key":"ilgrosso","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ilgrosso&avatarId=13240","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ilgrosso&avatarId=13240","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ilgrosso&avatarId=13240","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ilgrosso&avatarId=13240"},"displayName":"Francesco Chicchiriccò","active":true,"timeZone":"Europe/Rome"},"body":" Thanks [~dazeydev], I have added 3.0.0 since you have also fixed the trunk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ilgrosso","name":"ilgrosso","key":"ilgrosso","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ilgrosso&avatarId=13240","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ilgrosso&avatarId=13240","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ilgrosso&avatarId=13240","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ilgrosso&avatarId=13240"},"displayName":"Francesco Chicchiriccò","active":true,"timeZone":"Europe/Rome"},"created":"2018-05-15T05:58:32.503+0000","updated":"2018-05-15T05:58:32.503+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16503560","id":"16503560","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cristof","name":"cristof","key":"cristof","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Paulo Cristovão de Araújo Silva Filho","active":true,"timeZone":"America/Sao_Paulo"},"body":"[~dazeydev], checked the source of CacheMap.java and noticed that on trunk and 2.2.x, the implementation of readLock() calls _readLock.lock(), but on 2.4.x, it's calling _readLock.unlock(). It was intended or a typo?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cristof","name":"cristof","key":"cristof","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Paulo Cristovão de Araújo Silva Filho","active":true,"timeZone":"America/Sao_Paulo"},"created":"2018-06-06T16:40:46.034+0000","updated":"2018-06-06T16:40:46.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16503562","id":"16503562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cristof","name":"cristof","key":"cristof","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Paulo Cristovão de Araújo Silva Filho","active":true,"timeZone":"America/Sao_Paulo"},"body":"[~dazeydev], checked again... The revision of the file I've checked was 1831578, but the current one (1831595) is ok. Sorry.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cristof","name":"cristof","key":"cristof","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Paulo Cristovão de Araújo Silva Filho","active":true,"timeZone":"America/Sao_Paulo"},"created":"2018-06-06T16:44:54.523+0000","updated":"2018-06-06T16:44:54.523+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16579887","id":"16579887","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"body":"We were pulling in this change to WebSphere and uncovered a performance regression. I expected some kind of performance hit from this change now that we are removing dirty reads from the QueryCache, but this performance impact was too much. Taking a look at the original change again, there is a typo that is causing the regression. Due to the typo, we are currently writing to the hard cache whenever we read from the hard cache. The logic is supposed to be on the soft cache for propagation reasons. This leads to a write for almost all reads... which works, but is horribly bad for performance. The fix is pretty easy and I attached the change to the JIRA ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dazeydev","name":"dazeydev","key":"dazeydev","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dazeydev&avatarId=37311","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dazeydev&avatarId=37311","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dazeydev&avatarId=37311","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dazeydev&avatarId=37311"},"displayName":"Will Dazey","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-14T14:38:29.445+0000","updated":"2018-08-14T14:38:29.445+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16579923","id":"16579923","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1838025 from dazeydev@apache.org in branch 'openjpa/branches/2.2.x'\n[ https://svn.apache.org/r1838025 ]\n\nOPENJPA-2646: Performance Regression fix","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-14T15:01:39.329+0000","updated":"2018-08-14T15:01:39.329+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16579938","id":"16579938","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1838026 from dazeydev@apache.org in branch 'openjpa/branches/2.4.x'\n[ https://svn.apache.org/r1838026 ]\n\nOPENJPA-2646: Performance Regression Fix","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-14T15:09:07.230+0000","updated":"2018-08-14T15:09:07.230+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12981420/comment/16579939","id":"16579939","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"body":"Commit 1838027 from dazeydev@apache.org in branch 'openjpa/trunk'\n[ https://svn.apache.org/r1838027 ]\n\nOPENJPA-2646: Performance Regression Fix","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","key":"jira-bot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-14T15:09:28.846+0000","updated":"2018-08-14T15:09:28.846+0000"}],"maxResults":17,"total":17,"startAt":0},"customfield_12311820":"0|i2ztnz:","customfield_12314139":null}}

