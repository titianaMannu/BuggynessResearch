{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12372712","self":"https://issues.apache.org/jira/rest/api/2/issue/12372712","key":"OPENJPA-272","fields":{"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312341","id":"12312341","description":"","name":"1.0.0","archived":false,"released":true,"releaseDate":"2007-08-28"}],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12312320":null,"customfield_12310420":"18545","customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312340","id":"12312340","description":"","name":"0.9.7","archived":true,"released":true,"releaseDate":"2007-04-27"}],"customfield_12311120":null,"customfield_12313826":null,"customfield_12312339":null,"issuelinks":[],"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12311302","id":"12311302","name":"kernel","description":"Kernel"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"203235","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-272/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@25658569[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47360b4a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a8ca0fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@d9798bd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11f86d5a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3bf060e8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2464a423[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@15878262[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4747bf35[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7f087015[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e4c866b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@57718f52[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310351","id":"12310351","key":"OPENJPA","name":"OpenJPA","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310351&avatarId=10043","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310351&avatarId=10043","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310351&avatarId=10043","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310351&avatarId=10043"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10252","id":"10252","description":"","name":"OpenJPA"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2007-08-06T00:00:08.222+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/OPENJPA-272/watchers","watchCount":0,"isWatching":false},"created":"2007-06-29T18:53:18.095+0000","updated":"2010-03-09T18:32:35.834+0000","timeoriginalestimate":null,"description":"The @GenerateValue annotation doesn't work correctly when applied to via the Property level access (getter method) when using the wrapper classes for the primitive types.  Something like this:\n\n    private Long id;\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\nWith this type of Entity definition, we hit a problem when checking for the \"default value\":\n\n    public boolean isDefaultValue() {\n        return dblval == 0 && longval == 0\n            && (objval == null || \"\".equals(objval));\n    }\n\nFor this scenario, objval is not null and it's not of type String, so we fail this test and return false.  Upon returning the value of false, the calling code skips the call that would have assigned the generated value to the field (in ApplicationIds):\n\n    private static boolean assign(OpenJPAStateManager sm, StoreManager store,\n        FieldMetaData[] pks, boolean preFlush) {\n        for (int i = 0; i < pks.length; i++)\n            if (pks[i].getValueStrategy() != ValueStrategies.NONE\n                && sm.isDefaultValue(pks[i].getIndex())\n                && !store.assignField(sm, pks[i].getIndex(), preFlush))\n                return false;\n        return true;\n    }\n\nI haven't figured out the exact fix yet, but there are two workarounds available:\n\n1.  Use field level annotations instead of property, or...\n2.  Don't use the primitive wrapper types (use long instead of Long).\n\nIn either of these cases, objval is left as null and we are eventually allowed to call store.assignField() which gets the generated value assigned to the field in question (id in this case).\n\nI will keep digging, but if anyone knows the history of the isDefaultValue() method, it would help with getting a quick answer to this Issue.  Since we're dealing with generated values, I'm not clear why we care if values are already assigned to this field or not.  It would seem that we would want to just override what's there.  But, like I said, I need to dive into this a bit.  I just wanted to get the Issue on the books with the information I discovered thus far.\n\nKevin","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"attachment":[],"customfield_12312340":null,"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12310041":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"@GenerateValue (AUTO) doesn't work with Property level access","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12372712/comment/12509181","id":"12509181","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"The result of this type of scenario is that you get duplicate key exceptions because the id generation never takes place.  Thus, you end up with attempting to store multiple rows with the same key of 0:\n\nCaused by: <0.0.0 nonfatal store error> org.apache.openjpa.util.StoreException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL070629094257460' defined on 'GASPURCHASE'. {prepstmnt 429791646 INSERT INTO GASPURCHASE (id, DAYNUMBER, GRADENUMBER, PUMPNUMBER, QUANTITY) VALUES (?, ?, ?, ?, ?) [params=(long) 0, (int) 5, (int) 6, (int) 7, (int) 8]} [code=20000, state=23505]\nFailedObject: com.ibm.ws.jpa.entities.GasPurchaseProperty@4e144e14\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2007-06-29T19:02:08.468+0000","updated":"2007-06-29T19:02:08.468+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12372712/comment/12509188","id":"12509188","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"New information...\n\nMy original posting wasn't quite accurate.  You need to mix the use of primitive and wrapper types to get this to fail:\n\n    private long id;\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    public Long getId() {\n        return id;\n    } \n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\nIn this case, it seems that the autoboxing feature of Java 5 kicks in and when getId() gets called, the default value of \"long id\" (0) is returned as an autoboxed Long.  This returned Long object then throws off the conditional code mentioned above and we don't set the generated value appropriately.\n\nSo, now I go back to my question of why the invocation of sm.isDefaultValue() necessary?  Do we care there's a default value when we're generating one anyway?\n\nKevin\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2007-06-29T19:22:27.487+0000","updated":"2007-06-29T19:22:27.487+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12372712/comment/12510432","id":"12510432","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"body":"Man. Another place where property access rules are annoying.\n\nIt seems like one possible solution would be to just expand what is considered a default value to include auto-boxed values, when running in a JDK1.5 or higher environment.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pcl","name":"pcl","key":"pcl","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Linskey","active":true,"timeZone":"America/Los_Angeles"},"created":"2007-07-05T18:04:57.963+0000","updated":"2007-07-05T18:04:57.963+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12372712/comment/12510456","id":"12510456","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"It's turning out that this is more than just autoboxing.  The setting of initial values for fields annotated with @GeneratedValue is causing several problems.\n\nFor example, even if I have the same types through the Entity definition (where autoboxing does not come into play)...\n\n    private Long id = new Long(5);\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\n.. I still get the duplicate key exceptions because our runtime logic doesn't know the difference between the initial value and somebody setting a value.  As I pointed out in a separate mail thread, the invocation of the setter method was also being allowed to override the @GeneratedValue annotation.  And, once you have set your own id, how do you tell OpenJPA \"okay, I'm done now... go ahead and generate the rest of the ids now...\"?\n\nIt just seems like we're opening a can of worms attempting to support both ways.  I think the @GeneratedValue annotation should take precedence.\n\nKevin","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2007-07-05T19:18:48.872+0000","updated":"2007-07-05T19:18:48.872+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12372712/comment/12517801","id":"12517801","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"I just committed the changes to resolve this issue.  Per the discussion on our dev mailing list (http://www.nabble.com/Allow-overrides-of-%40GeneratedValue--tf4031013.html#a11450606), I decided to go with the more direct response as Patrick and others suggested.  That is, if somebody has @GeneratedValue on a field (id or otherwise) and then attempts to set a value either via an initializer or a setter method, then an InvalidStateException will be thrown.  This will immediately let the user know that something isn't quite right.  At first, I thought this was too drastic and was leaning towards a warning or error message.  But, due to data integrity concerns, I decided to go with an exception to signal the problem.  This will force the user to do something about the situation instead of blindly running with it until s/he notices the error message.\n\nThe exception thrown has a localizer message that indicates the problem and suggested actions to resolve it.\n\nI also provided a new testcase to test for this new condition and the exception processing.\n\nI also had to update the TestSharedMappedSuperclassIdValue testcase since it was incorrectly relying on this \"incorrect\" behavior.\n\nKevin","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2007-08-05T23:59:05.775+0000","updated":"2007-08-05T23:59:05.775+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12372712/comment/12517802","id":"12517802","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"body":"Resolved via revision 562987.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kwsutter","name":"kwsutter","key":"kwsutter","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kevin W. Sutter","active":true,"timeZone":"America/Chicago"},"created":"2007-08-06T00:00:08.214+0000","updated":"2007-08-06T00:00:08.214+0000"}],"maxResults":6,"total":6,"startAt":0},"customfield_12311820":"0|i0z5rb:","customfield_12314139":null}}

