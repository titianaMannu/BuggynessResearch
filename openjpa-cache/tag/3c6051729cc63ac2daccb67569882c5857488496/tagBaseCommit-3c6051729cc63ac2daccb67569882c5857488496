{"sha":"3c6051729cc63ac2daccb67569882c5857488496","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjNjA1MTcyOWNjNjNhYzJkYWNjYjY3NTY5ODgyYzU4NTc0ODg0OTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-19T17:33:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-19T17:33:26Z"},"message":"[maven-release-plugin]  copy for tag 2.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.0.0@935683 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37e6762e3d18544384417f3e7c086059d9fa28ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/37e6762e3d18544384417f3e7c086059d9fa28ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3c6051729cc63ac2daccb67569882c5857488496","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3c6051729cc63ac2daccb67569882c5857488496","html_url":"https://github.com/apache/openjpa/commit/3c6051729cc63ac2daccb67569882c5857488496","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3c6051729cc63ac2daccb67569882c5857488496/comments","author":null,"committer":null,"parents":[{"sha":"47266d3f9316954259841268f9216286cceeb4e6","url":"https://api.github.com/repos/apache/openjpa/commits/47266d3f9316954259841268f9216286cceeb4e6","html_url":"https://github.com/apache/openjpa/commit/47266d3f9316954259841268f9216286cceeb4e6"},{"sha":"e52c11be3b99f62b7509454146278f159c55b329","url":"https://api.github.com/repos/apache/openjpa/commits/e52c11be3b99f62b7509454146278f159c55b329","html_url":"https://github.com/apache/openjpa/commit/e52c11be3b99f62b7509454146278f159c55b329"}],"stats":{"total":584,"additions":313,"deletions":271},"files":[{"sha":"5f39308915042077db0cf56d6dc2cf5dc94f69cf","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -73,6 +73,10 @@\n         <version>2.0.0</version>\n     </parent>\n \n+    <properties>\n+        <openjpa.Log>DefaultLevel=WARN</openjpa.Log>\n+    </properties>\n+\n     <profiles>\n       <profile>\n         <!-- JPA 2.0 TCK Profile -->\n@@ -234,7 +238,7 @@\n                         <property name=\"db.username\" value=\"nousername\" />\n                         <property name=\"db.password\" value=\"nopassword\" />\n \n-                        <property name=\"openjpa.log.level\" value=\"WARN\" />\n+                        <property name=\"openjpa.Log\" value=\"${openjpa.Log}\" />\n \n                         <property name=\"jpatck.pkg.dir\" value=\"com\" />\n                         <property name=\"jpatck.test\" value=\"\" />\n@@ -255,7 +259,7 @@ openjpa.ConnectionPassword: ${db.password}\n openjpa.FetchBatchSize: -1\n openjpa.Compatibility: StrictIdentityValues=true\n openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=${openjpa.log.level}\n+openjpa.Log: ${openjpa.Log}\n openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=false\n openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n                         </echo>"},{"sha":"321fb2ebbed1a92410debc17e9330cf3b15ade43","filename":"openjpa-integration/tck/tck2.xml","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/tck2.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-integration/tck/tck2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/tck2.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,9 +20,10 @@\n \n <!--\n     This ANT build file is used to run the JPA 2.0 TCK. It assumes that you have\n-    the TCK and patches zip files located at:\n+    the TCK, config  and patches zip files located at:\n \n         ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009.zip\n+        ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009_config.zip\n         ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009_patches.zip\n \n     If you have that file in a different location, it can be specified with\n@@ -57,19 +58,26 @@\n         <available property=\"tck.available\" file=\"${tck.zip}\" />\n         <fail unless=\"tck.available\">The TCK file specified in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n \n+        <property name=\"tck_config.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}_config.zip\" />\n+        <available property=\"tck_config.available\" file=\"${tck_config.zip}\" />\n+        <fail unless=\"tck_config.available\">The TCK config file specified in the \"tck_config.zip\" system property (${tck_config.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n+\n         <property name=\"tck_patches.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}_patches.zip\" />\n         <available property=\"tck_patches.available\" file=\"${tck_patches.zip}\" />\n         <fail unless=\"tck_patches.available\">The TCK patches file specified in the \"tck_patches.zip\" system property (${tck_patches.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n \n         <delete dir=\"${tck.dir}\" />\n         <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n+        <unzip overwrite=\"true\" src=\"${tck_config.zip}\" dest=\"${tck.base}\" />\n         <unzip overwrite=\"true\" src=\"${tck_patches.zip}\" dest=\"${tck.base}\" />\n         <copy overwrite=\"true\"\n             file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.dir}/bin/ts.jte.orig\" />\n         <copy overwrite=\"true\"\n             file=\"${tck.dir}/bin/ts.jtx\" tofile=\"${tck.dir}/bin/ts.jtx.orig\" />\n         <!-- Pluggability tests using Toplink needs this dir created -->\n         <mkdir dir=\"${tck.dir}/domains/domain1/logs\" />\n+        <!-- create other missing directory -->\n+        <mkdir dir=\"${tck.dir}/weblib\" />\n     </target>\n \n \n@@ -84,7 +92,7 @@\n         <property name=\"db.username\" value=\"nousername\" />\n         <property name=\"db.password\" value=\"nopassword\" />\n \n-        <property name=\"openjpa.log.level\" value=\"WARN\" />\n+        <property name=\"openjpa.Log\" value=\"DefaultLevel=TRACE\" />\n \n         <property name=\"jpatck.test\" value=\"\" />\n \n@@ -103,7 +111,7 @@ openjpa.ConnectionPassword: ${db.password}\n openjpa.FetchBatchSize: -1\n openjpa.Compatibility: StrictIdentityValues=true\n openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=${openjpa.log.level}\n+openjpa.Log: ${openjpa.Log}\n openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=true\n openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n openjpa.jdbc.SynchronizeMappings: buildSchema(ForeignKeys=true)"},{"sha":"8799e63f9498e3fe879b316e77cc296bdb38f16c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -57,15 +57,15 @@\n \t// Key: Query identifier Value: Reason why excluded\n \tprivate final Map<String, Exclusion> _uncachables;\n \tprivate final List<Exclusion> _exclusionPatterns;\n-\tprivate final QueryStatistics<String> _stats;\n+\tprivate QueryStatistics<String> _stats;\n+\tprivate boolean _statsEnabled;\n \tprivate ReentrantLock _lock = new ReentrantLock();\n \tprivate Log _log;\n     private static Localizer _loc = Localizer.forPackage(PreparedQueryCacheImpl.class);\n     \n \tpublic PreparedQueryCacheImpl() {\n \t\t_delegate = new CacheMap();\n \t\t_uncachables = new CacheMap();\n-\t\t_stats = new QueryStatistics.Default<String>();\n \t\t_exclusionPatterns = new ArrayList<Exclusion>();\n \t}\n \t\n@@ -316,6 +316,14 @@ public void clear() {\n         _delegate.clear();\n         _stats.clear();\n     }\n+    \n+    public void setEnableStatistics(boolean enable){\n+        _statsEnabled = enable;\n+    }\n+    \n+    public boolean getEnableStatistics(){\n+        return _statsEnabled;\n+    }\n         \n \t//-------------------------------------------------------\n \t// Configurable contract\n@@ -328,6 +336,8 @@ public void startConfiguration() {\n     }\n \n     public void endConfiguration() {\n+        _stats = _statsEnabled ? new QueryStatistics.Default<String>() :\n+                                 new QueryStatistics.None<String>();\n     }\n     \n     /**"},{"sha":"a741595919941bb9a2530bf357426255058104eb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -572,9 +572,12 @@ public void generateTables(DBIdentifier schemaName, DBIdentifier tableName,\n         Schema schema;\n         Table table;\n         DBIdentifier tableSchema = DBIdentifier.NULL;\n+        DBIdentifier baseTableName = (tableName == null) ? DBIdentifier.NULL : tableName.clone();\n         for (int i = 0; cols != null && i < cols.length; i++) {\n-            if (DBIdentifier.isNull(tableName) || tableName.equals(\"%\")) {\n+            if (DBIdentifier.isNull(baseTableName) || baseTableName.equals(\"%\")) {\n                 tableName = cols[i].getTableIdentifier();\n+            } else {\n+            \ttableName = baseTableName;\n             }\n             if (DBIdentifier.isNull(schemaName)) {\n                 tableSchema = DBIdentifier.trimToNull(cols[i].getSchemaIdentifier());"},{"sha":"34a4f4a9ad162139afb644799a3a1ec481d78515","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -195,8 +195,21 @@\n \t */\n \tpublic void clear();\n \t\n+\t/**\n+\t * Enable/disable gathering of statistics.\n+\t * \n+\t */\n+    public void setEnableStatistics(boolean enable);\n+    \n+    /**\n+     * Affirm if statistics is gathered.\n+     * \n+     */\n+    public boolean getEnableStatistics();\n+    \n \t/**\n \t * Gets the simple statistics for executed queries.\n+\t * If the statistics gathering is disabled, an empty statistics is returned. \n \t */\n \tpublic QueryStatistics<String> getStatistics();\n \t"},{"sha":"02e4c5087169aa76cdccffae9d678c98b16589de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","status":"modified","additions":91,"deletions":13,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,11 +20,13 @@\n \n import java.io.PrintStream;\n import java.io.Serializable;\n+import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.lib.util.concurrent.SizedConcurrentHashMap;\n+\n /**\n  * Records query execution statistics.\n  * \n@@ -119,17 +121,24 @@\n \t\n \t/**\n \t * A default implementation.\n-\t *\n+\t * \n+\t * Maintains statistics for only a fixed number of queries.\n+\t * Statistical counts are approximate and not exact (to keep thread synchorization overhead low).\n+\t * \n \t */\n \tpublic static class Default<T> implements QueryStatistics<T> {\n+\t    private static final int FIXED_SIZE = 1000;\n+\t    private static final float LOAD_FACTOR = 0.75f;\n+\t    private static final int CONCURRENCY = 16;\n+\t    \n \t\tprivate static final int ARRAY_SIZE = 2;\n         private static final int READ  = 0;\n         private static final int HIT   = 1;\n         \n \t\tprivate long[] astat = new long[ARRAY_SIZE];\n \t\tprivate long[] stat  = new long[ARRAY_SIZE];\n-\t\tprivate Map<T, long[]> stats  = new HashMap<T, long[]>();\n-\t\tprivate Map<T, long[]> astats = new HashMap<T, long[]>();\n+\t\tprivate Map<T, long[]> stats  = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t\tprivate Map<T, long[]> astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = start;\n \t\t\n@@ -182,17 +191,17 @@ public Date start() {\n \t\t\treturn start;\n \t\t}\n \n-\t\tpublic void reset() {\n+\t\tpublic synchronized void reset() {\n \t\t\tstat = new long[ARRAY_SIZE];\n \t\t\tstats.clear();\n \t\t\tsince = new Date();\n \t\t}\n \t\t\n-\t    public void clear() {\n+\t    public synchronized void clear() {\n \t       astat = new long[ARRAY_SIZE];\n \t       stat  = new long[ARRAY_SIZE];\n-\t       stats = new HashMap<T, long[]>();\n-\t       astats = new HashMap<T, long[]>();\n+\t       stats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t       astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n \t       start  = new Date();\n \t       since  = start;\n \t    }\n@@ -217,7 +226,7 @@ private void addSample(Map<T, long[]> target, T query, int i) {\n \t\tpublic void recordExecution(T query) {\n \t\t    if (query == null)\n \t\t        return;\n-\t\t    boolean cached = (astats.containsKey(query));\n+\t\t    boolean cached = astats.containsKey(query);\n \t\t\taddSample(query, READ);\n \t\t\tif (cached)\n \t\t\t\taddSample(query, HIT);\n@@ -244,8 +253,7 @@ public void dump(PrintStream out) {\n                     out.println(i + \". \\t\" + toString(arow) + \" \\t\" + key);\n \t\t\t\t} else {\n \t\t\t\t\tlong[] row  = stats.get(key);\n-                    out.println(i + \". \\t\" + toString(arow) + \" \\t\"  \n-\t\t\t\t\t    + toString(row) + \" \\t\\t\" + key);\n+                    out.println(i + \". \\t\" + toString(arow) + \" \\t\"  + toString(row) + \" \\t\\t\" + key);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -257,8 +265,78 @@ long pct(long per, long cent) {\n \t\t}\n \t\t\n \t\tString toString(long[] row) {\n-            return row[READ] + \":\" + row[HIT] + \"(\" + pct(row[HIT], row[READ])\n-\t\t\t+ \"%)\";\n+            return row[READ] + \":\" + row[HIT] + \"(\" + pct(row[HIT], row[READ]) + \"%)\";\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * A do-nothing implementation.\n+\t * \n+\t * @author Pinaki Poddar\n+\t *\n+\t * @param <T>\n+\t */\n+\tpublic static class None<T> implements QueryStatistics<T> {\n+        private Date start = new Date();\n+        private Date since = start;\n+\n+        public void clear() {\n+        }\n+\n+        public void dump(PrintStream out) {\n+        }\n+\n+        public long getExecutionCount() {\n+            return 0;\n+        }\n+\n+        public long getExecutionCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getHitCount() {\n+            return 0;\n+        }\n+\n+        public long getHitCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getTotalExecutionCount() {\n+            return 0;\n+        }\n+\n+        public long getTotalExecutionCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getTotalHitCount() {\n+            return 0;\n+        }\n+\n+        public long getTotalHitCount(T query) {\n+            return 0;\n+        }\n+\n+        public Set<T> keys() {\n+            return Collections.emptySet();\n+        }\n+\n+        public void recordExecution(T query) {\n+        }\n+\n+        public void reset() {\n+            start  = new Date();\n+            since  = start;\n+        }\n+\n+        public Date since() {\n+            return since;\n+        }\n+\n+        public Date start() {\n+            return start;\n+        }\n+\t}\n }\n+"},{"sha":"dae47dfedf9875e5e41e91d27912668f15625efb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -1567,12 +1567,7 @@ private void clearInternal(){\n     public void register(Class<?> cls) {\n         // buffer registered classes until an oid metadata request is made,\n         // at which point we'll parse everything in the buffer\n-        if (_locking) {\n-            synchronized (_registered) {\n-                _registered.add(cls);\n-                registerAlias(cls);\n-            }\n-        } else {\n+        synchronized (_registered) {\n             _registered.add(cls);\n             registerAlias(cls);\n         }\n@@ -1603,16 +1598,10 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n         // copy into new collection to avoid concurrent mod errors on reentrant\n         // registrations\n         Class<?>[] reg;\n-        if (_locking) {\n-            synchronized (_registered) {\n-                reg = _registered.toArray(new Class[_registered.size()]);\n-                _registered.clear();\n-            }\n-        } else {\n+\t\tsynchronized (_registered) {\n             reg = _registered.toArray(new Class[_registered.size()]);\n             _registered.clear();\n         }\n-        \n \n         Collection<String> pcNames = getPersistentTypeNames(false, envLoader);\n         Collection<Class<?>> failed = null;\n@@ -1636,11 +1625,7 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n             }\n         }\n         if (failed != null) {\n-            if (_locking) {\n-                synchronized (_registered) {\n-                    _registered.addAll(failed);\n-                }\n-            } else {\n+            synchronized (_registered) {\n                 _registered.addAll(failed);\n             }\n         }"},{"sha":"cb0d178ee7007b83872edeb207939ed90a4e215b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that query statistics are collected in a thread-safe manner.\n+ *  \n+ * @author Rick Curtis\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestDefaultQueryStatistics extends SingleEMFTestCase {\n+    QueryStatistics<String> statistics;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        statistics = new QueryStatistics.Default<String>();\n+    }\n+    \n+    public void testThreadSafety() throws Exception{\n+        final QueryStatistics<String> finalStats = statistics;\n+        \n+        Runnable runner = new Runnable() {\n+            public void run() {\n+                for (int i = 0; i < 10000; i++) {\n+                    finalStats.recordExecution(\"query \" + Thread.currentThread().getId() + \" \" + i);\n+                }\n+            }\n+        };\n+        \n+        List<Thread> threads = new ArrayList<Thread>();\n+        for(int i = 0;i<10;i++){\n+            threads.add(new Thread(runner));\n+        }\n+        for(Thread t : threads){\n+            t.start();\n+        }\n+        for(Thread t : threads){\n+            t.join();\n+        }\n+        assertEquals(1000, finalStats.keys().size());\n+    }\n+    \n+    public void testStatsSize() throws Exception{\n+        for (int i = 0; i < 10000; i++) {\n+            statistics.recordExecution(\"query \" + Thread.currentThread().getId() + \" \" + i);\n+        }\n+        assertEquals(1000, statistics.keys().size());\n+    }\n+    \n+    public void testQueryStatisticsIsDisabledByDefault() {\n+        PreparedQueryCache cache = emf.getConfiguration().getQuerySQLCacheInstance();\n+        assertNotNull(cache);\n+        QueryStatistics<String> stats = cache.getStatistics();\n+        assertNotNull(stats);\n+        assertTrue(stats.keys().isEmpty());\n+        assertEquals(QueryStatistics.None.class, stats.getClass());\n+    }\n+}"},{"sha":"286023a5c7698b7c0497f08ddd42ba95ac0c1e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -109,7 +109,7 @@ public void setUp()  {\n             Properties config = new Properties();\n             config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n             config.put(\"openjpa.jdbc.JDBCListeners\", new JDBCListener[] { auditor = new SQLAuditor()});\n-            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true)\");\n             config.put(\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n             config.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n             emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory("},{"sha":"02bad512f754754448c639575481f97c10589895","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":16,"deletions":28,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -51,10 +51,6 @@\n     private final OpenJPAConfiguration _conf;\n     private final Log _log;\n     private MetaDataRepository _repos = null;\n-\n-    // the class we were invoked to parse\n-    private Class _cls = null;\n-    private FieldMetaData _fmd = null;\n     \n     // cache the JAXB Xml... classes if they are present so we do not\n     // have a hard-wired dependency on JAXB here\n@@ -146,56 +142,48 @@ public void setRepository(MetaDataRepository repos) {\n      * Clear caches.\n      */\n     public void clear() {\n-        _cls = null;\n-        _fmd = null;\n     }\n \n     /**\n-     * Parse persistence metadata for the given field metadata.\n+     * Parse persistence metadata for the given field metadata. If the MetaData(/Mapping)Repository\n+     * is using locking, that lock MUST be held prior to calling this method.\n      */\n-    public void parse(FieldMetaData fmd) {\n-        _fmd = fmd;\n-        _cls = fmd.getDeclaredType();\n+    public synchronized void parse(FieldMetaData fmd) {\n+        Class<?> cls = fmd.getDeclaredType();\n         if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"parse-class\", _cls.getName()));\n-\n-        try {\n-            parseXMLClassAnnotations();\n-        } finally {\n-            _cls = null;\n-            _fmd = null;\n-        }\n+            _log.trace(_loc.get(\"parse-class\", cls.getName()));\n+        parseXMLClassAnnotations(cls, fmd);\n     }\n \n     /**\n      * Read annotations for the current type.\n      */\n-    private XMLMetaData parseXMLClassAnnotations() {\n+    private XMLMetaData parseXMLClassAnnotations(Class<?> cls, FieldMetaData fmd) {\n         // check immediately whether the class has JAXB XML annotations\n-        if (_cls == null || xmlTypeClass == null\n+        if (cls == null || xmlTypeClass == null\n             || !((AccessController.doPrivileged(J2DoPrivHelper\n-                .isAnnotationPresentAction(_cls, xmlTypeClass))).booleanValue()\n+                .isAnnotationPresentAction(cls, xmlTypeClass))).booleanValue()\n                 && (AccessController\n-                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(cls,\n                     xmlRootElementClass))).booleanValue()))\n             return null;\n \n         // find / create metadata\n-        XMLMetaData meta = getXMLMetaData();\n+        XMLMetaData meta = getXMLMetaData(cls, fmd);\n         \n         return meta;\n     }\n \n     /**\n      * Find or create xml metadata for the current type. \n      */\n-    private synchronized XMLMetaData getXMLMetaData() {\n-        XMLMetaData meta = getRepository().getCachedXMLMetaData(_cls);\n+    private XMLMetaData getXMLMetaData(Class<?> cls, FieldMetaData fmd) {\n+        XMLMetaData meta = getRepository().getCachedXMLMetaData(cls);\n         if (meta == null) {\n             // if not in cache, create metadata\n-            meta = getRepository().addXMLMetaData(_cls, _fmd.getName());\n-            parseXmlRootElement(_cls, meta);\n-            populateFromReflection(_cls, meta);\n+            meta = getRepository().addXMLMetaData(cls, fmd.getName());\n+            parseXmlRootElement(cls, meta);\n+            populateFromReflection(cls, meta);\n         }\n         return meta;\n     }"},{"sha":"3b0333aed1381f37e06a1a5d12ea9de768bc18f7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -508,8 +508,12 @@ private boolean preExecute(Map params) {\n             return false;\n         }\n         FetchConfiguration fetch = _query.getFetchConfiguration();\n-        if (fetch.getReadLockLevel() != 0)\n+        if (fetch.getReadLockLevel() != 0) {\n+            if (cache.get(_id) != null) {\n+                ignorePreparedQuery();\n+            }\n             return false;\n+        }\n         Boolean registered = cache.register(_id, _query, fetch);\n         boolean alreadyCached = (registered == null);\n         String lang = _query.getLanguage();"},{"sha":"39b19b357c51c66dd8aa098876a9a983da98615f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":24,"deletions":179,"changes":203,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -20,14 +20,10 @@\n \n import static javax.lang.featureSelection.SourceVersion.RELEASE_6;\n \n-import java.io.File;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.io.PrintWriter;\n-import java.net.URI;\n import java.net.URL;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -47,11 +43,7 @@\n import javax.lang.featureSelection.util.Elements;\n import javax.persistence.metamodel.StaticMetamodel;\n import javax.tools.Diagnostic;\n-import javax.tools.JavaCompiler;\n import javax.tools.JavaFileObject;\n-import javax.tools.StandardJavaFileManager;\n-import javax.tools.StandardLocation;\n-import javax.tools.ToolProvider;\n \n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n@@ -66,39 +58,29 @@\n  * This tool is invoked during compilation for JDK6 compiler if \n  * <UL>\n  * <LI>OpenJPA and JPA libraries are available in the compiler classpath\n- * and <LI>Annotation Processor option <code>-Aopenjpa.generate=true</code> is specified.\n+ * and <LI>Annotation Processor option <code>-Aopenjpa.metamodel=true</code> is specified.\n  * </UL>\n  * <br>\n  * <B>Usage</B><br>\n- * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generated=true mypackage/MyEntity.java</code><br>\n+ * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.metamodel=true mypackage/MyEntity.java</code><br>\n  * will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n+ * The source code is generated relative to the directory specified in <code>-s</code> option\n+ * of <code>javac</code> compiler and defaulted to the current directory.\n  * <p>\n- * The Annotation Processor also recognizes the following options (none of them are mandatory).\n- * Each of the following option key can also be prefixed with <code>openjpa.</code> to distinguish if multiple \n- * annotation processors are active during compilation:<br>\n+ * The Annotation Processor also recognizes the following options (none of them are mandatory):<br>\n  * <TABLE border=\"1\">\n- * <TR><TD>-Alog={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n+ * <TR><TD>-Aopenjpa.log={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n  *     <code>TRACE</code>, <code>INFO</code>, <code>WARN</code> or <code> ERROR</code>.\n- * <TR><TD>-Asource={n}         <TD>Java source version of the generated code. Default is <code>6</code>.\n- * <TR><TD>-Anaming={class name}        <TD>fully-qualified name of a class implementing \n+ * <TR><TD>-Aopenjpa.source={n}          <TD>Java source version of the generated code. Default is <code>6</code>.\n+ * <TR><TD>-Aopenjpa.naming={class name} <TD>fully-qualified name of a class implementing \n  * <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n  * the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n  * <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n  * (<code>_</code>) to the original Java class name. \n- * <TR><TD>-Aheader={url}           <TD>\n+ * <TR><TD>-Aopenjpa.header={url}        <TD>\n  * A url whose content will appear as comment header to the generated file(s). Recognizes special value\n  * <code>ASL</code> for Apache Source License header as comment. By default adds a OpenJPA proprietary   \n  * text.\n- * <TR><TD>-Aout={dir}                      <TD>\n- * A directory in the local file system. The generated files will be written <em>relative</em> to this directory\n- * according to the package structure i.e. if <code>dir</code> is specified as <code>/myproject/generated-src</code>\n- * then the generated source code will be written to <code>/myproject/generated-src/mypackage/MyEntity_.java</code>.\n- * If this option is not specified, then an attempt will be made to write the generated source file in the same\n- * directory of the source code of original class <code>mypackage.MyEntity</code>. The source code location for \n- * <code>mypackage.MyEntity</code> can only be determined for Sun JDK6 and <code>tools.jar</code> being available \n- * to the compiler classpath. If the source code location for the original class can not be determined, and the \n- * option is not specified, then the generated source code is written relative to the current directory according \n- * to the package structure.  \n  * </TABLE>\n  * <br>\n  *\n@@ -111,19 +93,16 @@\n     \"javax.persistence.Entity\",\n     \"javax.persistence.Embeddable\", \n     \"javax.persistence.MappedSuperclass\" })\n-@SupportedOptions({ \"openjpa.log\", \"log\", \n-                     \"openjpa.out\", \"out\", \n-                     \"openjpa.source\", \"source\",\n-                     \"openjpa.naming\", \"naming\",\n-                     \"openjpa.header\", \"header\",\n-                     \"openjpa.generate\"\n+@SupportedOptions({ \"openjpa.log\", \n+                    \"openjpa.source\",\n+                    \"openjpa.naming\",\n+                    \"openjpa.header\",\n+                    \"openjpa.metamodel\"\n                   })\n @SupportedSourceVersion(RELEASE_6)\n \n public class AnnotationProcessor6 extends AbstractProcessor {\n     private SourceAnnotationHandler handler;\n-    private StandardJavaFileManager fileManager;\n-    private boolean isUserSpecifiedOutputLocation;\n     private MetaDataFactory factory;\n     private int generatedSourceVersion = 6;\n     private CompileTimeLogger logger;\n@@ -206,13 +185,12 @@ private TypeCategory toMetaModelTypeCategory(TypeMirror mirror,\n     @Override\n     public synchronized void init(ProcessingEnvironment processingEnv) {\n         super.init(processingEnv);\n-        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.generate\"));\n+        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.metamodel\"));\n         if (!active)\n             return;\n         processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, _loc.get(\"mmg-tool-banner\").toString());\n-        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\", \"log\"));\n+        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\"));\n         setSourceVersion();\n-        setFileManager();\n         setNamingPolicy();\n         setHeader();\n         handler = new SourceAnnotationHandler(processingEnv, logger);\n@@ -252,8 +230,7 @@ private boolean process(TypeElement e) {\n         annotate(source, originalClass);\n         TypeElement supCls = handler.getPersistentSupertype(e);\n         if (supCls != null) {\n-            String superName = factory.getMetaModelClassName(\n-                    supCls.toString());\n+            String superName = factory.getMetaModelClassName(supCls.toString());\n             source.getTopLevelClass().setSuper(superName);\n         }\n         try {\n@@ -327,12 +304,12 @@ private void comment(SourceCode source) {\n     }\n     \n     /**\n-     * Parse annotation processor option <code>-Asource=n</code> to detect\n+     * Parse annotation processor option <code>-Aopenjpa.source=n</code> to detect\n      * the source version for the generated classes. \n      * n must be a integer. Default or wrong specification returns 6.\n      */\n     private void setSourceVersion() {\n-        String version = getOptionValue(\"openjpa.source\", \"source\");\n+        String version = getOptionValue(\"openjpa.source\");\n         if (version != null) {\n             try {\n                 generatedSourceVersion = Integer.parseInt(version);\n@@ -346,7 +323,7 @@ private void setSourceVersion() {\n     }\n     \n     private void setNamingPolicy() {\n-        String policy = getOptionValue(\"openjpa.naming\",\"naming\");\n+        String policy = getOptionValue(\"openjpa.naming\");\n         if (policy != null) {\n             try {\n                 factory = (MetaDataFactory)Class.forName(policy).newInstance();\n@@ -360,7 +337,7 @@ private void setNamingPolicy() {\n     }\n     \n     private void setHeader() {\n-        String headerOption = getOptionValue(\"openjpa.header\", \"header\");\n+        String headerOption = getOptionValue(\"openjpa.header\");\n         if (headerOption == null) {\n             return;\n         }\n@@ -376,54 +353,15 @@ private void setHeader() {\n         }\n     }\n     \n-    private void setFileManager() {\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        fileManager = compiler.getStandardFileManager(null, null, null);\n-        String outDir = getOptionValue(\"openjpa.out\", \"out\");\n-        if (outDir != null)\n-           isUserSpecifiedOutputLocation = setSourceOutputDirectory(new File(outDir));\n-    }\n-\n     /**\n      * Creates a file where source code of the given metaClass will be written.\n      * \n      */\n     private PrintWriter createSourceFile(String originalClass, String metaClass, TypeElement e) \n         throws IOException {\n-        if (!isUserSpecifiedOutputLocation) {\n-            setSourceOutputDirectory(OutputPath.getAbsoluteDirectory(processingEnv, e));\n-        }\n-        JavaFileObject javaFile = fileManager.getJavaFileForOutput(StandardLocation.SOURCE_OUTPUT, \n-            metaClass, JavaFileObject.Kind.SOURCE, \n-            null); // do not use sibling hint because of indeterminable behavior across JDK \n-        logger.info(_loc.get(\"mmg-process\", javaFile.toUri()));\n-        OutputStream out = javaFile.openOutputStream();\n-        PrintWriter writer = new PrintWriter(out);\n-        return writer;\n-    }\n-    \n-    /**\n-     * Sets the output directory for generated source files.\n-     * Tries to create the directory structure if does not exist.\n-     * \n-     * @return true if the output has been set successfully.\n-     */\n-    boolean setSourceOutputDirectory(File outDir) {\n-        if (outDir == null)\n-            return false;\n-        if (!outDir.exists()) {\n-            if (!outDir.mkdirs()) {\n-                logger.warn(_loc.get(\"mmg-bad-out\", outDir, StandardLocation.SOURCE_OUTPUT));\n-                return false;\n-            }\n-        }\n-        try {\n-            fileManager.setLocation(StandardLocation.SOURCE_OUTPUT, Collections.singleton(outDir));\n-            return true;\n-        } catch (IOException e) {\n-            logger.warn(_loc.get(\"mmg-bad-out\", outDir, StandardLocation.SOURCE_OUTPUT));\n-            return false;\n-        }\n+        JavaFileObject javaFile = processingEnv.getFiler().createSourceFile(metaClass, e);\n+        logger.info(_loc.get(\"mmg-process\", javaFile.toUri().normalize()));\n+        return new PrintWriter(javaFile.openWriter());\n     }\n     \n     /**\n@@ -437,97 +375,4 @@ private String getOptionValue(String... keys) {\n         }\n         return null;\n     }\n-    \n-    /**\n-     * An utility class to determine the source file corresponding to a {@link TypeElement}.\n-     * The utility uses Sun JDK internal API (com.sun.tools.*) and hence works reflectively\n-     * to avoid compile-time dependency.\n-     *   \n-     * @author Pinaki Poddar\n-     *\n-     */\n-    public static class OutputPath {\n-        private static Class<?> trees = null;\n-        static {\n-            try {\n-                trees = Class.forName(\"com.sun.source.util.Trees\");\n-            } catch (Throwable t) {\n-                \n-            }\n-        }\n-        \n-        /**\n-         * Gets the directory relative to the Java source file corresponding to the TypeElement.\n-         * \n-         * @return null if the com.sun.source.util.* package is not available or the given TypeElement\n-         * does not correspond to a compilation unit associated to a source file.\n-         */\n-        public static File getAbsoluteDirectory(ProcessingEnvironment env, TypeElement e) {\n-            if (trees == null)\n-                return null;\n-            try {\n-                // Trees root = Trees.instance(env);\n-                Object root = trees.getMethod(\"instance\", new Class[]{ProcessingEnvironment.class})\n-                    .invoke(null, env);\n-                \n-                // TreePath path = root.getPath(e);\n-                Object path = root.getClass().getMethod(\"getPath\", new Class[]{Element.class})\n-                    .invoke(root, e);\n-                \n-                // CompilationUnitTree unit = path.getCompilationUnit();\n-                Object unit = path.getClass().getMethod(\"getCompilationUnit\", (Class[])null)\n-                    .invoke(path, (Object[])null);\n-                \n-                // JavaFileObject f = unit.getSourceFile();\n-                JavaFileObject f = (JavaFileObject)unit.getClass().getMethod(\"getSourceFile\", (Class[])null)\n-                    .invoke(unit, (Object[])null);\n-                \n-                URI uri = f.toUri();\n-                File dir = getParentFile(new File(uri.toURL().getPath()), \n-                        packageDepth(e.getQualifiedName().toString()));\n-                return dir;\n-            } catch (Throwable t) {\n-                return null;\n-            }\n-        }\n-        \n-        /**\n-         * Gets the parent of the given file recursively traversing to given number of levels.\n-         */\n-        public static File getParentFile(File f, int n) {\n-            if (n < 0)\n-                return f;\n-            if (n == 0)\n-                return f.getParentFile();\n-            return getParentFile(f.getParentFile(), n-1);\n-        }\n-        \n-        public static int packageDepth(String s) {\n-            String pkg = getPackageName(s);\n-            if (pkg == null)\n-                return 0;\n-            int depth = 1;\n-            int i = 0;\n-            while ((i = pkg.indexOf('.')) != -1) {\n-                depth++;\n-                pkg = pkg.substring(i+1);\n-            }\n-            return depth;\n-        }\n-        \n-        public static String getPackageName(String s) {\n-            if (s == null)\n-                return null;\n-            int i = s.lastIndexOf('.');\n-            return (i == -1) ? null : s.substring(0, i);\n-        }\n-        \n-        public static String getSimpleName(String s) {\n-            if (s == null)\n-                return null;\n-            int i = s.lastIndexOf('.');\n-            return (i == -1) ? s : s.substring(i+1);\n-        }\n-    }\n-\n }"},{"sha":"e47619ad93b217aba4dab410f4ec06308c128841","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -172,6 +172,7 @@ Sub-task\n \n Bug\n ---\n+    * [OPENJPA-1091] - ReverseMappingTool fails for openjpa-examples/reversemapping sample\n     * [OPENJPA-1510] - Documentation corrections\n     * [OPENJPA-1550] - When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.\n     * [OPENJPA-1559] - DataCacheManager initialization isn't thread safe.\n@@ -180,18 +181,22 @@ Bug\n     * [OPENJPA-1599] - Cache mode properties passes in to em.find and lock methods are not transient\n     * [OPENJPA-1602] - Query with lock mode set to PESSIMISTIC_WRITE does not have for update clause attached to the sql when runs twice\n     * [OPENJPA-1604] - Setting PessimisticLockManager fails to append \"for update clause\" to the select statement\n+    * [OPENJPA-1605] - ReverseMappingTool (SchemaGenerator) bug\n     * [OPENJPA-1608] - PESSIMISTIC_WRITE is not working in Informix\n     * [OPENJPA-1609] - PessimisticLockException instead of LockTimeoutException thrown on DB2V9 for ZOS\n     * [OPENJPA-1611] - Wrong PersistentAttributeType returned for @Embedded types\n     * [OPENJPA-1618] - Exception during factory creation due to javax.persistence.transactionType\n     * [OPENJPA-1625] - Inconsistent creation of StateManagerImpl in BrokerImpl\n+    * [OPENJPA-1630] - NPE in MetaDataRepository when preloading is enabled under heavy stress.\n+    * [OPENJPA-1631] - MetaDataRepository preload doesn't load JAXB meta data\n \n Improvement\n -----------\n     * [OPENJPA-1382] - make org.apache.openjpa.persistence.meta.AnnotationProcessor6 as service\n     * [OPENJPA-1545] - Add new Detach processing\n     * [OPENJPA-1603] - Decouple the QueryCache from the DataCache\n     * [OPENJPA-1622] - Invoking MetaModel generator\n+    * [OPENJPA-1628] - Output control for generated canonical metamodel source code\n \n Task\n ----"},{"sha":"6f34ac8cf090e596d5f8a93242a58952238af23d","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -240,6 +240,8 @@ <h4>Sub-task</h4>\n \n <h4>Bug</h4>\n <ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1091'>OPENJPA-1091</a>] -         ReverseMappingTool fails for openjpa-examples/reversemapping sample\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1510'>OPENJPA-1510</a>] -         Documentation corrections\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1550'>OPENJPA-1550</a>] -         When batchLimit=-1 or &gt;1 and an exception is caused, the params and failedObject are missing from the resultant exception.\n@@ -256,6 +258,8 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1604'>OPENJPA-1604</a>] -         Setting PessimisticLockManager fails to append &quot;for update clause&quot; to the select statement\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1605'>OPENJPA-1605</a>] -         ReverseMappingTool (SchemaGenerator) bug\n+</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1608'>OPENJPA-1608</a>] -         PESSIMISTIC_WRITE is not working in Informix\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1609'>OPENJPA-1609</a>] -         PessimisticLockException instead of LockTimeoutException thrown on DB2V9 for ZOS\n@@ -266,6 +270,10 @@ <h4>Bug</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1625'>OPENJPA-1625</a>] -         Inconsistent creation of StateManagerImpl in BrokerImpl\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1630'>OPENJPA-1630</a>] -         NPE in MetaDataRepository when preloading is enabled under heavy stress.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1631'>OPENJPA-1631</a>] -         MetaDataRepository preload doesn't load JAXB meta data\n+</li>\n </ul>\n \n <h4>Improvement</h4>\n@@ -278,6 +286,8 @@ <h4>Improvement</h4>\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1622'>OPENJPA-1622</a>] -         Invoking MetaModel generator\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1628'>OPENJPA-1628</a>] -         Output control for generated canonical metamodel source code\n+</li>\n </ul>\n \n <h4>Task</h4>"},{"sha":"437ce2b3cbd7e680194671084b07acb89c67d44b","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -168,32 +168,31 @@ Annotation processing tool generates source code for a metamodel class given\n the annotated source code of persistent entity. \n This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n libraries are specified in the compiler <code>-classpath</code> option <emphasis>and</emphasis>\n-Annotation processor option <code>-Aopenjpa.generate=true</code> is specified.\n+Annotation processor option <code>-Aopenjpa.metamodel=true</code> is specified.\n     <programlisting>\n- $ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generate=true mypackage/MyEntity.java\n+ $ javac -classpath path/to/openjpa-all.jar -Aopenjpa.metamodel=true mypackage/MyEntity.java\n     </programlisting>\n will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n       </para>\n       \n       <para>\n The Annotation Processor recognizes the following options specified in the command-line with <code>-A</code> \n-(none of them are mandatory). Each of the following option key can also be prefixed with <code>openjpa.</code> \n-to distinguish if multiple annotation processors are active during compilation.\n+(none of them are mandatory).\n     <itemizedlist>\n         <listitem>\n \t\t\t<para>\n-              -Alog=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n+              -Aopenjpa.log=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n             </para>\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-             -Asource=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n+             -Aopenjpa.source=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n              version of the generated code. Default is <code>6</code>.\n              </para>\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-               -Anaming=class name : fully-qualified name of a class implementing \n+               -Aopenjpa.naming=class name : fully-qualified name of a class implementing \n                <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n@@ -202,7 +201,7 @@ the name of a meta-class given the name of the original persistent Java entity c\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-               -Aheader=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n+               -Aopenjpa.header=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n                Recognizes special value <code>ASL</code> for Apache Source License header as comment. \n                By default, adds a OpenJPA proprietary text as comment block.\n              </para>"},{"sha":"5e265fecc8efb93aba4b259bcdcc393e0eefe093","filename":"scripts/mmg.bat","status":"modified","additions":22,"deletions":11,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/3c6051729cc63ac2daccb67569882c5857488496/scripts/mmg.bat","raw_url":"https://github.com/apache/openjpa/raw/3c6051729cc63ac2daccb67569882c5857488496/scripts/mmg.bat","contents_url":"https://api.github.com/repos/apache/openjpa/contents/scripts/mmg.bat?ref=3c6051729cc63ac2daccb67569882c5857488496","patch":"@@ -21,34 +21,45 @@\n @rem Example Batch script to generate canonical meta-featureSelection classes\n @rem\n @rem Usage\n-@rem   $ mmg.bat <options.file> <class.list>\n+@rem   $ mmg.bat <class.list>\n @rem \n @rem The canonical meta-featureSelection classes can be generated during compilation of\n @rem domain classes. This batch file compiles a set of classes (X.java) listed \n-@rem in <class.list> file. The compiler is invoked with an annotation\n-@rem processor which generates a meta-featureSelection class X_.java for each X.java. \n-@rem The options for annotation processor is specified in <options.file>.\n+@rem in <class.list> file. The compiler discoveres the annotation\n+@rem processor if openjpa classes are in classpath. The discovered annotation\n+@rem processor, however, is active only if -Aopenjpa.metamodel=true is set.  \n @rem \n @rem See also \n-@rem    mmg.options       : The options to Javac compiler \n @rem    domain-class.list : The domain classes to be compiled\n @rem ---------------------------------------------------------------------------\n @echo off\n setlocal\n-set JAVA_HOME=c:\\java\\jdk1.6.0_10\n set JAVAC=%JAVA_HOME%\\bin\\javac\n \n+@rem ---------------------------------------------------------------------------\n+@rem Compiler classpath shown for a typical OpenJPA development environment in Windows. \n+@rem The essential aspect is openjpa libraries must be in the compiler's classpath.\n set M_REPO=\"C:\\Documents and Settings\\Administrator\\.m2\\repository\"\n set SPEC=geronimo-jpa_2.0_spec\n set VERSION=1.0-EA9-SNAPSHOT\n set JPA_LIB=%M_REPO%\\org\\apache\\geronimo\\specs\\%SPEC%\\%VERSION%\\%SPEC%-%VERSION%.jar\n \n set CLASSPATH=%JPA_LIB%\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-lib\\target\\classes\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-persistence\\src\\main\\resources\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-persistence\\target\\classes\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-kernel\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa\\src\\main\\resources\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-persistence\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-kernel\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-lib\\target\\classes\n+\n+@rem ---------------------------------------------------------------------------\n+echo Using Java Compiler %JAVAC%\n+%JAVAC% -version\n+\n+@rem ---------------------------------------------------------------------------\n+@rem Root directory for of the generated source files. Specified as -s option \n+set GEN_DIR=../openjpa-persistence-jdbc/src/test/java\n \n-%JAVAC% -cp %CLASSPATH% @%1 @%2\n+@rem Only one option is shown for logging. Other available options are documented in\n+@rem OpenJPA User Manual and JavaDoc\n+%JAVAC% -cp %CLASSPATH% -s %GEN_DIR% -Aopenjpa.metamodel=true -Aopenjpa.log=TRACE @%1\n \n endlocal"},{"sha":"558f652f8dd8cd8aca0b322e74a79d069bc223f5","filename":"scripts/mmg.options","status":"removed","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/47266d3f9316954259841268f9216286cceeb4e6/scripts/mmg.options","raw_url":"https://github.com/apache/openjpa/raw/47266d3f9316954259841268f9216286cceeb4e6/scripts/mmg.options","contents_url":"https://api.github.com/repos/apache/openjpa/contents/scripts/mmg.options?ref=47266d3f9316954259841268f9216286cceeb4e6","patch":"@@ -1,4 +0,0 @@\n--processor org.apache.openjpa.persistence.meta.AnnotationProcessor6\r\n--Alog=TRACE\r\n--Aout=..\\openjpa-persistence-jdbc\\src\\test\\java\\\r\n--Asource=5\r"}]}

