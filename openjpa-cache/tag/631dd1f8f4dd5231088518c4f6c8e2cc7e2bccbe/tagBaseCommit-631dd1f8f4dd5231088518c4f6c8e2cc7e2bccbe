{"sha":"631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzMWRkMWY4ZjRkZDUyMzEwODg1MThjNGY2YzhlMmNjN2UyYmNjYmU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-02-16T17:24:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-02-16T17:24:25Z"},"message":"[maven-release-plugin]  copy for tag 2.1.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/2.1.0@1071316 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f5729b2d71ebda0ba8241b24c5bb482dc70bbf0","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f5729b2d71ebda0ba8241b24c5bb482dc70bbf0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","html_url":"https://github.com/apache/openjpa/commit/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"295576ffb0080106de70cc4caf23ab38d59cf56a","url":"https://api.github.com/repos/apache/openjpa/commits/295576ffb0080106de70cc4caf23ab38d59cf56a","html_url":"https://github.com/apache/openjpa/commit/295576ffb0080106de70cc4caf23ab38d59cf56a"},{"sha":"f6f2a3ca0016e00bcb03ca2a3c9721f89d540c7d","url":"https://api.github.com/repos/apache/openjpa/commits/f6f2a3ca0016e00bcb03ca2a3c9721f89d540c7d","html_url":"https://github.com/apache/openjpa/commit/f6f2a3ca0016e00bcb03ca2a3c9721f89d540c7d"}],"stats":{"total":264,"additions":238,"deletions":26},"files":[{"sha":"a3474dee19c06603e56061df9baf89be0cdee796","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -343,8 +343,10 @@ else if (isDB2UDBV82OrLater())\n             supportsLockingWithInnerJoin = true;\n             supportsLockingWithOuterJoin = true;\n             forUpdateClause = \"WITH RR USE AND KEEP UPDATE LOCKS\";\n-            if (maj >=9)\n+            \n+            if (maj >= 9) {\n                 supportsXMLColumn = true;\n+            }\n         }\n \n         // platform specific settings"},{"sha":"ebc549efd7adc4bd96cc357ed52dcd364ecd5183","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":52,"deletions":2,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -27,6 +27,8 @@\n import java.sql.Types;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n@@ -393,12 +395,60 @@ public boolean isFatalException(int subtype, SQLException ex) {\n         // SQL State of IX000 is a general purpose Informix error code\n         // category, so only return Boolean.TRUE if we match SQL Codes\n         // recoverable = Boolean.FALSE;\n-        if ((subtype == StoreException.LOCK && ex.getErrorCode() == -154) \n+        if ((subtype == StoreException.LOCK && checkNestedErrorCodes(ex, \"IX000\", -154)) \n           ||(subtype == StoreException.QUERY && ex.getErrorCode() == -213)) {\n             return false;\n         }\n         \n         return super.isFatalException(subtype, ex);\n     }\n-}\n \n+    /**\n+     * Specialized matchErrorState method for Informix.  Informix exceptions are\n+     * typically nested multiple levels deep.  Correct determination of the exception type requires\n+     * inspection of nested exceptions to determine the root cause. A list of Informix (IDS v10) error codes\n+     * can be found here:\n+     * \n+     * http://publib.boulder.ibm.com/infocenter/idshelp/v10/index.jsp?topic=/com.ibm.em.doc/errors_ids100.html\n+     * \n+     * @param errorStates classification of SQL error states by their specific nature. The keys of the\n+     * map represent one of the constants defined in {@link StoreException}. The value corresponding to\n+     * a key represent the set of SQL Error States representing specific category of database error. \n+     * This supplied map is sourced from <code>sql-error-state-codes.xml</xml> and filtered the\n+     * error states for the current database.\n+     * \n+     * @param ex original SQL Exception as raised by the database driver.\n+     * \n+     * @return A constant indicating the category of error as defined in {@link StoreException}.\n+     */\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n+        // Informix SQLState IX000 is a general SQLState that applies to many possible conditions\n+        // If the underlying cause is also an IX000 with error code: \n+        // -107 ISAM error: record is locked. || -154 ISAM error: Lock Timeout Expired.\n+        // the exception type is LOCK.\n+        if (checkNestedErrorCodes(ex, \"IX000\", -107, -154)) {\n+           return StoreException.LOCK;\n+        }\n+        return super.matchErrorState(errorStates, ex);\n+    }\n+    \n+    private boolean checkNestedErrorCodes(SQLException ex, String sqlState, int...errorCodes) {\n+        SQLException cause = ex;\n+        int level = 0;\n+        // Query at most 5 exceptions deep to prevent infinite iteration exception loops\n+        // Typically, the root exception is at level 3.\n+        while (cause != null && level < 5) {\n+            String errorState = cause.getSQLState();\n+            if (sqlState == null || sqlState.equals(errorState)) {\n+                for (int ec : errorCodes) {\n+                    if (cause.getErrorCode() == ec) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            cause = cause.getNextException();\n+            level++;\n+        }\n+        return false;\n+    }\n+}"},{"sha":"dbe121c827cb5c93ab7ec606ca497b26755cd1f7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -22,13 +22,9 @@\n import java.sql.Clob;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n-import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.sql.Timestamp;\n import java.sql.Types;\n-import java.util.Calendar;\n-import java.util.Set;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n@@ -95,7 +91,7 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n                         // MSSQL 2008 supports new date, time and datetime2 types\n                         // Use DATETIME2 which has 100ns vs. 3.333msec precision\n                         dateTypeName = \"DATETIME2\";\n-                        timeTypeName = \"DATETIME\";\n+                        timeTypeName = \"DATETIME2\";\n                         timestampTypeName = \"DATETIME2\";\n                     }\n                 } else {\n@@ -262,7 +258,7 @@ private void appendXmlComparison2(SQLBuffer buf, String op,\n     }\n \n     private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n-        Class rc = Filters.wrap(val.getType());\n+        Class<?> rc = Filters.wrap(val.getType());\n         int type = getJDBCType(JavaTypes.getTypeCode(rc), false);\n         boolean isXmlAttribute = (val.getXmlMapping() == null)\n             ? false : val.getXmlMapping().isXmlAttribute();"},{"sha":"11d08e517d14ab6caaf1f2bcafcfe25bb16ec30c","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -134,7 +134,8 @@ bad-unmapped-rel: \"{0}\" cannot be mapped without stringifying the oid of \\\n \tits \"{1}\" primary key field does not use a simple mapping.\n unmapped-datastore-value: Instances of type \"{0}\" are not valid query \\\n \tparameters because the type is not mapped.\n+cant-set-value: Field \"{1}\" of \"{0}\" can not be set to \"{2}\" value.\n multi-column-version-unsupported:You have specified more than one column for \\\n \tversion data, but the \"{1}\" version strategy does not support multi-column \\\n \tversioning.\n-not-enum-field: Field \"{0}\" is expected to be a enum but actually is of type \"{1}\".\n\\ No newline at end of file\n+not-enum-field: Field \"{0}\" is expected to be a enum but actually is of type \"{1}\"."},{"sha":"dbcece59a879af3d26ae35512b8afcfd2aaeb86e","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -615,6 +615,74 @@\n             </repositories>\n         </profile>\n \n+        <!-- Profile for testing Informix with the Informix JDBC Driver -->\n+        <profile>\n+            <!--\n+                Example Informix profile. You can use this profile if you:\n+                1) have the Informix JDBC artifacts installed in a local repo and \n+                supply the URL:\n+                  -Dids.maven.repo=http://my.local.repo\n+                2) have a copy of the Informix driver and run the following\n+                commands :\n+                    mvn install:install-file -Dfile=${path to ifxjdbc.jar} \\\n+                                             -DgroupId=com.informix \\\n+                                             -DartifactId=informix-driver \\ \n+                                             -Dversion=3.70 \\\n+                                             -Dpackaging=jar\n+\n+                You must also set the following properties:\n+                    -Dopenjpa.ids.url=jdbc:informix-sqli://<HOST>:<PORT>:informixserver=<INFORMIXSERVER>;database=<DBNAME>\n+                    -Dopenjpa.ids.username=<ids_uid>\n+                    -Dopenjpa.ids.password=<ids_pwd>\n+\n+                Optionally, you can override the default Informix groupId,\n+                artifactIds and version by also supplying the following\n+                properties:\n+                    -Dids.groupid=com.informix\n+                    -Dids.driver.artifactid=informix-driver\n+                    -Dids.version=3.70\n+            -->\n+            <id>test-ids-informix</id>\n+            <activation>\n+                <property>\n+                    <name>test-ids-informix</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>${ids.groupid}</groupId>\n+                    <artifactId>${ids.driver.artifactid}</artifactId>\n+                    <version>${ids.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <ids.maven.repo>http://not.a.real.repository</ids.maven.repo>\n+                <ids.groupid>com.informix</ids.groupid>\n+                <ids.driver.artifactid>informix-driver</ids.driver.artifactid>\n+                <ids.version>3.70</ids.version>\n+                <connection.driver.name>com.informix.jdbc.IfxDriver</connection.driver.name>\n+                <connection.url>${openjpa.ids.url}</connection.url>\n+                <connection.username>${openjpa.ids.username}</connection.username>\n+                <connection.password>${openjpa.ids.password}</connection.password>\n+            </properties>\n+            <repositories>\n+                <repository>\n+                    <id>ids.repository</id>\n+                    <name>Informix Repository</name>\n+                    <url>${ids.maven.repo}</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>\n+\n         <!-- Profile for testing with Oracle DB -->\n         <profile>\n             <!--"},{"sha":"cbde67d3ddc845a97899ea3e21f54c9579b5f8bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -221,6 +221,16 @@ public String toString(List<String> list) {\n     \t\tbuf.append(s).append(\"\\r\\n\");\n     \treturn buf.toString();\n     }\n+    \n+    /**\n+     * Returns the last SQL executed or the empty string if the list is\n+     * empty.\n+    */ \n+    public String getLastSQL(List<String> list) {\n+        if (list != null && list.size() > 0)\n+            return list.get(list.size() -1);\n+        return \"\";\n+    }\n \n     public enum SQLAssertType {\n         SQL, NotSQL, ContainsSQL, AllSQLInOrder, AllExactSQLInOrder, "},{"sha":"67556cbaca77f54d0ad10abd59577ba8bd728eb1","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -594,6 +594,74 @@\n             </repositories>\n         </profile>\n \n+        <!-- Profile for testing Informix with the Informix JDBC Driver -->\n+        <profile>\n+            <!--\n+                Example Informix profile. You can use this profile if you:\n+                1) have the Informix JDBC artifacts installed in a local repo and \n+                supply the URL:\n+                  -Dids.maven.repo=http://my.local.repo\n+                2) have a copy of the Informix driver and run the following\n+                commands :\n+                    mvn install:install-file -Dfile=${path to ifxjdbc.jar} \\\n+                                             -DgroupId=com.informix \\\n+                                             -DartifactId=informix-driver \\ \n+                                             -Dversion=3.70 \\\n+                                             -Dpackaging=jar\n+\n+                You must also set the following properties:\n+                    -Dopenjpa.ids.url=jdbc:informix-sqli://<HOST>:<PORT>:informixserver=<INFORMIXSERVER>;database=<DBNAME>\n+                    -Dopenjpa.ids.username=<ids_uid>\n+                    -Dopenjpa.ids.password=<ids_pwd>\n+\n+                Optionally, you can override the default Informix groupId,\n+                artifactIds and version by also supplying the following\n+                properties:\n+                    -Dids.groupid=com.informix\n+                    -Dids.driver.artifactid=informix-driver\n+                    -Dids.version=3.70\n+            -->\n+            <id>test-ids-informix</id>\n+            <activation>\n+                <property>\n+                    <name>test-ids-informix</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>${ids.groupid}</groupId>\n+                    <artifactId>${ids.driver.artifactid}</artifactId>\n+                    <version>${ids.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <ids.maven.repo>http://not.a.real.repository</ids.maven.repo>\n+                <ids.groupid>com.informix</ids.groupid>\n+                <ids.driver.artifactid>informix-driver</ids.driver.artifactid>\n+                <ids.version>3.70</ids.version>\n+                <connection.driver.name>com.informix.jdbc.IfxDriver</connection.driver.name>\n+                <connection.url>${openjpa.ids.url}</connection.url>\n+                <connection.username>${openjpa.ids.username}</connection.username>\n+                <connection.password>${openjpa.ids.password}</connection.password>\n+            </properties>\n+            <repositories>\n+                <repository>\n+                    <id>ids.repository</id>\n+                    <name>Informix Repository</name>\n+                    <url>${ids.maven.repo}</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>\n+\n         <!-- Profile for testing with Oracle DB -->\n         <profile>\n             <!-- "},{"sha":"9f99cf9cda0f6f3ba24e66c490c9a29c5ce9f8c1","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.jdbc.sql.InformixDictionary;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.LockTimeoutException;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n@@ -396,14 +397,14 @@ public void testRepeatedQueryWithPessimisticLocks() {\n         String firstName1 = (String) q1.getSingleResult();\n         //Expected sql for Derby is:\n         //SELECT t0.firstName FROM Employee t0 WHERE (t0.id = CAST(? AS BIGINT)) FOR UPDATE WITH RR\n-        String SQL1 = toString(sql);\n+        String SQL1 = getLastSQL(sql);\n         \n         // run the second time\n         resetSQL();\n         Query q2 = em.createQuery(jpql);\n         q2.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n         String firstName2 = (String) q2.getSingleResult();\n-        String SQL2 = toString(sql);\n+        String SQL2 = getLastSQL(sql);\n         assertEquals(SQL1, SQL2);\n         em.getTransaction().commit();\n     }\n@@ -422,10 +423,18 @@ public void testRefreshLockTimeout() {\n         // Only run this test on DB2 and Derby for now.  It could cause\n         // the test to hang on other platforms.\n         if (!(dict instanceof DerbyDictionary ||\n-              dict instanceof DB2Dictionary)) {\n+              dict instanceof DB2Dictionary ||\n+              dict instanceof InformixDictionary)) {\n             return;\n         }\n         \n+        // Informix currently requires the lock timeout to be set directly on the dictionary\n+        if (dict instanceof InformixDictionary) {\n+            InformixDictionary ifxDict = (InformixDictionary)((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+            ifxDict.lockModeEnabled = true;\n+            ifxDict.lockWaitSeconds = 5;\n+        }\n+\n         EntityManager em = emf.createEntityManager();\n         \n         resetSQL();\n@@ -459,8 +468,11 @@ public void testRefreshLockTimeout() {\n             Map<String,Object> props = new HashMap<String,Object>();\n             // This property does not have any effect on Derby for the locking\n             // condition produced by this test.  Instead, Derby uses the \n-            // lock timeout value specified in the config (pom.xml)\n-            props.put(\"javax.persistence.lock.timeout\", 5000);\n+            // lock timeout value specified in the config (pom.xml).  On Informix,\n+            // the dictionary level timeout (set above) will be used.\n+            if (!(dict instanceof InformixDictionary)) {\n+                props.put(\"javax.persistence.lock.timeout\", 5000);\n+            }\n             em.getTransaction().begin();\n             getLog().trace(\"Main: refresh with force increment\");\n             em.refresh(ve, LockModeType.PESSIMISTIC_FORCE_INCREMENT, props);  "},{"sha":"2bf9febeed6ddfe37dca9bf7d8236c949d3c8eae","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -245,7 +245,8 @@ Bug\n     * [OPENJPA-1911] - InvalidStateException is thrown when merge an entity with derived identiy\n     * [OPENJPA-1918] - MetaDataRepository.preload() ignores class loader returned by PersistenceUnitInfo.getClassLoader()\n     * [OPENJPA-1923] - Allow flexible (non-standard) syntax for collection-valued parameters in IN() expresseion of  JPQL query\n-\n+    * [OPENJPA-1935] - Informix lock exceptions are not mapped properly by OpenJPA\n+    * [OPENJPA-1938] - Typo of time data type in SQLServerdictionary for MSSQL 2008\n \n Improvement\n -----------"},{"sha":"bb9bb302317619a82ff4d838c0f517d1e38cfa7a","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -388,6 +388,10 @@ <h2>        Bug\n </li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1923'>OPENJPA-1923</a>] -         Allow flexible (non-standard) syntax for collection-valued parameters in IN() expresseion of  JPQL query\n </li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1935'>OPENJPA-1935</a>] -         Informix lock exceptions are not mapped properly by OpenJPA\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1938'>OPENJPA-1938</a>] -         Typo of time data type in SQLServerdictionary for MSSQL 2008\n+</li>\n </ul>\n         \n <h2>        Improvement"},{"sha":"898c5c11c2cdccf4134f166939591844162d1df0","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=631dd1f8f4dd5231088518c4f6c8e2cc7e2bccbe","patch":"@@ -143,20 +143,20 @@\n                     enhancement and at runtime.\n                 </para>\n             </section>\n-            <section id=\"setParameters\">\n+            <section id=\"setParameter\">\n                 <title>\n-                    Query.setParameteres()\n+                    Query.setParameter()\n                 </title>\n                 <!-- See OPENJPA-1213 for details. -->\n                 <para>\n-                    The Query interface setParameters() method behavior has\n-                    changed to throw an IllegalArgumentException if more\n-                    parameter substitutions are supplied than defined in the\n-                    createQuery() or createNamedQuery() call, as required by\n-                    the JPA2 specification.\n-                    OpenJPA 1.2.x and prior versions would silently ignore the\n-                    supplied parameter substitutions and allow the Query to be\n-                    processed.\n+                    The Query interface setParameter() method behavior has\n+                    changed to throw an IllegalArgumentException (as required \n+                    by the JPA specification) if more parameter substitutions \n+                    are supplied than defined in the createQuery(), \n+                    createNamedQuery(), or createNativeQuery() invocation.\n+                    OpenJPA 1.2.x and prior versions silently ignored these\n+                    extraneous parameter substitutions and allowed the Query\n+                    to be processed.\n                 </para>\n             </section>\n             <section id=\"serialization\">"}]}

